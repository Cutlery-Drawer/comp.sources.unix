Path: uunet!husc6!bbn!bbn.com!rsalz
From: rsalz@uunet.uu.net (Rich Salz)
Newsgroups: comp.sources.unix
Subject: v14i007:  Device-independant graphics system, with drivers, Part02/24
Message-ID: <552@fig.bbn.com>
Date: 28 Mar 88 15:22:28 GMT
Organization: BBN Laboratories Inc., Cambridge MA
Lines: 1957
Approved: rsalz@uunet.UU.NET

Submitted-by: Joe Dellinger <joe@hanauma.STANFORD.EDU>
Posting-number: Volume 14, Issue 7
Archive-name: vplot/part02

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 2 (of 24)."
# Wrapped by rsalz@fig.bbn.com on Fri Mar 25 11:46:17 1988
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'Envision_device/envilib/EnviMakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Envision_device/envilib/EnviMakef'\"
else
echo shar: Extracting \"'Envision_device/envilib/EnviMakef'\" \(399 characters\)
sed "s/^X//" >'Envision_device/envilib/EnviMakef' <<'END_OF_FILE'
SENVILIB= ./envilib/Envilib.a
X
Envipen: Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o $(SENVILIB) $(TSEPLIB) ./envilib/enviconf.c
X	cc -c $(CFLAGS)  envilib/enviconf.c
X	cc $(CFLAGS) -o Envipen Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o enviconf.o $(SENVILIB)\
X					$(GENLIB) $(UTILLIB) $(TSEPLIB) $(LIBS)
X	rm -f enviconf.o
X
X$(SENVILIB): envilib/*.c
X	cd envilib; make sep CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 399 -ne `wc -c <'Envision_device/envilib/EnviMakef'`; then
    echo shar: \"'Envision_device/envilib/EnviMakef'\" unpacked with wrong size!
fi
# end of 'Envision_device/envilib/EnviMakef'
fi
if test -f 'Envision_device/envilib/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Envision_device/envilib/Makefile'\"
else
echo shar: Extracting \"'Envision_device/envilib/Makefile'\" \(440 characters\)
sed "s/^X//" >'Envision_device/envilib/Makefile' <<'END_OF_FILE'
X#
X# Envision routines
X#
CFILES= enviopen.c enviclose.c envierase.c envimessage.c envigetpoint.c\
X	    envireset.c enviattr.c enviplot.c envipoly.c enviset.c envipoint.c
X
default: envilib.a
X
sep: Envilib.a
X
envilib.a: $(CFILES)
X	rm -f *.o
X	-cc -c $(CFLAGS) $?
X	ar crv envilib.a *.o
X	ranlib envilib.a
X	rm -f *.o
X
Envilib.a: $(CFILES)
X	rm -f *.o
X	-cc -c -DSEP $(CFLAGS) $?
X	ar crv Envilib.a *.o
X	ranlib Envilib.a
X	rm -f *.o
X
clean:
X	rm -f *.o
END_OF_FILE
if test 440 -ne `wc -c <'Envision_device/envilib/Makefile'`; then
    echo shar: \"'Envision_device/envilib/Makefile'\" unpacked with wrong size!
fi
# end of 'Envision_device/envilib/Makefile'
fi
if test -f 'Envision_device/envilib/envimakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Envision_device/envilib/envimakef'\"
else
echo shar: Extracting \"'Envision_device/envilib/envimakef'\" \(419 characters\)
sed "s/^X//" >'Envision_device/envilib/envimakef' <<'END_OF_FILE'
ENVILIB= ./envilib/envilib.a
X
envipen: main_vplot.o init_vplot.o proc_vplot.o dovplot.o\
X		envilib/enviconf.c $(ENVILIB) $(GENLIB)\
X		 $(UTILLIB) $(LOCLIB)
X	cc -c $(CFLAGS) envilib/enviconf.c
X	cc $(CFLAGS) -o envipen main_vplot.o init_vplot.o proc_vplot.o dovplot.o \
X				enviconf.o $(ENVILIB)\
X				$(GENLIB) $(UTILLIB) $(LOCLIB) $(LIBS)
X	rm -f enviconf.o
X
X$(ENVILIB): envilib/*.c
X	cd envilib; make CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 419 -ne `wc -c <'Envision_device/envilib/envimakef'`; then
    echo shar: \"'Envision_device/envilib/envimakef'\" unpacked with wrong size!
fi
# end of 'Envision_device/envilib/envimakef'
fi
if test -f 'Envision_device/envilib/known_bugs' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Envision_device/envilib/known_bugs'\"
else
echo shar: Extracting \"'Envision_device/envilib/known_bugs'\" \(482 characters\)
sed "s/^X//" >'Envision_device/envilib/known_bugs' <<'END_OF_FILE'
Interactive capabilities on Envisions (Lear Sieglers) seem to be
really messed up.
This is the best I could do: you have to keep trying until the
cursor flashes. Hit a key and then the return key again and again.
Using the "q" key will cause you to exit.
X
Can anyone out there manage to figure out how to get
this to work better? I KNOW it's possible -- I've seen interactive programs
on Envisions before. But it doesn't seem to work the way the manual describes.
X
X	- Joe Dellinger
END_OF_FILE
if test 482 -ne `wc -c <'Envision_device/envilib/known_bugs'`; then
    echo shar: \"'Envision_device/envilib/known_bugs'\" unpacked with wrong size!
fi
# end of 'Envision_device/envilib/known_bugs'
fi
if test -f 'Imagen_device/imaglib/ImagMakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Imagen_device/imaglib/ImagMakef'\"
else
echo shar: Extracting \"'Imagen_device/imaglib/ImagMakef'\" \(391 characters\)
sed "s/^X//" >'Imagen_device/imaglib/ImagMakef' <<'END_OF_FILE'
SIMAGLIB= ./imaglib/Imaglib.a
X
Ipen: Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o $(SIMAGLIB) $(TSEPLIB) ./imaglib/imagconf.c
X	cc -c $(CFLAGS) imaglib/imagconf.c
X	cc $(CFLAGS) -o Ipen Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o imagconf.o $(SIMAGLIB)\
X				$(GENLIB) $(UTILLIB) $(TSEPLIB) $(LIBS)
X	rm -f imagconf.o
X
X$(SIMAGLIB): imaglib/*.c
X	cd imaglib; make sep CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 391 -ne `wc -c <'Imagen_device/imaglib/ImagMakef'`; then
    echo shar: \"'Imagen_device/imaglib/ImagMakef'\" unpacked with wrong size!
fi
# end of 'Imagen_device/imaglib/ImagMakef'
fi
if test -f 'Imagen_device/imaglib/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Imagen_device/imaglib/Makefile'\"
else
echo shar: Extracting \"'Imagen_device/imaglib/Makefile'\" \(404 characters\)
sed "s/^X//" >'Imagen_device/imaglib/Makefile' <<'END_OF_FILE'
X#
X# Imagen 8/300
X#
CFILES= imagopen.c imagclose.c imagerase.c imagreset.c imagvector.c imagplot.c\
X	imagpoly.c imagraster.c imagattr.c
X
default: imaglib.a
X
sep: Imaglib.a
X
imaglib.a: $(CFILES)
X	rm -f *.o
X	cc -c $(CFLAGS) $?
X	ar crv imaglib.a *.o
X	ranlib imaglib.a
X	rm -f *.o
X
Imaglib.a: $(CFILES)
X	rm -f *.o
X	cc -c $(CFLAGS) -DSEP $?
X	ar crv Imaglib.a *.o
X	ranlib Imaglib.a
X	rm -f *.o
X
clean:
X	rm -f *.o
END_OF_FILE
if test 404 -ne `wc -c <'Imagen_device/imaglib/Makefile'`; then
    echo shar: \"'Imagen_device/imaglib/Makefile'\" unpacked with wrong size!
fi
# end of 'Imagen_device/imaglib/Makefile'
fi
if test -f 'Imagen_device/imaglib/imagmakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Imagen_device/imaglib/imagmakef'\"
else
echo shar: Extracting \"'Imagen_device/imaglib/imagmakef'\" \(404 characters\)
sed "s/^X//" >'Imagen_device/imaglib/imagmakef' <<'END_OF_FILE'
IMAGLIB= ./imaglib/imaglib.a
X
ipen: main_vplot.o init_vplot.o proc_vplot.o dovplot.o imaglib/imagconf.c $(IMAGLIB) $(GENLIB)\
X		 $(UTILLIB) $(LOCLIB)
X	cc -c $(CFLAGS) imaglib/imagconf.c
X	cc $(CFLAGS) -o ipen main_vplot.o init_vplot.o proc_vplot.o dovplot.o imagconf.o $(IMAGLIB)\
X				$(GENLIB) $(UTILLIB) $(LOCLIB) $(LIBS)
X	rm -f imagconf.o
X
X$(IMAGLIB): imaglib/*.c
X	cd imaglib; make CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 404 -ne `wc -c <'Imagen_device/imaglib/imagmakef'`; then
    echo shar: \"'Imagen_device/imaglib/imagmakef'\" unpacked with wrong size!
fi
# end of 'Imagen_device/imaglib/imagmakef'
fi
if test -f 'Imagen_device/imaglib/known_bugs' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Imagen_device/imaglib/known_bugs'\"
else
echo shar: Extracting \"'Imagen_device/imaglib/known_bugs'\" \(581 characters\)
sed "s/^X//" >'Imagen_device/imaglib/known_bugs' <<'END_OF_FILE'
The imagen itself is buggy as ----, and as a result this filter has to do a lot
of work to kluge around them. The imagen is our primary hardcopy device and so
this filter should pretty well be completely debugged by now.
X
One thing I can't get around: if you have overlay=no, vectors near the
edge of a raster block can get erased. This is because the imagen can't
arbitrarily position raster. Imagraster makes it look like the imagen
CAN arbitrarily position raster, but at the expense of adding
background-colored padding around the desired raster as necessary.
X
X- Joe Dellinger
END_OF_FILE
if test 581 -ne `wc -c <'Imagen_device/imaglib/known_bugs'`; then
    echo shar: \"'Imagen_device/imaglib/known_bugs'\" unpacked with wrong size!
fi
# end of 'Imagen_device/imaglib/known_bugs'
fi
if test -f 'Masscomp_device/gpslib/GpsMakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Masscomp_device/gpslib/GpsMakef'\"
else
echo shar: Extracting \"'Masscomp_device/gpslib/GpsMakef'\" \(393 characters\)
sed "s/^X//" >'Masscomp_device/gpslib/GpsMakef' <<'END_OF_FILE'
SGPSPENLIB= ./gpslib/Gpslib.a
X
Gpspen: Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o $(SGPSPENLIB) $(TSEPLIB) ./gpslib/gpsconf.c
X	cc -c $(CFLAGS) gpslib/rasconf.c
X	cc $(CFLAGS) -o Gpspen Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o gpsconf.o $(SGPSPENLIB)\
X				$(GENLIB) $(UTILLIB) $(TSEPLIB) $(LIBS)
X	rm -f gpsconf.o
X
X$(SGPSPENLIB): gpslib/*.c
X	cd gpslib; make sep CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 393 -ne `wc -c <'Masscomp_device/gpslib/GpsMakef'`; then
    echo shar: \"'Masscomp_device/gpslib/GpsMakef'\" unpacked with wrong size!
fi
# end of 'Masscomp_device/gpslib/GpsMakef'
fi
if test -f 'Masscomp_device/gpslib/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Masscomp_device/gpslib/Makefile'\"
else
echo shar: Extracting \"'Masscomp_device/gpslib/Makefile'\" \(351 characters\)
sed "s/^X//" >'Masscomp_device/gpslib/Makefile' <<'END_OF_FILE'
X#
X#	GPS routines
X#
CFILES= gpsattr.c gpsclose.c gpsconf.c\
X	gpsopen.c gpsreset.c gpsplot.c
X
default: gpslib.a
X
sep: Gpslib.a
gpslib.a: $(CFILES)
X	rm -f *.o
X	cc -c $(CFLAGS) $?
X	ar crv gpslib.a *.o
X	ranlib gpslib.a
X	rm -f *.o
X
Gpslib.a: $(CFILES)
X	rm -f *.o
X	cc -c $(CFLAGS) -DSEP $?
X	ar crv Gpslib.a *.o
X	ranlib Gpslib.a
X	rm -f *.o
X
clean:
X	rm -f *.o
END_OF_FILE
if test 351 -ne `wc -c <'Masscomp_device/gpslib/Makefile'`; then
    echo shar: \"'Masscomp_device/gpslib/Makefile'\" unpacked with wrong size!
fi
# end of 'Masscomp_device/gpslib/Makefile'
fi
if test -f 'Masscomp_device/gpslib/gpsmakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Masscomp_device/gpslib/gpsmakef'\"
else
echo shar: Extracting \"'Masscomp_device/gpslib/gpsmakef'\" \(394 characters\)
sed "s/^X//" >'Masscomp_device/gpslib/gpsmakef' <<'END_OF_FILE'
GPSLIB= ./gpslib/gpslib.a
X
gpspen: main_vplot.o init_vplot.o proc_vplot.o dovplot.o gpslib/gpsconf.c $(GENLIB) $(GPSLIB)\
X		 $(UTILLIB) $(LOCLIB)
X	cc -c $(CFLAGS) gpslib/gpsconf.c
X	cc $(CFLAGS) -o gpspen main_vplot.o init_vplot.o proc_vplot.o dovplot.o gpsconf.o $(GPSLIB)\
X				$(GENLIB) $(UTILLIB) $(LOCLIB) $(LIBS)
X	rm -f gpsconf.o
X
X$(GPSLIB): gpslib/*.c
X	cd gpslib; make CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 394 -ne `wc -c <'Masscomp_device/gpslib/gpsmakef'`; then
    echo shar: \"'Masscomp_device/gpslib/gpsmakef'\" unpacked with wrong size!
fi
# end of 'Masscomp_device/gpslib/gpsmakef'
fi
if test -f 'Printronix_device/lprlib/LprMakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Printronix_device/lprlib/LprMakef'\"
else
echo shar: Extracting \"'Printronix_device/lprlib/LprMakef'\" \(381 characters\)
sed "s/^X//" >'Printronix_device/lprlib/LprMakef' <<'END_OF_FILE'
SLPRLIB= ./lprlib/Lprlib.a
X
Lprpen: Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o $(SLPRLIB) $(TSEPLIB) ./lprlib/lprconf.c
X	cc -c $(CFLAGS) lprlib/lprconf.c
X	cc $(CFLAGS) -o Lprpen Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o lprconf.o $(SLPRLIB)\
X				$(GENLIB) $(UTILLIB) $(TSEPLIB) $(LIBS)
X	rm -f lprconf.o
X
X$(SLPRLIB): lprlib/*.c
X	cd lprlib; make sep CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 381 -ne `wc -c <'Printronix_device/lprlib/LprMakef'`; then
    echo shar: \"'Printronix_device/lprlib/LprMakef'\" unpacked with wrong size!
fi
# end of 'Printronix_device/lprlib/LprMakef'
fi
if test -f 'Printronix_device/lprlib/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Printronix_device/lprlib/Makefile'\"
else
echo shar: Extracting \"'Printronix_device/lprlib/Makefile'\" \(358 characters\)
sed "s/^X//" >'Printronix_device/lprlib/Makefile' <<'END_OF_FILE'
X#
X#	Printronix P300/P600 routine
X#
CFILES= lpropen.c lprclose.c lprerase.c lprvector.c lprattr.c
X
default: lprlib.a
X
sep: Lprlib.a
X
lprlib.a: $(CFILES)
X	rm -f *.o
X	cc -c $(CFLAGS) $?
X	ar crv lprlib.a *.o
X	ranlib lprlib.a
X	rm -f *.o
X
Lprlib.a: $(CFILES)
X	rm -f *.o
X	cc -c $(CFLAGS) -DSEP $?
X	ar crv Lprlib.a *.o
X	ranlib Lprlib.a
X	rm -f *.o
X
clean:
X	rm -f *.o
END_OF_FILE
if test 358 -ne `wc -c <'Printronix_device/lprlib/Makefile'`; then
    echo shar: \"'Printronix_device/lprlib/Makefile'\" unpacked with wrong size!
fi
# end of 'Printronix_device/lprlib/Makefile'
fi
if test -f 'Printronix_device/lprlib/lprdoc.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Printronix_device/lprlib/lprdoc.h'\"
else
echo shar: Extracting \"'Printronix_device/lprlib/lprdoc.h'\" \(496 characters\)
sed "s/^X//" >'Printronix_device/lprlib/lprdoc.h' <<'END_OF_FILE'
char *documentation[] = {
X" ",
X"NAME",
X#ifdef SEP
X"    Lprpen - SEPlib vplot filter for printronix P300/P600 printers",
X#else
X"    lprpen - vplot filter for printronix P300/P600 printers",
X#endif
X" ",
X"SYNOPSIS",
X#ifdef SEP
X"    Lprpen [options] in=vplot-inputfile OR headerfile on standard in",
X#else 
X"    [l]prpen [options] [inputfiles]",
X#endif
X" ",
X"OPTIONS",
X#include "../include/gendoc.h"
X" ",
X"SEE ALSO",
X"    man pen"
X};
int	doclength = { sizeof documentation/sizeof documentation[0] };
END_OF_FILE
if test 496 -ne `wc -c <'Printronix_device/lprlib/lprdoc.h'`; then
    echo shar: \"'Printronix_device/lprlib/lprdoc.h'\" unpacked with wrong size!
fi
# end of 'Printronix_device/lprlib/lprdoc.h'
fi
if test -f 'Printronix_device/lprlib/lprmakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Printronix_device/lprlib/lprmakef'\"
else
echo shar: Extracting \"'Printronix_device/lprlib/lprmakef'\" \(393 characters\)
sed "s/^X//" >'Printronix_device/lprlib/lprmakef' <<'END_OF_FILE'
LPRLIB= ./lprlib/lprlib.a
X
lprpen: main_vplot.o init_vplot.o proc_vplot.o dovplot.o lprlib/lprconf.c $(LPRLIB) $(GENLIB)\
X		$(UTILLIB) $(LOCLIB)
X	cc -c $(CFLAGS) lprlib/lprconf.c
X	cc $(CFLAGS) -o lprpen main_vplot.o init_vplot.o proc_vplot.o dovplot.o lprconf.o $(LPRLIB)\
X				$(GENLIB) $(UTILLIB) $(LOCLIB) $(LIBS)
X	rm -f lprconf.o
X
X$(LPRLIB): lprlib/*.c
X	cd lprlib; make CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 393 -ne `wc -c <'Printronix_device/lprlib/lprmakef'`; then
    echo shar: \"'Printronix_device/lprlib/lprmakef'\" unpacked with wrong size!
fi
# end of 'Printronix_device/lprlib/lprmakef'
fi
if test -f 'Printronix_device/lprlib/lprpen.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Printronix_device/lprlib/lprpen.h'\"
else
echo shar: Extracting \"'Printronix_device/lprlib/lprpen.h'\" \(384 characters\)
sed "s/^X//" >'Printronix_device/lprlib/lprpen.h' <<'END_OF_FILE'
X#ifdef SEP
X#define GETPAR fetch
X#else
X#define GETPAR getpar
X#endif
X
X#define NYW	50		/* width of raster lines in words */
X#define XSTRSZ	990	/* starting x size */
X#define XINCSZ	330	/* increment to x size */
X
X/*
X * raster memory area
X */
extern short *mem;
extern int xlimit;
extern char inbuf[];
extern short line[];
X
extern int file_created;
extern char spoolfile[];
char *malloc();
END_OF_FILE
if test 384 -ne `wc -c <'Printronix_device/lprlib/lprpen.h'`; then
    echo shar: \"'Printronix_device/lprlib/lprpen.h'\" unpacked with wrong size!
fi
# end of 'Printronix_device/lprlib/lprpen.h'
fi
if test -f 'RasterTek_device/rteklib/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'RasterTek_device/rteklib/Makefile'\"
else
echo shar: Extracting \"'RasterTek_device/rteklib/Makefile'\" \(532 characters\)
sed "s/^X//" >'RasterTek_device/rteklib/Makefile' <<'END_OF_FILE'
X#
X#	Raster Tech 1-10, 1-75, 1-80 routines
X#
CFILES= rtekopen.c rtekclose.c rtekerase.c rtekplot.c \
X	rtekattr.c rtekutil.c rtekpoint.c rtekarea.c \
X	rtekraster.c rtekgetpoint.c
X
X# flags R110, R175, R180 for various models
CRTEKFLAGS= -DR175
X
default: rteklib.a
X
sep: Rteklib.a
X
rteklib.a: $(CFILES)
X	rm -f *.o
X	cc -c $(CFLAGS) $(CRTEKFLAGS) $?
X	ar crv rteklib.a *.o
X	ranlib rteklib.a
X	rm -f *.o
X
Rteklib.a: $(CFILES)
X	rm -f *.o
X	cc -c $(CFLAGS) $(CRTEKFLAGS) $?
X	ar crv Rteklib.a *.o
X	ranlib Rteklib.a
X	rm -f *.o
X
clean:
X	rm -f *.o
END_OF_FILE
if test 532 -ne `wc -c <'RasterTek_device/rteklib/Makefile'`; then
    echo shar: \"'RasterTek_device/rteklib/Makefile'\" unpacked with wrong size!
fi
# end of 'RasterTek_device/rteklib/Makefile'
fi
if test -f 'RasterTek_device/rteklib/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'RasterTek_device/rteklib/README'\"
else
echo shar: Extracting \"'RasterTek_device/rteklib/README'\" \(464 characters\)
sed "s/^X//" >'RasterTek_device/rteklib/README' <<'END_OF_FILE'
Rtekpen for the Raster Tech 1-10, 1-75, and 1-80.
X
POLYGN command on the rastertek defective. Genpatarea used instead.
X
Flushing is done whenever an entire command will not fit in the remainder
of the buffer. This is because the DMA for the Rtek is buggy and overruns
the end of the file. The end of the file is padded with NOP's so that no
harm comes from the extra garbage sent along.
X
Author Rick Ottolini, with some touching up by Stew Levin and Joe Dellinger
END_OF_FILE
if test 464 -ne `wc -c <'RasterTek_device/rteklib/README'`; then
    echo shar: \"'RasterTek_device/rteklib/README'\" unpacked with wrong size!
fi
# end of 'RasterTek_device/rteklib/README'
fi
if test -f 'RasterTek_device/rteklib/RtekMakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'RasterTek_device/rteklib/RtekMakef'\"
else
echo shar: Extracting \"'RasterTek_device/rteklib/RtekMakef'\" \(391 characters\)
sed "s/^X//" >'RasterTek_device/rteklib/RtekMakef' <<'END_OF_FILE'
SRTEKLIB= ./rteklib/Rteklib.a
X
Rpen: Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o $(SRTEKLIB) $(TSEPLIB) ./rteklib/rtekconf.c
X	cc -c $(CFLAGS) rteklib/rtekconf.c
X	cc $(CFLAGS) -o Rpen Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o rtekconf.o $(SRTEKLIB)\
X				$(GENLIB) $(UTILLIB) $(TSEPLIB) $(LIBS)
X	rm -f rtekconf.o
X
X$(SRTEKLIB): rteklib/*.c
X	cd rteklib; make sep CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 391 -ne `wc -c <'RasterTek_device/rteklib/RtekMakef'`; then
    echo shar: \"'RasterTek_device/rteklib/RtekMakef'\" unpacked with wrong size!
fi
# end of 'RasterTek_device/rteklib/RtekMakef'
fi
if test -f 'RasterTek_device/rteklib/rtekdoc.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'RasterTek_device/rteklib/rtekdoc.h'\"
else
echo shar: Extracting \"'RasterTek_device/rteklib/rtekdoc.h'\" \(478 characters\)
sed "s/^X//" >'RasterTek_device/rteklib/rtekdoc.h' <<'END_OF_FILE'
char *documentation[] = {
X"NAME",
X#ifdef SEP
X"	Rpen - SEPLIB vplot filter for Raster Tech",
X#else
X"	rpen - vplot filter for Raster Tech",
X#endif
X"",
X"SYNOPSIS",
X#ifdef SEP
X"	Rpen [options] in=vplot-input file OR header file OR stdin",
X#else
X"	rpen [options] [inputfiles]",
X#endif
X"",
X"OPTIONS",
X"	block=[s,m,l]   small,medium,or large dma block size",
X#include "../include/gendoc.h",
X"",
X"SEE ALSO",
X"	man pen"
X};
int doclength = {sizeof documentation/sizeof documentation[0]};
END_OF_FILE
if test 478 -ne `wc -c <'RasterTek_device/rteklib/rtekdoc.h'`; then
    echo shar: \"'RasterTek_device/rteklib/rtekdoc.h'\" unpacked with wrong size!
fi
# end of 'RasterTek_device/rteklib/rtekdoc.h'
fi
if test -f 'RasterTek_device/rteklib/rtekmakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'RasterTek_device/rteklib/rtekmakef'\"
else
echo shar: Extracting \"'RasterTek_device/rteklib/rtekmakef'\" \(404 characters\)
sed "s/^X//" >'RasterTek_device/rteklib/rtekmakef' <<'END_OF_FILE'
RTEKLIB= ./rteklib/rteklib.a
X
rpen: main_vplot.o init_vplot.o proc_vplot.o dovplot.o rteklib/rtekconf.c $(RTEKLIB) $(GENLIB)\
X		 $(UTILLIB) $(LOCLIB)
X	cc -c $(CFLAGS) rteklib/rtekconf.c
X	cc $(CFLAGS) -o rpen main_vplot.o init_vplot.o proc_vplot.o dovplot.o rtekconf.o $(RTEKLIB)\
X				$(GENLIB) $(UTILLIB) $(LOCLIB) $(LIBS)
X	rm -f rtekconf.o
X
X$(RTEKLIB): rteklib/*.c
X	cd rteklib; make CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 404 -ne `wc -c <'RasterTek_device/rteklib/rtekmakef'`; then
    echo shar: \"'RasterTek_device/rteklib/rtekmakef'\" unpacked with wrong size!
fi
# end of 'RasterTek_device/rteklib/rtekmakef'
fi
if test -f 'Regis_device/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Regis_device/README'\"
else
echo shar: Extracting \"'Regis_device/README'\" \(619 characters\)
sed "s/^X//" >'Regis_device/README' <<'END_OF_FILE'
Comments on this device-dependent Vplot code distribution:
X
X	This distribution won't do you much good unless you have the Vplot
Kernel Distribution first. If you don't have it, don't bother with this yet!
X
X	Now that I know you have the Vplot device-independent code ---
X
X	The directory given in this distribution contains the device-dependent
vplot source code for some device (or group of related devices). Place the
directory "*lib" into /...site-dependent path.../vplot/filters in order to add
support for this device to your Vplot source. You'll then need to re-run
X"MakeMake" again.
X
X	- Joe Dellinger, Feb 15 1988
END_OF_FILE
if test 619 -ne `wc -c <'Regis_device/README'`; then
    echo shar: \"'Regis_device/README'\" unpacked with wrong size!
fi
# end of 'Regis_device/README'
fi
if test -f 'Regis_device/gigilib/GigiMakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Regis_device/gigilib/GigiMakef'\"
else
echo shar: Extracting \"'Regis_device/gigilib/GigiMakef'\" \(398 characters\)
sed "s/^X//" >'Regis_device/gigilib/GigiMakef' <<'END_OF_FILE'
SGIGILIB= ./gigilib/Gigilib.a
X
Gigipen: Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o $(SGIGILIB) $(TSEPLIB) ./gigilib/gigiconf.c
X	cc -c $(CFLAGS) gigilib/gigiconf.c
X	cc $(CFLAGS) -o Gigipen Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o gigiconf.o $(SGIGILIB)\
X					$(GENLIB) $(UTILLIB) $(TSEPLIB) $(LIBS)
X	rm -f gigiconf.o
X
X$(SGIGILIB): gigilib/*.c
X	cd gigilib; make sep CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 398 -ne `wc -c <'Regis_device/gigilib/GigiMakef'`; then
    echo shar: \"'Regis_device/gigilib/GigiMakef'\" unpacked with wrong size!
fi
# end of 'Regis_device/gigilib/GigiMakef'
fi
if test -f 'Regis_device/gigilib/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Regis_device/gigilib/Makefile'\"
else
echo shar: Extracting \"'Regis_device/gigilib/Makefile'\" \(436 characters\)
sed "s/^X//" >'Regis_device/gigilib/Makefile' <<'END_OF_FILE'
X#
X# Gigi and vt125 (DEC regis) routines
X#
CFILES= gigiopen.c gigiclose.c gigierase.c gigimessage.c\
X	    gigireset.c gigiattr.c gigiplot.c gigipoly.c gigigetpoint.c
X
default: gigilib.a
X
sep: Gigilib.a
X
gigilib.a: $(CFILES)
X	rm -f *.o
X	-cc -c $(CFLAGS) $?
X	ar crv gigilib.a *.o
X	ranlib gigilib.a
X	rm -f *.o
X
Gigilib.a: $(CFILES)
X	rm -f *.o
X	-cc -c -DSEP $(CFLAGS) $?
X	ar crv Gigilib.a *.o
X	ranlib Gigilib.a
X	rm -f *.o
X
clean:
X	rm -f *.o
END_OF_FILE
if test 436 -ne `wc -c <'Regis_device/gigilib/Makefile'`; then
    echo shar: \"'Regis_device/gigilib/Makefile'\" unpacked with wrong size!
fi
# end of 'Regis_device/gigilib/Makefile'
fi
if test -f 'Regis_device/gigilib/gigidoc.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Regis_device/gigilib/gigidoc.h'\"
else
echo shar: Extracting \"'Regis_device/gigilib/gigidoc.h'\" \(501 characters\)
sed "s/^X//" >'Regis_device/gigilib/gigidoc.h' <<'END_OF_FILE'
X
char *documentation[] = {
X"NAME",
X#ifdef SEP
X"	Gigipen - SEPlib vplot filter for Dec Gigi and VT125 (Regis) terminals",
X#else
X"	gigipen - vplot filter for Dec Gigi and VT125 (Regis) terminals",
X#endif
X" ",
X"SYNOPSIS",
X#ifdef SEP
X"	Gigipen [options] in=file or < Header1 [Header2,...]",
X#else
X"	gigipen [options] file1 [file2,...] or in=file or < file",
X#endif
X" ",
X"OPTIONS",
X"	wstype=[gigi,vt125]",
X#include "../include/gendoc.h"
X};
int	doclength = { sizeof documentation/sizeof documentation[0] };
END_OF_FILE
if test 501 -ne `wc -c <'Regis_device/gigilib/gigidoc.h'`; then
    echo shar: \"'Regis_device/gigilib/gigidoc.h'\" unpacked with wrong size!
fi
# end of 'Regis_device/gigilib/gigidoc.h'
fi
if test -f 'Regis_device/gigilib/gigimakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Regis_device/gigilib/gigimakef'\"
else
echo shar: Extracting \"'Regis_device/gigilib/gigimakef'\" \(410 characters\)
sed "s/^X//" >'Regis_device/gigilib/gigimakef' <<'END_OF_FILE'
GIGILIB= ./gigilib/gigilib.a
X
gigipen: main_vplot.o init_vplot.o proc_vplot.o dovplot.o gigilib/gigiconf.c $(GIGILIB) $(GENLIB)\
X		 $(UTILLIB) $(LOCLIB)
X	cc -c $(CFLAGS) gigilib/gigiconf.c
X	cc $(CFLAGS) -o gigipen main_vplot.o init_vplot.o proc_vplot.o dovplot.o gigiconf.o $(GIGILIB)\
X				$(GENLIB) $(UTILLIB) $(LOCLIB) $(LIBS)
X	rm -f gigiconf.o
X
X$(GIGILIB): gigilib/*.c
X	cd gigilib; make CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 410 -ne `wc -c <'Regis_device/gigilib/gigimakef'`; then
    echo shar: \"'Regis_device/gigilib/gigimakef'\" unpacked with wrong size!
fi
# end of 'Regis_device/gigilib/gigimakef'
fi
if test -f 'Tek_device/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Tek_device/README'\"
else
echo shar: Extracting \"'Tek_device/README'\" \(619 characters\)
sed "s/^X//" >'Tek_device/README' <<'END_OF_FILE'
Comments on this device-dependent Vplot code distribution:
X
X	This distribution won't do you much good unless you have the Vplot
Kernel Distribution first. If you don't have it, don't bother with this yet!
X
X	Now that I know you have the Vplot device-independent code ---
X
X	The directory given in this distribution contains the device-dependent
vplot source code for some device (or group of related devices). Place the
directory "*lib" into /...site-dependent path.../vplot/filters in order to add
support for this device to your Vplot source. You'll then need to re-run
X"MakeMake" again.
X
X	- Joe Dellinger, Feb 15 1988
END_OF_FILE
if test 619 -ne `wc -c <'Tek_device/README'`; then
    echo shar: \"'Tek_device/README'\" unpacked with wrong size!
fi
# end of 'Tek_device/README'
fi
if test -f 'Tek_device/cteklib/CtekMakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Tek_device/cteklib/CtekMakef'\"
else
echo shar: Extracting \"'Tek_device/cteklib/CtekMakef'\" \(398 characters\)
sed "s/^X//" >'Tek_device/cteklib/CtekMakef' <<'END_OF_FILE'
SCTEKLIB= ./cteklib/Cteklib.a
X
Ctekpen: Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o $(SCTEKLIB) $(TSEPLIB) ./cteklib/ctekconf.c
X	cc -c $(CFLAGS) cteklib/ctekconf.c
X	cc $(CFLAGS) -o Ctekpen Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o ctekconf.o $(SCTEKLIB)\
X					$(GENLIB) $(UTILLIB) $(TSEPLIB) $(LIBS)
X	rm -f ctekconf.o
X
X$(SCTEKLIB): cteklib/*.c
X	cd cteklib; make sep CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 398 -ne `wc -c <'Tek_device/cteklib/CtekMakef'`; then
    echo shar: \"'Tek_device/cteklib/CtekMakef'\" unpacked with wrong size!
fi
# end of 'Tek_device/cteklib/CtekMakef'
fi
if test -f 'Tek_device/cteklib/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Tek_device/cteklib/Makefile'\"
else
echo shar: Extracting \"'Tek_device/cteklib/Makefile'\" \(534 characters\)
sed "s/^X//" >'Tek_device/cteklib/Makefile' <<'END_OF_FILE'
X#
X# Ctek (tektronix 4105) routines
X#
CFILES= ctekopen.c ctekclose.c ctekerase.c ctekmessage.c \
X	    ctekreset.c ctekattr.c ctekplot.c ctekpoly.c \
X		ctekpack.c ctekcolor.c cteksetmode.c cteklinestyle.c\
X		cteksetcoltab.c ctekraster.c ctekcolmap.c ctekgetpoint.c
X
default: cteklib.a
X
sep: Cteklib.a
X
cteklib.a: $(CFILES)
X	rm -f *.o
X	-cc -c $(CFLAGS) $?
X	ar crv cteklib.a *.o
X	ranlib cteklib.a
X	rm -f *.o
X
Cteklib.a: $(CFILES)
X	rm -f *.o
X	-cc -c -DSEP $(CFLAGS) $?
X	ar crv Cteklib.a *.o
X	ranlib Cteklib.a
X	rm -f *.o
X
clean:
X	rm -f *.o
END_OF_FILE
if test 534 -ne `wc -c <'Tek_device/cteklib/Makefile'`; then
    echo shar: \"'Tek_device/cteklib/Makefile'\" unpacked with wrong size!
fi
# end of 'Tek_device/cteklib/Makefile'
fi
if test -f 'Tek_device/cteklib/ctek.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Tek_device/cteklib/ctek.h'\"
else
echo shar: Extracting \"'Tek_device/cteklib/ctek.h'\" \(459 characters\)
sed "s/^X//" >'Tek_device/cteklib/ctek.h' <<'END_OF_FILE'
X/*
X * Modes, macros for Tek 4105.
X */
X#include	<stdio.h>
X#define	ESC	033
X#define	FF	014
X#define	GS	035
X#define	US	037
X#define SB	032
X#define	Putc(C)	putc(C, pltout)
X
X#define	ANSI	0	/* ANSI mode */
X#define	TEK	1	/* Tek, or Alpha mode */
X#define	VECTOR	2	/* Vector mode */
X
X/*
X * device level variables
X */
extern int lost;			/* used by genvector */
extern int messagecount;
extern int tekmode;
X
X/* 
X * TEMP: should be global option
X */
extern int draw_border;
END_OF_FILE
if test 459 -ne `wc -c <'Tek_device/cteklib/ctek.h'`; then
    echo shar: \"'Tek_device/cteklib/ctek.h'\" unpacked with wrong size!
fi
# end of 'Tek_device/cteklib/ctek.h'
fi
if test -f 'Tek_device/cteklib/ctekmakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Tek_device/cteklib/ctekmakef'\"
else
echo shar: Extracting \"'Tek_device/cteklib/ctekmakef'\" \(411 characters\)
sed "s/^X//" >'Tek_device/cteklib/ctekmakef' <<'END_OF_FILE'
CTEKLIB= ./cteklib/cteklib.a
X
ctekpen: main_vplot.o init_vplot.o proc_vplot.o dovplot.o cteklib/ctekconf.c $(GENLIB) $(CTEKLIB)\
X		 $(UTILLIB) $(LOCLIB)
X	cc -c $(CFLAGS) cteklib/ctekconf.c
X	cc $(CFLAGS) -o ctekpen main_vplot.o init_vplot.o proc_vplot.o dovplot.o ctekconf.o $(CTEKLIB)\
X				$(GENLIB) $(UTILLIB) $(LOCLIB) $(LIBS)
X	rm -f ctekconf.o
X
X$(CTEKLIB): cteklib/*.c
X	cd cteklib; make  CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 411 -ne `wc -c <'Tek_device/cteklib/ctekmakef'`; then
    echo shar: \"'Tek_device/cteklib/ctekmakef'\" unpacked with wrong size!
fi
# end of 'Tek_device/cteklib/ctekmakef'
fi
if test -f 'Tek_device/teklib/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Tek_device/teklib/Makefile'\"
else
echo shar: Extracting \"'Tek_device/teklib/Makefile'\" \(401 characters\)
sed "s/^X//" >'Tek_device/teklib/Makefile' <<'END_OF_FILE'
X#
X#	Tektronix 4010-4012-4014 routines
X#
CFILES= tekclose.c tekerase.c tekmessage.c tekopen.c\
X	    setmode.c tekplot.c tekpoint.c tekpack.c
X
default: teklib.a
X
sep: Teklib.a
X
teklib.a: $(CFILES)
X	rm -f *.o
X	cc -c $(CFLAGS) $?
X	ar crv teklib.a *.o
X	ranlib teklib.a
X	rm -f *.o
X
Teklib.a: $(CFILES)
X	rm -f *.o
X	cc -c $(CFLAGS) -DSEP $?
X	ar crv Teklib.a *.o
X	ranlib Teklib.a
X	rm -f *.o
X
clean:
X	rm -f *.o
END_OF_FILE
if test 401 -ne `wc -c <'Tek_device/teklib/Makefile'`; then
    echo shar: \"'Tek_device/teklib/Makefile'\" unpacked with wrong size!
fi
# end of 'Tek_device/teklib/Makefile'
fi
if test -f 'Tek_device/teklib/TekMakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Tek_device/teklib/TekMakef'\"
else
echo shar: Extracting \"'Tek_device/teklib/TekMakef'\" \(382 characters\)
sed "s/^X//" >'Tek_device/teklib/TekMakef' <<'END_OF_FILE'
STEKLIB= ./teklib/Teklib.a
X
Tekpen: Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o $(STEKLIB) $(TSEPLIB) ./teklib/tekconf.c
X	cc -c $(CFLAGS) teklib/tekconf.c
X	cc $(CFLAGS) -o Tekpen Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o tekconf.o $(STEKLIB)\
X					$(GENLIB) $(UTILLIB) $(TSEPLIB) $(LIBS)
X	rm -f tekconf.o
X
X$(STEKLIB): teklib/*.c
X	cd teklib; make sep CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 382 -ne `wc -c <'Tek_device/teklib/TekMakef'`; then
    echo shar: \"'Tek_device/teklib/TekMakef'\" unpacked with wrong size!
fi
# end of 'Tek_device/teklib/TekMakef'
fi
if test -f 'Tek_device/teklib/known_bugs' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Tek_device/teklib/known_bugs'\"
else
echo shar: Extracting \"'Tek_device/teklib/known_bugs'\" \(575 characters\)
sed "s/^X//" >'Tek_device/teklib/known_bugs' <<'END_OF_FILE'
This filter fails several of the verification tests. I haven't been able
to get anyone to fix it, though.
X
If you have "nulldev" for dev.attributes, then you can't know when you
want to draw in black versus white. That's bad news, especially when
filling polygons that make background to text. This should be fixed!
In the meantime, filling of polygons will be completely disabled by
putting in nulldev for dev.area. (It had been vecarea.)
When that's fixed, correct setting of the variable "mono" should be done.
X
X- author Glenn Kroeger, I think
X- comments by Joe Dellinger
END_OF_FILE
if test 575 -ne `wc -c <'Tek_device/teklib/known_bugs'`; then
    echo shar: \"'Tek_device/teklib/known_bugs'\" unpacked with wrong size!
fi
# end of 'Tek_device/teklib/known_bugs'
fi
if test -f 'Tek_device/teklib/tek.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Tek_device/teklib/tek.h'\"
else
echo shar: Extracting \"'Tek_device/teklib/tek.h'\" \(366 characters\)
sed "s/^X//" >'Tek_device/teklib/tek.h' <<'END_OF_FILE'
X/*
X * special characters for tek4010
X */
X#define	ESC	033
X#define	FF	014
X#define	GS	035
X#define	US	037
X#define	FS	034
X
X/*
X * tek modes
X */
X#define	ALPHA	1	/* Alpha mode */
X#define	VECTOR	2	/* Vector mode */
X#define	POINT	3	/* Point plot mode */
X
X/*
X * device level variables
X */
extern int lost;			/* used by genvector */
extern int messagecount;
extern int tekmode;
END_OF_FILE
if test 366 -ne `wc -c <'Tek_device/teklib/tek.h'`; then
    echo shar: \"'Tek_device/teklib/tek.h'\" unpacked with wrong size!
fi
# end of 'Tek_device/teklib/tek.h'
fi
if test -f 'Tek_device/teklib/tekdoc.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Tek_device/teklib/tekdoc.h'\"
else
echo shar: Extracting \"'Tek_device/teklib/tekdoc.h'\" \(508 characters\)
sed "s/^X//" >'Tek_device/teklib/tekdoc.h' <<'END_OF_FILE'
char *documentation[] = {
X" ",
X"NAME",
X#ifdef SEP
X"    Tekpen - SEPlib vplot filter for tektronix 4010,4012,4014 terminals",
X#else
X"    tekpen - vplot filter for tektronix 4010,4012,4014 terminals",
X#endif
X" ",
X"SYNOPSIS",
X#ifdef SEP
X"    Tek[pen] [options] in=vplot-inputfile OR headerfile on standard in",
X#else 
X"    tek[pen] [options] [inputfiles]",
X#endif
X" ",
X"OPTIONS",
X#include "../include/gendoc.h"
X" ",
X"SEE ALSO",
X"    man pen"
X};
int	doclength = { sizeof documentation/sizeof documentation[0] };
END_OF_FILE
if test 508 -ne `wc -c <'Tek_device/teklib/tekdoc.h'`; then
    echo shar: \"'Tek_device/teklib/tekdoc.h'\" unpacked with wrong size!
fi
# end of 'Tek_device/teklib/tekdoc.h'
fi
if test -f 'Tek_device/teklib/tekmakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Tek_device/teklib/tekmakef'\"
else
echo shar: Extracting \"'Tek_device/teklib/tekmakef'\" \(394 characters\)
sed "s/^X//" >'Tek_device/teklib/tekmakef' <<'END_OF_FILE'
TEKLIB= ./teklib/teklib.a
X
tekpen: main_vplot.o init_vplot.o proc_vplot.o dovplot.o teklib/tekconf.c $(GENLIB) $(TEKLIB)\
X		 $(UTILLIB) $(LOCLIB)
X	cc -c $(CFLAGS) teklib/tekconf.c
X	cc $(CFLAGS) -o tekpen main_vplot.o init_vplot.o proc_vplot.o dovplot.o tekconf.o $(TEKLIB)\
X				$(GENLIB) $(UTILLIB) $(LOCLIB) $(LIBS)
X	rm -f tekconf.o
X
X$(TEKLIB): teklib/*.c
X	cd teklib; make CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 394 -ne `wc -c <'Tek_device/teklib/tekmakef'`; then
    echo shar: \"'Tek_device/teklib/tekmakef'\" unpacked with wrong size!
fi
# end of 'Tek_device/teklib/tekmakef'
fi
if test -f 'Virtual_device/raslib/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Virtual_device/raslib/Makefile'\"
else
echo shar: Extracting \"'Virtual_device/raslib/Makefile'\" \(381 characters\)
sed "s/^X//" >'Virtual_device/raslib/Makefile' <<'END_OF_FILE'
X#
X#	Raspen routines
X#
CFILES= rasattr.c rasclose.c rasconf.c raserase.c\
X	rasopen.c rasreset.c rasvector.c rasvector2.c
X
default: raslib.a
X
sep: Raslib.a
X
raslib.a: $(CFILES)
X	rm -f *.o
X	cc -c $(CFLAGS) $?
X	ar crv raslib.a *.o
X	ranlib raslib.a
X	rm -f *.o
X
Raslib.a: $(CFILES)
X	rm -f *.o
X	cc -c $(CFLAGS) -DSEP $?
X	ar crv Raslib.a *.o
X	ranlib Raslib.a
X	rm -f *.o
X
clean:
X	rm -f *.o
END_OF_FILE
if test 381 -ne `wc -c <'Virtual_device/raslib/Makefile'`; then
    echo shar: \"'Virtual_device/raslib/Makefile'\" unpacked with wrong size!
fi
# end of 'Virtual_device/raslib/Makefile'
fi
if test -f 'Virtual_device/raslib/RasMakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Virtual_device/raslib/RasMakef'\"
else
echo shar: Extracting \"'Virtual_device/raslib/RasMakef'\" \(393 characters\)
sed "s/^X//" >'Virtual_device/raslib/RasMakef' <<'END_OF_FILE'
SRASPENLIB= ./raslib/Raslib.a
X
Raspen: Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o $(SRASPENLIB) $(TSEPLIB) ./raslib/rasconf.c
X	cc -c $(CFLAGS) raslib/rasconf.c
X	cc $(CFLAGS) -o Raspen Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o rasconf.o $(SRASPENLIB)\
X				$(GENLIB) $(UTILLIB) $(TSEPLIB) $(LIBS)
X	rm -f rasconf.o
X
X$(SRASPENLIB): raslib/*.c
X	cd raslib; make sep CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 393 -ne `wc -c <'Virtual_device/raslib/RasMakef'`; then
    echo shar: \"'Virtual_device/raslib/RasMakef'\" unpacked with wrong size!
fi
# end of 'Virtual_device/raslib/RasMakef'
fi
if test -f 'Virtual_device/raslib/rasmakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Virtual_device/raslib/rasmakef'\"
else
echo shar: Extracting \"'Virtual_device/raslib/rasmakef'\" \(394 characters\)
sed "s/^X//" >'Virtual_device/raslib/rasmakef' <<'END_OF_FILE'
RASLIB= ./raslib/raslib.a
X
raspen: main_vplot.o init_vplot.o proc_vplot.o dovplot.o raslib/rasconf.c $(GENLIB) $(RASLIB)\
X		 $(UTILLIB) $(LOCLIB)
X	cc -c $(CFLAGS) raslib/rasconf.c
X	cc $(CFLAGS) -o raspen main_vplot.o init_vplot.o proc_vplot.o dovplot.o rasconf.o $(RASLIB)\
X				$(GENLIB) $(UTILLIB) $(LOCLIB) $(LIBS)
X	rm -f rasconf.o
X
X$(RASLIB): raslib/*.c
X	cd raslib; make CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 394 -ne `wc -c <'Virtual_device/raslib/rasmakef'`; then
    echo shar: \"'Virtual_device/raslib/rasmakef'\" unpacked with wrong size!
fi
# end of 'Virtual_device/raslib/rasmakef'
fi
if test -f 'Virtual_device/raslib/raspen.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Virtual_device/raslib/raspen.h'\"
else
echo shar: Extracting \"'Virtual_device/raslib/raspen.h'\" \(310 characters\)
sed "s/^X//" >'Virtual_device/raslib/raspen.h' <<'END_OF_FILE'
extern char *image;		/* raster image */
extern int rascolor;		/* current color */
extern int dev_xmax, dev_ymax;
X#define	Image(IX,IY)	image[(IX)+dev_xmax*(dev_ymax-1-(IY))]
X#define	Min(IX,IY)	((IX) < (IY) ? (IX) : (IY))
X#define	Max(IX,IY)	((IX) > (IY) ? (IX) : (IY))
X#define NCOLOR 256		/* number of colors */
END_OF_FILE
if test 310 -ne `wc -c <'Virtual_device/raslib/raspen.h'`; then
    echo shar: \"'Virtual_device/raslib/raspen.h'\" unpacked with wrong size!
fi
# end of 'Virtual_device/raslib/raspen.h'
fi
if test -f 'Virtual_device/vplib/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Virtual_device/vplib/Makefile'\"
else
echo shar: Extracting \"'Virtual_device/vplib/Makefile'\" \(480 characters\)
sed "s/^X//" >'Virtual_device/vplib/Makefile' <<'END_OF_FILE'
X#
X# Vplot Pen routines
X#
CFILES= vpattr.c vpclose.c vpconf.c vperase.c vpmarker.c \
X	vpmessage.c vpopen.c vpplot.c vppoly.c vpraster.c \
X	vpreset.c vptext.c vpvector.c vpdovplot.c \
X	vplogmessage.c vplogvector.c
X
default: vplib.a
X
sep: Vplib.a
X
vplib.a: $(CFILES)
X	rm -f *.o
X	-cc -c $(CFLAGS) $?
X	ar crv vplib.a *.o
X	ranlib vplib.a
X	rm -f *.o
X
Vplib.a: $(CFILES) vpsepwhere.c
X	rm -f *.o
X	-cc -c -DSEP $(CFLAGS) $?
X	ar crv Vplib.a *.o
X	ranlib Vplib.a
X	rm -f *.o
X
clean:
X	rm -f *.o
END_OF_FILE
if test 480 -ne `wc -c <'Virtual_device/vplib/Makefile'`; then
    echo shar: \"'Virtual_device/vplib/Makefile'\" unpacked with wrong size!
fi
# end of 'Virtual_device/vplib/Makefile'
fi
if test -f 'Virtual_device/vplib/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Virtual_device/vplib/README'\"
else
echo shar: Extracting \"'Virtual_device/vplib/README'\" \(471 characters\)
sed "s/^X//" >'Virtual_device/vplib/README' <<'END_OF_FILE'
This program, along with plas and pldb, serves as a "poor man's"
vplot editor. By using with this program such generic options as
erase=o, hshift, vshift, scale, frame=y, xwmin, etc, you can combine
plots, move them around, add frames, change their size, clip them,
etc, etc, and save the result into a new vplot file.
X
Plas and pldb allow you to do minor surgery by hand. The 'o' command
allows you to shift objects around intact.
X
X	Author - Joe Dellinger, January 1988
END_OF_FILE
if test 471 -ne `wc -c <'Virtual_device/vplib/README'`; then
    echo shar: \"'Virtual_device/vplib/README'\" unpacked with wrong size!
fi
# end of 'Virtual_device/vplib/README'
fi
if test -f 'Virtual_device/vplib/VpMakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Virtual_device/vplib/VpMakef'\"
else
echo shar: Extracting \"'Virtual_device/vplib/VpMakef'\" \(381 characters\)
sed "s/^X//" >'Virtual_device/vplib/VpMakef' <<'END_OF_FILE'
SVPLIB= ./vplib/Vplib.a
X
Vppen: Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o $(SVPLIB) $(TSEPLIB) ./vplib/vpconf.c
X	cc -c $(CFLAGS)  vplib/vpconf.c
X	cc $(CFLAGS) -o Vppen Main_vplot.o Init_vplot.o proc_vplot.o dovplot.o vpconf.o $(SVPLIB)\
X					-lvplot $(GENLIB) $(UTILLIB)\
X					$(TSEPLIB) $(LIBS)
X	rm -f vpconf.o
X
X$(SVPLIB): vplib/*.c
X	cd vplib; make sep CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 381 -ne `wc -c <'Virtual_device/vplib/VpMakef'`; then
    echo shar: \"'Virtual_device/vplib/VpMakef'\" unpacked with wrong size!
fi
# end of 'Virtual_device/vplib/VpMakef'
fi
if test -f 'Virtual_device/vplib/vp.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Virtual_device/vplib/vp.h'\"
else
echo shar: Extracting \"'Virtual_device/vplib/vp.h'\" \(564 characters\)
sed "s/^X//" >'Virtual_device/vplib/vp.h' <<'END_OF_FILE'
X#define F_COL		(0001)
X#define F_FAT		(0002)
X#define F_CLIP		(0004)
X#define F_FONT		(0010)
X#define F_JUST		(0020)
X#define F_DASH		(0040)
X#define F_COLT		(0100)
X#define F_OVLY		(0200)
X
extern int vpdumb;
extern int vpstat;
extern int vpalign;
extern int vpbig;
extern int vpstyle;
extern char vpaligns[];
extern int lost;
extern int vpcolor, vpfat;
extern int vpsetflag;
extern int vpblast;
extern int vpbit;
extern int vparray[];
extern int vpasize[];
extern int vpframe;
X
extern int default_hshift, default_vshift;
X
extern char * malloc();
extern char * strcat();
END_OF_FILE
if test 564 -ne `wc -c <'Virtual_device/vplib/vp.h'`; then
    echo shar: \"'Virtual_device/vplib/vp.h'\" unpacked with wrong size!
fi
# end of 'Virtual_device/vplib/vp.h'
fi
if test -f 'Virtual_device/vplib/vpmakef' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Virtual_device/vplib/vpmakef'\"
else
echo shar: Extracting \"'Virtual_device/vplib/vpmakef'\" \(385 characters\)
sed "s/^X//" >'Virtual_device/vplib/vpmakef' <<'END_OF_FILE'
VPLIB= ./vplib/vplib.a
X
vppen: main_vplot.o init_vplot.o proc_vplot.o dovplot.o vplib/vpconf.c $(VPLIB) $(GENLIB)\
X		 $(UTILLIB) $(LOCLIB)
X	cc -c $(CFLAGS) vplib/vpconf.c
X	cc $(CFLAGS) -o vppen main_vplot.o init_vplot.o proc_vplot.o dovplot.o vpconf.o $(VPLIB)\
X			-lvplot $(GENLIB) $(UTILLIB) $(LOCLIB) $(LIBS)
X	rm -f vpconf.o
X
X$(VPLIB): vplib/*.c
X	cd vplib; make CFLAGS="${CFLAGS}"
X
END_OF_FILE
if test 385 -ne `wc -c <'Virtual_device/vplib/vpmakef'`; then
    echo shar: \"'Virtual_device/vplib/vpmakef'\" unpacked with wrong size!
fi
# end of 'Virtual_device/vplib/vpmakef'
fi
if test -f 'Vplot_Kernel/Documentation/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/Documentation/README'\"
else
echo shar: Extracting \"'Vplot_Kernel/Documentation/README'\" \(345 characters\)
sed "s/^X//" >'Vplot_Kernel/Documentation/README' <<'END_OF_FILE'
Documentation. 50 pages worth.
X
The ".mn" files are manual pages, the ".doc" file is just plain text.
X
csh install.csh
should install all the manual pages for you.
X(You may need to edit this file, we keep our manual pages in /usr/man/man9.)
X
Device-dependent manual pages should be located in the same directory as
their associated source code.
END_OF_FILE
if test 345 -ne `wc -c <'Vplot_Kernel/Documentation/README'`; then
    echo shar: \"'Vplot_Kernel/Documentation/README'\" unpacked with wrong size!
fi
# end of 'Vplot_Kernel/Documentation/README'
fi
if test -f 'Vplot_Kernel/Hershey/cyrilc.hmp' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/Hershey/cyrilc.hmp'\"
else
echo shar: Extracting \"'Vplot_Kernel/Hershey/cyrilc.hmp'\" \(586 characters\)
sed "s/^X//" >'Vplot_Kernel/Hershey/cyrilc.hmp' <<'END_OF_FILE'
X2199    2214    2217    2275    2274    2271    2272    2251
X2221    2222    2219    2232    2211    2231    2210    2220
X2200-2209
X2212    2213    2241    2238    2242    2215    2273
X2801 2802 2824 2805 2806 2821 2804 2807 2809 2826 2811
X2812 2813 2814 2815 2816 2831 2817 2818 2819 2820 2803
X2825 2822 2828 2808
X2223    804     2224    2262    999    2252
X2901 2902 2924 2905 2906 2921 2904 2907 2909 2926 2911
X2912 2913 2914 2915 2916 2931 2917 2918 2919 2920 2903
X2925 2922 2928 2908
X2225    2229    2226    2246    2218
X2810 2910
X2823 2923
X2827 2927
X2829 2929
X2830 2930
X2832 2932
END_OF_FILE
if test 586 -ne `wc -c <'Vplot_Kernel/Hershey/cyrilc.hmp'`; then
    echo shar: \"'Vplot_Kernel/Hershey/cyrilc.hmp'\" unpacked with wrong size!
fi
# end of 'Vplot_Kernel/Hershey/cyrilc.hmp'
fi
if test -f 'Vplot_Kernel/Hershey/greekc.hmp' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/Hershey/greekc.hmp'\"
else
echo shar: Extracting \"'Vplot_Kernel/Hershey/greekc.hmp'\" \(527 characters\)
sed "s/^X//" >'Vplot_Kernel/Hershey/greekc.hmp' <<'END_OF_FILE'
X2199    2214    2217    2275    2274    2271    2272    2251
X2221    2222    2219    2232    2211    2231    2210    2220
X2200-2209
X2212    2213    2241    2238    2242    2215    2077
X2027 2028 2186 2030 2031 2047 2029 2033 2035 2040 2036 2037 2038 2039
X2041 2042 2034 2043 2044 2045 2190 2046 2050 2048 2049 2032
X2223    804     2224    2262    2187    2252
X2127 2128 2184 2130 2131 2147 2129 2133 2135 2140 2136 2137 2138 2139
X2141 2142 2185 2143 2144 2145 2134 2146 2150 2148 2149 2132
X2225    2229    2226    2246    2218
END_OF_FILE
if test 527 -ne `wc -c <'Vplot_Kernel/Hershey/greekc.hmp'`; then
    echo shar: \"'Vplot_Kernel/Hershey/greekc.hmp'\" unpacked with wrong size!
fi
# end of 'Vplot_Kernel/Hershey/greekc.hmp'
fi
if test -f 'Vplot_Kernel/Hershey/greeks.hmp' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/Hershey/greeks.hmp'\"
else
echo shar: Extracting \"'Vplot_Kernel/Hershey/greeks.hmp'\" \(469 characters\)
sed "s/^X//" >'Vplot_Kernel/Hershey/greeks.hmp' <<'END_OF_FILE'
X699     714     717     733     719     2271    734     731
X721     722     2219    725     711     724     710     720
X700-709
X712     713     2241    726     2242    715     2273
X527 528 686 530 531 547 529 533 535 540 536 537 538 539
X541 542 534 543 544 545 616 546 550 548 549 532
X2223    804     2224    2262    687     730
X627 628 684 630 631 647 629 633 635 640 636 637 638 639
X641 642 685 643 644 645 634 646 650 648 649 632
X2225    723     2226    2246    718
END_OF_FILE
if test 469 -ne `wc -c <'Vplot_Kernel/Hershey/greeks.hmp'`; then
    echo shar: \"'Vplot_Kernel/Hershey/greeks.hmp'\" unpacked with wrong size!
fi
# end of 'Vplot_Kernel/Hershey/greeks.hmp'
fi
if test -f 'Vplot_Kernel/Hershey/italicc.hmp' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/Hershey/italicc.hmp'\"
else
echo shar: Extracting \"'Vplot_Kernel/Hershey/italicc.hmp'\" \(297 characters\)
sed "s/^X//" >'Vplot_Kernel/Hershey/italicc.hmp' <<'END_OF_FILE'
X2749    2764    2778    2275    2769    2271    2768    2767
X2771    2772    2773    2775    2761    2774    2760    2770
X2750-2759
X2762    2763    2241    2776    2242    2765    2273
X2051-2076
X2223    804     2224    2262    999     2766
X2151-2176
X2225    2229    2226    2246    2779
X2191-2196
END_OF_FILE
if test 297 -ne `wc -c <'Vplot_Kernel/Hershey/italicc.hmp'`; then
    echo shar: \"'Vplot_Kernel/Hershey/italicc.hmp'\" unpacked with wrong size!
fi
# end of 'Vplot_Kernel/Hershey/italicc.hmp'
fi
if test -f 'Vplot_Kernel/Hershey/lines_normal+cylig' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/Hershey/lines_normal+cylig'\"
else
echo shar: Extracting \"'Vplot_Kernel/Hershey/lines_normal+cylig'\" \(292 characters\)
sed "s/^X//" >'Vplot_Kernel/Hershey/lines_normal+cylig' <<'END_OF_FILE'
X32 140
X1 7 16
X16 12 0 -9 -16
X74 83 72 67 72
X106 115 104 99 104
X104 122 104
X72 90 72
X128 47 73
X129 47 105
X88 75 72
X120 107 104
X130 84 83
X131 116 115
X67 67 72
X99 99 104
X87 83 72
X119 115 104
X132 47 84
X133 47 96
X134 47 77
X135 47 39
X136 47 69
X137 47 101
X81 89 85
X113 121 117
X138 89 65
X139 121 97
X
END_OF_FILE
if test 292 -ne `wc -c <'Vplot_Kernel/Hershey/lines_normal+cylig'`; then
    echo shar: \"'Vplot_Kernel/Hershey/lines_normal+cylig'\" unpacked with wrong size!
fi
# end of 'Vplot_Kernel/Hershey/lines_normal+cylig'
fi
if test -f 'Vplot_Kernel/Hershey/romanc.hmp' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/Hershey/romanc.hmp'\"
else
echo shar: Extracting \"'Vplot_Kernel/Hershey/romanc.hmp'\" \(297 characters\)
sed "s/^X//" >'Vplot_Kernel/Hershey/romanc.hmp' <<'END_OF_FILE'
X2199    2214    2217    2275    2274    2271    2272    2251
X2221    2222    2219    2232    2211    2231    2210    2220
X2200-2209
X2212    2213    2241    2238    2242    2215    2273
X2001-2026
X2223    804     2224    2262    999     2252
X2101-2126
X2225    2229    2226    2246    2218
X2177-2182
END_OF_FILE
if test 297 -ne `wc -c <'Vplot_Kernel/Hershey/romanc.hmp'`; then
    echo shar: \"'Vplot_Kernel/Hershey/romanc.hmp'\" unpacked with wrong size!
fi
# end of 'Vplot_Kernel/Hershey/romanc.hmp'
fi
if test -f 'Vplot_Kernel/filters/Tests/All_tests' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/filters/Tests/All_tests'\"
else
echo shar: Extracting \"'Vplot_Kernel/filters/Tests/All_tests'\" \(494 characters\)
sed "s/^X//" >'Vplot_Kernel/filters/Tests/All_tests' <<'END_OF_FILE'
X#!/bin/csh -f
X#
if ($#argv == 0) then
echo "Usage: All_tests pen_filter_name"
echo "After each test hit return to get next test"
exit
endif
X
set TUBE = $1
X
foreach file ( TEST_aspect_ratio TEST_size TEST_clipping TEST_limit TEST_erase \
X	TEST_text TEST_align TEST_Cyrillic TEST_colors TEST_coltab \
X	TEST_hatch TEST_pattern TEST_raster TEST_greycol )
X
if (-e $file) then
X
X	clear
X	echo " "
X	echo " "
X	echo $file
X	echo " "
X	echo " "
X	sleep 1
X	plas < $file | $TUBE pause=-1 endpause=y
X
endif
X
end
END_OF_FILE
if test 494 -ne `wc -c <'Vplot_Kernel/filters/Tests/All_tests'`; then
    echo shar: \"'Vplot_Kernel/filters/Tests/All_tests'\" unpacked with wrong size!
fi
chmod +x 'Vplot_Kernel/filters/Tests/All_tests'
# end of 'Vplot_Kernel/filters/Tests/All_tests'
fi
if test -f 'Vplot_Kernel/filters/Tests/DEMO_KPCC' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/filters/Tests/DEMO_KPCC'\"
else
echo shar: Extracting \"'Vplot_Kernel/filters/Tests/DEMO_KPCC'\" \(571 characters\)
sed "s/^X//" >'Vplot_Kernel/filters/Tests/DEMO_KPCC' <<'END_OF_FILE'
e
S s
z
This quote, presented in yellow on a red background just like here,
z
came straight off a propaganda show "The Crisis of Capitalism" on Russian TV.
F 11 2 -1
C 0 255 0 0
X[
Russian
c 6
f 7
m 200 5500
T 15 0
X   Antigumannaya ideologiya\nsovremennogo kapitalizma\nnanosit vse bol/'shi/i ushcherb\ndukhovnomu miru lyude/i.\n\_       \s70 -Iz Programmy KPSS
X]
b
X[
Translation
c 7
f 3
F 1 2 -1
m 2400 1800
T 6 0
X   The anti-human ideology\nof contemporary capitalism\ncauses more and more damage\nto people's spiritual world.\n\_   \s70 -From the Program of the CPSU
X]
END_OF_FILE
if test 571 -ne `wc -c <'Vplot_Kernel/filters/Tests/DEMO_KPCC'`; then
    echo shar: \"'Vplot_Kernel/filters/Tests/DEMO_KPCC'\" unpacked with wrong size!
fi
# end of 'Vplot_Kernel/filters/Tests/DEMO_KPCC'
fi
if test -f 'Vplot_Kernel/filters/Tests/DEMO_Seplogo' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/filters/Tests/DEMO_Seplogo'\"
else
echo shar: Extracting \"'Vplot_Kernel/filters/Tests/DEMO_Seplogo'\" \(435 characters\)
sed "s/^X//" >'Vplot_Kernel/filters/Tests/DEMO_Seplogo' <<'END_OF_FILE'
e
z
Try xcenter=0 ycenter=0 with this one.
z
Comes out a black diamond on a black and white device!
f 5
F 6 2 0
C 0 080 080 200
c 7
A 4
X2400 0
X0 -2400
X-2400 0
X0 2400
f 20
c 6
m 2400 0
d 0 -2400
d -2400 0
d 0 2400
d 2400 0
f 6
c 2
m 0 0
T 32 100
X\r-9 S\<\<
T 32 75
E\<\<
T 32 50
P
m 0 0
T 32 190
X\r-9 S\<\<
T 32 165
E\<\<
T 32 140
P
m 0 0
T 32 280
X\r-9 S\<\<
T 32 255
E\<\<
T 32 230
P
m 0 0
T 32 10
X\r-9 S\<\<
T 32 -15
E\<\<
T 32 -40
P
END_OF_FILE
if test 435 -ne `wc -c <'Vplot_Kernel/filters/Tests/DEMO_Seplogo'`; then
    echo shar: \"'Vplot_Kernel/filters/Tests/DEMO_Seplogo'\" unpacked with wrong size!
fi
# end of 'Vplot_Kernel/filters/Tests/DEMO_Seplogo'
fi
if test -f 'Vplot_Kernel/filters/Tests/DEMO_Texas' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/filters/Tests/DEMO_Texas'\"
else
echo shar: Extracting \"'Vplot_Kernel/filters/Tests/DEMO_Texas'\" \(331 characters\)
sed "s/^X//" >'Vplot_Kernel/filters/Tests/DEMO_Texas' <<'END_OF_FILE'
X#plas: Vplot units used in this file
e
S o
c 1
a 4
X0 1 1
X0 0
X0 2000
X1167 2000
X1167 0
c 7
a 4
X0 16 16
X1167 1000
X1167 2000
X3000 2000
X3000 1000
c 2
a 4
X0 4 4
X1167 0
X1167 1000
X3000 1000
X3000 0
c 7
a 10
X0 16 16
X600 867
X165 600
X433 1000
X133 1200
X567 1233
X733 1500
X833 1233
X1133 1233
X900 1033
X966 566
z
The Texas flag (somewhat mangled).
END_OF_FILE
if test 331 -ne `wc -c <'Vplot_Kernel/filters/Tests/DEMO_Texas'`; then
    echo shar: \"'Vplot_Kernel/filters/Tests/DEMO_Texas'\" unpacked with wrong size!
fi
# end of 'Vplot_Kernel/filters/Tests/DEMO_Texas'
fi
if test -f 'Vplot_Kernel/filters/Tests/parfile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/filters/Tests/parfile'\"
else
echo shar: Extracting \"'Vplot_Kernel/filters/Tests/parfile'\" \(339 characters\)
sed "s/^X//" >'Vplot_Kernel/filters/Tests/parfile' <<'END_OF_FILE'
X# A sample getpar parameter file
X# Don't panic if you don't have any of the files referred to herein,
X# it just means you got the "short" binary-file free version
X# for distribution over comp.sources.unix
X#
numvplot=6
in1=demo_collage.v
in2="this here file."
in3=demo_pyramid.v
in4=demo_pacific.v
in5=demo_zplot.v
in6=demo_photo.v
pause=8
END_OF_FILE
if test 339 -ne `wc -c <'Vplot_Kernel/filters/Tests/parfile'`; then
    echo shar: \"'Vplot_Kernel/filters/Tests/parfile'\" unpacked with wrong size!
fi
# end of 'Vplot_Kernel/filters/Tests/parfile'
fi
if test -f 'Vplot_Kernel/filters/genlib/Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/filters/genlib/Makefile'\"
else
echo shar: Extracting \"'Vplot_Kernel/filters/genlib/Makefile'\" \(385 characters\)
sed "s/^X//" >'Vplot_Kernel/filters/genlib/Makefile' <<'END_OF_FILE'
X#
X#	Device-Independent Subroutines
X#
X
CFLAGS = -g -I/usr/local/include
X
CFILES= gentext.c genvector.c genraster.c genraster1.c vecarea.c\
X	genmessage.c genpoint.c nulldev.c geninteract.c\
X	genarea.c genhatch.c genmarker.c polysubs.c polyfix.c genpatarea.c\
X	gen_do_dovplot.c
X
genlib.a: $(CFILES)
X	-cc -c $(CFLAGS) $?
X	ar crv genlib.a *.o
X	ranlib genlib.a
X	rm -f *.o
X
clean:
X	rm -f *.o
END_OF_FILE
if test 385 -ne `wc -c <'Vplot_Kernel/filters/genlib/Makefile'`; then
    echo shar: \"'Vplot_Kernel/filters/genlib/Makefile'\" unpacked with wrong size!
fi
# end of 'Vplot_Kernel/filters/genlib/Makefile'
fi
if test -f 'Vplot_Kernel/filters/include/README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/filters/include/README'\"
else
echo shar: Extracting \"'Vplot_Kernel/filters/include/README'\" \(476 characters\)
sed "s/^X//" >'Vplot_Kernel/filters/include/README' <<'END_OF_FILE'
Various include files.
X
vplot.h here should be linked to /usr/include/vplot.h.
X
All site-dependent parameters are kept in params.h and vplot.h.
X
If you can't get the Hershey fonts and have to limp along with only
the "pen" font which comes with this distribution, you will have to
edit the file font_definitions.h so that gentext.c doesn't try to
include the roman simplex and roman complex Hershey fonts.
Read the README file in the ./vplotfonts directory.
X
X	- Joe Dellinger
END_OF_FILE
if test 476 -ne `wc -c <'Vplot_Kernel/filters/include/README'`; then
    echo shar: \"'Vplot_Kernel/filters/include/README'\" unpacked with wrong size!
fi
# end of 'Vplot_Kernel/filters/include/README'
fi
if test -f 'Vplot_Kernel/filters/include/device.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/filters/include/device.h'\"
else
echo shar: Extracting \"'Vplot_Kernel/filters/include/device.h'\" \(543 characters\)
sed "s/^X//" >'Vplot_Kernel/filters/include/device.h' <<'END_OF_FILE'
X/*
X * device routine table structure
X */
X
struct device{
X
X	/* control routines */
X	int (*open)();
X	int (*reset)();
X	int (*message)();
X	int (*erase)();
X	int (*close)();
X
X	/* high level output */
X	int (*vector)();
X	int (*marker)();
X	int (*text)();
X	int (*area)();
X	int (*raster)();
X	int (*point)();
X	int (*attributes)();
X
X	/* input */
X	int (*getpoint)();
X	int (*interact)();
X
X	/* low level output
X	 * - these are called by the generic high level output routines
X	 */
X	int (*plot)();
X	int (*startpoly)();
X	int (*midpoly)();
X	int (*endpoly)();
X};
END_OF_FILE
if test 543 -ne `wc -c <'Vplot_Kernel/filters/include/device.h'`; then
    echo shar: \"'Vplot_Kernel/filters/include/device.h'\" unpacked with wrong size!
fi
# end of 'Vplot_Kernel/filters/include/device.h'
fi
if test -f 'Vplot_Kernel/filters/include/readraster.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/filters/include/readraster.h'\"
else
echo shar: Extracting \"'Vplot_Kernel/filters/include/readraster.h'\" \(414 characters\)
sed "s/^X//" >'Vplot_Kernel/filters/include/readraster.h' <<'END_OF_FILE'
X/*
X * indent destroys this, so I stuffed it down in an include file
X * out of harm's way
X */
X
X#define READ_RASTER(BYTELINE,BITLINE)	\
X{\
X    if (c == VP_BYTE_RASTER)\
X    {\
X	for (j = 0; j < num_byte; j++)\
X	{\
X	    BYTELINE;\
X	}\
X    }\
X    else\
X    {\
X	for (jj = 0; jj < num_byte; jj += 8)\
X	{\
X	    ibyte = (unsigned char) fgetc (pltin);\
X	    for (j = 0; j < 8; j++)\
X	    {\
X		BITLINE;\
X	    }\
X	}\
X    }\
X}
END_OF_FILE
if test 414 -ne `wc -c <'Vplot_Kernel/filters/include/readraster.h'`; then
    echo shar: \"'Vplot_Kernel/filters/include/readraster.h'\" unpacked with wrong size!
fi
# end of 'Vplot_Kernel/filters/include/readraster.h'
fi
if test -f 'Vplot_Kernel/filters/include/vplotfonts/known_bugs' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/filters/include/vplotfonts/known_bugs'\"
else
echo shar: Extracting \"'Vplot_Kernel/filters/include/vplotfonts/known_bugs'\" \(400 characters\)
sed "s/^X//" >'Vplot_Kernel/filters/include/vplotfonts/known_bugs' <<'END_OF_FILE'
Makefont.c probably needs a little work to be perfectly portable.
Shouldn't be too hard. Use of "5555" to mean "use the default" is
a little weird, but it works.
X
Beware of the width information on the letter "J" in the roman triplex
Hershey font. Our copy, at least, was messed up.
X
It would be nice if someone put out a modified Hershey font that used
the filled-area capability of fonts in vplot.
END_OF_FILE
if test 400 -ne `wc -c <'Vplot_Kernel/filters/include/vplotfonts/known_bugs'`; then
    echo shar: \"'Vplot_Kernel/filters/include/vplotfonts/known_bugs'\" unpacked with wrong size!
fi
# end of 'Vplot_Kernel/filters/include/vplotfonts/known_bugs'
fi
if test -f 'Vplot_Kernel/filters/loclib/fsize.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/filters/loclib/fsize.c'\"
else
echo shar: Extracting \"'Vplot_Kernel/filters/loclib/fsize.c'\" \(530 characters\)
sed "s/^X//" >'Vplot_Kernel/filters/loclib/fsize.c' <<'END_OF_FILE'
X/* This routine finds the length of a file and returns its size in number
of bytes. filedes is the file descriptor that is returned by a open()
command or a creat() command. */
X#include	<sys/types.h>
X#include	<sys/stat.h>
X
int
fsize (filedes)
X    int             filedes;
X/*
X *	returns size of file in bytes
X *
X * modified 1/26/83  S. Levin corrected length and simplfied
X * modified 3/27/83  return -1 if fstat fails.
X */
X{
struct stat     buf;
X    if (0 != fstat (filedes, &buf))
X	return (-1);
X    return ((int) buf.st_size);
X}
END_OF_FILE
if test 530 -ne `wc -c <'Vplot_Kernel/filters/loclib/fsize.c'`; then
    echo shar: \"'Vplot_Kernel/filters/loclib/fsize.c'\" unpacked with wrong size!
fi
# end of 'Vplot_Kernel/filters/loclib/fsize.c'
fi
if test -f 'Vplot_Kernel/filters/loclib/geth.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/filters/loclib/geth.c'\"
else
echo shar: Extracting \"'Vplot_Kernel/filters/loclib/geth.c'\" \(415 characters\)
sed "s/^X//" >'Vplot_Kernel/filters/loclib/geth.c' <<'END_OF_FILE'
X/*
X *
X *  source file:   ./filters/loclib/geth.c
X *
X * Joe Dellinger (SEP), June 11 1987
X *	Inserted this sample edit history entry.
X *	Please log any further modifications made to this file:
X */
X
X#include <stdio.h>
X
short
geth(iop)
register FILE *iop;
X{
X        union {
X	    unsigned short w;
X	    short s;
X	    } r;
X
X	r.w = getc(iop);
X	r.w += (getc(iop) << 8);
X	if (feof(iop))
X		return(EOF);
X	return((int)r.s);
X}
END_OF_FILE
if test 415 -ne `wc -c <'Vplot_Kernel/filters/loclib/geth.c'`; then
    echo shar: \"'Vplot_Kernel/filters/loclib/geth.c'\" unpacked with wrong size!
fi
# end of 'Vplot_Kernel/filters/loclib/geth.c'
fi
if test -f 'Vplot_Kernel/filters/loclib/puth.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Vplot_Kernel/filters/loclib/puth.c'\"
else
echo shar: Extracting \"'Vplot_Kernel/filters/loclib/puth.c'\" \(510 characters\)
sed "s/^X//" >'Vplot_Kernel/filters/loclib/puth.c' <<'END_OF_FILE'
X/*
X *
X *  source file:   ./filters/loclib/puth.c
X *
X * Joe Dellinger (SEP), June 11 1987
X *	Inserted this sample edit history entry.
X *	Please log any further modifications made to this file:
X */
X
X#include <stdio.h>
X
puth (w, iop)
X    register int    w;
X    register FILE  *iop;
X{
register int    j;
X
X    j = w & 255;		/* low order byte of halfword value */
X    w >>= 8;
X    putc ((char) j, iop);
X    j = w & 255;		/* high order byte of halfword value */
X    putc ((char) j, iop);
X    return (ferror (iop));
X}
END_OF_FILE
if test 510 -ne `wc -c <'Vplot_Kernel/filters/loclib/puth.c'`; then
    echo shar: \"'Vplot_Kernel/filters/loclib/puth.c'\" unpacked with wrong size!
fi
# end of 'Vplot_Kernel/filters/loclib/puth.c'
fi
echo shar: End of archive 2 \(of 24\).
cp /dev/null ark2isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 24 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
-- 
Please send comp.sources.unix-related mail to rsalz@uunet.uu.net.
