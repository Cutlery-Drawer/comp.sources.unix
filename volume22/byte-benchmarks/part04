Subject:  v22i031:  Byte Unix benchmarks, Part04/05
Newsgroups: comp.sources.unix
Approved: rsalz@uunet.UU.NET
X-Checksum-Snefru: 300af420 0344f14e 383b8fec ebbfc462

Submitted-by: "Ben Smith @ BYTE" <ben@bytepb.byte.com>
Posting-number: Volume 22, Issue 31
Archive-name: byte-benchmarks/part04

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 4 (of 5)."
# Contents:  dhry.c dhry.h
# Wrapped by rsalz@papaya.bbn.com on Tue May  8 08:55:33 1990
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'dhry.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dhry.c'\"
else
echo shar: Extracting \"'dhry.c'\" \(17085 characters\)
sed "s/^X//" >'dhry.c' <<'END_OF_FILE'
X/*******************************************************************************
X *  The BYTE UNIX Benchmarks - Release 2
X *          Module: dhry.c   SID: 2.4 4/17/90 16:45:30
X *          
X *******************************************************************************
X * Bug reports, patches, comments, suggestions should be sent to:
X *
X *	Ben Smith or Rick Grehan at BYTE Magazine
X *	bensmith@bixpb.UUCP    rick_g@bixpb.UUCP
X *
X *******************************************************************************
X *  Modification Log:
X * adapted from: "DHRYSTONE" Benchmark Program
X *  Version:    C, Version 2.0
X *  File:       dhry_pack_1.c (part 2 of 3)
X *  Date:       March 3, 1988
X *  Author:     Reinhold P. Weicker
X * added command line parameter handling, modified error check
X * to output only on error - ben 6/89
X *
X ******************************************************************************/
Xchar id[] = "@(#) @(#)dhry.c:2.4 -- 4/17/90 16:45:30";
X
X#include "dhry.h"
X
X/* Global Variables: */
X
XRec_Pointer     Ptr_Glob,
X                Next_Ptr_Glob;
Xint             Int_Glob;
XBoolean         Bool_Glob;
Xchar            Ch_1_Glob,
X                Ch_2_Glob;
Xint             Arr_1_Glob [50];
Xint             Arr_2_Glob [50] [50];
X
Xextern char     *malloc ();
XEnumeration     Func_1 ();
X  /* forward declaration necessary since Enumeration may not simply be int */
X
X#ifndef REG
X        Boolean Reg = false;
X#define REG
X        /* REG becomes defined as empty */
X        /* i.e. no register variables   */
X#else
X        Boolean Reg = true;
X#endif
X
X/* variables for time measurement: */
X
X#ifdef TIMES
Xstruct tms      time_info;
Xextern  int     times ();
X                /* see library function "times" */
X#endif
X#ifdef TIME
Xextern long     time();
X                /* see library function "time"  */
X#endif
X
X#define Too_Small_Time 2
X                /* Measurements should last at least 2 seconds */
X
Xlong            Begin_Time,
X                End_Time,
X                User_Time;
Xfloat           Microseconds,
X                Dhrystones_Per_Second;
X
X/* end of variables for time measurement */
X
X
Xmain (argc, argv, env)
Xint argc;
Xchar *argv[], *env[];
X  /* main program, corresponds to procedures        */
X  /* Main and Proc_0 in the Ada version             */
X
X{
X        One_Fifty       Int_1_Loc;
X  REG   One_Fifty       Int_2_Loc;
X        One_Fifty       Int_3_Loc;
X  REG   char            Ch_Index;
X        Enumeration     Enum_Loc;
X        Str_30          Str_1_Loc;
X        Str_30          Str_2_Loc;
X  REG   int             Run_Index;
X  REG   int             Number_Of_Runs = 10000;
X
X
X  /* Initializations */
X
X  Next_Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
X  Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
X
X  Ptr_Glob->Ptr_Comp                    = Next_Ptr_Glob;
X  Ptr_Glob->Discr                       = Ident_1;
X  Ptr_Glob->variant.var_1.Enum_Comp     = Ident_3;
X  Ptr_Glob->variant.var_1.Int_Comp      = 40;
X  strcpy (Ptr_Glob->variant.var_1.Str_Comp, STR_0_PAR_REF);
X  strcpy (Str_1_Loc, STR_1_PAR_REF);
X
X  Arr_2_Glob [8][7] = 10;
X        /* Was missing in published program. Without this               */
X        /* initialization, Arr_2_Glob [8][7] would have an              */
X        /* undefined value.                                             */
X        /* Warning: With 16-Bit processors and Number_Of_Runs > 32000,  */
X        /* overflow may occur for this array element.                   */
X
X  if(argc > 1) Number_Of_Runs = atoi(argv[1]);
X  /***************/
X  /* Start timer */
X  /***************/
X 
X#ifdef TIMES
X  times (&time_info);
X  Begin_Time = (long) time_info.tms_utime;
X#endif
X#ifdef TIME
X  Begin_Time = time ( (long *) 0);
X#endif
X
X  for (Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)
X  {
X
X    Proc_5();
X    Proc_4();
X      /* Ch_1_Glob == 'A', Ch_2_Glob == 'B', Bool_Glob == true */
X    Int_1_Loc = 2;
X    Int_2_Loc = 3;
X    strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 2'ND STRING");
X    Enum_Loc = Ident_2;
X    Bool_Glob = ! Func_2 (Str_1_Loc, Str_2_Loc);
X      /* Bool_Glob == 1 */
X    while (Int_1_Loc < Int_2_Loc)  /* loop body executed once */
X    {
X      Int_3_Loc = 5 * Int_1_Loc - Int_2_Loc;
X        /* Int_3_Loc == 7 */
X      Proc_7 (Int_1_Loc, Int_2_Loc, &Int_3_Loc);
X        /* Int_3_Loc == 7 */
X      Int_1_Loc += 1;
X    } /* while */
X      /* Int_1_Loc == 3, Int_2_Loc == 3, Int_3_Loc == 7 */
X    Proc_8 (Arr_1_Glob, Arr_2_Glob, Int_1_Loc, Int_3_Loc);
X      /* Int_Glob == 5 */
X    Proc_1 (Ptr_Glob);
X    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
X                             /* loop body executed twice */
X    {
X      if (Enum_Loc == Func_1 (Ch_Index, 'C'))
X          /* then, not executed */
X        {
X        Proc_6 (Ident_1, &Enum_Loc);
X        strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 3'RD STRING");
X        Int_2_Loc = Run_Index;
X        Int_Glob = Run_Index;
X        }
X    }
X      /* Int_1_Loc == 3, Int_2_Loc == 3, Int_3_Loc == 7 */
X    Int_2_Loc = Int_2_Loc * Int_1_Loc;
X    Int_1_Loc = Int_2_Loc / Int_3_Loc;
X    Int_2_Loc = 7 * (Int_2_Loc - Int_3_Loc) - Int_1_Loc;
X      /* Int_1_Loc == 1, Int_2_Loc == 13, Int_3_Loc == 7 */
X    Proc_2 (&Int_1_Loc);
X      /* Int_1_Loc == 5 */
X
X  } /* loop "for Run_Index" */
X
X  /**************/
X  /* Stop timer */
X  /**************/
X  
X#ifdef TIMES
X  times (&time_info);
X  End_Time = (long) time_info.tms_utime;
X#endif
X#ifdef TIME
X  End_Time = time ( (long *) 0);
X#endif
X
X  if(Int_Glob != INT_GLOB)
X	{
X  	fprintf (stderr, "Int_Glob:            %d\n", Int_Glob);
X  	fprintf (stderr, "        should be:   %d\n", INT_GLOB);
X	}
X  if(Bool_Glob != BOOL_GLOB)
X	{
X  	fprintf (stderr, "Bool_Glob:           %d\n", Bool_Glob);
X  	fprintf (stderr, "        should be:   %d\n", BOOL_GLOB);
X	}
X  if(Ch_1_Glob != 'A')
X	{
X  	fprintf (stderr, "Ch_1_Glob:           %c\n", Ch_1_Glob);
X  	fprintf (stderr, "        should be:   %c\n", 'A');
X	}
X  if(Ch_2_Glob != 'B')
X	{
X  	fprintf (stderr, "Ch_2_Glob:           %c\n", Ch_2_Glob);
X  	fprintf (stderr, "        should be:   %c\n", 'B');
X	}
X  if(Arr_1_Glob[ARR_1_SZ] != ARR_1_VAL)
X	{
X  	fprintf (stderr, "Arr_1_Glob[%d]:       %d\n", ARR_1_SZ, Arr_1_Glob[ARR_1_SZ]);
X  	fprintf (stderr, "        should be:   %d\n", ARR_1_VAL);
X	}
X  if(Arr_2_Glob[8][7] != (Number_Of_Runs + 10))
X	{
X  	fprintf (stderr, "Arr_2_Glob[8][7]:    %d\n", Arr_2_Glob[8][7]);
X  	fprintf (stderr, "        should be:   %d\n",Number_Of_Runs + 10);
X	}
X  if(Ptr_Glob->Discr != Ident_1)
X	{
X  	fprintf (stderr, "  Discr:             %d\n", Ptr_Glob->Discr);
X  	fprintf (stderr, "        should be:   %d\n", Ident_1);
X	}
X#ifdef COMPLETE
X  if(Ptr_Glob->variant.var_1.Enum_Comp != 2)
X	{
X  	fprintf (stderr, "  Enum_Comp:         %d\n", Ptr_Glob->variant.var_1.Enum_Comp);
X  	fprintf (stderr, "        should be:   %d\n", 2);
X	}
X	{
X  fprintf (stderr, "  Int_Comp:          %d\n", Ptr_Glob->variant.var_1.Int_Comp);
X  fprintf (stderr, "        should be:   %d\n", 17);
X	}
X	{
X  fprintf (stderr, "  Str_Comp:          %s\n", Ptr_Glob->variant.var_1.Str_Comp);
X  fprintf (stderr, "        should be:   %s\n", STR_0_PAR_REF);
X	}
X	{
X  fprintf (stderr, "Next_Ptr_Glob->\n");
X  fprintf (stderr, "  Ptr_Comp:          %d\n", (int) Next_Ptr_Glob->Ptr_Comp);
X  fprintf (stderr, "        should be:   (implementation-dependent), same as above\n");
X	}
X	{
X  fprintf (stderr, "  Discr:             %d\n", Next_Ptr_Glob->Discr);
X  fprintf (stderr, "        should be:   %d\n", 0);
X	}
X	{
X  fprintf (stderr, "  Enum_Comp:         %d\n", Next_Ptr_Glob->variant.var_1.Enum_Comp);
X  fprintf (stderr, "        should be:   %d\n", 1);
X	}
X	{
X  fprintf (stderr, "  Int_Comp:          %d\n", Next_Ptr_Glob->variant.var_1.Int_Comp);
X  fprintf (stderr, "        should be:   %d\n", 18);
X	}
X#endif
Xif(strcmp(Next_Ptr_Glob->variant.var_1.Str_Comp, STR_0_PAR_REF))
X	{
X  fprintf (stderr, "  Str_Comp:          %s\n",
X                                Next_Ptr_Glob->variant.var_1.Str_Comp);
X  fprintf (stderr, "        should be:   %s\n",STR_0_PAR_REF);
X	}
X#ifdef COMPLETE
X	{
X  fprintf (stderr, "Int_1_Loc:           %d\n", Int_1_Loc);
X  fprintf (stderr, "        should be:   %d\n", 5);
X	}
X	{
X  fprintf (stderr, "Int_2_Loc:           %d\n", Int_2_Loc);
X  fprintf (stderr, "        should be:   %d\n", 13);
X	}
X	{
X  fprintf (stderr, "Int_3_Loc:           %d\n", Int_3_Loc);
X  fprintf (stderr, "        should be:   %d\n", 7);
X	}
X	{
X  fprintf (stderr, "Enum_Loc:            %d\n", Enum_Loc);
X  fprintf (stderr, "        should be:   %d\n", 1);
X	}
X#endif
X  if(strcmp(Str_1_Loc, STR_1_PAR_REF))
X	{
X  	fprintf (stderr, "Str_1_Loc:           %s\n", Str_1_Loc);
X  	fprintf (stderr, "        should be:   %s\n",STR_1_PAR_REF);
X	}
X  if(strcmp(Str_2_Loc, STR_2_PAR_REF))
X	{
X  	fprintf (stderr, "Str_2_Loc:           %s\n", Str_2_Loc);
X  	fprintf (stderr, "        should be:   %s\n",STR_2_PAR_REF);
X        }
X
X  User_Time = End_Time - Begin_Time;
X
X  if (User_Time < Too_Small_Time)
X  {
X    fprintf (stderr, "Measured time too small to obtain meaningful results\n");
X    fprintf (stderr, "Please increase number of runs\n");
X    fprintf (stderr, "\n");
X  }
X  else
X  {
X#ifdef TIME
X    Microseconds = (float) User_Time * Mic_secs_Per_Second 
X                        / (float) Number_Of_Runs;
X    Dhrystones_Per_Second = (float) Number_Of_Runs / (float) User_Time;
X#else
X    Microseconds = (float) User_Time * Mic_secs_Per_Second 
X                        / ((float) HZ * ((float) Number_Of_Runs));
X    Dhrystones_Per_Second = ((float) HZ * (float) Number_Of_Runs)
X                        / (float) User_Time;
X#endif
X/************** The results go to standard out *********************/
X    fprintf (stderr,"Microseconds for one run through Dhrystone: ");
X    fprintf (stderr,"%6.1f \n", Microseconds);
X    fprintf (stderr,"Dhrystones per Second:                      ");
X    fprintf (stderr,"%6.1f \n", Dhrystones_Per_Second);
X    fprintf (stderr,"\n");
X  }
X  
X}
X
X
XProc_1 (Ptr_Val_Par)
X/**********************/
X
XREG Rec_Pointer Ptr_Val_Par;
X    /* executed once */
X{
X  REG Rec_Pointer Next_Record = Ptr_Val_Par->Ptr_Comp;  
X                                        /* == Ptr_Glob_Next */
X  /* Local variable, initialized with Ptr_Val_Par->Ptr_Comp,    */
X  /* corresponds to "rename" in Ada, "with" in Pascal           */
X  
X  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob); 
X  Ptr_Val_Par->variant.var_1.Int_Comp = 5;
X  Next_Record->variant.var_1.Int_Comp 
X        = Ptr_Val_Par->variant.var_1.Int_Comp;
X  Next_Record->Ptr_Comp = Ptr_Val_Par->Ptr_Comp;
X  Proc_3 (&Next_Record->Ptr_Comp);
X    /* Ptr_Val_Par->Ptr_Comp->Ptr_Comp 
X                        == Ptr_Glob->Ptr_Comp */
X  if (Next_Record->Discr == Ident_1)
X    /* then, executed */
X  {
X    Next_Record->variant.var_1.Int_Comp = 6;
X    Proc_6 (Ptr_Val_Par->variant.var_1.Enum_Comp, 
X           &Next_Record->variant.var_1.Enum_Comp);
X    Next_Record->Ptr_Comp = Ptr_Glob->Ptr_Comp;
X    Proc_7 (Next_Record->variant.var_1.Int_Comp, 10, 
X           &Next_Record->variant.var_1.Int_Comp);
X  }
X  else /* not executed */
X    structassign (*Ptr_Val_Par, *Ptr_Val_Par->Ptr_Comp);
X} /* Proc_1 */
X
X
XProc_2 (Int_Par_Ref)
X/******************/
X    /* executed once */
X    /* *Int_Par_Ref == 1, becomes 4 */
X
XOne_Fifty   *Int_Par_Ref;
X{
X  One_Fifty  Int_Loc;  
X  Enumeration   Enum_Loc;
X
X  Int_Loc = *Int_Par_Ref + 10;
X  do /* executed once */
X    if (Ch_1_Glob == 'A')
X      /* then, executed */
X    {
X      Int_Loc -= 1;
X      *Int_Par_Ref = Int_Loc - Int_Glob;
X      Enum_Loc = Ident_1;
X    } /* if */
X  while (Enum_Loc != Ident_1); /* true */
X} /* Proc_2 */
X
X
XProc_3 (Ptr_Ref_Par)
X/**********************/
X    /* executed once */
X    /* Ptr_Ref_Par becomes Ptr_Glob */
X
XRec_Pointer *Ptr_Ref_Par;
X
X{
X  if (Ptr_Glob != Null)
X    /* then, executed */
X    *Ptr_Ref_Par = Ptr_Glob->Ptr_Comp;
X  else /* not executed */
X    Int_Glob = 100;
X  Proc_7 (10, Int_Glob, &Ptr_Glob->variant.var_1.Int_Comp);
X} /* Proc_3 */
X
X
X
XProc_4 () /* without parameters */
X/*******/
X    /* executed once */
X{
X  Boolean Bool_Loc;
X
X  Bool_Loc = Ch_1_Glob == 'A';
X  Bool_Glob = Bool_Loc | Bool_Glob;
X  Ch_2_Glob = 'B';
X} /* Proc_4 */
X
X
XProc_5 () /* without parameters */
X/*******/
X    /* executed once */
X{
X  Ch_1_Glob = 'A';
X  Bool_Glob = false;
X} /* Proc_5 */
X
X
X        /* Procedure for the assignment of structures,          */
X        /* if the C compiler doesn't support this feature       */
X#ifdef  NOSTRUCTASSIGN
Xmemcpy (d, s, l)
Xregister char   *d;
Xregister char   *s;
Xregister int    l;
X{
X        while (l--) *d++ = *s++;
X}
X#endif
X
X/*****************************************************************
X                      THE PROCESSES
X *****************************************************************/
XProc_6 (Enum_Val_Par, Enum_Ref_Par)
X/*********************************/
X    /* executed once */
X    /* Enum_Val_Par == Ident_3, Enum_Ref_Par becomes Ident_2 */
X
XEnumeration  Enum_Val_Par;
XEnumeration *Enum_Ref_Par;
X{
X  *Enum_Ref_Par = Enum_Val_Par;
X  if (! Func_3 (Enum_Val_Par))
X    /* then, not executed */
X    *Enum_Ref_Par = Ident_4;
X  switch (Enum_Val_Par)
X  {
X    case Ident_1: 
X      *Enum_Ref_Par = Ident_1;
X      break;
X    case Ident_2: 
X      if (Int_Glob > 100)
X        /* then */
X      *Enum_Ref_Par = Ident_1;
X      else *Enum_Ref_Par = Ident_4;
X      break;
X    case Ident_3: /* executed */
X      *Enum_Ref_Par = Ident_2;
X      break;
X    case Ident_4: break;
X    case Ident_5: 
X      *Enum_Ref_Par = Ident_3;
X      break;
X  } /* switch */
X} /* Proc_6 */
X
X
XProc_7 (Int_1_Par_Val, Int_2_Par_Val, Int_Par_Ref)
X/**********************************************/
X    /* executed three times                                      */ 
X    /* first call:      Int_1_Par_Val == 2, Int_2_Par_Val == 3,  */
X    /*                  Int_Par_Ref becomes 7                    */
X    /* second call:     Int_1_Par_Val == 10, Int_2_Par_Val == 5, */
X    /*                  Int_Par_Ref becomes 17                   */
X    /* third call:      Int_1_Par_Val == 6, Int_2_Par_Val == 10, */
X    /*                  Int_Par_Ref becomes 18                   */
XOne_Fifty       Int_1_Par_Val;
XOne_Fifty       Int_2_Par_Val;
XOne_Fifty      *Int_Par_Ref;
X{
X  One_Fifty Int_Loc;
X
X  Int_Loc = Int_1_Par_Val + 2;
X  *Int_Par_Ref = Int_2_Par_Val + Int_Loc;
X} /* Proc_7 */
X
X
XProc_8 (Arr_1_Par_Ref, Arr_2_Par_Ref, Int_1_Par_Val, Int_2_Par_Val)
X/*********************************************************************/
X    /* executed once      */
X    /* Int_Par_Val_1 == 3 */
X    /* Int_Par_Val_2 == 7 */
XArr_1_Dim       Arr_1_Par_Ref;
XArr_2_Dim       Arr_2_Par_Ref;
Xint             Int_1_Par_Val;
Xint             Int_2_Par_Val;
X{
X  REG One_Fifty Int_Index;
X  REG One_Fifty Int_Loc;
X
X  Int_Loc = Int_1_Par_Val + 5;
X  Arr_1_Par_Ref [Int_Loc] = Int_2_Par_Val;
X  Arr_1_Par_Ref [Int_Loc+1] = Arr_1_Par_Ref [Int_Loc];
X  Arr_1_Par_Ref [Int_Loc+30] = Int_Loc;
X  for (Int_Index = Int_Loc; Int_Index <= Int_Loc+1; ++Int_Index)
X    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
X  Arr_2_Par_Ref [Int_Loc] [Int_Loc-1] += 1;
X  Arr_2_Par_Ref [Int_Loc+20] [Int_Loc] = Arr_1_Par_Ref [Int_Loc];
X  Int_Glob = 5;
X} /* Proc_8 */
X
X
XEnumeration Func_1 (Ch_1_Par_Val, Ch_2_Par_Val)
X/*************************************************/
X    /* executed three times                                         */
X    /* first call:      Ch_1_Par_Val == 'H', Ch_2_Par_Val == 'R'    */
X    /* second call:     Ch_1_Par_Val == 'A', Ch_2_Par_Val == 'C'    */
X    /* third call:      Ch_1_Par_Val == 'B', Ch_2_Par_Val == 'C'    */
X
XCapital_Letter   Ch_1_Par_Val;
XCapital_Letter   Ch_2_Par_Val;
X{
X  Capital_Letter        Ch_1_Loc;
X  Capital_Letter        Ch_2_Loc;
X
X  Ch_1_Loc = Ch_1_Par_Val;
X  Ch_2_Loc = Ch_1_Loc;
X  if (Ch_2_Loc != Ch_2_Par_Val)
X    /* then, executed */
X    return (Ident_1);
X  else  /* not executed */
X  {
X    Ch_1_Glob = Ch_1_Loc;
X    return (Ident_2);
X   }
X} /* Func_1 */
X
X
XBoolean Func_2 (Str_1_Par_Ref, Str_2_Par_Ref)
X/*************************************************/
X    /* executed once */
X    /* Str_1_Par_Ref == "DHRYSTONE PROGRAM, 1'ST STRING" */
X    /* Str_2_Par_Ref == "DHRYSTONE PROGRAM, 2'ND STRING" */
X
XStr_30  Str_1_Par_Ref;
XStr_30  Str_2_Par_Ref;
X{
X  REG One_Thirty        Int_Loc;
X      Capital_Letter    Ch_Loc;
X
X  Int_Loc = 2;
X  while (Int_Loc <= 2) /* loop body executed once */
X    if (Func_1 (Str_1_Par_Ref[Int_Loc],
X                Str_2_Par_Ref[Int_Loc+1]) == Ident_1)
X      /* then, executed */
X    {
X      Ch_Loc = 'A';
X      Int_Loc += 1;
X    } /* if, while */
X  if (Ch_Loc >= 'W' && Ch_Loc < 'Z')
X    /* then, not executed */
X    Int_Loc = 7;
X  if (Ch_Loc == 'R')
X    /* then, not executed */
X    return (true);
X  else /* executed */
X  {
X    if (strcmp (Str_1_Par_Ref, Str_2_Par_Ref) > 0)
X      /* then, not executed */
X    {
X      Int_Loc += 7;
X      Int_Glob = Int_Loc;
X      return (true);
X    }
X    else /* executed */
X      return (false);
X  } /* if Ch_Loc */
X} /* Func_2 */
X
X
XBoolean Func_3 (Enum_Par_Val)
X/***************************/
X    /* executed once        */
X    /* Enum_Par_Val == Ident_3 */
XEnumeration Enum_Par_Val;
X{
X  Enumeration Enum_Loc;
X
X  Enum_Loc = Enum_Par_Val;
X  if (Enum_Loc == Ident_3)
X    /* then, executed */
X    return (true);
X} /* Func_3 */
X
END_OF_FILE
if test 17085 -ne `wc -c <'dhry.c'`; then
    echo shar: \"'dhry.c'\" unpacked with wrong size!
fi
chmod +x 'dhry.c'
# end of 'dhry.c'
fi
if test -f 'dhry.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'dhry.h'\"
else
echo shar: Extracting \"'dhry.h'\" \(19075 characters\)
sed "s/^X//" >'dhry.h' <<'END_OF_FILE'
X/*******************************************************************************
X *  The BYTE UNIX Benchmarks - Release 2
X *          Module: dhry.h   SID: 2.4 4/17/90 16:45:38
X *          
X *******************************************************************************
X * Bug reports, patches, comments, suggestions should be sent to:
X *
X *	Ben Smith or Rick Grehan at BYTE Magazine
X *	bensmith@bixpb.UUCP    rick_g@bixpb.UUCP
X *
X *******************************************************************************
X *  Modification Log:
X * addapted from:
X *
X ******************************************************************************/
X/*
X ****************************************************************************
X *
X *                   "DHRYSTONE" Benchmark Program
X *                   -----------------------------
X *                                                                            
X *  Version:    C, Version 2.0
X *                                                                            
X *  File:       dhry_global.h (part 1 of 3)
X *
X *  Date:       March 3, 1988
X *
X *  Author:     Reinhold P. Weicker
X *                      Siemens AG, E STE 35
X *                      Postfach 3240
X *                      8520 Erlangen
X *                      Germany (West)
X *                              Phone:  [xxx-49]-9131-7-20330
X *                                      (8-17 Central European Time)
X *                              Usenet: ..!mcvax!unido!estevax!weicker
X *
X *              Original Version (in Ada) published in
X *              "Communications of the ACM" vol. 27., no. 10 (Oct. 1984),
X *              pp. 1013 - 1030, together with the statistics
X *              on which the distribution of statements etc. is based.
X *
X *              In this C version, the following C library functions are used:
X *              - strcpy, strcmp (inside the measurement loop)
X *              - printf, scanf (outside the measurement loop)
X *              In addition, UNIX system calls "times ()" or "time ()"
X *              are used for execution time measurement. For measurements
X *              on other systems, these calls have to be changed.
X *
X *  Collection of Results:
X *              Reinhold Weicker (address see above) and
X *              
X *              Rick Richardson
X *              PC Research. Inc.
X *              94 Apple Orchard Drive
X *              Tinton Falls, NJ 07724
X *                      Phone:  (201) 834-1378 (9-17 EST)               
X *                      Usenet: ...!seismo!uunet!pcrat!rick
X *
X *      Please send results to Reinhold Weicker and/or Rick Richardson.
X *      Complete information should be given on hardware and software used.
X *      Hardware information includes: Machine type, CPU, type and size
X *      of caches; for microprocessors: clock frequency, memory speed
X *      (number of wait states).
X *      Software information includes: Compiler (and runtime library)
X *      manufacturer and version, compilation switches, OS version.
X *      The Operating System version may give an indication about the
X *      compiler; Dhrystone itself performs no OS calls in the measurement loop.
X *
X *      The complete output generated by the program should be mailed
X *      such that at least some checks for correctness can be made.
X *
X ***************************************************************************
X *
X *  History:    This version C/2.0 has been made for two reasons:
X *
X *              1) There is an obvious need for a common C version of
X *              Dhrystone, since C is at present the most popular system
X *              programming language for the class of processors
X *              (microcomputers, minicomputers) where Dhrystone is used most.
X *              There should be, as far as possible, only one C version of
X *              Dhrystone such that results can be compared without
X *              restrictions. In the past, the C versions distributed
X *              by Rick Richardson (Version 1.1) and by Reinhold Weicker
X *              had small (though not significant) differences.
X *
X *              2) As far as it is possible without changes to the Dhrystone
X *              statistics, optimizing compilers should be prevented from
X *              removing significant statements.
X *
X *              This C version has been developed in cooperation with
X *              Rick Richardson (Tinton Falls, NJ), it incorporates many
X *              ideas from the "Version 1.1" distributed previously by
X *              him over the UNIX network Usenet.
X *              I also thank Chaim Benedelac (National Semiconductor),
X *              David Ditzel (SUN), Earl Killian and John Mashey (MIPS),
X *              Alan Smith and Rafael Saavedra-Barrera (UC at Berkeley)
X *              for their help with comments on earlier versions of the
X *              benchmark.
X *
X *  Changes:    In the initialization part, this version follows mostly
X *              Rick Richardson's version distributed via Usenet, not the
X *              version distributed earlier via floppy disk by Reinhold Weicker.
X *              As a concession to older compilers, names have been made
X *              unique within the first 8 characters.
X *              Inside the measurement loop, this version follows the
X *              version previously distributed by Reinhold Weicker.
X *
X *              At several places in the benchmark, code has been added,
X *              but within the measurement loop only in branches that 
X *              are not executed. The intention is that optimizing compilers
X *              should be prevented from moving code out of the measurement
X *              loop, or from removing code altogether. Since the statements
X *              that are executed within the measurement loop have NOT been
X *              changed, the numbers defining the "Dhrystone distribution"
X *              (distribution of statements, operand types and locality)
X *              still hold. Except for sophisticated optimizing compilers,
X *              execution times for this version should be the same as
X *              for previous versions.
X *              
X *              Since it has proven difficult to subtract the time for the
X *              measurement loop overhead in a correct way, the loop check
X *              has been made a part of the benchmark. This does have
X *              an impact - though a very minor one - on the distribution
X *              statistics which have been updated for this version.
X *
X *              All changes within the measurement loop are described
X *              and discussed in the companion paper "Rationale for
X *              Dhrystone version 2".
X *
X *              Because of the self-imposed limitation that the order and
X *              distribution of the executed statements should not be
X *              changed, there are still cases where optimizing compilers
X *              may not generate code for some statements. To a certain
X *              degree, this is unavoidable for small synthetic benchmarks.
X *              Users of the benchmark are advised to check code listings
X *              whether code is generated for all statements of Dhrystone.
X *
X ***************************************************************************
X *
X * Defines:     The following "Defines" are possible:
X *              -DREG=register          (default: Not defined)
X *                      As an approximation to what an average C programmer
X *                      might do, the "register" storage class is applied
X *                      (if enabled by -DREG=register)
X *                      - for local variables, if they are used (dynamically)
X *                        five or more times
X *                      - for parameters if they are used (dynamically)
X *                        six or more times
X *                      Note that an optimal "register" strategy is
X *                      compiler-dependent, and that "register" declarations
X *                      do not necessarily lead to faster execution.
X *              -DNOSTRUCTASSIGN        (default: Not defined)
X *                      Define if the C compiler does not support
X *                      assignment of structures.
X *              -DNOENUMS               (default: Not defined)
X *                      Define if the C compiler does not support
X *                      enumeration types.
X *              -DTIMES                 (default)
X *              -DTIME
X *                      The "times" function of UNIX (returning process times)
X *                      or the "time" function (returning wallclock time)
X *                      is used for measurement. 
X *                      For single user machines, "time ()" is adequate. For
X *                      multi-user machines where you cannot get single-user
X *                      access, use the "times ()" function. If you have
X *                      neither, use a stopwatch in the dead of night.
X *                      "printf"s are provided marking the points "Start Timer"
X *                      and "Stop Timer". DO NOT use the UNIX "time(1)"
X *                      command, as this will measure the total time to
X *                      run this program, which will (erroneously) include
X *                      the time to allocate storage (malloc) and to perform
X *                      the initialization.
X *              -DHZ=nnn                (default: 60)
X *                      The function "times" returns process times in
X *                      1/HZ seconds, with HZ = 60 for most systems.
X *                      CHECK YOUR SYSTEM DESCRIPTION BEFORE YOU JUST APPLY
X *                      THE DEFAULT VALUE.
X *
X ***************************************************************************
X *
X *  Compilation model and measurement (IMPORTANT):
X *
X *  This C version of Dhrystone consists of three files:
X *  - dhry_global.h (this file, containing global definitions and comments)
X *  - dhry_pack_1.c (containing the code corresponding to Ada package Pack_1)
X *  - dhry_pack_2.c (containing the code corresponding to Ada package Pack_2)
X *
X *  The following "ground rules" apply for measurements:
X *  - Separate compilation
X *  - No procedure merging
X *  - Otherwise, compiler optimizations are allowed but should be indicated
X *  - Default results are those without register declarations
X *  See the companion paper "Rationale for Dhrystone Version 2" for a more
X *  detailed discussion of these ground rules.
X *
X *  For 16-Bit processors (e.g. 80186, 80286), times for all compilation
X *  models ("small", "medium", "large" etc.) should be given if possible,
X *  together with a definition of these models for the compiler system used.
X *
X **************************************************************************
X *
X *  Dhrystone (C version) statistics:
X *
X *  [Comment from the first distribution, updated for version 2.
X *   Note that because of language differences, the numbers are slightly
X *   different from the Ada version.]
X *
X *  The following program contains statements of a high level programming
X *  language (here: C) in a distribution considered representative:           
X *
X *    assignments                  52 (51.0 %)
X *    control statements           33 (32.4 %)
X *    procedure, function calls    17 (16.7 %)
X *
X *  103 statements are dynamically executed. The program is balanced with
X *  respect to the three aspects:                                             
X *
X *    - statement type
X *    - operand type
X *    - operand locality
X *         operand global, local, parameter, or constant.                     
X *
X *  The combination of these three aspects is balanced only approximately.    
X *
X *  1. Statement Type:                                                        
X *  -----------------             number
X *
X *     V1 = V2                     9
X *       (incl. V1 = F(..)
X *     V = Constant               12
X *     Assignment,                 7
X *       with array element
X *     Assignment,                 6
X *       with record component
X *                                --
X *                                34       34
X *
X *     X = Y +|-|"&&"|"|" Z        5
X *     X = Y +|-|"==" Constant     6
X *     X = X +|- 1                 3
X *     X = Y *|/ Z                 2
X *     X = Expression,             1
X *           two operators
X *     X = Expression,             1
X *           three operators
X *                                --
X *                                18       18
X *
X *     if ....                    14
X *       with "else"      7
X *       without "else"   7
X *           executed        3
X *           not executed    4
X *     for ...                     7  |  counted every time
X *     while ...                   4  |  the loop condition
X *     do ... while                1  |  is evaluated
X *     switch ...                  1
X *     break                       1
X *     declaration with            1
X *       initialization
X *                                --
X *                                34       34
X *
X *     P (...)  procedure call    11
X *       user procedure      10
X *       library procedure    1
X *     X = F (...)
X *             function  call      6
X *       user function        5                                         
X *       library function     1                                               
X *                                --                                          
X *                                17       17
X *                                        ---
X *                                        103
X *
X *    The average number of parameters in procedure or function calls
X *    is 1.82 (not counting the function values as implicit parameters).
X *
X *
X *  2. Operators
X *  ------------
X *                          number    approximate
X *                                    percentage
X *
X *    Arithmetic             32          50.8                                 
X *
X *       +                     21          33.3                              
X *       -                      7          11.1                              
X *       *                      3           4.8
X *       / (int div)            1           1.6
X *
X *    Comparison             27           42.8
X *
X *       ==                     9           14.3
X *       /=                     4            6.3
X *       >                      1            1.6
X *       <                      3            4.8
X *       >=                     1            1.6
X *       <=                     9           14.3
X *
X *    Logic                   4            6.3
X *
X *       && (AND-THEN)          1            1.6
X *       |  (OR)                1            1.6
X *       !  (NOT)               2            3.2
X * 
X *                           --          -----
X *                           63          100.1
X *
X *
X *  3. Operand Type (counted once per operand reference):
X *  ---------------
X *                          number    approximate
X *                                    percentage
X *
X *     Integer               175        72.3 %
X *     Character              45        18.6 %
X *     Pointer                12         5.0 %
X *     String30                6         2.5 %
X *     Array                   2         0.8 %
X *     Record                  2         0.8 %
X *                           ---       -------
X *                           242       100.0 %
X *
X *  When there is an access path leading to the final operand (e.g. a record
X *  component), only the final data type on the access path is counted.       
X *
X *
X *  4. Operand Locality:                                                      
X *  -------------------
X *                                number    approximate
X *                                          percentage
X *
X *     local variable              114        47.1 %
X *     global variable              22         9.1 %
X *     parameter                    45        18.6 %
X *        value                        23         9.5 %
X *        reference                    22         9.1 %
X *     function result               6         2.5 %
X *     constant                     55        22.7 %
X *                                 ---       -------
X *                                 242       100.0 %
X *
X *
X *  The program does not compute anything meaningful, but it is syntactically
X *  and semantically correct. All variables have a value assigned to them
X *  before they are used as a source operand.
X *
X *  There has been no explicit effort to account for the effects of a
X *  cache, or to balance the use of long or short displacements for code or
X *  data.
X *
X ***************************************************************************
X */
X/* CONSTANTS */
X#define INT_GLOB	5
X#define BOOL_GLOB	1
X#define ARR_1_SZ	8
X#define ARR_1_VAL	7
X#define STR_0_PAR_REF 	"DHRYSTONE PROGRAM, SOME STRING"
X#define STR_1_PAR_REF	"DHRYSTONE PROGRAM, 1'ST STRING"
X#define STR_2_PAR_REF	"DHRYSTONE PROGRAM, 2'ND STRING"
X
X
X/* Compiler and system dependent definitions: */
X
X#ifndef TIME
X#ifndef TIMES
X#define TIMES
X#endif
X#endif
X                /* Use "times" function for measurement */
X                /* unless explicitly defined otherwise  */
X#ifndef HZ
X#define HZ      60
X#endif
X                /* Use HZ = 60 for "times" function     */
X                /* unless explicitly defined otherwise  */
X
X#ifdef TIMES
X#include <sys/types.h>
X#include <sys/times.h>
X                /* for "times" */
X#endif
X
X#define Mic_secs_Per_Second     1000000.0
X                /* UNIX C returns process times in seconds/HZ */
X
X#ifdef  NOSTRUCTASSIGN
X#define structassign(d, s)      memcpy(&(d), &(s), sizeof(d))
X#else
X#define structassign(d, s)      d = s
X#endif
X
X#ifdef  NOENUM
X#define Ident_1 0
X#define Ident_2 1
X#define Ident_3 2
X#define Ident_4 3
X#define Ident_5 4
X  typedef int   Enumeration;
X#else
X  typedef       enum    {Ident_1, Ident_2, Ident_3, Ident_4, Ident_5}
X                Enumeration;
X#endif
X        /* for boolean and enumeration types in Ada, Pascal */
X
X/* General definitions: */
X
X#include <stdio.h>
X                /* for strcpy, strcmp */
X
X#define Null 0 
X                /* Value of a Null pointer */
X#define true  1
X#define false 0
X
Xtypedef int     One_Thirty;
Xtypedef int     One_Fifty;
Xtypedef char    Capital_Letter;
Xtypedef int     Boolean;
Xtypedef char    Str_30 [31];
Xtypedef int     Arr_1_Dim [50];
Xtypedef int     Arr_2_Dim [50] [50];
X
Xtypedef struct record 
X    {
X    struct record *Ptr_Comp;
X    Enumeration    Discr;
X    union {
X          struct {
X                  Enumeration Enum_Comp;
X                  int         Int_Comp;
X                  char        Str_Comp [31];
X                  } var_1;
X          struct {
X                  Enumeration E_Comp_2;
X                  char        Str_2_Comp [31];
X                  } var_2;
X          struct {
X                  char        Ch_1_Comp;
X                  char        Ch_2_Comp;
X                  } var_3;
X          } variant;
X      } Rec_Type, *Rec_Pointer;
X
X
END_OF_FILE
if test 19075 -ne `wc -c <'dhry.h'`; then
    echo shar: \"'dhry.h'\" unpacked with wrong size!
fi
chmod +x 'dhry.h'
# end of 'dhry.h'
fi
echo shar: End of archive 4 \(of 5\).
cp /dev/null ark4isdone
MISSING=""
for I in 1 2 3 4 5 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 5 archives.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
exit 0 # Just in case...
