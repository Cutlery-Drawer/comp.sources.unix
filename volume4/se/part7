From: Jeff Lee <talcott!seismo!gatech!jeff>
Subject: Georgia Tech 'se' screen editor (Part 7 of 8)
Keywords: Software Tools, Yet Another Screen Editor, Both BSD and USG
Newsgroups: mod.sources
Approved: jpn@panda.UUCP

Mod.sources:  Volume 4, Issue 88
Submitted by: Jeff Lee <seismo!gatech!jeff>

#! /bin/sh
# This is a shell archive, meaning:
# 1. Remove everything above the #! /bin/sh line.
# 2. Save the resulting text in a file.
# 3. Execute the file with /bin/sh (not csh) to create:
#	Install
#	Makefile
#	README
#	a
#	abt
#	ah
#	ah_swt
#	arg2
#	args
#	b
#	bang
#	bug
#	c
#	cc
#	ccmisc
#	chardel
#	charins
#	colon
#	com
#	com_swt
#	comdir
#	comdir_swt
#	comsyn
#	d
#	detab.c
#	dir
#	e
#	eh
#	elp
#	equal
#	f
#	g
#	h
#	i
#	j
#	k
#	l
#	list
#	ln
#	ln_swt
#	m
#	m_swt
#	motion
# This archive created: Tue Apr 29 10:46:46 1986
export PATH; PATH=/bin:/usr/bin:$PATH
######
# the following added by hand since the help files were too big
if test ! -d 'se_h'
then
	echo shar: "creating directory 'se_h'"
	mkdir 'se_h'
fi
echo shar: "entering directory 'se_h'"
cd se_h
######
echo shar: "extracting 'Install'" '(278 characters)'
if test -f 'Install'
then
	echo shar: "will not over-write existing file 'Install'"
else
cat << \SHAR_EOF > 'Install'
#! /bin/sh
: Install -- put se help files into their proper directory.
:	     This program is called from the makefile.

INSTALL=$1
shift
umask 022

for i in $*
do
	echo installing $i
	detab < $i > $INSTALL/$i
done

: we really should do some error checking, but what the heck.
SHAR_EOF
chmod +x 'Install'
fi
echo shar: "extracting 'Makefile'" '(936 characters)'
if test -f 'Makefile'
then
	echo shar: "will not over-write existing file 'Makefile'"
else
cat << \SHAR_EOF > 'Makefile'
# makefile for se help scripts

DOCS= README

FILES= a abt ah arg2 args b bang bug c cc ccmisc chardel charins colon \
	com com_swt comdir comdir_swt comsyn d dir e eh elp equal f g h i \
	j k l list ln ln_swt m m_swt motion n o o- oa oc od of og oh oi ok ol \
	olm om op os ot ou ov ow ox oy oz p pat pat_swt patex patex_swt q \
	quote r rpt s s_swt scan scan_swt serc shell shell_swt specl t t_swt \
	termchar tilde u v w x y y_swt z

# destination for final	version	of help	scripts.
INSTALL=/usr/local/lib/se_h

install: existsall detab
	Install $(INSTALL) $(FILES)

existsall: $(FILES) $(DOCS) Install
	@echo this message indicates all the files exist, otherwise make would die.

detab: detab.c
	cc -O -o detab detab.c

clean:
	rm -f detab print2

clobber: clean


print:
	prt $(DOCS) Makefile Install $(FILES) | lpr -b 'se help'
	touch print2

print2:	$(DOCS)	Makefile Install $(FILES)
	prt $? | lpr -b	'new se	help'
	touch print2
SHAR_EOF
fi
echo shar: "extracting 'README'" '(878 characters)'
if test -f 'README'
then
	echo shar: "will not over-write existing file 'README'"
else
cat << \SHAR_EOF > 'README'
README:

This directory contains the help files for the Georgia Tech Software Tools/UNIX
screen editor Se.  The files with the _swt suffix contain information
which is correct when the editor is in Software Tools compatibility mode.
This is the default at Georgia Tech.  The files without the _swt suffix either
contain information which is the same for both Unix and SWT modes, or for
Unix mode, which is the default at any place other than Georgia Tech.

The dohelp() routine checks what mode the editor is in, and reads in the
appropriate file.

The files should be installed in the directory /usr/lib/se_h for se in order
for se to find them. File names must be in lower case, since dohelp() maps
the file name into all lower case. (On pr1mes, case is not significant in
file names, so the original ratfor version did not have to do this.)

Arnold Robbins
Georgia Tech
2/84
SHAR_EOF
fi
echo shar: "extracting 'a'" '(793 characters)'
if test -f 'a'
then
	echo shar: "will not over-write existing file 'a'"
else
cat << \SHAR_EOF > 'a'
         a    -- Append command

              default range           syntax
                          .           a

        "a" is for appending new lines of text after a given line.  If
        no line number is typed before the "a", text will be  appended
        after  the  current  line.  The last line appended becomes the
        current line.  To signal the end of  the  appended  text,  you
        type a "."  on a line by itself.  Control characters "f", "v",
        "l",  and  "k"  work differently for "a" command than for "v".
        "a:"  works as a one line append (i.e. anything following  the
        colon is appended after the current line).

        To return to the command directory, type "hcomdir."
        See also:  "hcc" (control characters) and "hc" (change).
SHAR_EOF
fi
echo shar: "extracting 'abt'" '(599 characters)'
if test -f 'abt'
then
	echo shar: "will not over-write existing file 'abt'"
else
cat << \SHAR_EOF > 'abt'
                               Abort character                                

        CTRL-F ("Funny Return") character  is  used  to  abort  a  "v"
        command  before  all  the  specified lines have been modified.
        Typing it causes the current line to be restored to its  state
        of  before  the  "v" command was begun, and causes a return to
        the editor's command level.


        Type "hv" for a description of the "v" command.
        Type "hrpt" for CTRL-F's meaning if in append or command mode.
        Type "htermchar" for info about other termination characters.
SHAR_EOF
fi
echo shar: "extracting 'ah'" '(142 characters)'
if test -f 'ah'
then
	echo shar: "will not over-write existing file 'ah'"
else
cat << \SHAR_EOF > 'ah'

          If you're running Berkeley Unix, and you're bored
          Type the following command for something enjoyable:

          !rogue

SHAR_EOF
fi
echo shar: "extracting 'ah_swt'" '(143 characters)'
if test -f 'ah_swt'
then
	echo shar: "will not over-write existing file 'ah_swt'"
else
cat << \SHAR_EOF > 'ah_swt'


          If you're running Berkeley Unix, and you're bored
          Type the following command for something enjoyable:

          ~rogue

SHAR_EOF
fi
echo shar: "extracting 'arg2'" '(917 characters)'
if test -f 'arg2'
then
	echo shar: "will not over-write existing file 'arg2'"
else
cat << \SHAR_EOF > 'arg2'
                               Arguments (cont)

        Once the terminal type  is  established,  the  remaining  arg-
        uments  are  interpreted  thus:  if the argument begins with a
        "-", the rest of it is interpreted as though it appeared after
        the "o" in an option command.  For  example,  an  argument  of
        "-w10"  acts  as  a command "ow10".  On the other hand, if the
        argument does not begin with "-", it is interpreted as a  file
        name  (path-  name).   The  named  file  is read into the edit
        buffer, and its name becomes the  remembered  file  name.   If
        more  than one file is named, the edit buffer will contain the
        contents of all the files.  If  an  error is encountered while
        interpreting arguments (file not found, illegal  option),  the
        remainder will be ignored.

        For invoking command syntax, type "hargs".
SHAR_EOF
fi
echo shar: "extracting 'args'" '(425 characters)'
if test -f 'args'
then
	echo shar: "will not over-write existing file 'args'"
else
cat << \SHAR_EOF > 'args'
                              Argument Handling

        The syntax for 'se's invoking command is usually given as
            se {-<option> | <pathname>}
        It is suggested  that  you  set up a command  file  that  will
        automatically invoke 'se' with the options that you like.

        To see how the remaining arguments are treated, type "harg2".
        To return to the general help directory, type "hdir".
SHAR_EOF
fi
echo shar: "extracting 'b'" '(100 characters)'
if test -f 'b'
then
	echo shar: "will not over-write existing file 'b'"
else
cat << \SHAR_EOF > 'b'



               There is no "b" command.
   To return to the command directory, type "hcomdir."


SHAR_EOF
fi
echo shar: "extracting 'bang'" '(350 characters)'
if test -f 'bang'
then
	echo shar: "will not over-write existing file 'bang'"
else
cat << \SHAR_EOF > 'bang'


        ! --- exclude on markname

        default range                   syntax
          1,$                             !<m>command
        
        Similar to the "x" prefix, except that  "command" is performed
        for all lines in the range that do not have the mark name <m>.

        To return to the command directory, type "hcomdir".
SHAR_EOF
fi
echo shar: "extracting 'bug'" '(413 characters)'
if test -f 'bug'
then
	echo shar: "will not over-write existing file 'bug'"
else
cat << \SHAR_EOF > 'bug'

            There is a limit (MAXLINE - 2) on the number of characters
        in a line. Se's MAXLINE is currently 512, so this isn't too much
        of a problem.
            If a filename is absent when invoked, all of the
        options are not processed.


        To go all the way back to the general help display, type "h".    
        To go back to the general help directory, type "hdir."           
SHAR_EOF
fi
echo shar: "extracting 'c'" '(619 characters)'
if test -f 'c'
then
	echo shar: "will not over-write existing file 'c'"
else
cat << \SHAR_EOF > 'c'
          c    -- Change command

               default range           syntax
                    .,.                  c

        "c"  first  deletes  the range of lines determined by the line
        numbers (default ".,."), then enters append mode so  that  you
        can  type  lines to replace the deleted lines.  Append mode is
        terminated with a dot on a line by itself, as with the  Append
        command. "c:" works as a one line change (i.e. what  is  after
        the colon replaces the current line).

        To return to the command directory, type "hcomdir."
        See also   "ha" and "hd"
SHAR_EOF
fi
echo shar: "extracting 'cc'" '(747 characters)'
if test -f 'cc'
then
	echo shar: "will not over-write existing file 'cc'"
else
cat << \SHAR_EOF > 'cc'

        Control characters can be used for correcting typing mistakes,
        for correcting commands that have incurred an error message,
        or for editing the edit buffer ("inline editing") via the "v"
        command.  The novice should be told right away that hitting
        the DEL or RUBOUT key is a way to erase an erroneous command.

        General Help Directory. . . . . . . . . . . . . . hdir
        Other Control Characters. . . . . . . . . . . . . hccmisc
        Character Insertion Control Characters. . . . . . hcharins
        Termination Control Characters. . . . . . . . . . htermchar
        Character Deletion Control Characters . . . . . . hchardel
        Cursor Motion Control Characters. . . . . . . . . hmotion
SHAR_EOF
fi
echo shar: "extracting 'ccmisc'" '(415 characters)'
if test -f 'ccmisc'
then
	echo shar: "will not over-write existing file 'ccmisc'"
else
cat << \SHAR_EOF > 'ccmisc'
                       Miscellaneous Control Characters

         CTRL-Z toggles an indicator that acts as a "shift lock",
         controlling case mapping on alphabetics typed.

         CTRL-Q signals the editor that you suspect that for some
         reason the screen is garbaged.  The response is to clear and
         restore the screen.


         Type "hcc" to get back to the control character directory.
SHAR_EOF
fi
echo shar: "extracting 'chardel'" '(481 characters)'
if test -f 'chardel'
then
	echo shar: "will not over-write existing file 'chardel'"
else
cat << \SHAR_EOF > 'chardel'
                    Character Deletion Control Characters
        Gobble one character
          to left of cursor          CTRL-U
          at cursor                  CTRL-R
        Gobble all characters
          to left of cursor          CTRL-Y
          at and to right of cursor  CTRL-T
          on entire line             DEL (a. k. a. RUBOUT)


        "hdir" gets you back to the general help directory.
        Type "hcc" to get back to the control character directory.
SHAR_EOF
fi
echo shar: "extracting 'charins'" '(620 characters)'
if test -f 'charins'
then
	echo shar: "will not over-write existing file 'charins'"
else
cat << \SHAR_EOF > 'charins'
                    Character Insertion Control Characters

        CTRL-C inserts a blank at the cursor position.
        CTRL-X inserts blanks to the next tab stop at the cursor position.
        CTRL-A toggles Insert Mode.

        When Insert Mode is in effect, any printing character typed is
        inserted into the line, with characters at and to the right of
        the cursor moving over to make room.  When Insert Mode is  not
        in effect, any printing character typed will replace (overlay)
        the character at the cursor.


        To return to the directory of control characters, type "hcc".
SHAR_EOF
fi
echo shar: "extracting 'colon'" '(355 characters)'
if test -f 'colon'
then
	echo shar: "will not over-write existing file 'colon'"
else
cat << \SHAR_EOF > 'colon'
         :    -- Page command

              default range           syntax
                    .                 :

      ":" is for paging the active area one page (n-1 lines)
      forward.


       For paging backward, see "hp"
       See also:  "hcc" (control characters) and "hc" (change).
       To return to the command directory, type "hcomdir."
SHAR_EOF
fi
echo shar: "extracting 'com'" '(589 characters)'
if test -f 'com'
then
	echo shar: "will not over-write existing file 'com'"
else
cat << \SHAR_EOF > 'com'
                                   Commands
                                                                         
        When  the "cmd>" prompt appears near the bottom of the screen,
        a command may be typed.  Commands work for the most  part  the
        same way as commands to 'ed', the Unix system text editor with
        which you may be familiar.

          To return to the general help directory, type "hdir".          
          For information about specific commands, type "hcomdir".       
          For details on command syntax, type "hcomsyn".                 
SHAR_EOF
fi
echo shar: "extracting 'com_swt'" '(604 characters)'
if test -f 'com_swt'
then
	echo shar: "will not over-write existing file 'com_swt'"
else
cat << \SHAR_EOF > 'com_swt'
                                   Commands
                                                                         
        When  the "cmd>" prompt appears near the  bottom of the screen,
        a command may be typed.  Commands work  for the most  part  the
        same way as commands to 'ed', the Software Tools Subsystem text
        editor with which you may be familiar.

          To return to the general help directory, type "hdir".          
          For information about specific commands, type "hcomdir".       
          For details on command syntax, type "hcomsyn".                 
SHAR_EOF
fi
echo shar: "extracting 'comdir'" '(819 characters)'
if test -f 'comdir'
then
	echo shar: "will not over-write existing file 'comdir'"
else
cat << \SHAR_EOF > 'comdir'

                              Command Directory

        The following are the full names of one-letter commands
        Append            Change   Delete   Enter    File     Global
        Help     Insert   Join     marK     Locate   Move     Name
        Option   Page     Quit     Read     Substitute        To
        Undelete oVerlay  Write    eXclude  translYterate

        For info about one of these commands, type "h" followed by
        whichever letter is capitalized in the command name above.

        Other commands and their help commands are:
            print value   hequal        global on mark   hquote
            miscellany    hz            exclude on mark  htilde
            shell escape  hshell        .serc file       hserc

        There are still more commands; to see them type "hspecl".
SHAR_EOF
fi
echo shar: "extracting 'comdir_swt'" '(811 characters)'
if test -f 'comdir_swt'
then
	echo shar: "will not over-write existing file 'comdir_swt'"
else
cat << \SHAR_EOF > 'comdir_swt'

                              Command Directory

        The following are the full names of one-letter commands
        Append   copY     Change   Delete   Enter    File     Global
        Help     Insert   Join     marK     Locate   Move     Name
        Option   Page     Quit     Read     Substitute
        Transliterate     Undelete oVerlay  Write    eXclude

        For info about one of these commands, type "h" followed by
        whichever letter is capitalized in the command name above.

        Other commands and their help commands are:
            print value   hequal        global on mark   hquote
            miscellany    hz            exclude on mark  hbang
            shell escape  hshell        .serc file       hserc

        There are still more commands; to see them type "hspecl".
SHAR_EOF
fi
echo shar: "extracting 'comsyn'" '(722 characters)'
if test -f 'comsyn'
then
	echo shar: "will not over-write existing file 'comsyn'"
else
cat << \SHAR_EOF > 'comsyn'
                                Command Syntax

        A command consists  of  an  optional  list  of  LINE  NUMBERS,
        followed  by a COMMAND LETTER, possibly followed by parameters
        allowed or required for a specific  command.   Preceeding  all
        this,  there  can be a GLOBAL PREFIX preceeded optionally by a
        list  of  line   numbers.   Hence   the   whole   syntax   is:

        [[<list>]<global prefix>][<list>]<command letter>[<stuff>]

        For general information about commands, type "hcom".
        For information about specific commands, type "hcomdir".
        For GLOBAL PREFIX syntax and semantics, type "hg".
        For LINE NUMBER LIST syntax and semantics, type "hlist".
SHAR_EOF
fi
echo shar: "extracting 'd'" '(614 characters)'
if test -f 'd'
then
	echo shar: "will not over-write existing file 'd'"
else
cat << \SHAR_EOF > 'd'
        d    -- Delete command

               default range           syntax
                         .,.           d

        "d"  is  used  to  delete  lines of text from the buffer.  The
        lines in the range specified  by  the  line  number  list  are
        deleted.   The  positioning  of the current line pointer after
        execution of the "d" command is controlled by the "d"  option;
        see  "hod".   The  normal  behavior  is to make the first line
        AFTER the lines deleted the new current line.

        To return to the command directory, type "hcomdir."
        See also "hod".
SHAR_EOF
fi
echo shar: "extracting 'detab.c'" '(1188 characters)'
if test -f 'detab.c'
then
	echo shar: "will not over-write existing file 'detab.c'"
else
cat << \SHAR_EOF > 'detab.c'
/* Detab - convert tabs to appropriate number of spaces */

/* transcribed from Kernighan and Plaguer (Software Tools) */
/* fixed up by Arnold Robbins */

#include <stdio.h>

#define MAXLINE         132

#define repeat          do
#define until(x)        while(!(x))

#define tabpos(col, tabs)       ( (col > MAXLINE) ? 1 : tabs[col - 1])

main()
{
        int c, i, tabs[MAXLINE], col = 1;

        settabs(tabs);

        while ((c = getchar()) != EOF)
                switch(c) {
                case '\t':
                        repeat
                        {
                                putchar(' ');
                                col++;
                        } until(tabpos(col, tabs));
                        break;

                case '\n':
                        putchar('\n');
                        col = 1;
                        break;

                default:
                        putchar(c);
                        col++;
                        break;
                }
}

settabs(tabs)
int tabs[];
{
        int i;

        for(i = 1; i <= MAXLINE; i++)
                tabs[i - 1] = ((i % 8) == 1);
                /* result is either 1 or 0 */
}
SHAR_EOF
fi
echo shar: "extracting 'dir'" '(441 characters)'
if test -f 'dir'
then
	echo shar: "will not over-write existing file 'dir'"
else
cat << \SHAR_EOF > 'dir'
                                HELP DIRECTORY


        To go back to the general description, type        "h"
        For info on the 'se' invoking command, type        "hargs"
        For a discussion of commands,          type        "hcom"
        For a description of 'se's problems,   type        "hbug"
        To learn about control characters,     type        "hcc"
        For info on options,                   type        "ho"

SHAR_EOF
fi
echo shar: "extracting 'e'" '(793 characters)'
if test -f 'e'
then
	echo shar: "will not over-write existing file 'e'"
else
cat << \SHAR_EOF > 'e'
          e    -- Enter command

               default range           syntax
                         n/a           e[! | x] [file name]

        "e" prevents one from having to exit and reenter the editor to
        edit  a  different file.  "e" empties the edit buffer, reads a
        file, and resets the remembered file name.  If [file name]  is
        omitted,  the  remembered  file  name is used.  [!] is used to
        override a check made to prevent you from accidently losing  a
        buffer that has not been saved (same as in "q"). [x]   is used
        to turn tab expansion   on when reading the file in.  Se  will
        expand environment variables that start with  $ in file names.

        To return to the command directory, type "hcomdir."
        See also:  "hq"
SHAR_EOF
fi
echo shar: "extracting 'eh'" '(318 characters)'
if test -f 'eh'
then
	echo shar: "will not over-write existing file 'eh'"
else
cat << \SHAR_EOF > 'eh'
    You are standing at the end of a road before a small brick building.
    around you is a forest.  A small stream flows out of the building and
    down a gully.


    You are inside a building, a well house for a large spring.

    There are some keys on the ground here.

    There is a shiny brass lamp nearby.

SHAR_EOF
fi
echo shar: "extracting 'elp'" '(881 characters)'
if test -f 'elp'
then
	echo shar: "will not over-write existing file 'elp'"
else
cat << \SHAR_EOF > 'elp'
                                     Help

        You are using 'se', the  Georgia  Tech screen editor which  is
        based upon the editor described in the book SOFTWARE TOOLS, by
        Brian W.  Kernighan  and  P.   J.   Plauger   (Addison-Wesley,
        1976).   The  screen-oriented  modifications (and some others)
        are by  Jack  Waugh and  Perry  Flinn.  Dan Forsyth translated
        the Ratfor into C.  Arnold Robbins modified the editor to  use
        the Berkeley termlib library, making the editor terminal inde-
        pendant.  Most of this  'help' is  courtesy  of Bob  Gordon of
        Prime  Research, as  amended by  Arnold Robbins.  The descrip-
        tion before you now  is  invoked by the  "h" (help) command.

        For a description of the 'help' command, type "hh".
        Find out what the help command can tell you - type "hdir".


SHAR_EOF
fi
echo shar: "extracting 'equal'" '(306 characters)'
if test -f 'equal'
then
	echo shar: "will not over-write existing file 'equal'"
else
cat << \SHAR_EOF > 'equal'
         =    -- Display Line Number command

              default range           syntax
                   .                  =

      "=" is for determining the number of the current line
      that you are editing.



       To return to the command directory, type "hcomdir."
       See also:  "hoa"
SHAR_EOF
fi
echo shar: "extracting 'f'" '(693 characters)'
if test -f 'f'
then
	echo shar: "will not over-write existing file 'f'"
else
cat << \SHAR_EOF > 'f'
        f -- File command

             default range              syntax
                  n/a               f [file name]

        "f"  is  used to print or reset the name of the current file
        being edited.  f [file name] resets the name for the current
        file.  This filename is used by the "w", "e", and  "r"  com-
        mands  when  no  parameters are provided.  f does not change
        the "ok" toggle.  f with no parameters prints out the remem-
        bered name.  In file names, Se will  expand  any  enviroment
        variables that start with a $.

        To  return  to  the  command directory, type "hcomdir."  See
        also:  "he", "hw", "hr", and "hok".

SHAR_EOF
fi
echo shar: "extracting 'g'" '(572 characters)'
if test -f 'g'
then
	echo shar: "will not over-write existing file 'g'"
else
cat << \SHAR_EOF > 'g'
          g    -- Global command

               default range           syntax
                         1,$           g/pattern/command

        "g"  is  used  to perform an editing command on all lines that
        match the "pattern".   "pattern"  is  any  legal  pattern  and
        command is an editor command.  The "x" command is the converse
        of "g" and performs the command on all lines that do not match
        the pattern.  The "/" may be any character.


        To return to the command directory, type "hcomdir."
        See also:  "hx" and "hpat".
SHAR_EOF
fi
echo shar: "extracting 'h'" '(531 characters)'
if test -f 'h'
then
	echo shar: "will not over-write existing file 'h'"
else
cat << \SHAR_EOF > 'h'
          h    -- Help command

               default range           syntax
                         n/a           h[ null | parameter]

        Typing  "h"  followed  by any character  string simply displays
        the  contents of the se help script of that name at the top  of
        the  screen  (provided  the  script  exists).  The  scripts are
        files in the directory '/usr/local/lib/se_h'. If the scriptname
        is omitted, "elp" is assumed.

        To see a general directory of help scripts, type "hdir".
SHAR_EOF
fi
echo shar: "extracting 'i'" '(850 characters)'
if test -f 'i'
then
	echo shar: "will not over-write existing file 'i'"
else
cat << \SHAR_EOF > 'i'
         i    -- Insert command

              default range           syntax
                          .           i

        "i"  is  for  inserting new lines of text before a given line.
        If no line number is  typed  before  the  "i",  text  will  be
        inserted  before  the  current  line.   Lines  are continually
        inserted before the original line, which has the  same  effect
        as  append  does.  To signal the end of the inserted text, you
        only need to type  a  "."   on  a  line  by  itself.   Control
        characters  "f",  "v",  "l",  and "k" work differently for "i"
        command than for "v". "i:" works as a one line insert, similar
        to "a:".

        To return to the command directory, type "hcomdir."
        See also:  "hcc" (control characters) and  "hc"  (change)  and
        "ha".
SHAR_EOF
fi
echo shar: "extracting 'j'" '(575 characters)'
if test -f 'j'
then
	echo shar: "will not over-write existing file 'j'"
else
cat << \SHAR_EOF > 'j'

        j -- Join command

               default range           syntax
                         ^,.           j[/string[/]]

        "j"  is used to join the specified lines into a single line.
        If "string" is present, it is inserted between each pair  of
        lines  joined.  If not, a single blank is used.  "j/" is the
        same "j//", i.e., no string at all will be inserted  between
        the  joined  lines.   The  "/"  may  be  any character.  The
        trailing delimiter is optional.

        To return to the command directory, type "hcomdir."

SHAR_EOF
fi
echo shar: "extracting 'k'" '(386 characters)'
if test -f 'k'
then
	echo shar: "will not over-write existing file 'k'"
else
cat << \SHAR_EOF > 'k'
          k    -- marK command

               default range           syntax
                         .,.           k<single-character-name>

        "k" is used to mark lines with the given name.
        If no character is provided, the current label(s) in the
        range are removed.


        To return to the command directory, type "hcomdir."
        See also: "hln" and "hn".
SHAR_EOF
fi
echo shar: "extracting 'l'" '(636 characters)'
if test -f 'l'
then
	echo shar: "will not over-write existing file 'l'"
else
cat << \SHAR_EOF > 'l'

        l -- Locate command

             default range         syntax
                none                  l

        The  Locate  command  places the system name into the status
        line (e.g.  "gatech" or "gitpyr").    This is  so  that  you
        can tell  what  machine you are using from within the screen
        editor.  This is particularly useful for installations  with
        many  machines  that  can run the editor, where you are able
        to  switch back and forth between them, and become  confused
        as to where you are at a given moment.

        To return to the command directory, type "hcomdir."

SHAR_EOF
fi
echo shar: "extracting 'list'" '(846 characters)'
if test -f 'list'
then
	echo shar: "will not over-write existing file 'list'"
else
cat << \SHAR_EOF > 'list'
                            List (of line numbers)

        A  line  number list consists of one or more LINE NUMBERs sep-
        arated with commas or semicolons.  The last two  line  numbers
        in  the  list  usually  specify  the  scope of a command.  For
        example, "5,7d" means delete lines 5 through 7.  If  the  list
        consists  of  only one line number, it is equivalant to a list
        with that line number written twice with a  comma  separating.
        The  sense of the semicolon is to set the CURRENT LINE POINTER
        to the value of the line number before  the  semicolon  before
        evaluating  the  line  number after it, whose value may depend
        upon the value of the current line pointer.

        For command syntax, type "hcomsyn".
        For LINE NUMBER syntax and semantics, type "hln".
SHAR_EOF
fi
echo shar: "extracting 'ln'" '(868 characters)'
if test -f 'ln'
then
	echo shar: "will not over-write existing file 'ln'"
else
cat << \SHAR_EOF > 'ln'
                                Line Numbers

        A  LINE  NUMBER  refers  to  a line in the edit buffer.  The
        lines are always numbered sequentially starting with  1.   A
        line  number can be expressed as an integer, as "."  meaning
        the CURRENT LINE, "^" or "-" meaning  the  line  before  the
        current  line,  "$"  meaning  the  last  line,  as a PATTERN
        enclosed in "/" slashes for a forward  scan,  as  a  pattern
        enclosed  in  "?"   question marks for a backward scan, as a
        MARK NAME preceeded by "<" for a backward search or  by  ">"
        for  a forward search, or as any additive combination of the
        above by joining them with operators "+",  "-",  or  nothing
        (meaning "+").

        Type "hlist" for line number list syntax.
        For details on scans and searches, type "hscan".

SHAR_EOF
fi
echo shar: "extracting 'ln_swt'" '(859 characters)'
if test -f 'ln_swt'
then
	echo shar: "will not over-write existing file 'ln_swt'"
else
cat << \SHAR_EOF > 'ln_swt'
                                Line Numbers

        A  LINE  NUMBER  refers  to  a line in the edit buffer.  The
        lines are always numbered sequentially starting with  1.   A
        line  number can be expressed as an integer, as "."  meaning
        the CURRENT LINE, "^" or "-" meaning  the  line  before  the
        current  line,  "$"  meaning  the  last  line,  as a PATTERN
        enclosed in "/" slashes for a forward  scan,  as  a  pattern
        enclosed  in "\" back slashes for a backward scan, as a MARK
        NAME preceeded by "<" for a backward search or by ">" for  a
        forward  search, or as any additive combination of the above
        by joining them with operators "+", "-", or nothing (meaning
        "+").

        Type "hlist" for line number list syntax.
        For details on scans and searches, type "hscan".

SHAR_EOF
fi
echo shar: "extracting 'm'" '(314 characters)'
if test -f 'm'
then
	echo shar: "will not over-write existing file 'm'"
else
cat << \SHAR_EOF > 'm'
          m    -- Move command

               default range           syntax
                         .,.           from-here,to-here m there

        "m" is used to move lines form one place in the buffer to
        another.



        To return to the command directory, type "hcomdir."
        See also   "ht"
SHAR_EOF
fi
echo shar: "extracting 'm_swt'" '(314 characters)'
if test -f 'm_swt'
then
	echo shar: "will not over-write existing file 'm_swt'"
else
cat << \SHAR_EOF > 'm_swt'
          m    -- Move command

               default range           syntax
                         .,.           from-here,to-here m there

        "m" is used to move lines form one place in the buffer to
        another.



        To return to the command directory, type "hcomdir."
        See also   "hy"
SHAR_EOF
fi
echo shar: "extracting 'motion'" '(540 characters)'
if test -f 'motion'
then
	echo shar: "will not over-write existing file 'motion'"
else
cat << \SHAR_EOF > 'motion'
                       Cursor Motion Control Characters

        Moving the cursor one position:
          left              CTRL-H
          right             CTRL-G
          up                CTRL-D
          down              CTRL-K
        Moving to the next tab stop:
          left              CTRL-E
          right             CTRL-I
        Moving all the way to the left:                 CTRL-W
        Moving to the current right end of the line:    CTRL-O

        Type "hcc" for general information about control characters.
SHAR_EOF
fi
######
echo shar: "done with directory 'se_h' (first part)"
cd ..
######
exit 0
#	End of shell archive

