Subject:  v08i007:  Georgia Tech 'se' Screen Editor
Newsgroups: mod.sources
Approved: mirror!rs

Submitted by: emoryu1!arnold (Arnold D. Robbins)
Mod.sources: Volume 8, Issue 7
Archive-name: se/Part07


Here is the second release of the Georgia Tech Screen Editor, 'se'.
There were enough changes that a whole new posting is warranted.

Major Changes:
	All Georgia Tech specific stuff removed.
	It understands window size changes on 4.3BSD and ATT Unix PC/3B1
	Support for the shared library on the ATT Unix PC/3B1
	Considerable source code reorganization in certain files.

Enjoy,

Arnold Robbins

#! /bin/sh
# This is a shell archive, meaning:
# 1. Remove everything above the #! /bin/sh line.
# 2. Save the resulting text in a file.
# 3. Execute the file with /bin/sh (not csh) to create the files:
#	o
#	o-
#	oa
#	oc
#	od
#	of
#	og
#	oh
#	oi
#	ok
#	ol
#	olm
#	om
#	os
#	ot
#	ou
#	ov
#	ow
#	ox
#	oy
#	oz
#	p
#	pat
#	patex
#	q
#	quote
#	r
#	rpt
#	s
#	scan
#	serc
#	shell
#	specl
#	t
#	termchar
#	tilde
#	u
#	v
#	w
#	x
#	y
#	z
export PATH; PATH=/bin:$PATH
if test ! -d 'se_h'
then
	echo shar: creating directory "'se_h'"
	mkdir 'se_h'
fi
echo shar: entering directory "'se_h'"
cd 'se_h'
echo shar: extracting "'o'" '(615 characters)'
if test -f 'o'
then
	echo shar: will not over-write existing file "'o'"
else
cat << \SHAR_EOF > 'o'
        o -- Option

        The "o" (option) command allows any  of several variables  that
        affect  the  editor's  behavior  to   be  set  or  tested.  The
        behavior of the "o"  command depends upon what is  typed  after
        the "o".

        To  find out about  specific options, type "hoa", "hoc", "hod",
        "hof", "hog", "hoh", "hoi", "hok", "hol", "holm", "hom", "hos",
	"hot", "hou", "hov", "how", "hox", "hoy", "hoz", or "ho-".

        To  see how to set options with the  command that invokes 'se',
        type "hargs".

        To return to the command directory, type "hcomdir".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'o-'" '(830 characters)'
if test -f 'o-'
then
	echo shar: will not over-write existing file "'o-'"
else
cat << \SHAR_EOF > 'o-'
        o-  -- Option - (dash)

               default range             syntax
                  1,$                     o-[line number]

        The "-" option controls the placement on the screen of  a  row
        of dashes, which normally is off the screen above the top line
        or  hiding  behind  the  bottom line of the help display.  The
        "window" through which you look at the edit buffer is the por-
        tion of the screen BELOW the  row  of  dashes  but  above  the
        command  line  (when  it exists) or status line at the bottom.
        "o-" alone puts the row of dashes above  the  top  line;  "o-"
        followed  by a SINGLE TERM line number puts it in place of the
        line referred to on the screen, if possible.

        For general information about the option command, type "ho".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'oa'" '(876 characters)'
if test -f 'oa'
then
	echo shar: will not over-write existing file "'oa'"
else
cat << \SHAR_EOF > 'oa'
        oa -- Option Absolute

               default range             syntax
                   1,$                     oa

        "oa" toggles the Absolute line numbers flag, which  determines
        whether  the numbers in the left margin shall be absolute line
        numbers, or the (usually capital) letters that refer to  lines
        by  the  position  at  which  they  are being displayed on the
        screen.  In any case, the current line is always shown as  "."
        (with  the "->" arrow to make it easy to find), the first line
        in the buffer is labeled "1", and  the  last,  "$"  (when  not
        ".").   Lines  can  be  referred  to  by  letter ONLY when the
        letters appear in the left margin.

        For general information about the option command, type "ho".
        See also "hln" for how lines can be referred to in commands.
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'oc'" '(706 characters)'
if test -f 'oc'
then
	echo shar: will not over-write existing file "'oc'"
else
cat << \SHAR_EOF > 'oc'
        oc -- Option Case

               default range             syntax
                   1,$                     oc

        The "c" (case) option toggles the same case mapping flag  that
        is  toggled  by the CTRL-Z control character, but also changes
        the marginal line letters to lower case (or back to upper), so
        that typing a shifted letter will still refer to a  line,  and
        typing an unshifted letter will do for a command letter.  This
        is  useful for handling large amounts of upper case text, such
        as Fortran programs.

        For general information about the option command, type "ho".
        See also "hoa".
        Fortraners see also "hof".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'od'" '(785 characters)'
if test -f 'od'
then
	echo shar: will not over-write existing file "'od'"
else
cat << \SHAR_EOF > 'od'
        od -- Option Delete

               default range             syntax
                  1,$                     od[<|>]

        The "d" option is for Delete direction.  Typing "od<" fixes it
        so  that  after  you  give  a "d" command, the line BEFORE the
        group of lines deleted becomes the current line  (.).   Typing
        "od>"  resets  the  normal behavior, in which the current line
        pointer is always positioned AFTER the group of lines  deleted
        by  the "d" command, if possible (Deleting the last line makes
        the new last  line  the  current  line).   Typing  "od"  alone
        queries  the  delete  direction flag, causing ">" or "<" to be
        displayed.

        For general information about the option command, type "ho".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'of'" '(579 characters)'
if test -f 'of'
then
	echo shar: will not over-write existing file "'of'"
else
cat << \SHAR_EOF > 'of'

        of -- Option Fortran

               default range             syntax
                  1,$                      of

        Typing  "of"  turns  on  a  package  of  options  considered
        convenient for editing Fortran.  The warning column  is  set
        to  72,  and tab spacing is set to 7 +3 so that tabbing once
        gets you to column 7.   Tab  expansion  is  also  turned  on
        (XTABS).   To  undo  "of" it is necessary to type "ot+3" and
        "ox".

        For general information about the option command, type "ho".
        See also "oa".

SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'og'" '(719 characters)'
if test -f 'og'
then
	echo shar: will not over-write existing file "'og'"
else
cat << \SHAR_EOF > 'og'

        og -- Option Global

               default range             syntax
                  1,$                     og

        The "g" option controls the behavior of the Substitute  command
        when it  is under the control of a Global  command.  Initially,
        if a substitute inside a global command fails, se will not con-
        tinue with  the rest of the lines  which might succeed. If "og"
        is given, then  the global substitute  will continue, and lines
        which failed will not be affected. Succesive "og" commands will
        toggle this behavior.  An explanatory message is placed in  the
        status line.

        For general information about the option command, type "ho".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'oh'" '(774 characters)'
if test -f 'oh'
then
	echo shar: will not over-write existing file "'oh'"
else
cat << \SHAR_EOF > 'oh'

        oh -- Option Hardware Insert/Delete

              default range             syntax
                 1,$                     oh

        The   "h"   option   controls   the  use  of  hardware  line
        insert/delete on terminals that have  that  capability.   By
        default,  line  insert/delete will be used if available.  It
        is occasionally useful to turn this option  off  when  using
        the editor on a terminal which can't keep up, or if the com-
        munications  lines may be scrambling the control characters.
        Each successive "oh" merely  toggles  a  switch  within  the
        editor.   An  explanatory  message  is  placed in the status
        line.

        For general information about the option command, type "ho".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'oi'" '(537 characters)'
if test -f 'oi'
then
	echo shar: will not over-write existing file "'oi'"
else
cat << \SHAR_EOF > 'oi'

        oi -- Option Indent

                default range           syntax
                    1, $                  oi[a | <indent>]

        "oi" selects the indent value for lines  inserted with "a" and
        "i" commands (initially 1). "a" selects auto-indent which sets
        the indent to the value  which equals the indent of the previ-
        ous line.  If  neither  "a" nor  "<indent>" is  specified, the
        current value of indent is displayed.

        For general information about the option command, type "ho".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'ok'" '(460 characters)'
if test -f 'ok'
then
	echo shar: will not over-write existing file "'ok'"
else
cat << \SHAR_EOF > 'ok'
        ok -- Option OK

        default range                    syntax
          1,$                             ok

        Typing  "ok"  simply tests the flag that indicates whether the
        edit buffer has been saved since the last change was  made  to
        it.   "Saved"  or  "Not saved" is accordingly displayed in the
        remark field at the bottom of the screen.

        To return to the option directory, type "ho".
        See also "hq".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'ol'" '(646 characters)'
if test -f 'ol'
then
	echo shar: will not over-write existing file "'ol'"
else
cat << \SHAR_EOF > 'ol'
        ol -- Option Line

               default range             syntax
                 1,$                      ol[$ | . | # | BLANK]

        The  "l"  option  is the Line number monitoring option. Typing
        "l" followed by "$" constantly displays the last  line  number
        in the file (current length of the file).  Typing "l" followed
        by  "."   constantly  displays  the current line number.  This
        usually make sense only in conjunction with the  "oa"  option,
        that uses letters for line names.

        For general information about the option command, type "ho".
        See also:  "hoa" and "hequal".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'olm'" '(664 characters)'
if test -f 'olm'
then
	echo shar: will not over-write existing file "'olm'"
else
cat << \SHAR_EOF > 'olm'

        olm -- Option Line Margin

        default range                           syntax
           1,$                                   olm[<col>]
        
        Sets the left margin to <col>  which must be a positive integer.
        This shifts the entire screen to  the left; the characters  that
        were in columns 1  through <col> - 1  will  not be visible.  You
        may continue editing in the normal fashion. To reset your screen
        to normal, enter the command "olm 1".  If <col> is omitted,  the
        current left margin column is displayed in the status line.

        For general information about the options command, type "ho".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'om'" '(733 characters)'
if test -f 'om'
then
	echo shar: will not over-write existing file "'om'"
else
cat << \SHAR_EOF > 'om'

        om -- Option Mail

               default range             syntax
                  1,$                     om

        "om" is an option which allows the user control   over  whether
        or  not he will  be  notified  about pending mail.  Typing "om"
        simply toggles the switch controlling notification.
            The default is for the editor to notify the  user about his
        mail.  The  mail  box  which the editor uses is taken from  the
        environment variable MAIL. If the mail box exists, but is empty
        the user will not be notified.

        To  read your mail, use a shell escape on whichever of the fol-
        lowing programs is appropriate:

                Mail     msg     mail
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'os'" '(613 characters)'
if test -f 'os'
then
	echo shar: will not over-write existing file "'os'"
else
cat << \SHAR_EOF > 'os'

        os --- option source

        default range           syntax
           1,$       s[as | c | d | data | f | h | n | nr | nroff | p | r | s]
        
        This option sets other options for case, tabs, etc.
            as, s   -- assembler files   c          -- C files
            d, data -- data files        f          -- fortran files
            h       -- header files      n,nr,nroff -- nroff source files
            p       -- pascal files      r          -- ratfor files
        
        See the manual page for details.

        For general information about the options command, type "ho".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'ot'" '(710 characters)'
if test -f 'ot'
then
	echo shar: will not over-write existing file "'ot'"
else
cat << \SHAR_EOF > 'ot'
        ot -- Option Tab

        range                        syntax
         1,$                ot[[[+]integer [+]integer]]


        "ot+3" sets the spacing between tab stops.  The  default  value
        when  'se'  comes  up  is 3.  Typing "ot" by itself causes the
        current value of the parameter to be displayed.  As an example
        of how tabs are spaced out, if ot+6 is in effect, tab stops are
        at 7, 13, 19, etc.
        Variable  tabs can be set by typing "ot 5 13 24 ..  ".  if you
        do not prefer equally spaced ones.

        See also "hof".
        For general information about the option command, type "ho".
        For more about the use of tab stops, type "hmotion".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'ou'" '(823 characters)'
if test -f 'ou'
then
	echo shar: will not over-write existing file "'ou'"
else
cat << \SHAR_EOF > 'ou'
        ou -- Option Unprintable

               default range             syntax
                 1,$                     ou[character]

        The  "u"  option  is  for  monitoring  unprintable characters.
        Typing "ou" by itself will return the current  character  used
        to display unprintable characters.  If it is ' ' (blank), then
        unprintable  characters  are  not  checked and may mess up the
        display.  Typing "oux" where "x" is a printable character will
        turn on  character  checking  and  display  "x"  everytime  an
        unprintable  character is encountered.  Unprintable characters
        are not disturbed in the file, but can be "edited" out.

        See also hccmisc for refreshing the display.

        For general information about the option command, type "ho".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'ov'" '(575 characters)'
if test -f 'ov'
then
	echo shar: will not over-write existing file "'ov'"
else
cat << \SHAR_EOF > 'ov'
        ov -- oVerlay Option

               default range             syntax
                  1,$                    ov[integer]

        The "v" option is the  overlay  column  number.   Typing  "ov"
        followed  by  a  space  and  a number sets the column that the
        cursor will be positioned at when  issuing  the  "v"  command.
        Typing "ov $" will position the cursor at the end of the line.
        Typing "ov" by itself will display the current value.

        See also hmotion.

        For general information about the option command, type "ho".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'ow'" '(658 characters)'
if test -f 'ow'
then
	echo shar: will not over-write existing file "'ow'"
else
cat << \SHAR_EOF > 'ow'
        ow -- Option Warning

               default range              syntax
                 1,$                      ow[integer]

        The "w" option is the  Warning  column  number.   Typing  "ow"
        followed by a number sets the warning column threshold; simply
        typing  "ow"  causes  its current value to be displayed.  When
        you are about to type into a column of equal or greater number
        than the warning column, the number  of  the  column  you  are
        about  to type into is displayed on the bottom line along with
        the string "col  ".

        For general information about the option command, type "ho".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'ox'" '(624 characters)'
if test -f 'ox'
then
	echo shar: will not over-write existing file "'ox'"
else
cat << \SHAR_EOF > 'ox'
            ox -- toggle tab compression/expansion

            default range           syntax
                .                       ox


            "ox" turns compression of tabs on or off. If a file
            has tabs in it, they will be  expanded  if compres-
            sion is on. Otherwise they will be left alone,  and
            will show up as the default unprintable character.

            The message "XTABS" will be displayed in the status
            line if tab compression is on.

            Type "hdir" to go back to the general help directory.
            Type "ho" for help on the option command.
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'oy'" '(749 characters)'
if test -f 'oy'
then
	echo shar: will not over-write existing file "'oy'"
else
cat << \SHAR_EOF > 'oy'

        oy --- option encrYption 

        default range                                   syntax
           1,$                                            oy[key]
        
        This option allows you to edit encrypted files. oy followed by a key
        will cause e, r, and w, commands to encrypt  and decrypt files using
        crypt(1).  oy will toggle the current  encryption setting.  If there
        is  no current key, se will ask you for one. If encryption is turned
        on, it will be  turned off.   Encryption in indicated by the message
        "ENCRYPT" in the status line. The key is never shown on your screen.

        Type "ho" for help on the option command.
        Type "hdir" to go back to the general help directory.
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'oz'" '(447 characters)'
if test -f 'oz'
then
	echo shar: will not over-write existing file "'oz'"
else
cat << \SHAR_EOF > 'oz'

        oz -- option sleep (zzzz's)

        default range           syntax
          1,$                     oz

        If you are running "sh", this option has absolutely no effect at
        all.  If you are running the "csh", this option will suspend  se
        in the background.  Se will issue  a warning  if  the buffer has
        not been saved, when this is done.

        For general information about the option command, type "ho".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'p'" '(642 characters)'
if test -f 'p'
then
	echo shar: will not over-write existing file "'p'"
else
cat << \SHAR_EOF > 'p'
          p    -- Print/Previous screen command

               default range           syntax
               see below               [range] p

        "p"  prints  a  range of lines or the previous screen (when no
        range is provided).  The line pointer is set to the last  line
        printed  (a  new  screen  may  be printed).  When the previous
        screen is printed, the first line on the  current  screen  be-
        comes  the  line  pointer, usually the last line on the screen
        (exception is when the first page is printed).

        To return to the command directory, type "hcomdir."
        See also "hspecl"
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'pat'" '(930 characters)'
if test -f 'pat'
then
	echo shar: will not over-write existing file "'pat'"
else
cat << \SHAR_EOF > 'pat'
        A PATTERN is a string of characters that specifies  a  set  of
        possible  strings  of  characters  that  are said to MATCH the
        pattern.  Most characters in patterns  stand  for  themselves,
        but   there   are   metacharacters:   "."   that  matches  any
        character, "*" that along with the previous character, matches
        any number of repetitions of  it  (including  none),  "^"  for
        beginning  of  line,  "$"  for  end of line, and characters in
        brackets "[]" to match any of  the  characters.   The  special
        sense  of  metacharacters  and  of the delimiters in which the
        pattern is enclosed can always be  turned  off  by  preceeding
        them with the escape character "\".

        See also "hs", "hg", "hx" for uses of patterns.
        For the use of patterns in line numbers, type "hscan".
        For examples of pattern matches, type "hpatex".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'patex'" '(485 characters)'
if test -f 'patex'
then
	echo shar: will not over-write existing file "'patex'"
else
cat << \SHAR_EOF > 'patex'
         PATTERN       MATCHES     DOESN'T MATCH

        "test"         "testfoo"   "foobar"
        "test$"        "footest"   "test "
        "$"            anything
        "ab*c"         "abbbbbbc"  "bbbbbbc"
        "ab*c"         "ac cur"    "ab*c"
        "^abc"         "abcac"     "bcabc"
        "abc^"         "abc^d"     "ab*c"
        "a[bcd]*e"     "abddceab"  "eeeaaa"
        "a[bcd]*e"     "aaaeee"    "bcdbcde"

        For general info about patterns, type "hpat".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'q'" '(514 characters)'
if test -f 'q'
then
	echo shar: will not over-write existing file "'q'"
else
cat << \SHAR_EOF > 'q'
          q   --  Quit command

               default range           syntax
                   n/a                    q

        "q" is used to quit the screen editor  and  return  to  system
        command  level.  If changes have been made to the buffer since
        the last write ("w"), you will be asked if you really want  to
        quit.   If so, just do another "q" command (RETURN is all that
        required).


        To return to the command directory, type "hcomdir."
        See also:  "hok".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'quote'" '(340 characters)'
if test -f 'quote'
then
	echo shar: will not over-write existing file "'quote'"
else
cat << \SHAR_EOF > 'quote'

        ' --- global on markname

        default range                   syntax
          1,$                             '<m>command
        
        Similar to the "g" prefix, except that "command" is performed
        for all lines in the range that have the mark name <m>.

        To return to the command directory, type "hcomdir".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'r'" '(500 characters)'
if test -f 'r'
then
	echo shar: will not over-write existing file "'r'"
else
cat << \SHAR_EOF > 'r'
          r    -- Read command

               default range           syntax
                      .           r [file name]
        "r" is used to read a file into  the  buffer  at  (after)  the
        named  place  (range field).  If no file name is provided, the
        current  file name (as  identified by the "f" command) is used.
        Se expand environment variables occuring in file names.


        To return to the command directory, type "hcomdir."
        See also:  "hf" and "he".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'rpt'" '(523 characters)'
if test -f 'rpt'
then
	echo shar: will not over-write existing file "'rpt'"
else
cat << \SHAR_EOF > 'rpt'
        The CTRL-F ("Funny Return") key  can  be  used  for  repeating
        lines while in Append Mode or in Command Mode.  Typing it will
        cause   the   line  to  be  terminated  without  chopping  any
        characters off, and will set a flag that will inhibit  erasure
        of  the  command  after it is completed, so that the same line
        may be easily re- entered.


        Type "htermchar" for info about other termination characters.
        Type "habt" to see what CTRL-F does in overlay mode.
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'s'" '(776 characters)'
if test -f 's'
then
	echo shar: will not over-write existing file "'s'"
else
cat << \SHAR_EOF > 's'
          s    -- Substitute command

               default range           syntax
                   .,.           s/change-this/to-this[/][g]

        The pattern "change-this" is matched on each line  within  the
        range  and the string "to-this" is substituted for it.  If [g]
        is used, all occurrences  of  the  "change-this"  pattern  are
        changed.   If  "change-this" is empty, the most recent pattern
        from this command (e.g.  within the range field) or a previous
        command is used.  If "to-this" is a '%', the previous replace-
        ment pattern is used. The "/" may be any character. The trail-
        ing delimiter is optional.

        To return to the command directory, type "hcomdir."
        See also:  "hln" and "hpat".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'scan'" '(927 characters)'
if test -f 'scan'
then
	echo shar: will not over-write existing file "'scan'"
else
cat << \SHAR_EOF > 'scan'
                     For line number syntax, type "hln".
                   For details about PATTERNs, type "hpat".

        A line number term consisting of  a  PATTERN  between  slashes
        causes  a  scan to begin with the line after the current line.
        If the last line is encountered, the scan continues with  line
        1.   The  current  line  is the last to be examined.  The line
        referred to is the first line encountered  in  the  scan  that
        contains  a  match  for  the  pattern.   If  the entire buffer
        contains no match, then an error is flagged.  If  the  pattern
        is  enclosed  in  question marks,  the  scan is in the reverse
        direction and begins with the line  just  before  the  current
        line,  and  wraps  around  to  the  last  line after line 1 is
        examined.  ">" and "<" mark name searches proceed in the  same
        wraparound fashion.
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'serc'" '(617 characters)'
if test -f 'serc'
then
	echo shar: will not over-write existing file "'serc'"
else
cat << \SHAR_EOF > 'serc'
        serc -- $HOME/.serc -- Se Initialization File
        
        The file $HOME/.serc, if it exists, is read when se starts up.
        If a line begins with a '#', it is treated as a comment and is
        ignored.  It is useful for  setting  personal options  without
        the user having to type them in  on the command line  or use a
        special shell file or alias. Here is a sample .serc file:

            # turn on unix mode, tabs every 8 columns, auto indent
            opu
            ot+8
            oia

	Command line options ALWAYS override any options set by commands
	in the .serc file.
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'shell'" '(865 characters)'
if test -f 'shell'
then
	echo shar: will not over-write existing file "'shell'"
else
cat << \SHAR_EOF > 'shell'

        ! --- shell escape

        default range                            syntax
                1,$                      ![<Unix command>]

        The user's choice of shell is taken from the $SHELL environment vari-
        able and used to execute <Unix command> if it is present.  Otherwise,
        an  interactive shell is created. A leading ! is replaced by the pre-
        vious  shell  command.  Thus !!  executes  the previous  command.  An
        unescaped  % is replaced  by  the saved  file name. An expanded shell
        command is echoed  before it is  executed. After an interactive shell
        exits, the screen is immediately  redrawn. If a  command was run, the
        results are left on the  screen,  and the user must  type a return to
        redraw the editing window.

        To return to the command directory, type "hcomdir".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'specl'" '(737 characters)'
if test -f 'specl'
then
	echo shar: will not over-write existing file "'specl'"
else
cat << \SHAR_EOF > 'specl'
        The "=" command displays the last  line  number  in  the  line
        number  list  (default  ".")  as  a  number.  For example, "="
        prints the line number of the current line, or "$=" prints the
        line number of the last line (the number of lines).

        The ":"  command, with no preceeding line numbers,  moves  the
        window  so that the next screenful of text is visible.  With a
        line number, it makes the window begin at the referenced line.
        The top line in the window becomes the current line.

        For general information about commands, type "hcom".
        For a description of command syntax, type "hcomsyn".
        To see a directory of the other commands, type "hcomdir".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'t'" '(361 characters)'
if test -f 't'
then
	echo shar: will not over-write existing file "'t'"
else
cat << \SHAR_EOF > 't'

          t    -- To command
               default range           syntax
                         .,.           from-here,to-here t after-here

        Reproduce the block of lines identified by the range field of
        the command and place them after the named line.


        To return to the command directory, type "hcomdir."
        See also:  "hm".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'termchar'" '(560 characters)'
if test -f 'termchar'
then
	echo shar: will not over-write existing file "'termchar'"
else
cat << \SHAR_EOF > 'termchar'
                    Command Terminating Control Characters

        The  Carriage Return character terminates a command, but first
        erases any characters at and  to  the  right  of  the  cursor.
        CTRL-V,  on  the other hand, skips the cursor to the right end
        of the line, then terminates it.  The "Funny Return" character
        CTRL-F serves different purposes depending on what routine  is
        soliciting the command.

        For more about CTRL-F, see "habt" and "hrpt".
        The general control character directory is "hcc".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'tilde'" '(349 characters)'
if test -f 'tilde'
then
	echo shar: will not over-write existing file "'tilde'"
else
cat << \SHAR_EOF > 'tilde'

        ~ --- exclude on markname

        default range                   syntax
          1,$                             ~<m>command
        
        Similar to the "x" prefix, except that  "command" is performed
        for all lines in the range that do not have the mark name <m>.

        To return to the command directory, type "hcomdir".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'u'" '(804 characters)'
if test -f 'u'
then
	echo shar: will not over-write existing file "'u'"
else
cat << \SHAR_EOF > 'u'
     u    -- Undo command.

           default range                 syntax
                .                         u[d]

        1.  "u" is used to undo modifications to  a  line  immediately
        after  changes  are  made.  E.g.  if you substituted "pat" for
        "hat" in a line, to reverse that operation immediately, simply
        type "u" (RETURN).

        2.  "ud" is used to restore a group of lines  that  have  been
        delete  E.g.   if  "n,md"  deletes lines n thru m, then if you
        position the curser to line n-1 and  issue  "ud"  the  deleted
        lines  will  appear.   (Or you can set the od toggle to od< so
        that the line pointer is automatically set to n-1.

        To return to the command directory, type "hcomdir."
        See also:  "hd" and "hod".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'v'" '(432 characters)'
if test -f 'v'
then
	echo shar: will not over-write existing file "'v'"
else
cat << \SHAR_EOF > 'v'
          v    -- oVerlay command

               default range           syntax
                    .,.                   v

        Inline editing mode is entered using this command.  The curser
        is  positioned  at the column set by the "ov" command.  Inline
        editing may now be performed using control characters.

        To return to the command directory, type "hcomdir."
        See also:  "hcc" and "hmotion".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'w'" '(735 characters)'
if test -f 'w'
then
	echo shar: will not over-write existing file "'w'"
else
cat << \SHAR_EOF > 'w'
          w    -- Write command

               default range                syntax
                         1,$        w[! | + | >] [file name]

        "w"  writes  the  buffer  to a file.  If issued without a file
        name the current file name is used.  If "f" was used to change
        the file name or if a file name was given, a new file will  be
        created and written unless the file already exits which causes
        a  warning.   The warning may be bypassed using "w!".  Options
        [+] or [>] mean to append to the file instead of writing  over
        it. Se expands environment variables occuring in file names.

        To return to the command directory, type "hcomdir."
        See also:   "hf", "hok".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'x'" '(579 characters)'
if test -f 'x'
then
	echo shar: will not over-write existing file "'x'"
else
cat << \SHAR_EOF > 'x'

          x    -- Global exclude on pattern

               default range           syntax
                         1,$           x/pattern/command

        "x"  is  used  to perform an editing command on all lines that
        do not match the "pattern". "pattern" is any legal pattern and
        command is an editor command.  The "g" command is the converse
        of "x" and performs the command on all lines that do match the
        pattern.  The "/" may be any character.

        To return to the command directory, type "hcomdir."
        See also:  "hg" and "hpat".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'y'" '(430 characters)'
if test -f 'y'
then
	echo shar: will not over-write existing file "'y'"
else
cat << \SHAR_EOF > 'y'
          y    -- translYterate command

               default range           syntax
                   .,.           y/from-range/to-range[/]

        Characters   in   the  "from-range"  are  converted  to  their
        corresponding characters in the "to-range".  The "/" may be an
        character.  The trailing delimiter is optional.

        To return to the command directory, type "hcomdir."
        See also:  "hs".
SHAR_EOF
fi # end of overwriting check
echo shar: extracting "'z'" '(679 characters)'
if test -f 'z'
then
	echo shar: will not over-write existing file "'z'"
else
cat << \SHAR_EOF > 'z'
       z -- do special extended things

        default range               syntax
    lines must be given         line,line z <option> <stuff>

       The z command command is used for doing special extended
    things. Currently, the only option available is b, to  draw
    a box into the buffer. It works as follows:

         lin,lin zb<left>[,<right>][<char>]

    The two <lin>s  specify where in the buffer to put the  box,
    <left> and <right> tell which column to  which  column,  and
    the <char> is the character to use to draw the  box.  As  an
    example,
         .,.+4zb10,50*
    draws a box, OVER the text that is there. Try  it  on  some
    BLANK lines.
SHAR_EOF
fi # end of overwriting check
echo shar: done with directory "'se_h'"
cd ..
#	End of shell archive
exit 0

