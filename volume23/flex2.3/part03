Subject:  v23i039:  Flex, a fast lex replacement, Part03/10
Newsgroups: comp.sources.unix
Approved: rsalz@uunet.UU.NET
X-Checksum-Snefru: 1f4894c5 1ca63de8 3846b7ca 6c0f31ea

Submitted-by: Vern Paxson <vern@cs.cornell.edu>
Posting-number: Volume 23, Issue 39
Archive-name: flex2.3/part03

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  initscan.c.01
# Wrapped by rsalz@litchi.bbn.com on Wed Oct 10 13:23:59 1990
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 3 (of 10)."'
if test -f 'initscan.c.01' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'initscan.c.01'\"
else
  echo shar: Extracting \"'initscan.c.01'\" \(49644 characters\)
  sed "s/^X//" >'initscan.c.01' <<'END_OF_FILE'
X/* A lexical scanner generated by flex */
X
X/* scanner skeleton version:
X * $Header: /usr/fsys/odin/a/vern/flex/RCS/flex.skel,v 2.16 90/08/03 14:09:36 vern Exp $
X */
X
X#define FLEX_SCANNER
X
X#include <stdio.h>
X
X
X/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
X#ifdef c_plusplus
X#ifndef __cplusplus
X#define __cplusplus
X#endif
X#endif
X
X
X#ifdef __cplusplus
X
X#include <stdlib.h>
X#include <osfcn.h>
X
X/* use prototypes in function declarations */
X#define YY_USE_PROTOS
X
X/* the "const" storage-class-modifier is valid */
X#define YY_USE_CONST
X
X#else	/* ! __cplusplus */
X
X#ifdef __STDC__
X
X#ifdef __GNUC__
X#include <stddef.h>
Xvoid *malloc( size_t );
Xvoid free( void* );
X#else
X#include <stdlib.h>
X#endif	/* __GNUC__ */
X
X#define YY_USE_PROTOS
X#define YY_USE_CONST
X
X#endif	/* __STDC__ */
X#endif	/* ! __cplusplus */
X
X
X#ifdef __TURBOC__
X#define YY_USE_CONST
X#endif
X
X
X#ifndef YY_USE_CONST
X#define const
X#endif
X
X
X#ifdef YY_USE_PROTOS
X#define YY_PROTO(proto) proto
X#else
X#define YY_PROTO(proto) ()
X/* we can't get here if it's an ANSI C compiler, or a C++ compiler,
X * so it's got to be a K&R compiler, and therefore there's no standard
X * place from which to include these definitions
X */
Xchar *malloc();
Xint free();
Xint read();
X#endif
X
X
X/* amount of stuff to slurp up with each read */
X#ifndef YY_READ_BUF_SIZE
X#define YY_READ_BUF_SIZE 8192
X#endif
X
X/* returned upon end-of-file */
X#define YY_END_TOK 0
X
X/* copy whatever the last rule matched to the standard output */
X
X/* cast to (char *) is because for 8-bit chars, yytext is (unsigned char *) */
X/* this used to be an fputs(), but since the string might contain NUL's,
X * we now use fwrite()
X */
X#define ECHO (void) fwrite( (char *) yytext, yyleng, 1, yyout )
X
X/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
X * is returned in "result".
X */
X#define YY_INPUT(buf,result,max_size) \
X	if ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
X	    YY_FATAL_ERROR( "read() in flex scanner failed" );
X#define YY_NULL 0
X
X/* no semi-colon after return; correct usage is to write "yyterminate();" -
X * we don't want an extra ';' after the "return" because that will cause
X * some compilers to complain about unreachable statements.
X */
X#define yyterminate() return ( YY_NULL )
X
X/* report a fatal error */
X
X/* The funky do-while is used to turn this macro definition into
X * a single C statement (which needs a semi-colon terminator).
X * This avoids problems with code like:
X *
X * 	if ( something_happens )
X *		YY_FATAL_ERROR( "oops, the something happened" );
X *	else
X *		everything_okay();
X *
X * Prior to using the do-while the compiler would get upset at the
X * "else" because it interpreted the "if" statement as being all
X * done when it reached the ';' after the YY_FATAL_ERROR() call.
X */
X
X#define YY_FATAL_ERROR(msg) \
X	do \
X		{ \
X		(void) fputs( msg, stderr ); \
X		(void) putc( '\n', stderr ); \
X		exit( 1 ); \
X		} \
X	while ( 0 )
X
X/* default yywrap function - always treat EOF as an EOF */
X#define yywrap() 1
X
X/* enter a start condition.  This macro really ought to take a parameter,
X * but we do it the disgusting crufty way forced on us by the ()-less
X * definition of BEGIN
X */
X#define BEGIN yy_start = 1 + 2 *
X
X/* action number for EOF rule of a given start state */
X#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
X
X/* special action meaning "start processing a new file" */
X#define YY_NEW_FILE \
X	do \
X		{ \
X		yy_init_buffer( yy_current_buffer, yyin ); \
X		yy_load_buffer_state(); \
X		} \
X	while ( 0 )
X
X/* default declaration of generated scanner - a define so the user can
X * easily add parameters
X */
X#define YY_DECL int yylex YY_PROTO(( void )) 
X
X/* code executed at the end of each rule */
X#define YY_BREAK break;
X
X#define YY_END_OF_BUFFER_CHAR 0
X
X#ifndef YY_BUF_SIZE
X#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) /* size of default input buffer */
X#endif
X
Xtypedef struct yy_buffer_state *YY_BUFFER_STATE;
X
X#define YY_CHAR unsigned char
X# line 1 "scan.l"
X#define INITIAL 0
X/* scan.l - scanner for flex input */
X# line 5 "scan.l"
X/*-
X * Copyright (c) 1990 The Regents of the University of California.
X * All rights reserved.
X *
X * This code is derived from software contributed to Berkeley by
X * Vern Paxson.
X * 
X * The United States Government has rights in this work pursuant
X * to contract no. DE-AC03-76SF00098 between the United States
X * Department of Energy and the University of California.
X *
X * Redistribution and use in source and binary forms are permitted provided
X * that: (1) source distributions retain this entire copyright notice and
X * comment, and (2) distributions including binaries display the following
X * acknowledgement:  ``This product includes software developed by the
X * University of California, Berkeley and its contributors'' in the
X * documentation or other materials provided with the distribution and in
X * all advertising materials mentioning features or use of this software.
X * Neither the name of the University nor the names of its contributors may
X * be used to endorse or promote products derived from this software without
X * specific prior written permission.
X * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
X * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
X * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
X */
X
X#ifndef lint
Xstatic char rcsid[] =
X    "@(#) $Header: /usr/fsys/odin/a/vern/flex/RCS/scan.l,v 2.9 90/06/27 23:48:34 vern Exp $ (LBL)";
X#endif
X
X#undef yywrap
X
X#include "flexdef.h"
X#include "parse.h"
X
X#define ACTION_ECHO fprintf( temp_action_file, "%s", yytext )
X#define MARK_END_OF_PROLOG fprintf( temp_action_file, "%%%% end of prolog\n" );
X
X#undef YY_DECL
X#define YY_DECL \
X	int flexscan()
X
X#define RETURNCHAR \
X	yylval = yytext[0]; \
X	return ( CHAR );
X
X#define RETURNNAME \
X	(void) strcpy( nmstr, (char *) yytext ); \
X	return ( NAME );
X
X#define PUT_BACK_STRING(str, start) \
X	for ( i = strlen( (char *) (str) ) - 1; i >= start; --i ) \
X	    unput((str)[i])
X
X#define CHECK_REJECT(str) \
X	if ( all_upper( str ) ) \
X	    reject = true;
X
X#define CHECK_YYMORE(str) \
X	if ( all_lower( str ) ) \
X	    yymore_used = true;
X#define SECT2 1
X#define SECT2PROLOG 2
X#define SECT3 3
X#define CODEBLOCK 4
X#define PICKUPDEF 5
X#define SC 6
X#define CARETISBOL 7
X#define NUM 8
X#define QUOTE 9
X#define FIRSTCCL 10
X#define CCL 11
X#define ACTION 12
X#define RECOVER 13
X#define BRACEERROR 14
X#define C_COMMENT 15
X#define ACTION_COMMENT 16
X#define ACTION_STRING 17
X#define PERCENT_BRACE_ACTION 18
X#define USED_LIST 19
X#define CODEBLOCK_2 20
X#define XLATION 21
X# line 84 "scan.l"
X
X/* done after the current pattern has been matched and before the
X * corresponding action - sets up yytext
X */
X#define YY_DO_BEFORE_ACTION \
X	yytext = yy_bp; \
X	yyleng = yy_cp - yy_bp; \
X	yy_hold_char = *yy_cp; \
X	*yy_cp = '\0'; \
X	yy_c_buf_p = yy_cp;
X
X#define EOB_ACT_CONTINUE_SCAN 0
X#define EOB_ACT_END_OF_FILE 1
X#define EOB_ACT_LAST_MATCH 2
X
X/* return all but the first 'n' matched characters back to the input stream */
X#define yyless(n) \
X	do \
X		{ \
X		/* undo effects of setting up yytext */ \
X		*yy_cp = yy_hold_char; \
X		yy_c_buf_p = yy_cp = yy_bp + n; \
X		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
X		} \
X	while ( 0 )
X
X#define unput(c) yyunput( c, yytext )
X
X
Xstruct yy_buffer_state
X    {
X    FILE *yy_input_file;
X
X    YY_CHAR *yy_ch_buf;		/* input buffer */
X    YY_CHAR *yy_buf_pos;	/* current position in input buffer */
X
X    /* size of input buffer in bytes, not including room for EOB characters*/
X    int yy_buf_size;	
X
X    /* number of characters read into yy_ch_buf, not including EOB characters */
X    int yy_n_chars;
X
X    int yy_eof_status;		/* whether we've seen an EOF on this buffer */
X#define EOF_NOT_SEEN 0
X    /* "pending" happens when the EOF has been seen but there's still
X     * some text process
X     */
X#define EOF_PENDING 1
X#define EOF_DONE 2
X    };
X
Xstatic YY_BUFFER_STATE yy_current_buffer;
X
X/* we provide macros for accessing buffer states in case in the
X * future we want to put the buffer states in a more general
X * "scanner state"
X */
X#define YY_CURRENT_BUFFER yy_current_buffer
X
X
X/* yy_hold_char holds the character lost when yytext is formed */
Xstatic YY_CHAR yy_hold_char;
X
Xstatic int yy_n_chars;		/* number of characters read into yy_ch_buf */
X
X
X
X#ifndef YY_USER_ACTION
X#define YY_USER_ACTION
X#endif
X
X#ifndef YY_USER_INIT
X#define YY_USER_INIT
X#endif
X
Xextern YY_CHAR *yytext;
Xextern int yyleng;
Xextern FILE *yyin, *yyout;
X
XYY_CHAR *yytext;
Xint yyleng;
X
XFILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
X
X#define YY_END_OF_BUFFER 121
Xtypedef int yy_state_type;
Xstatic const short int yy_accept[341] =
X    {   0,
X        0,    0,    0,    0,    0,    0,  119,  119,    0,    0,
X        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
X        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
X        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
X        0,    0,    0,    0,  121,   19,    7,   18,   19,   16,
X        1,   17,   19,   19,   19,   15,   67,   59,   60,   53,
X       67,   66,   51,   67,   67,   67,   50,   49,   67,   52,
X      120,   47,  119,  119,   28,   29,   28,   28,   28,   28,
X       31,   30,   32,   73,  120,   69,   70,   72,   74,   88,
X       89,   86,   85,   87,   75,   77,   76,   75,   81,   80,
X
X       81,   81,   83,   83,   83,   84,   99,  104,  103,  105,
X      105,  100,  100,  100,   97,   98,  120,   33,   91,   90,
X       22,   24,   23,  107,  109,  108,  111,  113,  114,  115,
X       95,   95,   96,   95,   95,   95,   95,   38,   35,   34,
X       38,   38,   44,   42,   45,   44,   44,   41,   41,   41,
X       40,   41,    7,   18,    0,   16,    1,   17,    0,    2,
X       14,    8,    0,   12,    4,    0,    0,    5,    0,    3,
X       15,   59,   60,    0,    0,   56,    0,    0,    0,  117,
X      117,  117,   55,   54,   55,   50,   49,   63,   50,    0,
X       47,   46,  119,  119,   28,   28,   28,   28,   28,   31,
X
X       30,   71,   72,   85,  118,  118,  118,   78,   79,   82,
X       99,    0,  102,    0,  101,  100,  100,  100,    0,   33,
X       22,   20,  107,  106,  111,  112,   95,   95,   95,   92,
X       95,   95,   95,   38,   35,   38,   38,   42,    0,   43,
X       43,   43,   42,   40,    0,   13,   14,    8,    8,    0,
X       12,    4,    0,    0,    0,    5,    0,    6,   57,    0,
X       58,    0,   64,    0,    0,  117,  117,   55,   55,   65,
X       63,   28,   28,   28,   25,    0,  118,  118,  100,  100,
X        0,   21,   92,   92,   95,   95,   38,   38,    0,   39,
X       43,   43,    0,   11,    4,    0,   11,    0,    0,    5,
X
X        0,    0,    0,  117,   28,   28,  118,  100,  100,   95,
X       95,   38,   38,   43,    0,    9,    0,    0,    0,   28,
X       28,  100,  100,   95,   95,   38,   38,    0,    0,   26,
X       27,   93,   94,   93,   94,   36,   37,   10,   62,    0
X    } ;
X
Xstatic const YY_CHAR yy_ec[256] =
X    {   0,
X        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
X        1,    4,    1,    1,    1,    1,    1,    1,    1,    1,
X        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
X        1,    5,    1,    6,    7,    8,    9,    1,   10,   11,
X       11,   12,   11,   13,   14,   11,   15,   16,   16,   16,
X       16,   16,   16,   16,   16,   16,   16,    1,    1,   17,
X        1,   18,   11,    1,   24,   25,   26,   27,   28,   29,
X       23,   23,   23,   30,   31,   23,   32,   33,   34,   31,
X       23,   35,   36,   37,   38,   23,   23,   39,   40,   23,
X       19,   20,   21,   22,   23,    1,   24,   25,   26,   27,
X
X       28,   29,   23,   23,   23,   30,   31,   23,   32,   33,
X       34,   31,   23,   35,   36,   37,   38,   23,   23,   39,
X       40,   23,   41,   42,   43,    1,    1,    1,    1,    1,
X        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
X        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
X        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
X        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
X        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
X        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
X        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
X
X        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
X        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
X        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
X        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
X        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
X        1,    1,    1,    1,    1
X    } ;
X
Xstatic const YY_CHAR yy_meta[44] =
X    {   0,
X        1,    2,    3,    2,    2,    4,    1,    1,    1,    5,
X        1,    6,    1,    7,    5,    8,    1,    1,    1,    9,
X       10,    1,   11,   12,   12,   12,   12,   12,   12,   11,
X       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
X        5,    1,   13
X    } ;
X
Xstatic const short int yy_base[404] =
X    {   0,
X        0,   43,   85,  126, 1371, 1370, 1369, 1353,  168, 1346,
X      104,  108,  211,    0, 1332, 1320,  120,  252,   95,  119,
X      137,  144,  100,  141,  295,    0, 1327, 1323,  113,  336,
X      254,  255,  257,  258,  253,  268,  379,    0,  338,  421,
X        0,    0,  273,  460, 1325, 1442,  281, 1442, 1287,    0,
X      287, 1442, 1279,  472, 1257,    0, 1442,  425, 1442, 1442,
X      147, 1442, 1239, 1235,   78,  513,  433, 1442,   83, 1442,
X     1248,    0, 1247, 1442,    0, 1442,    0, 1218, 1205, 1194,
X        0,  342, 1442, 1442, 1442, 1442, 1202,    0, 1442, 1442,
X     1442, 1442, 1201, 1442, 1442, 1442, 1442,   79, 1442, 1442,
X
X      103, 1198, 1442,    0,  248, 1442,    0, 1442, 1442,  252,
X     1199,    0, 1173, 1158, 1442, 1442, 1185, 1442, 1442, 1442,
X        0, 1442, 1170,    0, 1442, 1152,    0, 1442, 1442,    0,
X        0,  346, 1442, 1123,    0, 1125, 1105,    0,  352, 1442,
X     1116, 1103, 1442,  356, 1442, 1100,  329, 1442,  360, 1093,
X     1101,  333,  441, 1442,  445,    0,  449, 1442, 1101, 1442,
X      365,  453, 1094,  466,    0,  480,  330,    0, 1095, 1442,
X        0,  555, 1442, 1044, 1077, 1442, 1051,  133,  456, 1442,
X     1059,    0,    0, 1442,  584,  563, 1442,    0, 1442, 1071,
X        0, 1442, 1063, 1442,    0,    0, 1010, 1007,  627,    0,
X
X      484, 1442,    0,  998, 1442,  992,    0, 1442, 1442, 1442,
X        0,  421, 1442,    0, 1442,    0,  971,  964,  992, 1442,
X        0,  962,    0, 1442,    0, 1442,    0,  488,  921,  670,
X        0,  717,  714,    0,  497,  715,  712,  569,  573, 1442,
X      727,    0,  577,  726,  581, 1442,  585,    0,  590,  738,
X      597,    0,  712,  683,  691,    0,  670, 1442, 1442,  623,
X     1442,  591, 1442,  458,  702,  590,    0,    0,    0, 1442,
X        0,  576,  569,    0, 1442,  593,  575,    0,  560,  546,
X      567, 1442,    0,    0,  541,  529,  534,  527,  730, 1442,
X      500,    0,  509, 1442,    0,  734, 1442,  468,  467,    0,
X
X      462,  704,  724, 1442,  461,  438, 1442,  440,  425,  433,
X      405,  413,  398, 1442,  404, 1442,  359,  259,  332,  338,
X      346,  334,  331,  257,  253,  226,  137,  133,   81,    0,
X        0,    0,    0,    0,    0,    0,    0, 1442, 1442, 1442,
X      753,  766,  779,  792,  805,  818,  831,  844,  857,  870,
X      883,  896,  909,  922,  935,  948,  955,  967,  980,  986,
X      998, 1011, 1024, 1037, 1050, 1063, 1070, 1082, 1089, 1101,
X     1114, 1127, 1140, 1150, 1157, 1169, 1182, 1195, 1208, 1221,
X     1234, 1241, 1253, 1266, 1279, 1282, 1284, 1296, 1309, 1315,
X     1327, 1339, 1345, 1357, 1363, 1375, 1382, 1388, 1393, 1405,
X
X     1411, 1423, 1429
X    } ;
X
Xstatic const short int yy_def[404] =
X    {   0,
X      340,  340,  341,  341,  342,  342,  343,  343,  340,    9,
X      344,  344,  340,   13,  345,  345,  346,  346,  347,  347,
X      348,  348,  349,  349,  340,   25,  350,  350,  345,  345,
X      351,  351,  352,  352,  353,  353,  340,   37,  354,  354,
X       37,   37,  355,  356,  340,  340,  340,  340,  340,  357,
X      340,  340,  358,  359,  340,  360,  340,  340,  340,  340,
X      340,  340,  340,  361,  362,  340,  340,  340,  340,  340,
X      363,  364,  365,  340,  366,  340,  367,  367,  367,  366,
X      368,  340,  340,  340,  340,  340,  340,  369,  340,  340,
X      340,  340,  340,  340,  340,  340,  340,  362,  340,  340,
X
X      370,  371,  340,  372,  362,  340,  373,  340,  340,  374,
X      340,  375,  375,  375,  340,  340,  376,  340,  340,  340,
X      377,  340,  340,  378,  340,  340,  379,  340,  340,  380,
X      381,  381,  340,  381,  382,  382,  382,  383,  340,  340,
X      383,  383,  340,  340,  340,  340,  384,  340,  340,  340,
X      340,  384,  340,  340,  340,  357,  340,  340,  358,  340,
X      340,  385,  340,  340,  386,  340,  340,  387,  388,  340,
X      360,  340,  340,  340,  389,  340,  340,  361,  361,  340,
X      340,  390,  391,  340,  391,  340,  340,  392,  340,  363,
X      364,  340,  365,  340,  366,  367,  367,  367,  340,  368,
X
X      340,  340,  369,  340,  340,  340,  393,  340,  340,  340,
X      373,  374,  340,  374,  340,  375,  375,  375,  376,  340,
X      377,  394,  378,  340,  379,  340,  381,  381,  381,  340,
X      382,  382,  382,  383,  340,  383,  383,  340,  340,  340,
X      340,  395,  340,  340,  340,  340,  340,  385,  385,  396,
X      340,  397,  396,  340,  340,  398,  388,  340,  340,  389,
X      340,  340,  340,  361,  361,  340,  399,  391,  185,  340,
X      392,  367,  367,  199,  340,  400,  340,  401,  375,  375,
X      394,  340,  230,  402,  382,  382,  383,  383,  340,  340,
X      340,  403,  396,  340,  397,  396,  340,  340,  340,  398,
X
X      340,  361,  265,  340,  367,  367,  340,  375,  375,  382,
X      382,  383,  383,  340,  340,  340,  340,  361,  361,  367,
X      367,  375,  375,  382,  382,  383,  383,  340,  340,  367,
X      367,  375,  375,  382,  382,  383,  383,  340,  340,    0,
X      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
X      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
X      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
X      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
X      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
X      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
X
X      340,  340,  340
X    } ;
X
Xstatic const short int yy_nxt[1486] =
X    {   0,
X       46,   47,   48,   47,   47,   46,   46,   46,   49,   46,
X       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
X       46,   46,   50,   50,   50,   50,   50,   50,   50,   50,
X       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
X       46,   46,   46,   46,   51,   52,   51,   51,   46,   53,
X       46,   54,   46,   46,   46,   46,   46,   55,   46,   46,
X       46,   46,   46,   46,   46,   56,   56,   56,   56,   56,
X       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
X       56,   56,   56,   46,   46,   46,   58,   59,   58,   58,
X       60,  188,   61,  181,  181,   62,   62,   96,  339,   62,
X
X       97,   63,   85,   64,   65,   82,   83,   82,   82,   82,
X       83,   82,   82,  104,   98,  119,  182,  182,  206,  105,
X      106,   96,   91,  189,   97,   66,   62,   67,   68,   67,
X       67,   60,   92,   61,   69,   93,   62,   62,   98,   85,
X       62,  207,   63,   85,   64,   65,   85,   70,  176,  176,
X      100,  176,  179,  263,  104,  120,  101,  100,  102,  338,
X      105,  106,   94,  101,  337,  102,   66,   62,   75,   75,
X       76,   75,   75,   75,   75,   75,   75,   75,   75,   75,
X       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
X       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
X
X       77,   77,   78,   77,   77,   77,   77,   79,   75,   75,
X       75,   84,   84,   85,   84,   84,   84,   84,   84,   84,
X       84,   84,   84,   86,   84,   84,   84,   84,   87,   84,
X       84,   84,   84,   88,   88,   88,   88,   88,   88,   88,
X       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
X       88,   84,   84,   84,   91,  128,  122,  122,  129,  125,
X      125,  213,  336,  181,   92,  123,  123,   93,  126,  126,
X      128,  214,  130,  129,  144,  145,  144,  144,  179,  263,
X      335,  146,  153,  154,  153,  153,  182,  130,  157,  158,
X      157,  157,  147,  334,   94,  107,  107,  108,  107,  107,
X
X      109,  107,  107,  107,  110,  107,  107,  107,  107,  111,
X      107,  107,  107,  107,  107,  107,  107,  112,  112,  112,
X      112,  112,  112,  112,  112,  112,  112,  112,  112,  113,
X      112,  112,  112,  112,  114,  115,  107,  116,  119,  139,
X      140,  139,  139,  201,  241,  201,  201,  228,  241,  228,
X      228,  179,  263,  235,  229,  235,  235,  238,  333,  238,
X      238,  243,  254,  243,  243,  255,  247,  242,  247,  247,
X      332,  242,  141,  331,  330,  244,  329,  142,  120,  131,
X      132,  133,  132,  132,  131,  131,  131,  134,  131,  131,
X      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
X
X      131,  135,  135,  135,  135,  135,  135,  135,  135,  135,
X      135,  135,  135,  136,  135,  135,  135,  135,  137,  131,
X      131,  131,  139,  140,  139,  139,  172,  173,  172,  172,
X      213,  328,  327,  174,  186,  187,  186,  186,  326,  325,
X      214,  174,  153,  154,  153,  153,  245,  246,  245,  245,
X      157,  158,  157,  157,  249,  141,  249,  249,  324,  323,
X      142,  149,  145,  149,  149,  322,  175,  251,  150,  251,
X      251,  264,  321,  302,  175,  151,  178,  179,  263,  152,
X      162,  245,  246,  245,  253,  201,  320,  201,  201,  228,
X      317,  228,  228,  316,  265,  163,  229,  164,  235,  163,
X
X      235,  235,  163,  315,  163,  163,  164,  165,  166,  167,
X      168,  294,  169,  183,  183,  240,  183,  183,  183,  183,
X      183,  183,  183,  183,  183,  183,  183,  183,  184,  183,
X      183,  183,  183,  183,  183,  185,  185,  185,  185,  185,
X      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
X      185,  185,  185,  183,  183,  183,  172,  173,  172,  172,
X      313,  312,  311,  174,  186,  187,  186,  186,  310,  282,
X      238,  174,  238,  238,  289,  290,  289,  289,  243,  309,
X      243,  243,  245,  246,  245,  245,  247,  308,  247,  247,
X      205,  249,  244,  249,  249,  275,  175,  269,  251,  269,
X
X      251,  251,  306,  305,  175,  180,  269,  269,  269,  269,
X      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
X      269,  269,  269,  269,  301,  261,  270,  274,  274,  275,
X      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
X      274,  274,  274,  274,  274,  274,  274,  274,  274,  276,
X      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
X      276,  276,  276,  276,  276,  276,  276,  274,  274,  274,
X      283,  283,  258,  283,  283,  283,  283,  283,  283,  283,
X      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
X      283,  283,  284,  284,  284,  284,  284,  284,  284,  284,
X
X      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
X      283,  283,  283,  296,  297,  296,  296,  303,  299,  318,
X      298,  179,  263,  179,  263,  303,  303,  303,  303,  303,
X      303,  289,  290,  289,  289,  296,  297,  296,  296,  319,
X      294,  244,  291,  288,  287,  286,  285,  319,  319,  319,
X      319,  319,  319,   57,   57,   57,   57,   57,   57,   57,
X       57,   57,   57,   57,   57,   57,   71,   71,   71,   71,
X       71,   71,   71,   71,   71,   71,   71,   71,   71,   73,
X       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
X       73,   73,   81,   81,   81,   81,   81,   81,   81,   81,
X
X       81,   81,   81,   81,   81,   85,   85,   85,   85,   85,
X       85,   85,   85,   85,   85,   85,   85,   85,   90,   90,
X       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
X       90,   95,   95,   95,   95,   95,   95,   95,   95,   95,
X       95,   95,   95,   95,   99,   99,   99,   99,   99,   99,
X       99,   99,   99,   99,   99,   99,   99,  103,  103,  103,
X      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
X      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
X      117,  117,  117,  121,  121,  121,  121,  121,  121,  121,
X      121,  121,  121,  121,  121,  121,  124,  124,  124,  124,
X
X      124,  124,  124,  124,  124,  124,  124,  124,  124,  127,
X      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
X      127,  127,  138,  138,  138,  138,  138,  138,  138,  138,
X      138,  138,  138,  138,  138,  143,  143,  143,  143,  143,
X      143,  143,  143,  143,  143,  143,  143,  143,  148,  148,
X      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
X      148,  156,  156,  230,  282,  156,  156,  159,  159,  159,
X      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
X      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
X      161,  161,  171,  171,  220,  280,  171,  171,  178,  178,
X
X      279,  178,  178,  178,  178,  178,  178,  277,  178,  178,
X      178,  180,  180,  204,  180,  180,  180,  180,  180,  180,
X      180,  180,  180,  180,  190,  190,  190,  190,  190,  190,
X      190,  190,  190,  190,  190,  190,  190,  192,  273,  272,
X      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
X      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
X      193,  193,  193,  195,  195,  194,  195,  195,  195,  195,
X      195,  195,  195,  191,  266,  195,  196,  196,  262,  261,
X      196,  196,  200,  200,  259,  200,  200,  200,  200,  200,
X      200,  200,  200,  200,  200,  203,  203,  258,  250,  203,
X
X      203,  205,  205,  160,  205,  205,  205,  205,  205,  205,
X      205,  205,  205,  205,  208,  208,  244,  208,  208,  208,
X      208,  208,  208,  208,  208,  208,  208,  210,  210,  239,
X      210,  210,  210,  210,  210,  210,  239,  210,  210,  210,
X      211,  211,  237,  236,  233,  211,  211,  211,  211,  211,
X      212,  212,  232,  212,  212,  212,  212,  212,  212,  212,
X      212,  212,  212,  216,  216,  230,  224,  216,  216,  219,
X      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
X      219,  219,  221,  221,  222,  221,  221,  220,  221,  221,
X      221,  221,  221,  221,  221,  223,  223,  218,  223,  223,
X
X      217,  223,  223,  223,  223,  223,  223,  223,  225,  225,
X      215,  209,  225,  225,  225,  225,  204,  225,  225,  225,
X      225,  226,  226,  202,  226,  226,  226,  226,  226,  226,
X      226,  226,  226,  226,  227,  227,  199,  227,  227,  227,
X      227,  227,  227,  227,  198,  197,  227,  231,  231,  194,
X      191,  231,  231,  234,  179,  177,  234,  234,  234,  234,
X      234,  234,  234,  234,  234,  234,  240,  240,  170,  240,
X      240,  240,  240,  240,  240,  240,  240,  240,  240,  248,
X      248,  160,  248,  248,  248,  248,  248,  248,  248,  248,
X      248,  248,  252,  252,  256,  256,  257,  257,  257,  257,
X
X      257,  257,  257,  257,  257,  257,  257,  257,  257,  260,
X      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
X      260,  260,  267,  155,  340,  118,  267,  268,  268,  118,
X      268,  268,  268,  268,  268,  268,  268,  268,  268,  271,
X      271,   89,  271,  271,  271,  271,  271,  271,  271,  271,
X      271,  271,  278,   89,   80,   74,  278,  281,  281,  281,
X      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
X      292,   74,   72,   72,  292,  293,  293,  293,  293,  293,
X      293,  293,  293,  293,  293,  293,  293,  293,  295,  295,
X      340,  340,  295,  295,  300,  300,  340,  340,  300,  300,
X
X      304,  340,  340,  340,  304,  276,  276,  276,  276,  276,
X      276,  276,  276,  276,  276,  276,  276,  276,  307,  340,
X      340,  340,  307,  284,  284,  340,  284,  284,  284,  284,
X      284,  284,  284,  284,  284,  284,  314,  340,  340,  340,
X      314,   45,  340,  340,  340,  340,  340,  340,  340,  340,
X      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
X      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
X      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
X      340,  340,  340,  340,  340
X    } ;
X
Xstatic const short int yy_chk[1486] =
X    {   0,
X        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
X        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
X        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
X        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
X        1,    1,    1,    2,    2,    2,    2,    2,    2,    2,
X        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
X        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
X        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
X        2,    2,    2,    2,    2,    2,    3,    3,    3,    3,
X        3,   69,    3,   65,   98,    3,    3,   19,  329,    3,
X
X       19,    3,   23,    3,    3,   11,   11,   11,   11,   12,
X       12,   12,   12,   23,   19,   29,   65,   98,  101,   23,
X       23,   20,   17,   69,   20,    3,    3,    4,    4,    4,
X        4,    4,   17,    4,    4,   17,    4,    4,   20,   21,
X        4,  101,    4,   24,    4,    4,   22,    4,   61,   61,
X       21,   61,  178,  178,   24,   29,   21,   22,   21,  328,
X       24,   24,   17,   22,  327,   22,    4,    4,    9,    9,
X        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
X        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
X        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
X
X        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
X        9,   13,   13,   13,   13,   13,   13,   13,   13,   13,
X       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
X       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
X       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
X       13,   13,   13,   13,   18,   35,   31,   32,   35,   33,
X       34,  110,  326,  105,   18,   31,   32,   18,   33,   34,
X       36,  110,   35,   36,   43,   43,   43,   43,  318,  318,
X      325,   43,   47,   47,   47,   47,  105,   36,   51,   51,
X       51,   51,   43,  324,   18,   25,   25,   25,   25,   25,
X
X       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
X       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
X       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
X       25,   25,   25,   25,   25,   25,   25,   25,   30,   39,
X       39,   39,   39,   82,  147,   82,   82,  132,  152,  132,
X      132,  319,  319,  139,  132,  139,  139,  144,  323,  144,
X      144,  149,  167,  149,  149,  167,  161,  147,  161,  161,
X      322,  152,   39,  321,  320,  149,  317,   39,   30,   37,
X       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
X       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
X
X       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
X       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
X       37,   37,   40,   40,   40,   40,   58,   58,   58,   58,
X      212,  315,  313,   58,   67,   67,   67,   67,  312,  311,
X      212,   67,  153,  153,  153,  153,  155,  155,  155,  155,
X      157,  157,  157,  157,  162,   40,  162,  162,  310,  309,
X       40,   44,   44,   44,   44,  308,   58,  164,   44,  164,
X      164,  179,  306,  264,   67,   44,  179,  264,  264,   44,
X       54,  166,  166,  166,  166,  201,  305,  201,  201,  228,
X      301,  228,  228,  299,  179,   54,  228,   54,  235,   54,
X
X      235,  235,   54,  298,   54,   54,   54,   54,   54,   54,
X       54,  293,   54,   66,   66,  291,   66,   66,   66,   66,
X       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
X       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
X       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
X       66,   66,   66,   66,   66,   66,  172,  172,  172,  172,
X      288,  287,  286,  172,  186,  186,  186,  186,  285,  281,
X      238,  186,  238,  238,  239,  239,  239,  239,  243,  280,
X      243,  243,  245,  245,  245,  245,  247,  279,  247,  247,
X      277,  249,  243,  249,  249,  276,  172,  185,  251,  185,
X
X      251,  251,  273,  272,  186,  266,  185,  185,  185,  185,
X      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
X      185,  185,  185,  185,  262,  260,  185,  199,  199,  199,
X      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
X      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
X      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
X      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
X      230,  230,  257,  230,  230,  230,  230,  230,  230,  230,
X      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
X      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
X
X      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
X      230,  230,  230,  253,  253,  253,  253,  265,  255,  302,
X      254,  265,  265,  302,  302,  265,  265,  265,  265,  265,
X      265,  289,  289,  289,  289,  296,  296,  296,  296,  303,
X      250,  244,  241,  237,  236,  233,  232,  303,  303,  303,
X      303,  303,  303,  341,  341,  341,  341,  341,  341,  341,
X      341,  341,  341,  341,  341,  341,  342,  342,  342,  342,
X      342,  342,  342,  342,  342,  342,  342,  342,  342,  343,
X      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
X      343,  343,  344,  344,  344,  344,  344,  344,  344,  344,
X
X      344,  344,  344,  344,  344,  345,  345,  345,  345,  345,
X      345,  345,  345,  345,  345,  345,  345,  345,  346,  346,
X      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
X      346,  347,  347,  347,  347,  347,  347,  347,  347,  347,
X      347,  347,  347,  347,  348,  348,  348,  348,  348,  348,
X      348,  348,  348,  348,  348,  348,  348,  349,  349,  349,
X      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
X      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
X      350,  350,  350,  351,  351,  351,  351,  351,  351,  351,
X      351,  351,  351,  351,  351,  351,  352,  352,  352,  352,
X
X      352,  352,  352,  352,  352,  352,  352,  352,  352,  353,
X      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
X      353,  353,  354,  354,  354,  354,  354,  354,  354,  354,
X      354,  354,  354,  354,  354,  355,  355,  355,  355,  355,
X      355,  355,  355,  355,  355,  355,  355,  355,  356,  356,
X      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
X      356,  357,  357,  229,  222,  357,  357,  358,  358,  358,
X      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
X      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
X      359,  359,  360,  360,  219,  218,  360,  360,  361,  361,
X
X      217,  361,  361,  361,  361,  361,  361,  206,  361,  361,
X      361,  362,  362,  204,  362,  362,  362,  362,  362,  362,
X      362,  362,  362,  362,  363,  363,  363,  363,  363,  363,
X      363,  363,  363,  363,  363,  363,  363,  364,  198,  197,
X      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
X      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
X      365,  365,  365,  366,  366,  193,  366,  366,  366,  366,
X      366,  366,  366,  190,  181,  366,  367,  367,  177,  175,
X      367,  367,  368,  368,  174,  368,  368,  368,  368,  368,
X      368,  368,  368,  368,  368,  369,  369,  169,  163,  369,
X
X      369,  370,  370,  159,  370,  370,  370,  370,  370,  370,
X      370,  370,  370,  370,  371,  371,  151,  371,  371,  371,
X      371,  371,  371,  371,  371,  371,  371,  372,  372,  150,
X      372,  372,  372,  372,  372,  372,  146,  372,  372,  372,
X      373,  373,  142,  141,  137,  373,  373,  373,  373,  373,
X      374,  374,  136,  374,  374,  374,  374,  374,  374,  374,
X      374,  374,  374,  375,  375,  134,  126,  375,  375,  376,
X      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
X      376,  376,  377,  377,  123,  377,  377,  117,  377,  377,
X      377,  377,  377,  377,  377,  378,  378,  114,  378,  378,
X
X      113,  378,  378,  378,  378,  378,  378,  378,  379,  379,
X      111,  102,  379,  379,  379,  379,   93,  379,  379,  379,
X      379,  380,  380,   87,  380,  380,  380,  380,  380,  380,
X      380,  380,  380,  380,  381,  381,   80,  381,  381,  381,
X      381,  381,  381,  381,   79,   78,  381,  382,  382,   73,
X       71,  382,  382,  383,   64,   63,  383,  383,  383,  383,
X      383,  383,  383,  383,  383,  383,  384,  384,   55,  384,
X      384,  384,  384,  384,  384,  384,  384,  384,  384,  385,
X      385,   53,  385,  385,  385,  385,  385,  385,  385,  385,
X      385,  385,  386,  386,  387,  387,  388,  388,  388,  388,
X
X      388,  388,  388,  388,  388,  388,  388,  388,  388,  389,
X      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
X      389,  389,  390,   49,   45,   28,  390,  391,  391,   27,
X      391,  391,  391,  391,  391,  391,  391,  391,  391,  392,
X      392,   16,  392,  392,  392,  392,  392,  392,  392,  392,
X      392,  392,  393,   15,   10,    8,  393,  394,  394,  394,
X      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
X      395,    7,    6,    5,  395,  396,  396,  396,  396,  396,
X      396,  396,  396,  396,  396,  396,  396,  396,  397,  397,
X        0,    0,  397,  397,  398,  398,    0,    0,  398,  398,
X
X      399,    0,    0,    0,  399,  400,  400,  400,  400,  400,
X      400,  400,  400,  400,  400,  400,  400,  400,  401,    0,
X        0,    0,  401,  402,  402,    0,  402,  402,  402,  402,
X      402,  402,  402,  402,  402,  402,  403,    0,    0,    0,
X      403,  340,  340,  340,  340,  340,  340,  340,  340,  340,
X      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
X      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
X      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
X      340,  340,  340,  340,  340
X    } ;
X
Xstatic yy_state_type yy_last_accepting_state;
Xstatic YY_CHAR *yy_last_accepting_cpos;
X
X/* the intent behind this definition is that it'll catch
X * any uses of REJECT which flex missed
X */
X#define REJECT reject_used_but_not_detected
X#define yymore() yymore_used_but_not_detected
X#define YY_MORE_ADJ 0
X
X/* these variables are all declared out here so that section 3 code can
X * manipulate them
X */
X/* points to current character in buffer */
Xstatic YY_CHAR *yy_c_buf_p = (YY_CHAR *) 0;
Xstatic int yy_init = 1;		/* whether we need to initialize */
Xstatic int yy_start = 0;	/* start state number */
X
X/* flag which is used to allow yywrap()'s to do buffer switches
X * instead of setting up a fresh yyin.  A bit of a hack ...
X */
Xstatic int yy_did_buffer_switch_on_eof;
X
Xstatic yy_state_type yy_get_previous_state YY_PROTO(( void ));
Xstatic yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
Xstatic int yy_get_next_buffer YY_PROTO(( void ));
Xstatic void yyunput YY_PROTO(( YY_CHAR c, YY_CHAR *buf_ptr ));
Xvoid yyrestart YY_PROTO(( FILE *input_file ));
Xvoid yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
Xvoid yy_load_buffer_state YY_PROTO(( void ));
XYY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
Xvoid yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
Xvoid yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
X
X#define yy_new_buffer yy_create_buffer
X
X#ifdef __cplusplus
Xstatic int yyinput YY_PROTO(( void ));
X#else
Xstatic int input YY_PROTO(( void ));
X#endif
X
XYY_DECL
X    {
X    register yy_state_type yy_current_state;
X    register YY_CHAR *yy_cp, *yy_bp;
X    register int yy_act;
X
X
X    static int bracelevel, didadef;
X    int i, indented_code, checking_used, new_xlation;
X    int doing_codeblock = false;
X    Char nmdef[MAXLINE], myesc();
X
X
X    if ( yy_init )
X	{
X	YY_USER_INIT;
X
X	if ( ! yy_start )
X	    yy_start = 1;	/* first start state */
X
X	if ( ! yyin )
X	    yyin = stdin;
X
X	if ( ! yyout )
X	    yyout = stdout;
X
X	if ( yy_current_buffer )
X	    yy_init_buffer( yy_current_buffer, yyin );
X	else
X	    yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );
X
X	yy_load_buffer_state();
X
X	yy_init = 0;
X	}
X
X    while ( 1 )		/* loops until end-of-file is reached */
X	{
X	yy_cp = yy_c_buf_p;
X
X	/* support of yytext */
X	*yy_cp = yy_hold_char;
X
X	/* yy_bp points to the position in yy_ch_buf of the start of the
X	 * current run.
X	 */
X	yy_bp = yy_cp;
X
X	yy_current_state = yy_start;
X	if ( yy_bp[-1] == '\n' )
X	    ++yy_current_state;
Xyy_match:
X	do
X	    {
X	    register YY_CHAR yy_c = yy_ec[*yy_cp];
X	    if ( yy_accept[yy_current_state] )
X		{
X		yy_last_accepting_state = yy_current_state;
X		yy_last_accepting_cpos = yy_cp;
X		}
X	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
X		{
X		yy_current_state = yy_def[yy_current_state];
X		if ( yy_current_state >= 341 )
X		    yy_c = yy_meta[yy_c];
X		}
X	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
X	    ++yy_cp;
X	    }
X	while ( yy_current_state != 340 );
X	yy_cp = yy_last_accepting_cpos;
X	yy_current_state = yy_last_accepting_state;
X
Xyy_find_action:
X	yy_act = yy_accept[yy_current_state];
X
X	YY_DO_BEFORE_ACTION;
X	YY_USER_ACTION;
X
Xdo_action:	/* this label is used only to access EOF actions */
X
X
X	switch ( yy_act )
X	    {
X	    case 0: /* must backtrack */
X	    /* undo the effects of YY_DO_BEFORE_ACTION */
X	    *yy_cp = yy_hold_char;
X	    yy_cp = yy_last_accepting_cpos;
X	    yy_current_state = yy_last_accepting_state;
X	    goto yy_find_action;
X
Xcase 1:
X# line 90 "scan.l"
Xindented_code = true; BEGIN(CODEBLOCK);
X	YY_BREAK
Xcase 2:
X# line 91 "scan.l"
X++linenum; /* treat as a comment */
X	YY_BREAK
Xcase 3:
X# line 92 "scan.l"
XECHO; BEGIN(C_COMMENT);
X	YY_BREAK
Xcase 4:
X# line 93 "scan.l"
Xreturn ( SCDECL );
X	YY_BREAK
Xcase 5:
X# line 94 "scan.l"
Xreturn ( XSCDECL );
X	YY_BREAK
Xcase 6:
X# line 95 "scan.l"
X{
X			++linenum;
X			line_directive_out( stdout );
X			indented_code = false;
X			BEGIN(CODEBLOCK);
X			}
X	YY_BREAK
Xcase 7:
X# line 102 "scan.l"
Xreturn ( WHITESPACE );
X	YY_BREAK
Xcase 8:
X# line 104 "scan.l"
X{
X			sectnum = 2;
X			line_directive_out( stdout );
X			BEGIN(SECT2PROLOG);
X			return ( SECTEND );
X			}
X	YY_BREAK
Xcase 9:
X# line 111 "scan.l"
X{
X	pinpoint_message( "warning - %%used/%%unused have been deprecated" );
X			checking_used = REALLY_USED; BEGIN(USED_LIST);
X			}
X	YY_BREAK
Xcase 10:
X# line 115 "scan.l"
X{
X			checking_used = REALLY_NOT_USED; BEGIN(USED_LIST);
X	pinpoint_message( "warning - %%used/%%unused have been deprecated" );
X			checking_used = REALLY_NOT_USED; BEGIN(USED_LIST);
X			}
X	YY_BREAK
Xcase 11:
X# line 122 "scan.l"
X{
X#ifdef NOTDEF
X			fprintf( stderr,
X			     "old-style lex command at line %d ignored:\n\t%s",
X				 linenum, yytext );
X#endif
X			++linenum;
X			}
X	YY_BREAK
Xcase 12:
X# line 131 "scan.l"
X/* ignore old lex directive */
X	YY_BREAK
Xcase 13:
X# line 133 "scan.l"
X{
X			++linenum;
X			xlation =
X			    (int *) malloc( sizeof( int ) * (unsigned) csize );
X
X			if ( ! xlation )
X			    flexfatal(
X				"dynamic memory failure building %t table" );
X
X			for ( i = 0; i < csize; ++i )
X			    xlation[i] = 0;
X
X			num_xlations = 0;
X
X			BEGIN(XLATION);
X			}
X	YY_BREAK
Xcase 14:
X# line 150 "scan.l"
Xsynerr( "unrecognized '%' directive" );
X	YY_BREAK
Xcase 15:
X# line 152 "scan.l"
X{
X			(void) strcpy( nmstr, (char *) yytext );
X			didadef = false;
X			BEGIN(PICKUPDEF);
X			}
X	YY_BREAK
Xcase 16:
X# line 158 "scan.l"
XRETURNNAME;
X	YY_BREAK
Xcase 17:
X# line 159 "scan.l"
X++linenum; /* allows blank lines in section 1 */
X	YY_BREAK
Xcase 18:
X# line 160 "scan.l"
X++linenum; return ( '\n' );
X	YY_BREAK
Xcase 19:
X# line 161 "scan.l"
Xsynerr( "illegal character" ); BEGIN(RECOVER);
X	YY_BREAK
Xcase 20:
X# line 164 "scan.l"
XECHO; BEGIN(INITIAL);
X	YY_BREAK
Xcase 21:
X# line 165 "scan.l"
X++linenum; ECHO; BEGIN(INITIAL);
X	YY_BREAK
Xcase 22:
X# line 166 "scan.l"
XECHO;
X	YY_BREAK
Xcase 23:
X# line 167 "scan.l"
XECHO;
X	YY_BREAK
Xcase 24:
X# line 168 "scan.l"
X++linenum; ECHO;
X	YY_BREAK
Xcase 25:
X# line 171 "scan.l"
X++linenum; BEGIN(INITIAL);
X	YY_BREAK
Xcase 26:
X# line 172 "scan.l"
XECHO; CHECK_REJECT(yytext);
X	YY_BREAK
Xcase 27:
X# line 173 "scan.l"
XECHO; CHECK_YYMORE(yytext);
X	YY_BREAK
Xcase 28:
X# line 174 "scan.l"
XECHO;
X	YY_BREAK
Xcase 29:
X# line 175 "scan.l"
X{
X			++linenum;
X			ECHO;
X			if ( indented_code )
X			    BEGIN(INITIAL);
X			}
X	YY_BREAK
Xcase 30:
X# line 183 "scan.l"
X/* separates name and definition */
X	YY_BREAK
Xcase 31:
X# line 185 "scan.l"
X{
X			(void) strcpy( (char *) nmdef, (char *) yytext );
X
X			for ( i = strlen( (char *) nmdef ) - 1;
X			      i >= 0 &&
X			      nmdef[i] == ' ' || nmdef[i] == '\t';
X			      --i )
X			    ;
X
X			nmdef[i + 1] = '\0';
X
X                        ndinstal( nmstr, nmdef );
X			didadef = true;
X			}
X	YY_BREAK
Xcase 32:
X# line 200 "scan.l"
X{
X			if ( ! didadef )
X			    synerr( "incomplete name definition" );
X			BEGIN(INITIAL);
X			++linenum;
X			}
X	YY_BREAK
Xcase 33:
X# line 207 "scan.l"
X++linenum; BEGIN(INITIAL); RETURNNAME;
X	YY_BREAK
Xcase 34:
X# line 210 "scan.l"
X++linenum; BEGIN(INITIAL);
X	YY_BREAK
Xcase 35:
X# line 211 "scan.l"
X
X	YY_BREAK
Xcase 36:
X# line 212 "scan.l"
X{
X			if ( all_upper( yytext ) )
X			    reject_really_used = checking_used;
X			else
X			    synerr( "unrecognized %used/%unused construct" );
X			}
X	YY_BREAK
Xcase 37:
X# line 218 "scan.l"
X{
X			if ( all_lower( yytext ) )
X			    yymore_really_used = checking_used;
X			else
X			    synerr( "unrecognized %used/%unused construct" );
X			}
X	YY_BREAK
Xcase 38:
X# line 224 "scan.l"
Xsynerr( "unrecognized %used/%unused construct" );
X	YY_BREAK
Xcase 39:
X# line 227 "scan.l"
X++linenum; BEGIN(INITIAL);
X	YY_BREAK
Xcase 40:
X# line 228 "scan.l"
X++num_xlations; new_xlation = true;
X	YY_BREAK
Xcase 41:
X# line 229 "scan.l"
Xsynerr( "bad row in translation table" );
X	YY_BREAK
Xcase 42:
X# line 230 "scan.l"
X/* ignore whitespace */
X	YY_BREAK
Xcase 43:
X# line 232 "scan.l"
X{
X			xlation[myesc( yytext )] =
X				(new_xlation ? num_xlations : -num_xlations);
X			new_xlation = false;
X			}
X	YY_BREAK
Xcase 44:
X# line 237 "scan.l"
X{
X			xlation[yytext[0]] =
X				(new_xlation ? num_xlations : -num_xlations);
X			new_xlation = false;
X			}
X	YY_BREAK
Xcase 45:
X# line 243 "scan.l"
X++linenum;
X	YY_BREAK
Xcase 46:
X*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
Xyy_c_buf_p = yy_cp -= 1;
XYY_DO_BEFORE_ACTION; /* set up yytext again */
X# line 246 "scan.l"
X{
X			++linenum;
X			ACTION_ECHO;
X			MARK_END_OF_PROLOG;
X			BEGIN(SECT2);
X			}
X	YY_BREAK
Xcase 47:
X# line 253 "scan.l"
X++linenum; ACTION_ECHO;
X	YY_BREAK
Xcase YY_STATE_EOF(SECT2PROLOG):
X# line 255 "scan.l"
XMARK_END_OF_PROLOG; yyterminate();
X	YY_BREAK
Xcase 49:
X# line 257 "scan.l"
X++linenum; /* allow blank lines in section 2 */
X	YY_BREAK
Xcase 50:
X# line 259 "scan.l"
X{
X			indented_code = (yytext[0] != '%');
X			doing_codeblock = true;
X			bracelevel = 1;
X
X			if ( indented_code )
X			    ACTION_ECHO;
X
X			BEGIN(CODEBLOCK_2);
X			}
X	YY_BREAK
Xcase 51:
X# line 270 "scan.l"
XBEGIN(SC); return ( '<' );
X	YY_BREAK
Xcase 52:
X# line 271 "scan.l"
Xreturn ( '^' );
X	YY_BREAK
Xcase 53:
X# line 272 "scan.l"
XBEGIN(QUOTE); return ( '"' );
X	YY_BREAK
Xcase 54:
X*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
Xyy_c_buf_p = yy_cp = yy_bp + 1;
XYY_DO_BEFORE_ACTION; /* set up yytext again */
X# line 273 "scan.l"
XBEGIN(NUM); return ( '{' );
X	YY_BREAK
Xcase 55:
X# line 274 "scan.l"
XBEGIN(BRACEERROR);
X	YY_BREAK
Xcase 56:
X*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
Xyy_c_buf_p = yy_cp = yy_bp + 1;
XYY_DO_BEFORE_ACTION; /* set up yytext again */
X# line 275 "scan.l"
Xreturn ( '$' );
X	YY_BREAK
Xcase 57:
X# line 277 "scan.l"
X{
X			bracelevel = 1;
X			BEGIN(PERCENT_BRACE_ACTION);
X			return ( '\n' );
X			}
X	YY_BREAK
Xcase 58:
X# line 282 "scan.l"
Xcontinued_action = true; ++linenum; return ( '\n' );
X	YY_BREAK
Xcase 59:
X# line 284 "scan.l"
X{
X			/* this rule is separate from the one below because
X			 * otherwise we get variable trailing context, so
X			 * we can't build the scanner using -{f,F}
X			 */
X			bracelevel = 0;
X			continued_action = false;
X			BEGIN(ACTION);
X			return ( '\n' );
X			}
X	YY_BREAK
Xcase 60:
X*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
Xyy_c_buf_p = yy_cp -= 1;
XYY_DO_BEFORE_ACTION; /* set up yytext again */
X# line 295 "scan.l"
X{
X			bracelevel = 0;
X			continued_action = false;
X			BEGIN(ACTION);
X			return ( '\n' );
X			}
X	YY_BREAK
Xcase 61:
X# line 302 "scan.l"
X++linenum; return ( '\n' );
X	YY_BREAK
Xcase 62:
X# line 304 "scan.l"
Xreturn ( EOF_OP );
X	YY_BREAK
Xcase 63:
X# line 306 "scan.l"
X{
X			sectnum = 3;
X			BEGIN(SECT3);
X			return ( EOF ); /* to stop the parser */
X			}
X	YY_BREAK
Xcase 64:
X# line 312 "scan.l"
X{
X			int cclval;
X
X			(void) strcpy( nmstr, (char *) yytext );
X
X			/* check to see if we've already encountered this ccl */
X			if ( (cclval = ccllookup( (Char *) nmstr )) )
X			    {
X			    yylval = cclval;
X			    ++cclreuse;
X			    return ( PREVCCL );
X			    }
X			else
X			    {
X			    /* we fudge a bit.  We know that this ccl will
X			     * soon be numbered as lastccl + 1 by cclinit
X			     */
X			    cclinstal( (Char *) nmstr, lastccl + 1 );
X
X			    /* push back everything but the leading bracket
X			     * so the ccl can be rescanned
X			     */
X			    PUT_BACK_STRING((Char *) nmstr, 1);
X
X			    BEGIN(FIRSTCCL);
X			    return ( '[' );
X			    }
X			}
X	YY_BREAK
Xcase 65:
X# line 341 "scan.l"
X{
X			register Char *nmdefptr;
X			Char *ndlookup();
X
X			(void) strcpy( nmstr, (char *) yytext );
X			nmstr[yyleng - 1] = '\0';  /* chop trailing brace */
X
X			/* lookup from "nmstr + 1" to chop leading brace */
X			if ( ! (nmdefptr = ndlookup( nmstr + 1 )) )
X			    synerr( "undefined {name}" );
X
X			else
X			    { /* push back name surrounded by ()'s */
X			    unput(')');
X			    PUT_BACK_STRING(nmdefptr, 0);
X			    unput('(');
X			    }
X			}
X	YY_BREAK
Xcase 66:
X# line 360 "scan.l"
Xreturn ( yytext[0] );
X	YY_BREAK
Xcase 67:
X# line 361 "scan.l"
XRETURNCHAR;
X	YY_BREAK
Xcase 68:
X# line 362 "scan.l"
X++linenum; return ( '\n' );
X	YY_BREAK
Xcase 69:
X# line 365 "scan.l"
Xreturn ( ',' );
X	YY_BREAK
Xcase 70:
X# line 366 "scan.l"
XBEGIN(SECT2); return ( '>' );
X	YY_BREAK
Xcase 71:
END_OF_FILE
  if test 49644 -ne `wc -c <'initscan.c.01'`; then
    echo shar: \"'initscan.c.01'\" unpacked with wrong size!
  fi
  # end of 'initscan.c.01'
fi
echo shar: End of archive 3 \(of 10\).
cp /dev/null ark3isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 10 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
exit 0 # Just in case...
