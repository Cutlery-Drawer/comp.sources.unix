Newsgroups: comp.sources.unix
From: glover@credit.erin.utoronto.ca (Mike Glover)
Subject: v29i108: cdk-4.7.0 - Curses Development Kit, V4.7.0, Part04/10
References: <1.833427459.28242@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: glover@credit.erin.utoronto.ca (Mike Glover)
Posting-Number: Volume 29, Issue 108
Archive-Name: cdk-4.7.0/part04

#!/bin/sh
# This is `cdk_part.04' (part 4 of a multipart archive).
# Do not concatenate these parts, unpack them in order with `/bin/sh'.
# File `draw.c' is being continued...
#
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
if test ! -r _sharseq.tmp; then
  echo 'Please unpack part 1 first!'
  exit 1
fi
shar_sequence=`cat _sharseq.tmp`
if test "$shar_sequence" != 4; then
  echo "Please unpack part $shar_sequence next!"
  exit 1
fi
if test ! -f _sharnew.tmp; then
  echo 'x - still skipping draw.c'
else
  echo 'x - continuing file draw.c'
  sed 's/^X//' << 'SHAR_EOF' >> 'draw.c' &&
X */
void writeChtypeAttrib (WINDOW *window, int xpos, int ypos, chtype *string, chtype attr, int align, int start, int end)
{
X   /* Declare local variables.					*/
X   int diff		= 0;
X   int display		= 0;
X   int x		= 0;
X   chtype plain;
X
X   /* Determine how much we need to display.			*/
X   if ( end >= start)
X   {
X      diff	= end - start;
X   }
X
X   /* Check the alignment of the message.			*/
X   if (align == HORIZONTAL)
X   {
X      /* Draw the message on a horizontal axis. 		*/
X      display		= MIN(diff,window->_maxx-1);
X      for (x=0; x < display; x++)
X      {
X         plain	= string[x+start] & A_CHARTEXT;
X         mvwaddch (window, ypos, xpos+x, plain | attr);
X      }
X   }
X   else
X   {
X      /* Draw the message on a vertical axis.			*/
X      display		= MIN(diff,window->_maxy-1);
X      for (x=0; x < display; x++)
X      {
X         plain	= string[x+start] & A_CHARTEXT;
X         mvwaddch (window, ypos+x, xpos, plain | attr);
X      }
X   }
}
X
/*
X * This pops up a message.
X */
void popupMessage (CDKSCREEN *screen, char **mesg, int count)
{
X   /* Declare local variables.					*/
X   CDKLABEL	*popup;
X
X   /* Create the label.						*/
X   popup = newCDKLabel (screen, CENTER, CENTER, mesg, count, TRUE, FALSE);
X
X   /* Draw it on the screen.					*/
X   drawCDKLabel (popup, TRUE);
X
X   /* Wait for some input.					*/
X   keypad (popup->win, TRUE);
X   wgetch (popup->win);
X
X   /* Kill it.							*/
X   destroyCDKLabel (popup);
X
X   /* Clean the screen.						*/
X   refreshCDKScreen (screen);
}
X
/*
X * This pops up a dialog box.
X */
int popupQuestion (CDKSCREEN *screen, char **mesg, int mesgCount, char **buttons, int buttonCount)
{
X   /* Declare local variables.					*/
X   CDKDIALOG	*popup;
X   int choice;
X
X   /* Create the dialog box.					*/
X   popup = newCDKDialog (screen, CENTER, CENTER,
X				mesg, mesgCount, buttons, buttonCount,
X				A_REVERSE, TRUE, TRUE, FALSE);
X
X   choice = activateCDKDialog (popup, NULL);
X   destroyCDKDialog (popup);
X   return choice;
}
SHAR_EOF
  echo 'File draw.c is complete' &&
  $shar_touch -am 0503190896 'draw.c' &&
  chmod 0444 'draw.c' ||
  echo 'restore of draw.c failed'
  shar_count="`wc -c < 'draw.c'`"
  test 9313 -eq "$shar_count" ||
    echo "draw.c: original size 9313, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= entry.c ==============
if test -f 'entry.c' && test X"$1" != X"-c"; then
  echo 'x - skipping entry.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting entry.c (binary)'
  sed 's/^X//' << 'SHAR_EOF' > _sharuue.tmp &&
begin 600 entry.c
M(VEN8VQU9&4@(F-D:RYH(@H*+RH*("H@)$%U=&AO<CH@9VQO=F5R("0*("H@
M)$1A=&4Z(#$Y.38O,#4O,#$@,#(Z,C<Z,SD@)`H@*B`D4F5V:7-I;VXZ(#$N
M,3`X("0*("HO"F5X=&5R;B!C:&%R("I'4&%S=&5"=69F97(L("I'16%R;'E%
M>&ET+"`J1T5S8V%P94AI=#L*"B\J"B`J(%1H:7,@8W)E871E<R!A('!O:6YT
M97(@=&\@86X@96YT<GD@=VED9V5T+@H@*B\*0T1+14Y44ED@*FYE=T-$2T5N
M=')Y("A#1$M30U)%14X@*F-D:W-C<F5E;BP@:6YT('AP;&%C92P@:6YT('EP
M;&%C92P@:6YT(&QP;&%C92P@8VAA<B`J;&%B96PL(&-H='EP92!F:65L9$%T
M='(L(&-H='EP92!F:6QL97(L($5$:7-P;&%Y5'EP92!D:7-P5'EP92P@:6YT
M(&9I96QD5VED=&@L(&EN="!M:6XL(&EN="!M87@L(&)O;VQE86X@8F]X+"!B
M;V]L96%N('-H861O=RD*>PH@("`O*B!3970@=7`@<V]M92!V87)I86)L97,N
M"0D)"0D)*B\*("`@0T1+14Y44ED@*F5N=')Y"3T@*$-$2T5.5%)9("HI;6%L
M;&]C("AS:7IE;V8@*$-$2T5.5%)9*2D["B`@(&-H87(@*G!L86EN3&%B96P)
M/2`H8VAA<B`J*4Y53$P["B`@(&EN="!B;WA7:61T:`D)/2`P.PH@("!I;G0@
M8F]X2&5I9VAT"3T@,SL*("`@:6YT('AP;W,)"3T@>'!L86-E.PH@("!I;G0@
M>7!O<PD)/2!Y<&QA8V4["B`@(&EN="!L86)E;'AO9F9S970)/2`P.PH@("!I
M;G0@;&%B96QY;V9F<V5T"3T@,#L*("`@:6YT(&9I96QD>&]F9G-E=`D](#`[
M"B`@(&EN="!F:65L9'EO9F9S970)/2`P.PH@("!I;G0@=&5M<`D)/2`P.PH*
M("`@+RH@5')A;G-L871E('1H92!L86)E;"!C:&%R("IP;VEN=&5R('1O(&$@
M8VAT>7!E('!O:6YT97(N"0DJ+PH@("!E;G1R>2T^;&%B96P)"3T@8VAA<C)#
M:'1Y<&4@*&QA8F5L+"`F96YT<GDM/FQA8F5L3&5N+"`F=&5M<"D["B`@('!L
M86EN3&%B96P)"3T@8VAT>7!E,D-H87(@*&5N=')Y+3YL86)E;"D["@H@("`O
M*B!!9&IU<W0@=&AE(&]F9G-E="!V86QU97,@9VEV96X@=&AE(&QO8V%T:6]N
M(&]F('1H92!L86)E;"X)"2HO"B`@(&%L:6=N;&%B96P@*'!L86EN3&%B96PL
M(&QP;&%C92P@9FEE;&17:61T:"P@)F)O>%=I9'1H+"`F8F]X2&5I9VAT+"`F
M;&%B96QX;V9F<V5T+"`F;&%B96QY;V9F<V5T+"`F9FEE;&1X;V9F<V5T+"`F
M9FEE;&1Y;V9F<V5T*3L*("`@9G)E94-H87(@*'!L86EN3&%B96PI.PH@("`*
M("`@+RH@4F5J=7-T:69Y('1H92!X(&%N9"!Y('!O<VET:6]N<R!I9B!W92!N
M965D('1O+@D)"2HO"B`@(&%L:6=N>'D@*&-D:W-C<F5E;BT^=VEN9&]W+"`F
M>'!O<RP@)GEP;W,L(&)O>%=I9'1H+"!B;WA(96EG:'0I.PH*("`@+RH@36%K
M92!T:&4@;&%B96P@=VEN9&]W+@D)"0D)"2HO"B`@(&5N=')Y+3YW:6X@/2!N
M97=W:6X@*&)O>$AE:6=H="P@8F]X5VED=&@L('EP;W,L('AP;W,I.PH*("`@
M+RH@27,@=&AE('=I;F1O=R!.54Q,(#\_/PD)"0D)"2HO"B`@(&EF("AE;G1R
M>2T^=VEN(#T]("A724Y$3U<@*BE.54Q,*0H@("!["B`@("`@("\J($-L96%N
M('5P('1H92!P;VEN=&5R<RX)"0D)"0DJ+PH@("`@("!F<F5E0VAT>7!E("AE
M;G1R>2T^;&%B96PI.PH@("`@("!F<F5E("AE;G1R>2D["B`@("`@(`H@("`@
M("`O*B!%>&ET('=I=&@@3E5,3"X)"0D)"0DJ+PH@("`@("!R971U<FX@*"A#
M1$M%3E1262`J*4Y53$PI.PH@("!]"@H@("`O*B!-86ME('1H92!F:65L9"!W
M:6YD;W<N"0D)"0D)*B\*("`@96YT<GDM/F9I96QD"0D]('-U8G=I;B`H8V1K
M<V-R965N+3YW:6YD;W<L(#$L(&9I96QD5VED=&@L('EP;W,K9FEE;&1Y;V9F
M<V5T+"!X<&]S*V9I96QD>&]F9G-E="D["B`@(&5N=')Y+3YL86)E;%=I;@D]
M('-U8G=I;B`H8V1K<V-R965N+3YW:6YD;W<L(#$L(&5N=')Y+3YL86)E;$QE
M;BLR+"!Y<&]S*VQA8F5L>6]F9G-E="P@>'!O<RML86)E;'AO9F9S970I.PH@
M("!K97EP860@*&5N=')Y+3YF:65L9"P@5%)512D["B`@(&ME>7!A9"`H96YT
M<GDM/G=I;BP@5%)512D["@H@("`O*B!-86ME(')O;VT@9F]R('1H92!I;F9O
M(&-H87(@*B!P;VEN=&5R+@D)"0DJ+PH@("!E;G1R>2T^:6YF;PD)/2`H8VAA
M<B`J*6UA;&QO8R`H<VEZ96]F*&-H87(I("H@*&UA>"LS*2D["B`@(&-L96%N
M0VAA<B`H96YT<GDM/FEN9F\L(&UA>"LS+"`G7#`G*3L*("`@96YT<GDM/FEN
M9F]7:61T:`D](&UA>"LS.PH*("`@+RH@4V5T('5P('1H92!R97-T(&]F('1H
M92!S=')U8W1U<F4N"0D)"0DJ+PH@("!E;G1R>2T^<&%R96YT"0D](&-D:W-C
M<F5E;BT^=VEN9&]W.PH@("!E;G1R>2T^<VAA9&]W5VEN"0D]("A724Y$3U<@
M*BE.54Q,.PH@("!E;G1R>2T^9FEE;&1!='1R"0D](&9I96QD071T<CL*("`@
M96YT<GDM/F9I96QD5VED=&@)"3T@9FEE;&17:61T:#L*("`@96YT<GDM/F9I
M;&QE<@D)/2!F:6QL97(["B`@(&5N=')Y+3YB;W@)"0D](&)O>#L*("`@96YT
M<GDM/G-H861O=PD)/2!S:&%D;W<["B`@(&5N=')Y+3YS8W)E96Y#;VP)"3T@
M,#L*("`@96YT<GDM/FQE9G1#:&%R"0D](#`["B`@(&5N=')Y+3YM:6X)"0D]
M(&UI;CL*("`@96YT<GDM/FUA>`D)"3T@;6%X.PH@("!E;G1R>2T^9&ES<%1Y
M<&4)"3T@9&ES<%1Y<&4["B`@(&5N=')Y+3YC86QL8F%C:V9N"0D]("AV;VED
M("HI)D-$2T5N=')Y0V%L;$)A8VL["B`@(&5N=')Y+3YP<F50<F]C97-S1G5N
M8W1I;VX)/2`H4%)/0T534T9.*4Y53$P["B`@(&5N=')Y+3YP<F50<F]C97-S
M1&%T80D]("AV;VED("HI3E5,3#L*("`@96YT<GDM/G!O<W10<F]C97-S1G5N
M8W1I;VX)/2`H4%)/0T534T9.*4Y53$P["B`@(&5N=')Y+3YP;W-T4')O8V5S
M<T1A=&$)/2`H=F]I9"`J*4Y53$P["@H@("`O*B!$;R!W92!W86YT(&$@<VAA
M9&]W/S\_"0D)"0D)*B\*("`@:68@*'-H861O=RD*("`@>PH@("`@("!E;G1R
M>2T^<VAA9&]W5VEN(#T@;F5W=VEN("AB;WA(96EG:'0L(&)O>%=I9'1H+"!Y
M<&]S*S$L('AP;W,K,2D["B`@('T*"B`@("\J($-L96%N('1H92!K97D@8FEN
M9&EN9W,N"0D)"0D)*B\*("`@8VQE86Y#1$M/8FIE8W1":6YD:6YG<R`H=D5.
M5%)9+"!E;G1R>2D["@H@("`O*B!296=I<W1E<B!T:&ES(&)A8GDN("`@("`@
M("`@("`@("`@"0D)"2HO"B`@(')E9VES=&5R0T1+3V)J96-T("AC9&MS8W)E
M96XL('9%3E1262P@96YT<GDI.PH*("`@+RH@4F5T=7)N('1H92!P;VEN=&5R
M('1O('1H92!S=')U8W1U<F4)"0D)*B\*("`@<F5T=7)N("AE;G1R>2D["GT*
M"B\J(`H@*B!4:&ES(&UE86YS('EO=2!W86YT('1O('5S92!T:&4@9VEV96X@
M96YT<GD@9FEE;&0N($ET('1A:V5S(&EN<'5T"B`J(&9R;VT@=&AE(&ME>6)O
M87)D+"!A;F0@=VAE;B!I=',@9&]N92P@:70@9FEL;',@=&AE(&5N=')Y(&EN
M9F\*("H@96QE;65N="!O9B!T:&4@<W1R=6-T=7)E('=I=&@@=VAA="!W87,@
M='EP960N"B`J+PIC:&%R("IA8W1I=F%T94-$2T5N=')Y("A#1$M%3E1262`J
M96YT<GDL(&-H='EP92`J86-T:6]N<RD*>PH@("`O*B!$96-L87)E(&QO8V%L
M('9A<FEA8FQE<RX)"0D)"0DJ+PH@("!C:'1Y<&4@:6YP=70)/2`H8VAT>7!E
M*4Y53$P["B`@(&-H87(@*G)E=#L*("`@"B`@("\J($1R87<@=&AE('=I9&=E
M="X)"0D)"0D)*B\*("`@9')A=T-$2T5N=')Y("AE;G1R>2P@96YT<GDM/F)O
M>"D["@H@("`O*B!#:&5C:R!I9B`G86-T:6]N<R<@:7,@3E5,3"X)"0D)"2HO
M"B`@(&EF("AA8W1I;VYS(#T]("AC:'1Y<&4@*BE.54Q,*0H@("!["B`@("`@
M(&9O<B`H.SLI"B`@("`@('L*("`@("`@("`@+RH@1V5T('1H92!I;G!U="X)
M"0D)"0DJ+PH@("`@("`@("!I;G!U="`]('=G971C:"`H96YT<GDM/F9I96QD
M*3L*"B`@("`@("`@("\J($EN:F5C="!T:&4@8VAA<F%C=&5R(&EN=&\@=&AE
M('=I9&=E="X)"0DJ+PH@("`@("`@("!R970@/2!I;FIE8W1#1$M%;G1R>2`H
M96YT<GDL(&EN<'5T*3L*("`@("`@("`@:68@*')E="`A/2!'16%R;'E%>&ET
M*0H@("`@("`@("!["B`@("`@("`@("`@(')E='5R;B!R970["B`@("`@("`@
M('T*("`@("`@?0H@("!]"B`@(&5L<V4*("`@>PH@("`@("!I;G0@;&5N9W1H
M(#T@8VAL96X@*&%C=&EO;G,I.PH@("`@("!I;G0@>"`],#L*"B`@("`@("\J
M($EN:F5C="!E86-H(&-H87)A8W1E<B!O;F4@870@82!T:6UE+@D)"0DJ+PH@
M("`@("!F;W(@*'@],#L@>"`\(&QE;F=T:#L@>"LK*0H@("`@("!["B`@("`@
M("`@(')E="`](&EN:F5C=$-$2T5N=')Y("AE;G1R>2P@86-T:6]N<UMX72D[
M"B`@("`@("`@(&EF("AR970@(3T@1T5A<FQY17AI="D*("`@("`@("`@>PH@
M("`@("`@("`@("!R971U<FX@<F5T.PH@("`@("`@("!]"B`@("`@('T*("`@
M?0H@("!R971U<FX@<F5T.PI]"@HO*@H@*B!4:&ES(&EN:F5C=',@82!S:6YG
M;&4@8VAA<F%C=&5R(&EN=&\@=&AE('=I9&=E="X*("HO"F-H87(@*FEN:F5C
M=$-$2T5N=')Y("A#1$M%3E1262`J96YT<GDL(&-H='EP92!I;G!U="D*>PH@
M("`O*B!$96-L87)E(&QO8V%L('9A<FEA8FQE<RX)"0D)"0DJ+PH@("!I;G0@
M<'!2971U<FX)/2`Q.PH@("!I;G0@=&5M<"P@>#L*"B`@("\J(%)E9G)E<V@@
M=&AE(&5N=')Y(&9I96QD+@D)"0D)"2HO"B`@(&1R87=#1$M%;G1R>49I96QD
M("AE;G1R>2D["@H@("`O*B!#:&5C:R!I9B!T:&5R92!I<R!A('!R92UP<F]C
M97-S(&9U;F-T:6]N('1O(&)E(&-A;&QE9"X)"2HO"B`@(&EF("AE;G1R>2T^
M<')E4')O8V5S<T9U;F-T:6]N("$]("A04D]#15-31DXI3E5,3"D*("`@>PH@
M("`@("`O*B!#86QL('1H92!P<F4M<')O8V5S<R!F=6YC=&EO;BX)"0D)"2HO
M"B`@("`@('!P4F5T=7)N(#T@*"A04D]#15-31DXI*&5N=')Y+3YP<F50<F]C
M97-S1G5N8W1I;VXI*2`H=D5.5%)9+"!E;G1R>2P@96YT<GDM/G!R95!R;V-E
M<W-$871A+"!I;G!U="D["B`@('T*"B`@("\J(%-H;W5L9"!W92!C;VYT:6YU
M93\)"0D)"0DJ+PH@("!I9B`H<'!2971U<FX@(3T@,"D*("`@>PH@("`@("`O
M*B!#:&5C:R!A('!R961E9FEN960@8FEN9&EN9RXN+@D)"0D)*B\*("`@("`@
M:68@*"$@8VAE8VM#1$M/8FIE8W1":6YD("AV14Y44EDL(&5N=')Y+"!I;G!U
M="DI"B`@("`@('L*("`@("`@("`@<W=I=&-H("AI;G!U="D*("`@("`@("`@
M>PH@("`@("`@("`@("!C87-E($M%65]54"`Z(&-A<V4@2T597T1/5TX@.@H@
M("`@("`@("`@("`@("`@($)E97`H*3L*("`@("`@("`@("`@("`@("!B<F5A
M:SL*("`@("`@"B`@("`@("`@("`@(&-A<V4@2T597TQ%1E0@.@H@("`@("`@
M("`@("`@("`@(&EF("AE;G1R>2T^<V-R965N0V]L(#T](#`I"B`@("`@("`@
M("`@("`@("`@>PH@("`@("`@("`@("`@("`@("`@(&EF("AE;G1R>2T^;&5F
M=$-H87(@/3T@,"D*("`@("`@("`@("`@("`@("`@("!["B`@("`@("`@("`@
M("`@("`@("`@("`@0F5E<"@I.PH@("`@("`@("`@("`@("`@("`@('T*("`@
M("`@("`@("`@("`@("`@("!E;'-E"B`@("`@("`@("`@("`@("`@("`@>PH@
M("`@("`@("`@("`@("`@("`@("`@("\J(%-C<F]L;"!L969T+@DJ+PH@("`@
M("`@("`@("`@("`@("`@("`@(&5N=')Y+3YL969T0VAA<BTM.PH@("`@("`@
M("`@("`@("`@("`@("`@(&1R87=#1$M%;G1R>49I96QD("AE;G1R>2D["B`@
M("`@("`@("`@("`@("`@("`@?0H@("`@("`@("`@("`@("`@('T*("`@("`@
M("`@("`@("`@("!E;'-E"B`@("`@("`@("`@("`@("`@>PH@("`@("`@("`@
M("`@("`@("`@('=M;W9E("AE;G1R>2T^9FEE;&0L(#`L("TM96YT<GDM/G-C
M<F5E;D-O;"D["B`@("`@("`@("`@("`@("`@("`@=W)E9G)E<V@@*&5N=')Y
M+3YF:65L9"D["B`@("`@("`@("`@("`@("`@?0H@("`@("`@("`@("`@("`@
M(&)R96%K.PH@("`@("`*("`@("`@("`@("`@8V%S92!+15E?4DE'2%0@.@H@
M("`@("`@("`@("`@("`@(&EF("AE;G1R>2T^<V-R965N0V]L(#T](&5N=')Y
M+3YF:65L9%=I9'1H+3$I"B`@("`@("`@("`@("`@("`@>PH@("`@("`@("`@
M("`@("`@("`@('1E;7`@/2`H:6YT*7-T<FQE;B`H96YT<GDM/FEN9F\I.PH@
M("`@("`@("`@("`@("`@("`@(&EF("@H96YT<GDM/FQE9G1#:&%R("L@96YT
M<GDM/G-C<F5E;D-O;"LQ*2`]/2!T96UP*0H@("`@("`@("`@("`@("`@("`@
M('L*("`@("`@("`@("`@("`@("`@("`@("!"965P*"D["B`@("`@("`@("`@
M("`@("`@("`@?0H@("`@("`@("`@("`@("`@("`@(&5L<V4*("`@("`@("`@
M("`@("`@("`@("!["B`@("`@("`@("`@("`@("`@("`@("`@+RH@4V-R;VQL
M('1O('1H92!R:6=H=`D)"0DJ+PH@("`@("`@("`@("`@("`@("`@("`@(&5N
M=')Y+3YL969T0VAA<BLK.PH@("`@("`@("`@("`@("`@("`@("`@(&1R87=#
M1$M%;G1R>49I96QD("AE;G1R>2D["B`@("`@("`@("`@("`@("`@("`@?0H@
M("`@("`@("`@("`@("`@('T*("`@("`@("`@("`@("`@("!E;'-E"B`@("`@
M("`@("`@("`@("`@>PH@("`@("`@("`@("`@("`@("`@("\J($UO=F4@<FEG
M:'0N"0D)"0DJ+PH@("`@("`@("`@("`@("`@("`@('1E;7`@/2`H:6YT*7-T
M<FQE;B`H96YT<GDM/FEN9F\I.PH@("`@("`@("`@("`@("`@("`@(&EF("@H
M96YT<GDM/FQE9G1#:&%R("L@96YT<GDM/G-C<F5E;D-O;"D@/3T@=&5M<"D*
M("`@("`@("`@("`@("`@("`@("!["B`@("`@("`@("`@("`@("`@("`@("`@
M0F5E<"@I.PH@("`@("`@("`@("`@("`@("`@('T*("`@("`@("`@("`@("`@
M("`@("!E;'-E"B`@("`@("`@("`@("`@("`@("`@>PH@("`@("`@("`@("`@
M("`@("`@("`@('=M;W9E("AE;G1R>2T^9FEE;&0L(#`L("LK96YT<GDM/G-C
M<F5E;D-O;"D["B`@("`@("`@("`@("`@("`@("`@?0H@("`@("`@("`@("`@
M("`@("`@('=R969R97-H("AE;G1R>2T^9FEE;&0I.PH@("`@("`@("`@("`@
M("`@('T*("`@("`@("`@("`@("`@("!B<F5A:SL*("`@("`@"B`@("`@("`@
M("`@(&-A<V4@1$5,151%(#H@8V%S92`G""<@.@H@("`@("`@("`@("`@("`@
M(&EF("AE;G1R>2T^9&ES<%1Y<&4@/3T@=E9)15=/3DQ9*0H@("`@("`@("`@
M("`@("`@('L*("`@("`@("`@("`@("`@("`@("!"965P*"D["B`@("`@("`@
M("`@("`@("`@?0H@("`@("`@("`@("`@("`@(&5L<V4*("`@("`@("`@("`@
M("`@("!["B`@("`@("`@("`@("`@("`@("`@+RH@1V5T('1H92!L96YG=&@@
M;V8@=&AE('=I9&=E="!I;F9O<FUA=&EO;BX)*B\*("`@("`@("`@("`@("`@
M("`@("!I;G0@:6YF;TQE;F=T:"`]("AI;G0I<W1R;&5N("AE;G1R>2T^:6YF
M;RD["B`@("`@("`@("`@("`@("`@("`@:68@*"AE;G1R>2T^;&5F=$-H87(@
M*R!E;G1R>2T^<V-R965N0V]L*2`\(&EN9F],96YG=&@I"B`@("`@("`@("`@
M("`@("`@("`@>PH@("`@("`@("`@("`@("`@("`@("`@("\J(%=E(&%R92!D
M96QE=&5I;F<@9G)O;2!I;G-I9&4@=&AE('-T<FEN9RX)*B\*("`@("`@("`@
M("`@("`@("`@("`@("!I;G0@8W5R<E!O<R`](&5N=')Y+3YS8W)E96Y#;VPK
M96YT<GDM/FQE9G1#:&%R.PH@("`@("`@("`@("`@("`@("`@("`@(&9O<B`H
M>#UC=7)R4&]S.R!X(#P@:6YF;TQE;F=T:#L@>"LK*0H@("`@("`@("`@("`@
M("`@("`@("`@('L*("`@("`@("`@("`@("`@("`@("`@("`@("!E;G1R>2T^
M:6YF;UMX72`](&5N=')Y+3YI;F9O6W@K,5T["B`@("`@("`@("`@("`@("`@
M("`@("`@?0H@("`@("`@("`@("`@("`@("`@("`@(&5N=')Y+3YI;F9O6VEN
M9F],96YG=&A=(#T@)UPP)SL*("`@("`@"B`@("`@("`@("`@("`@("`@("`@
M("`@+RH@57!D871E('1H92!W:61G970N"0D)"2HO"B`@("`@("`@("`@("`@
M("`@("`@("`@9')A=T-$2T5N=')Y1FEE;&0@*&5N=')Y*3L*("`@("`@("`@
M("`@("`@("`@("!]"B`@("`@("`@("`@("`@("`@("`@96QS90H@("`@("`@
M("`@("`@("`@("`@('L*("`@("`@("`@("`@("`@("`@("`@("`O*B!792!A
M<F4@9&5L971I;F<@9G)O;2!T:&4@96YD(&]F('1H92!S=')I;F<N"2HO"B`@
M("`@("`@("`@("`@("`@("`@("`@:68@*&EN9F],96YG=&@@/B`P*0H@("`@
M("`@("`@("`@("`@("`@("`@('L*("`@("`@("`@("`@("`@("`@("`@("`@
M("`O*B!5<&1A=&4@=&AE(&-H87)A8W1E<B!P;VEN=&5R+@D)*B\*("`@("`@
M("`@("`@("`@("`@("`@("`@("!E;G1R>2T^:6YF;UMI;F9O3&5N9W1H+3%=
M(#T@)UPP)SL*("`@("`@("`@("`@("`@("`@("`@("`@("!I;F9O3&5N9W1H
M+2T["B`@(`H@("`@("`@("`@("`@("`@("`@("`@("`@("\J($%D:G5S="!T
M:&4@8W5R<V]R+@D)"0DJ+PH@("`@("`@("`@("`@("`@("`@("`@("`@(&EF
M("AE;G1R>2T^<V-R965N0V]L(#X@,"D*("`@("`@("`@("`@("`@("`@("`@
M("`@("!["B`@("`@("`@("`@("`@("`@("`@("`@("`@("`@96YT<GDM/G-C
M<F5E;D-O;"TM.PH@("`@("`@("`@("`@("`@("`@("`@("`@('T*("`@"B`@
M("`@("`@("`@("`@("`@("`@("`@("`@+RH*("`@("`@("`@("`@("`@("`@
M("`@("`@("`@*B!)9B!W92!D96QE=&5D('1H92!L87-T(&-H87)A8W1E<B!O
M;B!T:&4*("`@("`@("`@("`@("`@("`@("`@("`@("`@*B!S8W)E96X@86YD
M('1H92!I;F9O<FUA=&EO;B!H87,@<V-R;VQL960L"B`@("`@("`@("`@("`@
M("`@("`@("`@("`@("H@861J=7-T('1H92!E;G1R>2!F:65L9"!T;R!S:&]W
M('1H92!I;F9O+@H@("`@("`@("`@("`@("`@("`@("`@("`@("`J+PH@("`@
M("`@("`@("`@("`@("`@("`@("`@("!I9B`H96YT<GDM/FQE9G1#:&%R(#X@
M,"`F)B!E;G1R>2T^<V-R965N0V]L(#T](#$I"B`@("`@("`@("`@("`@("`@
M("`@("`@("`@('L*("`@("`@("`@("`@("`@("`@("`@("`@("`@("`@:68@
M*&EN9F],96YG=&@@/"!E;G1R>2T^9FEE;&17:61T:"TQ*0H@("`@("`@("`@
M("`@("`@("`@("`@("`@("`@("!["B`@("`@("`@("`@("`@("`@("`@("`@
M("`@("`@("`@(&5N=')Y+3YL969T0VAA<B`](#`["B`@("`@("`@("`@("`@
M("`@("`@("`@("`@("`@("`@(&5N=')Y+3YS8W)E96Y#;VP@/2!I;F9O3&5N
M9W1H.PH@("`@("`@("`@("`@("`@("`@("`@("`@("`@("!]"B`@("`@("`@
M("`@("`@("`@("`@("`@("`@("`@(&5L<V4*("`@("`@("`@("`@("`@("`@
M("`@("`@("`@("`@>PH@("`@("`@("`@("`@("`@("`@("`@("`@("`@("`@
M("!E;G1R>2T^;&5F=$-H87(@+3T@*&5N=')Y+3YF:65L9%=I9'1H+3,I.PH@
M("`@("`@("`@("`@("`@("`@("`@("`@("`@("`@("!E;G1R>2T^<V-R965N
M0V]L(#T@96YT<GDM/F9I96QD5VED=&@M,CL*("`@("`@("`@("`@("`@("`@
M("`@("`@("`@("`@?0H@("`@("`@("`@("`@("`@("`@("`@("`@("!]"B`@
M(`H@("`@("`@("`@("`@("`@("`@("`@("`@("\J(%5P9&%T92!T:&4@=VED
M9V5T+@D)"0DJ+PH@("`@("`@("`@("`@("`@("`@("`@("`@(&1R87=#1$M%
M;G1R>49I96QD("AE;G1R>2D["B`@("`@("`@("`@("`@("`@("`@("`@?0H@
M("`@("`@("`@("`@("`@("`@("`@(&5L<V4*("`@("`@("`@("`@("`@("`@
M("`@("!["B`@("`@("`@("`@("`@("`@("`@("`@("`@0F5E<"@I.PH@("`@
M("`@("`@("`@("`@("`@("`@('T*("`@("`@("`@("`@("`@("`@("!]"B`@
M("`@("`@("`@("`@("`@?0H@("`@("`@("`@("`@("`@(&)R96%K.PH@("`@
M("`*("`@("`@("`@("`@8V%S92!#1$M?3D585"`Z(&-A<V4@2T597T530R`Z
M"B`@("`@("`@("`@("`@("`@<F5T=7)N($=%<V-A<&5(:70["B`@("`@("`@
M("`@("`@("`@8G)E86L["@H@("`@("`@("`@("!C87-E($-$2U]%4D%312`Z
M"B`@("`@("`@("`@("`@("`@:68@*"AI;G0I<W1R;&5N*&5N=')Y+3YI;F9O
M*2`A/2`P*0H@("`@("`@("`@("`@("`@('L*("`@("`@("`@("`@("`@("`@
M("!C;&5A;D-H87(@*&5N=')Y+3YI;F9O+"!E;G1R>2T^;6%X*S$L("=<,"<I
M.PH@("`@("`@("`@("`@("`@("`@(&5N=')Y+3YS8W)E96Y#;VP@/2`P.PH@
M("`@("`@("`@("`@("`@("`@(&5N=')Y+3YL969T0VAA<B`](#`["B`@("`@
M("`@("`@("`@("`@("`@9')A=T-$2T5N=')Y1FEE;&0@*&5N=')Y*3L*("`@
M("`@("`@("`@("`@("!]"B`@("`@("`@("`@("`@("`@8G)E86L["@H@("`@
M("`@("`@("!C87-E($-$2U]#550Z"B`@("`@("`@("`@("`@("`@:68@*"AI
M;G0I<W1R;&5N*&5N=')Y+3YI;F9O*2`A/2`P*0H@("`@("`@("`@("`@("`@
M('L*"2`@("`@("`@("`@(&9R965#:&%R("A'4&%S=&5"=69F97(I.PH@("`@
M("`@("`@("`@("`@("`@($=087-T94)U9F9E<B`](&-O<'E#:&%R("AE;G1R
M>2T^:6YF;RD["B`@("`@("`@("`@("`@("`@("`@8VQE86Y#:&%R("AE;G1R
M>2T^:6YF;RP@96YT<GDM/FUA>"LQ+"`G7#`G*3L*("`@("`@("`@("`@("`@
M("`@("!E;G1R>2T^<V-R965N0V]L(#T@,#L*("`@("`@("`@("`@("`@("`@
M("!E;G1R>2T^;&5F=$-H87(@/2`P.PH@("`@("`@("`@("`@("`@("`@(&1R
M87=#1$M%;G1R>49I96QD("AE;G1R>2D["B`@("`@("`@("`@("`@("`@?0H@
M("`@("`@("`@("`@("`@(&5L<V4*("`@("`@("`@("`@("`@("!["B`@("`@
M("`@("`@("`@("`@("`@0F5E<"@I.PH@("`@("`@("`@("`@("`@('T*("`@
M("`@("`@("`@("`@("!B<F5A:SL*"B`@("`@("`@("`@(&-A<V4@0T1+7T-/
M4%DZ"B`@("`@("`@("`@("`@("`@:68@*"AI;G0I<W1R;&5N*&5N=')Y+3YI
M;F9O*2`A/2`P*0H@("`@("`@("`@("`@("`@('L*"2`@("`@("`@("`@(&9R
M965#:&%R("A'4&%S=&5"=69F97(I.PH@("`@("`@("`@("`@("`@("`@($=0
M87-T94)U9F9E<B`](&-O<'E#:&%R("AE;G1R>2T^:6YF;RD["B`@("`@("`@
M("`@("`@("`@?0H@("`@("`@("`@("`@("`@(&5L<V4*("`@("`@("`@("`@
M("`@("!["B`@("`@("`@("`@("`@("`@("`@0F5E<"@I.PH@("`@("`@("`@
M("`@("`@('T*("`@("`@("`@("`@("`@("!B<F5A:SL*"B`@("`@("`@("`@
M(&-A<V4@0T1+7U!!4U1%.@H@("`@("`@("`@("`@("`@(&EF("A'4&%S=&5"
M=69F97(@(3T@*&-H87(@*BE.54Q,*0H@("`@("`@("`@("`@("`@('L*("`@
M("`@("`@("`@("`@("`@("!C;&5A;D-H87(@*&5N=')Y+3YI;F9O+"!E;G1R
M>2T^;6%X*S$L("=<,"<I.PH@("`@("`@("`@("`@("`@("`@(&5N=')Y+3YI
M;F9O(#T@8V]P>4-H87(@*$=087-T94)U9F9E<BD["B`@("`@("`@("`@("`@
M("`@("`@96YT<GDM/G-C<F5E;D-O;"`](#`["B`@("`@("`@("`@("`@("`@
M("`@96YT<GDM/FQE9G1#:&%R(#T@,#L*("`@("`@("`@("`@("`@("`@("!D
M<F%W0T1+16YT<GE&:65L9"`H96YT<GDI.PH@("`@("`@("`@("`@("`@('T*
M("`@("`@("`@("`@("`@("!E;'-E"B`@("`@("`@("`@("`@("`@>PH@("`@
M("`@("`@("`@("`@("`@($)E97`H*3L*("`@("`@("`@("`@("`@("!]"B`@
M("`@("`@("`@("`@("`@8G)E86L["@H@("`@("`@("`@("!C87-E($M%65]2
M15154DX@.B!C87-E($M%65]404(@.@H@("`@("`@("`@("`@("`@(&EF("@H
M:6YT*7-T<FQE;B`H96YT<GDM/FEN9F\I(#X](&5N=')Y+3YM:6XI"B`@("`@
M("`@("`@("`@("`@>PH@("`@("`@("`@("`@("`@("`@(')E='5R;B`H96YT
M<GDM/FEN9F\I.PH@("`@("`@("`@("`@("`@('T*("`@("`@("`@("`@("`@
M("!E;'-E"B`@("`@("`@("`@("`@("`@>PH@("`@("`@("`@("`@("`@("`@
M($)E97`H*3L*("`@("`@("`@("`@("`@("!]"B`@("`@("`@("`@("`@("`@
M8G)E86L["B`@("`@(`H@("`@("`@("`@("!C87-E($-$2U]2149215-((#H*
M("`@("`@("`@("`@("`@("!R969R97-H0T1+4V-R965N("AE;G1R>2T^<V-R
M965N*3L*("`@("`@("`@("`@("`@("!B<F5A:SL*("`@("`@"B`@("`@("`@
M("`@(&1E9F%U;'0@.@H@("`@("`@("`@("`@("`@("@H14Y44EE#0BEE;G1R
M>2T^8V%L;&)A8VMF;BDH96YT<GDL(&EN<'5T*3L*("`@("`@("`@("`@("`@
M("!B<F5A:SL*("`@("`@("`@?0H@("`@("!]"@H@("`@("`O*B!3:&]U;&0@
M=V4@9&\@82!P;W-T+7!R;V-E<W,_"0D)"0DJ+PH@("`@("!I9B`H96YT<GDM
M/G!O<W10<F]C97-S1G5N8W1I;VX@(3T@*%!23T-%4U-&3BE.54Q,*0H@("`@
M("!["B`@("`@("`@("@H4%)/0T534T9.*2AE;G1R>2T^<&]S=%!R;V-E<W-&
M=6YC=&EO;BDI("AV14Y44EDL(&5N=')Y+"!E;G1R>2T^<&]S=%!R;V-E<W-$
M871A+"!I;G!U="D["B`@("`@('T*("`@?0H@("!R971U<FX@1T5A<FQY17AI
M=#L*?0H*+RH*("H@5&AI<R!I<R!A(&=E;F5R:6,@8VAA<F%C=&5R('!A<G-E
M<B!F;W(@=&AE(&5N=')Y(&9I96QD+B!)="!I<R!U<V5D(&%S(&$@"B`J(&-A
M;&QB86-K(&9U;F-T:6]N+"!S;R!A;GD@<&5R<V]N86P@;6]D:69I8V%T:6]N
M<R!C86X@8F4@;6%D92!B>2!C<F5A=&EN9PH@*B!A(&YE=R!F=6YC=&EO;B!A
M;F0@8V%L;&EN9R!T:&4@86-T:79A=&EO;B!W:71H(&ET<R!N86UE+@H@*B\*
M=F]I9"!#1$M%;G1R>4-A;&Q"86-K("A#1$M%3E1262`J96YT<GDL(&-H='EP
M92!C:&%R86-T97(I"GL*("`@+RH@1&5C;&%R92!L;V-A;"!V87)I86)L97,N
M"0D)"0D)*B\*("`@8VAA<@EP;&%I;F-H87(@/2`H8VAA<F%C=&5R("8@05]#
M2$%25$585"D["B`@(&EN="!T96UP+"!X.PH*("`@+RH@4W1A<G0@8VAE8VMI
M;F<@=&AE(&EN<'5T+@D)"0D)"2HO"B`@(&EF("AE;G1R>2T^9&ES<%1Y<&4@
M/3T@=DE.5"`F)B`A:7-D:6=I="AP;&%I;F-H87(I*0H@("!["B`@("`@($)E
M97`H*3L*("`@?0H@("!E;'-E(&EF("@H96YT<GDM/F1I<W!4>7!E(#T]('9#
M2$%2('Q\(%P*"0EE;G1R>2T^9&ES<%1Y<&4@/3T@=E5#2$%2('Q\(%P*"0EE
M;G1R>2T^9&ES<%1Y<&4@/3T@=DQ#2$%2('Q\(%P*"0EE;G1R>2T^9&ES<%1Y
M<&4@/3T@=E5(0TA!4B!\?"!<"@D)96YT<GDM/F1I<W!4>7!E(#T]('9,2$-(
M05(I("8F(%P*"0EI<V1I9VET*'!L86EN8VAA<BDI"B`@('L*("`@("`@0F5E
M<"@I.PH@("!]"B`@(&5L<V4@:68@*&5N=')Y+3YD:7-P5'EP92`]/2!V5DE%
M5T].3%DI"B`@('L*("`@("`@0F5E<"@I.PH@("!]"B`@(&5L<V4@"B`@('L*
M("`@("`@:68@*"AI;G0I<W1R;&5N("AE;G1R>2T^:6YF;RD@/3T@96YT<GDM
M/FUA>"D*("`@("`@>PH@("`@("`@("!"965P*"D["B`@("`@('T*("`@("`@
M96QS90H@("`@("!["B`@("`@("`@("\J(%=E('=I;&P@;6%K92!A;GD@861J
M=7-T;65N=',@=&\@=&AE(&-A<V4@;V8@=&AE(&-H87)A8W1E<BX)*B\*("`@
M("`@("`@:68@*"AE;G1R>2T^9&ES<%1Y<&4@/3T@=E5#2$%2('Q\(%P*"0EE
M;G1R>2T^9&ES<%1Y<&4@/3T@=E5(0TA!4B!\?"!<"@D)96YT<GDM/F1I<W!4
M>7!E(#T]('9534E8140@?'P@7`H)"65N=')Y+3YD:7-P5'EP92`]/2!V54A-
M25A%1"D@(%P*"0DF)B`A:7-D:6=I="AP;&%I;F-H87(I*0H@("`@("`@("![
M"B`@("`@("`@("`@('!L86EN8VAA<B`]('1O=7!P97(@*'!L86EN8VAA<BD[
M"B`@("`@("`@('T*("`@("`@("`@96QS92!I9B`H*&5N=')Y+3YD:7-P5'EP
M92`]/2!V3$-(05(@?'P@7`H)"0EE;G1R>2T^9&ES<%1Y<&4@/3T@=DQ(0TA!
M4B!\?"!<"@D)"65N=')Y+3YD:7-P5'EP92`]/2!V3$U)6$5$('Q\(%P*"0D)
M96YT<GDM/F1I<W!4>7!E(#T]('9,2$U)6$5$*2`F)B!<"@D)"2%I<V1I9VET
M*'!L86EN8VAA<BDI"B`@("`@("`@('L*("`@("`@("`@("`@<&QA:6YC:&%R
M(#T@=&]L;W=E<B`H<&QA:6YC:&%R*3L*("`@("`@("`@?0H*("`@("`@("`@
M+RH@57!D871E('1H92!S8W)E96X@86YD('!O:6YT97(N"0D)"2HO"B`@("`@
M("`@(&EF("AE;G1R>2T^<V-R965N0V]L("$](&5N=')Y+3YF:65L9%=I9'1H
M+3$I"B`@("`@("`@('L*("`@("`@("`@("`@+RH@57!D871E('1H92!C:&%R
M86-T97(@<&]I;G1E<BX)"0D)*B\*("`@("`@("`@("`@=&5M<"`]("AI;G0I
M<W1R;&5N("AE;G1R>2T^:6YF;RD["B`@("`@("`@("`@(&9O<B`H>#UT96UP
M.R!X(#X@96YT<GDM/G-C<F5E;D-O;"ME;G1R>2T^;&5F=$-H87([('@M+2D*
M("`@("`@("`@("`@>PH@("`@("`@("`@("`@("!E;G1R>2T^:6YF;UMX72`]
M(&5N=')Y+3YI;F9O6W@M,5T["B`@("`@("`@("`@('T*("`@("`@("`@("`@
M96YT<GDM/FEN9F];96YT<GDM/G-C<F5E;D-O;"ME;G1R>2T^;&5F=$-H87)=
M(#T@<&QA:6YC:&%R.PH@("`@("`@("`@("!E;G1R>2T^<V-R965N0V]L*RL[
M"B`@("`@("`@('T*("`@("`@("`@96QS90H@("`@("`@("!["B`@("`@("`@
M("`@("\J(%5P9&%T92!T:&4@8VAA<F%C=&5R('!O:6YT97(N"0D)"2HO"B`@
M("`@("`@("`@('1E;7`@/2`H:6YT*7-T<FQE;B`H96YT<GDM/FEN9F\I.PH@
M("`@("`@("`@("!E;G1R>2T^:6YF;UMT96UP70D]('!L86EN8VAA<CL*("`@
M("`@("`@("`@96YT<GDM/FEN9F];=&5M<"LQ70D]("=<,"<["B`@("`@("`@
M('T*"B`@("`@("`@("\J(%5P9&%T92!T:&4@;&5F=$-H87(@=F%L=64N"0D)
M"0DJ+PH@("`@("`@("!T96UP(#T@*&EN="ES=')L96X@*&5N=')Y+3YI;F9O
M*3L*("`@("`@("`@96YT<GDM/FQE9G1#:&%R(#T@*'1E;7`@/"!E;G1R>2T^
M9FEE;&17:61T:"`_(#`@.B!T96UP+65N=')Y+3YF:65L9%=I9'1H*3L*"B`@
M("`@("`@("\J(%5P9&%T92!T:&4@96YT<GD@9FEE;&0N"0D)"0DJ+PH@("`@
M("`@("!D<F%W0T1+16YT<GE&:65L9"`H96YT<GDI.PH@("`@("!]"B`@('T*
M?0H*+RH*("H@5&AI<R!E<F%S97,@=&AE(&EN9F]R;6%T:6]N(&EN('1H92!E
M;G1R>2!F:65L9`H@*B!A;F0@<F5D<F%W<R!A(&-L96%N(&%N9"!E;7!T>2!E
M;G1R>2!F:65L9"X*("HO"G9O:60@8VQE86Y#1$M%;G1R>2`H0T1+14Y44ED@
M*F5N=')Y*0I["B`@("\J($1E8VQA<F4@;&]C86P@=F%R:6%B;&5S+@D)"0D)
M"2HO"B`@(&EN="!W:61T:"`](&5N=')Y+3YF:65L9%=I9'1H.PH@("!I;G0@
M>#L*"B`@("\J($5R87-E('1H92!I;F9O<FUA=&EO;B!I;B!T:&4@8VAA<F%C
M=&5R('!O:6YT97(N"0D)*B\*("`@8VQE86Y#:&%R("AE;G1R>2T^:6YF;RP@
M96YT<GDM/FEN9F]7:61T:"P@)UPP)RD["@H@("`O*B!#;&5A;B!T:&4@96YT
M<GD@<V-R965N(&9I96QD+@D)"0D)*B\*("`@9F]R("AX/3`[('@@/"!W:61T
M:#L@>"LK*0H@("!["B`@("`@(&UV=V%D9&-H("AE;G1R>2T^9FEE;&0L(#`L
M('@L(&5N=')Y+3YF:6QL97(I.PH@("!]"@H@("`O*B!297-E="!S;VUE('9A
M<FEA8FQE<RX)"0D)"0DJ+PH@("!E;G1R>2T^<V-R965N0V]L(#T@,#L*("`@
M96YT<GDM/FQE9G1#:&%R(#T@,#L*"B`@("\J(%)E9G)E<V@@=&AE(&5N=')Y
M(&9I96QD+@D)"0D)"2HO"B`@('=R969R97-H("AE;G1R>2T^9FEE;&0I.PI]
M"@HO*@H@*B!4:&ES(&1R87=S('1H92!E;G1R>2!F:65L9"X*("HO"G9O:60@
M9')A=T-$2T5N=')Y("A#1$M%3E1262`J96YT<GDL(&)O;VQE86X@0F]X*0I[
M"B`@("\J($5R87-E('1H92!E;G1R>2!W:61G970@9G)O;2!T:&4@<V-R965N
M+@D)"0DJ+PH@("!E<F%S94-$2T5N=')Y("AE;G1R>2D["@H@("`O*B!$:60@
M=V4@87-K(&9O<B!A('-H861O=S\_/PD)"0D)*B\*("`@:68@*&5N=')Y+3YS
M:&%D;W<I"B`@('L*("`@("`@9')A=U-H861O=R`H96YT<GDM/G-H861O=U=I
M;BD["B`@('T*"B`@("\J($)O>"!T:&4@=VED9V5T(&EF(&%S:V5D+@D)"0D)
M"2HO"B`@(&EF("A";W@I"B`@('L*("`@("`@8F]X("AE;G1R>2T^=VEN+"!!
M0U-?5DQ)3D4L($%#4U](3$E.12D["B`@("`@('=R969R97-H("AE;G1R>2T^
M=VEN*3L*("`@?0H*("`@+RH@1')A=R!I;B!T:&4@;&%B96P@=&\@=&AE('=I
M9&=E="X)"0D)"2HO"B`@('=R:71E0VAT>7!E("AE;G1R>2T^;&%B96Q7:6XL
M(#`L(#`L(&5N=')Y+3YL86)E;"P@2$]225I/3E1!3"P@,"P@96YT<GDM/FQA
M8F5L3&5N*3L*("`@=W)E9G)E<V@@*&5N=')Y+3YL86)E;%=I;BD["@H@("`O
M*B!2961R87<@=&AE(&5N=')Y(&9I96QD+@D)"0D)"2HO"B`@(&1R87=#1$M%
M;G1R>49I96QD("AE;G1R>2D["GT*"B\J"B`J(%1H:7,@<F5D<F%W<R!T:&4@
M96YT<GD@9FEE;&0N"B`J+PIV;VED(&1R87=#1$M%;G1R>49I96QD("A#1$M%
M3E1262`J96YT<GDI"GL*("`@+RH@1&5C;&%R92!V87)I86)L97,N"0D)"0D)
M*B\*("`@:6YT(&EN9F],96YG=&@@/2`P.PH@("!I;G0@>"`](#`["@H@("`O
M*B!$<F%W(&EN('1H92!F:6QL97(@8VAA<F%C=&5R<RX)"0D)"2HO"B`@(&9O
M<B`H>#TP.R!X(#P@96YT<GDM/F9I96QD5VED=&@[('@K*RD*("`@>PH@("`@
M("!M=G=A9&1C:"`H96YT<GDM/F9I96QD+"`P+"!X+"!E;G1R>2T^9FEL;&5R
M*3L*("`@?0H@("`*("`@+RH@268@=&AE<F4@:7,@:6YF;W)M871I;VX@:6X@
M=&AE(&9I96QD+B!4:&5N(&1R87<@:70@:6XN"0DJ+PH@("!I9B`H96YT<GDM
M/FEN9F\@(3T@*&-H87(@*BD@3E5,3"D*("`@>PH@("`@("!I;F9O3&5N9W1H
M(#T@*&EN="ES=')L96X@*&5N=')Y+3YI;F9O*3L*"B`@("`@("\J(%)E9')A
M=R!T:&4@9FEE;&0N"0D)"0D)*B\*("`@("`@:68@*&5N=')Y+3YD:7-P5'EP
M92`]/2!V2$E.5"!\?"!<"@D)96YT<GDM/F1I<W!4>7!E(#T]('9(0TA!4B!\
M?"!<"@D)96YT<GDM/F1I<W!4>7!E(#T]('9(34E8140@?'P@7`H)"65N=')Y
M+3YD:7-P5'EP92`]/2!V54A#2$%2('Q\(%P*"0EE;G1R>2T^9&ES<%1Y<&4@
M/3T@=DQ(0TA!4B!\?"!<"@D)96YT<GDM/F1I<W!4>7!E(#T]('952$U)6$5$
M('Q\(%P*"0EE;G1R>2T^9&ES<%1Y<&4@/3T@=DQ(34E8140I"B`@("`@('L*
M("`@("`@("`@9F]R("AX/65N=')Y+3YL969T0VAA<CL@>"`\(&EN9F],96YG
M=&@[('@K*RD*("`@("`@("`@>PH@("`@("`@("`@("!M=G=A9&1C:"`H96YT
M<GDM/F9I96QD+"`P+"!X+65N=')Y+3YL969T0VAA<BP@96YT<GDM/F9I;&QE
M<BD["B`@("`@("`@('T*("`@("`@?0H@("`@("!E;'-E"B`@("`@('L*("`@
M("`@("`@9F]R("AX/65N=')Y+3YL969T0VAA<CL@>"`\(&EN9F],96YG=&@[
M('@K*RD*("`@("`@("`@>PH@("`@("`@("`@("!M=G=A9&1C:"`H96YT<GDM
M/F9I96QD+"`P+"!X+65N=')Y+3YL969T0VAA<BP@96YT<GDM/FEN9F];>%TI
M.PH@("`@("`@("!]"B`@("`@('T*("`@("`@=VUO=F4@*&5N=')Y+3YF:65L
M9"P@,"P@96YT<GDM/G-C<F5E;D-O;"D["@H@("`@("`O*B!2969R97-H('1H
M92!F:65L9"X)"0D)"0DJ+PH@("`@("!W<F5F<F5S:"`H96YT<GDM/F9I96QD
M*3L*("`@?0I]"@HO*@H@*B!4:&ES(&5R87-E<R!A;B!E;G1R>2!W:61G970@
M9G)O;2!T:&4@<V-R965N+@H@*B\*=F]I9"!E<F%S94-$2T5N=')Y("A#1$M%
M3E1262`J96YT<GDI"GL*("`@=V5R87-E("AE;G1R>2T^9FEE;&0I.PH@("!W
M97)A<V4@*&5N=')Y+3YL86)E;%=I;BD["B`@('=E<F%S92`H96YT<GDM/G=I
M;BD["B`@('=R969R97-H("AE;G1R>2T^=VEN*3L*("`*("`@+RH@1&\@=V4@
M=V%N="!T;R!E<F%S92!T:&4@<VAA9&]W+@D)"0D)*B\*("`@:68@*&5N=')Y
M+3YS:&%D;W<I"B`@('L*("`@("`@=V5R87-E("AE;G1R>2T^<VAA9&]W5VEN
M*3L*("`@("`@=W)E9G)E<V@@*&5N=')Y+3YS:&%D;W=7:6XI.PH@("!]"GT*
M"B\J"B`J(%1H:7,@9&5S=')O>7,@86X@96YT<GD@=VED9V5T+@H@*B\*=F]I
M9"!D97-T<F]Y0T1+16YT<GD@*$-$2T5.5%)9("IE;G1R>2D*>PH@("`O*B!%
M<F%S92!T:&4@;V)J96-T+@D)"0D)"0DJ+PH@("!E<F%S94-$2T5N=')Y("AE
M;G1R>2D["@H@("`O*B!#;&5A<B!O=70@=&AE(&-H87)A8W1E<B!P;VEN=&5R
M<RX)"0D)"2HO"B`@(&9R965#:'1Y<&4@*&5N=')Y+3YL86)E;"D["B`@(&9R
M965#:&%R("AE;G1R>2T^:6YF;RD["@H@("`O*B!$96QE=&4@=&AE('=I;F1O
M=W,N"0D)"0D)*B\*("`@9&5L=VEN("AE;G1R>2T^=VEN*3L*("`@9&5L=VEN
M("AE;G1R>2T^9FEE;&0I.PH@("!D96QW:6X@*&5N=')Y+3YL86)E;%=I;BD[
M"B`@(&EF("AE;G1R>2T^<VAA9&]W*0H@("!["B`@("`@(&1E;'=I;B`H96YT
M<GDM/G-H861O=U=I;BD["B`@('T*"B`@("\J(%5N<F5G:7-T97(@=&AI<R!O
M8FIE8W0N"0D)"0D)*B\*("`@=6YR96=I<W1E<D-$2T]B:F5C="`H=D5.5%)9
M+"!E;G1R>2D["@H@("`O*B!&:6YI<V@@8VQE86YI;F<@=7`N"0D)"0D)*B\*
M("`@9G)E92`H96YT<GDI.PI]"@HO*@H@*B!4:&ES(')E;6]V97,@=&AE(&]L
M9"!I;F9O<FUA=&EO;B!I;B!T:&4@96YT<GD@9FEE;&0@86YD(&ME97!S('1H
M90H@*B!N97<@:6YF;W)M871I;VX@9VEV96XN"B`J+PIV;VED('-E=$-$2T5N
M=')Y("A#1$M%3E1262`J96YT<GDL(&-H87(@*FYE=U9A;'5E+"!I;G0@;6EN
M+"!I;G0@;6%X+"!B;V]L96%N(&)O>"D*>PH@("`O*B!$96-L87)E(&QO8V%L
M('9A<FEA8FQE<RX)"0D)"0DJ+PH@("!I;G0@8V]P>6-H87)S"3T@,#L*"B`@
M("\J($ME97`@=&AE(&EN="!V86QU97,@<&%S<V5D(&EN+@D)"0D)*B\*("`@
M96YT<GDM/FUI;@D)/2!M:6X["B`@(&5N=')Y+3YM87@)"3T@;6%X.PH@("!E
M;G1R>2T^8F]X"0D](&)O>#L*"B`@("\J($EF('1H92!P;VEN=&5R('-E;G0@
M:6X@:7,@=&AE('-A;64@<&]I;G1E<B!A<R!B969O<F4L(&1O(&YO=&AI;F<N
M"2HO"B`@(&EF("AE;G1R>2T^:6YF;R`]/2!N97=686QU92D*("`@>PH@("`@
M("!R971U<FX["B`@('T*"B`@("\J($IU<W0@=&\@8F4@<W5R92P@:68@;&5T
M<R!M86ME('-U<F4@=&AE(&YE=R!V86QU92!I<VXG="!.54Q,+@DJ+PH@("!I
M9B`H;F5W5F%L=64@/3T@*&-H87(@*BE.54Q,*0H@("![(`H@("`@("`O*B!4
M:&5N('=E('=A;G0@=&\@:G5S="!E<F%S92!T:&4@;VQD('9A;'5E+@D)"2HO
M"B`@("`@(&-L96%N0VAA<B`H96YT<GDM/FEN9F\L(&5N=')Y+3YI;F9O5VED
M=&@L("=<,"<I.PH@("`@("!R971U<FX["B`@('T*"B`@("\J($1E=&5R;6EN
M92!H;W<@;6%N>2!C:&%R86-T97)S('=E(&YE960@=&\@8V]P>2X)"0DJ+PH@
M("!C;W!Y8VAA<G,)/2!-24X@*"AI;G0I<W1R;&5N*&YE=U9A;'5E*2P@96YT
M<GDM/FUA>"D["@H@("`O*B!/2RP@97)A<V4@=&AE(&]L9"!V86QU92P@86YD
M(&-O<'D@:6X@=&AE(&YE=R!V86QU92X)"2HO"B`@(&-L96%N0VAA<B`H96YT
M<GDM/FEN9F\L(&5N=')Y+3YM87@L("=<,"<I.PH@("!S=')N8W!Y("AE;G1R
M>2T^:6YF;RP@;F5W5F%L=64L(&-O<'EC:&%R<RD["GT*"B\J"B`J(%1H:7,@
M<V5T<R!T:&4@96YT<GD@9FEE;&0@8V%L;&)A8VL@9G5N8W1I;VXN"B`J+PIV
M;VED('-E=$-$2T5N=')Y0T(@*$-$2T5.5%)9("IE;G1R>2P@14Y44EE#0B!C
M86QL8F%C:RD*>PH@("!E;G1R>2T^8V%L;&)A8VMF;B`]("AV;VED("HI8V%L
M;&)A8VL["GT*"B\J"B`J(%1H:7,@9G5N8W1I;VX@<V5T<R!T:&4@<')E+7!R
M;V-E<W,@9G5N8W1I;VXN"B`J+PIV;VED('-E=$-$2T5N=')Y4')E4')O8V5S
M<R`H0T1+14Y44ED@*F5N=')Y+"!04D]#15-31DX@8V%L;&)A8VLL('9O:60@
M*F1A=&$I"GL*("`@96YT<GDM/G!R95!R;V-E<W-&=6YC=&EO;B`](&-A;&QB
M86-K.PH@("!E;G1R>2T^<')E4')O8V5S<T1A=&$@/2!D871A.PI]"@HO*@H@
M*B!4:&ES(&9U;F-T:6]N('-E=',@=&AE('!O<W0M<')O8V5S<R!F=6YC=&EO
M;BX*("HO"G9O:60@<V5T0T1+16YT<GE0;W-T4')O8V5S<R`H0T1+14Y44ED@
M*F5N=')Y+"!04D]#15-31DX@8V%L;&)A8VLL('9O:60@*F1A=&$I"GL*("`@
M96YT<GDM/G!O<W10<F]C97-S1G5N8W1I;VX@/2!C86QL8F%C:SL*("`@96YT
><GDM/G!O<W10<F]C97-S1&%T82`](&1A=&$["GT*
`
end
SHAR_EOF
  echo 'uudecoding file entry.c' &&
  uudecode _sharuue.tmp < _sharuue.tmp && rm -f _sharuue.tmp &&
  $shar_touch -am 0503190896 'entry.c' &&
  chmod 0444 'entry.c' ||
  echo 'restore of entry.c failed'
  shar_count="`wc -c < 'entry.c'`"
  test 19470 -eq "$shar_count" ||
    echo "entry.c: original size 19470, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/dialog_ex.c ==============
if test ! -d 'exam'; then
  echo 'x - creating directory exam'
  mkdir 'exam'
fi
if test -f 'exam/dialog_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/dialog_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/dialog_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/dialog_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="dialog_ex";
#endif
X
void main()
{
X   /* Declare variables.			*/
X   CDKSCREEN	*cdkscreen;
X   CDKDIALOG	*question;
X   WINDOW	*cursesWin;
X   char		*buttons[40];
X   char		*message[40];
X   char		temp[100];
X   int		selection;
X   int		x;
X
X   /* Set up CDK 				*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Start color.              		*/
X   initCDKColor();
X
X   /* Set up the dialog box.			*/
X   for (x=0; x < 20; x++)
X   {
X      sprintf (temp, "</U/3>%d<!3>", x); buttons[x] = copyChar (temp);
X   }
X
X   message[0]	= "<C></5>This is the message region.";
X   message[1]	= "<L></B>There can be almost any number";
X   message[2]	= "<R></U>of lines here as you wish.";
X   message[3]	= "<C></2>This example only displays four lines.";
X
X   /* Create the dialog box.			*/
X   question	= newCDKDialog (cdkscreen, CENTER, CENTER,
X				message, 4, buttons, 20, COLOR_PAIR(2)|A_REVERSE,
X				TRUE, TRUE, FALSE);
X
X   /* Check if we got a null value back.	*/
X   if (question == (CDKDIALOG *)NULL)
X   {
X      /* Clean up the memory.			*/
X      for (x=0; x < 20; x++)
X      {
X          free (buttons[x]);
X      }
X      destroyCDKScreen (cdkscreen);
X
X      /* End curses...				*/
X      endCDK();
X
X      /* Spit out a message.			*/
X      printf ("Oops. Can't seem to create the dialog box. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Activate the dialog box.			*/
X   selection	= activateCDKDialog (question, (chtype *)NULL);
X
X   /* Clean up					*/
X   destroyCDKDialog (question);
X   destroyCDKScreen (cdkscreen);
X   endCDK();
X
X   /* Destroy the memory the buttons use.	*/
X   for (x=0; x < 20; x++)
X   {
X       free (buttons[x]);
X   }
X   delwin (cursesWin);
X
X   /* Spit out the info				*/
X   printf ("\n\n\n");
X   printf ("Button Number Chosen: %d\n", selection);
X   exit (0);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/dialog_ex.c' &&
  chmod 0444 'exam/dialog_ex.c' ||
  echo 'restore of exam/dialog_ex.c failed'
  shar_count="`wc -c < 'exam/dialog_ex.c'`"
  test 1855 -eq "$shar_count" ||
    echo "exam/dialog_ex.c: original size 1855, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/entry_ex.c ==============
if test -f 'exam/entry_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/entry_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/entry_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/entry_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="entry_ex";
#endif
X
void main(int argc, char **argv)
{
X   /* Declare vars			*/
X   CDKSCREEN	*cdkscreen;
X   CDKENTRY	*directory;
X   WINDOW	*cursesWin;
X   char		*label;
X   char		*info;
X
X   /* Set up CDK 			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Start CDK colors.			*/
X   initCDKColor();
X
X   /* Declare the labels.		*/
X   label	= "</U/5>Directory:<!U!5>";
X   directory	= newCDKEntry (cdkscreen, CENTER, CENTER, LEFT,
X				label, A_NORMAL, '.', vMIXED, 
X				10, 0, 256, TRUE, FALSE);
X
X   /* Is the widget NULL??		*/
X   if (directory == (CDKENTRY *)NULL)
X   {
X      /* Clean up			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a little message.	*/
X      printf ("Oops. Can't seem to create the entry box. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Draw the CDK screen.		*/
X   refreshCDKScreen (cdkscreen);
X
X   /* Pass in what ever was given off of the command line.	*/
X   setCDKEntry (directory, argv[1], 0, 256, TRUE);
X
X   /* Activate the entry fields.	*/
X   info	= strdup(activateCDKEntry (directory, (chtype *)NULL));
X   
X   /* Clean up				*/
X   destroyCDKEntry (directory);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X  
X   /* Spit out what the user typed.	*/
X   printf ("info: %s\n", info);
X   free(info);
X   exit (0);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/entry_ex.c' &&
  chmod 0444 'exam/entry_ex.c' ||
  echo 'restore of exam/entry_ex.c failed'
  shar_count="`wc -c < 'exam/entry_ex.c'`"
  test 1386 -eq "$shar_count" ||
    echo "exam/entry_ex.c: original size 1386, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/graph_ex.c ==============
if test -f 'exam/graph_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/graph_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/graph_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/graph_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="graph_ex";
#endif
X
void main()
{
X   /* Declare vars			*/
X   CDKSCREEN	*cdkscreen;
X   CDKGRAPH	*graph;
X   CDKLABEL	*pause;
X   WINDOW	*cursesWin;
X   char	*mesg[2], *title, *xtitle, *ytitle, *graphChars;
X   int values[20], colors[20];
X   int count;
X
X   /* Set up CDK			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Start CDK Colors			*/
X   initCDKColor();
X
X   /* Create the graph values.		*/
X   values[0]	= 10;	colors[0]	= 5;
X   values[1]	= 15;	colors[1]	= 5;
X   values[2]	= 20;	colors[2]	= 5;
X   values[3]	= 25;	colors[3]	= 5;
X   values[4]	= 30;	colors[4]	= 5;
X   values[5]	= 35;	colors[5]	= 5;
X   values[6]	= 40;	colors[6]	= 5;
X   values[7]	= 45;	colors[7]	= 5;
X   values[8]	= 50;	colors[8]	= 5;
X   values[9]	= 55;	colors[9]	= 5;
X   count	= 10;
X   title	= "<C>Test Graph";
X   xtitle	= "<C>X AXIS TITLE";
X   ytitle	= "<C>Y AXIS TITLE";
X   graphChars	= "0123456789";
X  
X   /* Create the label values.		*/
X   mesg[0]	= "Press Any Key When Done Viewing The Graph.";
X
X   /* Create the graph widget		*/
X   graph = newCDKGraph (cdkscreen, CENTER, CENTER, 10, 20, 
X			title, xtitle, ytitle);
X
X   /* Is the graph NULL???		*/
X   if (graph == (CDKGRAPH *)NULL)
X   {
X      /* Shut down CDK.			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.	*/
X      printf ("Oops. Can not make the graph widget. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Create the label widget.		*/
X   pause = newCDKLabel (cdkscreen, CENTER, BOTTOM, mesg, 1, TRUE, FALSE);
X   if (pause == (CDKLABEL *)NULL)
X   {
X      /* Shut down CDK.			*/
X      destroyCDKGraph (graph);
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.	*/
X      printf ("Oops. Can not make the label widget. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Set the graph values.		*/
X   setCDKGraph (graph, values, count, graphChars, FALSE, vPLOT);
X
X   /* Draw the screen.			*/
X   refreshCDKScreen (cdkscreen);
X   drawCDKGraph (graph, BOX);
X   drawCDKLabel (pause, BOX);
X
X   /* Pause until the user says so...	*/
X   waitCDKLabel (pause, (char)NULL);
X
X   /* Clean up.                         */
X   destroyCDKGraph (graph);
X   destroyCDKLabel (pause);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X   exit (0);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/graph_ex.c' &&
  chmod 0444 'exam/graph_ex.c' ||
  echo 'restore of exam/graph_ex.c failed'
  shar_count="`wc -c < 'exam/graph_ex.c'`"
  test 2363 -eq "$shar_count" ||
    echo "exam/graph_ex.c: original size 2363, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/fselect_ex.c ==============
if test -f 'exam/fselect_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/fselect_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/fselect_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/fselect_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="fselect_ex";
#endif
X
#define	MAXINFOLINES	10000
X
void main(int argc, char **argv)
{
X   /* Declare variables.					*/
X   CDKSCREEN	*cdkscreen;
X   CDKVIEWER	*example;
X   CDKFSELECT	*fileSelector;
X   WINDOW	*cursesWin;
X   char		*filename;
X   char		*info[MAXINFOLINES];
X   char		*button[25];
X   char		title[500];
X   int		selected;
X   int		lines;
X   int		x;
X
X   /* Create the viewer buttons.				*/
X   button[0]	= "</5><OK><!5>";
X   button[1]	= "</5><Maybe><!5>";
X   button[2]	= "</5><Maybe Not><!5>";
X   button[3]	= "</5><Cancel><!5>";
X
X   /* Set up CDK 						*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Start color.						*/
X   initCDKColor();
X
X   /* Get the filename.						*/
X   fileSelector = newCDKFselect (cdkscreen, CENTER, CENTER, 20, 55,
X			A_NORMAL, '.', COLOR_PAIR(48)|A_REVERSE,
X			"</5>", "</48>", "</N>", "</N>",
X			TRUE, FALSE);
X 
X   /* Activate the file selector.				*/
X   filename = activateCDKFselect (fileSelector);
X
X   /* Check if the value was NULL.				*/
X   if (filename == (char *)NULL)
X   {
X      /* Exit CDK.						*/
X      destroyCDKFselect (fileSelector);
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.				*/
X      printf ("No file selected.\n");
X      exit (0);
X   }
X
X   /* Create the viewer.					*/
X   example = newCDKViewer (cdkscreen,
X		CENTER, CENTER, 20, COLS-1,
X		button, 4, A_REVERSE, TRUE, FALSE);
X
X   /* Is the viewer pointer NULL??				*/
X   if (example == (CDKVIEWER *)NULL)
X   {
X      /* Exit CDK.						*/
X      destroyCDKFselect (fileSelector);
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.				*/
X      printf ("Oops. Can't seem to create viewer. Is the window too small?\n");
X      exit (0);
X   }
X
X   /* Set up the info.						*/
X   lines = readFile (filename, info, MAXINFOLINES);
X   if (lines == 0)
X   {
X      printf ("Could not open %s\n", filename);
X      exit (1);
X   }
X
X   /* Make it run...						*/
X   sprintf (title, "<C></B/21>Filename:<!21></22>%20s<!22!B>", filename);
X   setCDKViewer (example, title, info, lines, A_REVERSE, TRUE, TRUE);
X   selected = activateCDKViewer (example);
X
X   /* Clean up.							*/
X   destroyCDKViewer (example);
X   destroyCDKFselect (fileSelector);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X   for (x=0; x < lines; x++)
X   {
X      freeChar (info[x]);
X   }
X
X   /* Spit out some info.					*/
X   printf ("\n\n\n\n");
X   printf ("You picked button %d\n", selected);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/fselect_ex.c' &&
  chmod 0444 'exam/fselect_ex.c' ||
  echo 'restore of exam/fselect_ex.c failed'
  shar_count="`wc -c < 'exam/fselect_ex.c'`"
  test 2544 -eq "$shar_count" ||
    echo "exam/fselect_ex.c: original size 2544, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/histogram_ex.c ==============
if test -f 'exam/histogram_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/histogram_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/histogram_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/histogram_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="histogram_ex";
#endif
X
void main()
{
X   /* Declare vars			*/
X   CDKSCREEN	*cdkscreen;
X   CDKHISTOGRAM	*volume;
X   CDKHISTOGRAM	*bass;
X   CDKHISTOGRAM	*treble;
X   WINDOW	*cursesWin;
X   char *volumeLabel, *bassLabel, *trebleLabel;
X
X   /* Set up CDK 			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Start CDK Color			*/
X   initCDKColor();
X
X   /* Set up the histogram labels.	*/
X   volumeLabel	= "</5>Volume<!5>";
X   bassLabel	= "</5>Bass  <!5>";
X   trebleLabel	= "</5>Treble<!5>";
X
X   /* Create the histogram objects.	*/
X   volume = newCDKHistogram (cdkscreen, 10, 10, LEFT, 1, 20, 
X		HORIZONTAL, volumeLabel, TRUE, FALSE);
X   if (volume == (CDKHISTOGRAM *)NULL)
X   {
X      /* Exit CDK.			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X      
X      /* Print out a message and exit.	*/
X      printf ("Oops. Can not make volume histogram. Is the window big enough??\n");
X      exit (1);
X   }
X
X   bass = newCDKHistogram (cdkscreen, 10, 12, LEFT, 1, 20, 
X		HORIZONTAL, bassLabel, TRUE, FALSE);
X   if (bass == (CDKHISTOGRAM *)NULL)
X   {
X      /* Exit CDK.			*/
X      destroyCDKHistogram (volume);
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.	*/
X      printf ("Oops. Can not make bass histogram. Is the window big enough??\n");
X      exit (1);
X   }
X
X   treble = newCDKHistogram (cdkscreen, 10, 14, LEFT, 1, 20, 
X		HORIZONTAL, trebleLabel, TRUE, FALSE);
X   if (treble == (CDKHISTOGRAM *)NULL)
X   {
X      /* Exit CDK.			*/
X      destroyCDKHistogram (volume);
X      destroyCDKHistogram (bass);
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.	*/
X      printf ("Oops. Can not make treble histogram. Is the window big enough??\n");
X      exit (1);
X   }
X
X   /* Set the histogram values.		*/
X   setCDKHistogram (volume, vPERCENT, CENTER, A_BOLD, 0, 10, 6, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (bass  , vPERCENT, CENTER, A_BOLD, 0, 10, 3, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (treble, vPERCENT, CENTER, A_BOLD, 0, 10, 7, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   refreshCDKScreen (cdkscreen);
X   sleep (4);
X
X   /* Set the histogram values.		*/
X   setCDKHistogram (volume, vPERCENT, CENTER, A_BOLD, 0, 10, 8, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (bass  , vPERCENT, CENTER, A_BOLD, 0, 10, 1, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (treble, vPERCENT, CENTER, A_BOLD, 0, 10, 9, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   refreshCDKScreen (cdkscreen);
X   sleep (4);
X
X   /* Set the histogram values.		*/
X   setCDKHistogram (volume, vPERCENT, CENTER, A_BOLD, 0, 10, 10, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (bass  , vPERCENT, CENTER, A_BOLD, 0, 10, 7, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (treble, vPERCENT, CENTER, A_BOLD, 0, 10, 10, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   refreshCDKScreen (cdkscreen);
X   sleep (4);
X
X   /* Set the histogram values.		*/
X   setCDKHistogram (volume, vPERCENT, CENTER, A_BOLD, 0, 10, 1, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (bass  , vPERCENT, CENTER, A_BOLD, 0, 10, 8, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (treble, vPERCENT, CENTER, A_BOLD, 0, 10, 3, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   refreshCDKScreen (cdkscreen);
X   sleep (4);
X
X   /* Set the histogram values.		*/
X   setCDKHistogram (volume, vPERCENT, CENTER, A_BOLD, 0, 10, 3, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (bass  , vPERCENT, CENTER, A_BOLD, 0, 10, 3, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (treble, vPERCENT, CENTER, A_BOLD, 0, 10, 3, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   refreshCDKScreen (cdkscreen);
X   sleep (4);
X
X   /* Clean up.				*/
X   destroyCDKHistogram (volume);
X   destroyCDKHistogram (bass);
X   destroyCDKHistogram (treble);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X   exit (0);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/histogram_ex.c' &&
  chmod 0444 'exam/histogram_ex.c' ||
  echo 'restore of exam/histogram_ex.c failed'
  shar_count="`wc -c < 'exam/histogram_ex.c'`"
  test 3940 -eq "$shar_count" ||
    echo "exam/histogram_ex.c: original size 3940, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/itemlist_ex.c ==============
if test -f 'exam/itemlist_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/itemlist_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/itemlist_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/itemlist_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="itemlist_ex";
#endif
X
void main()
{
X   /* Declare vars			*/
X   CDKSCREEN	*cdkscreen;
X   CDKITEMLIST	*monthlist;
X   WINDOW	*cursesWin;
X   chtype	*rawChtype;
X   char		*label, *info[MAXITEMS], *rawChoice;
X   int		choice, junk1, junk2;
X
X   /* Set up CDK 			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Start CDK colors.			*/
X   initCDKColor();
X
X   /* Create the choice list.		*/
X   info[0]	= "<C></5>January";
X   info[1]	= "<C></5>Feburary";
X   info[2]	= "<C></5>March";
X   info[3]	= "<C></5>April";
X   info[4]	= "<C></5>May";
X   info[5]	= "<C></5>June";
X   info[6]	= "<C></5>July";
X   info[7]	= "<C></5>August";
X   info[8]	= "<C></5>September";
X   info[9]	= "<C></5>October";
X   info[10]	= "<C></5>November";
X   info[11]	= "<C></5>December";
X
X   /* Declare the labels.		*/
X   label	= "</U/5>Pick a Month:<!U!5>";
X   monthlist	= newCDKItemlist (cdkscreen, CENTER, CENTER, LEFT,
X					label, info, 12, 5, TRUE, FALSE);
X
X   /* Is the widget NULL??		*/
X   if (monthlist == (CDKITEMLIST *)NULL)
X   {
X      /* Clean up			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a little message.	*/
X      printf ("Oops. Can't seem to create the entry box. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Draw the CDK screen.		*/
X   refreshCDKScreen (cdkscreen);
X
X   /* Activate the widget.		*/
X   choice = activateCDKItemlist (monthlist, (chtype *)NULL);
X
X   /* Transform the char * --> chtype --> char *	*/
X   rawChtype = char2Chtype (info[choice], &junk1, &junk2);
X   rawChoice = chtype2Char (rawChtype);
X
X   /* Clean up.				*/
X   destroyCDKItemlist (monthlist);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X 
X   /* Spit out what the user typed.	*/
X   printf ("You picked choice #%d which is %s\n", choice, rawChoice);
X   exit (0);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/itemlist_ex.c' &&
  chmod 0444 'exam/itemlist_ex.c' ||
  echo 'restore of exam/itemlist_ex.c failed'
  shar_count="`wc -c < 'exam/itemlist_ex.c'`"
  test 1871 -eq "$shar_count" ||
    echo "exam/itemlist_ex.c: original size 1871, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/label_ex.c ==============
if test -f 'exam/label_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/label_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/label_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/label_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="label_ex";
#endif
X
void main()
{
X   /* Declare variables.	*/
X   CDKSCREEN	*cdkscreen;
X   CDKLABEL	*demo;
X   WINDOW 	*cursesWin;
X   char		*mesg[4];
X
X   /* Set up CDK 		*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Start CDK Colors		*/
X   initCDKColor();
X
X   /* Set the labels up.	*/
X   mesg[0] = "</1/B>This line should have a yellow foreground and a blue background.";
X   mesg[1] = "</2/B>This line should have a white  foreground and a blue background.";
X   mesg[2] = "</3/B>This line should have a yellow foreground and a red  background.";
X   mesg[3] = "<C>This line should be set to whatever the screen default is.";
X
X   /* Declare the labels.	*/
X   demo	= newCDKLabel (cdkscreen, CENTER, CENTER, mesg, 4, TRUE, TRUE);
X
X   /* Is the label NULL???	*/
X   if (demo == (CDKLABEL *)NULL)
X   {
X      /* Clean up the memory.	*/
X      destroyCDKScreen (cdkscreen);
X
X      /* End curses...		*/
X      endCDK();
X
X      /* Spit out a message.	*/
X      printf ("Oops. Can't seem to create the label. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Draw the CDK screen.	*/
X   refreshCDKScreen (cdkscreen);
X   waitCDKLabel (demo, ' ');
X
X   /* Clean up			*/
X   destroyCDKLabel (demo);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X   exit (0);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/label_ex.c' &&
  chmod 0444 'exam/label_ex.c' ||
  echo 'restore of exam/label_ex.c failed'
  shar_count="`wc -c < 'exam/label_ex.c'`"
  test 1359 -eq "$shar_count" ||
    echo "exam/label_ex.c: original size 1359, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/marquee_ex.c ==============
if test -f 'exam/marquee_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/marquee_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/marquee_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/marquee_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="marquee_ex";
#endif
X
void main(int argc, char **argv)
{
X   /* Declare vars			*/
X   CDKSCREEN	*cdkscreen;
X   CDKMARQUEE	*scrollMessage;
X   WINDOW	*cursesWin;
X   char 	message[400];
X   int delay	= 5;
X   int repeat	= 3;
X
X   /* Check the command line.		*/
X   if (argc <= 1)
X   {
X      fprintf (stderr, "Usage: %s Message\n", argv[0]);
X      exit (1);
X   }
X
X   /* Set up CDK			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Start CDK Colors			*/
X   initCDKColor();
X
X   /* Create the marquee.		*/
X   scrollMessage = newCDKMarquee (cdkscreen, CENTER, TOP, 30, FALSE);
X
X   /* Check if the marquee is NULL.	*/
X   if (scrollMessage == (CDKMARQUEE *)NULL)
X   {
X      /* Exit Cdk.			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message.		*/
X      printf ("Oops. Can't seem to create the marquee window. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Draw the CDK screen.		*/
X   refreshCDKScreen (cdkscreen);
X
X   /* Run the marquee.			*/
X   sprintf (message, "</B/U>%s<!B!U></K>This should be blinking...<!K> ", argv[1]);
X   activateCDKMarquee (scrollMessage, message, delay, repeat, TRUE);
X
X   /* Clean up.				*/
X   destroyCDKMarquee (scrollMessage);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X   exit (0);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/marquee_ex.c' &&
  chmod 0444 'exam/marquee_ex.c' ||
  echo 'restore of exam/marquee_ex.c failed'
  shar_count="`wc -c < 'exam/marquee_ex.c'`"
  test 1357 -eq "$shar_count" ||
    echo "exam/marquee_ex.c: original size 1357, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/matrix_ex.c ==============
if test -f 'exam/matrix_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/matrix_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/matrix_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/matrix_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="matrix_ex";
#endif
X
void main()
{
X   /* Declare vars	*/
X   CDKSCREEN	*cdkscreen;
X   CDKMATRIX	*courseList;
X   WINDOW	*cursesWin;
X   int		colwidth[10];
X   int		colvalue[10];
X   char		*coltitle[10];
X   char		*rowtitle[10];
X
X   int rows = 8;
X   int cols = 5;
X   int vrows = 3;
X   int vcols = 5;
X   int x, y;
X
X   /* Set up CDK */ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Start CDK Colors.		*/
X   initCDKColor();
X
X   /* Set up the matrix	*/
X   coltitle[1] = "</B/5>Course";   colwidth[1] = 7 ; colvalue[1] = vUMIXED;
X   coltitle[2] = "</B/44>Lec 1";   colwidth[2] = 7 ; colvalue[2] = vUMIXED;
X   coltitle[3] = "</B/44>Lec 2";   colwidth[3] = 7 ; colvalue[3] = vUMIXED;
X   coltitle[4] = "</B/44>Lec 3";   colwidth[4] = 7 ; colvalue[4] = vUMIXED;
X   coltitle[5] = "</B/7>Flag";     colwidth[5] = 1 ; colvalue[5] = vUMIXED;
X   rowtitle[1] = "</B/6>Course 1"; rowtitle[2] = "<C></B/6>Course 2";
X   rowtitle[3] = "</B/6>Course 3"; rowtitle[4] = "<L></B/6>Course 4";
X   rowtitle[5] = "</B/6>Course 5"; rowtitle[6] = "<R></B/6>Course 6"; 
X   rowtitle[7] = "</B/6>Course 7"; rowtitle[8] = "<R></B/6>Course 8"; 
X
X   /* Create the matrix object.	*/
X   courseList = newCDKMatrix (cdkscreen,
X				CENTER, CENTER,
X				rows, cols, vrows, vcols,
X				rowtitle, coltitle,
X				colwidth, colvalue, 
X				1, 1, '.',
X				COL, TRUE, TRUE, TRUE);
X
X   /* Check to see if the matrix is NULL.	*/
X   if (courseList == (CDKMATRIX *)NULL)
X   {
X      /* Clean up.				*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X 
X      /* Print out a little message.		*/
X      printf ("Oops. Can't seem to create the entry box. Is the window too small ?\n");
X      exit (1);
X   }
X
X   /* Activate the matrix.	*/
X   activateCDKMatrix (courseList, (chtype *)NULL);
X
X   /* Spit out the info.	*/
X   printf ("\n\n\n");
X   for (x=1; x <= rows; x++)
X   {
X      for (y=1; y <= cols; y++)
X      {
X         printf ("(%d,%d) = '%s'\t", x, y, courseList->info[x][y]);
X      }
X      printf ("\n");
X   }
X
X   /* Clean up.			*/
X   destroyCDKMatrix (courseList);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X   exit (0);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/matrix_ex.c' &&
  chmod 0444 'exam/matrix_ex.c' ||
  echo 'restore of exam/matrix_ex.c failed'
  shar_count="`wc -c < 'exam/matrix_ex.c'`"
  test 2180 -eq "$shar_count" ||
    echo "exam/matrix_ex.c: original size 2180, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/mentry_ex.c ==============
if test -f 'exam/mentry_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/mentry_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/mentry_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/mentry_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="mentry_ex";
#endif
X
void main(int argc, char **argv)
{
X   /* Declare variables.	*/
X   CDKSCREEN	*cdkscreen;
X   CDKMENTRY	*filename;
X   WINDOW	*cursesWin;
X   char		*info;
X   char		*label	= "</5>Filename:<!5>";
X
X   /* Set up CDK 		*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Start CDK Colors.		*/
X   initCDKColor();
X
X   /* Set up the multi-line entry field.	*/
X   filename	= newCDKMentry (cdkscreen, CENTER, CENTER, LEFT,
X			label, A_BOLD, '.', vMIXED,
X			20, 5, 20, 0, TRUE, FALSE);
X
X   /* Is the object NULL?	*/
X   if (filename == (CDKMENTRY *)NULL)
X   {
X      /* Shut down CDK.		*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message.	*/
X      printf ("Oops. Can not create CDK object. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Draw the CDK screen.	*/
X   refreshCDKScreen (cdkscreen);
X
X   /* Set what ever was given from the command line.	*/
X   setCDKMentry (filename, argv[1], 0, TRUE);
X
X   /* Activate this thing.	*/
X   activateCDKMentry (filename, (chtype *)NULL);
X   info	= strdup (filename->info);
X
X   /* Clean up.	*/
X   destroyCDKMentry (filename);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X
X   /* Spit out the results.	*/
X   printf ("\n\n\n");
X   printf ("Filename : <%s>\n", info);
X   free(info);
X   exit (0);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/mentry_ex.c' &&
  chmod 0444 'exam/mentry_ex.c' ||
  echo 'restore of exam/mentry_ex.c failed'
  shar_count="`wc -c < 'exam/mentry_ex.c'`"
  test 1388 -eq "$shar_count" ||
    echo "exam/mentry_ex.c: original size 1388, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/menu_ex.c ==============
if test -f 'exam/menu_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/menu_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/menu_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/menu_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="menu_ex";
#endif
X
void main()
{
X   /* Declare vars		*/
X   CDKSCREEN	*cdkscreen;
X   CDKMENU	*exampleMenu;
X   WINDOW	*cursesWin;
X   int		submenusize[3], menuloc[4];
X   int		selection;
X   char		*menulist[MAXMENUITEMS][MAXSUBITEMS];
X   int x, y;
X
X   /* Set up CDK 		*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Start CDK color.		*/
X   initCDKColor();
X
X   /* Set up the menu.		*/
X   menulist[0][0] = "</5>File" ; menulist[1][0] = "</5>Edit";  menulist[2][0] = "</5>Help";
X   menulist[0][1] = "</5>Save" ; menulist[1][1] = "</5>Cut  "; menulist[2][1] = "</5>On Edit ";
X   menulist[0][2] = "</5>Exit" ; menulist[1][2] = "</5>Copy "; menulist[2][2] = "</5>On File ";
X                                 menulist[1][3] = "</5>Paste"; menulist[2][3] = "</5>About...";
X   submenusize[0] = 3;	menuloc[0] = LEFT;
X   submenusize[1] = 4;	menuloc[1] = LEFT;
X   submenusize[2] = 4;	menuloc[2] = RIGHT;
X
X   /* Create the menu.		*/
X   exampleMenu = newCDKMenu (cdkscreen, menulist, 3, submenusize, menuloc, 
X				TOP, COLOR_PAIR(9), COLOR_PAIR(44));
X   
X   /* Draw the CDK screen.	*/
X   refreshCDKScreen (cdkscreen);
X    
X   /* Activate the menu		*/
X   selection	= activateCDKMenu (exampleMenu, (chtype *)NULL);
X
X   /* Clean up.	*/
X   destroyCDKMenu (exampleMenu);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X
X   /* Print out the results.	*/
X   if (selection == -1) 
X   {
X      printf ("\n\n\n");
X      printf ("Item Number Selected : %d\n", selection);
X      printf ("This means you escaped without selecting anything.\n");
X   }
X   else
X   {
X      printf ("\n\n\n");
X      printf ("Item Number Selected : %d\n", selection);
X   }
X   exit (0);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/menu_ex.c' &&
  chmod 0444 'exam/menu_ex.c' ||
  echo 'restore of exam/menu_ex.c failed'
  shar_count="`wc -c < 'exam/menu_ex.c'`"
  test 1740 -eq "$shar_count" ||
    echo "exam/menu_ex.c: original size 1740, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/radio_ex.c ==============
if test -f 'exam/radio_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/radio_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/radio_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/radio_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="radio_ex";
#endif
X
void main()
{
X   /* Declare vars			*/
X   CDKSCREEN	*cdkscreen;
X   CDKRADIO	*radioTest;
X   WINDOW	*cursesWin;
X   char		*item[30], *title;
X   char		temp[100];
X   int		selection;
X
X   /* Set up CDK 			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Set up CDK Colors.		*/
X   initCDKColor();
X
X   /* Set up the scrolling list		*/
X   sprintf (temp, "This is item #0"); item[0] = copyChar (temp);
X   sprintf (temp, "This is item #1"); item[1] = copyChar (temp);
X   sprintf (temp, "This is item #2"); item[2] = copyChar (temp);
X   sprintf (temp, "This is item #3"); item[3] = copyChar (temp);
X   sprintf (temp, "This is item #4"); item[4] = copyChar (temp);
X   sprintf (temp, "This is item #5"); item[5] = copyChar (temp);
X   sprintf (temp, "This is item #6"); item[6] = copyChar (temp);
X   sprintf (temp, "This is item #7"); item[7] = copyChar (temp);
X   sprintf (temp, "This is item #8"); item[8] = copyChar (temp);
X   sprintf (temp, "This is item #9"); item[9] = copyChar (temp);
X
X   /* Create the scrolling list		*/
X   title	= "<C></5>Radio List<!5>";
X   radioTest	= newCDKRadio (cdkscreen, CENTER, CENTER, 10, 20, title,
X				item, 10, '#'|A_REVERSE, 1,
X				A_REVERSE, TRUE, FALSE);
X
X   /* Check if the radio list is NULL.	*/
X   if (radioTest == (CDKRADIO *)NULL)
X   {
X      /* Exit CDK.			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.	*/
X      printf ("Ooops. Can't seem to create the raiod widget. Is the window too small??\n");
X      exit (1);
X   }
X
X   /* Activate the radio list.		*/
X   selection	= activateCDKRadio (radioTest, (chtype *)NULL);
X
X   /* Clean up.				*/
X   destroyCDKRadio (radioTest);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X
X   /* Spit out the info.		*/
X   printf ("\n\n\n");
X   printf ("Selection Number: %d\n", selection);
X   exit (0);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/radio_ex.c' &&
  chmod 0444 'exam/radio_ex.c' ||
  echo 'restore of exam/radio_ex.c failed'
  shar_count="`wc -c < 'exam/radio_ex.c'`"
  test 1942 -eq "$shar_count" ||
    echo "exam/radio_ex.c: original size 1942, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/scale_ex.c ==============
if test -f 'exam/scale_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/scale_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/scale_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/scale_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="scale_ex";
#endif
X
void main()
{
X   /* Declare vars		*/
X   CDKSCREEN	*cdkscreen;
X   CDKSCALE	*testscale;
X   WINDOW	*cursesWin;
X   int		selection;
X   char *label;
X
X   /* Set up CDK		 */ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Start CDK Colors.		*/
X   initCDKColor();
X
X   /* Create the scale.		*/
X   label	= "</5>Scale Label:";
X   testscale	= newCDKScale (cdkscreen, CENTER, CENTER, CENTER, 
X			label, A_NORMAL, 5, 1, 1, 5, 1, 1, TRUE, FALSE);
X
X   /* Is the scale NULL?	*/
X   if (testscale == (CDKSCALE *)NULL)
X   {
X      /* Exit CDK.		*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X      
X      /* Print out a message.	*/
X      printf ("Oops. Can't make the scale widget. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Draw the CDK screen.	*/
X   refreshCDKScreen (cdkscreen);
X
X   /* Activate the scale.	*/
X   selection	= activateCDKScale (testscale, (chtype *)NULL);
X
X   /* Clean up.	*/
X   destroyCDKScale (testscale);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X
X   /* Spit out the info.	*/
X   printf ("\n\n\n");
X   printf ("Selection: %d\n", selection);
X   exit (0);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/scale_ex.c' &&
  chmod 0444 'exam/scale_ex.c' ||
  echo 'restore of exam/scale_ex.c failed'
  shar_count="`wc -c < 'exam/scale_ex.c'`"
  test 1209 -eq "$shar_count" ||
    echo "exam/scale_ex.c: original size 1209, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/scroll_ex.c ==============
if test -f 'exam/scroll_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/scroll_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/scroll_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/scroll_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="scroll_ex";
#endif
X
void main()
{
X   /* Declare vars			*/
X   CDKSCREEN	*cdkscreen;
X   CDKSCROLL	*testList;
X   WINDOW	*cursesWin;
X   char		*item[30], *title;
X   char		temp[100];
X   int		selection;
X
X   /* Set up CDK 			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Set up CDK Colors.		*/
X   initCDKColor();
X
X   /* Set up the scrolling list		*/
X   sprintf (temp, "This is item #0"); item[0] = copyChar (temp);
X   sprintf (temp, "This is item #1"); item[1] = copyChar (temp);
X   sprintf (temp, "This is item #2"); item[2] = copyChar (temp);
X   sprintf (temp, "This is item #3"); item[3] = copyChar (temp);
X   sprintf (temp, "This is item #4"); item[4] = copyChar (temp);
X   sprintf (temp, "This is item #5"); item[5] = copyChar (temp);
X   sprintf (temp, "This is item #6"); item[6] = copyChar (temp);
X   sprintf (temp, "This is item #7"); item[7] = copyChar (temp);
X   sprintf (temp, "This is item #8"); item[8] = copyChar (temp);
X   sprintf (temp, "This is item #9"); item[9] = copyChar (temp);
X
X   /* Create the scrolling list		*/
X   title	= "<C></5>Scrolling List<!5>";
X   testList	= newCDKScroll (cdkscreen, CENTER, CENTER, 10, 50, title,
X				item, 10, NONUMBERS, A_REVERSE, TRUE, FALSE);
X
X   /* Is the scrolling list NULL??	*/
X   if (testList == (CDKSCROLL *)NULL)
X   {
X      /* Exit CDK.			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X      
X      /* Print out a message and exit.	*/
X      printf ("Oops. Could not make scrolling list. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Activate the scrolling list.	*/
X   selection	= activateCDKScroll (testList, (chtype *)NULL);
X
X   /* Clean up.				*/
X   destroyCDKScroll (testList);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X
X   /* Spit out the info.		*/
X   printf ("\n\n\n");
X   printf ("Selection Number: %d\n", selection);
X   exit (0);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/scroll_ex.c' &&
  chmod 0444 'exam/scroll_ex.c' ||
  echo 'restore of exam/scroll_ex.c failed'
  shar_count="`wc -c < 'exam/scroll_ex.c'`"
  test 1931 -eq "$shar_count" ||
    echo "exam/scroll_ex.c: original size 1931, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/selection_ex.c ==============
if test -f 'exam/selection_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/selection_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/selection_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/selection_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="selection_ex";
#endif
X
void main()
{
X   /* Declare vars			*/
X   CDKSCREEN	*cdkscreen;
X   CDKSELECTION	*testSelection;
X   WINDOW	*cursesWin;
X   char		*item[30], *choices[5], *title;
X   char		temp[100];
X
X   /* Set up CDK 			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Set up CDK Colors.		*/
X   initCDKColor();
X
X   /* Set up the scrolling list		*/
X   sprintf (temp, "This is item #0"); item[0] = copyChar (temp);
X   sprintf (temp, "This is item #1"); item[1] = copyChar (temp);
X   sprintf (temp, "This is item #2"); item[2] = copyChar (temp);
X   sprintf (temp, "This is item #3"); item[3] = copyChar (temp);
X   sprintf (temp, "This is item #4"); item[4] = copyChar (temp);
X   sprintf (temp, "This is item #5"); item[5] = copyChar (temp);
X   sprintf (temp, "This is item #6"); item[6] = copyChar (temp);
X   sprintf (temp, "This is item #7"); item[7] = copyChar (temp);
X   sprintf (temp, "This is item #8"); item[8] = copyChar (temp);
X   sprintf (temp, "This is item #9"); item[9] = copyChar (temp);
X   sprintf (temp, "</5>Yes  "); choices[0]	= copyChar(temp);
X   sprintf (temp, "</2>No   "); choices[1]	= copyChar(temp);
X   sprintf (temp, "</B/4>Maybe"); choices[2]	= copyChar(temp);
X
X   /* Create the selection list		*/
X   title	= "<C></5>Selection List<!5>";
X   testSelection = newCDKSelection (cdkscreen, CENTER, CENTER, 
X					10, 50, title, item, 10, choices, 3,
X					A_REVERSE, TRUE, FALSE);
X
X   /* Is the selection list NULL??	*/
X   if (testSelection == (CDKSELECTION *)NULL)
X   {
X      /* Exit CDK.			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.	*/
X      printf ("Oops. Can;t seem to create the selection list. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Activate the selection list.	*/
X   activateCDKSelection (testSelection, (chtype *)NULL);
X
X   /* Clean up.				*/
X   destroyCDKSelection (testSelection);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X   exit (0);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/selection_ex.c' &&
  chmod 0444 'exam/selection_ex.c' ||
  echo 'restore of exam/selection_ex.c failed'
  shar_count="`wc -c < 'exam/selection_ex.c'`"
  test 2052 -eq "$shar_count" ||
    echo "exam/selection_ex.c: original size 2052, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/swindow_ex.c ==============
if test -f 'exam/swindow_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/swindow_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/swindow_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/swindow_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="swindow_ex";
#endif
X
void main()
{
X   /* Declare vars	*/
X   CDKSCREEN	*cdkscreen;
X   CDKSWINDOW	*testWindow;
X   WINDOW	*cursesWin;
X   char		*title, temp[100];
X   int		x;
X
X   /* Set up CDK 			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Start CDK colors			*/
X   initCDKColor();
X
X   /* Create the scrolling window	*/
X   title	= "<C></5>Error Log<!5>";
X   testWindow	= newCDKSwindow (cdkscreen, CENTER, CENTER, 6, 65,
X					title, 100, TRUE, FALSE);
X
X   /* Is the window NULL.		*/
X   if (testWindow == (CDKSWINDOW *)NULL)
X   {
X      /* Exit CDK.			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.	*/
X      printf ("Oops. Can not seem to create the scrolling window. Is the window too small??\n");
X      exit (1);
X   }
X
X   /* Load up the scrolling window.	*/
X   addCDKSwindow (testWindow, "<C></11>TOP: This is the first line.", BOTTOM);
X   addCDKSwindow (testWindow, "<C>Sleeping for 1 second.", BOTTOM);
X   sleep (1);
X
X   addCDKSwindow (testWindow, "<L></11>1: This is another line.", BOTTOM);
X   addCDKSwindow (testWindow, "<C>Sleeping for 1 second.", BOTTOM);
X   sleep (1);
X
X   addCDKSwindow (testWindow, "<C></11>2: This is another line.", BOTTOM);
X   addCDKSwindow (testWindow, "<C>Sleeping for 1 second.", BOTTOM);
X   sleep (1);
X
X   addCDKSwindow (testWindow, "<R></11>3: This is another line.", BOTTOM);
X   addCDKSwindow (testWindow, "<C>Sleeping for 1 second.", BOTTOM);
X   sleep (1);
X
X   addCDKSwindow (testWindow, "<C></11>4: This is another line.", BOTTOM);
X   addCDKSwindow (testWindow, "<C>Sleeping for 1 second.", BOTTOM);
X   sleep (1);
X
X   addCDKSwindow (testWindow, "<L></11>5: This is another line.", BOTTOM);
X   addCDKSwindow (testWindow, "<C>Sleeping for 1 second.", BOTTOM);
X   sleep (1);
X
X   addCDKSwindow (testWindow, "<C></11>6: This is another line.", BOTTOM);
X   addCDKSwindow (testWindow, "<C>Sleeping for 1 second.", BOTTOM);
X   sleep (1);
X
X   addCDKSwindow (testWindow, "<C>Done. You can now play.", BOTTOM);
X
X   addCDKSwindow (testWindow, "<C>This is being added to the top.", TOP);
X
X   /* Activate the scrolling window.	*/
X   activateCDKSwindow (testWindow, (chtype *)NULL);
X
X   /* Clean up.				*/
X   destroyCDKSwindow (testWindow);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X   exit (0);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/swindow_ex.c' &&
  chmod 0444 'exam/swindow_ex.c' ||
  echo 'restore of exam/swindow_ex.c failed'
  shar_count="`wc -c < 'exam/swindow_ex.c'`"
  test 2382 -eq "$shar_count" ||
    echo "exam/swindow_ex.c: original size 2382, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/template_ex.c ==============
if test -f 'exam/template_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/template_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/template_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/template_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="template_ex";
#endif
X
void main()
{
X   /* Declare variables.		*/
X   CDKSCREEN	*cdkscreen;
X   CDKTEMPLATE	*phoneNumber;
X   WINDOW	*cursesWin;
X   char		*info, *mixed;
X   char		*label		= "</5>Phone Number:<!5>";
X   char 	*overlay	= "</B/6>(___) ___-____<!6>";
X   char 	*plate		= "(###) ###-####";
X
X   /* Set up CDK 			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Start CDK Colors.			*/
X   initCDKColor();
X
X   /* Declare the template.		*/
X   phoneNumber	= newCDKTemplate (cdkscreen, CENTER, CENTER, LEFT, 
X					label, plate, overlay, TRUE, TRUE);
X
X   /* Is the template pointer NULL	*/
X   if (phoneNumber == (CDKTEMPLATE *)NULL)
X   {
X      /* Exit CDK.			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.	*/
X      printf ("Oops. Can;'t seem to create template. Is the window too small?");
X      exit (1);
X   }
X
X   /* Draw the CDK screen.		*/
X   refreshCDKScreen (cdkscreen);
X
X   /* Activate the template 		*/
X   activateCDKTemplate (phoneNumber, (chtype *)NULL);
X   info	= strdup (phoneNumber->info);
X   mixed = mixCDKTemplate (phoneNumber);
X   
X   /* Clean up.				*/
X   destroyCDKTemplate (phoneNumber);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X
X   /* Print out the info gathered...    */
X   printf ("\n\n\n");
X   printf ("Phone Number: %s Mixed: %s\n", info, mixed);
X   free (info); free (mixed);
X   exit (0);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/template_ex.c' &&
  chmod 0444 'exam/template_ex.c' ||
  echo 'restore of exam/template_ex.c failed'
  shar_count="`wc -c < 'exam/template_ex.c'`"
  test 1476 -eq "$shar_count" ||
    echo "exam/template_ex.c: original size 1476, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/viewer_ex.c ==============
if test -f 'exam/viewer_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/viewer_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/viewer_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/viewer_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="viewer_ex";
#endif
X
#define	MAXINFOLINES	10000
X
void main(int argc, char **argv)
{
X   /* Declare variables.			*/
X   CDKSCREEN	*cdkscreen;
X   CDKVIEWER	*example;
X   CDKFSELECT	*fileSelector;
X   WINDOW	*cursesWin;
X   char		*filename;
X   char		*info[MAXINFOLINES];
X   char		*button[25];
X   char		title[500];
X   int		selected;
X   int		lines;
X   int		x;
X
X   /* Create the viewer buttons.				*/
X   button[0]	= "</5><<OK>><!5>";
X   button[1]	= "</5><<Maybe>><!5>";
X   button[2]	= "</5><<Maybe Not>><!5>";
X   button[3]	= "</5><<Cancel>><!5>";
X
X   /* Set up CDK 						*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Start color.						*/
X   initCDKColor();
X
X   /* Get the filename.						*/
X   fileSelector = newCDKFselect (cdkscreen, CENTER, CENTER, 20, 55,
X			A_NORMAL, '.', COLOR_PAIR(48)|A_REVERSE,
X			"</5>", "</48>", "</N>", "</N>",
X			TRUE, FALSE);
X 
X   /* Activate the file selector.				*/
X   filename = activateCDKFselect (fileSelector);
X
X   /* Create the viewer.					*/
X   example = newCDKViewer (cdkscreen, CENTER, CENTER, 20, 70,
X				button, 1, A_REVERSE, TRUE, FALSE);
X
X   /* Is the viewer pointer NULL??				*/
X   if (example == (CDKVIEWER *)NULL)
X   {
X      /* Exit CDK.						*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.				*/
X      printf ("Oops. Can't seem to create viewer. Is the window too small?\n");
X      exit (0);
X   }
X
X   /* Set up the info.						*/
X   lines = readFile (filename, info, MAXINFOLINES);
X   if (lines == 0)
X   {
X      printf ("Could not open %s\n", filename);
X      exit (1);
X   }
X
X   /* Make it run...						*/
X   sprintf (title, "<C></B/21>Filename:<!21></22>%20s<!22!B>", filename);
X   setCDKViewer (example, title, info, lines,
X		COLOR_PAIR(21)|A_REVERSE, TRUE, TRUE);
X   selected = activateCDKViewer (example);
X
X   /* Clean up.							*/
X   destroyCDKViewer (example);
X   destroyCDKFselect (fileSelector);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X   for (x=0; x < lines; x++)
X   {
X      freeChar (info[x]);
X   }
X
X   /* Spit out some info.					*/
X   printf ("\n\n\n\n");
X   printf ("You picked button %d\n", selected);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/viewer_ex.c' &&
  chmod 0444 'exam/viewer_ex.c' ||
  echo 'restore of exam/viewer_ex.c failed'
  shar_count="`wc -c < 'exam/viewer_ex.c'`"
  test 2218 -eq "$shar_count" ||
    echo "exam/viewer_ex.c: original size 2218, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/subwindow_ex.c ==============
if test -f 'exam/subwindow_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/subwindow_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/subwindow_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/subwindow_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="subwindow_ex";
#endif
X
/*
X * This demo displays the ability to put widgets within a curses subwindow.
X */
X
void main()
{
X   /* Declare vars						*/
X   CDKSCREEN *cdkscreen;
X   CDKSCROLL *dowList;
X   CDKLABEL *title;
X   WINDOW *mainWindow, *subWindow;
X   char *dow[] = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
X   char *mesg[5];
X   int pick;
X
X   /* Start curses.						*/
X   mainWindow = initscr();
X
X   /* Create a basic window.					*/
X   subWindow = newwin (20, 40, 3, 3);
X  
X   /* Start Cdk.						*/
X   cdkscreen = initCDKScreen (subWindow);
X
X   /* Box our window.						*/
X   box (subWindow, ACS_VLINE, ACS_HLINE);
X   wrefresh (subWindow);
X
X   /* Create a basic scrolling list inside the window.		*/
X   dowList = newCDKScroll (cdkscreen, CENTER, CENTER, 10, 15,
X			"<C></U>Pick a Day", dow, 7, NONUMBERS,
X			A_REVERSE, TRUE, FALSE);
X
X   /* Put a title within the window.				*/
X   mesg[0] = "<C><#HL(30)>";
X   mesg[1] = "<C>This is a Cdk scrolling list";
X   mesg[2] = "<C>inside a curses window.";
X   mesg[3] = "<C><#HL(30)>";
X   title = newCDKLabel (cdkscreen, CENTER, TOP, mesg, 4, FALSE, FALSE);
X
X   /* Refresh the screen.					*/
X   refreshCDKScreen (cdkscreen);
X
X   /* Let the user play.					*/
X   pick = activateCDKScroll (dowList, NULL);
X
X   /* Clean up.							*/
X   destroyCDKScroll (dowList);
X   destroyCDKLabel (title);
X   werase (subWindow);
X   delwin (subWindow);
X   endCDK();
X
X   /* Tell them what they picked.				*/
X   printf ("You picked %s\n", dow[pick]);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/subwindow_ex.c' &&
  chmod 0444 'exam/subwindow_ex.c' ||
  echo 'restore of exam/subwindow_ex.c failed'
  shar_count="`wc -c < 'exam/subwindow_ex.c'`"
  test 1569 -eq "$shar_count" ||
    echo "exam/subwindow_ex.c: original size 1569, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/bind_ex.c ==============
if test -f 'exam/bind_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/bind_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/bind_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/bind_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="bind_ex";
#endif
X
void dialogHelpCB (EObjectType cdktype, void *object, void *clientData)
{
X   CDKDIALOG *dialog = (CDKDIALOG *)object;
X   char *mesg[5];
X
X   /* Check which button we are on.		*/
X   if (dialog->currentButton == 0)
X   {
X      mesg[0] = "<C></U>Help for </U>Who<!U>.";
X      mesg[1] = "<C>When this button is picked the name of the current";
X      mesg[2] = "<C>user is displayed on the screen in a popup window.";
X      popupMessage (dialog->screen, mesg, 3);
X   }
X   else if (dialog->currentButton == 1)
X   {
X      mesg[0] = "<C></U>Help for </U>Time<!U>.";
X      mesg[1] = "<C>When this button is picked the current time is";
X      mesg[2] = "<C>displayed on the screen in a popup window.";
X      popupMessage (dialog->screen, mesg, 3);
X   }
X   else if (dialog->currentButton == 2)
X   {
X      mesg[0] = "<C></U>Help for </U>Date<!U>.";
X      mesg[1] = "<C>When this button is picked the current date is";
X      mesg[2] = "<C>displayed on the screen in a popup window.";
X      popupMessage (dialog->screen, mesg, 3);
X   }
X   else if (dialog->currentButton == 3)
X   {
X      mesg[0] = "<C></U>Help for </U>Quit<!U>.";
X      mesg[1] = "<C>When this button is picked the dialog box is exited.";
X      popupMessage (dialog->screen, mesg, 2);
X   }
}
X
void main()
{
X   /* Declare variables.			*/
X   CDKSCREEN	*cdkscreen;
X   CDKDIALOG	*question;
X   WINDOW	*cursesWin;
X   char		*buttons[40];
X   char		*message[40], *info[5], *loginName;
X   char		temp[256];
X   int		selection;
X   int		x;
X   time_t	clck;
X   struct tm	*currentTime;
X
X   /* Set up CDK 				*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Start color.              		*/
X   initCDKColor();
X
X   /* Set up the dialog box.			*/
X   message[0] = "<C></U>Simple Command Interface";
X   message[1] = "Pick the command you wish to run.";
X   message[2] = "<C>Press </R>?<!R> for help.";
X   buttons[0] = "Who";
X   buttons[1] = "Time";
X   buttons[2] = "Date";
X   buttons[3] = "Quit";
X
X   /* Create the dialog box.			*/
X   question	= newCDKDialog (cdkscreen, CENTER, CENTER,
X				message, 3, buttons, 4, A_REVERSE,
X				TRUE, TRUE, FALSE);
X
X   /* Check if we got a null value back.	*/
X   if (question == (CDKDIALOG *)NULL)
X   {
X      destroyCDKScreen (cdkscreen);
X
X      /* End curses...				*/
X      endCDK();
X
X      /* Spit out a message.			*/
X      printf ("Oops. Can't seem to create the dialog box. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Create the key binding.			*/
X   bindCDKObject (vDIALOG, question, '?', dialogHelpCB, NULL);
X
X   /* Activate the dialog box.			*/
X   selection = 0;
X   while (selection != 3)
X   {
X      /* Get the users button selection.	*/
X      selection = activateCDKDialog (question, (chtype *)NULL);
X
X      /* Check the results.			*/
X      if (selection == 0)
X      {
X         /* Get the users login name.		*/
X         info[0] = "<C>     </U>Login Name<!U>     ";
X         loginName = getlogin();
X         if (loginName == (char *)NULL)
X         {
X            info[1] = "<C></R>Unknown";
X         }
X         else
X         {
X             sprintf (temp, "<C><%s>", loginName); info[1] = strdup (temp);
X         }
X         popupMessage (question->screen, info, 2);
X         free (info[1]);
X      }
X      else if (selection == 1)
X      {
X         /* Print out the time.			*/
X         time(&clck);
X         currentTime = localtime(&clck);
X         sprintf (temp, "<C>%d:%d:%d", currentTime->tm_hour,
X					currentTime->tm_min,
X					currentTime->tm_sec);
X         info[0] = "<C>   </U>Current Time<!U>   ";
X         info[1] = strdup (temp);
X         popupMessage (question->screen, info, 2);
X         free (info[1]);
X      }
X      else if (selection == 2)
X      {
X         /* Print out the date.			*/
X         time(&clck);
X         currentTime = localtime(&clck);
X         sprintf (temp, "<C>%d/%d/%d", currentTime->tm_mday,
X					currentTime->tm_mon,
X					currentTime->tm_year);
X         info[0] = "<C>   </U>Current Date<!U>   ";
X         info[1] = strdup (temp);
X         popupMessage (question->screen, info, 2);
X         free (info[1]);
X      }
X   }
X
X   /* Clean up					*/
X   destroyCDKDialog (question);
X   destroyCDKScreen (cdkscreen);
X   endCDK();
X   delwin (cursesWin);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/bind_ex.c' &&
  chmod 0444 'exam/bind_ex.c' ||
  echo 'restore of exam/bind_ex.c failed'
  shar_count="`wc -c < 'exam/bind_ex.c'`"
  test 4262 -eq "$shar_count" ||
    echo "exam/bind_ex.c: original size 4262, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/hello_ex.c ==============
if test -f 'exam/hello_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/hello_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/hello_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/hello_ex.c' &&
#include "cdk.h"
X
#ifdef XCURSES
char *XCursesProgramName="hello_ex";
#endif
X
void main()
{
X   /* Declare variables.	*/
X   CDKSCREEN	*cdkscreen;
X   CDKLABEL	*demo;
X   WINDOW 	*cursesWin;
X   char		*mesg[4];
X
X   /* Set up CDK 		*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Start CDK Colors		*/
X   initCDKColor();
X
X   /* Set the labels up.	*/
X   mesg[0] = "                               ";
X   mesg[1] = "<C>Hello World!";
X   mesg[2] = "                               ";
X
X   /* Declare the labels.	*/
X   demo	= newCDKLabel (cdkscreen, CENTER, CENTER, mesg, 3, TRUE, TRUE);
X
X   /* Is the label NULL???	*/
X   if (demo == (CDKLABEL *)NULL)
X   {
X      /* Clean up the memory.	*/
X      destroyCDKScreen (cdkscreen);
X
X      /* End curses...		*/
X      endCDK();
X
X      /* Spit out a message.	*/
X      printf ("Oops. Can't seem to create the label. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Draw the CDK screen.	*/
X   refreshCDKScreen (cdkscreen);
X   waitCDKLabel (demo, ' ');
X
X   /* Clean up			*/
X   destroyCDKLabel (demo);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X   exit (0);
}
SHAR_EOF
  $shar_touch -am 0503190996 'exam/hello_ex.c' &&
  chmod 0444 'exam/hello_ex.c' ||
  echo 'restore of exam/hello_ex.c failed'
  shar_count="`wc -c < 'exam/hello_ex.c'`"
  test 1148 -eq "$shar_count" ||
    echo "exam/hello_ex.c: original size 1148, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= exam/Makefile.examples ==============
if test -f 'exam/Makefile.examples' && test X"$1" != X"-c"; then
  echo 'x - skipping exam/Makefile.examples (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting exam/Makefile.examples (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'exam/Makefile.examples' &&
default:
X	@for i in $(CDKEXAMBIN); do \
X	   echo "$(CC) $(CFLAGS) -o $$i $${i}_ex.c $(INCPATH) -I.. $(LIBPATH) -L.. -lcdk $(LINKLIB)"; \
X	   $(CC) $(CFLAGS) -o $$i $${i}_ex.c $(INCPATH) -I.. $(LIBPATH) -L.. -lcdk $(LINKLIB); \
X	done
X
clean:
X	rm -f *.o core $(CDKEXAMBIN)
SHAR_EOF
  $shar_touch -am 0503190996 'exam/Makefile.examples' &&
  chmod 0444 'exam/Makefile.examples' ||
  echo 'restore of exam/Makefile.examples failed'
  shar_count="`wc -c < 'exam/Makefile.examples'`"
  test 271 -eq "$shar_count" ||
    echo "exam/Makefile.examples: original size 271, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= fselect.c ==============
if test -f 'fselect.c' && test X"$1" != X"-c"; then
  echo 'x - skipping fselect.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting fselect.c (binary)'
  sed 's/^X//' << 'SHAR_EOF' > _sharuue.tmp &&
begin 600 fselect.c
M(VEN8VQU9&4@(F-D:RYH(@H@"B\J"B`J("1!=71H;W(Z(&UI:V5G("0*("H@
M)$1A=&4Z(#$Y.38O,#0O,34@,3@Z,C`Z-#D@)`H@*B`D4F5V:7-I;VXZ(#$N
M,S,@)`H@*B\*(`HO*B!$96-L87)E(&QO8V%L(&9U;F-T:6]N('!R;W1O='EP
M97,N"0D)"0DJ+PIV;VED(&=E=$1I<D-O;G1E;G1S("A#1$M&4T5,14-4("IF
M<V5L96-T*3L*=F]I9"!D:7-P;&%Y1FEL96EN9F\@*$5/8FIE8W14>7!E(&]B
M:F5C=%1Y<&4L('9O:60@*F]B:F5C="P@=F]I9"`J8VQI96YT1&%T82D["G9O
M:60@9V5T1&ER3F%M92`H14]B:F5C=%1Y<&4@;V)J96-T5'EP92P@=F]I9"`J
M;V)J96-T+"!V;VED("IC;&EE;G1$871A*3L*"B\J"B`J(%1H:7,@8W)E871E
M<R!A(&9I;&4@<V5L96-T:6]N('=I9&=E="X*("HO"D-$2T9314Q%0U0@*FYE
M=T-$2T9S96QE8W0@*$-$2U-#4D5%3B`J8V1K<V-R965N+"!I;G0@>'!L86-E
M+"!I;G0@>7!L86-E+"!I;G0@:&5I9VAT+"!I;G0@=VED=&@L(&-H='EP92!F
M:65L9$%T=')I8G5T92P@8VAT>7!E(&9I;&QE<D-H87(L(&-H='EP92!H:6=H
M;&EG:'0L(&-H87(@*F1!='1R:6)U=&4L(&-H87(@*F9!='1R:6)U=&4L(&-H
M87(@*FQ!='1R:6)U=&4L(&-H87(@*G-!='1R:6)U=&4L(&)O;VQE86X@8F]X
M+"!B;V]L96%N('-H861O=RD*>PH@("\J(%-E="!U<"!S;VUE('9A<FEA8FQE
M<RX@("`@("`@("`@("`@("`@("`@("`@("`@("`@("`@("`@("`@("`@("`@
M("HO"B`@($-$2T9314Q%0U0@*F9S96QE8W0)/2`H0T1+1E-%3$5#5"`J*6UA
M;&QO8R`H<VEZ96]F("A#1$M&4T5,14-4*2D["B`@(&EN="!B;WA7:61T:`D)
M/2!W:61T:#L*("`@:6YT(&)O>$AE:6=H=`D](&AE:6=H=#L*("`@:6YT('AP
M;W,)"3T@>'!L86-E.PH@("!I;G0@>7!O<PD)/2!Y<&QA8V4["B`@(&EN="!E
M;G1R>5=I9'1H+"!X.PH*("`@+RH@4F5J=7-T:69Y('1H92!X(&%N9"!Y('!O
M<VET:6]N<R!I9B!W92!N965D('1O+@D)"2HO"B`@(&%L:6=N>'D@*&-D:W-C
M<F5E;BT^=VEN9&]W+"`F>'!O<RP@)GEP;W,L(&)O>%=I9'1H+"!B;WA(96EG
M:'0I.PH*("`@+RH@4V5T('1H92!H96EG:'0@86YD('=I9'1H('9A;'5E<RX)
M"0D)"2HO"B`@(&)O>%=I9'1H(#T@*'=I9'1H(#P@,34@/R`Q-2`Z('=I9'1H
M*3L*("`@8F]X2&5I9VAT(#T@*&AE:6=H="`\(#8@/R`V(#H@:&5I9VAT*3L*
M"B`@("\J($UA:V4@=&AE(&9I;&4@<V5L96-T;W(@=VEN9&]W+@D)"0D)*B\*
M("`@9G-E;&5C="T^=VEN"0D](&YE=W=I;B`H8F]X2&5I9VAT+"!B;WA7:61T
M:"P@>7!O<RP@>'!O<RD["@H@("`O*B!)<R!T:&4@=VEN9&]W($Y53$P_/S\)
M"0D)"0DJ+PH@("!I9B`H9G-E;&5C="T^=VEN(#T]("A724Y$3U<@*BE.54Q,
M*0H@("!["B`@("`@(')E='5R;B`H*$-$2T9314Q%0U0@*BE.54Q,*3L*("`@
M?0H*("`@+RH@4V5T('-O;64@=F%R:6%B;&5S+@D)"0D)"2HO"B`@(&9S96QE
M8W0M/G-C<F5E;@D)/2!C9&MS8W)E96X["B`@(&9S96QE8W0M/G!A<F5N=`D)
M/2!C9&MS8W)E96XM/G=I;F1O=SL*("`@9G-E;&5C="T^9&ER071T<FEB=71E
M"3T@8V]P>4-H87(@*&1!='1R:6)U=&4I.PH@("!F<V5L96-T+3YF:6QE071T
M<FEB=71E"3T@8V]P>4-H87(@*&9!='1R:6)U=&4I.PH@("!F<V5L96-T+3YL
M:6YK071T<FEB=71E"3T@8V]P>4-H87(@*&Q!='1R:6)U=&4I.PH@("!F<V5L
M96-T+3YS;V-K071T<FEB=71E"3T@8V]P>4-H87(@*'-!='1R:6)U=&4I.PH@
M("!F<V5L96-T+3YH:6=H;&EG:'0)"3T@:&EG:&QI9VAT.PH@("!F<V5L96-T
M+3YF:6QL97)#:&%R86-T97()/2!F:6QL97)#:&%R.PH@("!F<V5L96-T+3YF
M:65L9$%T=')I8G5T90D](&9I96QD071T<FEB=71E.PH@("!F<V5L96-T+3YH
M96EG:'0)"3T@8F]X2&5I9VAT.PH@("!F<V5L96-T+3YW:61T:`D)/2!B;WA7
M:61T:#L*("`@9G-E;&5C="T^9FEL94-O=6YT97()"3T@,#L*("`@9G-E;&5C
M="T^<'=D"0D)/2`H8VAA<B`J*4Y53$P["B`@(&9S96QE8W0M/F)O>`D)"3T@
M8F]X.PH@("!F<V5L96-T+3YS:&%D;W<)"3T@<VAA9&]W.PH*("`@+RH@6F5R
M;R!O=70@=&AE(&-O;G1E;G1S(&]F('1H92!D:7)E8W1O<GD@;&ES=&EN9RX)
M"0DJ+PH@("!F;W(@*'@],#L@>"`\($U!6$E414U3.R!X*RLI"B`@('L*("`@
M("`@9G-E;&5C="T^9&ER0V]N=&5N='-;>%T@/2`H8VAA<B`J*4Y53$P["B`@
M('T*"B`@("\J($=E="!T:&4@<')E<V5N="!W;W)K:6YG(&1I<F5C=&]R>2X)
M"0D)*B\*("`@9G-E;&5C="T^<'=D"3T@9V5T8W=D("A.54Q,+"`U,3(I.PH*
M("`@+RH@1V5T('1H92!C;VYT96YT<R!O9B!T:&4@8W5R<F5N="!D:7)E8W1O
M<GDN"0D)*B\*("`@9V5T1&ER0V]N=&5N=',@*&9S96QE8W0I.PH*("`@+RH@
M0W)E871E('1H92!E;G1R>2!F:65L9"!I;B!T:&4@<V5L96-T;W(N"0D)"2HO
M"B`@(&5N=')Y5VED=&@@/2!B;WA7:61T:"`M(#$S.PH@("!F<V5L96-T+3YF
M:6QE;F%M92`](&YE=T-$2T5N=')Y("AC9&MS8W)E96XL"@D)"0D)*&9S96QE
M8W0M/G=I;BDM/E]B96=X+`H)"0D)"2AF<V5L96-T+3YW:6XI+3Y?8F5G>2P*
M"0D)"0E,1494+"`B1&ER96-T;W)Y.B(L"@D)"0D)9FEE;&1!='1R:6)U=&4L
M(&9I;&QE<D-H87(L(`H)"0D)"79-25A%1"P@96YT<GE7:61T:"P@,"P@-3$R
M+`H)"0D)"512544L($9!3%-%*3L*"B`@("\J(%!U="!T:&4@8W5R<F5N="!W
M;W)K:6YG(&1I<F5C=&]R>2!I;B!T:&4@96YT<GD@9FEE;&0N"0DJ+PH@("!S
M971#1$M%;G1R>2`H9G-E;&5C="T^9FEL96YA;64L(&9S96QE8W0M/G!W9"P@
M,"P@-3$R+"`H9G-E;&5C="T^9FEL96YA;64I+3YB;W@I.PH@"B`@("\J($-R
M96%T92!T:&4@<V-R;VQL:6YG(&QI<W0@:6X@=&AE('-E;&5C=&]R+@D)"2HO
M"B`@(&9S96QE8W0M/F9I;&5,:7-T"3T@;F5W0T1+4V-R;VQL("AC9&MS8W)E
M96XL"@D)"2AF<V5L96-T+3YW:6XI+3Y?8F5G>"P*"0D)*&9S96QE8W0M/G=I
M;BDM/E]B96=Y("L@,BP*"0D)8F]X2&5I9VAT("T@,RP@8F]X5VED=&@L"@D)
M"2AC:&%R("HI3E5,3"P*"0D)9G-E;&5C="T^9&ER0V]N=&5N=',L(&9S96QE
M8W0M/F9I;&5#;W5N=&5R+`H)"0E.3TY534)%4E,L(&9S96QE8W0M/FAI9VAL
M:6=H="P@5%)512P@1D%,4T4I.PH*("`@+RH@1&5F:6YE('1H92!C86QL8F%C
M:W,@9F]R('1H92!S8W)O;&QI;F<@;&ES="X)"0DJ+PH@("!B:6YD0T1+3V)J
M96-T("AV4T-23TQ,+"!F<V5L96-T+3YF:6QE3&ES="P@)S\G+"!D:7-P;&%Y
M1FEL96EN9F\L(&9S96QE8W0I.PH@("!B:6YD0T1+3V)J96-T("AV4T-23TQ,
M+"!F<V5L96-T+3YF:6QE3&ES="P@)W$G+"!D:7-P;&%Y1FEL96EN9F\L(&9S
M96QE8W0I.PH@("!B:6YD0T1+3V)J96-T("AV4T-23TQ,+"!F<V5L96-T+3YF
M:6QE3&ES="P@2T597U1!0BP@9V5T1&ER3F%M92P@9G-E;&5C="D["B`@("\J
M8FEN9$-$2T]B:F5C="`H=E-#4D],3"P@9G-E;&5C="T^9FEL94QI<W0L($1%
M3$5412P@9&5L971E1FEL94-"+"!F<V5L96-T*3LJ+PH*("`@+RH@4F5G:7-T
M97(@=&AI<R!B86)Y+@D)"0D)"2HO"B`@(')E9VES=&5R0T1+3V)J96-T("AC
M9&MS8W)E96XL('9&4T5,14-4+"!F<V5L96-T*3L*"B`@("\J(%)E='5R;B!T
M:&4@9FEL92!S96QE8W1O<B!P;VEN=&5R+@D)"0D)*B\*("`@<F5T=7)N("AF
M<V5L96-T*3L*?0H*+RH*("H@5&AI<R!E<F%S97,@=&AE(&9I;&4@<V5L96-T
M;W(@9G)O;2!T:&4@<V-R965N+@H@*B\*=F]I9"!E<F%S94-$2T9S96QE8W0@
M*$-$2T9314Q%0U0@*F9S96QE8W0I"GL*("`@97)A<V5#1$M38W)O;&P@*&9S
M96QE8W0M/F9I;&5,:7-T*3L*("`@97)A<V5#1$M%;G1R>2`H9G-E;&5C="T^
M9FEL96YA;64I.PH@("!W97)A<V4@*&9S96QE8W0M/G=I;BD["GT*"B\J"B`J
M(%1H:7,@9')A=W,@=&AE(&9I;&4@<V5L96-T;W(@=VED9V5T+@H@*B\*=F]I
M9"!D<F%W0T1+1G-E;&5C="`H0T1+1E-%3$5#5"`J9G-E;&5C="P@8F]O;&5A
M;B!";W@I"GL*("`@+RH@17)A<V4@=&AE(&]L9"!F:6QE('-E;&5C=&]R+@D)
M"0D)*B\*("`@97)A<V5#1$M&<V5L96-T("AF<V5L96-T*3L*"B`@("\J($1R
M87<@:6X@=&AE('-H861O=R!I9B!W92!N965D('1O+@D)"0D)*B\*("`@:68@
M*&9S96QE8W0M/G-H861O=RD*("`@>PH@("`@("!D<F%W4VAA9&]W("AF<V5L
M96-T+3YS:&%D;W=7:6XI.PH@("!]"@H@("`O*B!$<F%W(&EN('1H92!S8W)O
M;&QI;F<@;&ES="X)"0D)"2HO"B`@(&1R87=#1$M38W)O;&P@*&9S96QE8W0M
M/F9I;&5,:7-T+"!";W@I.PH*("`@+RH@1')A=R!I;B!T:&4@96YT<GD@9FEE
M;&0N"0D)"0D)*B\*("`@9')A=T-$2T5N=')Y("AF<V5L96-T+3YF:6QE;F%M
M92P@0F]X*3L*?0H*+RH*("H@5&AI<R!C<F5A=&5S(&$@;&ES="!O9B!T:&4@
M9FEL97,@:6X@=&AE(&-U<G)E;G0@9&ER96-T;W)Y+@H@*B\*=F]I9"!G971$
M:7)#;VYT96YT<R`H0T1+1E-%3$5#5"`J9G-E;&5C="D*>PH@("`O*B!$96-L
M87)E(&QO8V%L('9A<FEA8FQE<RX)"0D)"0DJ+PH@("!S=')U8W0@9&ER96YT
M("ID:7)3=')U8W0["B`@('-T<G5C="!S=&%T(&9I;&53=&%T.PH@("!C:&%R
M("ID:7),:7-T6TU!6$E414U373L*("`@8VAA<B!T96UP6S(P,%TL(&UO9&4[
M"B`@($1)4B`J9'`["B`@(&EN="!C;W5N=&5R(#T@,#L*("`@:6YT('@@/2`P
M.PH*("`@+RH@0VQE86X@;W5T('1H92!O;&0@9&ER96-T;W)Y(&QI<W0N"0D)
M"0DJ+PH@("!F;W(@*&-O=6YT97(@/2`P.R!C;W5N=&5R(#P@9G-E;&5C="T^
M9FEL94-O=6YT97([(&-O=6YT97(K*RD*("`@>PH@("`@("!F<F5E0VAA<B`H
M9G-E;&5C="T^9&ER0V]N=&5N='-;8V]U;G1E<ETI.PH@("!]"@H@("`O*B!/
M<&5N('1H92!D:7)E8W1O<GDN"0D)"0D)*B\*("`@9'`@/2!O<&5N9&ER("AF
M<V5L96-T+3YP=V0I.PH*("`@+RH@4F5A9"!T:&4@9&ER96-T;W)Y+@D)"0D)
M"2HO"B`@(&-O=6YT97(@/2`P.PH@("!W:&EL92`H*&1I<E-T<G5C="`](')E
M861D:7(@*&1P*2D@(3T@3E5,3"D*("`@>PH@("`@("!D:7),:7-T6V-O=6YT
M97)=(#T@8V]P>4-H87(@*&1I<E-T<G5C="T^9%]N86UE*3L*("`@("`@8V]U
M;G1E<BLK.PH@("!]"B`@(&9S96QE8W0M/F9I;&5#;W5N=&5R"3T@8V]U;G1E
M<CL*"B`@("\J(%-O<G0@=&AE(&EN9F\N"0D)"0D)"2HO"B`@('%U:6-K4V]R
M="`H9&ER3&ES="P@,"P@9G-E;&5C="T^9FEL94-O=6YT97(M,2D["@H@("`O
M*B!3970@=&AE('!R;W!E<G1I97,@;V8@=&AE(&9I;&5S+@D)"0D)*B\*("`@
M9F]R("AX/3`[('@@/"!F<V5L96-T+3YF:6QE0V]U;G1E<CL@>"LK*0H@("![
M"B`@("`@("\J(%-T870@=&AE(&9I;&4N"0D)"0D)"2HO"B`@("`@(&QS=&%T
M("AD:7),:7-T6WA=+"`F9FEL95-T870I.PH*("`@("`@+RH@0VAE8VL@=&AE
M(&UO9&4N"0D)"0D)*B\*("`@("`@;6]D92`]("<@)SL*("`@("`@:68@*"@H
M9FEL95-T870N<W1?;6]D92`F(%-?25A54U(I("$](#`I('Q\"@D)*"AF:6QE
M4W1A="YS=%]M;V1E("8@4U])6$=24"D@(3T@,"D@?'P*"0DH*&9I;&53=&%T
M+G-T7VUO9&4@)B!37TE83U1(*2`A/2`P*2D*("`@("`@>PH@("`@("`@("`@
M;6]D92`]("<J)SL*("`@("`@?0H*("`@("`@+RH@0W)E871E('1H92!F:6QE
M;F%M92X)"0D)"0DJ+PH@("`@("!I9B`H4U])4TQ.2R`H9FEL95-T870N<W1?
M;6]D92DI"B`@("`@('L*("`@("`@("`@<W!R:6YT9B`H=&5M<"P@(B5S0"(L
M(&1I<DQI<W1;>%TI.PH@("`@("`@("!F<V5L96-T+3YD:7)#;VYT96YT<UMX
M72`](&-O<'E#:&%R("AT96UP*3L*("`@("`@?0H@("`@("!E;'-E(&EF("A3
M7TE34T]#2R`H9FEL95-T870N<W1?;6]D92DI"B`@("`@('L*("`@("`@("`@
M<W!R:6YT9B`H=&5M<"P@(B5S)B(L(&1I<DQI<W1;>%TI.PH@("`@("`@("!F
M<V5L96-T+3YD:7)#;VYT96YT<UMX72`](&-O<'E#:&%R("AT96UP*3L*("`@
M("`@?0H@("`@("!E;'-E(&EF("A37TE34D5'*&9I;&53=&%T+G-T7VUO9&4I
M*0H@("`@("!["B`@("`@("`@('-P<FEN=&8@*'1E;7`L("(E<R5S)6,B+"!F
M<V5L96-T+3YF:6QE071T<FEB=71E+"!D:7),:7-T6WA=+"!M;V1E*3L*("`@
M("`@("`@9G-E;&5C="T^9&ER0V]N=&5N='-;>%T@/2!C;W!Y0VAA<B`H=&5M
M<"D["B`@("`@('T*("`@("`@96QS92!I9B`H4U])4T1)4BAF:6QE4W1A="YS
M=%]M;V1E*2D*("`@("`@>PH@("`@("`@("!S<')I;G1F("AT96UP+"`B)7,E
M<R\B+"!F<V5L96-T+3YD:7)!='1R:6)U=&4L(&1I<DQI<W1;>%TI.PH@("`@
M("`@("!F<V5L96-T+3YD:7)#;VYT96YT<UMX72`](&-O<'E#:&%R("AT96UP
M*3L*("`@("`@?0H@("`@("!E;'-E"B`@("`@('L*("`@("`@("`@<W!R:6YT
M9B`H=&5M<"P@(B5S)6,B+"!D:7),:7-T6WA=+"!M;V1E*3L*("`@("`@("`@
M9G-E;&5C="T^9&ER0V]N=&5N='-;>%T@/2!C;W!Y0VAA<B`H=&5M<"D["B`@
M("`@('T*"B`@("`@("\J($9R964@=7`@=&AI<R!P:65C92!O9B!M96UO<GDN
M"0D)"0DJ+PH@("`@("!F<F5E0VAA<B`H9&ER3&ES=%MX72D["B`@('T*"B`@
M("\J($-L;W-E('1H92!D:7)E8W1O<GDN"0D)"0D)*B\*("`@8VQO<V5D:7(@
M*&1P*3L*?0H*+RH*("H@5&AI<R!A8W1I=F%T97,@=&AE(&9I;&4@<V5L96-T
M;W(N"B`J+PIC:&%R("IA8W1I=F%T94-$2T9S96QE8W0@*$-$2T9314Q%0U0@
M*F9S96QE8W0I"GL*("`@+RH@1&5C;&%R92!L;V-A;"!V87)I86)L97,N"0D)
M"0D)*B\*("`@0T1+4T-23TQ,"2IF<V-R;VQL(#T@9G-E;&5C="T^9FEL94QI
M<W0["B`@('-T<G5C="!S=&%T"69I;&53=&%T.PH@("!C:&%R(`DJ9FEL96YA
M;64["B`@(&EN="`)"6-H;VEC93L*("`@8F]O;&5A;@ER96=U;&%R1FEL93L*
M("`@8VAA<@D)=&5M<%LQ,#!=.PH*("`@+RH@1&\@=&AI<R!F;W)E=F5R+BXN
M+@D)"0D)"2HO"B`@(&9O<B`H.SLI"B`@('L*("`@("`@+RH@1')A=R!T:&4@
M96YT<GD@9FEE;&0N"0D)"0D)*B\*("`@("`@9')A=T-$2T5N=')Y("AF<V5L
M96-T+3YF:6QE;F%M92P@0D]8*3L*"B`@("`@("\J($%C=&EV871E('1H92!S
M8W)O;&QI;F<@;&ES="X)"0D)"2HO"B`@("`@(&-H;VEC92`](&%C=&EV871E
M0T1+4V-R;VQL("AF<V-R;VQL+"`H8VAT>7!E("HI3E5,3"D["@H@("`@("`O
M*B!#:&5C:R!T:&4@=F%L=64@;V8@=&AE(&-H;VEC92X)"0D)"2HO"B`@("`@
M(&EF("AC:&]I8V4@/3T@+3$@?'P@8VAO:6-E(#T]("TR*0H@("`@("!["B`@
M("`@("`@(')E='5R;B`H*&-H87(@*BE.54Q,*3L*("`@("`@?0H*("`@("`@
M+RH@0W)E871E('1H92!F:6QE;F%M92X)"0D)"0DJ+PH@("`@("!F:6QE;F%M
M92`](&-H='EP93)#:&%R("AF<V-R;VQL+3YI=&5M6V9S8W)O;&PM/F-U<G)E
M;G1)=&5M72D["B`@("`@(&9I;&5N86UE6W-T<FQE;BAF:6QE;F%M92DM,5T@
M/2`G7#`G.PH*("`@("`@+RH@1&5T97)M:6YE('1H92!F:6QE('1Y<&4N"0D)
M"0DJ+PH@("`@("!L<W1A="`H9FEL96YA;64L("9F:6QE4W1A="D["B`@("`@
M(')E9W5L87)&:6QE(#T@*%-?25-214<H9FEL95-T870N<W1?;6]D92D@/R`Q
M(#H@,"D["B`@("`@(&EF("AR96=U;&%R1FEL92D*("`@("`@>PH@("`@("`@
M("`O*B!)="=S(&$@<F5G=6QA<B!F:6QE+"!C<F5A=&4@=&AE(&9U;&P@<&%T
M:"X)"0DJ+PH@("`@("`@("!S<')I;G1F("AT96UP+"`B)7,O)7,B+"!F<V5L
M96-T+3YP=V0L(&9I;&5N86UE*3L*("`@("`@("`@9G-E;&5C="T^<&%T:&YA
M;64@/2!C;W!Y0VAA<B`H=&5M<"D["B`@("`@(`H@("`@("`@("`O*B!#;&5A
M;B!U<"!T:&4@=7-E9"!M96UO<GDN"0D)"0DJ+PH@("`@("`@("!F<F5E("AF
M:6QE;F%M92D["@H@("`@("`@("`O*B!2971U<FX@=&AE(&-O;7!L971E('!A
M=&AN86UE+@D)"0DJ+PH@("`@("`@("!R971U<FX@*&9S96QE8W0M/G!A=&AN
M86UE*3L*("`@("`@?0H@("`@("!E;'-E"B`@("`@('L*("`@("`@("`@+RH@
M0W)E871E('1H92!D:7)E8W1O<GD@;F%M92X)"0D)"2HO"B`@("`@("`@('-P
M<FEN=&8@*'1E;7`L("(E<R\E<R(L(&9S96QE8W0M/G!W9"P@9FEL96YA;64I
M.PH*("`@("`@("`@+RH@0VQE86X@=7`@=&AE('5S960@;65M;W)Y+@D)"0D)
M*B\*("`@("`@("`@9G)E92`H9FEL96YA;64I.PH*("`@("`@("`@+RH@4V5T
M('1H92!F:6QE('-E;&5C=&]R(&EN9F]R;6%T:6]N+@D)"0DJ+PH@("`@("`@
M("!S971#1$M&<V5L96-T("AF<V5L96-T+"!T96UP+`H)"69S96QE8W0M/F9I
M96QD071T<FEB=71E+"!F<V5L96-T+3YF:6QL97)#:&%R86-T97(L"@D)9G-E
M;&5C="T^:&EG:&QI9VAT+`H)"69S96QE8W0M/F1I<D%T=')I8G5T92P@9G-E
M;&5C="T^9FEL94%T=')I8G5T92P@"@D)9G-E;&5C="T^;&EN:T%T=')I8G5T
M92P@9G-E;&5C="T^<V]C:T%T=')I8G5T92P@"@D)9G-E;&5C="T^8F]X*3L*
M("`@("`@?0H@("!]"GT*"B\J(`H@*B!4:&ES(&ES(&$@8V%L;&)A8VL@9G)O
M;2!T:&4@<V-R;VQL:6YG(&QI<W0@=&\@86-T:79A=&4@=&AE(&5N=')Y(&9I
M96QD+@H@*B\*=F]I9"!G971$:7).86UE("A%3V)J96-T5'EP92!O8FIE8W14
M>7!E+"!V;VED("IO8FIE8W0L('9O:60@*F-L:65N=$1A=&$I"GL*("`@+RH@
M1&5C;&%R92!L;V-A;"!V87)I86)L97,N"0D)"0D)*B\*("`@0T1+1E-%3$5#
M5`DJ9G-E;&5C=`D]("A#1$M&4T5,14-4("HI8VQI96YT1&%T83L*("`@0T1+
M14Y44ED)*F9E;G1R>0D)/2`H0T1+14Y44ED@*BEF<V5L96-T+3YF:6QE;F%M
M93L*("`@<W1R=6-T('-T870)9FEL95-T870["B`@(&-H87()"2ID:7)E8W1O
M<GD["@H@("`O*B!!8W1I=F%T92!T:&4@96YT<GD@9FEE;&0N"0D)"0D)*B\*
M("`@:V5Y<&%D("AF96YT<GDM/F9I96QD+"!44E5%*3L*("`@9&ER96-T;W)Y
M(#T@8V]P>4-H87(@*&%C=&EV871E0T1+16YT<GD@*&9E;G1R>2P@*&-H='EP
M92`J*4Y53$PI*3L*"B`@("\J($-H96-K('1H92!D:7)E8W1O<GDO9FEL96YA
M;64)"0D)"2HO"B`@(&QS=&%T("AD:7)E8W1O<GDL("9F:6QE4W1A="D["B`@
M(`H@("`O*B!3970@=&AE(&9I;&4@<V5L96-T;W(@:6YF;W)M871I;VXN"0D)
M"2HO"B`@('-E=$-$2T9S96QE8W0@*&9S96QE8W0L(&1I<F5C=&]R>2P*"0D)
M9G-E;&5C="T^9FEE;&1!='1R:6)U=&4L(&9S96QE8W0M/F9I;&QE<D-H87)A
M8W1E<BP@"B`@("`@("`@("`@("`@("`@("`@("`@(&9S96QE8W0M/FAI9VAL
M:6=H="P*"0D)9G-E;&5C="T^9&ER071T<FEB=71E+"!F<V5L96-T+3YF:6QE
M071T<FEB=71E+"`*"0D)9G-E;&5C="T^;&EN:T%T=')I8G5T92P@9G-E;&5C
M="T^<V]C:T%T=')I8G5T92P@"@D)"69S96QE8W0M/F)O>"D["@H@("`O*B!#
M;&5A;B!U<"!A;GD@;65M;W)Y('5S960N"0D)"0D)*B\*("`@9G)E92`H9&ER
M96-T;W)Y*3L*?0H*+RH*("H@5&AI<R!F=6YC=&EO;B!S971S('1H92!I;F9O
M<FUA=&EO;B!I;G-I9&4@=&AE(&9I;&4@<V5L96-T;W(N"B`J+PIV;VED('-E
SHAR_EOF
  : || echo 'restore of fselect.c failed'
fi
echo 'End of archive part 4'
echo 'File fselect.c is continued in part 5'
echo 5 > _sharseq.tmp
exit 0
