Newsgroups: comp.sources.unix
From: stevegru@welchlink.welch.jhu.edu (STEPHEN C GRUBB)
Subject: v29i089: copa - gui control panel kit for shell, C, perl - V1.0, Part02/08
References: <1.823324036.2981@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: stevegru@welchlink.welch.jhu.edu (STEPHEN C GRUBB)
Posting-Number: Volume 29, Issue 89
Archive-Name: copa/part02

#	This is a shell archive.
#	Remove everything above and including the cut line.
#	Then run the rest of the file through sh.
# - - - - - - C U T   H E R E - - - - - - - - - - - - - - -
#!/bin/sh
#
# Part 2.
#
# shar:	Shell Archiver
#	Run the following text with /bin/sh to create:
#		man/copa.1
#		man/copa.3
#		man/copa_mget.3
#		man/copadef.txt
#		man/copapan.4
#		man/copaplot.4
echo man/copa.1
cat << \SHAR_EOF > man/copa.1
'\"macro ms
.TH COPA ""
.SH NAME
copa \- 1.0 gui control panel / graph kit for shell, C, perl, etc. 
.SH SYNOPSIS
.LP
\fBcopa_window\fR  [\fIwin_x win_y width height title bkclr\fR]
.LP
\fBcopa\fR  \fIcommand\fR  [\fIarg1..argN\fR]
.SH DESCRIPTION
.LP
\fBCopa\fR (\fIco\fRntrol \fIpa\fRnel kit) is an attempt to reduce a 
useful amount of graphical user interface (GUI)
functionality down to a small self-contained command set
which can be used procedurally.
\fBcopa\fR includes mechanisms such as buttons, sliders,
text/list boxes, data entry areas, and various data-driven plots; and 
may be used from shell scripts, \fBperl\fR scripts,
C programs, and other languages.  
It is optimized to easily issue and capture the output of system commands
for browsing or point/click selection.
\fBcopa\fR may be useful for tasks such as
adding gui control functionality to existing programs, and
creating quick gui-based help systems, data browsing/analysis tools, 
or system administration utilities.
It is intended to be small and easy to use but flexible enough to be useful
for many situations, so that interactive point-and-click applications 
can be prototyped and built quickly in the user's language of choice, 
without windows programming expertise.  
.SH ENVIRONMENT
\fBcopa\fR can be used from shell scripts, \fBperl\fR programs, or any language
environment which can execute (and capture the standard output of) system commands.
This man page covers the use of \fBcopa\fR in this mode.  For use within C
programs compiled using the \fBcopa.a\fR library, see the \fBcopa(3)\fR man page.
.LP 
\fBcopa\fR requires X windows (xlib), and was developed on Sun Solaris 2.x and SunOX 4.x
sparc environments.
.LP
The environment variable \fBCOPA_HOME\fR must be defined to hold 
the full name of the directory where \fBcopa\fR files are installed.  
In order to handle multiple sessions by the same userid, the 
variable \fBCOPA_PIPE\fR must be defined uniquely for each session.
There are a number of other optional environment variables also, see 
ENVIRONMENT VARIABLES below.
.SH EXAMPLES
See GETTING STARTED, below.  Also, some examples written in 
shell, \fBperl\fR and C are located in $COPA_HOME/examples.
.SH USAGE
\fBcopa\fR is made up of two executable programs: \fBcopa_window\fR and \fBcopa\fR.
These two processes can be understood as server and client, respectively, and
communicate with each other via a pair of fifo files.
.LP
\fBcopa_window\fR [\fIwin_x win_y width height title bkclr\fR]
.LP
\fBcopa_window\fR creates the display window.  It is
executed at the time when the window is created, and is generally 
executed as a background process.
\fBcopa_window\fR may be executed with no arguments, in which case a default-sized
window is created. 
Otherwise, all arguments are required:
\fIwin_x\fR and \fIwin_y\fR indicate the pixel location of the upper
left corner of the window, \fIwidth\fR and \fIheight\fR indicate the width and height
of the window in inches, \fItitle\fR is a text string window title, and \fIbkclr\fR
specifies the initial background color and can range from 0.0 (black) to 1.0 (white).
.LP
\fBcopa\fR \fIcommand\fR [\fIarg1\fR..\fIargN\fR]
.LP
\fBcopa\fR causes various things to happen in the display window.  It is typically
executed multiple times.  Its command line arguments form a
\fBcopa command\fR which is sent to the window (the available \fIcommands\fR are
described below).
User responses, if any, are returned from the window and are written to
the standard output, where they can be captured into the application environment.
.SH GETTING STARTED
The following commands illustrate how \fBcopa\fR works.
Note that these examples use the backquote (`) rather than the
usual single quote.  Often, the backquote shares a keyboard key with the tilde (~).

.PD .1v
.LP
.nf
\fBcopa_window  &
sleep  1\fR
.fi
.IP
A display window will be created, using default position, size, 
and background color.
The \fBsleep\fR is recommended when commands are running from a script.  
It gives the copa_window process time to initialize and set up 
communications pipes.

.LP
Now we are ready to enter commands which will cause things to happen in
the newly created window:

.LP
\fBcopa  pop  "Do you like my hat?"  "I Do,I Do Not"\fR
.IP
This command will display the above question in a box, and provide
two buttons ("I Do", and "I Do Not").  When one of the buttons
is selected with the mouse, the text label of the chosen button is
returned and written to the standard output.

.LP
.nf
\fBANS= `copa  pop  "Select a year:"  "1995,1996" `
echo "$ANS"\fR
.fi
.IP
Here we do a similar thing, except now the text of the chosen
button label is captured into the variable \fBANS\fR.
(This uses backquotes (`) and works for sh(1) and ksh(1); for other languages see below.)

.LP
.nf
\fBANS= `copa  poplist  "Select a file:"  "!ls"  "Cancel" `
echo "$ANS"\fR
.fi
.IP
This illustrates a popup message box with a scrollable listbox and a button.
The listbox is filled by the results of the \fBls\fR command.
When the user selects a file from the list, its name is captured
into the variable \fBANS\fR.

.LP
\fBcopa  panload  examples/examp1.pan  e1\fR
.IP
Now we are loading a full control panel from a file definition,
and assigning the name \fBe1\fR to this 
particular instance of it.  Control panels are more complicated than
popup boxes; they are defined in \fB.pan\fR files (see \fBcopapan(4)\fR).
Don't type or click with the mouse into the control panel yet.

.LP
\fBcopa  get\fR
.IP
This command waits for one user response on the control panel.
When the user makes a selection, the text of the selection is returned and written to
the standard output.  After typing the above command, click with
the mouse on one of the mechanisms on your control panel.  Note that
as soon as you do so, the selected text is written to standard output,
and the \fBcopa get\fR command exits.

.LP
\fBcopa  rinfo  tag\fR
.IP
This command returns information connected with the previous user
response.  In this case, it is returning the name (tag) of the
individual listbox, set of buttons, etc. which provided the selection. 
Each listbox, set of buttons, data entry area, and so on we call a
\fIuser interface mechanism\fR; each has a name (tag), a type (\fBlistbox\fR,
\fBbuttons\fR, \fBdataentry\fR, etc.), and various other attributes,
all specified in the control panel's \fB.pan\fR file.

.LP
\fBcopa quit\fR
.IP
This causes the \fBcopa_window\fR process to exit.
.PD
.SH SYNTAX NOTES
Beware of shell metacharacter side-effects.
.LP
User responses can contain embedded spaces.  To prevent problems in shell scripts,
variables holding user responses should be quoted, if there is any possibility
of embedded spaces.  For example:
.IP
\fBif test "$ANS" = "Save as" ..\fR
.LP
\fBcsh\fR syntax: The following illustrates how a \fRcopa\fR user selection can be captured
into a variable in \fBcsh\fR scripts:
.LP
\fBset  ANS= `copa  pop  "Select a year:"  "1995,1996" `\fR
.LP
\fBperl\fR scripts: here is some sample \fBperl\fR code to illustrate syntax:
.LP
.nf
# Start copa_window in background..
\fBsystem( "copa_window  &" );
sleep 1;

\fR# Capture user response into local variable $ans..\fB
$ans = `copa  pop  "Select a year:"  "1995,1996" ` ;
\fR# remove trailing newline..\fB
chop $ans;

\fR# Exit..\fB
system( "copa quit" );\fR
.fi
.LP
A \fRcopa\fR user selection can be captured
into the variable \fB$ans\fR using the following \fBperl\fR syntax (\fBchop\fR
is necessary since \fBperl\fR adds a trailing newline to
the user selection).
.LP
.nf
.PD
.SH TERMINOLOGY
.LP
\fIuser interface mechanism\fR: any instance of a listbox, set of buttons, 
message box, etc. which is used to communicate to/from the user.
.LP
\fItag\fR: the identifier (name) of an individual mechanism.  A one-word 
arbitrary string.  Suggested convention is to use all capital letters for tags.
Tags which begin with an underscore (_) are taken to be special preset
mechanisms.
.LP
\fIpopup\fR: a box with a message in it which appears in the center of the window
usually gets a single user response, then disappears.
Popups are pre-defined in the file \fB$COPA_HOME/presets.pan\fR.
.LP
\fIcontrol panel\fR: a collection of mechanisms defined together which appear
on the screen.  A control panel is defined in a \fB.pan\fR file.  
See \fBcopapan(4)\fR.  A number of \fB.pan\fR file examples are included.
.LP
\fImechanism attribute\fR: each type of mechanism has a number of properties
called attributes.  For example, the text size of a listbox is an
attribute, and the width of a dataentry area is an attribute.  
.LP
\fIuser selection/response\fR: the types of mechanisms that can have a
user selection/response are \fBtextb\fR, \fBdataentry\fR, \fBbutton\fR,
and \fBslider\fR.  It is the "current value" of the mechanism, either 
the value entered/chosen by the user,
or it can be program-controlled using \fBcopa setvalue\fR.
.SH TYPES OF MECHANISMS
Defined in \fB$COPA_HOME/gui.def\fR.  The more important ones are:
.LP
\fBbutton\fR: A horizontal row(s) of push-buttons.  
Your application supplies labels for the buttons 
(a string containing a comma-delimited list).
The user selects one button by clicking on it with the mouse; when
this occurs, the corresponding button label is returned.
.LP
\fBtextb\fR (also referred to as \fBlistbox\fR, \fBtextbox\fR, or \fBmessage box\fR): 
a box with text in it, one entry per line.  
The text can be for display only, or it can be set up so that
the user can select a line or word by clicking with the mouse.
If there are too many lines to fit, the box becomes vertically scrollable.
Your application supplies multi-line text to fill the list box.
Lines are separated by a newline (carriage return).
The text can include one system command on a line of its own prefaced
by an exclamation point; if present its results will be captured
and displayed.  If the textbox is user-selectable, the user can 
choose one line or word by clicking on it; when this occurs,
the contents of the selected line/word is returned.
.LP
\fBdata entry area\fR: a box where the user can type in a one-line response.  
Your application supplies the prompt, and 
often a default entry value, and maximum length.
When user finishes typing by pressing Enter, Tab, Esc, or clicking with 
the mouse, the results are returned.
If the user terminates an empty dataentry area, the special string \fB.!none\fR
is returned.
.LP
\fBslider\fR: a horizontal sliding scale with a pointer.  
Your application supplies the initial value for the pointer.
The user can adjust the position of the pointer by clicking with the mouse;
the new slider value is returned.
.LP
\fBscalezone\fR: an area which is scaled to user-defined units, for adding plots
and graphs to control panels. 
.LP
\fBplots\fR - (lineplot, bargraph, distribution, etc.)  There are a number 
of different plot mechanisms available; they are defined in \fB$COPA_HOME/plot.def\fR. 
Plot mechanisms execute within scalezones.  See \fBcopaplot(4)\fR.

.SH THE COPA COMMAND SET
A \fBcopa_window\fR process should be active (see USAGE,
above), before issuing any of these commands.
When it is mentioned that one of these commands "returns" something, 
it really means that the value will be written to standard output where it can be captured into 
the application program as shown in GETTING STARTED, above.  If a return
value is zero-length or all white space, the special string \fB.!none\fR 
is returned.  If a severe error occurs, the special string \fB.!error\fR
is returned.
.LP
The term "multi-line" text means that the text may
contain newlines (carriage returns) to separate lines.
Further, a Unix command can be embedded somewhere in the text, if it is on a line of its
own and prefaced with an exclamation mark (!).  This command will run in the current
environment
context, not that of \fBcopa_window\fR.  See the examples for \fBcopa text\fR
below, which illustrate.

.LP
\fBcopa  version\fR
.IP
Description: prints software version, options, and authorship
information to standard error.

.LP
\fBcopa  pop\fR  \fImessage  choices\fR
.IP
Description: Displays a popup message box with some buttons and waits for user response.  
When the user responds, the popup box disappears, and the selected choice 
is returned.  
\fImessage\fR is the multi-line message (embedded OS command is allowed) 
to be displayed in the box.  
\fIchoices\fR is a comma-delimited list of button text labels.  
.IP
Returns: the user's response.
.IP
Example (sh/ksh):
.IP
\fBresponse=`copa popup "File exists." "Replace,Cancel" `\fR
.RS
.IP
This will display a popup box which says "File exists", along with 
a set of two buttons which say
"Replace" and "Cancel".  It then returns the user's 
selection, e.g. "Replace".
.RE

.LP
\fBcopa  poplist\fR  \fImessage  listtext  buttons\fR
.IP
Description: Displays a popup message box, a scrollable list box, and optionally
a set of buttons.  Waits
for the user to select an entry from the listbox or select a button.
\fImessage\fR is the multi-line message to be displayed in the box.  
\fIlisttext\fR is multi-line text which provides the selection choices to the user.  
\fIbuttons\fR is a comma-delimited list of button labels.  It can be empty ("") if
no buttons are desired.
(See NOTES, above; also see \fBcopa text\fR, below).
.IP
Returns: the user's response.
.IP
Example: \fBcopa  poplist  "Select a file:"  "!ls"  "Retry,Cancel"\fR
.RS
.IP
This will display a popup box which says "Select a file", 
along with a list box containing 
a list of file names (as produced by \fBls\fR).  Also, two buttons ("Retry",
and "Cancel" ) will appear below the list.
When the user selects from the list box or selects a button, the text of the selection 
is returned.
.RE

.LP
\fBcopa  popentry\fR  \fImessage  default  length\fR
.IP
Description: Displays a popup message box along with a data entry area and
waits for the user to type in a response.
\fImessage\fR is a multi-line message to be displayed in the message box.  
\fIdefault\fR is a string that the data entry box starts out with as
a default value.
\fIlength\fR is the maximum number of characters that can be typed into
the data entry area.
.IP
Returns: the user's response.
.IP
Example: \fBcopa  popentry  "Image name:"  "default.tif"  20\fR
.RS
.IP
This will display a popup box which says "Image name", along with a dataentry
area which contains the default response "default.tif".  The user can then
type in a different response if desired.  When the user presses ENTER, TAB, or ESC,
the text contents of the dataentry area are returned.
.RE

.LP
\fBcopa  popmsg\fR  \fImessage  buttons\fR
.IP
Description: Displays a popup message box with the given \fImessage\fR, optionally
accompanied by a set of buttons.
Control returns immediately after the box is displayed, however, the message box
remains on the screen until a subsequent \fBcopa popclear\fR command
is issued.
\fIbuttons\fR is a comma-delimited list of button labels.  \fIbuttons\fR
are useful only when \fBcopa mget\fR will subsequently be used in nonblocking 
mode to check for button activity.  Otherwise, this argument should
be empty (""), as seen in the example below.
.IP
Example:
.IP
\fBcopa  popmsg  "In progress.."  ""\fR
.IP
(some commands go here)
.IP
\fBcopa  popclear\fR.
.RS
.IP
This will display a popup box saying "In progress..".  No buttons will be displayed.
After some commands are executed, the popup message box is removed by \fBcopa popclear\fR.
.RE

.LP
\fBcopa  popclear\fR
.IP
Description: Clears a popmsg box from the display (see above).

.LP
\fBcopa  panload\fR  \fIpanfile  tag\fR
.IP
Description: Load and display a control panel from a .pan file (see \fBcopapan(4)\fR).
The panel will be in its original (default) state.
\fIpanfile\fR is the name of the .pan file.  \fItag\fR is an arbitrary one-word 
name for this instance of the panel (this may be useful later if \fBcopa panuse\fR
is used).
If \fIpanfile\fR cannot be found, the $COPA_FILES directory name will 
be prepended to \fIpanfile\fR, if still unsuccessful, the $COPA_HOME directory name
will be prepended to \fIpanfile\fR.
.IP
In general, after a control panel is loaded, the application should go into
a loop containing \fBcopa get\fR or \fBmget\fR.  This will allow all mouse 
clicks, key presses, and external events such as window exposure
to be serviced properly.
.IP
Example: \fBcopa  panload  search1.pan  s1\fR
.RS
.IP
This will load the control panel definition file \fBsearch1.pan\fR and
display its contents.  The panel becomes active immediately.  This instance 
of the panel is given the internal name \fBs1\fR.
.RE

.LP
\fBcopa  panuse\fR  \fItag\fR
.IP
Description: Display a previously loaded control panel internally named \fItag\fR 
in its current state (as it was previously left by the user).
.IP
Example: \fBcopa  panuse  s1\fR
.RS
.IP
This will display the previously loaded panel known as \fBs1\fR.
.RE

.LP
\fBcopa panadd\fR  \fIpanfile\fR
.IP
Description: Overlay \fIpanfile\fR onto the current one.  Should not be
used unless a control panel has already been loaded.

.LP
\fBcopa  panquit\fR
.IP
Description: remove current panel from display and restore previous
one (if any).  This allows control panels to be nested.  Example:
.IP
\fBcopa  panload  main.pan  main
.IP
(some other code)
.IP
\fBcopa  panload  filelist.pan  flist\fR
.RS
.IP
This would cause a second control panel to be displayed 'on top of' the first one.
.RE
.IP
(some other code)
.IP
\fBcopa  panquit\fR
.RS
.IP
This would cause the second panel to disappear, and the first one
to be restored in its current state.
.RE

.LP
\fBcopa  text\fR  \fItag  text\fR
.IP
Description: Put text into a control panel listbox.  \fItag\fR is the identifier
of an existing mechanism in the current control panel.  \fItext\fR is multi-line text
(see NOTES, above).
.IP
Examples: Suppose we have loaded a control panel which includes a listbox mechanism named
LIST1.
.IP
.nf
\fBcopa  text  LIST1  "Save
Review
Exit"\fR 
.fi
.RS
.IP
This will put "Save" into the first line, "Review" into the second line, and "Exit"
into the third line of the textbox mechanism LIST1.
.RE
.IP
.nf
\fBcopa  text  LIST1  "None
!ls
Not applicable"\fR 
.fi
.RS
.IP
Here, the first line of the listbox will contain "None"; following lines 
will contain the results of the Unix \fBls\fR command, presumably a 
list of files.  The last line will say "Not applicable".  
.RE

.LP
\fBcopa  echo\fR  \fItext\fR
.IP
Description: Similar to \fBcopa text\fR, except that it operates sequentially,
for convenience of applications which output text, say, a line at a time.
\fItext\fR is either some text (it can be multi-line) to be displayed, 
or one of the special indicators \fB.!begin\fR or \fB.!end\fR.   
.IP
\fBcopa echo\fR must be used in \fB.!begin/.!end\fR constructs, such as
this:

.nf
\fBcopa echo ".!begin  TXT1"
copa echo "A line of text"
copa echo "Another few
lines of text"
\fR(..etc.)\fB
copa echo .!end
.fi
.IP
\fB .!begin\fR causes \fBcopa echo\fR to prepare for a new stream of 
text, and is followed by a tag which identifies the displaying
mechanism (note that this is all considered one argument); \fB.!end\fR 
indicates that there is no more text to be accumulated, and causes
all accumulated text so far to be displayed.
.IP
RULES REGARDING THE USE OF COPA ECHO:
\fBcopa echo\fR adds a newline to the end of the \fItext\fR argument.
Once a \fBcopa echo .!begin\fR is issued,
no copa commands except \fBcopa echo\fR are permitted until after
the matching \fBcopa .!end\fR is issued.
\fBcopa echo\fR must be used in \fB.!begin/.!end\fR constructs, as 
shown above.  A \fBcopa echo\fR issued
outside of a \fB.!begin\fR/\fB.!end\fR pair, or a mismatched \fB.!begin\fR/\fB.!end\fR, 
will work improperly and could effect the parsing of 
subsequent \fBcopa\fR commands.  Violations of these
rules may not be immediately detected by the software.

.LP
\fBcopa  get\fR
.IP
Description: Wait for user to make a selection from the current control panel,
then return the user's selection.  Only one user response is handled at a time.
.IP
Returns: the user's response.
.IP
Example: see GETTING STARTED, above.

.LP
\fBcopa  mget\fR  \fIresponse_mode\fR
.IP
Description: Wait for user to respond, then return the response or
information related to it.
Similar to \fBcopa get\fR, but allows various response modes.
\fIresponse_mode\fR determines exactly how this will behave, and can be
one of the following:
.RS
.IP 
\fBstandard\fR (the default) = Standard mode, same as \fBcopa get\fR.  Receive results
produced by a mouse click or typed into a data entry area.
.IP
\fBkeys\fR = Intercept and return individual keystrokes (see KEY REPRESENTATIONS, below).
.IP
\fBany\fR = Receive results produced by mouse click or data entry, like \fBnormal\fR.
In addition, keystrokes not captured by a dataentry area are returned individually.
.IP
\fBmousepos\fR = return only a string containing the tag of the mechanism
the mouse was in (or \fB.!none\fR ) when mouse click or keystroke occurs.
.IP
\fBnonblocking\fR = same as standard mode, but if a mouse click or dataentry
has not occurred it returns immediately, with a value of ".!none".  
.RE
.IP
For a little more detail about \fBcopa mget\fR see copa_mget(3).
.PD
.IP
Returns: the user's selection or other results.

.LP
\fBcopa  getentry\fR  \fItag\fR
.IP
Description: activate the existing \fBdataentry\fR mechanism 
named \fItag\fR, and get user input.  No other mechanisms are responsive.  
.IP
Returns the user input.
.IP
Example: \fBcopa getentry FIELD1\fR
.RS
.IP
This will make the existing \fBdataentry\fR mechanism \fBFIELD1\fR active.
The user will have to enter a response of some kind (a response of \fB.!none\fR
is possible).
.RE

.LP
\fBcopa  setvalue\fR  \fItag  value\fR 
.IP
Description: Set the current user selection/response for a mechanism
identified by \fItag\fR to \fIvalue\fR.
.IP
Or, if \fItag\fR is sent as
the special indicator \fB.!file\fR, the \fItag\fR argument is taken to
be the name of a file containing \fBtag/value\fR lines, as produced by
\fBcopa getvalue .!all\fR, and all mechanisms referenced in this file
will be updated.  See \fBexamples/form.sh\fR.
.IP
\fBcopa setvalue\fR takes care of the mechanics involved in updating
button, textb, slider, and dataentry mechanisms, and making them
display appropriately. 
.IP
This command can also be used to search a textbox.  The \fIvalue\fR
argument can contain the wildcards \fB*\fR and \fB?\fR.  When working
with a textbox, it starts at the currently selected line (if any),
and works through the list, wrapping to the top if necessary, until
a matching line is found.  If a matching line is found, it becomes
the currently selected line.  If no match is found, the special
string \fB.!error\fR is returned (error number 3000).
.IP
Note: the wildcard facility is not a full-fledged regular expression
evaluator; use of \fB*\fR is limited to these three situations: \fB*\fItext\fR
\fItext\fB*\fR, and \fItext\fB*\fItext\fR.  \fB?\fR can be used anywhere.
The matching is case-insensitive.
.IP
Example 1: \fBcopa setvalue LIST1 "grape juice"\fR
.RS
.IP
Suppose \fBLIST1\fR is a \fBtextb\fR mechanism.  This would update \fBLIST1\fR 
so that its currently selected line is \fBgrape juice\fR, assuming that such a
line is present in \fBLIST1\fR.  If not, \fB.!error\fR is returned.
.RE
.IP
Example 2: \fBcopa setvalue LIST1 "grape\*"
.RS
.IP
This would search the textbox called \fBLIST1\fR starting at the current
line (if any), for a string beginning with \fBgrape\fR.  If found, it
will become the currently selected line.  If not, \fB.!error\fR is returned.
.RE
.IP
Example 3: \fBcopa setvalue CITY ""\fR
.RS
.IP
Suppose that \fBCITY\fR is a dataentry mechanism.  This would update it to
be empty.
.RE
.IP
Example 4: \fBcopa setvalue .!file myfile.dta\fR
.RS
.IP
This would take the file \fBmyfile.dta\fR and use it to update
multiple mechanisms.
.RE

.LP
\fBcopa  getvalue\fR  \fItag\fR 
.IP
Description: Returns the current user selection/response value for the
mechanism \fItag\fR.  
.IP
Or, if \fItag\fR is the special indicator \fB.!all\fR,
the current user selection/response value for every appropriate mechanism
is written to standard output, in the form of a list having this format:
.nf
MECNAME1 <value1>
MECNAME2 <value2>
..etc
.fi
This can be captured into a file and used with \fBcopa setvalue .!file\fR.
There is one space separating the \fBmecname\fR from the value.
The file can be edited; blank lines and lines beginning with \fB#\fR
are ignored.  Zero length values are ok.  See \fBexamples/form.sh\fR.
.IP
Example 1: (sh/ksh): \fBVAL=`copa getvalue LIST1`\fR
.RS
.IP
This would get the current user selection/response value for the
mechanism LIST1, and put it into local variable \fBVAL\fR.
.RE
.IP
Example 2: (shell): \fBcopa getvalue .!all > values.dta\fR
.RS
.IP
This would place into file \fBvalues.dta\fR a list of all mechanisms
which could have values.
.RE

.LP
\fBcopa  setmec\fR  \fItag  attribute  value\fR
.IP
Description: Set an \fIattribute\fR for an existing mechanism identified by
\fItag\fR, to \fIvalue\fR.  All attributes for all mechanisms are
defined in $COPA_HOME/gui.def.  The attributes of popups can be
modified by \fBsetmec\fR before invoking the desired popup; 
the \fBpresets.pan\fR file shows the various mechanism names, etc.
Note: to set the current user selection/response value of a mechanism, 
use \fBcopa setvalue\fR.
.IP
Example1: Suppose DE1 is the tag of a data entry area.
.IP
\fBcopa setmec DE1 prompt "Account number"\fR  
.RS
.IP
This will set the prompt for the data entry area to the given string.
.RE
.IP
Example2: We can change the text size of a popup box to 18 pt before we
display it using this command:
.IP
\fBcopa  setmec  _POP  text/size  18

.LP
\fBcopa  getmec\fR  \fItag  attribute\fR
.IP
Description: Get the current value of an \fIattribute\fR for an existing
mechanism identified by \fItag\fR.
Note: to get the current user selection/response value of a mechanism, 
use \fBcopa getvalue\fR.
.IP
Returns: The value of the requested attribute.
.IP
Example (sh/ksh): \fBNLINES=` getmec TEXT1 nlines `\fR
.RS
.IP
This will find the number of displayable lines of the textbox mechanism
TEXT1, and place this number into the shell variable \fBNLINES\fR.
.RE

.LP
\fBcopa  rlimit\fR  \fItaglist\fR
.IP
Description: Limit which existing mechanisms in the current control panel will 
be responsive to user input (by default all are responsive.)
This may be useful to "lock" certain mechanisms.
\fItaglist\fR is either a comma-delimited list of mechanism identifiers 
(no spaces allowed), or the word \fB.!all\fR.
.IP
Example: Suppose the user has loaded a control file which defines mechanisms
called LIST1, and LIST3.  
.IP
\fBcopa  rlimit  LIST1,LIST3\fR  
.RS
.IP
This command would make the mechanisms LIST1 and LIST3 the only ones 
which will be responsive to the user until the next time a \fBcopa  rlimit\fR
command is issued.
.RE

.LP
\fBcopa  rinfo\fR  \fIinfotype\fR
.IP
Description: Find out about most recent user response.
\fIinfotype\fR determines what will be reported, and should be one of:
.RS 
.IP
\fBtag\fR = identity of the mechanism in which the selection occurred
.IP
\fBkey\fR = representation of the keyboard key or mouse button used (see KEY REPRESENTATIONS, below).
.IP
\fBx\fR = x location of the mouse pointer, in inches from lower left
.IP
\fBy\fR = y location of the mouse pointer, in inches from lower left
.IP
\fBmectype\fR = the type of the mechanism in which selection occurred, e.g. \fBtextb\fR
.IP
\fBerrorcode\fR = number the most recent error
.IP
\fBsecondary_tag\fR = it is possible for a user to terminate a \fBdataentry\fR area
by clicking with the mouse on some other mechanism.  This will return
the tag of the mechanism that was clicked on.  In all other cases \fB.!none\fR
is returned.
.IP
\fBsecondary_result\fR = similar to \fBsecondary_tag\fR except that this
will let the actual mouse click selection occur, and return the selection.
.RE
.IP
Returns: The requested info.
.IP
Example (sh/ksh): \fBTAG= `copa  rinfo  tag `\fR 
.RS
This would return the identifying tag of the mechanism from which the 
most recent results were gotten, and place it in the shell variable \fBTAG\fR.
.RE

.LP
\fBcopa  resize\fR  \fIwinx  winy  width  height  bkclr\fR
.IP
Description: Changes the size, location, background color of the window.
\fIwinx, winy\fR give the location of upper left corner of window, in pixels.
\fIwidth, height\fR will be the width and height of window, in inches.
\fIcolor\fR sets the background color for the window.  It can
range from 0.0 (black) to 1.0 (white).  Any of these arguments 
can be \fB-1\fR, which causes the current value to be used.
.IP
Example: \fBcopa  resize  100  100  5  7  0.9\fR
.RS
.IP
This will change the window size to 5 inches wide by 7 inches deep, with upper left
corner at pixel location (100,100), and give it a background color of
light gray.
.RE

\fBcopa  display\fR  \fIaction\fR
.IP
Description: Window display-related functions.
\fIaction\fR determines what is to be done.  Possible actions are:
.RS
.nf
\fBdisappear\fR= make the window temporarily disappear
\fBappear\fR 	= restore the window after a disappear
\fBrefresh\fR 	= refresh the dislay
\fBregen\fR	= re-compute and refresh the display
\fBholdrefresh\fR= prohibit automatic display refreshes.
		  (the next \fBdisplay refresh\fR terminates this mode).
\fBdump\fR	= dump current control panel into file copadump.pan
\fBping\fR	= return the process id of the window process.
.fi
.RE
.IP
Example: \fBcopa  window  disappear\fR
.RS
.IP
This will make the window temporarily disappear.
.RE

.LP
\fBcopa ps\fR  \fItitle  psfile  paper\fR
.IP
Description: Converts currently loaded control panel to Encapsulated PostScript.
This is intended for printing plots; user interface mechanisms generally
are not represented well in PostScript.
\fItitle\fR is an arbitrary title; \fIpsfile\fR is the name for the
encapsulated PostScript output file; \fIpaper\fR controls the orientation
of the image on the paper and can either be \fBP\fR for portrait, or
\fBL\fR for landscape.
.IP
Example: \fBcopa ps "Plot - 1996"  out.ps  P\fR

.LP
\fBcopa  quit\fR
.IP
Description: Tells the copa_window process to exit, and 
removes IPC fifo files and any temporary files.

.SH KEY REPRESENTATIONS
.LP
When an individual keystroke is being returned, some translation is
done for certain characters.
A printable non-whitespace character is represented as a string
containing itself.  All other characters are represented as a string
containing ".!char", followed by the character's decimal ascii value,
e.g.  space = ".!char32".
.LP
Mouse button representations are: ".!mouseleft", ".!mousemiddle"
and ".!mouseright".

.SH ERROR HANDLING
Severe errors result in the string \fB.!error\fR being returned.
The error number can be retrieved using \fBcopa rinfo errorcode\fR.
In any case, error messages are written to standard error.

.SH ENVIRONMENT VARIABLES
.HP
.B COPA_HOME 
\- (must be set) the path name of the directory where \fBcopa\fR system
files reside.
.HP
.B COPA_DEF
\- (optional) name of a defaults file to use instead of the standard one,
\fBgui.def\fR.  This allows the use of customized defaults files.
.HP
.B COPA_DPI 
\- (optional) resolution of the display, in dots 
per inch.  Default is 75.  This setting can be used to adjust the
overall size of the copa display.
.HP
.B COPA_FILES
\- (optional) pathname of a directory where \fBcopa\fR should
look for control panel definition (.pan) files.
.HP
.B COPA_FLASH
\- (optional) specify a delay time for "flashpick" selections, in 
hundredths of a second.  Default is 15.
.HP
.B COPA_PRESETS
\- (optional) name of a presets definition file to use instead of the
standard one, \fBpresets.pan\fR.  This allows the use of customized
popups, etc.
.HP
.B COPA_PIPE
\- (optional) a unique identifier string (arbitrary) used to identify the client/server
communications connection.  It does not need to be set if only a
single window is active for a given userid.
For multiple copa sessions per user, \fBCOPA_PIPE\fR
will be checked by the \fBcopa\fR client process to determine which
\fBcopa_window\fR process to communicate with.
.HP
.B COPA_XFONT 
\- (optional) an X windows base font name.
The primary default is "-adobe-courier-bold-r-normal".
Proportionally-spaced fonts are not supported.
.HP
.B DISPLAY 
\- (optional) indicates to X windows system the screen on which to display, 
e.g. voyager:0.  Display permissions must be set appropriately (\fBxhost\fR).
.SH FILES
.TP
\fB$COPA_HOME/examples\fR
Some control panel definition (.pan) file examples, and program
examples are located here.
.TP
 \fB$COPA_HOME/gui.def\fR
Shows all available mechanism types, describes all available attributes
of each, along with default values.
.TP
 \fB$COPA_HOME/plot.def\fR
Shows all available plot mechanism types, describes all available attributes
of each, along with default values.
.TP
\fB$COPA_HOME/presets.pan\fR
Popup mechanism definitions.
.TP
\fB$COPA_HOME/copa.a\fR
Copa C library, which is a C function implementation of copa as described here.
See copa(3).
.TP
\fB/tmp/copaC*\fR
FIFO pipe for commands from copa to the copa_window process.  Remainder of file name is
the userid, plus \fBCOPA_PIPE\fR string, if any.
.TP
\fB/tmp/copaR*\fR
FIFO pipe for results from the copa_window process to copa.  Remainder of file name is
the userid, plus \fBCOPA_PIPE\fR string, if any.

.SH NOTES
If \fBcopa\fR is executed without the existence of an active \fBcopa_window\fR
process, it will pause indefinitely and need to be killed.
If an application aborts without issuing a \fBcopa quit\fR command, 
the \fBcopa_window\fR process will continue to exist.  It may be terminated
by typing \fBcopa quit\fR, or by using \fBkill(1)\fR.
.LP
No signal handling of any kind is done.
.LP
Listboxes do not do any interpretation of escape codes, for actions such
as underlining or font changes.
.LP
There is no multi-line data entry mechanism; workaround is to launch an
editor session window, e.g. \fBxterm -e vi myfile\fR
.LP
Color is not supported.  
.LP
Limits: Maximum length of a single text attribute 
(including captured command output) is 200,000.  Longer text will be
truncated and a warning message will appear on stderr.
Maximum line length for user response and system command results is 512.
Maximum number of nested control panels is 5.
Maximum length of a button label is 200.
.LP
Ascii characters 17 and 18 (^Q and ^R) found in incoming
text are converted to 19.
.SH BUGS
Listbox scrolling is inefficient and becomes slow with large amounts of text.
.LP
The entire display is regenerated after popups finish; 
the window image should be saved/restored.
.LP
Standards are not conformed to in use of X resources and user interface look/feel.
.SH SEE ALSO
\fBcopa(3)\fR, \fBcopa_mget(3)\fR, \fBcopapan(4)\fR, \fBcopaplot(4)\fR
.SH AUTHOR
Stephen C. Grubb (stevegru@welchlink.welch.jhu.edu)
.SH COPYRIGHT
\fBcopa\fR 1.0 - gui Control Panel kit for 
shell, C, perl, etc.
Copyright 1991-1996 Stephen C. Grubb.
See the file: \fB$COPA_HOME/Copyright\fR.
SHAR_EOF
############################

echo man/copa.3
cat << \SHAR_EOF > man/copa.3
'\"macro ms
.TH COPA ""
.SH NAME
copa \- 1.0 gui control panel kit - C language API
.SH DESCRIPTION
This summarizes the copa C function API.  The C function
API is virtually identical to the shell API described in
copa(1); differences or points of confusion will be described
here.
.SH COMPILATION
When copa is installed, the archive library copa.a is
built and placed in the \fB$COPA_HOME\fR directory.  Application
programs will need to be linked with this library, as well as xlib (\fB-lX11\fR).
Solaris 2.x systems will also need \fB-lposix4\fR.  See \fB$COPA_HOME/examples/Makefile\fR
for more information.
.SH USAGE
The C API does not use the client-server scheme as used by the shell
API described in copa(1).
.LP
Please refer to copa(1) for descriptions of functions and arguments.
All functions which produce a result in the shell API, copy the result string into
the \fIresponse\fR argument in the C language API.  
.LP
All functions return 0 normally, or a non-zero error number if a severe error occurred.


.LP
copa_window( int win_x, int win_y, double win_w, double win_h, char *title, double bkclr )
.IP
In contrast to the shell api, all arguments are required.
.LP
copa_version()
.LP
copa_pop( char *msg, char *choices, char *response )
.LP
copa_poplist( char *msg, char *choices, char *buttons, char *response )
.LP
copa_popentry( char *msg, char *def, int len, char *response )
.LP
copa_popmsg( char *msg, char *buttons )
.LP
copa_popclear()
.LP
copa_panload( char *panfile, char *tag )
.LP
copa_panuse( char *tag )
.LP
copa_panadd( char *panfile )
.LP
copa_panquit()
.LP
copa_panel( char *action, char *panfile, char *tag )
.LP
copa_load( char *fnm )
.LP
copa_text( char *tag, char *txt )
.LP
copa_echo( char *txt )
.LP
copa_get( char *response )
.LP
copa_mget( char *rtyp, char *response )
.LP
copa_getentry( char *tag, char *response )
.LP
The inftype \fBerrorcode\fR is not available; errorcodes are returned by functions.
.LP
copa_setvalue( char *tag, char *value )
.LP
copa_getvalue( char *tag, char *results )
.LP
copa_setmec( char *tag, char *attr, char *value )
.LP
copa_getmec( char *tag, char *attr, char *response )
.LP
copa_rlimit( char *meclist )
.LP
copa_rinfo( char *inftyp, char *response )
.IP
copa_resize( int win_x, int win_y, double win_w, double win_h, double bkclr )
.LP
copa_display( char *action )
.IP
\fBping\fR has no meaning in the C api context.
.LP
copa_ps( char *name, char *fnm, char *paper )
.LP
copa_quit()
.SH FILES
\fB$COPA_HOME/copa.a\fR - object library.
.SH SEE ALSO
\fBcopa(1)\fR
SHAR_EOF
############################

echo man/copa_mget.3
cat << \SHAR_EOF > man/copa_mget.3
'\"macro ms
.TH COPA_MGET ""
.SH NAME
copa_mget \- more detailed information about copa mget
.SH DESCRIPTION
This includes more detailed information about the operation
of copa mget than is shown in the main man page.
.SH MODES
.LP
s(tandard) = Standard mode, suitable for most situations.  Receive results
produced by mouse click or data entry.
If there is only one visible data entry area, all key presses
will be captured by it.  If there is more than one data entry
area on the screen, the "current" one (see below) will receive
keystrokes by default.  Other dataentry areas must be selected
before typing (see below).  In any case, keystrokes which aren't
captured in a data entry area are ignored.
.LP
k(eys) = Intercept and return all keystrokes.  Key presses will not
be received by data entry area(s).  Ignore mouse selections.
.LP
a(ny)  = Receive results produced by mouse click or data entry.
For keystrokes to be captured by a dataentry area, the
dataentry area must be selected before typing (see below).
Keystrokes not captured by a dataentry area are returned.
Mouse clicks which do not produce results are ignored.
.LP
m(ousepos) = produce only a string containing the tag of the mechanism
the mouse was in (or ".!none" ) when mouse click or keystroke
occurs.  get_uinfo can be subsequently called to get x and y
location info.
.LP
n(onblocking) = same as standard mode, except that mget will not wait
for mouse click or data entry; if neither of these has occurred,
mget when used in this mode will return immediately, with
response set to ".!none".  Note that mget in nonblocking mode
should not be used in a loop without some sort of delay also being
present in the loop.
.LP 
NOTE: The "current" data entry area is generally the one most recently
used.  If none have yet been used, it is the first-defined one which
is visible.
.LP 
NOTE: A data entry area may be "selected" by the user clicking on it
with mouse.
.LP 
NOTE: Data entry responses of zero length or which contain only
white-space characters are returned as ".!none", to avoid problems
in shell scripts.
.SH SEE ALSO
\fBcopa(1)\fR
SHAR_EOF
############################

echo man/copadef.txt
cat << \SHAR_EOF > man/copadef.txt
COPA .def files
---------------

@@package <package name>

@@begin <objname>
<name> <type> <info> : <default-val> : <flags> :<constraint> : <description>
<name> <type> <info> : <default-val> : <flags> :<constraint> : <description>
<name> <type> <info> : <default-val> : <flags> :<constraint> : <description>
.
.
@@end

@@begin <objname>
<name> <type> <info> : <default-val> : <flags> :<constraint> : <description>
.
.
@@end

@@begin <objname>
.
.


* Reserved words: @@begin  @@end  Proc

* The @@begin and @@end statements must begin in column 1.

* All attributes (with the exception of overrides, see below) must have a name, a type, 
  a constraint, and a description.  Whether or not a default value is required depends 
  upon the application.

* Default values must be single line only, no more than 200 characters in length, and may not
    contain colons (:).

* Comments have a pound sign (#) in the first non-white-space character, and are ignored.

* Blank lines are ignored.

<package> contains the name of the package to which all objects defined within the template
    file will belong.  The name should be a single word.  The main purpose of packages is
    to allow code to be compartmentalized, and to speed up run-time binding.

<objname> contains the name of the object.  It should be a single word.  Objects which will
    never be executed directly by a user should be given a name which ends in a dash (-).

<name> contains the name of the attribute.  It should be a single word (no white space),
    and not contain colons.  Reserved words should not be used.  

<type> is a single-character storage type indicator:
	I=integer  	integer
	D=double 	floating point
	C=character	character data, on one or more lines.
	X=execute	same as character, plus include an external proc (more about this below).

<info> usually contains a length integer which is used to help allocate storage. For the X type, 
    it contains the name of an already-defined proc.
      For I, D, and C data types, the <info> field may contain a length integer.  It is generally
    specified when an approximate maximum size of an item is small and easy to guess.  For C types, 
    it corresponds to the number of characters, e.g. the length of "yellow" is 6.  For the other 
    types, it corresponds to the number of list members, e.g. the length of "1.2" is 1, and the 
    length of "1 4 4 3" is 4.

<flags> contains information about the system properties of the attribute.  The following flags
    are defined:
	U	uniheritable (attributes are inheritable by default)
	H	hidden (will not be shown in a user-dump)

<constraint> contains information for building data entry screens and range checking during 
    data entry.  It is not currently used by this system.

<description> is a text description for reference use during data entry. It should be phrased 
    keeping in mind that it will be used verbatim in data entry screens.


* For optimal efficiency, an application should request attributes in the same order as given 
    in the template.  This is not mandatory, and may not always be convenient.


The X data type (include external)
----------------------------------

  Suppose you are writing a template for a graphics program using the above syntax.  After a while 
you find that the same properties keep coming up over and over, such as text size, font, etc. 
for each text object.  What is desired is a way to define these properties once, then reference
them from a number of different places.  The X data type allows this.
  So, a default object called "text" is defined containing three attributes: size, font, and
color.  It can then be referenced from other object templates using the X data type, e.g.

title  X text : The Last of the Mohicans

The application can now access the text using the name "title", and access the text attributes 
using the names "title/size", "title/font", and "title/color".  The application should be made 
to first check to see if "title" contains anything, and if so, ask for these attributes in the 
order defined in the "text" template.

  Other than the external include function described above, X datatypes behave exactly like C 
(character) data types.

Overrides
---------

  Overrides are used along with X attributes, when a value other than the "standard" is 
desired.  In the above example, suppose that the default value for text/size is 10, but
we want to display our title in 18 point type.  We need to use an override.  Overrides
must come BEFORE the related X attribute.  For example:
  
title/size    : 20
title  X text : The Last of the Mohicans

Note that overrides do not have constraints or descriptions.




Adding new objects
------------------

To add new objects, do the following:

[] make a template (.def file)
[] write a gen routine, and add a call statement to gen.c
[] if the object will be executable, write an exec routine and add a call statement to exec.
SHAR_EOF
############################

echo man/copapan.4
cat << \SHAR_EOF > man/copapan.4
'\"macro ms
.TH COPAPAN ""
.SH NAME
copapan \- copa control panel definition (.pan) file format
.SH DESCRIPTION
You can create \fBcopa\fR user interface and plotting mechanisms by
setting up a control panel definition file (these are called
\fB.pan\fR files, since \fB.pan\fR is the suggested file name
suffix for these files).
A \fB.pan\fR file contains the definitions for one or more mechanisms.  \fB.pan\fR 
files are ascii and can be modified using your favorite text editor.
Everything in a \fB.pan\fR file is case-sensitive.
Blank lines and lines beginning with \fB#\fR (comments) are ignored during processing.
.SH EXAMPLES
Example .pan files are located in \fB$COPA_HOME\fR/examples,
and all end in \fB.pan\fR.  You can preview them using the
\fBpreview\fR or \fBpreview.sh\fR programs located there.
.SH MECHANISMS, ATTRIBUTES, AND DEFAULTS
All available user interface mechanism types are defined in \fBgui.def\fR.
Examples of these are \fBtextb\fR (text box), \fBbuttons\fR, and \fBscalezone\fR.
All available plotting mechanisms, e.g. \fBlineplot\fR and \fBlegend\fR, are 
defined in \fBplot.def\fR.
For each mechanism, a list of available attributes,
as well as a type and default value for each, is found there as well.
It may be helpful to print out one or both of these files. 
.SH CREATING A MECHANISM
A mechanism definition is really just a line containing the word \fBProc\fR,
followed by the mechanism type;
this is in turn followed by lines containing desired attribute settings, which will 
override the default settings.   Attributes which you do not
explicitly set will take the default value.  
.LP
For example, there is a mechanism type called
\fBtextb\fR which displays text in a box.  You can create
an instance of a \fBtextb\fR by creating a \fB.pan\fR file with the 
following statements:
.IP
.nf
\fBProc textb
*/tag: MYTEXTBOX
text: "The quick"
      "brown fox jumped over"
      "the lazy dog."\fR
.fi
.LP
This creates an instance of a textbox, and names it \fBMYTEXTBOX\fR.
The tag is used to identify this particular textbox.
You can view the textbox using the \fBpreview\fR utility located
in the examples directory.
The textbox should appear, using defaults for all its various attributes,
except \fBtext\fR, which you set explicitly.  The default size of a \fBtextb\fR
mechanism is based on the text to be displayed.  The default position
is in the center of the window.  The default text size is 10 point.
.SH SETTING ATTRIBUTES
Any of the \fBtextb\fR attributes can be set here (see \fBgui.def\fR for what
they are), and they can be set in any order.  
.LP
For example, if we wanted
to change the box width to 30 characters we could add this line:
.IP
\fBbox.width: 30\fR
.LP
To change the height of the box to 10 lines we could add this line:
.IP
\fBnlines: 10\fR
.LP
Most attributes, such as \fBnlines\fR, hold a single value.  Others, such 
as the \fBtextb text\fR attribute hold
one or more lines of text, 
A few hold coordinate pairs.  
Some of the plotting mechanisms have attributes that hold
sets of values.  Exactly what kind of value is expected for an attribute
can be found by checking the attribute's entry in \fBgui.def\fR or 
\fBplot.def\fR file (see below).
.LP
It should be noted that commands such as \fBcopa text\fR and \fBcopa echo\fR
basically just update the \fBtext\fR attribute of a mechanism.  The
\fBcopa setmec\fR command can be used to set any attribute during run-time,
and the command \fBcopa getmec\fR can be used to examine any attribute's value.
.SH SECONDARY ATTRIBUTES
To change the text size to 15 point, we could add this line:
.IP
\fBtext/size: 15\fR
.LP
You may wonder why you don't see \fBtext/size\fR listed as a
\fBtextb\fR attribute in the \fBgui.def\fR file.
This is because \fBtext\fR is defined as "\fBX text_props-\fR"
which means that the \fBtext_props\fR secondary attributes
come into play as well.  So, you need to look at the \fBtext_props\fR secondary
properties located near the top of the \fBgui.def\fR file.  You should see
attributes named \fBsize\fR, \fBfont\fR, and \fBpen\fR.  These can all
be defined by you as \fBtext/size\fR, \fBtext/font\fR, and \fBtext/pen\fR.
Any attribute name that has a front slash (/) in it, is a secondary attribute.
.SH ALIGNMENT (POSITIONING) OF MECHANISMS
You could create two different textboxes (\fBTXT1\fR and \fBTXT2\fR) like this:
.IP
.nf
\fBProc textb
*/tag: TXT1
text: "Its cold outside."

Proc textb
*/tag: TXT2
text: "This is"
      "a test"
.fi
.LP
The problem is, they are both in the default position, which is
in the center of the window.  We need to adjust the position of
one of them, TXT2 for example.  We can do this using the \fB*/align_h\fR 
(align horizontal) and \fB*/align_v\fR (align vertical) attributes, 
to align a mechanism with a side of the window, or a side of any other
mechanism.  The alignment to be done is expressed in the following way:
.IP
Align \fImyside\fR to \fItag\fR's \fIside\fR\fI+/-f\fR inches.
.LP
 ..where \fItag\fR is another, previously defined mechanism's tag, or
\fBroot\fR which stands for the entire display window.  \fImyside\fR refers to
a side of the current mechanism; \fIside\fR refers to a side of the mechanism/window 
to be
aligned with.  \fImyside\fR and \fIside\fR can be either L, R, T, B or C:
.nf
\fBL\fR = Left
\fBR\fR = Right
\fBT\fR = Top
\fBB\fR = Bottom
\fBC\fR = Center 
.fi
.LP
\fI+/-f\fR is a vector in inches, which gives an offset from \fIside\fR.
The alignment expression always has three tokens separated by spaces(s).  Note
that the last part is all one token, i.e. it cannot have embedded spaces.  
Also note that the coordinate system is measured from an origin at the lower left corner.

.SH ALIGNMENT EXPRESSION EXAMPLES
For example we could add these lines to the description of TXT2:
.nf
\fB*/align_h:   L  root  L+2.5
*/align_v:   C  root  C\fR
.fi
.LP
Horizontally, this would align the \fBleft\fR side of our mechanism (\fBTXT2\fR) to \fBroot\fR's \fBleft\fR
side (the left edge of the display window), \fBplus 2.5\fR inches.   In other words, the
left edge of \fBTXT2\fR would be 2.5 inches in from the left edge of the window.
.LP
Vertically, the \fBcenter\fR of our mechanism (\fBTXT2\fR) will be aligned to the
center of the display window, in other words, it will be centered within the display window
in the up/down direction.
.LP
Other examples:
.IP
\fB*/align_v:  T  TXT1  B\fR
.LP
 ..align the top of our current mechanism to the bottom of mechanism TXT1.
.IP
\fB*/align_h:  L  TXT1  R\fR
.LP
 ..align the left of our current mechanism to the right of mechanism TXT1.
.IP
\fB*/align_h:  L  TXT1  R+0.5\fR
.LP
 ..align the left of our current mechanism 0.5 inches to the right of mechanism TXT1.
.IP
\fB*/align_h:  R  root  R-0.3\fR
.LP
 ..align the right of our current mechanism 0.3 inches in from the right of the window.
.SH CLONING A PREVIOUSLY DEFINED MECHANISM
Sometimes when you wish to create a number of similar mechanisms, it might
be convenient to define one, then "clone" it to make others.  This can be
done using a statement like this:
.IP
\fB*/inherit:  TXT1\fR
.LP
This causes all attributes from TXT1 to be used.  You can still define (override)
any attributes that you want.
.SH .PAN FILE SYNTAX
Here is a more formal summary of the .pan file syntax:
.IP
.nf
Proc  <mechanism-type>
<attribute-name>:  <value>
<attribute-name>:  <multi
  		line
  		value>
<attribute-name>:  <value>

Proc  <mechanism-type>
<attribute-name>:  <value>
..etc.

.fi
.LP
The colon must appear after each attribute name.  
No more than one attribute definition per line.
.LP
Double quotes (") should generally be used to enclose a single line character value, or \fIeach 
line\fR of a multi-line character value.
.LP
Text without double quotes will be accepted.   However, embedded colons (:)
must be preceded with a backslash (\\) or the parser will become confused and cause 
problems.  Also, if double quotes are omitted, leading and trailing white 
space is stripped away, and empty lines are omitted.  
.SH UNDERSTANDING GUI.DEF AND OTHER .DEF FILES
As mentioned above, the \fB.def\fR files contain definitions of all
the available mechanisms.  They define what attributes exist, what
type of data is expected for each, and what the initial default value
is for each.  Looking through one of these files, we encounter secondary
attribute definitions first, then come the definitions of the various 
mechanism types.  Blank lines and lines beginning with \fB#\fR (comments)
are ignored during processing.
.LP
For each attribute, there is a single definition line, followed by
one or more lines of description.  The format of the definition line is
the following (white-space and/or colons are used as delimiters):
.LP
\fBattribute-name    type   :  default-value   :  :   constraint   :\fR
.LP
\fIattribute name\fR is the identifier of the attribute.
.LP
\fItype\fR indicates the basic type of the attribute, and some estimate
of its size.  The available basic types are:
.nf
\fBC \fIn\fR  =character 
\fBI \fIn\fR  =integer 
\fBD \fIn\fR  =decimal (floating point)
\fBX \fIsname\fR  =character, with secondary attributes 
.fi
.LP
\fIn\fR indicates number of characters, integers, etc.  This is just an
estimate, and there is no problem if a value exceeds this length.
If \fIn\fR is omitted, \fB1\fR is assumed.
For example, a coordinate pair would have a type of \fBD 2\fR and
could be defined in your \fB.pan\fR file as: \fBlocation: 3.0 4.0\fR, for example.
\fIsname\fR is a secondary attribute set name.
.LP
\fIdefault-value\fR is the initial value that the attribute will have.
.LP
.LP
\fIconstraint\fR gives a more specific idea of what the attribute is.
However, they are not enforced.
Available constraints include:
.nf
\fBcheckoff\fR  = an on/off item; \fBx\fR = "on"; blank = "off"
\fBtext\fR     	= free form text, one or more lines
\fBtag\fR     	= a mechanism tag
\fBalex\fR    	= an alignment expression (see above)
\fBtoken\fR   	= any single "word" of text
\fBpencolor\fR = either \fBblack\fR or \fBwhite\fR
\fBtextsize\fR	= an integer point size ranging from 5 to 30
\fBcolor\fR   	= ranging from 0.0 (black) to 1.0 (white)
\fBdistance\fR	= a decimal value in inches
\fBnumber\fR = a number (decimal or not)
\fBint\fR    	= a integer
\fBa,b,c\fR    	= a comma-delimited list of acceptable values
\fBcoordpair\fR = two decimal values in inches
\fBdatafield\fR = integer plot data field, first field is 1
\fBlinethick\fR = line thickness (1=normal) *
\fBdashstyle\fR = line dashstyle (0=solid) *
\fBdashdens\fR  = line dash density (1=normal) *
\fBmark\fR    	= symbol name such as sym6e, or a character *
.fi
.LP
* To see depictions of various values for these, preview the example file
\fBlegend.pan\fR.
.LP
Of the above constraint types, only \fBtext\fR allows multiple lines of input.
It should be noted that system commands will \fInot\fR be interpreted in \fB.pan\fR
files.
.SH FILES
\fB$COPA_HOME/gui.def\fR - user interface mechanism type definitions
.LP
\fB$COPA_HOME/plot.def\fR - plot mechanism type definitions
.LP
\fB$COPA_HOME/presets.pan\fR - popup mechanisms
.LP
\fB$COPA_HOME/examples\fR - directory containing a number of \fB.pan\fR file examples.
.SH NOTES
The plotting mechanism types and attributes generally begin with a capital
letter,	while the user interface mechanisms are all lower-case.
.SH SEE ALSO
\fBcopa(1)\fR, \fBcopaplot(4)\fR
SHAR_EOF
############################

echo man/copaplot.4
cat << \SHAR_EOF > man/copaplot.4
'\"macro ms
.TH COPAPLOT ""
.SH NAME
copaplot - summary of copa data plotting functionality
.SH DESCRIPTION
In addition to the user interface mechanisms included with
copa, there are a number of data plotting mechanisms.
These can be used in combination with the u.i. mechanisms
in control panels.  Available are bar graphs, line plots, 
2-way distributions (scatter plots), 1-way bar distributions,
pie graphs, error bars, etc.  They work with newline-delimited
records of white-space delimited fields, and are intended
for what is commonly called "business graphics" applications,
meaning basically that it can't handle extremely large 
data sets.  
.LP
The available mechanisms and their attributes are defined in
the file \fBplot.def\fR.  It may be helpful to print out this
file to work from.
.SH EXAMPLES
Several examples exist in the $COPA_HOME/examples directory
and can be previewed using the \fBpreview\fR program which
is located there.
.SH NOTES
The basic strategy for doing plots is to:
.LP
1. define a \fBtextb\fR mechanism and put data into it, either in
the .pan file or later using \fBcopa text\fR or \fBcopa echo\fR.
Give the textb a name, for example, \fBDATA1\fR.
.LP
2. define a \fBscalezone\fR mechanism, and give it a name, 
for example, \fBZONE1\fR.
.LP
3. define x and y axes using the \fBAxes\fR mechanism.  The
\fBaxes\fR mechanism must be linked to the appropriate
\fBscalezone\fR using \fBPlot/Zone\fR.
.LP
4. define a plot mechanism.  All plot mechanisms must be
linked to a \fBscalezone\fR mechanism using \fBPlot/Zone\fR; 
this is how positioning
is defined.  Plot mechanisms which use data will need to
be linked to the appropriate \fBtextb\fR mechanism too, using
\fBPlot/Data\fR.
.SH EXAMPLE
### A bargraph example:

.nf
Proc textb
*/tag: DATA1
*/display:
text:  0.62  3.25
       4.22  6.76
       2.28  3.50
       5.30  2.09

Proc scalezone
*/tag: ZONE1
*/align_h: C root C
*/align_v: B root B+2
height: 4
width: 6
xrange: 0 5
yrange: 0 8

Proc Axes
*/tag: AXES
Plot/Zone: ZONE1

Proc Bargraph:
Plot/Zone: ZONE1
Plot/Datasource: DATA1
Field:	  1
.fi
.LP
The plotting portion of copa is based on another
software package by the same author called ipl 
(comp.sources.unix volume 21).
However, ipl files need some modification to work with copa (see below).
.LP
The plotting mechanism types and attribute names begin with a capital
letter; the user interface ones do not.
.LP
The \fBcopa_ps\fR command can be used to render a control panel
containing plot(s) into Encapsulated PostScript.  If you want to
print the PostScript file directly, you may want to set up
your .pan file with the paper size in mind, and preview it
using a window size which conforms to the paper size (the
COPA_DPI environment variable can be adjusted to a lesser
value to scale down the entire display).  See the \fBpage.sh\fR
example.
.SH IPL CONTROL FILES
\fBIPL\fR control files need the following modifications to work with copa:
.LP
Areadef parameters related to plotting area and scale are now part of \fBscalezone\fR.
The remaining Areadef parameters are now part of \fBAxes\fR.
.LP
Getdata no longer exists; its functionality is handled by \fBtextb\fR.
.LP
Functionality of the Clone and Saveas parameters are now handled by \fB*/inherit\fR and
\fB*/tag\fR.
.LP
Some plot types such as Rangebar and Density_grid are not included in this distribution.
.SH BUGS
The maximum amount of plot data is fixed at time of installation.
.SH SEE ALSO
\fBcopa(1)\fR, \fBcopapan(4)\fR
SHAR_EOF
############################


