Newsgroups: comp.sources.unix
From: stevegru@welchlink.welch.jhu.edu (STEPHEN C GRUBB)
Subject: v29i090: copa - gui control panel kit for shell, C, perl - V1.0, Part03/08
References: <1.823324036.2981@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: stevegru@welchlink.welch.jhu.edu (STEPHEN C GRUBB)
Posting-Number: Volume 29, Issue 90
Archive-Name: copa/part03

#	This is a shell archive.
#	Remove everything above and including the cut line.
#	Then run the rest of the file through sh.
# - - - - - - C U T   H E R E - - - - - - - - - - - - - - -
#!/bin/sh
#
# Part 3.
#
# shar:	Shell Archiver
#	Run the following text with /bin/sh to create:
#		examples/Makefile
#		examples/README
#		examples/alarm.c
#		examples/basic.pan
#		examples/blank.dta
#		examples/browser.sh
#		examples/demo.c
#		examples/demo.sh
#		examples/doe.dta
#		examples/examp1.pan
#		examples/examp2.pan
#		examples/exitb.pan
#		examples/form.pan
#		examples/form.sh
#		examples/hello.perl
#		examples/hello.sh
#		examples/legend.pan
#		examples/list.pan
#		examples/mapdata
#		examples/month.stubs
#		examples/mva.dta
#		examples/oneplot.pan
#		examples/page.sh
#		examples/plots.pan
#		examples/preview.c
#		examples/preview.perl
#		examples/preview.sh
#		examples/slider.pan
#		examples/smith.dta
#		examples/thplot.pan
echo examples/Makefile
cat << \SHAR_EOF > examples/Makefile
# Makefile for C program which uses copa library.
#
# Environment var COPA_HOME needs to be set before running
# this makefile, or using the examples.  COPA_HOME
# should contain the path name of the main copa directory,
# where the file gui.def is located.
#
# SCG 12-29-95
#


CC = cc


### SunOX 4.x
###
# XLIBEDIR = -L/usr/lib/X11			   # Sunos 4
# LIB = $$COPA_HOME/copa.a  -lX11 -lm	   	   # Sunos 4



### Solaris 2.x
###
XLIBEDIR = -L/usr/openwin/lib		# Solaris 2
SLEEPLIB = -lposix4			# Solaris 2 only
LIB = $$COPA_HOME/copa.a  -lX11 $(SLEEPLIB) -lm  # Solaris 2



all: demo preview alarm

install: all

demo.obj: demo.o 

preview.obj: preview.o

demo: demo.o 
	$(CC) demo.o $(XLIBEDIR) $(LIB) -o demo

preview: preview.o
	$(CC) preview.o $(XLIBEDIR) $(LIB) -o preview

alarm: alarm.o
	$(CC) alarm.o $(XLIBEDIR) $(LIB) -o alarm

clean:
	rm demo.o alarm.o preview.o
SHAR_EOF
############################

echo examples/README
cat << \SHAR_EOF > examples/README
COPA EXAMPLES

Before using any of the examples, the environment
variable COPA_HOME needs to be set to hold the
path name of the main copa directory (where the
files gui.def and presets.pan are located).

Also, as with any X application, the DISPLAY
environment variable may need to be set, and
display permissions set using xhost.


hello.sh      - simple shell script example taken from the man 
		page copa(1).  To invoke, type:  sh hello.sh

hello.perl    - same as above but written in perl.
		To invoke, type:  perl hello.perl

The above will at least let you know if interprocess 
communication is working properly.


demo	      - an interactive introduction to copa which invokes
	  	just about all of its commands/functions.
	  	Compiled from demo.c when copa is installed.
		To invoke, type:  demo

demo.sh       - same as above, but written in Bourne shell.
		To invoke, type:  sh demo.sh

preview.sh    - a utility for viewing .pan files and generating
		Postscript dumps.  Written in Bourne shell.  
		To invoke, type:  sh preview.sh

preview.perl  - same as above, but written in perl.
		To invoke, type:  perl preview.perl

preview       - same as above, but written in C.  
	  	It will need to be compiled; edit the Makefile
	  	then do a make prev.
		To invoke, type:  preview
	  
alarm         - a simple "alarm clock" utility.
	  	It will need to be compiled; edit the Makefile
	  	then do a make alarm.  To invoke, type:  alarm &

browser.sh    - a simple man page browser utility to demonstrate
		the use of copa commands in an application.
		To invoke, type:  sh browser.sh

page.sh	      - for previewing pan files containing plots for 
		display on a standard sized sheet of paper,
		and generating Encapsulated PostScript dumps.
		To invoke type: sh page.sh

form.sh	      - a data entry example (uses files named *.dta)


As for real-life production examples, copa has successfully been 
used to implement gui control for a forms imaging/ocr application.
The application is written in C, and controls SwiftView (a nice,
flexible, fast viewer for tiff and other images) via piped commands.
If you have SwiftView (tech@ndg.com   tel: 503-620-0196), I would
be glad to send you a demo of this application.  

Steve G. (stevegru@welchlink.welch.jhu.edu)

SHAR_EOF
############################

echo examples/alarm.c
cat << \SHAR_EOF > examples/alarm.c
/***************
 *** ALARM.C - copa demo to make a reminder window appear
 *** at a given time.  Usage: alarm &
 ***
 */
#include <stdio.h>
main()
{
int h, m, s;
char buf[80];
char userin[80], msg[80];
int sec, ah, am, nowsec, thensec;

/* create window.. */
copa_window( 300, 100, 5.0, 3.0, "Alarm (copa)", 0.9 );

AGAIN:
/* get time.. */
systime( &h, &m, &s );

sprintf( buf, "Time now is %02d:%02d.\nEnter alarm time:", h, m );

/* change popup data entry area to large text, length 8 characters.. */
copa_setmec( "_POPD1", "text/size", "30" );

/* do the data entry popup.. */
copa_popentry( buf, "", 8, buf );

/* get hours and minutes... */
sscanf( buf, "%d:%d", &ah, &am );
if( ah > 23 || am > 59 || ah < 0 || am < 0 ) {
	copa_pop( "Invalid time..", "Try again,Exit", userin );
	if( userin[0] == 'E' ) exit(0);
	goto AGAIN;
	}

/* change popup data entry area to normal size, length 40.. */
copa_setmec( "_POPD1", "text/size", "10" );

/* get optional message */
copa_popentry( "Message:", "", 40, msg );
if( strcmp( msg, ".!none" )==0 ) msg[0] = '\0';

/* figure difference in seconds between now and alarm time.. */
nowsec = (m * 60) + (h * 3600);
thensec = (am * 60) + (ah * 3600);
/* handle the crossing of midnight.. */
if( nowsec > thensec ) nowsec -= 86400;
sec = thensec - nowsec;


/* make window disappear.. */
copa_display( "disappear" );

/* suspend until time is up.. */
sleep( sec );

/* re-display window with message.. */
copa_display( "appear" );

sprintf( buf, "The time is %02d:%02d\n\n%s", ah, am, msg );
copa_pop( buf, "OK", userin );
exit(0);
}

/*
 *** this routine is included in the plot stuff.. ***
 *
 * systime( int *hour, int *min, int *sec )
 * {
 *	int	tvec[2], *dtime ;
 *
 *	time( tvec );
 *	dtime = (int *)localtime( tvec );
 *	*hour = *(dtime+2) ;
 *	*min = *(dtime+1)  ;
 *	*sec = *(dtime)  ;
 * }
*/
SHAR_EOF
############################

echo examples/basic.pan
cat << \SHAR_EOF > examples/basic.pan
####################################################################
### BASIC.PAN - Example of a control panel
###
### The mechanism types and all attributes are defined in gui.def.
### Each mechanism definition begins with a "Proc" line.
### Attributes may be specified in any order.


###########################################
### Window background
### -- optional, but if done, must be done before anything else
###########################################

Proc backing		

### it will be called BACK..
*/tag: BACK		

### background color = light gray
color: 0.9


##########################################
### Buttons 
#########################################

Proc button

### they will be called B1..
*/tag: B1

### center horizonatally in the window..
*/align_h: C root C

### align top of buttons to 0.3 inches below window top..
*/align_v: T root T-0.3

### button text (can also be set using copa text)
text:	New search,View man page,Print man page,Exit

### button should not stay highlighted
flashpick: x


###########################
### Large text box, where individual words can be selected.
###########################

Proc textb

### it will be called TEXT
*/tag: TEXT

### center horizontally in the window..
*/align_h: C root C

### align top of textbox to 0.2 inches below buttons..
*/align_v: T B1 B-0.2

### 40 lines
nlines: 30

### 80 chars wide
box.width: 88

### 10 point text
text/size: 10

### make it selectable..
pick: x

### make it return only the first token on selected line..
result.format: 1

### make it ruled with lines
ruled: L

### put in some demo text
text: 
"NIS+		nis+ (1)	- a new version of the network information name service"
"byteorder	byteorder (3n)	- convert values between host and network byte order"
"dfstab		dfstab (4)	- file containing commands for sharing resources across a network"
"endhostent	gethostbyname (3n)  - get network host entry"
"endnetconfig	getnetconfig (3n)   - get network configuration database entry"
"endnetent	getnetbyname (3n)   - get network entry"
"endnetgrent	getnetgrent (3n)    - get network group entry"
"gethostbyaddr	gethostbyname (3n)  - get network host entry"
"gethostbyaddr_r gethostbyname (3n)  - get network host entry"
"gethostbyname	gethostbyname (3n)  - get network host entry"
"gethostbyname_r gethostbyname (3n)  - get network host entry"
"gethostent	gethostbyname (3n)  - get network host entry"
"gethostent_r	gethostbyname (3n)  - get network host entry"
"getnetbyaddr	getnetbyname (3n)   - get network entry"
"getnetbyaddr_r	getnetbyname (3n)   - get network entry"
"getnetbyname	getnetbyname (3n)   - get network entry"
"getnetbyname_r	getnetbyname (3n)   - get network entry"
"getnetconfig	getnetconfig (3n)   - get network configuration database entry"
"getnetconfigent getnetconfig (3n)   - get network configuration database entry"
"getnetent	getnetbyname (3n)   - get network entry"
"getnetent_r	getnetbyname (3n)   - get network entry"
"getnetgrent	getnetgrent (3n)    - get network group entry"
"getnetgrent_r	getnetgrent (3n)    - get network group entry"
"htonl		byteorder (3n)	- convert values between host and network byte order"
"htons		byteorder (3n)	- convert values between host and network byte order"
"if		if_tcp (7)	- general properties of Internet Protocol network interfaces"
"if_tcp		if_tcp (7)	- general properties of Internet Protocol network interfaces"
"ifconfig	ifconfig (1m)	- configure network interface parameters"
"in.rdisc	in.rdisc (1m)	- network router discovery daemon"
"in.routed	in.routed (1m)	- network routing daemon"
"inet_network	inet (3n)	- Internet address manipulation"
"innetgr		getnetgrent (3n)    - get network group entry"
"listen		listen (1m)	- network listener daemon"
"lockd		lockd (1m)	- network lock daemon"
"nc_perror	getnetconfig (3n)   - get network configuration database entry"
"nc_sperror	getnetconfig (3n)   - get network configuration database entry"
"netconfig	netconfig (4)	- network configuration database"
"netgroup	netgroup (4)	- list of network groups"
"netmasks	netmasks (4)	- network mask database"
"netstat		netstat (1m)	- show network status"
"networks	networks (4)	- network name database"
"nfsstat		nfsstat (1m)	- Network File System statistics"
"nis		nis+ (1)	- a new version of the network information name service"
"nis+		nis+ (1)	- a new version of the network information name service"
"nlsadmin	nlsadmin (1m)	- network listener service administration"
"ntohl		byteorder (3n)	- convert values between host and network byte order"
"ntohs		byteorder (3n)	- convert values between host and network byte order"
"ping		ping (1m)	- send ICMP ECHO_REQUEST packets to network hosts"
"rdisc		in.rdisc (1m)	- network router discovery daemon"
"routed		in.routed (1m)	- network routing daemon"
"routing		routing (4)	- system support for packet network routing"
"rpc.rusersd	rpc.rusersd (1m)    - network username server"
"rpc.rwalld	rpc.rwalld (1m) - network rwall server"
"rpld		rpld (1m)	- x86 Network Booting RPL (Remote Program Load) Server"
"rusersd		rpc.rusersd (1m)    - network username server"
"rwall		rwall (1m)	- write to all users over a network"
"rwalld		rpc.rwalld (1m) - network rwall server"
"sethostent	gethostbyname (3n)  - get network host entry"
"setnetconfig	getnetconfig (3n)   - get network configuration database entry"
"setnetent	getnetbyname (3n)   - get network entry"
"setnetgrent	getnetgrent (3n)    - get network group entry"
"snoop		snoop (1m)	- capture and inspect network packets"
"spray		spray (3n)	- scatter data in order to test the network"
"statd		statd (1m)	- network status monitor"
"tr		tr (7)		- IBM 16/4 Token Ring Network Adapter device driver"
"ttyhstmgr	ttyhstmgr (1m)	- administer hosts on a network"
"ypfiles		ypfiles (4)	- Network Information Service Version 2, formerly knows as YP"
"yppasswd	yppasswd (1)	- change your network password in the NIS database"
SHAR_EOF
############################

echo examples/blank.dta
cat << \SHAR_EOF > examples/blank.dta
CONTROLBUTTONS 
FIRSTMEC 
LASTNAME 
PR1 
FIRSTNAME 
ADDRLINE1 
ADDRLINE2 
ADDRLINE3 
PHONEINFO 
EMAILINFO 
TYPE 
CATEGORY 

SHAR_EOF
############################

echo examples/browser.sh
cat << \SHAR_EOF > examples/browser.sh
#!/bin/sh
## **************************************************************
# BROWSER.SH
# A simple gui man page browser application using copa
## ************************************************************* 

### have more(1) pause when finished..
PAGER="more -s -w"    ## solaris only?
export PAGER

which copa

### start copa.. 
copa_window 300 100 9.0 8.0 "Copa manpage browser (sh)" 0.9 &
sleep 1

### hold off on displaying the panel..
copa display holdrefresh

### load the control panel file..
copa panload examples/basic.pan b1

### loop on search words..
while :
do

    ### get the search word..
    WORD=`copa popentry "Enter a word to search on" "" 20`

    ### put up an in-progress message..
    copa popmsg "In progress.." ""

    ### run man -k and capture results into the textbox
    copa text TEXT "!man -k $WORD"

    copa popclear

    ### now display it
    copa display refresh

    PAGE=none

    ### loop on panel selections..
    while :
    do

	### get user action
	PICK=`copa get`

	if [ "$PICK" = "Exit" ]; then
	    copa quit
	    exit

	elif [ "$PICK" = "New search" ]; then
	    break

	elif [ "$PICK" = "View man page" ]; then
	    if [ "$PAGE" = "none" ]; then
		ANS=`copa pop "Nothing selected yet." OK`
		continue
	    fi

	    ### otherwise, display the man page in an xterm..
	    xterm -e man $PAGE 

	elif [ "$PICK" = "Print man page" ]; then
	    if [ "$PAGE" = "none" ]; then
		ANS=`copa pop "Nothing selected yet." OK`
		continue
	    fi

	    ### otherwise, print the man page..
	    man -t $PAGE

	else
	    ### user made a selection from the list..
	    PAGE=$PICK
        fi
     done

done
SHAR_EOF
############################

echo examples/demo.c
cat << \SHAR_EOF > examples/demo.c
/**************************************************************
 * DEMO.C
 * This is a demo program which uses most of the COPA C functions.
 * See demo.sh for an equivalent program written in Bourne shell.
 ************************************************************** 
*/

#include <stdio.h>
main( )
{

/* ------|---------|---------|---------|---------|---------|---------|---------| */
char userin[80];
char buf[80], key[12], xpos[12], ypos[12];
int len;


/* start copa.. */
copa_window( 300, 100, 9.0, 8.0, "Copa demo (C lang)", 0.9 );

TOP:

copa_version();

copa_pop( 
"Welcome to copa.\n\
Copa is a kit for developing gui control panels.\n\
This is a demo program which will introduce you to\n\
some of the capabilities of copa.  This demo\n\
was written in C and compiled using the included\n\
object library copa.a.  Copa can also be used in\n\
shell scripts, perl programs, and other environments.\n\n\
This demo should be run in the examples directory.  It\n\
doesn't do anything other than echo your\n\
responses to standard output.\n\n\
(To respond, click on the button of your choice.)\n\
Do you want to continue?"  ,   "Yes,No"  , userin  );

printf( "%s\n", userin );

if( userin[0] != 'Y' ){ copa_quit(); exit(0); }


/* adjust size of text in popup box to 10 point.. */
copa_setmec( "_POP", "text/size", "10" );

/* set size so scrolling occurs if over 35 lines.. */
copa_setmec( "_POP", "nlines", "35" );


/* produce a popup box.. */
copa_pop( "!cat ../Copyright", "Continue,Exit",  userin );

printf( "%s\n", userin );
if( strcmp( userin, "Exit" )==0 ) { copa_quit(); exit(0); }

/* adjust size of text in popup box to 12 point.. */
copa_setmec( "_POP", "text/size", "12" );
/* go back to auto-size.. */
copa_setmec( "_POP", "nlines", "0" );

copa_pop( 
"This and the preceding are examples\n\
of 'popup' boxes with buttons.  They can\n\
be produced by using the copa pop command.\n\
The user responds by clicking on the desired\n\
button with the mouse.", "OK,Exit", userin );

printf( "%s\n", userin );
if( strcmp( userin, "Exit" )==0 ) { copa_quit(); exit(0); }

/* do a dataentry popup box */
copa_popentry( 
"Here's an example of a popup box with a data entry\n\
area instead of buttons.  These can be produced by using\n\
the copa popentry command.  You can type in a response,\n\
or use the default if you wish.\n\n\
When finished, press ENTER, TAB, ESC, or click with the mouse.\n\n\
What town are you in?",  "Baltimore",  20, userin );

printf( "%s\n", userin );

copa_poplist( 
"Now this is an example of a popup box with a listbox\n\
which contains some selections, produced using the\n\
copa poplist command.  The listbox can be filled\n\
filled with literal text, or the results of a system\n\
command such as 'ls', or both.\n\n\
If there are lots of entries in the listbox, it will become\n\
scrollable and a scrolling control will appear automatically\n\
on the right side.\n\n\
Select an entry from the list by clicking on it with the mouse.\n\
(Again, this demo will just echo the file name)",
	"!ls", "Cancel,Exit",  userin );

printf( "%s\n", userin );
if( strcmp( userin, "Exit" )==0 ){ copa_quit(); exit(0); }



/* load slider panel */
copa_panload( "slider.pan", "sl1" );
/* slider.pan has mechanisms with the following tags:
   HEIGHT WEIGHT IQ
 */

while( 1 ) {
	copa_get( userin );
	if( strcmp( userin, "OK" )==0 ) {
		break;
		}
	}
printf( "Here are the results of copa getvalue .!all:\n" );
copa_getvalue( ".!all" );

printf( "Here are the results of copa getvalue (individual):\n" );
copa_getvalue( "HEIGHT", userin );
printf( "Height = %s inches\n", userin );
copa_getvalue( "WEIGHT", userin );
printf( "Weight = %s lbs\n", userin );
copa_getvalue( "IQ", userin );
printf( "IQ = %s\n", userin );

/* remove panel (note: the above values must be gotten before panel goes away) */
copa_panquit();


copa_pop( 
"To make a panel go away,\nthe copa panquit command\n\
is used.  Panels can be nested.\n\n\
The following is another\n\
example of a control panel...", "OK,Exit", userin );

printf( "%s\n", userin );
if( strcmp( userin, "Exit" )==0 ) { copa_quit(); exit(0); }

copa_panload( "examp1.pan", "ex1" );
/* has these mechanisms: MENU LIST MSG INPUT1 INPUT2 */


/* copa_text( "MSG", "Select from the menu list\n\
on the right side.." ); 
*/
copa_echo( ".!begin MSG" );
copa_echo( "Select from the menu list" );
copa_echo( "on the right side" );
copa_echo( "by clicking with the mouse." );
copa_echo( ".!end" );

copa_text( "LIST", "!cat /etc/passwd | sed \"s/:.*//\"" );


/*
Exit 	Info about this 	Basic control pan.  Plots gallery 	
Progress msg 	Sliders again 	Rlimit test
*/
 


while( 1 ) {
	copa_get( userin );

	printf( "%s\n", userin );

	if( strcmp( userin, "Exit" )==0 ) break;

	else if( strcmp( userin, "Info about this" )==0 ) {
		copa_pop( 
"This control panel is defined in\n\
the file examp1.pan.  It doesn't do\n\
anything other than echo your selections.\n\
The listbox on the right has been filled \n\
with names from /etc/passwd, using the\n\
copa text command.\n\n\
When you're ready to leave this panel,\n\
choose 'Exit' from the menu..",  "OK",  userin );

		printf( "%s\n", userin );
		}

	else if( strcmp( userin, "Progress msg" )==0 ) {

		copa_popmsg(
"Here is an example of a popup message\n\
box, useful for 'in progress' messages.\n\
These are produced using copa popmsg,\n\
and removed using copa popclear.", "" );
printf( "(sleeping for 5 seconds..)\n" );
		sleep( 5 );
		copa_popclear();


		copa_popmsg(
"You can also have buttons on an\n\
'in progress' message, perhaps to cancel the\n\
process you are waiting for, for example.\n\
However, the buttons in this case respond \n\
only if the program is set up to check\n\
the status of the buttons every so often..\n\n\
A loop containing 1 second sleeps is now running.\n\
Press 'Cancel' when ready to continue..", "Cancel,Exit" );

		while( 1 ) {
			sleep( 1 );
			copa_mget( "nonblocking", userin );
			if( strcmp( userin, "Cancel" )==0 ) break;
			if( strcmp( userin, "Exit" )==0 ){ copa_quit(); exit(0); }
			}
		copa_popclear();
		}


	else if( strcmp( userin, "Sliders again" ) ==0 ) {
		copa_pop( 
"You've used the slider panel before..\n\
Do you want to use it in its current\n\
state (copa panuse), or load a \n\
fresh copy (copa panload)?",  "Current state,Fresh copy", userin );

		printf( "%s\n", userin );

		if( userin[0] == 'C' ) copa_panuse( "sl1" );
		else copa_panload( "slider.pan", "sl1" ); 
		/* note: the above could be given some tag
		other than sl1 if we wanted two distinct instances 
		available..*/

		while( 1 ) {
			copa_get( userin );
			if( strcmp( userin, "OK" )==0 ) break;
			}
		copa_panquit();
		}

	else if( strcmp( userin, "Plots gallery" )==0 ) {
		copa_pop( 
"Copa includes optional functionality to create\n\
plots and graphs of various kinds\n\
based on data.", "OK,Exit", userin );
		if( strcmp( userin, "Exit" )==0 ){ copa_quit(); exit(0); }
		copa_display( "holdrefresh" );
		copa_panload( "plots.pan", "p1" );

		/* add an exit button.. */
		copa_panadd( "exitb.pan" );
		copa_display( "refresh" );

		while( 1 ) {
			copa_get( userin );
			if( strcmp( userin, "PostScript" )==0 ) {
				copa_popentry( "File name for PostScript output:", "out.ps", 15, userin );
				copa_ps( "Example", userin, "L" );
				}
			else 	{
				copa_panquit();
				break;
				}
			}
		}
	else if( strcmp( userin, "Data entry" )==0 ) {
		copa_panload( "form.pan", "fm" );	
		while( 1 ) {
			copa_get( userin );
			printf( "%s\n", userin );
			if( strcmp( userin, "Cancel" )==0 ) break;
			}
		copa_panquit();
		}

	else if( strcmp( userin, "Basic control pan." )==0 ) {
		copa_panload( "basic.pan", "bas" );
		while( 1 ) {
			copa_get( userin );
			printf( "%s\n", userin );
			if( strcmp( userin, "Exit" )==0 ) break;
			}
		copa_panquit();
		}

	else if( strcmp( userin, "Other tests" )==0 ) {
		copa_poplist( "Select a test..", "refresh\nregen\nresize\ndisappear\nrlimit\nrinfo\ngetentry", 
			"Cancel", userin );
		if( strcmp( userin, "rlimit" )== 0 ) {
			copa_pop( 
"This will test the copa rlimit command.\n\
Which mechanisms should be responsive?", "MENU,.!all", userin );
			copa_rlimit( userin );
			}
		else if( strcmp( userin, "redraw" )==0 ) copa_display( "refresh" );
		else if( strcmp( userin, "regen" )==0 ) copa_display( "regen" );
		else if( strcmp( userin, "resize")==0 ) {
			copa_resize( 300, 10, 10.0, 10.0, 0.0 );
			copa_pop( "Resized to 10x10", "OK", userin );
			copa_resize( 300, 10, 9.0, 8.0, 0.9 );
			}
		else if( strcmp( userin, "getentry" )==0 ) {
			copa_getentry( "INPUT1", userin );
			printf( "%s\n", userin );
			}
		else if( strcmp( userin, "disappear" )==0 ) {
			copa_display( "disappear" );
			sleep( 1 );
			copa_display( "appear" );
			}
		else if( strcmp( userin, "rinfo" )==0 ) {
			while( 1 ) {
				copa_popmsg( "Press any key or mouse button..", "" );
				/* get mouse click */
				copa_mget( "mousepos", userin );
				copa_popclear();
				
				/* find out which key was pressed */
				copa_rinfo( "key", key );
				/* find out x location in inches from lower left */
				copa_rinfo( "x", xpos );
				/* find out y location in inches from lower left */
				copa_rinfo( "y", ypos );
				
				sprintf( buf, "You pressed %s at x=%s and y=%s.", key, xpos, ypos );
				copa_pop( buf, "OK,Exit", userin );
				
				if( strcmp( userin, "Exit" )==0 ) break;
				}
			}
		}

	}

copa_quit();
}
SHAR_EOF
############################

echo examples/demo.sh
cat << \SHAR_EOF > examples/demo.sh
#!/bin/sh
###*************************************************************
#  DEMO.SH
#* This is a demo program which uses most of the COPA commands.
#* See demo.c for an equivalent program written in C.
#************************************************************** 


which copa

### start copa.. */
copa_window 300 100 9.0 8.0 "Copa demo (Bourne shell)" 0.9 &
sleep 1

copa version

echo "Display is pid# `copa display ping`"

UIN=`copa pop "Welcome to copa.
Copa is a kit for developing gui control panels.
This is a demo program which will introduce you to
some of the capabilities of copa.  This demo
was written in C and compiled using the included
object library copa.a.  Copa can also be used in
shell scripts, perl programs, and other environments.

This demo should be run in the examples directory.  It 
doesn't do anything other than echo your
responses to standard output.

(To respond, click on the button of your choice.)
Do you want to continue?"    "Yes,No" `

if [ "$UIN" != "Yes" ]; then copa quit; exit; fi



### adjust size of text in popup box to 10 point.. */
copa setmec _POP text/size 10

### set size of popup box (so scrolling occurs)..
copa setmec _POP nlines 35

### produce a popup box.. */
UIN=`copa pop "!cat ../Copyright" "Continue,Exit"`

echo $UIN

if [ "$UIN" = "Exit" ]; then copa quit; exit; fi

### adjust size of text in popup box to 12 point.. */
copa setmec _POP text/size 12 

### put back to auto-size..
copa setmec _POP nlines 0

UIN=`copa pop "This and the preceding are examples
of 'popup' boxes with buttons.  They can
be produced by using the copa pop command.
The user responds by clicking on the desired
button with the mouse."  "OK,Exit"`

echo $UIN

if [ "$UIN" = "Exit" ]; then copa quit; exit; fi

### do a dataentry popup box */
UIN=`copa popentry "Here's an example of a popup box with a data entry
area instead of buttons.  These can be produced by using
the copa popentry command.  You can type in a response,
or use the default if you wish.

When finished, press ENTER, TAB, ESC, or click with the mouse.

What town are you in?"  "Baltimore"  20`

echo $UIN

UIN=`copa poplist  "Now this is an example of a popup box with a listbox
which contains some selections, produced using the
copa poplist command.  The listbox can be filled
filled with literal text, or the results of a system
command such as 'ls', or both.

If there are lots of entries in the listbox, it will become
scrollable and a scrolling control will appear automatically
on the right side.

Select an entry from the list by clicking on it with the mouse.
(Again, this demo will just echo the file name"  "!ls"  "Cancel,Exit" `

echo $UIN

if [ "$UIN" = "Exit" ]; then copa quit; exit; fi



### load slider panel */
copa panload  "slider.pan"  "sl1"

### slider.pan has mechanisms with the following tags:
### HEIGHT WEIGHT IQ

while :
do
	UIN=`copa get`
	if [ "$UIN" = "OK" ]; then 
		break 
	fi
done

echo "Here is the result of copa getvalue .!all:"
copa getvalue .!all

echo "Here are the results of copa getvalue (individual):"
HEIGHT=`copa getvalue  HEIGHT`
echo "Height = $HEIGHT inches"

WEIGHT=`copa getvalue  WEIGHT`
echo "Weight = $WEIGHT inches"

IQ=`copa getvalue  IQ`
echo "IQ = $IQ"

### remove panel (note: the above values must be gotten before panel goes away) */
copa panquit

UIN=`copa pop "To make a panel go away,
the copa panquit command
is used.  Panels can be nested.

The following is another
example of a control panel..." "OK,Exit"`

echo $UIN
if [ "$UIN" = "Exit" ]; then copa quit; exit; fi

copa panload  "examp1.pan" "ex1" 
### has these mechanisms: MENU LIST MSG INPUT1 INPUT2 */


copa echo  ".!begin MSG" 
copa echo  "Select from the menu list" 
copa echo  "on the right side" 
copa echo  "by clicking with the mouse." 
copa echo  ".!end" 

copa text  "LIST" "!cat /etc/passwd | sed \"s/:.*//\"" 



while :  #{
do
	UIN=`copa get`

	echo $UIN
	if [ "$UIN" = "Exit" ]; then copa quit; exit

	elif [ "$UIN" = "Info about this" ]; then
		UIN=`copa pop "This control panel is defined in
the file examp1.pan.  It doesn't do
anything other than echo your selections.
The listbox on the right has been filled 
with names from /etc/passwd, using the
copa text command.

When you're ready to leave this panel,
choose 'Exit' from the menu.."  "OK" ` 

		echo $UIN

	elif [ "$UIN" = "Progress msg" ]; then

		copa popmsg "Here is an example of a popup message
box, useful for 'in progress' messages.
These are produced using copa popmsg,
and removed using copa popclear."  ""

		echo "(sleeping for 5 seconds..)"
		sleep 5 
		copa popclear

		copa popmsg "You can also have buttons on an
'in progress' message, perhaps to cancel the
process you are waiting for, for example.
However, the buttons in this case respond 
only if the program is set up to check
the status of the buttons every so often..

A loop containing 1 second sleeps is now running.
Press 'Cancel' when ready to continue.." "Cancel,Exit" 

		while :
		do
			sleep 1 
			UIN=`copa mget nonblocking` 

			if [ "$UIN" = "Cancel" ]; then break; 
			elif [ "$UIN" = "Exit" ]; then  copa quit; exit; 
			fi
		done

		copa popclear
		

	elif [ "$UIN" = "Sliders again" ]; then
		UIN=`copa pop "You've used the slider panel before..
Do you want to use it in its current
state (copa panuse), or load a 
fresh copy (copa panload)?"  "Current state,Fresh copy"`

		echo $UIN

		if [ "$UIN" = "Current state" ]; then 
			copa panuse sl1
		else
			copa panload slider.pan sl1
		fi
		### note: the above could be given some tag
		### other than sl1 if we wanted two distinct instances 
		### available..

		while :
		do
			UIN=`copa get`
			if [ "$UIN" = "OK" ]; then break; fi
		done
		copa panquit
		

	elif [ "$UIN" = "Plots gallery" ]; then
		UIN=`copa pop  "Copa includes optional functionality to create
plots and graphs of various kinds
based on data." "OK,Exit"`

		if [ "$UIN" = "Exit" ]; then copa quit; exit; fi
		copa display  holdrefresh 
		copa panload  plots.pan p1 

		### add an exit button.. 
		copa panadd exitb.pan 

		copa display   refresh

		while :
		do
			UIN=`copa get`

			if [ "$UIN" = "PostScript" ]; then
				UIN=`copa popentry  "File name for PostScript output:" "out.ps" 15`
				copa ps  "Example" $UIN  L
				
			else
				copa panquit
				break
			fi
		done

	elif [ "$UIN" = "Basic control pan." ]; then
		copa panload basic.pan bas
		while :
		do
			UIN=`copa get`
			echo $UIN
			if [ "$UIN" = "Exit" ]; then break; fi
		done
			
		copa panquit

	elif [ "$UIN" = "Data entry" ]; then
		copa panload form.pan bas
		while :
		do
			UIN=`copa get`
			echo $UIN
			if [ "$UIN" = "Cancel" ]; then break; fi
		done

		copa panquit
			
		

	elif [ "$UIN" = "Other tests" ]; then
		UIN=`copa poplist  "Select a test.." "refresh
regen
resize
disappear
rlimit
rinfo
getentry" "Cancel" `

		if [ "$UIN" = "rlimit" ]; then
			UIN=`copa pop  "This will test the copa rlimit command.
Which mechanisms should be responsive?" "MENU,.!all"`
			copa rlimit $UIN
			 
		elif [ "$UIN" = "resize" ]; then
			copa resize 300 10 10 10 0.0
			copa pop "Resized to 10x10" "OK"
			copa resize 300 10 9.0 8.0 0.9
			
		elif [ "$UIN" = "redraw" ]; then
		        copa display  refresh
		elif [ "$UIN" = "regen" ]; then
			copa display regen
		elif [ "$UIN" = "disappear" ]; then
			copa display disappear
			sleep 1 
			copa display appear
		elif [ "$UIN" = "getentry" ]; then
			UIN=`copa getentry INPUT1`
			echo $UIN
		elif [ "$UIN" = "rinfo" ]; then
			while :
			do
			  copa popmsg "Press any key or mouse button.." "" 
			  ### get mouse click */
			  UIN=`copa mget  mousepos`
			  copa popclear
				
			  ### find out which key was pressed */
			  KEY=`copa rinfo  key`

			  ### find out x location in inches from lower left */
			  XPOS=`copa rinfo x`

			  ### find out y location in inches from lower left */
			  YPOS=`copa rinfo y`
				
			  UIN=`copa pop "You pressed $KEY at x=$XPOS and y=$YPOS" "Ok,Exit"`
			  if [ "$UIN" = "Exit" ]; then break; fi
			done
		 fi

	fi

done #}
 
copa quit
SHAR_EOF
############################

echo examples/doe.dta
cat << \SHAR_EOF > examples/doe.dta
CONTROLBUTTONS 
FIRSTMEC 
LASTNAME Doe
PR1 
FIRSTNAME Jane
ADDRLINE1 201 Main St.
ADDRLINE2 Park Town, AA 00000
ADDRLINE3 
PHONEINFO 555-555-1212
EMAILINFO 
TYPE Family
CATEGORY Category J

SHAR_EOF
############################

echo examples/examp1.pan
cat << \SHAR_EOF > examples/examp1.pan
####################################################################
### EXAMP1.PAN - Example of a control panel
###
### The mechanism types and all attributes are defined in gui.def.
### Each mechanism definition begins with a "Proc" line.
### Attributes may be specified in any order.


###########################################
### Window background
### -- optional, but if done, must be done before anything else
###########################################

Proc backing		

### it will be called BACK..
*/tag: BACK		

### center it in the window..
*/align_h: C root C	
*/align_v: C root C

### background color = white..
color: 1.0		

### backing box will be 6.3 inches wide and 8 inches high....
box.width: 6.3		
box.height: 8



#####################
### Vertical menu ###
#####################

Proc textb

### it will be called MENU..
*/tag: MENU		

### align left side of MENU 0.2 inches in from the left side of the backing...
*/align_h: L BACK L+0.2 

### align top side of MENU 0.4 inches down from the top of the backing..
*/align_v: T BACK T-0.4 

### 12 point text..
text/size: 12		

### text entries will be centered..
align: C		

### text entries will be spaced at 0.35 inches per line..
spacing: 0.35		

### there will be line rulings between lines..
ruled: L		

### it will be possible to select lines with the mouse..
pick: x			

### up to 11 lines of text will be displayed..
nlines: 11		

### 17 characters wide..
box.width: 17		

### no margin (0 inches) will appear around the box..
box.margin: 0		

### do rectangle decoration (shadow)..
dress: x		

### hilighting will be reset after mouse selection..
flashpick: x		

### the text to be displayed..
text: 	Exit
	Info about this
	Basic control pan.
	Plots gallery
	Data entry
	Progress msg
	Sliders again
	Other tests




###############################
### label for vertical menu ###
###############################

Proc textb

*/tag: MENULABEL

# align left of label to left of MENU..
*/align_h: L MENU L

# align bottom of label to top of MENU..
*/align_v: B MENU T

box.width: 10
box.color: 0
text: Menu
text/size: 12
text/pen: white
dress:






#################
### List area ###
#################
Proc textb

### it will be called LIST..
*/tag: LIST 

### align right side of LIST to 0.2 inches in from the right side of the backing..
*/align_h: R BACK R-0.2

### align top side of LIST to 0.4 inches down from the top of the backing..
*/align_v: T BACK T-0.4

### 10 point text..
text/size: 10

### up to 12 lines will be displayed..
nlines: 12

### 28 characters wide..
box.width: 28

### 0.3 inch spacing between lines..
spacing:  0.3

### rulings will appear between lines..
ruled: L

### it will be possible to select lines with the mouse..
pick: x

### put a 0.5 inch margin around the box..
box.marg_l: 0.5

### no text to be displayed at present..
text: 

############################
### label for list area..###
############################
Proc textb
*/tag: LISTLABEL
*/align_h: L LIST L
*/align_v: B LIST T
*/inherit: MENULABEL
text: List


#########################
### Data entry area 1 ###
#########################

Proc dataentry

# it will be called INPUT1..
*/tag: INPUT1

# align left side of INPUT1 0.2 inches in from the left side of the backing..
*/align_h: L BACK L+0.2

# align bottom of INPUT1 1 inch up from the bottom of the window..
*/align_v: B BACK B+1

# 30 point text (well, big anyway)..
text/size: 30

# maximum input length is 20..
maxlength: 20

# do rectangle decoration (shadow)..
dress: x

# the text of the prompt...
prompt: input1> 


#########################
### Data entry area 2 ###
#########################
Proc dataentry
*/tag: INPUT2
*/align_h: L BACK L+0.2
*/align_v: B BACK B+0.2
text/size: 30
maxlength: 20
dress: x
prompt: input2> 


####################
### Message area ###
####################
Proc textb

# it will be called MSG..
*/tag: MSG

# align left side of MSG 0.2 inches in from left side of the backing..
*/align_h: L BACK L+0.2

# align bottom side of MSG 0.2 inches bove the top side of INPUT1..
*/align_v: B INPUT1 T+0.2

# 12 point text..
text/size: 12

# center the lines of text within the box..
align: C

# display up to 4 lines..
nlines: 4

# 46 characters wide..
box.width: 46

# decorate the rectangle (shadow)..
dress: x

# the text to appear in the box..
text: Control Panel
Demo


##############################
### label for message area ###
##############################
Proc textb
*/tag: MSGLABEL

# align left of label to left of MSG
*/align_h: L MSG L

# align bottom of label to top of MSG
*/align_v: B MSG T

*/inherit: MENULABEL
text: Messages
SHAR_EOF
############################

echo examples/examp2.pan
cat << \SHAR_EOF > examples/examp2.pan
####################################################################
### EXAMP2.PAN - Another example of a control panel
###
### The mechanism types and all attributes are defined in gui.def.
### Each mechanism definition begins with a "Proc" line.
### Attributes may be specified in any order.


###########################################
### Window background
### Some independent buttons
Proc button
*/tag: B1
*/align_h: C root L+1
*/align_v: T root T-0.2
text: CPU
box.margin: 0.3
width: 1.2

Proc button
*/tag: B2
*/inherit: B1
*/align_h: C root L+3
*/align_v: T root T-0.2
text: Packets

Proc button
*/tag: B3
*/inherit: B1
*/align_h: C root L+5
*/align_v: T root T-0.2
text: Disk

Proc button
*/tag: B4
*/inherit: B1
*/align_h: C root L+1
*/align_v: T root T-1.2
text: Errors

Proc button
*/tag: B5
*/inherit: B1
*/align_h: C root L+3
*/align_v: T root T-1.2
text: Page

Proc button
*/tag: B6
*/inherit: B1
*/align_h: C root L+5
*/align_v: T root T-1.2
text: Swap


### Now a set of radio buttons
Proc button
*/tag: RADIO1
*/align_h: C root C
*/align_v: B root B+0.5
text: Define,Replace,Exit
flashpick: x


### text box
Proc textb
*/tag: TEXT1
*/align_h: R root R-0.2
*/align_v: T root T-0.2
nlines: 18
box.width: 15
pick: x
spacing: 0.25
ruled: L
unpick: x
text/size: 12
text:
cop
cope
Copeland
Copenhagen
Copernican
Copernicus
copious
coplanar
copolymer
copperas
Copperfield
copperhead
coppery
copra
coprinus
coproduct
copter
copy
copybook
copyright
copywriter
coquette
coquina
coral
coralberry
coralline
corbel
Corbett
Corcoran
cord
cordage
cordial
cordite
cordon
corduroy


Proc textb
*/tag: TEXT2
*/align_h: L root L+0.2
*/align_v: T root T-2.5
nlines: 20
box.width: 70
pick: x
unpick: x
pick.mode: W
text/size: 7
scrollcon: M
text:
"(NOTE: click on a word..)
""
"     While the compiler allows 8-bit strings and comments, 8-bits"
"     are not allowed anywhere else.  The cc command does not gen-"
"     erate or support 8-bit symbol names because, until  ANSI  C,"
"     non-ASCII  support  was not expected.  The ANSI C specifica-"
"     tion now suggests that string literals and comments can con-"
"     tain any characters from any character code set."
" "
"     The following commands are affected by this lack of  support"
"     for   8-bit   characters:   cflow(1V),   cpp(1),   ctags(1),"
"     cxref(1V), dbx(1), lint(1V), m4(1V), and yacc(1)."
" "
"BUGS"
"     The program context given in syntax error messages is  taken"
"     from  the  input text after the C preprocessor has performed"
"     substitutions.  Therefore, error messages  involving  syntax"
"     errors in or near macro references or manifest constants may"
"     be misleading."
" "
"     Compiling with optimization level 2 or greater  may  produce"
"     incorrect  object  code  if  tail-recursion  elimination  is"
"     applied to functions called  with  fewer  actual  parameters"
"     (arguments)  than  the  number  of  formal parameters in the"
"     function's definition. Such parameter-count  mismatches  can"
"     be detected using lint(1V)."
SHAR_EOF
############################

echo examples/exitb.pan
cat << \SHAR_EOF > examples/exitb.pan
### Exit/PostScript buttons, for escape from 'preview' panel display

Proc button
*/tag: EXITB
*/align_h: L root L
*/align_v: B root B
text: Exit,PostScript
flashpick: x
SHAR_EOF
############################

echo examples/form.pan
cat << \SHAR_EOF > examples/form.pan
####################################################################
### FORM.PAN - Example of a control panel "form" for data entry
###
### The mechanism types and all attributes are defined in gui.def.
### Each mechanism definition begins with a "Proc" line.
### Attributes may be specified in any order.


###########################################
### Window background
### -- optional, but if done, must be done before anything else
###########################################

Proc backing		

### it will be called BACK..
*/tag: BACK		

### center it in the window..
*/align_h: C root C	
*/align_v: C root C

### background color 
color: 0.8

### backing box will be 7 inches wide and 8 inches high....
box.width: 7
box.height: 8


###########################################
### Control buttons
###########################################
Proc button
*/tag: CONTROLBUTTONS
*/align_h: C BACK C
*/align_v: B BACK B+0.5
text: Edit,Save,Cancel
flashpick: x

###########################
### Make an invisible textbox
### which contains the name of the first data entry field.
### This will be checked by the program, so it knows where to start..
###########################
Proc textb
*/tag: FIRSTMEC
*/display: 
text: LASTNAME

#########################
### Data entry areas  
### note: prompts are done as separate textb
### to get inverse color and alignment the way we want it..
#########################

Proc dataentry
*/tag: LASTNAME
*/align_h: L BACK L+2
*/align_v: T BACK T-0.2
text/size: 12
maxlength: 20
dress: x
info: required
next: FIRSTNAME

### Prompt
Proc textb
*/tag: PR1
*/align_h: R BACK L+2
*/align_v: T BACK T-0.2
box.width: 12
box.color: 0
text: "Last name"
text/size: 10
text/pen: white
dress:





Proc dataentry
*/tag: FIRSTNAME
*/align_h: L BACK L+2
*/align_v: T BACK T-0.7
text/size: 12
maxlength: 15
dress: x
info: required
next: ADDRLINE1

### Prompt
Proc textb
*/inherit: PR1
*/align_h: R BACK L+2
*/align_v: T BACK T-0.7
text: "First name"





Proc dataentry
*/tag: ADDRLINE1
*/align_h: L BACK L+2
*/align_v: T BACK T-1.2
text/size: 10
maxlength: 35
dress: x
info: required
next: ADDRLINE2

### Prompt
Proc textb
*/inherit: PR1
*/align_h: R BACK L+2
*/align_v: T BACK T-1.2
text: "Addr line 1"





Proc dataentry
*/tag: ADDRLINE2
*/align_h: L BACK L+2
*/align_v: T BACK T-1.7
text/size: 10
maxlength: 35
dress: x
next: ADDRLINE3

### Prompt
Proc textb
*/inherit: PR1
*/align_h: R BACK L+2
*/align_v: T BACK T-1.7
text: "Addr line 2"





Proc dataentry
*/tag: ADDRLINE3
*/align_h: L BACK L+2
*/align_v: T BACK T-2.2
text/size: 10
maxlength: 35
dress: x
next: PHONEINFO

### Prompt
Proc textb
*/inherit: PR1
*/align_h: R BACK L+2
*/align_v: T BACK T-2.2
text: Addr line 3




Proc dataentry
*/tag: PHONEINFO
*/align_h: L BACK L+2
*/align_v: T BACK T-2.7
text/size: 12
maxlength: 28
dress: x
next: EMAILINFO

### Prompt
Proc textb
*/inherit: PR1
*/align_h: R BACK L+2
*/align_v: T BACK T-2.7
text: "Phone info"




Proc dataentry
*/tag: EMAILINFO
*/align_h: L BACK L+2
*/align_v: T BACK T-3.2
text/size: 12
maxlength: 36
dress: x

### Prompt
Proc textb
*/inherit: PR1
*/align_h: R BACK L+2
*/align_v: T BACK T-3.2
text: "Email info"



#################
### button choice
#################
Proc button
*/tag: TYPE
*/align_h: L BACK L+2
*/align_v: T BACK T-4
text/size: 10
text: Family,Neighbor,Friend,Business,Other

### Prompt
Proc textb
*/inherit: PR1
*/align_h: R BACK L+2
*/align_v: T BACK T-4
text: "Contact type"



##############
### list box
##############
Proc textb
*/tag: CATEGORY
*/align_h: L BACK L+2
*/align_v: T BACK T-5
nlines: 6
box.width: 40
pick: x
ruled: L
text:   Category A
 	Category B
 	Category C
	Category D
 	Category E
 	Category F
 	Category G
 	Category H
 	Category I
 	Category J
 	Category K
 	Category L
 	Category M

### Prompt
Proc textb
*/inherit: PR1
*/align_h: R BACK L+2
*/align_v: T BACK T-5
text: Category
SHAR_EOF
############################

echo examples/form.sh
cat << \SHAR_EOF > examples/form.sh
#!/bin/sh
## **************************************************************
## FORM.SH
## Demo for doing a "data entry" form with mandatory fields..
## ************************************************************* 


which copa

### start copa.. 
copa_window 300 100 9.0 8.0 "Form example" 0.9 &
sleep 1


### load the selected control panel..
copa display holdrefresh
copa popmsg "Loading.."
copa panload form.pan p1
copa popclear

while :
do

UIN=`copa pop "Load data from file?" "Yes,No"`
if [ "$UIN" = "Yes" ]; then
     UIN=`copa poplist "Select a file:" "!ls *.dta" "Cancel"`
     if [ "$UIN" = "Cancel" ]; then
	> /dev/null
     else 
     	copa setvalue .!file $UIN
     fi
fi

copa display refresh

### find out what the first field is..
### (this makes this code here more general)
CURMEC=`copa getmec FIRSTMEC text`
BUTTON=""

### first, go through all fields in order..
while :
do
     ### get typed input for current field..
     VAL=`copa getentry $CURMEC`

     ### check to see if user pressed a button 
     SECTAG=`copa rinfo secondary_tag`
      if [ "$SECTAG" = "CONTROLBUTTONS" ]; then
	BUTTON=`copa rinfo secondary_result`
	if [ "$BUTTON" = "Cancel" ]; then break
	elif [ "$BUTTON" = "Edit" ]; then break
	else continue
	fi
      fi

     ### check mandatory fields
     if [ "$VAL" = ".!none" ]; then
	if [ "`copa getmec $CURMEC info`" = "required" ]; then
		UIN=`copa pop "A value is required for this field." "OK"`
		continue
	fi
     fi

     ### find out next field..
     CURMEC=`copa getmec $CURMEC next`

     if [ "$CURMEC" = ".!none" ]; then break; fi

done

if [ "$BUTTON" != "Cancel" ]; then

  ### now handle modifications to any d.e. field, or buttons..
  while :
  do
       UIN=`copa get`
       TAG=`copa rinfo tag`
     # SECTAG=`copa rinfo secondary_tag`
     # echo "$SECTAG"
  
       if [ "$TAG" = "CONTROLBUTTONS" ]; then
  	if [ "$UIN" = "Save" ]; then
  		### do a tag value dump to standard output..
  		copa getvalue .!all > new.dta
		UIN=`copa pop "Saved as new.dta" "OK"`
  		break
  	elif [ "$UIN" = "Cancel" ]; then break
  	fi
       fi
  done
fi
  
  
copa display holdrefresh
UIN=`copa pop "Enter another?" "Yes,No"`
if [ $UIN = No ]; then break; fi
copa setvalue .!file blank.dta

done

copa panquit
copa quit
SHAR_EOF
############################

echo examples/hello.perl
cat << \SHAR_EOF > examples/hello.perl
# HELLO.PERL
# This is the example from the copa(1) man page, in perl.
#

system "copa_window 300 20 6 8 perl 0.9 & ";
sleep 1;

$ans=`copa pop "Do you like my hat?" "I Do,I Do Not"` ;
print "$ans";

$ans=`copa poplist "Select a file:" "!ls" "Cancel" ` ;
print "$ans";

system "copa panload examples/examp1.pan e1 " ;

$ans=`copa get` ;
print "$ans";

$tag=`copa rinfo tag` ;
print "The mechanism tag is $tag";

system "copa quit" ;



SHAR_EOF
############################

echo examples/hello.sh
cat << \SHAR_EOF > examples/hello.sh
#!/bin/sh
#
# HELLO.SH
# This is the example from the copa(1) man page, in Bourne shell.
#

which copa

copa_window 300 20 7 8 Hello 0.9 &
sleep 1

ANS=`copa pop "Do you like my hat?" "I Do,I Do Not"`
echo $ANS

ANS=`copa poplist "Select a file:" "!ls" "Cancel" `
echo $ANS

copa panload examples/examp1.pan e1

ANS=`copa get`
echo $ANS

TAG=`copa rinfo tag`
echo The tag of this mechanism is $TAG

copa quit



SHAR_EOF
############################

echo examples/legend.pan
cat << \SHAR_EOF > examples/legend.pan
###
### LEGEND.PAN
### Illustration of the various plotting attributes
###
Proc backing
color: 1.0

### Centered title
Proc textb
*/tag: TITLE
*/align_h: C root C
*/align_v: T root T-0.2
text/size: 15
text:   Illustration of various plotting attributes 

### set the scaling and position..
Proc scalezone
*/tag: ZONE1
*/align_h: L root L+0.5
*/align_v: T root T-1.5
height: 3
width: 2.5

### set the scaling and position..
Proc scalezone
*/tag: ZONE2
*/align_h: C root C
*/align_v: T root T-1.5
*/inherit: ZONE1

### set the scaling and position..
Proc scalezone
*/tag: ZONE3
*/align_h: R root R-0.5
*/align_v: T root T-1.5
*/inherit: ZONE1

### set the scaling and position..
Proc scalezone
*/tag: ZONE4
*/align_h: L root L+1
*/align_v: B root B+1
*/inherit: ZONE1

### set the scaling and position..
Proc scalezone
*/tag: ZONE5
*/align_h: C root C
*/align_v: B root B+1
*/inherit: ZONE1

### set the scaling and position..
Proc scalezone
*/tag: ZONE6
*/align_h: R root R-1
*/align_v: B root B
*/inherit: ZONE1


Proc Legend:
Plot/Zone: ZONE1
Title:  Figure 1
	Linetype numbers
Entry:
	Linetype 0
	Linetype 1
	Linetype 2
	Linetype 3
	Linetype 4
	Linetype 5
	Linetype 6
	Linetype 7
	Linetype 8
	Linetype 9
Linetype: 0 1 2 3 4 5 6 7 8 9
Linetype.magnify: 3 3 3 3 3 3 3 3 3 3
Linethick: 1 1 1 1 1 1 1 1 1 1

Proc Legend:
Plot/Zone: ZONE2
Title: Figure 2
	Pattern magnification
Entry:
	1
	2
	3
	4
	5
Linetype: 5 5 5 5 5 
Linetype.magnify: 1 2 3 4 5 
Linethick: 1 1 1 1 1


Proc Legend:
Plot/Zone: ZONE3
Title: Figure 3
	Line thicknesses	
Entry:
	0.3
	0.5
	0.75
	1
	1.3
	1.6
	2
	2.5
	3
	4
Linetype: 0 0 0 0 0 0 0 0 0 0
Linetype.magnify: 3 3 3 3 3 3 3 3 3 3
Linethick: 0.3 0.5 0.75 1 1.3 1.6 2 2.5 3 4


Proc Legend:
Plot/Zone: ZONE4
Title: Figure 4
	Shading values
Entry:
	0.0
	0.2
	0.4
	0.5
	0.6
	0.7
	0.8
	0.9
	0.95
	0.98
Shade: 0.0 0.2 0.4 0.5 0.6 0.7 0.8 0.9 0.95 0.98
Entry.size: 10

Proc Legend:
Plot/Zone: ZONE5
Title: Figure 7
	Point Symbols 
Entry:
	symbol# sym1n
	symbol# sym2n
	symbol# sym3n
	symbol# sym4n
	symbol# sym5n
	symbol# sym6n
	symbol# sym2o
	symbol# sym4o
	characters
	characters
Mark:	sym1n sym2n sym3n sym4n sym5n sym6n sym2o sym4o X Y
Mark.size: 8

Proc Legend:
Plot/Zone: ZONE6
Title: Figure 8
       Lines combined
	with symbols
Entry:
	Linetype 1 and sym1e
	Linetype 2 and sym2e
	Linetype 3 and sym3e
	Linetype 4 and sym4e
	Linetype 5 and sym5e
	Linetype 6 and sym6e
	Linetype 6 and no symbol
Mark: sym1e sym2e sym3e sym4e sym5e sym6e sym00
Mark.size: 8
Linetype: 1 2 3 4 5 6 6

SHAR_EOF
############################

echo examples/list.pan
cat << \SHAR_EOF > examples/list.pan
### list box
Proc textb
*/tag: Category
*/align_h: C root C
*/align_v: C root C
nlines: 6
box.width: 40
pick: x
unpick: x
ruled: L
text:   Category A
 	Category B
 	Category C
	Category D
 	Category E
 	Category F
 	Category G
 	Category H
 	Category I
 	Category J
 	Category K
 	Category L
 	Category M
SHAR_EOF
############################

echo examples/mapdata
cat << \SHAR_EOF > examples/mapdata
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
ga 
tn 
ga 
sc 
sc 
sc 
ga 
ga 
sc 
sc 
ga 
ga 
tn 
ga 
sc 
ga 
ga 
fl 
ga 
tn 
ga 
ga 
ga 
ga 
sc 
sc 
ga 
sc 
ga 
sc 
sc 
sc 
sc 
## 
md 
pa 
pa 
wv 
md 
va 
md 
md 
md 
md 
md 
va 
md 
md 
va 
va 
md 
md 
wv 
pa 
md 
md 
md 
va 
md 
md 
md 
pa 
pa 
de 
de 
pa 
pa 
md 
md 
md 
md 
md 
pa 
pa 
oh 
va 
va 
md 
md 
md 
md 
pa 
md 
md 
pa 
oh 
oh 
oh 
oh 
oh 
oh 
oh 
oh 
oh 
oh 
oh 
oh 
oh 
oh 
oh 
vt 
ma 
ma 
## 
ny 
ma 
ma 
ny 
ct 
ri 
ma 
nh 
ma 
nh 
me 
ny 
il 
il 
il 
il 
il 
il 
il 
in 
il 
il 
il 
il 
il 
il 
il 
il 
in 
il 
il 
il 
il 
il 
il 
il 
il 
il 
il 
il 
il 
il 
il 
il 
il 
il 
ar 
il 
il 
il 
in 
il 
il 
il 
** 
il 
il 
il 
il 
il 
il 
il 
il 
il 
il 
il 
oh 
oh 
ny 
pa 
oh 
oh 
oh 
oh 
oh 
oh 
oh 
oh 
oh 
oh 
oh 
oh 
oh 
oh 
wv 
oh 
oh 
oh 
oh 
pa 
oh 
oh 
oh 
oh 
oh 
oh 
oh 
oh 
ok 
tx 
tx 
tx 
tx 
tx 
tx 
tx 
tx 
tx 
tx 
tx 
tx 
tx 
tx 
la 
tx 
tx 
tx 
tx 
tx 
tx 
tx 
ar 
ok 
tx 
tx 
ok 
tx 
ok 
ok 
tx 
tx 
tx 
ok 
tx 
tx 
nc 
va 
nc 
nc 
nc 
nc 
va 
va 
nc 
va 
nc 
nc 
va 
## 
nc 
nc 
nc 
va 
nc 
nc 
nc 
nc 
nc 
nc 
sc 
nc 
nc 
tn 
nc 
wv 
nc 
va 
tx 
tx 
tx 
tx 
tx 
tx 
## 
ok 
tx 
tx 
tx 
tx 
tx 
tx 
tx 
tx 
tx 
tx 
ia 
il 
ks 
ia 
ks 
ia 
ia 
ia 
ia 
ia 
ia 
il 
ia 
ia 
ia 
il 
il 
il 
ia 
ia 
ia 
il 
ia 
ia 
ia 
ia 
ia 
ia 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
nv 
ca 
ca 
az 
ca 
ca 
az 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
wi 
wi 
wi 
wi 
wi 
wi 
wi 
wi 
wi 
al 
wi 
wi 
wi 
il 
wi 
ny 
ny 
ny 
ny 
ny 
ny 
ny 
nj 
nj 
ny 
ny 
ny 
ny 
ny 
ny 
ct 
ny 
ny 
ny 
ny 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
## 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
@@ 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
fl 
## 
wi 
wi 
wi 
wi 
wi 
wi 
wi 
il 
mi 
il 
wi 
wi 
wi 
wi 
wi 
wi 
wi 
wi 
wi 
wi 
wi 
wi 
wi 
wi 
wi 
wi 
wi 
wi 
il 
wi 
wi 
wi 
wi 
wi 
il 
wi 
nj 
ny 
ny 
ny 
ny 
ny 
ny 
ny 
ny 
ny 
ny 
ny 
ny 
ny 
ny 
nj 
ny 
ny 
ny 
ct 
ny 
nj 
va 
ny 
fl 
ny 
ny 
ny 
nj 
ny 
nj 
wa 
mt 
or 
or 
wa 
or 
or 
or 
or 
or 
or 
or 
or 
or 
wa 
wa 
or 
or 
or 
or 
or 
wa 
wa 
or 
or 
mn 
or 
sd 
mn 
mn 
## 
wi 
ne 
ky 
mn 
mn 
mi 
mn 
wy 
## 
mn 
oh 
mn 
ia 
mn 
sd 
mn 
ia 
mn 
mn 
mn 
mn 
il 
mn 
ia 
mn 
mn 
nd 
mn 
wi 
ne 
nd 
wy 
mn 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
in 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mi 
mo 
mo 
il 
mo 
mo 
mo 
mo 
mo 
mo 
mo 
il 
mo 
il 
il 
mo 
in 
ky 
mo 
tx 
tx 
tx 
tx 
tx 
tx 
tx 
tx 
tx 
ar 
la 
tx 
on 
nb 
on 
on 
on 
on 
on 
mb 
mb 
on 
on 
on 
on 
on 
nb 
on 
on 
on 
on 
on 
on 
on 
on 
on 
nf 
on 
on 
on 
on 
on 
on 
on 
on 
on 
on 
nf 
nf 
on 
on 
on 
on 
on 
on 
on 
on 
on 
on 
on 
on 
on 
on 
on 
on 
on 
nb 
on 
on 
on 
on 
on 
on 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
mt 
ca 
id 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
ca 
ut 
ca 
ca 
tx 
tx 
tx 
pa 
pa 
pa 
SHAR_EOF
############################

echo examples/month.stubs
cat << \SHAR_EOF > examples/month.stubs

J~1970
F
M
A
M
J
J
A
S
O
N
D
J~1971
F
M
A
M
J
J
A
S
O
N
D
J~1972
F
M
A
M
J
J
A
S
O
N
D
J~1973
F
M
A
M
J
J
A
S
O
N
D
J~1974
F
M
A
M
J
J
A
S
O
N
D
J~1975
F
M
A
M
J
J
A
S
O
N
D
J~1976
F
M
A
M
J
J
A
S
O
N
D
J~1977
F
M
A
M
J
J
A
S
O
N
D
J~1978
F
M
A
M
J
J
A
S
O
N
D
J~1979
F
M
A
M
J
J
A
S
O
N
D
J~1980
F
M
A
M
J
J
A
S
O
N
D
J~1981
F
M
A
M
J
J
A
S
O
N
D
J~1982
F
M
A
M
J
J
A
S
O
N
D
J~1983
F
M
A
M
J
J
A
S
O
N
D
J~1984
F
M
A
M
J
J
A
S
O
N
D
J~1985
F
M
A
M
J
J
A
S
O
N
D
J~1986
F
M
A
M
J
J
A
S
O
N
D
J~1987
F
M
A
M
J
J
A
S
O
N
D
J~1988
F
M
A
M
J
J
A
S
O
N
D
J~1989
F
M
A
M
J
J
A
S
O
N
D
J~1990
F
M
A
M
J
J
A
S
O
N
D
J~1991
F
M
A
M
J
J
A
S
O
N
D
J~1992
F
M
A
M
J
J
A
S
O
N
D
J~1993
F
M
A
M
J
J
A
S
O
N
D
J~1994
F
M
A
M
J
J
A
S
O
N
D
J~1995
F
M
A
M
J
J
A
S
O
N
D
J~1996
SHAR_EOF
############################

echo examples/mva.dta
cat << \SHAR_EOF > examples/mva.dta
CONTROLBUTTONS 
FIRSTMEC 
LASTNAME Motor Vehicles Admin.
PR1 
FIRSTNAME 
ADDRLINE1 1120 Bayview Rd.
ADDRLINE2 Park Town, AA 00000
ADDRLINE3 
PHONEINFO 555-555-1010
EMAILINFO 
TYPE Business
CATEGORY Category F

SHAR_EOF
############################

echo examples/oneplot.pan
cat << \SHAR_EOF > examples/oneplot.pan
####################################################################
### ONEPLOT.PAN - A single plot
###
### The mechanism types and all attributes are defined in gui.def and plot.def.
### Each mechanism definition begins with a "Proc" line.
### Attributes may be specified in any order.

### Backing
Proc backing
color: 1



### Centered title
Proc textb
*/tag: TITLE
*/align_h: C root C
*/align_v: T root T-0.2
text/size: 15
text:	Copa plot template

### Data to be plotted is housed in a textb (not visible)
Proc textb
*/tag: DATALIST
### don't display this textbox..
*/display:
text:
00 0 0 0 1 0.00 0.00 8611       0      0      0      0      0 
00 1 2 0 0 0.00 0.00 8612       1      0      1      1      3 
00 2 2 2 1 1.33 0.67 8701       0      1      0      2      3 
00 3 3 3 7 6.67 4.33 8702       1      2      2      2      7 
00 4 8 2 5 10.00 5.00 8703       0      2      0      3      5 
00 5 4 4 7 10.67 6.33 8704       1      2      4      6     13 
00 6 14 11 4 10.67 5.33 8705       1      6      1      3     11 
00 7 15 6 9 13.00 10.00 8706       4      3      6     11     24 
00 8 14 5 10 14.67 9.33 8707       4      8      7      7     26 
00 9 8 8 15 16.67 7.83 8708       4      4      5      6     19 
00 10 9 9 13 16.33 8.17 8709       2      2      5     13     22 
00 11 11 10 6 18.67 10.33 8710       1      2      5     18     26 
00 12 7 9 11 16.67 8.33 8711       2      6      3      5     16 
00 13 6 10 12 16.67 8.33 8712       2      5      3     14     24 
00 14 8 11 14 16.83 8.42 8801       2      4      1     10     17 
00 15 10 5 8 16.83 8.42 8802       0      6      2     13     21 
00 16 12 9 16 17.17 8.58 8803       0      5      8     16     29 
00 17 8 12 20 17.17 8.58 8804       1      5      7     12     25 
00 18 8 11 7 17.17 8.58 8805       3      1      5     16     25 
00 19 7 12 8 17.17 8.58 8806       6     11     13     12     42 
00 20 4 6 6 17.17 8.58 8807       2      5      6     11     24 
00 21 8 12 12 17.17 8.58 8808       3      4      4     14     25 
00 22 1 14 12 17.33 8.67 8809       0      4     10     14     28 
00 23 2 5 10 17.33 8.67 8810       2      4      5     12     23 
00 24 1 7 8 17.33 8.67 8811       2      3      5     11     21 
00 25 4 5 5 17.33 8.67 8812       4      7      4      9     24 

### set up scaling and position..
Proc scalezone
*/tag: PLOTZONE1
*/align_h: C root C
*/align_v: B root B+2
height: 4
width: 6
xrange: 0 30
yrange: 0 25


### create axes, including month/year labels on x, beginning with 11/90
Proc Axes
*/tag: AXES2
Plot/Zone: PLOTZONE1
Yinc: 10
Subtitle: Performance over time
Xstart.0or1: 1
Xstub: month
Xstub.startmonth:	11
Xstub.startyear:	90
Subtitle.justify:	left
Subtitle.above:		0.02
Yinc:			5
Xstart.0or1:		1
Ystub.grid: line

### do the bar graph..
Proc Bargraph:
Plot/Zone: PLOTZONE1
Plot/Datasource: DATALIST
Field:			5
Shade:			0
Idfield:		5

### superimpose a line plot..
Proc Lineplot:
Plot/Zone: PLOTZONE1
Yfield:			7 6
Linetype:		1 2
Linetype.magnify:	2 2
Stairstep.bars:		y
Xstart.0or1:		1

### do a legend.. first set up a scalezone (alignment info only)
Proc scalezone:
*/tag: LEGEND
*/align_h: C root C
*/align_v: B root B
height: 0.7
width: 1.5
#don't fill box
color: -1

### do the legend..
Proc Legend
Plot/Zone: LEGEND
Title: Legend
Entry:  Goal - east
	Goal - west
Linetype: 0 1

SHAR_EOF
############################

echo examples/page.sh
cat << \SHAR_EOF > examples/page.sh
#!/bin/sh
## **************************************************************
## PAGE.SH
## This is a copa program for previewing .pan files
## as they will appear when printed on a 
## sheet of paper in portrait mode,
## and getting PostScript dumps of .pan files.
## ************************************************************* 

PAPER_HI=11
PAPER_WIDE=8.5

# Use COPA_DPI to reduce overall size of display..
COPA_DPI=65
export COPA_DPI

which copa

### start copa.. 
copa_window 300 10 $PAPER_WIDE $PAPER_HI "Copa PAN file print previewer (sh)" 0.9 &
sleep 1

while :
do

 PAN=`copa poplist "Select a .pan file from the list or exit.." "!ls *.pan" "Exit" `

 if [ "$PAN" = "Exit" ]; then
	copa quit
	exit
 fi
	
 ### avoid double redraw..
 copa display holdrefresh

 ### load the selected control panel..
 copa panload $PAN sl1

 ### add the exit button..
 copa panadd "examples/exitb.pan"

 ### now display all
 copa display refresh

 while :
 do
	UIN=`copa get`

	if [ "$UIN" = "Exit" ]; then break; fi
	if [ "$UIN" = "PostScript" ]; then
	     ### reload without the control buttons..
             ### don't do any popups here or they'll appear on output..
             copa display holdrefresh
             copa panload $PAN p2
 
             UIN=`copa popentry  "File name for PostScript output:" "out.ps" 15`
 
             copa ps  "Example" $UIN  Portrait
 
             copa panquit
             copa display refresh
	fi

 done

 copa panquit

done
copa quit
SHAR_EOF
############################

echo examples/plots.pan
cat << \SHAR_EOF > examples/plots.pan
####################################################################
### PLOTS.PAN - Examples of some copa data plotting mechanisms
###
### The mechanism types and all attributes are defined in gui.def and plot.def.
### Each mechanism definition begins with a "Proc" line.
### Attributes may be specified in any order.


### Centered title
Proc textb
*/tag: TITLE
*/align_h: C root C
*/align_v: T root T-0.2
text/size: 15
text:	Copa data plot samples

### Data to be plotted (not made visible)
Proc textb
*/tag: DATALIST
### do not display it..
*/display:
### the data follows..
text:
30  20 U
10  22 V
 7  25 W
13  28 X
20  32 Y
20  36 Z

##############
### Plot 1 ### 
##############

### set the scaling and position..
Proc scalezone
*/tag: PLOTZONE1
*/align_h: L root L+0.5
*/align_v: T root T-1
height: 3
width: 2.5

### set up axes (really nothing except subtitle)..
Proc Axes
Plot/Zone: PLOTZONE1
Xaxis: none
Yaxis: none
Subtitle: Pie graph

### do pie graph..
Proc Pie
*/tag: PIE
Plot/Zone: PLOTZONE1
Plot/Datasource: DATALIST


##############
### Plot 2 ### 
##############

### set the scaling and position...
Proc scalezone
*/tag: PLOTZONE2
*/align_h: L PLOTZONE1 R+0.5
*/align_v: T PLOTZONE1 T
height: 3
width: 2.5
xrange: 0 7
yrange: 0 100
yscaletype: log


### set up axes...
Proc Axes
*/tag: AXES2
Plot/Zone: PLOTZONE2
Yinc: 10
Subtitle: Bars & Lines examp.
Xstart.0or1: 1
Xstub: 
A
B
C
D
E
F
Ystub.grid: line

### do bar graph..
Proc Bargraph
*/tag: BARS
Plot/Zone: PLOTZONE2
Plot/Datasource: DATALIST
Format: cluster
Field: 1 2 

### also do a line plot..
Proc Lineplot
*/tag: LINEP
Plot/Zone: PLOTZONE2
Plot/Datasource: DATALIST
Yfield: 1 2


##############
### Plot 3 ### 
##############

### set the scaling and position..
Proc scalezone
*/tag: PLOTZONE3
*/align_h: L PLOTZONE2 R+0.5
*/align_v: T PLOTZONE1 T
height: 3
width: 2.5
xrange: 0 200
yrange: 0 7

### set up axes...
Proc Axes
*/tag: AXES3
Plot/Zone: PLOTZONE3
Xinc: 20
Yinc: 1
Subtitle: Horizbar examp.
Ystart.0or1: 1
Ystub: 
A
B
C
D
E
F

# for the xstubs, using '!' places the label at the given scaled position
Xstub:
!0
!10
!20
!50
!100
Ystub.nolonetics: n
Xstub.grid: line

### do horizontal bar graph..
Proc Horizbar
*/tag: HORIZBAR
Plot/Zone: PLOTZONE3
Plot/Datasource: DATALIST
Format: stack
Field: 1 2


##############
### Plot 4 ### 
##############

### set up scaling and position..
Proc scalezone
*/tag: PLOTZONE4
*/align_h: L PLOTZONE1 L
*/align_v: T PLOTZONE1 B-0.5
height: 3
width: 2.5
xrange: 0 40 
yrange: 0 40

### set up axes..
Proc Axes
*/tag: AXES4
Plot/Zone: PLOTZONE4
Xinc: 5
Yinc: 5
Subtitle: 2-way Distrib

### do a point distribution using little circles (the default)..
Proc Distribution
Plot/Zone: PLOTZONE4
Xfield: 1
Yfield: 2

### do another one using the letter 'P'..
Proc Distribution
Plot/Zone: PLOTZONE4
Xfield: 2
Yfield: 1
Mark: P


##############
### Plot 5 ### 
##############

### set up scaling and position (maps always use 0..40)
Proc scalezone
*/tag: PLOTZONE5
*/align_h: L PLOTZONE4 R+0.5
*/align_v: T PLOTZONE4 T
height: 3
width: 2.5
xrange: 0 40
yrange: 0 40

### do subtitle only..
Proc Axes
Plot/Zone: PLOTZONE5
Xaxis: none
Yaxis: none
Subtitle: N.A. map

### put map data into a textb (don't display it..)
Proc textb
*/tag: MAPDATA
*/display: 
text:
 ca         52  
 fl         41  
 ga         16  
 ia         23  
 il         65  
 md         28  
 mi         69  
 mn         19  
 mo         12  
 nc         21  
 ny         44  
 oh         45  
 on         53  
 or         19  
 pa         16  
 sc         14  
 tx         58  
 va         15  
 wi         46  

### do the north america map..
Proc Map
Plot/Zone: PLOTZONE5
Plot/Datasource: MAPDATA
Mode:   statedist
List:   n
Statefield:     1
Valfield: 2
Threshold: 1 5 10 20 30 50 200
Shade: 1 .98 .85 .7 .55 .40 .25


##############
### Plot 6 ### 
##############

### set up scaling and position..
Proc scalezone
*/tag: PLOTZONE6
*/align_h: L PLOTZONE5 R+0.5
*/align_v: T PLOTZONE5 T
height: 1
width: 2.5
xrange: 0 100

### Do axis in the x direction only..
Proc Axes
*/tag: AXES6
Plot/Zone: PLOTZONE6
Xinc: 20
Yaxis: none
Subtitle: 1-way Distrib 
Frame: single

### Do a bar distribution..
Proc Distribution
Plot/Zone: PLOTZONE6
Plot/Datasource: DATALIST
Xfield: 1
SHAR_EOF
############################

echo examples/preview.c
cat << \SHAR_EOF > examples/preview.c
/**************************************************************
 * PREVIEW.C
 * This is a copa program for previewing .pan files.
 * See also preview.sh and preview.perl
 ************************************************************** 
*/
#include <stdio.h>

main( argc, argv )
int argc;
char **argv;
{


char userin[80];
char tag[30];
char buf[80];
char panfile[80];
int status;


/* start copa.. */
copa_window( 300, 100, 9.0, 8.0, "Copa PAN file previewer (C)", 0.9 );

if( argc == 2 ) { 
	strcpy( userin, argv[1] );
	goto DISPLAY;
	}

while( 1 ) {
	copa_poplist( "Select a .pan file from the list or exit..",
		"!ls *.pan", "Exit", userin );

	if( strcmp( userin, "Exit" )==0 ) break;
	
	/* load and display the selected panel */
	DISPLAY:
	copa_display( "holdrefresh" ); /* avoid double redraw.. */
	strcpy( panfile, userin );
	status = copa_panload( panfile, "p1" );
	if( status != 0 ) {
		fprintf( stderr, "Cannot load %s.\n", userin );
		continue;
		}
	status = copa_panadd( "examples/exitb.pan" );
	copa_display( "refresh" );


	while( 1 ) {
		copa_get( userin );
		copa_rinfo( "tag", tag );
		printf( "%s = %s\n", tag, userin );
		if( strcmp( userin, "Exit" )==0 ) break;

		else if( strcmp( userin, "PostScript" )==0 ) {
 
             		copa_display( "holdrefresh" );
             		copa_panload( panfile, "p2" );
 
			copa_popentry( "File name for PostScript output:", 
				"out.ps", 15, buf );

             		copa_pop( "Select paper direction", "Portrait,Landscape", userin );
 
             		copa_ps( "Example", buf, userin );
 
             		copa_panquit();
             		copa_display( "refresh" );
			}
		}

	copa_panquit();

	}
copa_quit();
exit(0);
}
SHAR_EOF
############################

echo examples/preview.perl
cat << \SHAR_EOF > examples/preview.perl
## **************************************************************
## PREVIEW.PERL
## This is a copa program for previewing .pan files.
## Translated into perl.
## ************************************************************* 


### start copa.. 
system( "copa_window 300 100 9.0 8.0 \"Copa PAN file previewer (perl)\" 0.9 &" );
sleep 1;

while ( 1 ) {

 $pan = `copa poplist "Select a .pan file from the list or exit.." "!ls *.pan" "Exit" ` ;

 # perl adds a trailing newline above.. remove it
 chop( $pan );

 if ( $pan eq "Exit") {
	system( "copa quit" );
	exit;
	}

	
 ### avoid double redraw..
 system( "copa display holdrefresh" );

 ### load the selected control panel..
 system( "copa panload $pan p1" );

 ### add the exit button..
 system( "copa panadd examples/exitb.pan" );

 ### now display all
 system( "copa display refresh" );

 while ( 1 ) {

	$uin=`copa get`;
	chop( $uin );

	$tag=`copa rinfo tag `;
	chop( $tag );

	print "$tag = $uin\n";

	if ( $uin eq "Exit" ) { last; }  # perl uses last rather than break
	
	if ( $uin eq "PostScript" ) {

	     ### reload without the control buttons..
	     ### don't do any popups here or they'll appear on output..
	     system( "copa display holdrefresh" );
	     system( "copa panload $pan p2" );

             $uin=`copa popentry  "File name for PostScript output:" "out.ps" 15`;
	     chop( $uin );
	
	     $mode=`copa pop "Select paper direction" "Portrait,Landscape"`;
	     chop( $mode );

             system( "copa ps  \"Example\" $uin  $mode" );

	     system( "copa panquit" );
	     system( "copa display refresh" );
	     }

       }

 system( "copa panquit" );

}
system( "copa quit" );
SHAR_EOF
############################

echo examples/preview.sh
cat << \SHAR_EOF > examples/preview.sh
#!/bin/sh
## **************************************************************
## PREVIEW.SH
## This is a copa program for previewing .pan files.
## ************************************************************* 

which copa

### start copa.. 
copa_window 300 100 9.0 8.0 "Copa PAN file previewer (Bourne sh)" 0.9 &
sleep 1

while :
do

 PAN=`copa poplist "Select a .pan file from the list or exit.." "!ls *.pan" "Exit" `

 if [ "$PAN" = "Exit" ]; then
	copa quit
	exit
 fi
	
 ### avoid double redraw..
 copa display holdrefresh

 ### load the selected control panel..
 copa panload $PAN p1

 ### add the exit button..
 copa panadd "examples/exitb.pan"

 ### now display all
 copa display refresh

 while :
 do
	UIN=`copa get`

	TAG=`copa rinfo tag `

	echo "$TAG = $UIN"

	if [ "$UIN" = "Exit" ]; then break; fi
	
	if [ "$UIN" = "PostScript" ]; then

	     ### reload without the control buttons..
	     ### don't do any popups here or they'll appear on output..
	     copa display holdrefresh
	     copa panload $PAN p2

             UIN=`copa popentry  "File name for PostScript output:" "out.ps" 15`
	     MODE=`copa pop "Select paper direction" "Portrait,Landscape"`

             copa ps  "Example" $UIN  $MODE

	     copa panquit
	     copa display refresh
	fi

 done

 copa panquit

done
copa quit
SHAR_EOF
############################

echo examples/slider.pan
cat << \SHAR_EOF > examples/slider.pan
######################################################
### SLIDER.PAN - control panel with 3 sliders and a button
###
### The mechanism types and all attributes are defined in gui.def.
### Each mechanism definition begins with a "Proc" line.
### Attributes may be specified in any order.
####################################################################


###########################################
### Window background
######################################################

######################
### backing box
###  In this case, we're using a text box as backing..
######################

Proc textb

### it will be called BACK..
*/tag:		BACK

### it will be centered in the window..
*/align_h: 	"C root C" 
*/align_v: 	"C root C" 

### 50 characters wide..
box.width:	50

### 12 point text..
text/size:	12

### display 30 lines.. 
nlines:		30

### decorate the rectangle (shadow)..
dress:		x

### make a big shadow..
dress/shadow.size: 0.4

### center lines of text..
align:		C

### display this text..
text:		This is an example control panel with three 
		slider mechanisms.  As opposed to popup boxes, 
		which can only get a single response, a control 
		panel can have many response mechanisms which
		operate independently.

		This panel is defined in the file 'slider.pan', 
		and loaded using the copa loadpan command.

		The sliders can be adjusted by clicking with
		the mouse.  Click on 'OK' when finished..


########################
### Slider 1
########################

Proc slider

### it will be called HEIGHT..
*/tag:		HEIGHT

### center it horizontally within the backing..
*/align_h: 	"C BACK C" 

### align with the top 2.5 inches down from the top of the backing..
*/align_v: 	"T BACK T-2.5" 

### use this text as the prompt..
prompt: 	Height (in):

### the minimum value..
min:		20

### the maximum value..
max:		80

### the starting default value..
pick/value:	60


########################
### Slider 2
########################
Proc slider
*/tag: 		WEIGHT
*/align_h: 	"C BACK C" 
*/align_v: 	"T BACK T-3" 
prompt: 	Weight (lbs):
min:		20
max:		300
pick/value:	160


########################
### Slider 3
########################
Proc slider
*/tag: 		IQ
*/align_h: 	"C BACK C" 
*/align_v: 	"T BACK T-3.5" 
prompt: 	IQ:
min:		20
max:		150
pick/value:	100


########################
### The button
########################
Proc button

### it will be called B1..
*/tag:		B1

### center it horizontally within the backing..
*/align_h: 	"C BACK C" 

### align so its bottom is 0.5 inches above the bottom of the backing..
*/align_v: 	"B BACK B+0.5"

### the text to be displayed in the button
text:		OK

### we don't want it to stay highlighted..
flashpick: x
SHAR_EOF
############################

echo examples/smith.dta
cat << \SHAR_EOF > examples/smith.dta
CONTROLBUTTONS 
FIRSTMEC 
LASTNAME Smith
PR1 
FIRSTNAME John
ADDRLINE1 4321 Park Drive
ADDRLINE2 Park Town, AA 00000
ADDRLINE3 
PHONEINFO 555-555-1234
EMAILINFO john@parktown.com
TYPE Friend
CATEGORY Category A

SHAR_EOF
############################

echo examples/thplot.pan
cat << \SHAR_EOF > examples/thplot.pan
####################################################################
### THPLOT.PAN - Another more involved plot example
###
### The mechanism types and all attributes are defined in gui.def and plot.def.
### Each mechanism definition begins with a "Proc" line.
### Attributes may be specified in any order.
###########################################################

### Backing color - white
Proc backing
color: 1

### Centered title
Proc textb
*/tag: TITLE
*/align_h: C root C
*/align_v: T root T-0.8
align: C
text/size: 12
# turn off box..
box:
text:	Mean FES Scores 
	For Families in Emergency Shelters vs.
	Families in Transitional Housing 

### set up scaling and position..
Proc scalezone
*/tag: PLOTZONE1
*/align_h: C root C
*/align_v: C root C
height: 4
width: 6
xrange: 0 6
yrange: 0 100


### do axes..
Proc Axes
Plot/Zone: PLOTZONE1
Xstub:  Cohesion
	Expressiveness
	Conflict
	Independence
	Achievement~Orientation
Xstart.0or1: 1
Yinc: 10
Ylabel: Standard Score


Proc textb
*/tag: DATA_1
*/display:
#
# E (1-5)
#x pos  n obs   mean  stdev   min    5th    25th   50th   75th   95th   max    n/a 
#=====  =====  =====  =====  =====  =====  =====  =====  =====  =====  =====  =====
text: 
  0.9    23   37.83  18.66   1.00  53.00  31.00  53.00  16.00  31.00  68.00      0  p<.05 1 78
  1.9    23   42.17   9.00  21.00  47.00  41.00  47.00  34.00  34.00  60.00      0  p<.05 2 78
  2.9    23   54.48  13.67  32.00  70.00  59.00  38.00  59.00  54.00  75.00      0  p>.05 3 78
  3.9    23   42.52  14.71  11.00  45.00  45.00  45.00  11.00  36.00  70.00      0  p>.05 4 78
  4.9    23   54.48   8.44  35.00  60.00  60.00  53.00  41.00  35.00  66.00      0  p>.05 5 78

Proc Draw:
*/tag: DOLINE
Plot/Zone: PLOTZONE1
Linethick: 0.4
Linetype.magnify: 5
System: data
Points: 0 50 6 50

Proc Draw:
*/inherit: DOLINE
Plot/Zone: PLOTZONE1
Linetype: 1
Points: 0 40 6 40
	0 60 6 60

Proc Bargraph:
*/tag: BAR1
Plot/Zone: PLOTZONE1
Plot/Datasource: DATA_1
Xfield: 1 
Field: 3
Shade: 1.0

Proc Errorbars:
*/tag: ERR1
Plot/Zone: PLOTZONE1
Double: n
Xfield: 1
Yfield: 3
Errfield: 4

# slap on p values
Proc Distribution:
Plot/Zone: PLOTZONE1
Xfield: 14
Yfield: 15
Mark: 
Mark.field: 13
Mark.size: 10

Proc textb
*/tag: DATA_2
*/display:
# T (1-5)
#x pos  n obs   mean  stdev   min    5th    25th   50th   75th   95th   max    n/a 
#=====  =====  =====  =====  =====  =====  =====  =====  =====  =====  =====  =====
text:
   1.1     39   52.38  15.44   9.00  46.00  16.00  68.00  46.00  68.00  68.00      0
   2.1     39   48.90   8.94  21.00  41.00  54.00  66.00  47.00  54.00  66.00      0
   3.1     39   50.90  10.99  28.00  70.00  65.00  38.00  59.00  48.00  75.00      0
   4.1     39   44.62   9.59  28.00  45.00  36.00  45.00  28.00  45.00  62.00      0
   5.1     39   54.92   8.59  35.00  72.00  60.00  53.00  53.00  60.00  72.00      0

Proc Bargraph:
*/inherit: BAR1
Plot/Datasource: DATA_2
Shade: 0.9

Proc Errorbars:
*/inherit: ERR1
Plot/Datasource: DATA_2

### do a legend.. first set up a scalezone (alignment info only)
Proc scalezone:
*/tag: LEGEND
*/align_h: C root C-0.7
*/align_v: B root B+0.5
height: 0.7
width: 1.5
#don't fill box
color: -1

Proc Legend:
Plot/Zone: LEGEND
Entry: Emergency Shelters (N = 23)
       Transitional Housing (N = 39)
Shade: 1.0 0.9
 
SHAR_EOF
############################



