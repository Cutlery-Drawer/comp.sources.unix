Newsgroups: comp.sources.unix
From: glover@credit.erin.utoronto.ca (Mike Glover)
Subject: v29i101: cdk-4.8.0 - Curses Development Kit, V4.8.0, Part06/06
References: <1.839541522.22466@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: glover@credit.erin.utoronto.ca (Mike Glover)
Posting-Number: Volume 29, Issue 101
Archive-Name: cdk-4.8.0/part06

#!/bin/sh
# This is `cdk_.06' (part 6 of a multipart archive).
# Do not concatenate these parts, unpack them in order with `/bin/sh'.
# File `cdk4.8.0/swindow.c' is being continued...
#
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
if test ! -r _sharseq.tmp; then
  echo 'Please unpack part 1 first!'
  exit 1
fi
shar_sequence=`cat _sharseq.tmp`
if test "$shar_sequence" != 6; then
  echo "Please unpack part $shar_sequence next!"
  exit 1
fi
if test ! -f _sharnew.tmp; then
  echo 'x - still skipping cdk4.8.0/swindow.c'
else
  echo 'x - continuing file cdk4.8.0/swindow.c'
  sed 's/^X//' << 'SHAR_EOF' >> '_sharuue.tmp' &&
M;&EN9R!W:6YD;W<@=VED9V5T+@H@*B\*0T1+4U=)3D1/5R`J;F5W0T1+4W=I
M;F1O=R`H0T1+4T-2145.("IC9&MS8W)E96XL(&EN="!X<&QA8V4L(&EN="!Y
M<&QA8V4L(&EN="!H96EG:'0L(&EN="!W:61T:"P@8VAA<B`J=&ET;&4L(&EN
M="!S879E3&EN97,L(&)O;VQE86X@8F]X+"!B;V]L96%N('-H861O=RD*>PH@
M("`O*B!$96-L87)E(&QO8V%L('9A<FEA8FQE<RX)"0D)"0DJ+PH@("!#1$M3
M5TE.1$]7"2IS=VEN9&]W"3T@*$-$2U-724Y$3U<@*BEM86QL;V,@*'-I>F5O
M9B`H0T1+4U=)3D1/5RDI.PH@("!I;G0@8F]X5VED=&@)"0D]('=I9'1H.PH@
M("!I;G0@8F]X2&5I9VAT"0D](&AE:6=H="LR.PH@("!I;G0@>'!O<PD)"3T@
M>'!L86-E.PH@("!I;G0@>7!O<PD)"3T@>7!L86-E.PH*("`@+RH@5')A;G-L
M871E('1H92!T:71L92!C:&%R("H@=&\@8VAT>7!E("H)"0D)*B\*("`@:68@
M*'1I=&QE("$]("AC:&%R("HI3E5,3"D*("`@>PH@("`@("!S=VEN9&]W+3YT
M:71L90D)/2!C:&%R,D-H='EP92`H=&ET;&4L("9S=VEN9&]W+3YT:71L94QE
M;BP@)G-W:6YD;W<M/G1I=&QE4&]S*3L*("`@("`@<W=I;F1O=RT^=&ET;&50
M;W,)"3T@:G5S=&EF>5-T<FEN9R`H8F]X5VED=&@L('-W:6YD;W<M/G1I=&QE
M3&5N+"!S=VEN9&]W+3YT:71L95!O<RD["B`@("`@('-W:6YD;W<M/G1I=&QE
M061J"0D](#(["B`@('T*("`@96QS90H@("!["B`@("`@('-W:6YD;W<M/G1I
M=&QE"0D]("AC:'1Y<&4@*BE.54Q,.PH@("`@("!S=VEN9&]W+3YT:71L95!O
M<PD)/2`P.PH@("`@("!S=VEN9&]W+3YT:71L94%D:@D)/2`Q.PH@("!]"@H@
M("`O*B!296IU<W1I9GD@=&AE('@@86YD('D@<&]S:71I;VYS(&EF('=E(&YE
M960@=&\N"0D)*B\*("`@86QI9VYX>2`H8V1K<V-R965N+3YW:6YD;W<L("9X
M<&]S+"`F>7!O<RP@8F]X5VED=&@L(&)O>$AE:6=H="D["@H@("`O*B!-86ME
M('1H92!S8W)O;&QI;F<@=VEN9&]W"0D)"0D)*B\*("`@<W=I;F1O=RT^=VEN
M"0D)/2!N97=W:6X@*&)O>$AE:6=H="P@8F]X5VED=&@L('EP;W,L('AP;W,I
M.PH*("`@+RH@27,@=&AE('=I;F1O=R!.54Q,/S\)"0D)"0DJ+PH@("!I9B`H
M<W=I;F1O=RT^=VEN(#T]("A724Y$3U<@*BE.54Q,*0H@("!["B`@("`@("\J
M($-L96%N('5P+@D)"0D)"0DJ+PH@("`@("!F<F5E0VAT>7!E("AS=VEN9&]W
M+3YT:71L92D["B`@("`@(&9R964H<W=I;F1O=RD["B`*("`@("`@+RH@4F5T
M=7)N(&$@3E5,3"!P;VEN=&5R+@D)"0D)"2HO"B`@("`@(')E='5R;B`H*$-$
M2U-724Y$3U<@*BE.54Q,*3L*("`@?0H*("`@+RH@5'5R;B!O;B!T:&4@:V5Y
M<&%D(&9O<B!T:&ES('=I;F1O=RX)"0D)*B\*("`@:V5Y<&%D("AS=VEN9&]W
M+3YW:6XL(%12544I.PH*("`@+RH@4V5T('1H92!R97-T(&]F('1H92!V87)I
M86)L97,)"0D)"2HO"B`@('-W:6YD;W<M/G!A<F5N=`D)/2!C9&MS8W)E96XM
M/G=I;F1O=SL*("`@<W=I;F1O=RT^<VAA9&]W5VEN"0D]("A724Y$3U<@*BE.
M54Q,.PH@("!S=VEN9&]W+3YB;WA(96EG:'0)"3T@8F]X2&5I9VAT.PH@("!S
M=VEN9&]W+3YB;WA7:61T:`D)/2!B;WA7:61T:#L*("`@<W=I;F1O=RT^=FEE
M=U-I>F4)"3T@:&5I9VAT+3$["B`@('-W:6YD;W<M/F-U<G)E;G14;W`)"3T@
M,#L*("`@<W=I;F1O=RT^;6%X5&]P3&EN90D)/2`P.PH@("!S=VEN9&]W+3YL
M969T0VAA<@D)/2`P.PH@("!S=VEN9&]W+3YM87A,969T0VAA<@D)/2`P.PH@
M("!S=VEN9&]W+3YI=&5M0V]U;G0)"3T@,#L*("`@<W=I;F1O=RT^=VED97-T
M3&EN90D)/2`M,3L*("`@<W=I;F1O=RT^<V%V94QI;F5S"0D]('-A=F5,:6YE
M<SL*("`@<W=I;F1O=RT^97AI=%1Y<&4)"3T@=DY%5D527T%#5$E6051%1#L*
M("`@<W=I;F1O=RT^8F]X"0D)/2!B;W@["B`@('-W:6YD;W<M/G-H861O=PD)
M/2!S:&%D;W<["B`@('-W:6YD;W<M/G!R95!R;V-E<W-&=6YC=&EO;@D]("A0
M4D]#15-31DXI3E5,3#L*("`@<W=I;F1O=RT^<')E4')O8V5S<T1A=&$)/2`H
M=F]I9"`J*4Y53$P["B`@('-W:6YD;W<M/G!O<W10<F]C97-S1G5N8W1I;VX)
M/2`H4%)/0T534T9.*4Y53$P["B`@('-W:6YD;W<M/G!O<W10<F]C97-S1&%T
M80D]("AV;VED("HI3E5,3#L*"B`@("\J($1O('=E(&YE960@=&\@8W)E871E
M(&$@<VAA9&]W/S\_"0D)"0DJ+PH@("!I9B`H<W=I;F1O=RT^<VAA9&]W*0H@
M("!["B`@("`@('-W:6YD;W<M/G-H861O=U=I;@D](&YE=W=I;B`H8F]X2&5I
M9VAT+"!B;WA7:61T:"P@>7!O<RLQ+"!X<&]S*S$I.PH@("!]"@H@("`O*B!#
M;&5A;B!T:&4@:V5Y(&)I;F1I;F=S+@D)"0D)"2HO"B`@(&-L96%N0T1+3V)J
M96-T0FEN9&EN9W,@*'935TE.1$]7+"!S=VEN9&]W*3L*"B`@("\J(%)E9VES
M=&5R('1H:7,@8F%B>2X)"0D)"0DJ+PH@("!R96=I<W1E<D-$2T]B:F5C="`H
M8V1K<V-R965N+"!V4U=)3D1/5RP@<W=I;F1O=RD["@H@("`O*B!2971U<FX@
M=&AE('-C<F]L;&EN9R!W:6YD;W<)"0D)"2HO"B`@(')E='5R;B`H<W=I;F1O
M=RD["GT*"B\J"B`J(%1H:7,@<V5T<R!A;&P@=&AE(&QI;F5S(&EN<VED92!T
M:&4@<V-R;VQL:6YG('=I;F1O=RX*("HO"G9O:60@<V5T0T1+4W=I;F1O=R`H
M0T1+4U=)3D1/5R`J<W=I;F1O=RP@8VAA<B`J*FEN9F\L(&EN="!L:6YE<RP@
M8F]O;&5A;B!B;W@I"GL*("`@+RH@1&5C;&%R92!L;V-A;"!V87)I86)L97,N
M"0D)"0D)*B\*("`@:6YT('@@/2`P.PH*("`@+RH@1FER<W0@;&5T<R!C;&5A
M;B!A;&P@=&AE(&QI;F5S(&EN('1H92!W:6YD;W<N"0D)*B\*("`@8VQE86Y#
M1$M3=VEN9&]W*'-W:6YD;W<I.PH*("`@+RH@3F]W(&QE=',@<V5T(&%L;"!T
M:&4@;&EN97,@:6YS:61E('1H92!W:6YD;W<N"0D)*B\*("`@9F]R("AX/3`[
M('@@/"!L:6YE<SL@>"LK*0H@("!["B`@("`@('-W:6YD;W<M/FEN9F];>%T)
M"3T@8VAA<C)#:'1Y<&4@*&EN9F];>%TL("9S=VEN9&]W+3YI;F9O3&5N6WA=
M+"`F<W=I;F1O=RT^:6YF;U!O<UMX72D["B`@("`@('-W:6YD;W<M/FEN9F]0
M;W-;>%T)/2!J=7-T:69Y4W1R:6YG("AS=VEN9&]W+3YB;WA7:61T:"P@<W=I
M;F1O=RT^:6YF;TQE;EMX72P@<W=I;F1O=RT^:6YF;U!O<UMX72D["B`@("`@
M('-W:6YD;W<M/G=I9&5S=$QI;F4)/2!-05A)355-("AS=VEN9&]W+3YW:61E
M<W1,:6YE+"!S=VEN9&]W+3YI;F9O3&5N6WA=*3L*("`@?0H*("`@+RH@4V5T
M('-O;64@;V8@=&AE(&UO<F4@:6UP;W)T86YT(&UE;6)E<G,@;V8@=&AE('-C
M<F]L;&EN9R!W:6YD;W<N"2HO"B`@('-W:6YD;W<M/FET96U#;W5N=`D](&QI
M;F5S.PH@("!S=VEN9&]W+3YM87A4;W!,:6YE"3T@<W=I;F1O=RT^:71E;4-O
M=6YT("T@<W=I;F1O=RT^=FEE=U-I>F4["B`@('-W:6YD;W<M/FUA>%1O<$QI
M;F4)/2`H<W=I;F1O=RT^;6%X5&]P3&EN92`\(#`@/R`P(#H@<W=I;F1O=RT^
M;6%X5&]P3&EN92D["B`@('-W:6YD;W<M/FUA>$QE9G1#:&%R"3T@<W=I;F1O
M=RT^=VED97-T3&EN92`M("AS=VEN9&]W+3YB;WA7:61T:"`M(#(I.PH@("!S
M=VEN9&]W+3YC=7)R96YT5&]P"3T@,#L*("`@<W=I;F1O=RT^;&5F=$-H87()
M/2`P.PH@("!S=VEN9&]W+3YB;W@)"3T@8F]X.PI]"@HO*@H@*B!4:&ES(&%D
M9',@82!L:6YE('1O('1H92!S8W)O;&QI;F<@=VEN9&]W+@H@*B\*=F]I9"!A
M9&1#1$M3=VEN9&]W("`H0T1+4U=)3D1/5R`J<W=I;F1O=RP@8VAA<B`J:6YF
M;RP@:6YT(&EN<V5R=%!O<RD*>PH@("`O*B!$96-L87)E('9A<FEA8FQE<RX)
M"0D)"0DJ+PH@("!I;G0@>"`](#`["@H@("`O*B!!<F4@=V4@861D:6YG('1O
M('1H92!T;W`@;W(@8F]T=&]M/PD)"0DJ+PH@("!I9B`H:6YS97)T4&]S(#T]
M(%1/4"D*("`@>PH@("`@("`O*B!792!N965D('1O("=B=6UP)R!E=F5R>71H
M:6YG(&1O=VX@;VYE(&QI;F4N+BX)"0DJ+PH@("`@("!F;W(@*'@]<W=I;F1O
M=RT^:71E;4-O=6YT.R!X(#X@,#L@>"TM*0H@("`@("!["B`@("`@("`@("\J
M($-L96%N('5P('1H92!O;&0@;65M;W)Y+@D)"0D)*B\*("`@("`@("`@9G)E
M94-H='EP92`H<W=I;F1O=RT^:6YF;UMX72D["@H@("`@("`@("`O*B!#;W!Y
M(&EN('1H92!N97<@<F]W+@D)"0D)*B\*("`@("`@("`@<W=I;F1O=RT^:6YF
M;UMX72`](&-O<'E#:'1Y<&4@*'-W:6YD;W<M/FEN9F];>"TQ72D["B`@("`@
M("`@('-W:6YD;W<M/FEN9F]0;W-;>%T@/2!S=VEN9&]W+3YI;F9O4&]S6W@M
M,5T["B`@("`@("`@('-W:6YD;W<M/FEN9F],96Y;>%T@/2!S=VEN9&]W+3YI
M;F9O3&5N6W@M,5T["B`@("`@('T*"B`@("`@("\J($9R964@=7`@=&AE(&UE
M;7)Y(&9R;VT@=&AE('1O<"!R;W<N"0D)"2HO"B`@("`@(&9R965#:'1Y<&4@
M*'-W:6YD;W<M/FEN9F];,%TI.PH*("`@("`@+RH@061D(&ET(&EN=&\@=&AE
M('-C<F]L;&EN9R!W:6YD;W<N"0D)"2HO"B`@("`@('-W:6YD;W<M/FEN9F];
M,%T@/2!C:&%R,D-H='EP92`H:6YF;RP@)G-W:6YD;W<M/FEN9F],96Y;,%TL
M("9S=VEN9&]W+3YI;F9O4&]S6S!=*3L*("`@("`@<W=I;F1O=RT^:6YF;U!O
M<ULP72`](&IU<W1I9GE3=')I;F<@*'-W:6YD;W<M/F)O>%=I9'1H+"!S=VEN
M9&]W+3YI;F9O3&5N6S!=+"!S=VEN9&]W+3YI;F9O4&]S6S!=*3L*"B`@("`@
M("\J(%-E="!S;VUE('9A<FEA8FQE<RX)"0D)"0DJ+PH@("`@("!S=VEN9&]W
M+3YC=7)R96YT5&]P(#T@,#L*("`@("`@<W=I;F1O=RT^:71E;4-O=6YT*RL[
M"@H@("`@("`O*B!3970@=&AE(&UA>&EM=6T@=&]P(&QI;F4N"0D)"0DJ+PH@
M("`@("!S=VEN9&]W+3YM87A4;W!,:6YE(#T@<W=I;F1O=RT^:71E;4-O=6YT
M("T@<W=I;F1O=RT^=FEE=U-I>F4["B`@("`@('-W:6YD;W<M/FUA>%1O<$QI
M;F4@/2`H<W=I;F1O=RT^;6%X5&]P3&EN92`\(#`@/R`P(#H@<W=I;F1O=RT^
M;6%X5&]P3&EN92D["@H@("`@("`O*B!,971S(&1E=&5R;6EN92!T:&4@=VED
M97-T(&QI;F4@86YD('1H92!M87AI;75M(&QE9G1M;W-T(&-H87)A8W1E<BX@
M*B\*("`@("`@<W=I;F1O=RT^=VED97-T3&EN92`]($U!6$E-54T@*'-W:6YD
M;W<M/G=I9&5S=$QI;F4L('-W:6YD;W<M/FEN9F],96Y;,%TI.PH@("`@("!S
M=VEN9&]W+3YM87A,969T0VAA<B`]('-W:6YD;W<M/G=I9&5S=$QI;F4@+2`H
M<W=I;F1O=RT^8F]X5VED=&@@+2`R*3L*("`@?0H@("!E;'-E"B`@('L@"B`@
M("`@("\J($%D9"!T;R!T:&4@8F]T=&]M+@D)"0D)"2HO"B`@("`@('-W:6YD
M;W<M/FEN9F];<W=I;F1O=RT^:71E;4-O=6YT70D@/2!C:&%R,D-H='EP92`H
M:6YF;RP@)G-W:6YD;W<M/FEN9F],96Y;<W=I;F1O=RT^:71E;4-O=6YT72P@
M)G-W:6YD;W<M/FEN9F]0;W-;<W=I;F1O=RT^:71E;4-O=6YT72D["B`@("`@
M('-W:6YD;W<M/FEN9F]0;W-;<W=I;F1O=RT^:71E;4-O=6YT72`](&IU<W1I
M9GE3=')I;F<@*'-W:6YD;W<M/F)O>%=I9'1H+"!S=VEN9&]W+3YI;F9O3&5N
M6W-W:6YD;W<M/FET96U#;W5N=%TL('-W:6YD;W<M/FEN9F]0;W-;<W=I;F1O
M=RT^:71E;4-O=6YT72D["@H@("`@("`O*B!,971S(&1E=&5R;6EN92!T:&4@
M=VED97-T(&QI;F4@86YD('1H92!M87AI;75M(&QE9G1M;W-T(&-H87)A8W1E
M<BX@*B\*("`@("`@<W=I;F1O=RT^=VED97-T3&EN92`]($U!6$E-54T@*'-W
M:6YD;W<M/G=I9&5S=$QI;F4L('-W:6YD;W<M/FEN9F],96Y;<W=I;F1O=RT^
M:71E;4-O=6YT72D["B`@("`@('-W:6YD;W<M/FUA>$QE9G1#:&%R(#T@<W=I
M;F1O=RT^=VED97-T3&EN92`M("AS=VEN9&]W+3YB;WA7:61T:"`M(#(I.PH*
M("`@("`@+RH@26YC<F5M96YT('1H92!I=&5M(&-O=6YT(&%N9"!Z97)O(&]U
M="!T:&4@;F5X="!R;W<N"0DJ+PH@("`@("!S=VEN9&]W+3YI=&5M0V]U;G0K
M*SL*("`@("`@<W=I;F1O=RT^:6YF;UMS=VEN9&]W+3YI=&5M0V]U;G1=(#T@
M)UPP)SL*"B`@("`@("\J(%-E="!T:&4@;6%X:6UU;2!T;W`@;&EN92X)"0D)
M"2HO"B`@("`@('-W:6YD;W<M/FUA>%1O<$QI;F4@/2!S=VEN9&]W+3YI=&5M
M0V]U;G0@+2!S=VEN9&]W+3YV:65W4VEZ93L*("`@("`@<W=I;F1O=RT^;6%X
M5&]P3&EN92`]("AS=VEN9&]W+3YM87A4;W!,:6YE(#P@,"`_(#`@.B!S=VEN
M9&]W+3YM87A4;W!,:6YE*3L*"B`@("`@("\J($1O('=E(&AA=F4@=&\@<V-R
M;VQL/S\_"0D)"0DJ+PH@("`@("!I9B`H<W=I;F1O=RT^:71E;4-O=6YT(#X@
M<W=I;F1O=RT^=FEE=U-I>F4I"B`@("`@('L*("`@("`@("`@<W=I;F1O=RT^
M8W5R<F5N=%1O<"LK.PH@("`@("!]"B`@('T*"B`@("\J($QE=',@<F5D<F%W
M(&]U<G-E;'9E<RXN+BX)"0D)"0DJ+PH@("`O*F1R87=#1$M3=VEN9&]W("AS
M=VEN9&]W+"!S=VEN9&]W+3YB;W@I.RHO"@H@("`O*B!$<F%W(&EN('1H92!L
M:7-T+@D)"0D)"0DJ+PH@("!D<F%W0T1+4W=I;F1O=TQI<W0@*'-W:6YD;W<L
M('-W:6YD;W<M/F)O>"D["GT*"B\J"B`J(%1H:7,@<F5M;W9E<R!A;&P@=&AE
M(&QI;F5S(&EN<VED92!T:&4@<V-R;VQL:6YG('=I;F1O=RX*("HO"G9O:60@
M8VQE86Y#1$M3=VEN9&]W("A#1$M35TE.1$]7("IS=VEN9&]W*0I["B`@("\J
M($1E8VQA<F4@;&]C86P@=F%R:6%B;&5S+@D)"0D)"2HO"B`@(&EN="!X.PH*
M("`@+RH@0VQE86X@=7`@=&AE(&UE;6]R>2!U<V5D("XN+@D)"0D)*B\*("`@
M9F]R("AX/3`[('@@/"!S=VEN9&]W+3YI=&5M0V]U;G0[('@K*RD*("`@>PH@
M("`@("!F<F5E0VAT>7!E("AS=VEN9&]W+3YI;F9O6WA=*3L*("`@?0H*("`@
M+RH@4F5S970@<V]M92!V87)I86)L97,N"0D)"0D)*B\*("`@<W=I;F1O=RT^
M:71E;4-O=6YT"3T@,#L*("`@<W=I;F1O=RT^;6%X3&5F=$-H87()/2`P.PH@
M("!S=VEN9&]W+3YW:61E<W1,:6YE"3T@,#L*("`@<W=I;F1O=RT^8W5R<F5N
M=%1O<`D](#`["B`@('-W:6YD;W<M/FUA>%1O<$QI;F4)/2`P.PH*("`@+RH@
M4F5D<F%W('1H92!W:6YD;W<N"0D)"0D)*B\*("`@9')A=T-$2U-W:6YD;W<@
M*'-W:6YD;W<L('-W:6YD;W<M/F)O>"D["GT*"B\J"B`J(%1H:7,@=')I;7,@
M;&EN97,@9G)O;2!T:&4@<V-R;VQL:6YG('=I;F1O=RX*("HO"G9O:60@=')I
M;4-$2U-W:6YD;W<@*$-$2U-724Y$3U<@*G-W:6YD;W<L(&EN="!B96=I;BP@
M:6YT(&5N9"D*>PH@("!I;G0@<W1A<G0L(&9I;FES:"P@>#L*"B`@("\J($-H
M96-K('1H92!V86QU92!O9B!B96=I;BX)"0D)"2HO"B`@(&EF("AB96=I;B`\
M(#`I"B`@('L*("`@("`@<W1A<G0@/2`P.PH@("!]"B`@(&5L<V4@:68@*&)E
M9VEN(#X]('-W:6YD;W<M/FET96U#;W5N="D*("`@>PH@("`@("!S=&%R="`]
M('-W:6YD;W<M/FET96U#;W5N="TQ.PH@("!]"B`@(&5L<V4*("`@>PH@("`@
M("!S=&%R="`](&)E9VEN.PH@("!]"@H@("`O*B!#:&5C:R!T:&4@=F%L=64@
M;V8@96YD+@D)"0D)"2HO"B`@(&EF("AE;F0@/"`P*0H@("!["B`@("`@(&9I
M;FES:"`](#`["B`@('T*("`@96QS92!I9B`H96YD(#X]('-W:6YD;W<M/FET
M96U#;W5N="D*("`@>PH@("`@("!F:6YI<V@@/2!S=VEN9&]W+3YI=&5M0V]U
M;G0M,3L*("`@?0H@("!E;'-E"B`@('L*("`@("`@9FEN:7-H(#T@96YD.PH@
M("!]"@H@("`O*B!-86ME('-U<F4@=&AE('-T87)T(&ES(&QO=V5R('1H86X@
M=&AE(&5N9"X)"0DJ+PH@("!I9B`H<W1A<G0@/B!F:6YI<V@I"B`@('L*("`@
M("`@<F5T=7)N.PH@("!]"@H@("`O*B!3=&%R="!N=6MI;F<@96QE;65N=',@
M9G)O;2!T:&4@=VEN9&]W+@D)"0DJ+PH@("!F;W(@*'@]<W1A<G0[('@@/#UF
M:6YI<V@[('@K*RD*("`@>PH@("`@("!F<F5E0VAT>7!E("AS=VEN9&]W+3YI
M;F9O6WA=*3L*"B`@("`@(&EF("AX(#P@<W=I;F1O=RT^:71E;4-O=6YT+3$I
M"B`@("`@('L*("`@("`@("`@<W=I;F1O=RT^:6YF;UMX72`](&-O<'E#:'1Y
M<&4@*'-W:6YD;W<M/FEN9F];>"LQ72D["B`@("`@("`@('-W:6YD;W<M/FEN
M9F]0;W-;>%T@/2!S=VEN9&]W+3YI;F9O4&]S6W@K,5T["B`@("`@("`@('-W
M:6YD;W<M/FEN9F],96Y;>%T@/2!S=VEN9&]W+3YI;F9O3&5N6W@K,5T["B`@
M("`@('T*("`@?0H*("`@+RH@061J=7-T('1H92!I=&5M(&-O=6YT(&-O<G)E
M8W1L>2X)"0D)"2HO"B`@('-W:6YD;W<M/FET96U#;W5N="`]('-W:6YD;W<M
M/FET96U#;W5N="`M("AE;F0@+2!B96=I;BD@+2`Q.PH*("`@+RH@4F5D<F%W
M('1H92!W:6YD;W<N"0D)"0D)*B\*("`@9')A=T-$2U-W:6YD;W<@*'-W:6YD
M;W<L('-W:6YD;W<M/F)O>"D["GT*"B\J"B`J(%1H:7,@86QL;W=S('1H92!U
M<V5R('1O('!L87D@:6YS:61E('1H92!S8V]L;&EN9R!W:6YD;W<N"B`J+PIV
M;VED(&%C=&EV871E0T1+4W=I;F1O=R`H0T1+4U=)3D1/5R`J<W=I;F1O=RP@
M8VAT>7!E("IA8W1I;VYS*0I["B`@("\J($1R87<@=&AE('-C<F]L;&EN9R!L
M:7-T"0D)"0D)*B\*("`@9')A=T-$2U-W:6YD;W<@*'-W:6YD;W<L('-W:6YD
M;W<M/F)O>"D["@H@("`O*B!#:&5C:R!I9B!A8W1I;VYS(&ES($Y53$PN"0D)
M"0D)*B\*("`@:68@*&%C=&EO;G,@/3T@*&-H='EP92`J*4Y53$PI"B`@('L*
M("`@("`@+RH@1&5C;&%R92!S;VUE(&QO8V%L('9A<FEA8FQE<RX)"0D)"2HO
M"B`@("`@(&-H='EP92!I;G!U=#L*("`@("`@:6YT(')E=#L*"B`@("`@(&9O
M<B`H.SLI"B`@("`@('L*("`@("`@("`@+RH@1V5T('1H92!I;G!U="X)"0D)
M"0DJ+PH@("`@("`@("!I;G!U="`]('=G971C:"`H<W=I;F1O=RT^=VEN*3L*
M"B`@("`@("`@("\J($EN:F5C="!T:&4@8VAA<F%C=&5R(&EN=&\@=&AE('=I
M9&=E="X)"0DJ+PH@("`@("`@("!R970@/2!I;FIE8W1#1$M3=VEN9&]W("AS
M=VEN9&]W+"!I;G!U="D["B`@("`@("`@(&EF("AS=VEN9&]W+3YE>&ET5'EP
M92`A/2!V14%23%E?15A)5"D*("`@("`@("`@>PH@("`@("`@("`@("!R971U
M<FX["B`@("`@("`@('T*("`@("`@?0H@("!]"B`@(&5L<V4*("`@>PH@("`@
M("`O*B!$96-L87)E('-O;64@;&]C86P@=F%R:6%B;&5S+@D)"0D)*B\*("`@
M("`@:6YT(&QE;F=T:"`](&-H;&5N("AA8W1I;VYS*3L*("`@("`@:6YT('@@
M/2`P.PH@("`@("!I;G0@<F5T.PH*("`@("`@+RH@26YJ96-T(&5A8V@@8VAA
M<F%C=&5R(&]N92!A="!A('1I;64N"0D)"2HO"B`@("`@(&9O<B`H>#TP.R!X
M(#P@;&5N9W1H.R!X*RLI"B`@("`@('L*("`@("`@("`@<F5T(#T@:6YJ96-T
M0T1+4W=I;F1O=R`H<W=I;F1O=RP@86-T:6]N<UMX72D["B`@("`@("`@(&EF
M("AS=VEN9&]W+3YE>&ET5'EP92`A/2!V14%23%E?15A)5"D*("`@("`@("`@
M>PH@("`@("`@("`@("!R971U<FX["B`@("`@("`@('T*("`@("`@?0H@("!]
M"@H@("`O*B!3970@=&AE(&5X:70@='EP92!A;F0@<F5T=7)N+@D)"0D)*B\*
M("`@<W=I;F1O=RT^97AI=%1Y<&4@/2!V14%23%E?15A)5#L*("`@<F5T=7)N
M.PI]"@HO*@H@*B!4:&ES(&EN:F5C=',@82!S:6YG;&4@8VAA<F%C=&5R(&EN
M=&\@=&AE('=I9&=E="X*("HO"FEN="!I;FIE8W1#1$M3=VEN9&]W("A#1$M3
M5TE.1$]7("IS=VEN9&]W+"!C:'1Y<&4@:6YP=70I"GL*("`@+RH@1&5C;&%R
M92!L;V-A;"!V87)I86)L97,N"0D)"0D)*B\*("`@:6YT('!P4F5T=7)N(#T@
M,3L*"B`@("\J($1R87<@=&AE('=I;F1O=RXN+BX)"0D)"0DJ+PH@("!D<F%W
M0T1+4W=I;F1O=R`H<W=I;F1O=RP@<W=I;F1O=RT^8F]X*3L*"B`@("\J($-H
M96-K(&EF('1H97)E(&ES(&$@<')E+7!R;V-E<W,@9G5N8W1I;VX@=&\@8F4@
M8V%L;&5D+@D)*B\*("`@:68@*'-W:6YD;W<M/G!R95!R;V-E<W-&=6YC=&EO
M;B`A/2`H4%)/0T534T9.*4Y53$PI"B`@('L*("`@("`@+RH@0V%L;"!T:&4@
M<')E+7!R;V-E<W,@9G5N8W1I;VXN"0D)"0DJ+PH@("`@("!P<%)E='5R;B`]
M("@H4%)/0T534T9.*2AS=VEN9&]W+3YP<F50<F]C97-S1G5N8W1I;VXI*2`H
M=E-724Y$3U<L('-W:6YD;W<L('-W:6YD;W<M/G!R95!R;V-E<W-$871A+"!I
M;G!U="D["B`@('T*"B`@("\J(%-H;W5L9"!W92!C;VYT:6YU93\)"0D)"0DJ
M+PH@("!I9B`H<'!2971U<FX@(3T@,"D*("`@>PH@("`@("`O*B!#:&5C:R!F
M;W(@82!K97D@8FEN9&EN9RX)"0D)"0DJ+PH@("`@("!I9B`H(2!C:&5C:T-$
M2T]B:F5C=$)I;F0@*'935TE.1$]7+"!S=VEN9&]W+"!I;G!U="DI"B`@("`@
M('L*("`@("`@("`@<W=I=&-H("AI;G!U="D*("`@("`@("`@>PH@("`@("`@
M("`@("!C87-E($M%65]54"`Z"B`@("`@("`@("`@("`@("`@:68@*'-W:6YD
M;W<M/F-U<G)E;G14;W`@/B`P*0H@("`@("`@("`@("`@("`@('L*("`@("`@
M("`@("`@("`@("`@("!S=VEN9&]W+3YC=7)R96YT5&]P+2T["B`@("`@("`@
M("`@("`@("`@?0H@("`@("`@("`@("`@("`@(&5L<V4*("`@("`@("`@("`@
M("`@("!["B`@("`@("`@("`@("`@("`@("`@0F5E<"@I.PH@("`@("`@("`@
M("`@("`@('T*("`@("`@("`@("`@("`@("!B<F5A:SL*("`@"B`@("`@("`@
M("`@(&-A<V4@2T597T1/5TX@.@H@("`@("`@("`@("`@("`@(&EF("AS=VEN
M9&]W+3YC=7)R96YT5&]P(#X](#`@)B8@<W=I;F1O=RT^8W5R<F5N=%1O<"`\
M('-W:6YD;W<M/FUA>%1O<$QI;F4I"B`@("`@("`@("`@("`@("`@>PH@("`@
M("`@("`@("`@("`@("`@('-W:6YD;W<M/F-U<G)E;G14;W`K*SL*("`@("`@
M("`@("`@("`@("!]"B`@("`@("`@("`@("`@("`@96QS90H@("`@("`@("`@
M("`@("`@('L*("`@("`@("`@("`@("`@("`@("!"965P*"D["B`@("`@("`@
M("`@("`@("`@?0H@("`@("`@("`@("`@("`@(&)R96%K.PH@("`*("`@("`@
M("`@("`@8V%S92!+15E?4DE'2%0@.@H@("`@("`@("`@("`@("`@(&EF("AS
M=VEN9&]W+3YL969T0VAA<B`\('-W:6YD;W<M/FUA>$QE9G1#:&%R*0H@("`@
M("`@("`@("`@("`@('L*("`@("`@("`@("`@("`@("`@("!S=VEN9&]W+3YL
M969T0VAA<B`K*SL*("`@("`@("`@("`@("`@("!]"B`@("`@("`@("`@("`@
M("`@96QS90H@("`@("`@("`@("`@("`@('L*("`@("`@("`@("`@("`@("`@
M("!"965P*"D["B`@("`@("`@("`@("`@("`@?0H@("`@("`@("`@("`@("`@
M(&)R96%K.PH@("`*("`@("`@("`@("`@8V%S92!+15E?3$5&5"`Z"B`@("`@
M("`@("`@("`@("`@:68@*'-W:6YD;W<M/FQE9G1#:&%R(#X@,"D*("`@("`@
M("`@("`@("`@("!["B`@("`@("`@("`@("`@("`@("`@<W=I;F1O=RT^;&5F
M=$-H87(@+2T["B`@("`@("`@("`@("`@("`@?0H@("`@("`@("`@("`@("`@
M(&5L<V4*("`@("`@("`@("`@("`@("!["B`@("`@("`@("`@("`@("`@("`@
M0F5E<"@I.PH@("`@("`@("`@("`@("`@('T*("`@("`@("`@("`@("`@("!B
M<F5A:SL*("`@"B`@("`@("`@("`@(&-A<V4@2T597U!004=%(#H@8V%S92`G
M`B<@.B!C87-E("=B)R`Z(&-A<V4@)T(G(#H*("`@("`@("`@("`@("`@("!I
M9B`H<W=I;F1O=RT^8W5R<F5N=%1O<"`A/2`P*0H@("`@("`@("`@("`@("`@
M('L*("`@("`@("`@("`@("`@("`@("!I9B`H<W=I;F1O=RT^8W5R<F5N=%1O
M<"`^/2!S=VEN9&]W+3YV:65W4VEZ92D*("`@("`@("`@("`@("`@("`@("![
M"B`@("`@("`@("`@("`@("`@("`@("`@<W=I;F1O=RT^8W5R<F5N=%1O<`D]
M('-W:6YD;W<M/F-U<G)E;G14;W`@+2`H<W=I;F1O=RT^=FEE=U-I>F4@+2`Q
M*3L*("`@("`@("`@("`@("`@("`@("!]"B`@("`@("`@("`@("`@("`@("`@
M96QS90H@("`@("`@("`@("`@("`@("`@('L*("`@("`@("`@("`@("`@("`@
M("`@("!S=VEN9&]W+3YC=7)R96YT5&]P(`D](#`["B`@("`@("`@("`@("`@
M("`@("`@?0H@("`@("`@("`@("`@("`@('T*("`@("`@("`@("`@("`@("!E
M;'-E"B`@("`@("`@("`@("`@("`@>PH@("`@("`@("`@("`@("`@("`@($)E
M97`H*3L*("`@("`@("`@("`@("`@("!]"B`@("`@("`@("`@("`@("`@8G)E
M86L["B`@(`H@("`@("`@("`@("!C87-E($M%65].4$%'12`Z(&-A<V4@)P8G
M(#H@8V%S92`G("<@.B!C87-E("=F)R`Z(&-A<V4@)T8G(#H*("`@("`@("`@
M("`@("`@("!I9B`H<W=I;F1O=RT^8W5R<F5N=%1O<"`A/2!S=VEN9&]W+3YM
M87A4;W!,:6YE*0H@("`@("`@("`@("`@("`@('L*("`@("`@("`@("`@("`@
M("`@("!I9B`H*'-W:6YD;W<M/F-U<G)E;G14;W`@*R!S=VEN9&]W+3YV:65W
M4VEZ92D@/"!S=VEN9&]W+3YM87A4;W!,:6YE*0H@("`@("`@("`@("`@("`@
M("`@('L*("`@("`@("`@("`@("`@("`@("`@("!S=VEN9&]W+3YC=7)R96YT
M5&]P"3T@<W=I;F1O=RT^8W5R<F5N=%1O<"`K("AS=VEN9&]W+3YV:65W4VEZ
M92`M(#$I.PH@("`@("`@("`@("`@("`@("`@('T*("`@("`@("`@("`@("`@
M("`@("!E;'-E"B`@("`@("`@("`@("`@("`@("`@>PH@("`@("`@("`@("`@
M("`@("`@("`@('-W:6YD;W<M/F-U<G)E;G14;W`)/2!S=VEN9&]W+3YM87A4
M;W!,:6YE.PH@("`@("`@("`@("`@("`@("`@('T*("`@("`@("`@("`@("`@
M("!]"B`@("`@("`@("`@("`@("`@96QS90H@("`@("`@("`@("`@("`@('L*
M("`@("`@("`@("`@("`@("`@("!"965P*"D["B`@("`@("`@("`@("`@("`@
M?0H@("`@("`@("`@("`@("`@(&)R96%K.PH@("`*("`@("`@("`@("`@8V%S
M92!+15E?2$]-12`Z(&-A<V4@)WPG(#H*("`@("`@("`@("`@("`@("!S=VEN
M9&]W+3YL969T0VAA<B`](#`["B`@("`@("`@("`@("`@("`@8G)E86L["B`@
M(`H@("`@("`@("`@("!C87-E($M%65]%3D0@.B!C87-E("<D)R`Z"B`@("`@
M("`@("`@("`@("`@<W=I;F1O=RT^;&5F=$-H87(@/2!S=VEN9&]W+3YM87A,
M969T0VAA<B`K(#$["B`@("`@("`@("`@("`@("`@8G)E86L["B`@(`H@("`@
M("`@("`@("!C87-E("=G)R`Z(&-A<V4@)S$G(#H*("`@("`@("`@("`@("`@
M("!S=VEN9&]W+3YC=7)R96YT5&]P(#T@,#L*("`@("`@("`@("`@("`@("!B
M<F5A:SL*("`@"B`@("`@("`@("`@(&-A<V4@)T<G(#H@"B`@("`@("`@("`@
M("`@("`@<W=I;F1O=RT^8W5R<F5N=%1O<"`]('-W:6YD;W<M/FUA>%1O<$QI
M;F4["B`@("`@("`@("`@("`@("`@8G)E86L["B`@(`H@("`@("`@("`@("!C
M87-E("=L)R`Z(&-A<V4@)TPG(#H*"2`@("`@("`@(&QO861#1$M3=VEN9&]W
M26YF;W)M871I;VX@*'-W:6YD;W<I.PH@("`@("`@("`@("`@("`@(&)R96%K
M.PH@("`*("`@("`@("`@("`@8V%S92`G<R<@.B!C87-E("=3)R`Z"B`)("`@
M("`@("`@<V%V94-$2U-W:6YD;W=);F9O<FUA=&EO;B`H<W=I;F1O=RD["@D@
M("`@("`@("!B<F5A:SL*"B`@("`@("`@("`@(&-A<V4@2T597U)%5%523B`Z
M(&-A<V4@2T597U1!0B`Z"B`@("`@("`@("`@("`@("`@<W=I;F1O=RT^97AI
M=%1Y<&4@/2!V3D]234%,.PH@("`@("`@("`@("`@("`@(')E='5R;B`Q.PH@
M("`@("`@("`@("`@("`@(&)R96%K.PH@("`*("`@("`@("`@("`@8V%S92!+
M15E?15-#(#H*("`@("`@("`@("`@("`@("!S=VEN9&]W+3YE>&ET5'EP92`]
M('9%4T-!4$5?2$E4.PH@("`@("`@("`@("`@("`@(')E='5R;B`M,3L*("`@
M("`@("`@("`@("`@("!B<F5A:SL*("`@"B`@("`@("`@("`@(&-A<V4@0T1+
M7U)%1E)%4T@@.@H@("`@("`@("`@("`@("`@(')E9G)E<VA#1$M38W)E96X@
M*'-W:6YD;W<M/G-C<F5E;BD["B`@("`@("`@("`@("`@("`@8G)E86L["B`@
M(`H@("`@("`@("`@("!D969A=6QT(#H*("`@("`@("`@("`@("`@("!B<F5A
M:SL*("`@("`@("`@?0H@("`@("!]"@H@("`@("`O*B!3:&]U;&0@=V4@8V%L
M;"!A('!O<W0M<')O8V5S<S\)"0D)*B\*("`@("`@:68@*'-W:6YD;W<M/G!O
M<W10<F]C97-S1G5N8W1I;VX@(3T@*%!23T-%4U-&3BE.54Q,*0H@("`@("![
M"B`@("`@("`@("@H4%)/0T534T9.*2AS=VEN9&]W+3YP;W-T4')O8V5S<T9U
M;F-T:6]N*2D@*'935TE.1$]7+"!S=VEN9&]W+"!S=VEN9&]W+3YP;W-T4')O
M8V5S<T1A=&$L(&EN<'5T*3L*("`@("`@?0H@("!]"@H@("`O*B!2961R87<@
M=&AE(&QI<W0)"0D)"0DJ+PH@("!D<F%W0T1+4W=I;F1O=TQI<W0@*'-W:6YD
M;W<L('-W:6YD;W<M/F)O>"D["@H@("`O*B!3970@=&AE(&5X:70@='EP92!A
M;F0@<F5T=7)N+@D)"0DJ+PH@("!S=VEN9&]W+3YE>&ET5'EP92`]('9%05),
M65]%6$E4.PH@("!R971U<FX@+3$["GT*"B\J"B`J(%1H:7,@9G5N8W1I;VX@
M9')A=W,@=&AE('-W:6YD;W<@=VEN9&]W('=I9&=E="X*("HO"G9O:60@9')A
M=T-$2U-W:6YD;W<@*$-$2U-724Y$3U<@*G-W:6YD;W<L(&)O;VQE86X@0F]X
M*0I["B`@("\J($ME97`@=&AE(&)O>"!I;F9O<FUA=&EO;BX)"0D)"0DJ+PH@
M("!S=VEN9&]W+3YB;W@)/2!";W@["@H@("`O*B!%<F%S92!T:&4@;VQD(&]B
M:F5C="XN+@D)"0D)"2HO"B`@(&5R87-E0T1+4W=I;F1O=R`H<W=I;F1O=RD[
M"@H@("`O*B!$;R!W92!N965D('1O(&1R87<@:6X@=&AE('-H861O=RX)"0D)
M"2HO"B`@(&EF("AS=VEN9&]W+3YS:&%D;W<I"B`@('L*("`@("`@9')A=U-H
M861O=R`H<W=I;F1O=RT^<VAA9&]W5VEN*3L*("`@?0H*("`@+RH@1')A=R!I
M;B!T:&4@=&ET;&4@:68@=&AE<F4@:7,@;VYE"0D)"0DJ+PH@("!I9B`H<W=I
M;F1O=RT^=&ET;&4@(3T@*&-H='EP92`J*4Y53$PI"B`@('L*("`@("`@=W)I
M=&5#:'1Y<&4@*'-W:6YD;W<M/G=I;BP*"0D)<W=I;F1O=RT^=&ET;&50;W,L
M(#$L"@D)"7-W:6YD;W<M/G1I=&QE+`H)"0E(3U))6D].5$%,+"`P+`H)"0ES
M=VEN9&]W+3YT:71L94QE;BD["B`@('T*("`@"B`@("\J($1R87<@:6X@=&AE
M(&QI<W0N"0D)"0D)"2HO"B`@(&1R87=#1$M3=VEN9&]W3&ES="`H<W=I;F1O
M=RP@0F]X*3L*?0H*+RH*("H@5&AI<R!D<F%W<R!I;B!T:&4@8V]N=&5N=',@
M;V8@=&AE('-C<F]L;&EN9R!W:6YD;W<N"B`J+PIV;VED(&1R87=#1$M3=VEN
M9&]W3&ES="`H0T1+4U=)3D1/5R`J<W=I;F1O=RP@8F]O;&5A;B!";W@I"GL*
M("`@+RH@1&5C;&%R92!L;V-A;"!V87)I86)L97,N"0D)"0D)*B\*("`@8VAA
M<B!E;7!T>5-T<FEN9ULQ,#`P73L*("`@:6YT(&QA<W1,:6YE+"!X.PH*("`@
M+RH@0W)E871E('1H92!E;7!T>2!S=')I;F<N+BX)"0D)"2HO"B`@(&-L96%N
M0VAA<B`H96UP='E3=')I;F<L('-W:6YD;W<M/F)O>%=I9'1H+"`G("<I.PH*
M("`@+RH@1&5T97)M:6YE('1H92!L87-T(&QI;F4@=&\@9')A=RX)"0D)"2HO
M"B`@(&EF("AS=VEN9&]W+3YI=&5M0V]U;G0@/"!S=VEN9&]W+3YV:65W4VEZ
M92D*("`@>PH@("`@("!L87-T3&EN92`]('-W:6YD;W<M/FET96U#;W5N=#L*
M("`@?0H@("!E;'-E"B`@('L*("`@("`@;&%S=$QI;F4@/2!S=VEN9&]W+3YV
M:65W4VEZ93L*("`@?0H*("`@+RH@4W1A<G0@9')A=VEN9R!I;B!E86-H(&QI
M;F4N"0D)"0DJ+PH@("!F;W(@*'@],#L@>"`\(&QA<W1,:6YE.R!X*RLI"B`@
M('L*("`@("`@+RH@1')A=R!I;B!A;B!E;7!T>2!L:6YE+@D)"0D)"2HO"B`@
M("`@('=R:71E0VAA<B`H<W=I;F1O=RT^=VEN+"`Q+`H)"0ES=VEN9&]W+3YT
M:71L94%D:BMX+`H)"0EE;7!T>5-T<FEN9RP*"0D)2$]225I/3E1!3"P@,2P*
M"0D)<W=I;F1O=RT^8F]X5VED=&@M,2D["@H@("`@("`O*B!$<F%W(&EN('1H
M92!L:6YE+@D)"0D)"2HO"B`@("`@('=R:71E0VAT>7!E("AS=VEN9&]W+3YW
M:6XL"@D)"7-W:6YD;W<M/FEN9F]0;W-;>"MS=VEN9&]W+3YC=7)R96YT5&]P
M72P*"0D)<W=I;F1O=RT^=&ET;&5!9&HK>"P*"0D)<W=I;F1O=RT^:6YF;UMX
M*W-W:6YD;W<M/F-U<G)E;G14;W!=+`H)"0E(3U))6D].5$%,+"`*"0D)<W=I
M;F1O=RT^;&5F=$-H87(L"@D)"7-W:6YD;W<M/FEN9F],96Y;>"MS=VEN9&]W
M+3YC=7)R96YT5&]P72D["B`@('T*"B`@("\J($)O>"!T:&4@=VED9V5T(&EF
M(&YE961E9`D)"0D)"2HO"B`@(&EF("A";W@I"B`@('L*("`@("`@8F]X("AS
M=VEN9&]W+3YW:6XL($%#4U]63$E.12P@04-37TA,24Y%*3L*("`@?0H*("`@
M+RH@4F5F<F5S:"!T:&4@=VEN9&]W+@D)"0D)"2HO"B`@('=R969R97-H("AS
M=VEN9&]W+3YW:6XI.PI]"@HO*@H@*B!4:&ES(&9U;F-T:6]N(&1E<W1R;WES
M('1H92!S8W)O;&QI;F<@=VEN9&]W('=I9&=E="X*("HO"G9O:60@9&5S=')O
M>4-$2U-W:6YD;W<@*$-$2U-724Y$3U<@*G-W:6YD;W<I"GL*("`@+RH@1&5C
M;&%R92!L;V-A;"!V87)I86)L97,N"0D)"0D)*B\*("`@:6YT('@)/2`P.PH*
M("`@+RH@17)A<V4@=&AE(&]B:F5C="X)"0D)"0D)*B\*("`@97)A<V5#1$M3
M=VEN9&]W("AS=VEN9&]W*3L*"B`@("\J($-L96%R(&]U="!T:&4@8VAA<F%C
M=&5R('!O:6YT97)S+@D)"0D)*B\*("`@9F]R("AX/3`[('@@/"!S=VEN9&]W
M+3YI=&5M0V]U;G0[('@K*RD*("`@>PH@("`@("!F<F5E0VAT>7!E("AS=VEN
M9&]W+3YI;F9O6WA=*3L*("`@?0H@("!F<F5E0VAT>7!E("AS=VEN9&]W+3YT
M:71L92D["@H@("`O*B!$96QE=&4@=&AE('=I;F1O=W,N"0D)"0D)*B\*("`@
M9&5L=VEN("AS=VEN9&]W+3YW:6XI.PH@("!I9B`H<W=I;F1O=RT^<VAA9&]W
M*0H@("!["B`@("`@(&1E;'=I;B`H<W=I;F1O=RT^<VAA9&]W5VEN*3L*("`@
M?0H*("`@+RH@56YR96=I<W1E<B!T:&ES(&]B:F5C="X)"0D)"0DJ+PH@("!U
M;G)E9VES=&5R0T1+3V)J96-T("AV4U=)3D1/5RP@<W=I;F1O=RD["@H@("`O
M*B!&:6YI<V@@8VQE86YI;F<@=7`N"0D)"0D)*B\*("`@9G)E92`H<W=I;F1O
M=RD["GT*"B\J"B`J(%1H:7,@9G5N8W1I;VX@97)A<V5S('1H92!S8W)O;&QI
M;F<@=VEN9&]W('=I9&=E="X*("HO"G9O:60@97)A<V5#1$M3=VEN9&]W("A#
M1$M35TE.1$]7("IS=VEN9&]W*0I["B`@('=E<F%S92`H<W=I;F1O=RT^=VEN
M*3L*("`@=W)E9G)E<V@@*'-W:6YD;W<M/G=I;BD["B`@(&EF("AS=VEN9&]W
M+3YS:&%D;W<I"B`@('L*("`@("`@=V5R87-E("AS=VEN9&]W+3YS:&%D;W=7
M:6XI.PH@("`@("!W<F5F<F5S:"`H<W=I;F1O=RT^<VAA9&]W5VEN*3L*("`@
M?0I]"@HO*@H@*B!4:&ES(&5X96,G<R!A(&-O;6UA;F0@86YD(')E9&ER96-T
M<R!T:&4@;W5T<'5T('1O('1H92!S8W)O;&QI;F<@=VEN9&]W+@H@*B\*:6YT
M(&5X96-#1$M3=VEN9&]W("A#1$M35TE.1$]7("IS=VEN9&]W+"!C:&%R("IC
M;VUM86YD+"!I;G0@:6YS97)T4&]S*0I["B`@("\J($1E8VQA<F4@;&]C86P@
M=F%R:6%B;&5S+@D)"0D)"2HO"B`@($9)3$4@*G!S.PH@("!C:&%R('1E;7!;
M-3$S73L*("`@:6YT(&-O=6YT(#T@,#L*"B`@("\J(%1R>2!T;R!O<&5N('1H
M92!C;VUM86YD+@D)"0D)"2HO"B`@(&EF("@H<',@/2!P;W!E;B`H8V]M;6%N
M9"P@(G(B*2D@/3T@3E5,3"D*("`@>PH@("`@("!R971U<FX@+3$["B`@('T*
M"B`@("\J(%-T87)T(')E861I;F<N"0D)"0D)"2HO"B`@('=H:6QE("@H9F=E
M=',@*'1E;7`L(#4Q,BP@<',I("$]("AC:&%R("HI3E5,3"DI"B`@('L*("`@
M("`@:6YT(&QE;B`]("AI;G0I<W1R;&5N("AT96UP*3L*("`@("`@=&5M<%ML
M96XM,5T@/2`G7#`G.PH*("`@("`@+RH@061D('1H92!L:6YE('1O('1H92!S
M8W)O;&QI;F<@=VEN9&]W+@D)"0DJ+PH@("`@("!A9&1#1$M3=VEN9&]W("`H
M<W=I;F1O=RP@=&5M<"P@:6YS97)T4&]S*3L*("`@("`@8V]U;G0K*SL*("`@
M?0H*("`@+RH@0VQO<V4@=&AE('!I<&4N"0D)"0D)"2HO"B`@(&9C;&]S92`H
M<',I.PH@("!R971U<FX@8V]U;G0["GT*"B\J"B`J(%1H:7,@9G5N8W1I;VX@
M86QL;W=S('1H92!U<V5R('1O(&1U;7`@=&AE(&EN9F]R;6%T:6]N(&9R;VT@
M=&AE"B`J('-C<F]L;&]N9R!W:6YD;W<@=&\@82!F:6QE+@H@*B\*=F]I9"!S
M879E0T1+4W=I;F1O=TEN9F]R;6%T:6]N("A#1$M35TE.1$]7("IS=VEN9&]W
M*0I["B`@("\J($1E8VQA<F4@;&]C86P@=F%R:6%B;&5S+@D)"0D)"2HO"B`@
M($-$2T5.5%)9("IE;G1R>0D]("A#1$M%3E1262`J*4Y53$P["B`@(&-H87(@
M*F9I;&5N86UE"3T@*&-H87(@*BE.54Q,.PH@("!C:&%R('1E;7!;,C4V72P@
M*FUE<V=;,3!=.PH@("!I;G0@;&EN97-3879E9#L*"B`@("\J($-R96%T92!T
M:&4@96YT<GD@9FEE;&0@=&\@9V5T('1H92!F:6QE;F%M92X)"0DJ+PH@("!E
M;G1R>2`](&YE=T-$2T5N=')Y("AS=VEN9&]W+3YS8W)E96XL($-%3E1%4BP@
M0T5.5$52+"!,1494+`H)"0D)(CPO0B\U/D5N=&5R('1H92!F:6QE;F%M92!T
M;R!S879E('1O(BP*"0D)"4%?3D]234%,+"`G7R<L('9-25A%1"P*"0D)"3(P
M+"`Q+"`R-38L"@D)"0E44E5%+"!&04Q312D["@H@("`O*B!'970@=&AE(&9I
M;&5N86UE+@D)"0D)"0DJ+PH@("!F:6QE;F%M92`](&%C=&EV871E0T1+16YT
M<GD@*&5N=')Y+"`H8VAT>7!E("HI3E5,3"D["@H@("`O*B!$:60@=&AE>2!H
M:70@97-C87!E/PD)"0D)"2HO"B`@(&EF("AE;G1R>2T^97AI=%1Y<&4@/3T@
M=D530T%015](250I"B`@('L*("`@("`@+RH@4&]P=7`@82!M97-S86=E+@D)
M"0D)"2HO"B`@("`@(&UE<V=;,%T@/2`B/$,^/"]"+S4^4V%V92!#86YC96QE
M9"XB.PH@("`@("!M97-G6S%=(#T@(CQ#/D5S8V%P92!H:70N(%-C<F]L;&EN
M9R!W:6YD;W<@:6YF;W)M871I;VX@;F]T('-A=F5D+B(["B`@("`@(&UE<V=;
M,ET@/2`B("(["B`@("`@(&UE<V=;,UT@/2`B/$,^4')E<W,@86YY(&ME>2!T
M;R!C;VYT:6YU92XB.PH@("`@("!P;W!U<$QA8F5L("AS=VEN9&]W+3YS8W)E
M96XL(&UE<V<L(#0I.PH*("`@("`@+RH@0VQE86X@=7`@86YD(&5X:70N"0D)
M"0D)*B\*("`@("`@9&5S=')O>4-$2T5N=')Y("AE;G1R>2D["B`@("`@(')E
M='5R;CL*("`@?0H*("`@+RH@5W)I=&4@=&AE(&-O;G1E;G1S(&]F('1H92!S
M8W)O;&QI;F<@=VEN9&]W('1O('1H92!F:6QE+@D)*B\*("`@;&EN97-3879E
M9"`](&1U;7!#1$M3=VEN9&]W("AS=VEN9&]W+"!F:6QE;F%M92D["@H@("`O
M*B!787,@=&AE('-A=F4@<W5C8V5S<V9U;#\)"0D)"0DJ+PH@("!I9B`H;&EN
M97-3879E9"`]/2`M,2D*("`@>PH@("`@("`O*B!.;W!E+"!T96QL("=E;2X)
M"0D)"0DJ+PH@("`@("!M97-G6S!=(#T@(CQ#/CPO0B\Q-CY%<G)O<B(["B`@
M("`@(&UE<V=;,5T@/2`B/$,^0V]U;&0@;F]T('-A=F4@=&\@=&AE(&9I;&4N
M(CL*("`@("`@<W!R:6YT9B`H=&5M<"P@(CQ#/B@E<RDB+"!F:6QE;F%M92D[
M"B`@("`@(&UE<V=;,ET@/2!C;W!Y0VAA<B`H=&5M<"D["B`@("`@(&UE<V=;
M,UT@/2`B("(["B`@("`@(&UE<V=;-%T@/2`B/$,^4')E<W,@86YY(&ME>2!T
M;R!C;VYT:6YU92XB.PH@("`@("!P;W!U<$QA8F5L("AS=VEN9&]W+3YS8W)E
M96XL(&UE<V<L(#4I.PH@("`@("!F<F5E0VAA<B`H;65S9ULR72D["B`@('T*
M("`@96QS90H@("!["B`@("`@("\J(%EE<"P@;&5T('1H96T@:VYO=R!H;W<@
M;6%N>2!L:6YE<R!W97)E('-A=F5D+@D)"2HO"B`@("`@(&UE<V=;,%T@/2`B
M/$,^/"]"+S4^4V%V92!3=6-C97-S9G5L(CL*("`@("`@<W!R:6YT9B`H=&5M
M<"P@(CQ#/E1H97)E('=E<F4@)60@;&EN97,@<V%V960@=&\@=&AE(&9I;&4B
M+"!L:6YE<U-A=F5D*3L*("`@("`@;65S9ULQ72`](&-O<'E#:&%R("AT96UP
M*3L*("`@("`@<W!R:6YT9B`H=&5M<"P@(CQ#/B@E<RDB+"!F:6QE;F%M92D[
M"B`@("`@(&UE<V=;,ET@/2!C;W!Y0VAA<B`H=&5M<"D["B`@("`@(&UE<V=;
M,UT@/2`B("(["B`@("`@(&UE<V=;-%T@/2`B/$,^4')E<W,@86YY(&ME>2!T
M;R!C;VYT:6YU92XB.PH@("`@("!P;W!U<$QA8F5L("AS=VEN9&]W+3YS8W)E
M96XL(&UE<V<L(#4I.PH@("`@("!F<F5E0VAA<B`H;65S9ULQ72D[(&9R965#
M:&%R("AM97-G6S)=*3L*("`@?0H*("`@+RH@0VQE86X@=7`@86YD(&5X:70N
M"0D)"0D)*B\*("`@9&5S=')O>4-$2T5N=')Y("AE;G1R>2D["GT*"B\J"B`J
M(%1H:7,@9G5N8W1I;VX@86QL;W=S('1H92!U<V5R('1O(&QO860@;F5W(&EN
M9F]R;6%T<FEO;B!I;G1O('1H92!S8W)O;&QI;F<*("H@=VEN9&]W+@H@*B\*
M=F]I9"!L;V%D0T1+4W=I;F1O=TEN9F]R;6%T:6]N("A#1$M35TE.1$]7("IS
M=VEN9&]W*0I["B`@("\J($1E8VQA<F4@;&]C86P@=F%R:6%B;&5S+@D)"0D)
M"2HO"B`@($-$2T9314Q%0U0@*F9S96QE8W0)/2`H0T1+1E-%3$5#5"`J*4Y5
M3$P["B`@($-$2T1)04Q/1R`J9&EA;&]G"3T@*$-$2T1)04Q/1R`J*4Y53$P[
M"B`@(&-H87(@*F9I;&5N86UE"3T@*&-H87(@*BE.54Q,.PH@("!C:&%R('1E
M;7!;,C4V72P@*FUE<V=;,35=+"`J8G5T=&]N6S5=+"`J9FEL94EN9F];34%8
M3$E.15-=.PH@("!I;G0@;&EN97,L(&%N<W=E<BP@>#L*"B`@("\J($-R96%T
M92!T:&4@9FEL92!S96QE8W1O<B!T;R!C:&]O<V4@=&AE(&9I;&4N"0D)*B\*
M("`@9G-E;&5C="`](&YE=T-$2T9S96QE8W0@*'-W:6YD;W<M/G-C<F5E;BP@
M0T5.5$52+"!#14Y415(L(#(P+"`U-2P*"0D)"0DB3&]A9"!7:&EC:"!&:6QE
M("(L($%?3D]234%,+"`G+B<L"@D)"0D)05]2159%4E-%+`H)"0D)"2(\+S4^
M(BP@(CPO-#@^(BP@(CPO3CXB+"`B/"]./B(L"@D)"0D)5%)512P@1D%,4T4I
M.PH*("`@+RH@1V5T('1H92!F:6QE;F%M92!T;R!L;V%D+@D)"0D)"2HO"B`@
M(&9I;&5N86UE(#T@86-T:79A=&5#1$M&<V5L96-T("AF<V5L96-T+"`H8VAT
M>7!E("HI3E5,3"D["@H@("`O*B!-86ME('-U<F4@=&AE>2!S96QE8W1E9"!A
M(&9I;&4N"0D)"0DJ+PH@("!I9B`H9G-E;&5C="T^97AI=%1Y<&4@/3T@=D53
M0T%015](250I"B`@('L*("`@("`@+RH@4&]P=7`@82!M97-S86=E+@D)"0D)
M"2HO"B`@("`@(&UE<V=;,%T@/2`B/$,^/"]"+S4^3&]A9"!#86YC96QE9"XB
M.PH@("`@("!M97-G6S%=(#T@(B`B.PH@("`@("!M97-G6S)=(#T@(CQ#/E!R
M97-S(&%N>2!K97D@=&\@8V]N=&EN=64N(CL*("`@("`@<&]P=7!,86)E;"`H
M<W=I;F1O=RT^<V-R965N+"!M97-G+"`S*3L*"B`@("`@("\J($-L96%N('5P
M(&%N9"!E>&ET+@D)"0D)"2HO"B`@("`@(&1E<W1R;WE#1$M&<V5L96-T("AF
M<V5L96-T*3L*("`@("`@<F5T=7)N.PH@("!]"B`@(`H@("`O*B!#;W!Y('1H
M92!F:6QE;F%M92!A;F0@9&5S=')O>2!T:&4@9FEL92!S96QE8W1O<BX)"0DJ
M+PH@("!F:6QE;F%M92`](&-O<'E#:&%R("AF<V5L96-T+3YP871H;F%M92D[
M"B`@(&1E<W1R;WE#1$M&<V5L96-T("AF<V5L96-T*3L*"B`@("\J"B`@("`J
M($UA>64@=V4@<VAO=6QD(&-H96-K(&)E9F]R92!N=6MI;F<@86QL('1H92!I
M;F9O<FUA=&EO;B`*("`@("H@:6X@=&AE('-C<F]L;&EN9R!W:6YD;W<N+BX*
M("`@("HO"B`@(&EF("AS=VEN9&]W+3YI=&5M0V]U;G0@/B`P*0H@("!["B`@
M("`@("\J($-R96%T92!T:&4@9&EA;&]G(&UE<W-A9V4N"0D)"0DJ+PH@("`@
M("!M97-G6S!=(#T@(CQ#/CPO0B\U/E-A=F4@26YF;W)M871I;VX@1FER<W0B
M.PH@("`@("!M97-G6S%=(#T@(CQ#/E1H97)E(&ES(&EN9F]R;6%T:6]N(&EN
M('1H92!S8W)O;&QI;F<@=VEN9&]W+B(["B`@("`@(&UE<V=;,ET@/2`B/$,^
M1&\@>6]U('=A;G0@=&\@<V%V92!I="!T;R!A(&9I;&4@9FER<W0_(CL*("`@
M("`@8G5T=&]N6S!=(#T@(BA997,I(CL*("`@("`@8G5T=&]N6S%=(#T@(BA.
M;RDB.PH*("`@("`@+RH@0W)E871E('1H92!D:6%L;V<@=VED9V5T+@D)"0D)
M*B\*("`@("`@9&EA;&]G(#T@;F5W0T1+1&EA;&]G("AS=VEN9&]W+3YS8W)E
M96XL($-%3E1%4BP@0T5.5$52+`H)"0D);65S9RP@,BP@8G5T=&]N+"`R+"`*
M"0D)"4-/3$]27U!!25(H,BE\05]2159%4E-%+`H)"0D)5%)512P@5%)512P@
M1D%,4T4I.PH*("`@("`@+RH@06-T:79A=&4@=&AE('=I9&=E="X)"0D)"0DJ
M+PH@("`@("!A;G-W97(@/2!A8W1I=F%T94-$2T1I86QO9R`H9&EA;&]G+"`H
M8VAT>7!E("HI3E5,3"D["B`@("`@(&1E<W1R;WE#1$M$:6%L;V<@*&1I86QO
M9RD["B`@("`@(`H@("`@("`O*B!#:&5C:R!T:&4@86YS=V5R+@D)"0D)"2HO
M"B`@("`@(&EF("AA;G-W97(@/3T@+3$@?'P@86YS=V5R(#T](#`I"B`@("`@
M('L*("`@("`@("`@+RH@4V%V92!T:&4@:6YF;W)M871I;VXN"0D)"0DJ+PH@
M("`@("`@("!S879E0T1+4W=I;F1O=TEN9F]R;6%T:6]N("AS=VEN9&]W*3L*
M("`@("`@?0H@("!]"@H@("`O*B!/<&5N('1H92!F:6QE(&%N9"!R96%D(&ET
M(&EN+@D)"0D)*B\*("`@;&EN97,@/2!R96%D1FEL92`H9FEL96YA;64L(&9I
M;&5);F9O+"!-05A,24Y%4RD["B`@(&EF("AL:6YE<R`]/2`M,2D*("`@>PH@
M("`@("`O*B!4:&4@9FEL92!R96%D(&1I9&XG="!W;W)K+@D)"0D)*B\*("`@
M("`@;65S9ULP72`]("(\0SX\+T(O,38^17)R;W(B.PH@("`@("!M97-G6S%=
M(#T@(CQ#/D-O=6QD(&YO="!R96%D('1H92!F:6QE(CL*("`@("`@<W!R:6YT
M9B`H=&5M<"P@(CQ#/B@E<RDB+"!F:6QE;F%M92D["B`@("`@(&UE<V=;,ET@
M/2!C;W!Y0VAA<B`H=&5M<"D["B`@("`@(&UE<V=;,UT@/2`B("(["B`@("`@
M(&UE<V=;-%T@/2`B/$,^4')E<W,@86YY(&ME>2!T;R!C;VYT:6YU92XB.PH@
M("`@("!P;W!U<$QA8F5L("AS=VEN9&]W+3YS8W)E96XL(&UE<V<L(#4I.PH@
M("`@("!F<F5E0VAA<B`H;65S9ULR72D["B`@("`@(')E='5R;CL*("`@?0H*
M("`@+RH@0VQE86X@;W5T('1H92!S8W)O;&QI;F<@=VEN9&]W+@D)"0D)*B\*
M("`@8VQE86Y#1$M3=VEN9&]W("AS=VEN9&]W*3L*"B`@("\J(%-E="!T:&4@
M;F5W(&EN9F]R;6%T:6]N(&EN('1H92!S8W)O;&QI;F<@=VEN9&]W+@D)"2HO
M"B`@('-E=$-$2U-W:6YD;W<@*'-W:6YD;W<L(&9I;&5);F9O+"!L:6YE<RP@
M<W=I;F1O=RT^8F]X*3L*"B`@("\J($-L96%N('5P+@D)"0D)"0D)*B\*("`@
M9F]R("AX/3`[('@@/"!L:6YE<SL@>"LK*0H@("!["B`@("`@(&9R965#:&%R
M("AF:6QE26YF;UMX72D["B`@('T*?0H*+RH*("H@5&AI<R!A8W1U86QL>2!D
M=6UP<R!T:&4@:6YF;W)M871I;VX@9G)O;2!T:&4@<V-R;VQL:6YG('=I;F1O
M=R!T;R!A"B`J(&9I;&4N"B`J+PII;G0@9'5M<$-$2U-W:6YD;W<@*$-$2U-7
M24Y$3U<@*G-W:6YD;W<L(&-H87(@*F9I;&5N86UE*0I["B`@("\J($1E8VQA
M<F4@;&]C86P@=F%R:6%B;&5S+@D)"0D)"2HO"B`@($9)3$4@*F]U='!U=$9I
M;&4)/2`H1DE,12`J*4Y53$P["B`@(&-H87(@*G)A=TQI;F4)/2`H8VAA<B`J
M*4Y53$P["B`@(&EN="!X.PH*("`@+RH@5')Y('1O(&]P96X@=&AE(&9I;&4N
M"0D)"0D)*B\*("`@:68@*"AO=71P=71&:6QE(#T@9F]P96X@*&9I;&5N86UE
M+"`B=R(I*2`]/2!.54Q,*0H@("!["B`@("`@(')E='5R;B`M,3L*("`@?0H*
M("`@+RH@4W1A<G0@=W)I=&EN9R!O=70@=&AE(&9I;&4N"0D)"0DJ+PH@("!F
M;W(@*'@],#L@>"`\('-W:6YD;W<M/FET96U#;W5N=#L@>"LK*0H@("!["B`@
M("`@(')A=TQI;F4@/2!C:'1Y<&4R0VAA<B`H<W=I;F1O=RT^:6YF;UMX72D[
M"B`@("`@(&9P<FEN=&8@*&]U='!U=$9I;&4L("(E<UQN(BP@<F%W3&EN92D[
M"B`@("`@(&9R965#:&%R("AR87=,:6YE*3L*("`@?0H*("`@+RH@0VQO<V4@
M=&AE(&9I;&4@86YD(')E='5R;B!T:&4@;G5M8F5R(&]F(&QI;F5S('=R:71T
M96XN"0DJ+PH@("!F8VQO<V4@*&]U='!U=$9I;&4I.PH@("!R971U<FX@<W=I
M;F1O=RT^:71E;4-O=6YT.PI]"@HO*@H@*B!4:&ES(&9U;F-T:6]N('-E=',@
M=&AE('!R92UP<F]C97-S(&9U;F-T:6]N+@H@*B\*=F]I9"!S971#1$M3=VEN
M9&]W4')E4')O8V5S<R`H0T1+4U=)3D1/5R`J<W=I;F1O=RP@4%)/0T534T9.
M(&-A;&QB86-K+"!V;VED("ID871A*0I["B`@('-W:6YD;W<M/G!R95!R;V-E
M<W-&=6YC=&EO;B`](&-A;&QB86-K.PH@("!S=VEN9&]W+3YP<F50<F]C97-S
M1&%T82`](&1A=&$["GT*(`HO*@H@*B!4:&ES(&9U;F-T:6]N('-E=',@=&AE
M('!O<W0M<')O8V5S<R!F=6YC=&EO;BX*("HO"G9O:60@<V5T0T1+4W=I;F1O
M=U!O<W10<F]C97-S("A#1$M35TE.1$]7("IS=VEN9&]W+"!04D]#15-31DX@
M8V%L;&)A8VLL('9O:60@*F1A=&$I"GL*("`@<W=I;F1O=RT^<&]S=%!R;V-E
M<W-&=6YC=&EO;B`](&-A;&QB86-K.PH@("!S=VEN9&]W+3YP;W-T4')O8V5S
0<T1A=&$@/2!D871A.PI]"FQB
`
end
SHAR_EOF
  echo 'File cdk4.8.0/swindow.c is complete' &&
  echo 'uudecoding file cdk4.8.0/swindow.c' &&
  uudecode _sharuue.tmp < _sharuue.tmp && rm -f _sharuue.tmp &&
  $shar_touch -am 0709111596 'cdk4.8.0/swindow.c' &&
  chmod 0444 'cdk4.8.0/swindow.c' ||
  echo 'restore of cdk4.8.0/swindow.c failed'
  shar_count="`wc -c < 'cdk4.8.0/swindow.c'`"
  test 23731 -eq "$shar_count" ||
    echo "cdk4.8.0/swindow.c: original size 23731, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk4.8.0/template.c ==============
if test -f 'cdk4.8.0/template.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk4.8.0/template.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk4.8.0/template.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk4.8.0/template.c' &&
#include "cdk.h"
X
/*
X * $Author: glover $
X * $Date: 1996/07/05 01:33:07 $
X * $Revision: 1.51 $
X */
extern char *GPasteBuffer;
X
/*
X * This creates a template widget.
X */
CDKTEMPLATE *newCDKTemplate (CDKSCREEN *cdkscreen, int xplace, int yplace, int lplace, char *label, char *plate, char *overlay, boolean box, boolean shadow)
{
X   /* Set up some variables						*/
X   CDKTEMPLATE *template	= (CDKTEMPLATE *)malloc (sizeof (CDKTEMPLATE));
X   int boxWidth			= 0;
X   int boxHeight		= 3;
X   int xpos			= xplace;
X   int ypos			= yplace;
X   int labelxoffset		= 0;
X   int labelyoffset		= 0;
X   int fieldxoffset		= 0;
X   int fieldyoffset		= 0;
X   int fieldWidth		= (int)strlen (plate) + 2;
X   int junk			= 0;
X   char *plainLabel		= (char *)NULL;
X   
X   /* Translate the char * label to a chtype *				*/
X   template->label	= char2Chtype (label, &template->labelLen, &junk);
X   plainLabel		= chtype2Char (template->label);
X
X   /* Translate the char * overlay to a chtype *			*/
X   if (overlay != (char *)NULL)
X   {
X      template->overlay = char2Chtype (overlay, &template->overlayLen, &junk);
X      template->fieldAttr = template->overlay[0] & A_ATTRIBUTES;
X   }
X   else
X   {
X      template->overlay		= (chtype *)NULL;
X      template->overlayLen	= 0;
X      template->fieldAttr	= A_NORMAL;
X   }
X   
X   /* Align the x and y offsets for the label.				*/
X   alignlabel (plainLabel, lplace, fieldWidth, &boxWidth, &boxHeight, &labelxoffset, &labelyoffset, &fieldxoffset, &fieldyoffset);
X   freeChar (plainLabel);
X
X   /* Rejustify the x and y positions if we need to.			*/
X   alignxy (cdkscreen->window, &xpos, &ypos, boxWidth, boxHeight);
X
X   /* Make the template window						*/
X   template->win = newwin (boxHeight, boxWidth, ypos, xpos);
X   
X   /* Is the template window NULL??					*/
X   if (template->win == (WINDOW *)NULL)
X   {
X      /* Clean up any used memory.					*/
X      freeChtype (template->label);
X      freeChtype (template->overlay);
X      free (template);
X
X      /* Return a NULL pointer.						*/
X      return ((CDKTEMPLATE *)NULL);
X   }
X
X   /* Make the field window.						*/
X   template->field = subwin (template->win, 1, fieldWidth, ypos+fieldyoffset, xpos+fieldxoffset);
X   template->labelWin = subwin (template->win, 1, template->labelLen+2, ypos+labelyoffset, xpos+labelxoffset);
X   keypad (template->field, TRUE);
X
X   /* Set up the info field.						*/
X   template->plateLen = (int)strlen(plate);
X   template->info = (char *)malloc (sizeof(char) * (template->plateLen+2));
X   cleanChar (template->info, template->plateLen+1, '\0');
X
X   /* Set up the rest of the structure 					*/
X   template->parent			= cdkscreen->window;
X   template->shadowWin			= (WINDOW *)NULL;
X   template->plate			= copyChar (plate);
X   template->fieldWidth			= fieldWidth;
X   template->platePos			= 0;
X   template->screenPos			= 0;
X   template->infoPos			= 0;
X   template->exitType			= vNEVER_ACTIVATED;
X   template->box			= box;
X   template->shadow			= shadow;
X   template->callbackfn			= (void *)&CDKTemplateCallBack;
X   template->preProcessFunction		= (PROCESSFN)NULL;
X   template->preProcessData		= (void *)NULL;
X   template->postProcessFunction	= (PROCESSFN)NULL;
X   template->postProcessData		= (void *)NULL;
X
X   /* Do we need to create a shaodw???					*/
X   if (shadow)
X   {
X      template->shadowWin = newwin (boxHeight, boxWidth, ypos+1, xpos+1);
X   }
X
X   /* Clean the key bindings.						*/
X   cleanCDKObjectBindings (vTEMPLATE, template);
X
X   /* Register this baby.               				*/
X   registerCDKObject (cdkscreen, vTEMPLATE, template);
X
X   /* Return the pointer to the structure				*/
X   return template;
}
X
/*
X * This actually manages the template widget...
X */
char *activateCDKTemplate (CDKTEMPLATE *template, chtype *actions)
{
X   /* Declare local variables.						*/
X   chtype input	= (chtype)NULL;
X   char *ret	= (char *)NULL;
X
X   /* Draw the object.							*/
X   drawCDKTemplate (template, template->box);
X
X   /* Check if actions is NULL.						*/
X   if (actions == (chtype *)NULL)
X   {
X      for (;;)
X      {
X         /* Get the input.						*/
X         input = wgetch (template->win);
X 
X         /* Inject the character into the widget.			*/
X         ret = injectCDKTemplate (template, input);
X         if (template->exitType != vEARLY_EXIT)
X         {
X            return ret;
X         }
X      }
X   }
X   else
X   {
X      int length = chlen (actions);
X      int x = 0;
X 
X      /* Inject each character one at a time.				*/
X      for (x=0; x < length; x++)
X      {
X         ret = injectCDKTemplate (template, actions[x]);
X         if (template->exitType != vEARLY_EXIT)
X         {
X            return ret;
X         }
X      }
X   }
X
X   /* Set the exit type and return.					*/
X   template->exitType = vEARLY_EXIT;
X   return ret;
}
X
/*
X * This injects a character into the widget.
X */
char *injectCDKTemplate (CDKTEMPLATE *template, chtype input)
{
X   /* Declare some local variables.				*/
X   int ppReturn = 1;
X   int length, x;
X
X   /* Set the exit type and return.				*/
X   template->exitType = vEARLY_EXIT;
X
X   /* Move the cursor.						*/
X   drawCDKTemplateField (template);
X
X   /* Should we call a post-process?				*/
X   if (template->postProcessFunction != (PROCESSFN)NULL)
X   {
X      ((PROCESSFN)(template->postProcessFunction)) (vTEMPLATE, template, template->preProcessData, input);
X   }
X
X   /* Should we continue?					*/
X   if (ppReturn != 0)
X   {
X      /* Check a predefined binding...          		*/
X      if (! checkCDKObjectBind (vTEMPLATE, template, input))
X      {
X         switch (input)
X         {
X            case KEY_LEFT : case KEY_RIGHT : case KEY_UP : case KEY_DOWN :
X                 Beep();
X                 break;
X
X            case CDK_ERASE :
X                 if ((int)strlen(template->info) != 0)
X                 {
X                    cleanChar (template->info, template->plateLen+1, '\0');
X                    template->screenPos = 0;
X                    template->infoPos = 0;
X                    template->platePos = 0;
X                    drawCDKTemplateField (template);
X                 }
X                 break;
X
X            case CDK_CUT:
X                 if ((int)strlen(template->info) != 0)
X                 {
X	            freeChar (GPasteBuffer);
X                    GPasteBuffer = copyChar (template->info);
X                    cleanChar (template->info, template->plateLen+1, '\0');
X                    template->screenPos = 0;
X                    template->infoPos = 0;
X                    template->platePos = 0;
X                    drawCDKTemplateField (template);
X                 }
X                 else
X                 {
X                    Beep();
X                 }
X                 break;
X
X            case CDK_COPY:
X                 if ((int)strlen(template->info) != 0)
X                 {
X	            freeChar (GPasteBuffer);
X                    GPasteBuffer = copyChar (template->info);
X                 }
X                 else
X                 {
X                    Beep();
X                 }
X                 break;
X
X            case CDK_PASTE:
X                 if (GPasteBuffer != (char *)NULL)
X                 {
X                    /* Clean the informatiob from the field.		*/
X                    cleanChar (template->info, template->plateLen+1, '\0');
X                    template->screenPos = 0;
X                    template->infoPos = 0;
X                    template->platePos = 0;
X
X                    /* Start inserting each character one at a time.	*/
X                    length = (int)strlen (GPasteBuffer);
X                    for (x=0; x < length; x++)
X                    {
X                       ((TEMPLATECB)template->callbackfn)(template, GPasteBuffer[x]);
X                    }
X                    drawCDKTemplateField (template);
X                 }
X                 else
X                 {
X                    Beep();
X                 }
X                 break;
X
X            case KEY_RETURN : case KEY_TAB :
X                 template->exitType = vNORMAL;
X                 return template->info;
X                 break;
X   
X            case KEY_ESC :
X                 template->exitType = vESCAPE_HIT;
X                 return (char *)NULL;
X                 break;
X   
X            case CDK_REFRESH :
X                 refreshCDKScreen (template->screen);
X                 break;
X            
X            default :
X                 ((TEMPLATECB)template->callbackfn)(template, input);
X                 break;
X         }
X      }
X
X      /* Should we call a post-process?					*/
X      if (template->postProcessFunction != (PROCESSFN)NULL)
X      {
X         ((PROCESSFN)(template->postProcessFunction)) (vTEMPLATE, template, template->postProcessData, input);
X      }
X   }
X
X   /* Set the exit type and return.					*/
X   template->exitType = vEARLY_EXIT;
X   return (char *)NULL;
}
X
/*
X * This is the standard callback proc for the template.
X */
void CDKTemplateCallBack (CDKTEMPLATE *template, chtype input)
{
X   /* Check the character input.					*/
X   if (input == DELETE || input == KEY_BACKSPACE || input == '')
X   {
X      /* Make sure we don't go out of bounds.				*/
X      if (template->platePos == 0 || template->info[0] == '\0')
X      {
X         Beep();
X         return;
X      }
X
X      /* Remove it and redisplay....					*/
X      template->info[--template->infoPos] = '\0';
X      template->platePos--;
X      template->screenPos--;
X
X      /* Move the cursor						*/
X      adjustCDKTemplateCursor (template, -1);
X      mvwaddch (template->field, 0, template->screenPos,
X		template->overlay[template->platePos] | template->fieldAttr);
X      wmove (template->field, 0, template->screenPos);
X   }
X   else
X   {
X      /* To be safe, we should cast the chtype to a char		*/
X      char newchar = (char)input;
X
X      /* Make sure we don't go out of bounds.				*/
X      if (template->platePos >= template->fieldWidth)
X      {
X         Beep();
X         return;
X      }
X
X      /* We should check to see if what they typed in matches		*/
X      /* what the plate states.						*/
X      if (isdigit(newchar) && ( \
X		template->plate[template->platePos] == 'A' || \
X		template->plate[template->platePos] == 'C' || \
X		template->plate[template->platePos] == 'c'))
X      {
X         Beep();
X         return;
X      }
X      if (!isdigit(newchar) && template->plate[template->platePos] == '#')
X      {
X         Beep();
X         return;
X      }
X
X      /* Do we need to convert the case???				*/
X      if (template->plate[template->platePos] == 'C' || \
X		template->plate[template->platePos] == 'X')
X      {
X         newchar = toupper ((char)input);
X      }
X      else if (template->plate[template->platePos] == 'c' || \
X		template->plate[template->platePos] == 'x')
X      {
X         newchar = tolower ((char)input);
X      }
X
X      /* Add it and redisplay....					*/
X      template->info[template->infoPos++] = newchar;
X      template->info[template->infoPos] = '\0';
X      mvwaddch (template->field, 0, template->screenPos,
X			newchar | template->fieldAttr);
X      template->platePos++;
X      template->screenPos++;
X
X      /* Move the cursor						*/
X      adjustCDKTemplateCursor (template, +1);
X   }
}
X
/*
X * This takes the overlay and the info, and mixes the two, for a
X * 'mixed' character string...
X */
char *mixCDKTemplate (CDKTEMPLATE *template)
{
X   /* Reconstruct the info.						*/
X   char *mixedString	= (char *)NULL;
X   int platePos		= 0;
X   int infoPos		= 0;
X   
X   /* Make soime room for the mixed string.				*/
X   mixedString = (char *) malloc ((sizeof (char) * template->plateLen) + 3);
X   cleanChar (mixedString, template->plateLen+3, '\0');
X
X   /* Start copying from the plate to the destination string.		*/
X   while (platePos < template->plateLen)
X   {
X      if (template->plate[platePos] == '#' || \
X		template->plate[platePos] == 'A' || \
X		template->plate[platePos] == 'C' || \
X		template->plate[platePos] == 'c' || \
X		template->plate[platePos] == 'M' || \
X		template->plate[platePos] == 'X' || \
X		template->plate[platePos] == 'x')
X      {
X         mixedString[platePos]	= template->info[infoPos++];
X      }
X      else
X      {
X         mixedString[platePos]	= template->plate[platePos];
X      }
X      platePos++;
X   }
X
X   /* Return the new string.						*/
X   return mixedString;
}
X
/*
X * This takes a mixed string and returns a non-mixed string.
X */
char *unmixCDKTemplate (CDKTEMPLATE *template, char *info)
{
X   /* Reconstruct the info.						*/
X   char *unmixedString	= (char *)NULL;
X   int infolen		= (int)strlen (info);
X   int x		= 0;
X   int pos		= 0;
X
X   /* Create a char * pointer.						*/
X   unmixedString	= (char *)malloc (sizeof(char) * (infolen+2));
X   cleanChar (unmixedString, infolen+2, '\0');
X
X   /* Start copying.							*/
X   while (pos < infolen)
X   {
X      if (template->plate[pos] == '#' || \
X		template->plate[pos] == 'A' || \
X		template->plate[pos] == 'C' || \
X		template->plate[pos] == 'c' || \
X		template->plate[pos] == 'M' || \
X		template->plate[pos] == 'X' || \
X		template->plate[pos] == 'x')
X      {
X         unmixedString[x++] = info[pos++];
X      }
X      else
X      {
X         pos++;
X      }
X   }
X
X   /* Return the new string.						*/
X   return unmixedString;
}
X
/*
X * This function draws
X */
void drawCDKTemplate (CDKTEMPLATE *template, boolean Box)
{
X   /* Keep the box information.						*/
X   template->box = Box;
X
X   /* Erase the old object...						*/
X   eraseCDKTemplate (template);
X
X   /* Do we need to draw the shadow.					*/
X   if (template->shadow)
X   {
X      drawShadow (template->shadowWin);
X   }
X
X   /* Box it if needed							*/
X   if (Box)
X   {
X      box (template->win, ACS_VLINE, ACS_HLINE);
X   }
X   wrefresh (template->win);
X   
X   /* Draw the template field.						*/
X   drawCDKTemplateField (template);
}
X
/*
X * This draws the template field.
X */
void drawCDKTemplateField (CDKTEMPLATE *template)
{
X   /* Declare local variables.						*/
X   int infolen = (int)strlen (template->info);
X   int x = 0;
X
X   /* Draw in the label and the template object.			*/
X   writeChtype (template->labelWin, 0, 0, 
X			template->label,
X			HORIZONTAL, 0,
X			template->labelLen);
X   wrefresh (template->labelWin);
X
X   /* Draw in the template...						*/
X   if (template->overlay != (chtype *)NULL)
X   {
X      writeChtype (template->field, 0, 0,
X			template->overlay,
X			HORIZONTAL, 0,
X			template->overlayLen);
X   }
X
X   /* Adjust the cursor.					*/
X   if (infolen != 0)
X   {
X      int pos	= 0;
X      for (x=0; x < template->fieldWidth; x++)
X      {
X         if ((template->plate[x] == '#' ||
X		template->plate[x] == 'A' ||
X		template->plate[x] == 'C' ||
X		template->plate[x] == 'c' ||
X		template->plate[x] == 'M' ||
X		template->plate[x] == 'X' ||
X		template->plate[x] == 'x') &&
X		pos < infolen)
X         {
X            mvwaddch (template->field, 0, x, template->info[pos++]);
X         }
X      }
X      wmove (template->field, 0, infolen);
X   }
X   else
X   {
X      adjustCDKTemplateCursor (template, +1);
X   }
X   wrefresh (template->field);
}
X
/*
X * This function adjusts the cursor for the template.
X */
void adjustCDKTemplateCursor (CDKTEMPLATE *template, int direction)
{
X   while (template->plate[template->platePos] != '#' &&
X		template->plate[template->platePos] != 'A' &&
X		template->plate[template->platePos] != 'C' &&
X		template->plate[template->platePos] != 'c' &&
X		template->plate[template->platePos] != 'M' &&
X		template->plate[template->platePos] != 'X' &&
X		template->plate[template->platePos] != 'x'  &&
X		template->platePos < template->fieldWidth)
X   {
X      template->platePos += direction;
X      template->screenPos += direction;
X   }
X   wmove (template->field, 0, template->screenPos);
X   wrefresh (template->field);
}
X
/*
X * This function destroys this widget.
X */
void destroyCDKTemplate (CDKTEMPLATE *template)
{
X   /* Erase the object.							*/
X   eraseCDKTemplate (template);
X
X   /* Clear out the character pointers.					*/
X   freeChtype (template->label);
X   freeChtype (template->overlay);
X   freeChar (template->plate);
X   freeChar (template->info);
X
X   /* Delete the windows.						*/
X   delwin (template->field);
X   delwin (template->labelWin);
X   if (template->shadow)
X   {
X      delwin (template->shadowWin);
X   }
X   delwin (template->win);
X
X   /* Unregister this object.						*/
X   unregisterCDKObject (vTEMPLATE, template);
X
X   /* Finish cleaning up.						*/
X   free (template);
}
X
/*
X * This function erases the widget.
X */
void eraseCDKTemplate (CDKTEMPLATE *template)
{
X   werase (template->field);
X   werase (template->labelWin);
X   werase (template->win);
X   wrefresh (template->win);
X   if (template->shadow)
X   {
X      werase (template->shadowWin);
X      wrefresh (template->shadowWin);
X   }
}
X
/*
X * This function sets the value given to the template.
X */
void setCDKTemplate (CDKTEMPLATE *template, char *newValue, boolean box)
{
X   /* Declare local variables.						*/
X   int len		= 0;
X   int copychars	= 0;
X   int charcount	= 0;
X   int filler		= 0;
X
X   /* Keep some variables.						*/
X   template->box	= box;
X
X   /* Just to be sure, if lets make sure the new value isn't NULL.	*/
X   if (newValue == (char *)NULL)
X   { 
X      /* Then we want to just erase the old value.			*/
X      cleanChar (template->info, template->fieldWidth, '\0');
X
X      /* Set the cursor place values.					*/
X      template->screenPos = 0;
X      template->platePos = 0;
X      template->infoPos = 0;
X      return;
X   }
X
X   /* Determine how many characters we need to copy.			*/
X   len		= (int)strlen (newValue);
X   copychars	= (len < template->fieldWidth ? len : template->fieldWidth);
X
X   /* OK, erase the old value, and copy in the new value.		*/
X   cleanChar (template->info, template->fieldWidth, '\0');
X   strncpy (template->info, newValue, copychars);
X
X   /* Set the cursor place values.					*/
X   while (charcount++ < len)
X   {
X      if (template->plate[charcount] != '#' &&
X		template->plate[charcount] != 'A' &&
X		template->plate[charcount] != 'C' &&
X		template->plate[charcount] != 'c' &&
X		template->plate[charcount] != 'M' &&
X		template->plate[charcount] != 'X' &&
X		template->plate[charcount] != 'x')
X      {
X         filler++;
X      }
X   }
X
X   /* Now set the variables.						*/
X   template->screenPos	= filler + len;
X   template->platePos	= filler + len;
X   template->infoPos	= len;
}
X
/*
X * This erases the information in the template widget.
X */
void cleanCDKTemplate (CDKTEMPLATE *template)
{
X   cleanChar (template->info, template->fieldWidth, '\0');
}
X
/*
X * This function sets the callback function for the widget.
X */
void setCDKTemplateCB (CDKTEMPLATE *template, TEMPLATECB callback)
{
X   template->callbackfn = (void *)callback;
}
X
/*
X * This function sets the pre-process function.
X */
void setCDKTemplatePreProcess (CDKTEMPLATE *template, PROCESSFN callback, void *data)
{
X   template->preProcessFunction = callback;
X   template->preProcessData = data;
}
X 
/*
X * This function sets the post-process function.
X */
void setCDKTemplatePostProcess (CDKTEMPLATE *template, PROCESSFN callback, void *data)
{
X   template->postProcessFunction = callback;
X   template->postProcessData = data;
}
SHAR_EOF
  $shar_touch -am 0709111596 'cdk4.8.0/template.c' &&
  chmod 0444 'cdk4.8.0/template.c' ||
  echo 'restore of cdk4.8.0/template.c failed'
  shar_count="`wc -c < 'cdk4.8.0/template.c'`"
  test 18906 -eq "$shar_count" ||
    echo "cdk4.8.0/template.c: original size 18906, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk4.8.0/viewer.c ==============
if test -f 'cdk4.8.0/viewer.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk4.8.0/viewer.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk4.8.0/viewer.c (binary)'
  sed 's/^X//' << 'SHAR_EOF' > _sharuue.tmp &&
begin 600 cdk4.8.0/viewer.c
M(VEN8VQU9&4@(F-D:RYH(@H*+RH*("H@)$%U=&AO<CH@9VQO=F5R("0*("H@
M)$1A=&4Z(#$Y.38O,#<O,#4@,#$Z,S,Z,#<@)`H@*B`D4F5V:7-I;VXZ(#$N
M-C<@)`H@*B\*"B\J($UA:V4@;&]C86P@9VQO8F%L('9A<G,N"0D)"0D)*B\*
M(V1E9FEN90D)1$]73@D),`HC9&5F:6YE"0E54`D),0IS=&%T:6,@8VAA<B`J
M"5-E87)C:%!A='1E<FX)/2`H8VAA<B`J*4Y53$P["FEN=`D)4V5A<F-H1&ER
M96-T:6]N"3T@1$]73CL*"B\J($1E8VQA<F4@;&]C86P@9G5N8W1I;VYS+B!4
M:&ES(&MI;F1A(&UA:V5S("=E;2`G<')I=F%T92<)"2HO"FEN="!S96%R8VA&
M;W)7;W)D("A#1$M6245715(@*G9I97=E<BP@8VAA<B`J<&%T=&5R;BP@:6YT
M(&1I<F5C=&EO;BD["FEN="!J=6UP5&],:6YE("A#1$M6245715(@*G9I97=E
M<BD["G9O:60@<&]P57!,86)E;"`H0T1+5DE%5T52("IV:65W97(L(&-H87(@
M*FUE<V<I.PIV;VED(&=E=$%N9%-T;W)E4&%T=&5R;B`H0T1+4T-2145.("IS
M8W)E96XL(&EN="!W:61T:"D["@HO*@H@*B!4:&ES(&9U;F-T:6]N(&-R96%T
M97,@82!N97<@=FEE=V5R(&]B:F5C="X*("HO"D-$2U9)15=%4B`J;F5W0T1+
M5FEE=V5R("A#1$M30U)%14X@*F-D:W-C<F5E;BP@:6YT('AP;&%C92P@:6YT
M('EP;&%C92P@:6YT(&AE:6=H="P@:6YT('=I9'1H+"!C:&%R("HJ8G5T=&]N
M<RP@:6YT(&)U='1O;D-O=6YT+"!C:'1Y<&4@8G5T=&]N2&EG:&QI9VAT+"!B
M;V]L96%N(&)O>"P@8F]O;&5A;B!S:&%D;W<I"GL*("`@+RH@1&5C;&%R92!L
M;V-A;"!V87)I86)L97,N"0D)"0D)*B\*("`@0T1+5DE%5T52("IV:65W97()
M/2`H0T1+5DE%5T52("HI;6%L;&]C("AS:7IE;V8@*$-$2U9)15=%4BDI.PH@
M("!I;G0@8F]X5VED=&@)"3T@=VED=&@["B`@(&EN="!B;WA(96EG:'0)/2!H
M96EG:'0@*R`S.PH@("!I;G0@>'!O<PD)/2!X<&QA8V4["B`@(&EN="!Y<&]S
M"0D]('EP;&%C93L*("`@:6YT(&)U='1O;E=I9'1H"3T@,#L*("`@:6YT(&)U
M='1O;D%D:@D](#`["B`@(&EN="!B=71T;VY0;W,)/2`Q.PH@("!I;G0@>`D)
M/2`P.PH*("`@+RH@4F5J=7-T:69Y('1H92!X(&%N9"!Y('!O<VET:6]N<R!I
M9B!W92!N965D('1O+@D)"2HO"B`@(&%L:6=N>'D@*&-D:W-C<F5E;BT^=VEN
M9&]W+"`F>'!O<RP@)GEP;W,L(&)O>%=I9'1H+"!B;WA(96EG:'0I.PH*("`@
M+RH@36%K92!T:&4@=FEE=V5R('=I;F1O=PD)"0D)"2HO"B`@('9I97=E<BT^
M=VEN"0D](&YE=W=I;B`H8F]X2&5I9VAT+"!B;WA7:61T:"LQ+"!Y<&]S+"!X
M<&]S*3L*"B`@("\J($ES('1H92!W:6YD;W<@3E5,3#\)"0D)"0DJ+PH@("!I
M9B`H=FEE=V5R+3YW:6X@/3T@*%=)3D1/5R`J*4Y53$PI"B`@('L*("`@("`@
M+RH@0VQE86X@=7`@86YY('5S960@;65M;W)Y+@D)"0D)*B\*("`@("`@9G)E
M92`H=FEE=V5R*3L*"B`@("`@("\J(%)E='5R;B!A($Y53$P@<&]I;G1E<BX)
M"0D)"0DJ+PH@("`@("!R971U<FX@*"A#1$M6245715(@*BE.54Q,*3L*("`@
M?0H*("`@+RH@5'5R;B!T:&4@:V5Y<&%D(&]N(&9O<B!T:&4@=FEE=V5R+@D)
M"0DJ+PH@("!K97EP860@*'9I97=E<BT^=VEN+"!44E5%*3L*"B`@("\J($-R
M96%T92!T:&4@8G5T=&]N<PD)"0D)"2HO"B`@('9I97=E<BT^8G5T=&]N0V]U
M;G0)"3T@8G5T=&]N0V]U;G0["B`@(&9O<B`H>#TP.R!X(#P@8G5T=&]N0V]U
M;G0[('@K*RD*("`@>PH@("`@("!V:65W97(M/F)U='1O;EMX70D)/2!C:&%R
M,D-H='EP92`H8G5T=&]N<UMX72P@)G9I97=E<BT^8G5T=&]N3&5N6WA=+"`F
M8G5T=&]N061J*3L*("`@("`@8G5T=&]N5VED=&@)"2L]('9I97=E<BT^8G5T
M=&]N3&5N6WA=("L@,3L*("`@?0H@("!B=71T;VY!9&H)/2`H:6YT*2@H8F]X
M5VED=&@M8G5T=&]N5VED=&@I+R`H8G5T=&]N0V]U;G0@*S$I*3L*("`@8G5T
M=&]N4&]S"3T@,2`K(&)U='1O;D%D:CL*("`@9F]R("AX/3`[('@@/"!B=71T
M;VY#;W5N=#L@>"LK*0H@("!["B`@("`@('9I97=E<BT^8G5T=&]N4&]S6WA=
M"3T@8G5T=&]N4&]S.PH@("`@("!B=71T;VY0;W,)"0DK/2!B=71T;VY!9&H@
M*R!V:65W97(M/F)U='1O;DQE;EMX73L*("`@?0H*("`@+RH@4V5T('1H92!R
M97-T(&]F('1H92!V87)I86)L97,)"0D)"2HO"B`@('9I97=E<BT^<&%R96YT
M"0D](&-D:W-C<F5E;BT^=VEN9&]W.PH@("!V:65W97(M/G-H861O=U=I;@D)
M/2`H5TE.1$]7("HI3E5,3#L*("`@=FEE=V5R+3YT:71L90D)/2!C:&%R,D-H
M='EP92`H(CPO53XJ*BH@56YT:71L960@*BHJ/"%5/B(L("9V:65W97(M/G1I
M=&QE3&5N+"`F=FEE=V5R+3YT:71L95!O<RD["B`@('9I97=E<BT^=&ET;&50
M;W,)"3T@:G5S=&EF>5-T<FEN9R`H8F]X5VED=&@L('9I97=E<BT^=&ET;&5,
M96XL('9I97=E<BT^=&ET;&50;W,I.PH@("!V:65W97(M/F)U='1O;DAI9VAL
M:6=H=`D](&)U='1O;DAI9VAL:6=H=#L*("`@=FEE=V5R+3YB;WA(96EG:'0)
M"3T@8F]X2&5I9VAT.PH@("!V:65W97(M/F)O>%=I9'1H"0D](&)O>%=I9'1H
M("T@,CL*("`@=FEE=V5R+3YV:65W4VEZ90D)/2!H96EG:'0@+2`R.PH@("!V
M:65W97(M/F)O>`D)"3T@8F]X.PH@("!V:65W97(M/F5X:714>7!E"0D]('9.
M159%4E]!0U1)5D%4140["B`@('9I97=E<BT^<VAA9&]W"0D]('-H861O=SL*
M("`@=FEE=V5R+3YC=7)R96YT0G5T=&]N"3T@,#L*("`@=FEE=V5R+3YC=7)R
M96YT5&]P"0D](#`["B`@('9I97=E<BT^;&5N9W1H"0D](#`["B`@('9I97=E
M<BT^;&5F=$-H87()"3T@,#L*("`@=FEE=V5R+3YM87A,969T0VAA<@D)/2`P
M.PH@("!V:65W97(M/FUA>%1O<$QI;F4)"3T@,#L*("`@=FEE=V5R+3YC:&%R
M86-T97)S"0D](#`["B`@('9I97=E<BT^:6YF;U-I>F4)"3T@+3$["@H@("`O
M*B!$;R!W92!N965D('1O(&-R96%T92!A('-H861O=S\_/PD)"0D)*B\*("`@
M:68@*'-H861O=RD*("`@>PH@("`@("!V:65W97(M/G-H861O=U=I;B`](&YE
M=W=I;B`H8F]X2&5I9VAT+"!B;WA7:61T:"LQ+"!Y<&]S*S$L('AP;W,K,2D[
M"B`@('T*"B`@("\J($-L96%N('1H92!K97D@8FEN9&EN9W,)"0D)"0DJ+PH@
M("!C;&5A;D-$2T]B:F5C=$)I;F1I;F=S("AV5DE%5T52+"!V:65W97(I.PH*
M("`@+RH@4F5G:7-T97(@=&AI<R!B86)Y+@D)"0D)"2HO"B`@(')E9VES=&5R
M0T1+3V)J96-T("AC9&MS8W)E96XL('96245715(L('9I97=E<BD["@H@("`O
M*B!2971U<FX@=&AE('9I97=E<B!L:7-T"0D)"0D)*B\*("`@<F5T=7)N("AV
M:65W97(I.PI]"@HO*@H@*B!4:&ES(&9U;F-T:6]N('-E=',@=&AE(&-O;G1E
M;G1S(&]F('1H92!V:65W97(N"B`J+PII;G0@<V5T0T1+5FEE=V5R("A#1$M6
M245715(@*G9I97=E<BP@8VAA<B`J=&ET;&4L(&-H87(@*BII;F9O+"!I;G0@
M:6YF;U-I>F4L(&-H='EP92!B=71T;VY(:6=H;&EG:'0L(&)O;VQE86X@871T
M<DEN=&5R<"P@8F]O;&5A;B!B;W@I"GL*("`@+RH@1&5C;&%R92!L;V-A;"!V
M87)I86)L97,N"0D)"0D)*B\*("`@8VAA<B!F:6QE;F%M95LU,3)=.PH@("!I
M;G0@=VED97-T3&EN90D]("TQ.PH@("!I;G0@8W5R<F5N=$QI;F4)/2`P.PH@
M("!I;G0@>`D)/2`P.PH*("`@+RH@0VQE86X@;W5T('1H92!O;&0@=FEE=V5R
M(&EN9F\N("AI9B!T:&5R92!I<R!A;GDI"0D)*B\*("`@9G)E94-H='EP92`H
M=FEE=V5R+3YT:71L92D["B`@(&9O<B`H>#TP.R!X(#P]('9I97=E<BT^:6YF
M;U-I>F4[('@K*RD*("`@>PH@("`@("!F<F5E0VAT>7!E("AV:65W97(M/FEN
M9F];>%TI.PH@("!]"@H@("`O*B!+965P('-O;64@<V5M:2UP97)I;F%N="!I
M;F9O"0D)"0DJ+PH@("!V:65W97(M/F)O>`D)"3T@8F]X.PH@("!V:65W97(M
M/FEN=&5R<')E=`D)/2!A='1R26YT97)P.PH@("!V:65W97(M/F)U='1O;DAI
M9VAL:6=H=`D](&)U='1O;DAI9VAL:6=H=#L*"B`@("\J(%-E="!U<"!T:&4@
M=&ET;&4@;V8@=&AE('9I97=E<BX)"0D)"2HO"B`@(&EF("AT:71L92`A/2`H
M8VAA<B`J*4Y53$PI"B`@('L*("`@("`@=FEE=V5R+3YT:71L92`](&-H87(R
M0VAT>7!E("AT:71L92P@)G9I97=E<BT^=&ET;&5,96XL("9V:65W97(M/G1I
M=&QE4&]S*3L*("`@("`@=FEE=V5R+3YT:71L95!O<R`](&IU<W1I9GE3=')I
M;F<@*'9I97=E<BT^8F]X5VED=&@L"@D)"0EV:65W97(M/G1I=&QE3&5N+"!V
M:65W97(M/G1I=&QE4&]S*3L*("`@?0H*("`@+RH@0V]P>2!T:&4@:6YF;W)M
M871I;VX@9VEV96XL('=I=&AO=70@:6YT97)P<F5T871I;VXN"0DJ+PH@("!C
M=7)R96YT3&EN92`](#`["B`@(&9O<B`H>#TP.R!X(#P](&EN9F]3:7IE.R!X
M*RLI"B`@('L*("`@("`@:68@*&EN9F];>%T@/3T@*&-H87(@*BD@3E5,3"D*
M("`@("`@>PH@("`@("`@("!V:65W97(M/FEN9F];8W5R<F5N=$QI;F5="3T@
M*&-H='EP92`J*4Y53$P["B`@("`@("`@('9I97=E<BT^:6YF;TQE;EMC=7)R
M96YT3&EN95T)/2`P.PH@("`@("`@("!V:65W97(M/FEN9F]0;W-;8W5R<F5N
M=$QI;F5="3T@,#L*("`@("`@("`@8W5R<F5N=$QI;F4K*SL*("`@("`@?0H@
M("`@("!E;'-E(`H@("`@("!["B`@("`@("`@("\J($-H96-K(&EF('=E(&AA
M=F4@82!F:6QE(&QI;FL@:6X@=&AI<R!L:6YE+@D)"2HO"B`@("`@("`@(&EF
M("AC:&5C:T9O<DQI;FL@*&EN9F];>%TL(&9I;&5N86UE*2`]/2`Q*0H@("`@
M("`@("!["B`@("`@("`@("`@("\J(%=E(&AA=F4@82!L:6YK+"!O<&5N('1H
M92!F:6QE+@D)"0DJ+PH@("`@("`@("`@("!C:&%R("IF:6QE0V]N=&5N='-;
M34%83$E.15-=+"!T96UP6S(U-ET["B`@("`@("`@("`@(&EN="!L96X)"3T@
M,#L*("`@("`@("`@("`@:6YT(&9I;&5,96X)"3T@,#L*("`@("`@("`@("`@
M:6YT(&%D:@D)/2`P.PH@("`@("`@("`@("!I;G0@9FEL94QI;F4)/2`P.PH@
M("`@("`@("`@("`@("`*("`@("`@("`@("`@+RH@3W!E;B!T:&4@9FEL92!A
M;F0@<'5T(&ET(&EN=&\@=&AE('9I97=E<BX)"2HO"B`@("`@("`@("`@(&9I
M;&5,96X@/2!R96%D1FEL92`H9FEL96YA;64L(&9I;&5#;VYT96YT<RP@34%8
M3$E.15,I.PH@("`@("`@("`@("!I9B`H9FEL94QE;B`]/2`M,2D*("`@("`@
M("`@("`@>PH@("`@("`@("`@("`@("`O*B!#;W5L9"!N;W0@;W!E;B!T:&4@
M9FEL92X)"0D)*B\*(VEF9&5F($-/3$]2"B`@("`@("`@("`@("`@('-P<FEN
M=&8@*'1E;7`L("(\0SX\+S$V/DQI;FL@1F%I;&5D.B!#;W5L9"!N;W0@;W!E
M;B!T:&4@9FEL92`E<R(L(&9I;&5N86UE*3L*(V5L<V4*("`@("`@("`@("`@
M("`@<W!R:6YT9B`H=&5M<"P@(CQ#/CPO2SY,:6YK($9A:6QE9#H@0V]U;&0@
M;F]T(&]P96X@=&AE(&9I;&4@)7,B+"!F:6QE;F%M92D["B-E;F1I9@H@("`@
M("`@("`@("`@("!V:65W97(M/FEN9F];8W5R<F5N=$QI;F5="3T@8VAA<C)#
M:'1Y<&4@*'1E;7`L("9L96XL("9A9&HI.PH@("`@("`@("`@("`@("!V:65W
M97(M/FEN9F]0;W-;8W5R<F5N=$QI;F5="3T@:G5S=&EF>5-T<FEN9R`H=FEE
M=V5R+3YB;WA7:61T:"P@;&5N+"!A9&HI.PH@("`@("`@("`@("`@("!V:65W
M97(M/FEN9F],96Y;8W5R<F5N=$QI;F5="3T@;&5N.PH@("`@("`@("`@("`@
M("!W:61E<W1,:6YE(#T@34%824U532AW:61E<W1,:6YE+"!V:65W97(M/FEN
M9F],96Y;8W5R<F5N=$QI;F5=*3L*("`@("`@("`@("`@("`@8W5R<F5N=$QI
M;F4K*SL*("`@("`@("`@("`@?0H@("`@("`@("`@("!E;'-E"B`@("`@("`@
M("`@('L*("`@("`@("`@("`@("`@+RH@1F]R(&5A8V@@;&EN92!R96%D+"!C
M;W!Y(&ET(&EN=&\@=&AE('9I97=E<BX)"2HO"B`@("`@("`@("`@("`@(&9O
M<B`H9FEL94QI;F4],#L@9FEL94QI;F4@/"!F:6QE3&5N(#L@9FEL94QI;F4K
M*RD*("`@("`@("`@("`@("`@>PH@("`@("`@("`@("`@("`@("!I;G0@;&5N
M(#T@*&EN="ES=')L96X@*&9I;&5#;VYT96YT<UMF:6QE3&EN95TI.PH@("`@
M("`@("`@("`@("`@("!I;G0@>3L*"B`@("`@("`@("`@("`@("`@("\J($EN
M:70@;65M;W)Y(&%N9"!C;&5A;B!I="X)"0D)*B\*("`@("`@("`@("`@("`@
M("`@=FEE=V5R+3YI;F9O6V-U<G)E;G1,:6YE72`]("AC:'1Y<&4@*BEM86QL
M;V,@*'-I>F5O9BAC:'1Y<&4I("H@*&QE;BLS*2D["B`@("`@("`@("`@("`@
M("`@(&-L96%N0VAT>7!E("AV:65W97(M/FEN9F];8W5R<F5N=$QI;F5=+"!L
M96XK,RP@)UPP)RD["@H@("`@("`@("`@("`@("`@("`O*B!#;W!Y(&9R;VT@
M;VYE('1O('1H92!O=&AE<BX)"0DJ+PH@("`@("`@("`@("`@("`@("!F;W(@
M*'D],#L@>2`\(&QE;CL@>2LK*0H@("`@("`@("`@("`@("`@("!["B`@("`@
M("`@("`@("`@("`@("`@('9I97=E<BT^:6YF;UMC=7)R96YT3&EN95U;>5T@
M/2!F:6QE0V]N=&5N='-;9FEL94QI;F5=6WE=.PH@("`@("`@("`@("`@("`@
M("!]"B`@("`@("`@("`@("`@("`@('9I97=E<BT^:6YF;TQE;EMC=7)R96YT
M3&EN95T)/2!L96X["B`@("`@("`@("`@("`@("`@('9I97=E<BT^:6YF;U!O
M<UMC=7)R96YT3&EN95T)/2`P.PH@("`@("`@("`@("`@("`@("!W:61E<W1,
M:6YE"0D)/2!-05A)355-*'=I9&5S=$QI;F4L(&QE;BD["B`@("`@("`@("`@
M("`@("`@('9I97=E<BT^8VAA<F%C=&5R<PD)*ST@;&5N.PH@("`@("`@("`@
M("`@("`@("!F<F5E0VAA<B`H9FEL94-O;G1E;G1S6V9I;&5,:6YE72D["B`@
M("`@("`@("`@("`@("`@(&-U<G)E;G1,:6YE*RL["B`@("`@("`@("`@("`@
M('T*("`@("`@("`@("`@?0H@("`@("`@("!]"B`@("`@("`@(&5L<V4*("`@
M("`@("`@>PH@("`@("`@("`@("`O*B!$:60@=&AE>2!A<VL@9F]R(&%T=')I
M8G5T92!I;G1E<G!R971A=&EO;C\)"2HO"B`@("`@("`@("`@(&EF("@A=FEE
M=V5R+3YI;G1E<G!R970I"B`@("`@("`@("`@('L*("`@("`@("`@("`@("`@
M:6YT(&QE;B`]("AI;G0I<W1R;&5N("AI;F9O6WA=*3L*("`@("`@("`@("`@
M("`@:6YT('D["@H@("`@("`@("`@("`@("`O*B!);FET(&UE;6]R>2!A;F0@
M8VQE86X@:70N"0D)"2HO"B`@("`@("`@("`@("`@('9I97=E<BT^:6YF;UMC
M=7)R96YT3&EN95T@/2`H8VAT>7!E("HI;6%L;&]C("AS:7IE;V8H8VAT>7!E
M*2`J("AL96XK,RDI.PH@("`@("`@("`@("`@("!C;&5A;D-H='EP92`H=FEE
M=V5R+3YI;F9O6V-U<G)E;G1,:6YE72P@;&5N*S,L("=<,"<I.PH@("`*("`@
M("`@("`@("`@("`@+RH@0V]P>2!F<F]M(&]N92!T;R!T:&4@;W1H97(N"0D)
M"2HO"B`@("`@("`@("`@("`@(&9O<B`H>3TP.R!Y(#P@;&5N.R!Y*RLI"B`@
M("`@("`@("`@("`@('L*("`@("`@("`@("`@("`@("`@=FEE=V5R+3YI;F9O
M6V-U<G)E;G1,:6YE75MY72`](&EN9F];>%U;>5T["B`@("`@("`@("`@("`@
M('T*("`@("`@("`@("`@("`@=FEE=V5R+3YI;F9O3&5N6V-U<G)E;G1,:6YE
M70D](&QE;CL*("`@("`@("`@("`@("`@=FEE=V5R+3YI;F9O4&]S6V-U<G)E
M;G1,:6YE70D](#`["B`@("`@("`@("`@("`@('=I9&5S=$QI;F4)"0D]($U!
M6$E-54TH=VED97-T3&EN92P@;&5N*3L*("`@("`@("`@("`@("`@=FEE=V5R
M+3YC:&%R86-T97)S"0DK/2!L96X["B`@("`@("`@("`@("`@(&-U<G)E;G1,
M:6YE*RL["B`@("`@("`@("`@('T*("`@("`@("`@("`@96QS90H@("`@("`@
M("`@("!["B`@("`@("`@("`@("`@('9I97=E<BT^:6YF;UMC=7)R96YT3&EN
M95T@/2!C:&%R,D-H='EP92`H:6YF;UMX72P*"0D)"0D))G9I97=E<BT^:6YF
M;TQE;EMC=7)R96YT3&EN95TL"@D)"0D)"29V:65W97(M/FEN9F]0;W-;8W5R
M<F5N=$QI;F5=*3L*("`@("`@("`@("`@("`@=FEE=V5R+3YI;F9O4&]S6V-U
M<G)E;G1,:6YE72`](&IU<W1I9GE3=')I;F<@*'9I97=E<BT^8F]X5VED=&@L
M"@D)"0D)"79I97=E<BT^:6YF;TQE;EMC=7)R96YT3&EN95TL"@D)"0D)"79I
M97=E<BT^:6YF;U!O<UMC=7)R96YT3&EN95TI.PH@("`@("`@("`@("`@("!W
M:61E<W1,:6YE(#T@34%824U532AW:61E<W1,:6YE+"!V:65W97(M/FEN9F],
M96Y;8W5R<F5N=$QI;F5=*3L*("`@("`@("`@("`@("`@=FEE=V5R+3YC:&%R
M86-T97)S("L]('9I97=E<BT^:6YF;TQE;EMC=7)R96YT3&EN95T["B`@("`@
M("`@("`@("`@(&-U<G)E;G1,:6YE*RL["B`@("`@("`@("`@('T*("`@("`@
M("`@?0H@("`@("!]"B`@('T*("`@"B`@("\J"B`@("`J($1E=&5R;6EN92!H
M;W<@;6%N>2!C:&%R86-T97)S('=E(&-A;B!S:&EF="!T;R!T:&4@<FEG:'0*
M("`@("H@8F5F;W)E(&%L;"!T:&4@:71E;7,@:&%V92!B965N('9I97=E<B!O
M9F8@=&AE('-C<F5E;BX*("`@("HO"B`@(&EF("AW:61E<W1,:6YE(#X@=FEE
M=V5R+3YB;WA7:61T:"D*("`@>PH@("`@("!V:65W97(M/FUA>$QE9G1#:&%R
M(#T@*'=I9&5S=$QI;F4@+2!V:65W97(M/F)O>%=I9'1H*3L*("`@?0H@("!E
M;'-E"B`@('L*("`@("`@=FEE=V5R+3YM87A,969T0VAA<B`](#`["B`@('T*
M"B`@("\J(%-E="!U<"!T:&4@;F5E9&5D('9A<G,@9F]R('1H92!V:65W97(@
M;&ES="X@("`@"0D)*B\*("`@=FEE=V5R+3YI;F9O4VEZ92`](&-U<G)E;G1,
M:6YE+3$["B`@(&EF("AV:65W97(M/FEN9F]3:7IE(#P]('9I97=E<BT^=FEE
M=U-I>F4I"B`@('L*("`@("`@=FEE=V5R+3YM87A4;W!,:6YE(#T@+3$["B`@
M('T*("`@96QS90H@("!["B`@("`@('9I97=E<BT^;6%X5&]P3&EN92`]('9I
M97=E<BT^:6YF;U-I>F4M,3L*("`@?0H@("!R971U<FX@=FEE=V5R+3YI;F9O
M4VEZ93L*?0H*+RH*("H@5&AI<R!F=6YC=&EO;B!A8W1U86QL>2!C;VYT<F]L
M<R!T:&4@=F5W97(N+BX*("HO"FEN="!A8W1I=F%T94-$2U9I97=E<B`H0T1+
M5DE%5T52("IV:65W97(I"GL*("`@+RH@1&5C;&%R92!L;V-A;"!V87)I86)L
M97,N"0D)"0D)*B\*("`@0T1+3$%"14P@*F9I;&5);F9O3&%B96P["B`@(&-H
M='EP92!I;G!U=#L*("`@8VAA<B`J9FEL94EN9F];,3!=+"!T96UP6S4P,%T[
M"B`@(&EN="!X+"!2149215-(.PH*(VEF9&5F($Y/1%E.04Q,3T,*("`@8VAT
M>7!E(&5M<'1Y4W1R:6YG6S(U-ET["B-E;'-E"B`@(&-H='EP92!E;7!T>5-T
M<FEN9UMV:65W97(M/F)O>%=I9'1H73L*(V5N9&EF"@H@("`O*B!#<F5A=&4@
M82!S=')I;F<@9G5L;"!O9B!S<&%C97,N"0D)"0DJ+PH@("!C;&5A;D-H='EP
M92`H96UP='E3=')I;F<L('9I97=E<BT^8F]X5VED=&@M,2P@)UPP)RD["B`@
M(&-L96%N0VAT>7!E("AE;7!T>5-T<FEN9RP@=FEE=V5R+3YB;WA7:61T:"TS
M+"`G("<I.PH*("`@+RH@0W)E871E('1H92!I;F9O<FUA=&EO;B!A8F]U="!T
M:&4@9FEL92!S=&%T<RX)"0DJ+PH@("!S<')I;G1F("AT96UP+"`B/"\U/B`@
M("`@(#PO53Y&:6QE(%-T871I<W1I8W,\(54^("`@("`\(34^(BD["B`@(&9I
M;&5);F9O6S!=(#T@8V]P>4-H87(H=&5M<"D["B`@('-P<FEN=&8@*'1E;7`L
M("(\+S4^("`@("`@("`@("`@("`@("`@("`@("`@("`\(34^(BD["B`@(&9I
M;&5);F9O6S%=(#T@8V]P>4-H87(H=&5M<"D["B`@('-P<FEN=&8@*'1E;7`L
M("(\+S4O4CY#:&%R86-T97(@0V]U;G0Z/"%2/B`E+31D("`@("`\(34^(BP@
M=FEE=V5R+3YC:&%R86-T97)S*3L*("`@9FEL94EN9F];,ET@/2!C;W!Y0VAA
M<BAT96UP*3L*("`@<W!R:6YT9B`H=&5M<"P@(CPO-2]2/DQI;F4@0V]U;G0@
M("`@(#H\(5(^("4M-&0@("`@(#PA-3XB+"!V:65W97(M/FEN9F]3:7IE*3L*
M("`@9FEL94EN9F];,UT@/2!C;W!Y0VAA<BAT96UP*3L*("`@<W!R:6YT9B`H
M=&5M<"P@(CPO-3X@("`@("`@("`@("`@("`@("`@("`@("`@(#PA-3XB*3L*
M("`@9FEL94EN9F];-%T@/2!C;W!Y0VAA<BAT96UP*3L*("`@<W!R:6YT9B`H
M=&5M<"P@(CQ#/CPO-3Y0<F5S<R!!;GD@2V5Y(%1O($-O;G1I;G5E+CPA-3XB
M*3L*("`@9FEL94EN9F];-5T@/2!C;W!Y0VAA<BAT96UP*3L*"B`@("\J(%-E
M="!T:&4@8W5R<F5N="!B=71T;VXN"0D)"0D)*B\*("`@=FEE=V5R+3YC=7)R
M96YT0G5T=&]N(#T@,#L*"B`@("\J($1R87<@=&AE('9I97=E<B!L:7-T"0D)
M"0D)*B\*("`@9')A=T-$2U9I97=E<B`H=FEE=V5R+"!V:65W97(M/F)O>"D[
M"@H@("`O*B!$;R!T:&ES('5N=&EL($M%65]215154DX@:7,@:&ET+@D)"0D)
M*B\*("`@9F]R("@[..RD*("`@>PH@("`@("`O*B!297-E="!T:&4@<F5F<F5S
M:"!F;&%G+@D)"0D)*B\*("`@("`@4D5&4D532"`]($9!3%-%.PH*("`@("`@
M+RH@1V5T('1H92!U<V5R(&EN<'5T+@D)"0D)"2HO"B`@("`@(&EN<'5T(#T@
M=V=E=&-H("AV:65W97(M/G=I;BD["B`@("`@(&EF("@A(&-H96-K0T1+3V)J
M96-T0FEN9"`H=E9)15=%4BP@=FEE=V5R+"!I;G!U="DI"B`@("`@('L*("`@
M("`@("`@<W=I=&-H("AI;G!U="D*("`@("`@("`@>PH@("`@("`@("`@("!C
M87-E($M%65]404(@.B`*"2`@("`@("`@(&EF("AV:65W97(M/F)U='1O;D-O
M=6YT(#X@,2D*("`@("`@("`@("`@("`@("!["B`@("`@("`@("`@("`@("`@
M("`@:68@*'9I97=E<BT^8W5R<F5N=$)U='1O;B`]/2!V:65W97(M/F)U='1O
M;D-O=6YT("TQ*0H@("`@("`@("`@("`@("`@("`@('L*("`@("`@("`@("`@
M("`@("`@("`@("!V:65W97(M/F-U<G)E;G1"=71T;VX)/2`P.PH@("`@("`@
M("`@("`@("`@("`@('T*("`@("`@("`@("`@("`@("`@("!E;'-E"B`@("`@
M("`@("`@("`@("`@("`@>PH@("`@("`@("`@("`@("`@("`@("`@('9I97=E
M<BT^8W5R<F5N=$)U='1O;BLK.PH@("`@("`@("`@("`@("`@("`@('T*"B`@
M("`@("`@("`@("`@("`@("`@+RH@4F5D<F%W('1H92!B=71T;VYS+@D)"0DJ
M+PH@("`@("`@("`@("`@("`@("`@(&1R87=#1$M6:65W97)"=71T;VYS("AV
M:65W97(I.PH@("`@("`@("`@("`@("`@('T*("`@("`@("`@("`@("`@("!B
M<F5A:SL*("`@"B`@("`@("`@("`@(&-A<V4@2T597U50(#H*("`@("`@("`@
M("`@("`@("!I9B`H=FEE=V5R+3YC=7)R96YT5&]P(#X@,"D*("`@("`@("`@
M("`@("`@("!["B`@("`@("`@("`@("`@("`@("`@=FEE=V5R+3YC=7)R96YT
M5&]P+2T["B`@("`@("`@("`@("`@("`@("`@4D5&4D532`D](%12544["B`@
M("`@("`@("`@("`@("`@?0H@("`@("`@("`@("`@("`@(&5L<V4*("`@("`@
M("`@("`@("`@("!["B`@("`@("`@("`@("`@("`@("`@0F5E<"@I.PH@("`@
M("`@("`@("`@("`@('T*("`@("`@("`@("`@("`@("!B<F5A:SL*("`@"B`@
M("`@("`@("`@(&-A<V4@2T597T1/5TX@.@H@("`@("`@("`@("`@("`@(&EF
M("AV:65W97(M/F-U<G)E;G14;W`@/"!V:65W97(M/FUA>%1O<$QI;F4I"B`@
M("`@("`@("`@("`@("`@>PH@("`@("`@("`@("`@("`@("`@('9I97=E<BT^
M8W5R<F5N=%1O<"LK.PH@("`@("`@("`@("`@("`@("`@(%)%1E)%4T@)/2!4
M4E5%.PH@("`@("`@("`@("`@("`@('T*("`@("`@("`@("`@("`@("!E;'-E
M"B`@("`@("`@("`@("`@("`@>PH@("`@("`@("`@("`@("`@("`@($)E97`H
M*3L*("`@("`@("`@("`@("`@("!]"B`@("`@("`@("`@("`@("`@8G)E86L[
M"B`@(`H@("`@("`@("`@("!C87-E($M%65]224=(5"`Z"B`@("`@("`@("`@
M("`@("`@:68@*'9I97=E<BT^;&5F=$-H87(@/"!V:65W97(M/FUA>$QE9G1#
M:&%R*0H@("`@("`@("`@("`@("`@('L*("`@("`@("`@("`@("`@("`@("!V
M:65W97(M/FQE9G1#:&%R("LK.PH@("`@("`@("`@("`@("`@("`@(%)%1E)%
M4T@)/2!44E5%.PH@("`@("`@("`@("`@("`@('T*("`@("`@("`@("`@("`@
M("!E;'-E"B`@("`@("`@("`@("`@("`@>PH@("`@("`@("`@("`@("`@("`@
M($)E97`H*3L*("`@("`@("`@("`@("`@("!]"B`@("`@("`@("`@("`@("`@
M8G)E86L["B`@(`H@("`@("`@("`@("!C87-E($M%65],1494(#H*("`@("`@
M("`@("`@("`@("!I9B`H=FEE=V5R+3YL969T0VAA<B`^(#`I"B`@("`@("`@
M("`@("`@("`@>PH@("`@("`@("`@("`@("`@("`@('9I97=E<BT^;&5F=$-H
M87(@+2T["B`@("`@("`@("`@("`@("`@("`@4D5&4D532`D](%12544["B`@
M("`@("`@("`@("`@("`@?0H@("`@("`@("`@("`@("`@(&5L<V4*("`@("`@
M("`@("`@("`@("!["B`@("`@("`@("`@("`@("`@("`@0F5E<"@I.PH@("`@
M("`@("`@("`@("`@('T*("`@("`@("`@("`@("`@("!B<F5A:SL*("`@"B`@
M("`@("`@("`@(&-A<V4@2T597U!004=%(#H@8V%S92`G`B<@.B!C87-E("=B
M)R`Z(&-A<V4@)T(G(#H*("`@("`@("`@("`@("`@("!I9B`H=FEE=V5R+3YC
M=7)R96YT5&]P(#X@,"D*("`@("`@("`@("`@("`@("!["B`@("`@("`@("`@
M("`@("`@("`@:68@*"AV:65W97(M/F-U<G)E;G14;W`@+2`H=FEE=V5R+3YV
M:65W4VEZ92TQ*2D@/B`P*0H@("`@("`@("`@("`@("`@("`@('L*("`@("`@
M("`@("`@("`@("`@("`@("!V:65W97(M/F-U<G)E;G14;W`)/2!V:65W97(M
M/F-U<G)E;G14;W`@+2`H=FEE=V5R+3YV:65W4VEZ92`M(#$I.PH@("`@("`@
M("`@("`@("`@("`@('T*("`@("`@("`@("`@("`@("`@("!E;'-E"B`@("`@
M("`@("`@("`@("`@("`@>PH@("`@("`@("`@("`@("`@("`@("`@('9I97=E
M<BT^8W5R<F5N=%1O<"`)/2`P.PH@("`@("`@("`@("`@("`@("`@('T*("`@
M("`@("`@("`@("`@("`@("!2149215-("3T@5%)513L*("`@("`@("`@("`@
M("`@("!]"B`@("`@("`@("`@("`@("`@96QS90H@("`@("`@("`@("`@("`@
M('L*("`@("`@("`@("`@("`@("`@("!"965P*"D["B`@("`@("`@("`@("`@
M("`@?0H@("`@("`@("`@("`@("`@(&)R96%K.PH@("`*("`@("`@("`@("`@
M8V%S92!+15E?3E!!1T4@.B!C87-E("<&)R`Z(&-A<V4@)R`G(#H@8V%S92`G
M9B<@.B!C87-E("=&)R`Z"B`@("`@("`@("`@("`@("`@:68@*'9I97=E<BT^
M8W5R<F5N=%1O<"`\('9I97=E<BT^;6%X5&]P3&EN92D*("`@("`@("`@("`@
M("`@("!["B`@("`@("`@("`@("`@("`@("`@:68@*"AV:65W97(M/F-U<G)E
M;G14;W`@*R!V:65W97(M/G9I97=3:7IE*2`\('9I97=E<BT^;6%X5&]P3&EN
M92D*("`@("`@("`@("`@("`@("`@("!["B`@("`@("`@("`@("`@("`@("`@
M("`@=FEE=V5R+3YC=7)R96YT5&]P"3T@=FEE=V5R+3YC=7)R96YT5&]P("L@
M*'9I97=E<BT^=FEE=U-I>F4@+2`Q*3L*("`@("`@("`@("`@("`@("`@("!]
M"B`@("`@("`@("`@("`@("`@("`@96QS90H@("`@("`@("`@("`@("`@("`@
M('L*("`@("`@("`@("`@("`@("`@("`@("!V:65W97(M/F-U<G)E;G14;W`)
M/2!V:65W97(M/FUA>%1O<$QI;F4["B`@("`@("`@("`@("`@("`@("`@?0H@
M("`@("`@("`@("`@("`@("`@(%)%1E)%4T@)/2!44E5%.PH@("`@("`@("`@
M("`@("`@('T*("`@("`@("`@("`@("`@("!E;'-E"B`@("`@("`@("`@("`@
M("`@>PH@("`@("`@("`@("`@("`@("`@($)E97`H*3L*("`@("`@("`@("`@
M("`@("!]"B`@("`@("`@("`@("`@("`@8G)E86L["B`@(`H@("`@("`@("`@
M("!C87-E($M%65](3TU%(#H@8V%S92`G?"<@.@H@("`@("`@("`@("`@("`@
M('9I97=E<BT^;&5F=$-H87(@/2`P.PH@("`@("`@("`@("`@("`@(%)%1E)%
M4T@)/2!44E5%.PH@("`@("`@("`@("`@("`@(&)R96%K.PH@("`*("`@("`@
M("`@("`@8V%S92!+15E?14Y$(#H@8V%S92`G)"<@.@H@("`@("`@("`@("`@
M("`@('9I97=E<BT^;&5F=$-H87(@/2!V:65W97(M/FUA>$QE9G1#:&%R.PH@
M("`@("`@("`@("`@("`@(%)%1E)%4T@)/2!44E5%.PH@("`@("`@("`@("`@
M("`@(&)R96%K.PH@("`*("`@("`@("`@("`@8V%S92`G9R<@.B!C87-E("<Q
M)R`Z"B`@("`@("`@("`@("`@("`@=FEE=V5R+3YC=7)R96YT5&]P(#T@,#L*
M("`@("`@("`@("`@("`@("!2149215-("3T@5%)513L*("`@("`@("`@("`@
M("`@("!B<F5A:SL*("`@"B`@("`@("`@("`@(&-A<V4@)T<G(#H@"B`@("`@
M("`@("`@("`@("`@=FEE=V5R+3YC=7)R96YT5&]P(#T@=FEE=V5R+3YM87A4
M;W!,:6YE.PH@("`@("`@("`@("`@("`@(%)%1E)%4T@)/2!44E5%.PH@("`@
M("`@("`@("`@("`@(&)R96%K.PH@("`*("`@("`@("`@("`@8V%S92`G3"<@
M.@H@("`@("`@("`@("`@("`@('@@/2`H:6YT*2`H*'9I97=E<BT^:6YF;U-I
M>F4@*R!V:65W97(M/F-U<G)E;G14;W`I("\@,BD["B`@("`@("`@("`@("`@
M("`@:68@*'@@/"!V:65W97(M/FUA>%1O<$QI;F4I"B`@("`@("`@("`@("`@
M("`@>PH@("`@("`@("`@("`@("`@("`@('9I97=E<BT^8W5R<F5N=%1O<"`]
M('@["B`@("`@("`@("`@("`@("`@("`@4D5&4D532`D](%12544["B`@("`@
M("`@("`@("`@("`@?0H@("`@("`@("`@("`@("`@(&5L<V4*("`@("`@("`@
M("`@("`@("!["B`@("`@("`@("`@("`@("`@("`@0F5E<"@I.PH@("`@("`@
M("`@("`@("`@('T*("`@("`@("`@("`@("`@("!B<F5A:SL*("`@"B`@("`@
M("`@("`@(&-A<V4@)VPG(#H*("`@("`@("`@("`@("`@("!X(#T@*&EN="D@
M*'9I97=E<BT^8W5R<F5N=%1O<"`O(#(I.PH@("`@("`@("`@("`@("`@(&EF
M("AX(#X](#`I"B`@("`@("`@("`@("`@("`@>PH@("`@("`@("`@("`@("`@
M("`@('9I97=E<BT^8W5R<F5N=%1O<"`]('@["B`@("`@("`@("`@("`@("`@
M("`@4D5&4D532`D](%12544["B`@("`@("`@("`@("`@("`@?0H@("`@("`@
M("`@("`@("`@(&5L<V4*("`@("`@("`@("`@("`@("!["B`@("`@("`@("`@
M("`@("`@("`@0F5E<"@I.PH@("`@("`@("`@("`@("`@('T*("`@("`@("`@
M("`@("`@("!B<F5A:SL*("`@"B`@("`@("`@("`@(&-A<V4@)S\G(#H*("`@
M("`@("`@("`@("`@("!396%R8VA$:7)E8W1I;VX)/2!54#L*("`@("`@("`@
M("`@("`@("!G971!;F13=&]R95!A='1E<FX@*'9I97=E<BT^<V-R965N+"!V
M:65W97(M/F)O>%=I9'1H+3(I.PH@("`@("`@("`@("`@("`@(&EF("@A('-E
M87)C:$9O<E=O<F0H=FEE=V5R+"!396%R8VA0871T97)N+"!396%R8VA$:7)E
M8W1I;VXI*0H@("`@("`@("`@("`@("`@('L*("`@("`@("`@("`@("`@("`@
M("!S<')I;G1F("AT96UP+"`B/"]5+S4^4&%T=&5R;B`G)7,G(&YO="!F;W5N
M9"X\(54A-3XB+"!396%R8VA0871T97)N*3L*("`@("`@("`@("`@("`@("`@
M("!P;W!5<$QA8F5L("AV:65W97(L('1E;7`I.PH@("`@("`@("`@("`@("`@
M('T*("`@("`@("`@("`@("`@("!2149215-("3T@5%)513L*("`@("`@("`@
M("`@("`@("!B<F5A:SL*("`@"B`@("`@("`@("`@(&-A<V4@)R\G(#H*("`@
M("`@("`@("`@("`@("!396%R8VA$:7)E8W1I;VX)/2!$3U=..PH@("`@("`@
M("`@("`@("`@(&=E=$%N9%-T;W)E4&%T=&5R;B`H=FEE=V5R+3YS8W)E96XL
M('9I97=E<BT^8F]X5VED=&@M,BD["B`@("`@("`@("`@("`@("`@:68@*"$@
M<V5A<F-H1F]R5V]R9"AV:65W97(L(%-E87)C:%!A='1E<FXL(%-E87)C:$1I
M<F5C=&EO;BDI"B`@("`@("`@("`@("`@("`@>PH@("`@("`@("`@("`@("`@
M("`@('-P<FEN=&8@*'1E;7`L("(\+U4O-3Y0871T97)N("<E<R<@;F]T(&9O
M=6YD+CPA52$U/B(L(%-E87)C:%!A='1E<FXI.PH@("`@("`@("`@("`@("`@
M("`@('!O<%5P3&%B96P@*'9I97=E<BP@=&5M<"D["B`@("`@("`@("`@("`@
M("`@?0H@("`@("`@("`@("`@("`@(%)%1E)%4T@)/2!44E5%.PH@("`@("`@
M("`@("`@("`@(&)R96%K.PH@("`*("`@("`@("`@("`@8V%S92`G;B<@.@H@
M("`@("`@("`@("`@("`@(&EF("A396%R8VA0871T97)N(#T]("AC:&%R("HI
M3E5,3"D*("`@("`@("`@("`@("`@("!["B`@("`@("`@("`@("`@("`@("`@
M<&]P57!,86)E;"`H=FEE=V5R+"`B/"\U/E1H97)E(&ES(&YO('!A='1E<FX@
M:6X@=&AE(&)U9F9E<BX\(34^(BD["B`@("`@("`@("`@("`@("`@?0H@("`@
M("`@("`@("`@("`@(&5L<V4*("`@("`@("`@("`@("`@("!["B`@("`@("`@
M("`@("`@("`@("`@:68@*"$@<V5A<F-H1F]R5V]R9"AV:65W97(L(%-E87)C
M:%!A='1E<FXL(%-E87)C:$1I<F5C=&EO;BDI"B`@("`@("`@("`@("`@("`@
M("`@>PH@("`@("`@("`@("`@("`@("`@("`@('-P<FEN=&8@*'1E;7`L("(\
M+S4^4&%T=&5R;B`G)7,G(&YO="!F;W5N9"X\(34^(BP@4V5A<F-H4&%T=&5R
M;BD["B`@("`@("`@("`@("`@("`@("`@("`@<&]P57!,86)E;"`H=FEE=V5R
M+"!T96UP*3L*("`@("`@("`@("`@("`@("`@("!]"B`@("`@("`@("`@("`@
M("`@?0H@("`@("`@("`@("`@("`@(%)%1E)%4T@@/2!44E5%.PH@("`@("`@
M("`@("`@("`@(&)R96%K.PH@("`*("`@("`@("`@("`@8V%S92`G.B<@.@H@
M("`@("`@("`@("`@("`@('9I97=E<BT^8W5R<F5N=%1O<`D](&IU;7!4;TQI
M;F4@*'9I97=E<BD["B`@("`@("`@("`@("`@("`@4D5&4D532`D)/2!44E5%
M.PH@("`@("`@("`@("`@("`@(&)R96%K.PH@("`*("`@("`@("`@("`@8V%S
M92`G:2<@.B!C87-E("=S)R`Z(&-A<V4@)U,G(#H*("`@("`@("`@("`@("`@
M("!F:6QE26YF;TQA8F5L"3T@;F5W0T1+3&%B96P@*'9I97=E<BT^<V-R965N
M+"!#14Y415(L($-%3E1%4BP@9FEL94EN9F\L(#8L(%12544L($9!3%-%*3L*
M("`@("`@("`@("`@("`@("!D<F%W0T1+3&%B96P@*&9I;&5);F9O3&%B96PL
M($)/6"D["B`@("`@("`@("`@("`@("`@=V=E=&-H("AF:6QE26YF;TQA8F5L
M+3YW:6XI.PH@("`@("`@("`@("`@("`@(&1E<W1R;WE#1$M,86)E;"`H9FEL
M94EN9F],86)E;"D["B`@("`@("`@("`@("`@("`@4D5&4D532"`](%12544[
M"B`@("`@("`@("`@("`@("`@8G)E86L["B`@(`H@("`@("`@("`@("!C87-E
M($M%65]%4T,@.@H@("`@("`@("`@("`@("`@(&9R965#:&%R("AF:6QE26YF
M;ULP72D["B`@("`@("`@("`@("`@("`@9G)E94-H87(@*&9I;&5);F9O6S%=
M*3L*("`@("`@("`@("`@("`@("!F<F5E0VAA<B`H9FEL94EN9F];,ETI.PH@
M("`@("`@("`@("`@("`@(&9R965#:&%R("AF:6QE26YF;ULS72D["B`@("`@
M("`@("`@("`@("`@9G)E94-H87(@*&9I;&5);F9O6S1=*3L*("`@("`@("`@
M("`@("`@("!F<F5E0VAA<B`H9FEL94EN9F];-5TI.PH@("`@("`@("`@("`@
M("`@('9I97=E<BT^97AI=%1Y<&4@/2!V15-#05!%7TA)5#L*("`@("`@("`@
M("`@("`@("!R971U<FX@+3$["B`@("`@("`@("`@("`@("`@8G)E86L["B`@
M(`H@("`@("`@("`@("!C87-E($M%65]215154DX@.@H@("`@("`@("`@("`@
M("`@(&9R965#:&%R("AF:6QE26YF;ULP72D["B`@("`@("`@("`@("`@("`@
M9G)E94-H87(@*&9I;&5);F9O6S%=*3L*("`@("`@("`@("`@("`@("!F<F5E
M0VAA<B`H9FEL94EN9F];,ETI.PH@("`@("`@("`@("`@("`@(&9R965#:&%R
M("AF:6QE26YF;ULS72D["B`@("`@("`@("`@("`@("`@9G)E94-H87(@*&9I
M;&5);F9O6S1=*3L*("`@("`@("`@("`@("`@("!F<F5E0VAA<B`H9FEL94EN
M9F];-5TI.PH@("`@("`@("`@("`@("`@('9I97=E<BT^97AI=%1Y<&4@/2!V
M3D]234%,.PH@("`@("`@("`@("`@("`@(')E='5R;B!V:65W97(M/F-U<G)E
M;G1"=71T;VX["B`@("`@("`@("`@("`@("`@8G)E86L["B`@(`H@("`@("`@
M("`@("!C87-E($-$2U]2149215-((#H*("`@("`@("`@("`@("`@("!R969R
M97-H0T1+4V-R965N("AV:65W97(M/G-C<F5E;BD["B`@("`@("`@("`@("`@
M("`@8G)E86L["B`@(`H@("`@("`@("`@("!D969A=6QT(#H*("`@("`@("`@
M("`@("`@("!B<F5A:SL*("`@("`@("`@?0H@("`@("!]"B`@("`@(`H@("`@
M("`O*B!$;R!W92!N965D('1O(')E9')A=R!T:&4@<V-R965N/S\_"0D)"2HO
M"B`@("`@(&EF("A2149215-(*0H@("`@("!["B`@("`@("`@("\J($-L96%R
M('1H92!W:6YD;W<N"0D)"0D)*B\*("`@("`@("`@=V5R87-E("AV:65W97(M
M/G=I;BD["@H@("`@("`@("`O*B!2961R87<@=&AE('1I=&QE+@D)"0D)"2HO
M"B`@("`@("`@('=R:71E0VAT>7!E("AV:65W97(M/G=I;BP@=FEE=V5R+3YT
M:71L95!O<RP@,2P@"@D)"79I97=E<BT^=&ET;&4L($A/4DE:3TY404PL(#`L
M('9I97=E<BT^=&ET;&5,96XI.PH*("`@("`@("`@+RH@4F5D<F%W('1H92!L
M:7-T"0D)"0D)*B\*("`@("`@("`@9F]R("AX/3`[('@@/"!V:65W97(M/G9I
M97=3:7IE.R!X*RLI"B`@("`@("`@('L*("`@("`@("`@("`@:68@*'9I97=E
M<BT^8W5R<F5N=%1O<"`K('@@/#T@=FEE=V5R+3YI;F9O4VEZ92D*("`@("`@
M("`@("`@>PH@("`@("`@("`@("`@("!I;G0@<V-R965N4&]S(#T@=FEE=V5R
M+3YI;F9O4&]S6W9I97=E<BT^8W5R<F5N=%1O<"MX72LQ("T@=FEE=V5R+3YL
M969T0VAA<CL*("`@("`@("`@("`@("`@:68@*'-C<F5E;E!O<R`^/2`P*0H@
M("`@("`@("`@("`@("!["B`@("`@("`@("`@("`@("`@('=R:71E0VAT>7!E
M("AV:65W97(M/G=I;BP*"0D)"7-C<F5E;E!O<RP@>"LR+`H)"0D)=FEE=V5R
M+3YI;F9O6W@K=FEE=V5R+3YC=7)R96YT5&]P72P*"0D)"4A/4DE:3TY404PL
M(#`L"@D)"0EV:65W97(M/FEN9F],96Y;>"MV:65W97(M/F-U<G)E;G14;W!=
M*3L*("`@("`@("`@("`@("`@?0H@("`@("`@("`@("`@("!E;'-E"B`@("`@
M("`@("`@("`@('L*("`@("`@("`@("`@("`@("`@=W)I=&5#:'1Y<&4@*'9I
M97=E<BT^=VEN+`H)"0D),2P@>"LR+`H)"0D)=FEE=V5R+3YI;F9O6W@K=FEE
M=V5R+3YC=7)R96YT5&]P72P*"0D)"4A/4DE:3TY404PL"@D)"0EV:65W97(M
M/FQE9G1#:&%R("T@=FEE=V5R+3YI;F9O4&]S6W9I97=E<BT^8W5R<F5N=%1O
M<"MX72P*"0D)"79I97=E<BT^:6YF;TQE;EMX*W9I97=E<BT^8W5R<F5N=%1O
M<%TI.PH@("`@("`@("`@("`@("!]"B`@("`@("`@("`@('T*("`@("`@("`@
M?0H@("`@(`H@("`@("`@("`O*B!2961R87<@=&AE(&)U='1O;G,N"0D)"0D)
M*B\*("`@("`@("`@9F]R("AX/3`[('@@/"!V:65W97(M/F)U='1O;D-O=6YT
M.R!X*RLI"B`@("`@("`@('L*("`@("`@("`@("`@=W)I=&5#:'1Y<&4@*'9I
M97=E<BT^=VEN+"!V:65W97(M/F)U='1O;E!O<UMX72P@"@D)"0EV:65W97(M
M/F)O>$AE:6=H="TR+"!V:65W97(M/F)U='1O;EMX72P*"0D)"4A/4DE:3TY4
M04PL(#`L('9I97=E<BT^8G5T=&]N3&5N6WA=*3L*("`@("`@("`@?0H*("`@
M("`@("`@+RH@1')A=R!I;B!T:&4@8W5R<F5N="!L:6YE(&%T('1H92!T;W`N
M(`D)"2HO"B`@("`@("`@('-P<FEN=&8@*'1E;7`L("(E9"\E9"`E,BXP9B4E
M(BP@*'9I97=E<BT^8W5R<F5N=%1O<"LQ*2P@=FEE=V5R+3YI;F9O4VEZ92P@
M*"AF;&]A="DH=FEE=V5R+3YC=7)R96YT5&]P*S$I+RAF;&]A="EV:65W97(M
M/FEN9F]3:7IE*2`J(#$P,"D["B`@("`@("`@('=R:71E0VAA<B`H=FEE=V5R
M+3YW:6XL(#$L(#$L('1E;7`L($A/4DE:3TY404PL(#`L("AI;G0I<W1R;&5N
M*'1E;7`I*3L*("`@("`*("`@("`@("`@+RH@0F]X(&ET(&EF('=E(&AA=F4@
M=&\N"0D)"0DJ+PH@("`@("`@("!I9B`H=FEE=V5R+3YB;W@I"B`@("`@("`@
M('L*("`@("`@("`@("`@8F]X("AV:65W97(M/G=I;BP@04-37U9,24Y%+"!!
M0U-?2$Q)3D4I.PH@("`@("`@("!]"@H@("`@("`@("`O*B!$<F%W('1H92!S
M97!E<F%T:6]N(&QI;F4N"0D)"0DJ+PH@("`@("`@("!F;W(@*'@],3L@>"`\
M/2!V:65W97(M/F)O>%=I9'1H*S$[('@K*RD*("`@("`@("`@>PH@("`@("`@
M("`@("!M=G=A9&1C:"`H=FEE=V5R+3YW:6XL('9I97=E<BT^8F]X2&5I9VAT
M+3,L('@L($%#4U](3$E.12D["B`@("`@("`@('T*("`@("`@("`@;79W861D
M8V@@*'9I97=E<BT^=VEN+"!V:65W97(M/F)O>$AE:6=H="TS+"`P+"!!0U-?
M3%1%12D["B`@("`@("`@(&UV=V%D9&-H("AV:65W97(M/G=I;BP@=FEE=V5R
M+3YB;WA(96EG:'0M,RP@=FEE=V5R+3YW:6XM/E]M87AX+"!!0U-?4E1%12D[
M"@H@("`@("`@("`O*B!2969R97-H('1H92!S8W)E96XN"0D)"0D)*B\*("`@
M("`@("`@=W)E9G)E<V@@*'9I97=E<BT^=VEN*3L*("`@("`@?0H@("!]"GT*
M"B\J"B`J(%1H:7,@<V5A<F-H97,@=&AE(&1O8W5M96YT(&QO;VMI;F<@9F]R
M('1H92!G:79E;B!W;W)D+@H@*B\*=F]I9"!G971!;F13=&]R95!A='1E<FX@
M*$-$2U-#4D5%3B`J<V-R965N+"!I;G0@=VED=&@I"GL*("`@+RH@1&5C;&%R
M92!L;V-A;"!V87)I86)L97,N"0D)"0D)*B\*("`@0T1+14Y44ED)*F=E=%!A
M='1E<FX["B`@(&-H87()"2IT96UP.PH*("`@+RH@0VAE8VL@=&AE(&1I<F5C
M=&EO;BX)"0D)"0DJ+PH@("!I9B`H4V5A<F-H1&ER96-T:6]N(#T](%50*0H@
M("!["B`@("`@('1E;7`)/2`B/"\U/E-E87)C:"!5<"`@.B`\(34^(CL*("`@
M?0H@("!E;'-E"B`@('L*("`@("`@=&5M<`D]("(\+S4^4V5A<F-H($1O=VXZ
M(#PA-3XB.PH@("!]"@H@("`O*B!0;W`@=7`@=&AE(&5N=')Y(&9I96QD+@D)
M"0D)"2HO"B-I9F1E9B!#3TQ/4@H@("!G9710871T97)N"3T@;F5W0T1+16YT
M<GD@*'-C<F5E;BP@0T5.5$52+"!#14Y415(L($Q%1E0L('1E;7`L($-/3$]2
M7U!!25(H-2E\05]"3TQ$+"`G+B=\0T],3U)?4$%)4B@U*7Q!7T)/3$0L('9-
M25A%1"P@,3`L(#`L(#(U-BP@5%)512P@1D%,4T4I.PHC96QS90H@("!G9710
M871T97)N"3T@;F5W0T1+16YT<GD@*'-C<F5E;BP@0T5.5$52+"!#14Y415(L
M($Q%1E0L('1E;7`L($%?0D],1"P@)RXG?$%?0D],1"P@=DU)6$5$+"`Q,"P@
M,"P@,C4V+"!44E5%+"!&04Q312D["B-E;F1I9@H*("`@+RH@27,@=&AE<F4@
M86X@;VQD('-E<F%C:"!P871T97)N/PD)"0D)*B\*("`@:68@*%-E87)C:%!A
M='1E<FX@(3T@*&-H87(@*BE.54Q,*2`*("`@>PH@("`@("!S971#1$M%;G1R
M>2`H9V5T4&%T=&5R;BP@4V5A<F-H4&%T=&5R;BP@9V5T4&%T=&5R;BT^;6EN
M+"!G9710871T97)N+3YM87@L(&=E=%!A='1E<FXM/F)O>"D["B`@('T*("`@
M9G)E94-H87(@*%-E87)C:%!A='1E<FXI.PH*("`@+RH@06-T:79A=&4@=&AI
M<R!B86)Y+@D)"0D)"2HO"B`@(&%C=&EV871E0T1+16YT<GD@*&=E=%!A='1E
M<FXL("AC:'1Y<&4@*BE.54Q,*3L*"B`@("\J(%-A=F4@=&AE(&EN9F\N"0D)
M"0D)"2HO"B`@(&EF("AG9710871T97)N+3YI;F9O6S!=("$]("=<,"<I"B`@
M('L*("`@("`@4V5A<F-H4&%T=&5R;B`](&-O<'E#:&%R("AG9710871T97)N
M+3YI;F9O*3L*("`@?0H*("`@+RH@0VQE86X@=7`N"0D)"0D)"0DJ+PH@("!D
M97-T<F]Y0T1+16YT<GD@*&=E=%!A='1E<FXI.PI]"@HO*@H@*B!4:&ES('-E
M87)C:&5S(&9O<B!T:&4@=V]R9"!A;F0@<F5A;&EG;G,@=&AE('9A;'5E(&]N
M('1H92!S8W)E96XN"B`J+PII;G0@<V5A<F-H1F]R5V]R9"`H0T1+5DE%5T52
M("IV:65W97(L(&-H87(@*G!A='1E<FXL(&EN="!D:7)E8W1I;VXI"GL*("`@
M+RH@1&5C;&%R92!L;V-A;"!V87)I86)L97,N"0D)"0D)*B\*("`@:6YT('@L
M('DL('!O<RP@;&5N+"!P;&5N.PH*("`@+RH@268@=&AE('!A='1E<FX@:7,@
M3E5,3"!T:&5N(')E='5R;BX)"0D)*B\*("`@:68@*'!A='1E<FX@/3T@*&-H
M87(@*BE.54Q,*0H@("!["B`@("`@(')E='5R;B@P*3L*("`@?0H@("!P;&5N
M"3T@*&EN="ES=')L96XH<&%T=&5R;BD["@H@("`O*B!':79E;B!T:&4@9&ER
M96-T:6]N+"!S=&%R="!L;V]K:6YG+BXN+@D)"0DJ+PH@("!I9B`H9&ER96-T
M:6]N(#T]($1/5TXI"B`@('L*("`@("`@+RH@4W1A<G0@;&]O:VEN9R!F<F]M
M("=H97)E)R!D;W=N+@D)"0DJ+PH@("`@("!F;W(@*'@@/2!V:65W97(M/F-U
M<G)E;G14;W`@*R`Q.R!X(#P@=FEE=V5R+3YI;F9O4VEZ93L@>"LK*0H@("`@
M("!["B`@("`@("`@("\J(%-T87)T(&QO;VMI;F<N($EF('=E(&9I;F0@:70L
M('1H96X@<V5T('1H92!V86QU92!O9@D)*B\*("`@("`@("`@+RH@=FEE=V5R
M+3YC=7)R96YT5&]P(&%N9"!P;W-S:6)L>2!E=F5N(&QE9G1#:&%R+BXN"0DJ
M+PH@("`@("`@("!L96X)/2!C:&QE;B`H=FEE=V5R+3YI;F9O6WA=*3L*("`@
M("`@("`@<&]S"3T@,#L*("`@("`@("`@9F]R("AY/3`[('D@/"!L96X[('DK
M*RD*("`@("`@("`@>PH@("`@("`@("`@("`O*B!792!H879E('1O('1E87(@
M=&AE(&%T=')I8G5T97,@9G)O;2!T:&4@8VAT>7!E+@D)*B\*("`@("`@("`@
M("`@8VAA<B!P;&%I;D-H87()/2!V:65W97(M/FEN9F];>%U;>5T@)B!!7T-(
M05)415A4.PH*("`@("`@("`@("`@+RH@5V4@:&%V92!F;W5N9"!T:&4@=V]R
M9"!A="!T:&ES('!O:6YT+@D)"2HO"B`@("`@("`@("`@(&EF("AP;W,@/3T@
M<&QE;BD*("`@("`@("`@("`@>PH@("`@("`@("`@("`@("!V:65W97(M/F-U
M<G)E;G14;W`)/2`H>"`\('9I97=E<BT^;6%X5&]P3&EN92`@/R!X(#H@=FEE
M=V5R+3YM87A4;W!,:6YE*3L*("`@("`@("`@("`@("`@=FEE=V5R+3YL969T
M0VAA<@D]("AY(#P@=FEE=V5R+3YB;WA7:61T:"`_(#`@.B!V:65W97(M/FUA
M>$QE9G1#:&%R*3L*("`@("`@("`@("`@("`@<F5T=7)N("@Q*3L*("`@("`@
M("`@("`@?0H*("`@("`@("`@("`@+RH@2V5E<"!T<G5D9VEN9R!A;&]N9RX)
M"0D)"2HO"B`@("`@("`@("`@(&EF("AP871T97)N6W!O<RLK72`A/2!P;&%I
M;D-H87(I"B`@("`@("`@("`@('L*("`@("`@("`@("`@("`@<&]S"3T@,#L*
M("`@("`@("`@("`@?0H@("`@("`@("!]"B`@("`@('T*("`@?0H@("!E;'-E
M"B`@('L*("`@("`@+RH@4W1A<G0@;&]O:VEN9R!F<F]M("=H97)E)R!U<"X)
M"0D)"2HO"B`@("`@(&9O<B`H>"`]('9I97=E<BT^8W5R<F5N=%1O<"`M(#$[
M('@@/CT@,#L@>"TM*0H@("`@("!["B`@("`@("`@("\J(%-T87)T(&QO;VMI
M;F<N($EF('=E(&9I;F0@:70L('1H96X@<V5T('1H92!V86QU92!O9@D)*B\*
M("`@("`@("`@+RH@=FEE=V5R+3YC=7)R96YT5&]P(&%N9"!P;W-S:6)L>2!E
M=F5N(&QE9G1#:&%R+BXN"0DJ+PH@("`@("`@("!L96X)/2!C:&QE;B`H=FEE
M=V5R+3YI;F9O6WA=*3L*("`@("`@("`@<&]S"3T@,#L*("`@("`@("`@9F]R
M("AY/3`[('D@/"!L96X[('DK*RD*("`@("`@("`@>PH@("`@("`@("`@("`O
M*B!792!H879E('1O('1E87(@=&AE(&%T=')I8G5T97,@9G)O;2!T:&4@8VAT
M>7!E+@D)*B\*("`@("`@("`@("`@8VAA<B!P;&%I;D-H87()/2!V:65W97(M
M/FEN9F];>%U;>5T@)B!!7T-(05)415A4.PH*("`@("`@("`@("`@+RH@5V4@
M:&%V92!F;W5N9"!T:&4@=V]R9"!A="!T:&ES('!O:6YT+@D)"2HO"B`@("`@
M("`@("`@(&EF("AP;W,@/3T@<&QE;BD*("`@("`@("`@("`@>PH@("`@("`@
M("`@("`@("!V:65W97(M/F-U<G)E;G14;W`)/2!X.PH@("`@("`@("`@("`@
M("!V:65W97(M/FQE9G1#:&%R"3T@*'D@/"!V:65W97(M/F)O>%=I9'1H(#\@
M,"`Z('9I97=E<BT^;6%X3&5F=$-H87(I.PH@("`@("`@("`@("`@("!R971U
M<FX@*#$I.PH@("`@("`@("`@("!]"@H@("`@("`@("`@("`O*B!+965P('1R
M=61G:6YG(&%L;VYG+@D)"0D)*B\*("`@("`@("`@("`@:68@*'!A='1E<FY;
M<&]S*RM=("$]('!L86EN0VAA<BD*("`@("`@("`@("`@>PH@("`@("`@("`@
M("`@("!P;W,)/2`P.PH@("`@("`@("`@("!]"B`@("`@("`@('T*("`@("`@
M?0H@("!]"B`@(')E='5R;B@P*3L*?0H*+RH*("H@5&AI<R!A;&QO=W,@=7,@
M=&\@)VIU;7`G('1O(&$@9VEV96X@;&EN92!I;B!T:&4@9FEL92X*("HO"FEN
M="!J=6UP5&],:6YE("A#1$M6245715(@*G9I97=E<BD*>PH@("`O*B!$96-L
M87)E(&QO8V%L('9A<FEA8FQE<RX)"0D)"0DJ+PH@("!I;G0@;&EN90D)/2`P
M.PH@("!#1$M30T%,12`J(&YE=VQI;F4)/2!N97=#1$M38V%L92`H=FEE=V5R
M+3YS8W)E96XL($-%3E1%4BP@0T5.5$52+"!,1494+`H)"0D)(CPO-3Y';R!4
M;R!,:6YE(#HB+"!!7T)/3$0L(#4L"@D)"0DP+"`P+"!V:65W97(M/FUA>%1O
M<$QI;F4K,2P@,2P@,3`L(%12544L(%12544I.PH@("!L:6YE(#T@86-T:79A
M=&5#1$M38V%L92`H;F5W;&EN92P@*&-H='EP92`J*4Y53$PI.PH@("!D97-T
M<F]Y0T1+4V-A;&4@*&YE=VQI;F4I.PH@("!R971U<FX@*"AL:6YE+3$I*3L*
M?0H*+RH*("H@5&AI<R!P;W!S(&$@;&ET=&QE(&UE<W-A9V4@=7`@;VX@=&AE
M('-C<F5E;BX*("HO"G9O:60@<&]P57!,86)E;"`H0T1+5DE%5T52("IV:65W
M97(L(&-H87(@*FUE<V<I"GL*("`@+RH@1&5C;&%R92!L;V-A;"!V87)I86)L
M97,N"0D)"0D)*B\*("`@8VAA<B`J:6YF;ULS73L*("`@0T1+3$%"14P@*FQA
M8F5L.PH*("`@+RH@4V5T('5P('9A<FEA8FQE<RX)"0D)"0D)*B\*("`@:6YF
M;ULP70D](&UE<V<["B`@(&QA8F5L"3T@;F5W0T1+3&%B96P@*'9I97=E<BT^
M<V-R965N+"!#14Y415(L($-%3E1%4BP@:6YF;RP@,2P@5%)512P@1D%,4T4I
M.PH*("`@+RH@1')A=R!T:&4@;&%B96P@86YD('=A:70N"0D)"0D)*B\*("`@
M9')A=T-$2TQA8F5L("AL86)E;"P@0D]8*3L*("`@=V=E=&-H("AL86)E;"T^
M=VEN*3L*"B`@("\J($-L96%N('5P+@D)"0D)"0D)*B\*("`@9&5S=')O>4-$
M2TQA8F5L("AL86)E;"D["GT*"B\J"B`J(%1H:7,@9G5N8W1I;VX@9')A=W,@
M=&AE('9I97=E<B!W:61G970N"B`J+PIV;VED(&1R87=#1$M6:65W97(@*$-$
M2U9)15=%4B`J=FEE=V5R+"!B;V]L96%N($)O>"D*>PH@("`O*B!$96-L87)E
M(&QO8V%L('9A<FEA8FQE<RX)"0D)"0DJ+PH@("!I;G0@>`D](#`["B`@(&EN
M="!L87-T3&EN90D](#`["B`@(&-H87(@=&5M<%LQ,#!=.PH*("`@+RH@17)A
M<V4@=&AE(&]L9"!O8FIE8W0N+BX)"0D)"0DJ+PH@("!E<F%S94-$2U9I97=E
M<B`H=FEE=V5R*3L*"B`@("\J($1O('=E(&YE960@=&\@9')A=R!I;B!T:&4@
M<VAA9&]W/S\_"0D)"2HO"B`@(&EF("AV:65W97(M/G-H861O=RD*("`@>PH@
M("`@("!D<F%W4VAA9&]W("AV:65W97(M/G-H861O=U=I;BD["B`@('T*("`@
M"B`@("\J($1R87<@:6X@=&AE('1I=&QE"0D)"0D)"2HO"B`@('=R:71E0VAT
M>7!E("AV:65W97(M/G=I;BP@=FEE=V5R+3YT:71L95!O<RP@,2P@=FEE=V5R
M+3YT:71L92P@"@D)2$]225I/3E1!3"P@,"P@=FEE=V5R+3YT:71L94QE;BD[
M"@H@("`O*B!$<F%W(&EN('1H92!M97-S86=E(&-O;G1E;G1S+@D)"0D)*B\*
M("`@;&%S=$QI;F4@/2`H=FEE=V5R+3YI;F9O4VEZ92`\('9I97=E<BT^=FEE
M=U-I>F4@/R!V:65W97(M/FEN9F]3:7IE(#H@=FEE=V5R+3YV:65W4VEZ92D[
M"B`@(&9O<B`H>#TP.R!X(#P@;&%S=$QI;F4[('@K*RD*("`@>PH@("`@("!I
M9B`H=FEE=V5R+3YI;F9O6W9I97=E<BT^8W5R<F5N=%1O<"MX72`A/2`H8VAT
M>7!E("HI3E5,3"D*("`@("`@>PH@("`@("`@("!W<FET94-H='EP92`H=FEE
M=V5R+3YW:6XL('9I97=E<BT^:6YF;U!O<UMV:65W97(M/F-U<G)E;G14;W`K
M>%TK,2P*"0D)>"LR+"!V:65W97(M/FEN9F];>"MV:65W97(M/F-U<G)E;G14
M;W!=+"!(3U))6D].5$%,+`H)"0EV:65W97(M/FQE9G1#:&%R+`H)"0EV:65W
M97(M/FEN9F],96Y;>"MV:65W97(M/F-U<G)E;G14;W!=*3L*("`@("`@?0H@
M("!]"@H@("`O*B!";W@@:70@:68@:70@=V%S(&%S:V5D(&9O<BX)"0D)"2HO
M"B`@(&EF("AV:65W97(M/F)O>"D*("`@>PH@("`@("!B;W@@*'9I97=E<BT^
M=VEN+"!!0U-?5DQ)3D4L($%#4U](3$E.12D["B`@('T*"B`@("\J($1R87<@
M=&AE('-E<&5R871I;VX@;&EN92X)"0D)"0DJ+PH@("!F;W(@*'@],3L@>"`\
M/2!V:65W97(M/F)O>%=I9'1H*S$[('@K*RD*("`@>PH@("`@("!M=G=A9&1C
M:"`H=FEE=V5R+3YW:6XL('9I97=E<BT^8F]X2&5I9VAT+3,L('@L($%#4U](
M3$E.12D["B`@('T*("`@;79W861D8V@@*'9I97=E<BT^=VEN+"!V:65W97(M
M/F)O>$AE:6=H="TS+"`P+"!!0U-?3%1%12D["B`@(&UV=V%D9&-H("AV:65W
M97(M/G=I;BP@=FEE=V5R+3YB;WA(96EG:'0M,RP@=FEE=V5R+3YW:6XM/E]M
M87AX+"!!0U-?4E1%12D["@H@("`O*B!$<F%W(&EN('1H92!C=7)R96YT(&QI
M;F4@870@=&AE('1O<"X@"0D)"2HO"B`@('-P<FEN=&8@*'1E;7`L("(E9"\E
M9"`E,BXP9B4E(BP@*'9I97=E<BT^8W5R<F5N=%1O<"LQ*2P@=FEE=V5R+3YI
M;F9O4VEZ92P@*"AF;&]A="DH=FEE=V5R+3YC=7)R96YT5&]P*S$I+RAF;&]A
M="EV:65W97(M/FEN9F]3:7IE*2`J(#$P,"D["B`@('=R:71E0VAA<B`H=FEE
M=V5R+3YW:6XL(#$L(#$L('1E;7`L($A/4DE:3TY404PL(#`L("AI;G0I<W1R
M;&5N*'1E;7`I*3L*"B`@("\J($1R87<@=&AE(&)U='1O;G,N"0D)"0D)"2HO
M"B`@(&1R87=#1$M6:65W97)"=71T;VYS("AV:65W97(I.PI]"@HO*@H@*B!4
M:&ES(')E9')A=W,@=&AE('9I97=E<B!B=71T;VYS+@H@*B\*=F]I9"!D<F%W
M0T1+5FEE=V5R0G5T=&]N<R`H0T1+5DE%5T52("IV:65W97(I"GL*("`@+RH@
M1&5C;&%R92!L;V-A;"!V87)I86)L97,N"0D)"0D)*B\*("`@8VAA<B!C:&%R
M86-T97(["B`@(&EN="!X.PH*("`@+RH@4F5D<F%W('1H92!B=71T;VYS+@D)
M"0D)"2HO"B`@(&9O<B`H>#TP.R!X(#P@=FEE=V5R+3YB=71T;VY#;W5N=#L@
M>"LK*0H@("!["B`@("`@('=R:71E0VAT>7!E("AV:65W97(M/G=I;BP@=FEE
M=V5R+3YB=71T;VY0;W-;>%TL"@D)"79I97=E<BT^8F]X2&5I9VAT+3(L('9I
M97=E<BT^8G5T=&]N6WA=+"!(3U))6D].5$%,+`H)"0DP+"!V:65W97(M/F)U
M='1O;DQE;EMX72D["B`@('T*"B`@("\J($AI9VAL:6=H="!T:&4@8W5R<F5N
M="!B=71T;VXN"0D)"0DJ+PH@("!F;W(@*'@],#L@>"`\('9I97=E<BT^8G5T
M=&]N3&5N6W9I97=E<BT^8W5R<F5N=$)U='1O;ET[('@K*RD*("`@>PH@("`@
M("`O*B!3=')I<"!T:&4@8VAA<F%C=&5R(&]F(&%N>2!E>'1R82!A='1R:6)U
M=&5S+@D)"2HO"B`@("`@(&-H87)A8W1E<@D]('9I97=E<BT^8G5T=&]N6W9I
M97=E<BT^8W5R<F5N=$)U='1O;EU;>%T@)B!!7T-(05)415A4.PH*("`@("`@
M+RH@061D('1H92!C:&%R86-T97(@:6YT;R!T:&4@=VEN9&]W+@D)"0DJ+PH@
M("`@("!M=G=A9&1C:"`H=FEE=V5R+3YW:6XL('9I97=E<BT^8F]X2&5I9VAT
M+3(L"@D)=FEE=V5R+3YB=71T;VY0;W-;=FEE=V5R+3YC=7)R96YT0G5T=&]N
M72MX+`H)"6-H87)A8W1E<GQV:65W97(M/F)U='1O;DAI9VAL:6=H="D["B`@
M('T*"B`@("\J(%)E9G)E<V@@=&AE('=I;F1O=RX)"0D)"0DJ+PH@("!W<F5F
M<F5S:"`H=FEE=V5R+3YW:6XI.PI]"@HO*@H@*B!4:&ES(&9U;F-T:6]N(&1E
M<W1R;WES('1H92!V:65W97(@=VED9V5T+@H@*B\*=F]I9"!D97-T<F]Y0T1+
M5FEE=V5R("A#1$M6245715(@*G9I97=E<BD*>PH@("`O*B!$96-L87)E(&QO
M8V%L('9A<FEA8FQE<RX)"0D)"0DJ+PH@("!I;G0@>`D](#`["@H@("`O*B!%
M<F%S92!T:&4@;V)J96-T+@D)"0D)"0DJ+PH@("!E<F%S94-$2U9I97=E<B`H
M=FEE=V5R*3L*"B`@("\J($-L96%R('5P('1H92!C:&%R('!O:6YT97)S+@D)
M"0D)*B\*("`@9G)E94-H='EP92`H=FEE=V5R+3YT:71L92D["B`@(&9O<B`H
M>#TP.R!X(#P]('9I97=E<BT^:6YF;U-I>F4[('@K*RD*("`@>PH@("`@("!F
M<F5E0VAT>7!E("AV:65W97(M/FEN9F];>%TI.PH@("!]"B`@(&9O<B`H>#TP
M.R!X(#P@=FEE=V5R+3YB=71T;VY#;W5N=#L@>"LK*0H@("!["B`@("`@(&9R
M965#:'1Y<&4@*'9I97=E<BT^8G5T=&]N6WA=*3L*("`@?0H*("`@+RH@0VQE
M86X@=7`@=&AE('=I;F1O=W,N"0D)"0D)*B\*("`@9&5L=VEN("AV:65W97(M
M/G=I;BD["B`@(&EF("AV:65W97(M/G-H861O=RD*("`@>PH@("`@("!D96QW
M:6X@*'9I97=E<BT^<VAA9&]W5VEN*3L*("`@?0H*("`@+RH@56YR96=I<W1E
M<B!T:&ES(&]B:F5C="X)"0D)"0DJ+PH@("!U;G)E9VES=&5R0T1+3V)J96-T
M("AV5DE%5T52+"!V:65W97(I.PH*("`@+RH@1FEN:7-H(&-L96%N:6YG('5P
M+@D)"0D)"2HO"B`@(&9R964@*'9I97=E<BD["GT*"B\J"B`J(%1H:7,@9G5N
M8W1I;VX@97)A<V5S('1H92!V:65W97(@=VED9V5T(&9R;VT@=&AE('-C<F5E
M;BX*("HO"G9O:60@97)A<V5#1$M6:65W97(@*$-$2U9)15=%4B`J=FEE=V5R
M*0I["B`@('=E<F%S92`H=FEE=V5R+3YW:6XI.PH@("!W<F5F<F5S:"`H=FEE
M=V5R+3YW:6XI.PH@("!I9B`H=FEE=V5R+3YS:&%D;W<I"B`@('L*("`@("`@
M=V5R87-E("AV:65W97(M/G-H861O=U=I;BD["B`@("`@('=R969R97-H("AV
::65W97(M/G-H861O=U=I;BD["B`@('T*?0H[
`
end
SHAR_EOF
  echo 'uudecoding file cdk4.8.0/viewer.c' &&
  uudecode _sharuue.tmp < _sharuue.tmp && rm -f _sharuue.tmp &&
  $shar_touch -am 0709111596 'cdk4.8.0/viewer.c' &&
  chmod 0444 'cdk4.8.0/viewer.c' ||
  echo 'restore of cdk4.8.0/viewer.c failed'
  shar_count="`wc -c < 'cdk4.8.0/viewer.c'`"
  test 27746 -eq "$shar_count" ||
    echo "cdk4.8.0/viewer.c: original size 27746, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk4.8.0/BUGS ==============
if test -f 'cdk4.8.0/BUGS' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk4.8.0/BUGS (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk4.8.0/BUGS (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk4.8.0/BUGS' &&
Cdk Bugs Guide
Copyright Mike Glover, 1995, 1996
-------------------------------------------------------------------------------
If you find a bug, and want me to fix it, you will need to do a few things for 
me.
X	* Give me a copy or part of the code which demonstrates this bug. If
X	you can't do this, then replicate the bug in a piece of test code
X	and send me that.
X	* Make sure you can replicate the bug. Then send me the of instructions
X	on how to replicate the noted bug.
X
If you do this, I will mail you back telling you if the information was
sufficient or not. If it is, I will tell you when I hope to have this bug
licked by. If you need an urgent update (ie: your boss is crawling down your
throat for your program to work) tell me, I'll get to it ASAP. BTW, thanks for
trusting my code enough to use in the 'real world' :).
X
If you find a bug and fixed it yourself, I will need the same as above with a
few extras.
X	* I will need a patch of any piece of code you made so I can apply it
X	to what I have.
X	* Tar this up and send it to me.
X
If you have found and fixed a valid bug, you will be noted in the next
distribution of this bugs file, and my warmest thanks for reducing my ever
growing workload. :)
X
Here is the noted list of outstanding bugs and bugs of the past...
------------------------------------------------------------------------------
X
Release	Widget		Problem						Fixed
-------	------		-------						-----
4.6.0	Label		Label widget would not map itself to the screen	Jan/96
X			via refreshCDKScreen.
4.6.0	Mentry		When inserting into the middle of a string, the	Jan/96
X			cursor would not move to the right.
4.6.0	Scroll		When scrolling the list to the right, the 	Jan/96
X			window border would not get refreshed.
4.6.0	Scale		The scale window was always too large.		Jan/96
4.6.0	Matrix		Fixed cleanCDKMatrix function. (FATAL)		Jan/96
4.6.0	Viewer		Changed activate->set, manage->activate, and	Jan/96
X			removed set. Cleaned the function setCDKViewer.
4.6.0	Viewer		When loading up a small file, garbage would	Jan/96
X			appear under the last line to the bottom of
X			the viewer.
4.6.0	Graph		When drawing the graph in line mode, the lines	Jan/96
X			would be too far off the x axis.
4.6.0	Template	When calling mixCDKTemplate, the widget would	Jan/96
X			core out.
4.6.0	Swindow		Fixed leak in trimCDKSwindow, cleanCDKSwindow.	Jan/96
4.6.0	Selection	Fixed scrolling bug.				Jan/96
------------------------------------------------------------------------------
4.6.1	Fselect		The entry field would never get mapped on	Mar/96
X			the first instantiation.
4.6.1	Viewer		Centered text did not scroll correctly.		Mar/96
4.6.1	Radio		Centered text did not scroll correctly.		Mar/96
4.6.1	Scroll		Centered text did not scroll correctly.		Mar/96
4.6.1	Selection	Centered text did not scroll correctly.		Mar/96
4.6.1	All		Fixed the function char2Chtype to expand	Mar/96
X			tab characters.	
4.6.1	Template	Fixed problem with cursor not being adjusted	Mar/96
X			correctly if the plate started with a 
X			'drawing' character.
------------------------------------------------------------------------------
4.7.0	Fselect		Fixed the function mode2Char. Used in the 	Jun/96
X			File Selector widget for providing file
X			permissions.
4.7.o	Entry		The display attribute vHINT displayed the	Jun/96
X			characters when they were typed in.
4.7.0	Mentry		The display attribute vHINT displayed the	Jun/96
X			characters when they were typed in.
4.7.0	Scroll		The function addCDKScrollItem got very confused	Jun/96
X			when called and the highlight bar was not at 
X			the top of the list.
4.7.0	Scale		The widget does not map correctly when the	Jun/96
X			function refreshCDKScreen is called.
4.7.0	Scale		The widget did not completely erase itself	Jun/96
X			when it was destroyed.
4.7.0	Slider		The widget does not map correctly when the	Jun/96
X			function refreshCDKScreen is called.
4.7.0	Template	The widget didn't draw the complete field.	Jun/96
4.7.0	Histogram	The label in the widget seemed to extend into	Jun/96
X			the drawing field.
4.7.0	Matrix		Cleaned up some minor display bugs.		Jun/96
4.7.0	Fselect		When the destroyCDKFselect function is called	Jul/96
X			the windows were destroyed in the wrong order
X			sometimes causing a seg-fault.
4.7.0	Entry  		When the destroyCDKEntry function is called	Jul/96
X			the windows were destroyed in the wrong order
X			sometimes causing a seg-fault.
4.7.0	Swindow		When calling the setCDKSwindow function, some	Jul/96
X			of the members of the strcuture did not get set
X			correctly.
SHAR_EOF
  $shar_touch -am 0709111596 'cdk4.8.0/BUGS' &&
  chmod 0444 'cdk4.8.0/BUGS' ||
  echo 'restore of cdk4.8.0/BUGS failed'
  shar_count="`wc -c < 'cdk4.8.0/BUGS'`"
  test 4530 -eq "$shar_count" ||
    echo "cdk4.8.0/BUGS: original size 4530, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk4.8.0/EXPANDING ==============
if test -f 'cdk4.8.0/EXPANDING' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk4.8.0/EXPANDING (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk4.8.0/EXPANDING (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk4.8.0/EXPANDING' &&
Cdk New Widget Guide
Copyright Mike Glover, 1995, 1996
-------------------------------------------------------------------------------
X
If you want to create a new widget for Cdk, and want it in the standard
dist of Cdk, you will have to follow some requisites that I have. I state
these because Cdk has been worked on for quite some time and I finally
got it to a state where the functions calls are somewhat consistent. Any new
widgets should adhere to this. The requirements are as follows:
X
X	* The function names should be like:
X	newCDKXXX, destroyCDKXXX, setCDKXXX, drawCDKXX,...
X	Any widgets with functions not in this format should be 'private'.
X	If this is not the case one of three things will happen:
X		1) The widget will not get accepted
X		2) I will mail you back asking you to follow the standards.
X		3) I will do it myself. (HIGHLY unlikely)
X
X	* The first parameter of the newCDKXXX function should be of type
X	CDKSCREEN.
X	* If applicable, the next two parameters should be xpos and ypos in
X	that order.
X	* If the widget has a label, the next parameter should be lpos followed
X	by char *label.
X	* The last two parameters of the newCDKXXX function should be:
X	Boolean box, Boolean shadow if the parameters apply.
X	* The drawCDKXXX function should only have the pointer to the object and
X	a Boolean box as it's parameters. (in that order)
X	* The first parameters of any other function relating to the widget
X	should be a pointer to the widget type. ie: CDKRADIO *, CDKFSELECT *...
X	* A destroyCDKXXX function has to be provided as well as a drawCDKXXX
X	function.
X	* Try to contain anything specific to the widget in a single file. This
X	keeps the overhead of misc. files from floating around.
X
If you follow the guidelines, then the files you need to change to sew the new
widget into Cdk, are:
X
X	cdkscreen.c	So this widget will get refreshed on a refreshCDKScreen
X			function call.
X	binding.c	To allow key bindings for the widget. If it is possible
X			to have key bindings I stress that this be incorporated.
X	cdk.h		To add in the function def's to the header file.
X	Makefile	Add in the new widget files.
X
If you have done all of this then what I need from you is the following:
X
X	* A diff of all the files from the dist. that you modified. Use
X	patch, I prefer it. If you haven't got it, get it and use it. It makes
X	life easy.
X	* A copy of the new widget file.
X	* tar this up and send it to me at
X	glover@tuzo.erin.utoronto.ca
X	I will mail you back when I get it and I will tell you if everything is
X	OK or not.
X
I hate to be such a nit pick, but if we follow the above standards, Cdk will
evolve into a very nice library, with a lot of really nice widgets.
X
ttfn,
X	Mike
X
SHAR_EOF
  $shar_touch -am 0709111596 'cdk4.8.0/EXPANDING' &&
  chmod 0444 'cdk4.8.0/EXPANDING' ||
  echo 'restore of cdk4.8.0/EXPANDING failed'
  shar_count="`wc -c < 'cdk4.8.0/EXPANDING'`"
  test 2686 -eq "$shar_count" ||
    echo "cdk4.8.0/EXPANDING: original size 2686, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk4.8.0/INSTALL ==============
if test -f 'cdk4.8.0/INSTALL' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk4.8.0/INSTALL (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk4.8.0/INSTALL (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk4.8.0/INSTALL' &&
Cdk Installation Guide
Copyright Mike Glover, 1995, 1996
-------------------------------------------------------------------------------
X
General
-------
This document details how to build and install the Cdk library. The first thing
you should know is what compile options you may require. I have had the 
fortunate luck of being able to compile this library on the following
platforms:
X	* Sun/OS 4.1.*
X	* Solaris 2.3/2.4
X	* AIX 3.2.* (and even AIX 4.1 but there is no mention of this in the
X                    makefile. Sorry.)
X	* HPUX 9.* (and even HPUX 10.* but there is no mention of this in the
X                    makefile. Sorry.)
X	* Linux, in both a.out and Elf.
X
If you have a machine that is not mentioned here and you would like to see it
in the makefile, mail me the additions for the makefile and I will add them in.
X
CFLAGS
------
You may need to change a few things in the makefile as far as compile options
are concerned, but also the C flags. There are a number of defined CFLAGS 
that should be explained. They are as follows:
X
X	-DCOLOR		Add in if your curses header file supports color. 
X			Ncurses does.
X	-DWINCHBUG	If your copy of curses has a bug in the routine winch.
X	-DNOUSLEEP	If you haven't got the usleep library function.
X	-DNODYNALLOC	If your compiler does not support the use of non
X			constants in variable definitions. Set -DDNODYNALLOC
X			can't support a definition like the following:
X			char *array[variableName];
X			where variableName is a variable that was set to
X			dictate the size of the array.
X	-DAIX		As always, AIX is the exception to the rule....
X	-DOLDCURSES	Use this flag if you suspect your version of curses
X			is very closely related to the older versions of BSD
X			curses.
X
Building
--------
To build the library cd into the Cdk distribution directory and type in
make cdklib
This builds the file libcdk.a
That's all there is to it.
X
Building the example programs
-----------------------------
To build the programs in the exam directory type in make examples in the
source root directory. This will build all the files under the directory
exam.
X
Building the demonstration programs
-----------------------------------
To build the programs in the demo directory type in make demos in the
source root directory. This will build all the files under the directory
demo.
X
Installing
----------
Modify the makefile to set the values of INST_ROOTDIR, INST_LIBDIR,
INST_INCDIR, and INST_MANDIR. These variables set the location of the root
install directory, the library directory, the include directory, and the 
man directory respectively. Once these have been set correctly, su to root
and type 
make install
This will install the files:
cdk.h, curdefs.h, libcdk.a , the example files, the misc documents which
come with Cdk, and all of the manual pages.
SHAR_EOF
  $shar_touch -am 0709111596 'cdk4.8.0/INSTALL' &&
  chmod 0444 'cdk4.8.0/INSTALL' ||
  echo 'restore of cdk4.8.0/INSTALL failed'
  shar_count="`wc -c < 'cdk4.8.0/INSTALL'`"
  test 2805 -eq "$shar_count" ||
    echo "cdk4.8.0/INSTALL: original size 2805, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk4.8.0/NOTES ==============
if test -f 'cdk4.8.0/NOTES' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk4.8.0/NOTES (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk4.8.0/NOTES (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk4.8.0/NOTES' &&
Cdk Notes
Copyright Mike Glover, 1995, 1996
-------------------------------------------------------------------------------
X
This document states some of the testing and history of the Cdk widget set.
X
Cdk has gone through a major facelift since I first created it, and it's
current look I like enough to release and attach my name to. :) I have made sure
to remain as consistent as possible with function parameter positions, names,
purposes, and what-not. I hope I have been, if not mail me tell me what you
find inconsistent and I may change it. I say may because I don't want to kill
anyone's code if I can help it. That is why I waited so long before releasing
Cdk. I wanted it to be as stable as possible before sending it out into the
world. I think it's stable, and hopefully so will you. There are a few things
worth noting before continuing.
X
Cdk has gone through some fairly rigorous testing, but since I did the testing
it may not be complete. I have complied the code with Purify (TM) and 
Centerline's Testcenter (TM) and both say my code is clean. There are no
memory leaks, and the only problems exist in the curses library. If you use the
Ncurses library, it has been cleaned. Of course I am not the best to ask. The
only reason why I can say this is because I asked the Ncurses author. I don't
know how clean it is. I will assume very clean.
X
But since I may not be able to see the forest for the trees, I'm willing to 
bet that bugs still do exist, and you folks will find them. If you do find bugs
read the BUGS document supplied with this release to find out what to do.
X
I do not plan on changing the interface to Cdk, so any code developed in it now
should pass the test of time. The only changes I can see are bug fixes and new
widgets. Lets hope this wish of mine remains true...
X
There is an examples directory available which demonstrates all of the widgets
and some extra concepts, it's a great place to tool around in before banging
away at your own code.
X
Have fun. :)
X
ttfn,
X	Mike
X
PS: If you want to get a hold of me mail me at
glover@tuzo.erin.utoronto.ca
I would like to know your opinions of this library and how I could make it 
better.
SHAR_EOF
  $shar_touch -am 0709111596 'cdk4.8.0/NOTES' &&
  chmod 0444 'cdk4.8.0/NOTES' ||
  echo 'restore of cdk4.8.0/NOTES failed'
  shar_count="`wc -c < 'cdk4.8.0/NOTES'`"
  test 2173 -eq "$shar_count" ||
    echo "cdk4.8.0/NOTES: original size 2173, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk4.8.0/README ==============
if test -f 'cdk4.8.0/README' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk4.8.0/README (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk4.8.0/README (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk4.8.0/README' &&
Cdk Readme Guide
Copyright Mike Glover, 1995, 1996
-------------------------------------------------------------------------------
X
Overview:
---------
Cdk stands for 'Curses Development Kit' and it currently contains 17 ready
to use widgets which facilitate the speedy development of full screen
curses programs. This little project of mine started as a test to see how
compatible my Linux machine was to other UNIX breeds. While doing this I 
discovered Ncurses, and played with it. These widgets are the result of a
years worth of playing. The current complement of widgets are:
X
Widget Type           Quick Description
===========================================================================
Alphalist             Allows a user to select from a list of words, with
X                      the ability to narrow the search list by typing in a
X                      few characters of the desired word.
Calendar              Creates a little simple calendar widget.
Dialog                Prompts the user with a message, and the user
X                      can pick an answer from the buttons provided.
Entry                 Allows the user to enter information.
File Selector         A file selector built from Cdk base widgets. This
X                      example shows how to create more complicated widgets
X                      using the Cdk widget library.
Graph                 Draws a graph.
Histogram             Draws a histogram.
Item List             Creates a pop up field which allows the user to select
X                      one of several choices in a small field. Very useful
X                      for things like days of the week or month names.
Label                 Displays messages in a pop up box, or the label can be
X                      considered part of the screen.
Marquee               Displays a message in a scrolling marquee.
Matrix                Creates a complex matrix with lots of options.
Menu                  Creates a pull-down menu interface.
Multiple Line Entry   A multiple line entry field. Very useful
X                      for long fields. (like a description
X                      field)
Radio List            Creates a radio button list.
Scale                 Creates a numeric scale. Used for allowing a user to
X                      pick a numeric value and restrict them to a range of 
X                      values.
Scrolling List        Creates a scrolling list/menu list.
Scrolling Window      Creates a scrolling log file viewer. Can add 
X                      information into the window while its running. 
X                      A good widget for displaying the progress of
X                      something. (akin to a console window)
Selection List        Creates a multiple option selection list.
Slider                Akin to the scale widget, this widget provides a
X                      visual slide bar to represent the numeric value.
Template              Creates a entry field with character sensitive 
X                      positions. Used for pre-formatted fields like
X                      dates and phone numbers.
Viewer                This is a file/information viewer. Very useful
X                      when you need to display loads of information.
===========================================================================
X
Each widget has the ability to display color, or other character attributes.
Cdk comes with a attribute/color format command set which allows a programmer
to add colors and characters attributes simply.
X
The code has been cleaned using both Purify(TM) and Sun's Testcenter(TM),
so it is as clean as a babies butt. :) Any leaks I have seen are in the curses
libraries; there is nothing I can do about that, sorry. There should be no
memory leaks within the code, it shouldn't core dump, and it shouldn't do 
anything unexpected. Unfortunatly this probably is not the case. If you do 
see something like this tell me after you read the BUGS file.
X
Distribution:
-------------
This distribution has a full complement of manual pages, so any specifics to
the widgets will not be addressed in this read me. If you want to get right in
there, nroff the cdk.3x file in the man directory. It is the starting point
for all the manual pages.
X
There are some other files to look at if you want to get anywhere. They are:
X
INSTALL - This will show you how to build Cdk and install it on your system.
X          If there are any personal modifications that you think may be
X          needed, read this file. In fact read it regardless. :)
X
COPYING - The legal stuff to protect my butt and all of the hard work that I
X          have put into this library.
X
EXPANDING - You feel creative enough to add a widget, here are my requirements
X            that you have to follow to make the integration of a new widget
X            seamless.
X
BUGS - What to do when you find a bug. It also lists all of the bugs found,
X       who found then, who fixed them, and when they were fixed. If you think
X       you have found a bug look at this file. If you do not think you have
X       the most up to date version of Cdk, go get it and try to replicate the
X       problem. Then look at the BUGS file again. If it is NOT there, then you
X       can mail me notifying me of a possible bug. I will try my hardest to get
X       back to you, but I have a pretty busy schedule so don't expect an instant
X       reply. This file will also explain how I would like any bug fixes sent to
X       me.
X
NOTES - Misc babblings of myself somewhat related to this distribution.
X
VERSION - Contains the current rev level, when it was released, and
X          what is different from the previous release. (I promise
X          to make sure I keep this up to date. :) )
X
TODO - A list of things I plan to do in the future. (sleep)
X
CHANGES - A list of changes from one release to another.
X
If you have any comments, questions, or complaints mail me at
glover@tuzo.erin.utoronto.ca
X
ttfn,
X	Mike
X
PS: There is also a Perl5 extension of this library for you Perl5 fans.
X    Look under any CPAN site under the directory CPAN/authors/id/GLOVER.
SHAR_EOF
  $shar_touch -am 0709111596 'cdk4.8.0/README' &&
  chmod 0444 'cdk4.8.0/README' ||
  echo 'restore of cdk4.8.0/README failed'
  shar_count="`wc -c < 'cdk4.8.0/README'`"
  test 6088 -eq "$shar_count" ||
    echo "cdk4.8.0/README: original size 6088, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk4.8.0/TODO ==============
if test -f 'cdk4.8.0/TODO' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk4.8.0/TODO (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk4.8.0/TODO (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk4.8.0/TODO' &&
Cdk To-Do List
Copyright Mike Glover, 1995, 1996
------------------------------------------------------------------------------
X
There are a few things that I am either currently working on, or going to 
work on in the near future. They are:
X
X	* Add more functions to the drawing routines.
X	* Working on a tree widget...
X	* I would like to be able to have a captive shell widget. This
X	would allow you to start a subshell and have the user interact 
X	with a spawned command via the captive shell. This would allow
X	you to spawn an interactive command through the widget. If any
X	one knows how to do this, please mail me. Maybe we'll work this
X	through.
X	* I am thinking about adding an X windows element to Cdk using 
X	the Xforms library, because it seems to have roughly the same
X	widgets as I do. The plan is to have a simple environment variable
X	which tells the program what you want curses/X windows. We'll
X	see how this goes.
X
ttfn,
X	Mike
SHAR_EOF
  $shar_touch -am 0709111596 'cdk4.8.0/TODO' &&
  chmod 0444 'cdk4.8.0/TODO' ||
  echo 'restore of cdk4.8.0/TODO failed'
  shar_count="`wc -c < 'cdk4.8.0/TODO'`"
  test 945 -eq "$shar_count" ||
    echo "cdk4.8.0/TODO: original size 945, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk4.8.0/VERSION ==============
if test -f 'cdk4.8.0/VERSION' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk4.8.0/VERSION (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk4.8.0/VERSION (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk4.8.0/VERSION' &&
Cdk Version Guide
Copyright Mike Glover, 1995, 1996
-------------------------------------------------------------------------------
X
Current Version: 4.8.0
X
Version #       Release Date
=========       ============
4.6.0           December, 1995
4.6.1           January, 1996. (Sent to comp.unix.sources moderator,
X                but never seemed to get posted.) :(
4.7.0           May, 1996. (lets hope this one gets posted.)
4.8.0		July, 1996
SHAR_EOF
  $shar_touch -am 0709111596 'cdk4.8.0/VERSION' &&
  chmod 0444 'cdk4.8.0/VERSION' ||
  echo 'restore of cdk4.8.0/VERSION failed'
  shar_count="`wc -c < 'cdk4.8.0/VERSION'`"
  test 446 -eq "$shar_count" ||
    echo "cdk4.8.0/VERSION: original size 446, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk4.8.0/COPYING ==============
if test -f 'cdk4.8.0/COPYING' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk4.8.0/COPYING (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk4.8.0/COPYING (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk4.8.0/COPYING' &&
Cdk Copying Guide
Copyright Mike Glover, 1995, 1996
-------------------------------------------------------------------------------
In order to copy Cdk around I have some requirements that will protect me,
and possibly even you. First thing, I feel I should say that this little project
of mine has taken about a year of my 'free' time and I have put a lot of work 
into it. I do ask that if anyone asks you about Cdk, tell them where you got it
and who wrote it. If you see Cdk installed without this file on the system
somewhere, then assume the copy the person has is a 'corrupt' version. I will
not be responsible for any unfortunate results if someone else makes a personal
modification to the Cdk library. I will also not be responsible if for some
reason the installation of Cdk creates a negative effect on your machine. You
do have my word that there are no "Trojan horses", worms, or other security 
worries lurking in this code. If there are I did not put them there and you
should remove the version of Cdk you have and go get a proper copy. I hate 
virus writers as much as anyone else!
X
Instead of writing my own license (I'm a programmer, not a lawyer!) I'm going
to borrow the GNU public license on public software. If you do not agree to
this license then remove the Cdk distribution and we all will be happier in
the end. Here is the complete GNU public license in it's true form. I have not
made any modifications to it.
X
I will say one thing, Cdk is my copyright. I will continue to support any released
versions out there as long as they are in their released form. I am releasing
this into the "public" because I feel I have benefited from other people's
hard work, I'd like to chip into the pot as well. This does NOT make Cdk
public domain though. Cdk is still my copyright, and owned by me, I am merely
stating this so I don't see 40 different versions of my code floating around
with other people's names attached.
X
With that ugly stuff said, I will happily take any comments or questions about
Cdk. Input is more than welcomed. In fact I encourage it. Feel free to mail
me and ask questions you thin the supplied documents don't cover. If I get enough
I may build a FAQ to help newcomers. (we'll see how Cdk is accepted though)
X
For you Perl programmers, there is a Perl5 extension to Cdk being released at
the same time. If you see this message, pop over to the Perl newsgroups and look
for the Cdk Perl5 extension.
X
ttfn,
X	Mike
-------------------------------------------------------------------------------
X		    GNU GENERAL PUBLIC LICENSE
X		       Version 2, June 1991
X
X Copyright (C) 1989, 1991 Free Software Foundation, Inc.
X                          675 Mass Ave, Cambridge, MA 02139, USA
X Everyone is permitted to copy and distribute verbatim copies
X of this license document, but changing it is not allowed.
X
X			    Preamble
X
X  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.
X
X  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things.
X
X  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.
X
X  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.
X
X  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.
X
X  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.
X
X  Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.
X
X  The precise terms and conditions for copying, distribution and
modification follow.
X
X
X		    GNU GENERAL PUBLIC LICENSE
X   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
X
X  0. This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License.  The "Program", below,
refers to any such program or work, and a "work based on the Program"
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language.  (Hereinafter, translation is included without limitation in
the term "modification".)  Each licensee is addressed as "you".
X
Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program).
Whether that is true depends on what the Program does.
X
X  1. You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program.
X
You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.
X
X  2. You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:
X
X    a) You must cause the modified files to carry prominent notices
X    stating that you changed the files and the date of any change.
X
X    b) You must cause any work that you distribute or publish, that in
X    whole or in part contains or is derived from the Program or any
X    part thereof, to be licensed as a whole at no charge to all third
X    parties under the terms of this License.
X
X    c) If the modified program normally reads commands interactively
X    when run, you must cause it, when started running for such
X    interactive use in the most ordinary way, to print or display an
X    announcement including an appropriate copyright notice and a
X    notice that there is no warranty (or else, saying that you provide
X    a warranty) and that users may redistribute the program under
X    these conditions, and telling the user how to view a copy of this
X    License.  (Exception: if the Program itself is interactive but
X    does not normally print such an announcement, your work based on
X    the Program is not required to print an announcement.)
X
X
These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Program, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote it.
X
Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program.
X
In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.
X
X  3. You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms of
Sections 1 and 2 above provided that you also do one of the following:
X
X    a) Accompany it with the complete corresponding machine-readable
X    source code, which must be distributed under the terms of Sections
X    1 and 2 above on a medium customarily used for software interchange; or,
X
X    b) Accompany it with a written offer, valid for at least three
X    years, to give any third party, for a charge no more than your
X    cost of physically performing source distribution, a complete
X    machine-readable copy of the corresponding source code, to be
X    distributed under the terms of Sections 1 and 2 above on a medium
X    customarily used for software interchange; or,
X
X    c) Accompany it with the information you received as to the offer
X    to distribute corresponding source code.  (This alternative is
X    allowed only for noncommercial distribution and only if you
X    received the program in object code or executable form with such
X    an offer, in accord with Subsection b above.)
X
The source code for a work means the preferred form of the work for
making modifications to it.  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable.  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable.
X
If distribution of executable or object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place counts as
distribution of the source code, even though third parties are not
compelled to copy the source along with the object code.
X
X
X  4. You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License.
However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance.
X
X  5. You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Program or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Program or works based on it.
X
X  6. Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties to
this License.
X
X  7. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.
X
If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances.
X
It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.
X
This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.
X
X
X  8. If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded.  In such case, this License incorporates
the limitation as if written in the body of this License.
X
X  9. The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.
X
Each version is given a distinguishing version number.  If the Program
specifies a version number of this License which applies to it and "any
later version", you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
this License, you may choose any version ever published by the Free Software
Foundation.
X
X  10. If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.
X
X			    NO WARRANTY
X
X  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.
X
X  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.
X
X		     END OF TERMS AND CONDITIONS
X
X
X	Appendix: How to Apply These Terms to Your New Programs
X
X  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.
X
X  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.
X
X    <one line to give the program's name and a brief idea of what it does.>
X    Copyright (C) 19yy  <name of author>
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
Also add information on how to contact you by electronic and paper mail.
X
If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:
X
X    Gnomovision version 69, Copyright (C) 19yy name of author
X    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
X    This is free software, and you are welcome to redistribute it
X    under certain conditions; type `show c' for details.
X
The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, the commands you use may
be called something other than `show w' and `show c'; they could even be
mouse-clicks or menu items--whatever suits your program.
X
You should also get your employer (if you work as a programmer) or your
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  Here is a sample; alter the names:
X
X  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
X  `Gnomovision' (which makes passes at compilers) written by James Hacker.
X
X  <signature of Ty Coon>, 1 April 1989
X  Ty Coon, President of Vice
X
This General Public License does not permit incorporating your program into
proprietary programs.  If your program is a subroutine library, you may
consider it more useful to permit linking proprietary applications with the
library.  If this is what you want to do, use the GNU Library General
Public License instead of this License.
SHAR_EOF
  $shar_touch -am 0709111596 'cdk4.8.0/COPYING' &&
  chmod 0444 'cdk4.8.0/COPYING' ||
  echo 'restore of cdk4.8.0/COPYING failed'
  shar_count="`wc -c < 'cdk4.8.0/COPYING'`"
  test 20520 -eq "$shar_count" ||
    echo "cdk4.8.0/COPYING: original size 20520, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk4.8.0/cdk.h ==============
if test -f 'cdk4.8.0/cdk.h' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk4.8.0/cdk.h (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk4.8.0/cdk.h (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk4.8.0/cdk.h' &&
#ifndef CDK_H
#define CDK_H
X
/*
X * $Author: glover $
X * $Date: 1996/07/09 15:13:30 $
X * $Revision: 1.183 $
X */
X
#ifdef FREE_BSD
#include <ncurses.h>
#else
#ifdef NCURSES
#include <ncurses/curses.h>
#else
#include <curses.h>
#endif
#endif
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <unistd.h>
#include <dirent.h>
#include <time.h>
#include <errno.h>
#include <pwd.h>
#include <grp.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <math.h>
#include "curdefs.h"
X
/*
X * =========================================================
X * 	Delcare Global Generic Defines and Typedefs
X * =========================================================
X */
typedef enum	{vNULL,
X			vENTRY, vMENTRY, vLABEL, vSCROLL,
X			vDIALOG, vSCALE, vMARQUEE, vMENU,
X			vMATRIX, vHISTOGRAM, vSELECTION, vVIEWER,
X			vGRAPH, vRADIO, vTEMPLATE, vSWINDOW,
X			vITEMLIST, vFSELECT, vSLIDER, vALPHALIST,
X			vCALENDAR
X		} EObjectType;
typedef enum	{vCHAR,
X			vHCHAR, vINT, vHINT, vMIXED, vHMIXED,
X			vUCHAR, vLCHAR, vUHCHAR, vLHCHAR, vUMIXED,
X			vLMIXED, vUHMIXED, vLHMIXED, vVIEWONLY
X		} EDisplayType;
typedef enum	{vNONE,
X			vPERCENT,
X			vFRACTION,
X			vREAL
X		} EHistogramDisplayType;
typedef enum	{vPLOT,
X			vLINE
X		} EGraphDisplayType;
typedef enum	{vFRONT,
X			vBACK,
X			vBOTH
X		} EStripType;
typedef enum	{vEARLY_EXIT,
X			vESCAPE_HIT,
X			vNORMAL,
X			vNEVER_ACTIVATED
X		} EExitType;
X
typedef int boolean;
X
#define	LEFT		9000
#define	RIGHT		9001
#define	CENTER		9002
#define	TOP		9003
#define	BOTTOM		9004
#define	HORIZONTAL	9005
#define	VERTICAL	9006
#define	FULL		9007
X
#define NONE		0
#define ROW		1
#define COL		2
X
#define	BOX		1
#define	NOBOX		0
X
#define	DIFFERENCE(a,b)	(abs(a-b))
#define	MAXIMUM(a,b)	(a > b ? a : b)
#define	MINIMUM(a,b)	(a < b ? a : b)
#define	HALF(a)		(a>>1)
X
#ifndef COLOR_PAIR
#define	COLOR_PAIR(a)	A_NORMAL
#endif
X
/* Define the 'GLOBAL DEBUG FILEHANDLE'	*/
FILE	*CDKDEBUG;
X
/*
X * This is for the Cdk Screen object.
X */
#define MAXOBJECTS	1000
struct _screen_st {
X   WINDOW	*window;
X   void		*object[MAXOBJECTS];
X   EObjectType	cdktype[MAXOBJECTS];
X   int		objectCount;
};
typedef struct _screen_st CDKSCREEN;
X
/*
X * This is for the key bindings.
X */
#define MAXBINDINGS	300
#define	MAXARGS		100
typedef void (*BINDFN) (EObjectType cdktype, void *object, void *clientData);
typedef int (*PROCESSFN) (EObjectType cdktype, void *object, void *clientData, chtype input);
X
/*
X * =========================================================
X * 	Delcare Global Generic Prototypes
X * =========================================================
X */
void Beep();
void alignxy   (WINDOW *window,
X		int *xpos, int *ypos,
X		int boxWidth, int boxHeight);
void alignlabel (char *label, int lplace,
X			int fieldWidth, int *boxWidth, int *boxHeight,
X			int *labelxoffset, int *labelyoffset,
X			int *fieldxoffset, int *fieldyoffset);
void drawScrollItem  (WINDOW *win,
X			char *item,
X			int woffset, int voffset, int hoffset,
X			int width, chtype attr);
char *substring (char *string, int start, int width);
int justifyMessage (int fieldWidth, char *mesg, int justify);
int justifyString (int fieldWidth, int mesglen, int justify);
void popupLabel (CDKSCREEN *win, char **mesg, int count);
int popupDialog (CDKSCREEN *screen, char **mesg, int mesgCount,
X			char **buttons, int buttonCount);
void quickSort (char *list[], int left, int right);
void swapIndex (char *list[], int i, int j);
int readFile (char *filename, char **info, int maxlines);
void stripWhiteSpace (EStripType stripType, char *string);
int splitString (char *string, char *items[], char splitChar);
int intlen (int value);
int getDirectoryContents (char *directory, char **list, int maxListSize);
int searchList (char **list, int listSize, char *pattern);
char *baseName (char *filename);
X
/*
X * =========================================================
X * 	Delcare Debugging Routines.
X * =========================================================
X */
FILE *startCDKDebug(char *filename);
void writeCDKDebugMessage (FILE *fd, char *filename, char *function, int line, char *message);
void stopCDKDebug (FILE *fd);
X
/*
X * =========================================================
X * 	Delcare String Handling Routines.
X * =========================================================
X */
void freeChar (char *string);
void freeChtype (chtype *string);
void cleanChar (char *string, int length, char character);
void cleanChtype (chtype *string, int length, chtype character);
char *chtype2Char (chtype *string);
chtype *char2Chtype (char *string, int *length, int *align);
chtype *copyChtype (chtype *string);
char *copyChar (char *string);
int chlen (chtype *string);
int mode2Char (char *string, mode_t fileMode);
int checkForLink (char *line, char *filename);
X
/*
X * =========================================================
X * 	These functions are 'private' functions which
X * 	take care of screen objects and refreshing.
X * =========================================================
X */
CDKSCREEN *initCDKScreen (WINDOW *window);
void initCDKColor();
void registerCDKObject (CDKSCREEN *screen, EObjectType cdktype, void *object);
void unregisterCDKObject (EObjectType cdktype, void *object);
void raiseCDKObject (EObjectType cdktype, void *object);
void lowerCDKObject (EObjectType cdktype, void *object);
void refreshCDKScreen (CDKSCREEN *screen);
void eraseCDKScreen (CDKSCREEN *screen);
void destroyCDKScreen (CDKSCREEN *screen);
void debugCDKScreen (CDKSCREEN *screen, char *mesg);
void endCDK();
X
/*
X * =========================================================
X * 	These functions are 'private' functions which
X * 	take care of object key bindings.
X * =========================================================
X */
void bindCDKObject (EObjectType cdktype,
X			void *object, chtype key, BINDFN function, void *data);
void unbindCDKObject (EObjectType cdktype, void *object, chtype key);
int checkCDKObjectBind (EObjectType cdktype, void *object, chtype key);
void cleanCDKObjectBindings (EObjectType cdktype, void *object);
int mapChtype (chtype key);
X
/*
X * =========================================================
X * 	Declare Drawing routines.
X * =========================================================
X */
void boxWindow (WINDOW *window, chtype attr);
void drawLine (WINDOW *window,
X		int startx, int starty, int endx, int endy, chtype line);
void writeChar (WINDOW *window,
X		int xpos, int ypos, char *string,
X		int align, int start, int len);
void writeCharAttrib (WINDOW *window,
X		int xpos, int ypos, char *string,
X		chtype attr, int align, int start, int len);
void writeChtype (WINDOW *window,
X			int xpos, int ypos, chtype *string,
X			int align, int start, int len);
void writeChtypeAttrib (WINDOW *window,
X			int xpos, int ypos, chtype *string,
X			chtype attr, int align, int start, int len);
void attrbox (WINDOW *window,
X		chtype tlc, chtype trc,
X		chtype blc, chtype brc,
X		chtype hor, chtype vert,
X		chtype type);
void drawShadow (WINDOW *window);
X
/* REMOVE ME LATER	*/
void printattr         (WINDOW *window, int xpos, int ypos, int align, chtype attr, char *mesg);
X
/*
X * =========================================================
X * 	Declare Label Field Prototypes and Defines
X * =========================================================
X */
#define	MAXLABELROWS	300
struct _label_st {
X   WINDOW	*parent;
X   WINDOW	*win;
X   WINDOW	*shadowWin;
X   chtype	*info[MAXLABELROWS];
X   int		infoLen[MAXLABELROWS];
X   int		infoPos[MAXLABELROWS];
X   int		width;
X   int		xpos;
X   int		ypos;
X   int		rows;
X   boolean	box;
X   boolean	shadow;
X   CDKSCREEN	*screen;
X   int		screenIndex;
};
typedef struct _label_st CDKLABEL;
CDKLABEL *newCDKLabel (CDKSCREEN *screen, int xPos, int yPos,
X			char **mesg, int rows,
X			boolean box, boolean shadow);
void setCDKLabel (CDKLABEL *label, char **mesg, int lines, boolean box);
void drawCDKLabel (CDKLABEL *label, boolean box);
void eraseCDKLabel (CDKLABEL *label);
void destroyCDKLabel (CDKLABEL *label);
char waitCDKLabel (CDKLABEL *label, char key);
X
/*
X * ===============================================================
X *	Declare Single-Line Entry Field Prototypes and Defines
X * ===============================================================
X */
struct _entry_st {
X   WINDOW	*parent;
X   WINDOW	*win;
X   WINDOW	*shadowWin;
X   WINDOW	*labelWin;
X   WINDOW	*field;
X   chtype	*label;
X   int		labelPos;
X   int		labelLen;
X   chtype	fieldAttr;
X   int		fieldWidth;
X   char		*info;
X   int		infoWidth;
X   int		screenCol;
X   int		leftChar;
X   int		min;
X   int		max;
X   EExitType	exitType;
X   EDisplayType	dispType;
X   boolean	box;
X   boolean	shadow;
X   chtype	filler;
X   CDKSCREEN	*screen;
X   int		screenIndex;
X   BINDFN	bindFunction[MAXBINDINGS];
X   void *	bindData[MAXBINDINGS];
X   void	*	callbackfn;
X   PROCESSFN	preProcessFunction;
X   void *	preProcessData;
X   PROCESSFN	postProcessFunction;
X   void *	postProcessData;
};
typedef struct _entry_st CDKENTRY;
typedef void (*ENTRYCB) (CDKENTRY *entry, chtype character);
CDKENTRY *newCDKEntry (CDKSCREEN *cdkscreen,
X			int xpos, int ypos, int lpos,
X			char *label, 
X			chtype fieldAttrib, chtype filler,
X			EDisplayType disptype,
X			int fieldWidth, int min, int max,
X			boolean box, boolean shadow);
char *activateCDKEntry (CDKENTRY *entry, chtype *actions);
char *injectCDKEntry (CDKENTRY *entry, chtype input);
void setCDKEntry (CDKENTRY *entry, char *value, int min, int max, boolean box);
void drawCDKEntry (CDKENTRY *entry, boolean box);
void eraseCDKEntry (CDKENTRY *entry);
void cleanCDKEntry (CDKENTRY *entry);
void destroyCDKEntry (CDKENTRY *entry);
void CDKEntryCallBack (CDKENTRY *entry, chtype character);
void drawCDKEntryField (CDKENTRY *entry);
void setCDKEntryCB (CDKENTRY *entry, ENTRYCB callback);
void setCDKEntryPreProcess (CDKENTRY *entry, PROCESSFN callback, void *data);
void setCDKEntryPostProcess (CDKENTRY *entry, PROCESSFN callback, void *data);
X
/*
X * =============================================================
X *	Declare Muli-Line Entry Field Prototypes and Defines
X * =============================================================
X */
struct _mentry_st {
X   WINDOW	*parent;
X   WINDOW	*win;
X   WINDOW	*shadowWin;
X   WINDOW	*labelWin;
X   WINDOW	*field;
X   chtype	*label;
X   int		labelLen;
X   int		labelPos;
X   chtype	fieldAttr;
X   int		fieldWidth;
X   char		*info;
X   int		totalWidth;
X   int		rows;
X   int		currentRow;
X   int		currentCol;
X   int		topRow;
X   EDisplayType	dispType;
X   int 		min;
X   int 		logicalRows;
X   EExitType	exitType;
X   boolean	box;
X   boolean	shadow;
X   chtype	filler;
X   CDKSCREEN	*screen;
X   int		screenIndex;
X   BINDFN	bindFunction[MAXBINDINGS];
X   void *	bindData[MAXBINDINGS];
X   void	*	callbackfn;
X   PROCESSFN	preProcessFunction;
X   void *	preProcessData;
X   PROCESSFN	postProcessFunction;
X   void *	postProcessData;
};
typedef struct _mentry_st CDKMENTRY;
typedef	void (*MENTRYCB) (CDKMENTRY *mentry, chtype character);
CDKMENTRY *newCDKMentry (CDKSCREEN *cdkscreen,
X				int xpos, int ypos, int lpos,
X				char *label,
X				chtype fieldAttr, chtype filler,
X				EDisplayType disptype,
X				int fieldWidth, int fieldrows,
X				int logicalRows, int min,
X				boolean box, boolean shadow);
char *activateCDKMentry (CDKMENTRY *mentry, chtype *input);
char *injectCDKMentry (CDKMENTRY *mentry, chtype input);
void setCDKMentry (CDKMENTRY *mentry, char *value, int min, boolean box);
void drawCDKMentry (CDKMENTRY *mentry, boolean box);
void eraseCDKMentry (CDKMENTRY *mentry);
void cleanCDKMentry (CDKMENTRY *mentry);
void destroyCDKMentry (CDKMENTRY *mentry);
void drawCDKMentryField (CDKMENTRY *mentry);
void CDKMentryCallBack (CDKMENTRY *mentry, chtype character);
void setCDKMentryCB (CDKMENTRY *mentry, MENTRYCB callback);
void setCDKMentryPreProcess (CDKMENTRY *mentry, PROCESSFN callback, void *data);
void setCDKMentryPostProcess (CDKMENTRY *mentry, PROCESSFN callback, void *data);
X
/*
X * =========================================================
X * 	Declare Scrolling List Prototypes and Defines
X * =========================================================
X */
#define MAXITEMS	2000
#define MAXVIEWSIZE	25
struct _scroll_st {
X   WINDOW	*parent;
X   WINDOW	*win;
X   WINDOW	*shadowWin;
X   chtype	*title;
X   int		titlePos;
X   int		titleLen;
X   int		titleAdj;
X   chtype	*item[MAXITEMS];
X   int		itemPos[MAXITEMS];
X   int		itemLen[MAXITEMS];
X   int		maxTopItem;
X   int		maxLeftChar;
X   int		leftChar;
X   int		lastItem;
X   int		currentTop;
X   int		currentItem;
X   int		currentHigh;
X   int		listSize;
X   int		boxWidth;
X   int		boxHeight;
X   int		viewSize;
X   EExitType	exitType;
X   boolean	box;
X   boolean	shadow;
X   boolean	numbers;
X   chtype	titlehighlight;
X   chtype	highlight;
X   CDKSCREEN	*screen;
X   int		screenIndex;
X   BINDFN	bindFunction[MAXBINDINGS];
X   void *	bindData[MAXBINDINGS];
X   PROCESSFN	preProcessFunction;
X   void *	preProcessData;
X   PROCESSFN	postProcessFunction;
X   void *	postProcessData;
};
#define	NUMBERS		TRUE
#define	NONUMBERS	FALSE
typedef struct _scroll_st CDKSCROLL;
CDKSCROLL *newCDKScroll(CDKSCREEN *cdkscreen,
X				int xpos, int ypos, int height, int width,
X				char *title,
X				char **scrollItems, int items, boolean numbers,
X				chtype highlight, boolean box, boolean shadow);
int activateCDKScroll (CDKSCROLL *scroll, chtype *actions);
int injectCDKScroll (CDKSCROLL *scroll, chtype input);
void setCDKScroll (CDKSCROLL *scroll, char **scrollItems, int listSize,
X			boolean numbers, chtype highlight, boolean box);
void addCDKScrollItem (CDKSCROLL *scroll, char *item);
void deleteCDKScrollItem (CDKSCROLL *scroll, int position);
void drawCDKScroll (CDKSCROLL *scroll, boolean box);
void drawCDKScrollList (CDKSCROLL *scroll, boolean box);
void eraseCDKScroll (CDKSCROLL *scroll);
void destroyCDKScroll (CDKSCROLL *scroll);
void createCDKScrollItemList (CDKSCROLL *scroll, boolean numbers,
X				char **list, int listSize);
void setCDKScrollPreProcess (CDKSCROLL *scroll, PROCESSFN callback, void *data);
void setCDKScrollPostProcess (CDKSCROLL *scroll, PROCESSFN callback, void *data);
X
/*
X * =========================================================
X * 	Declare Dialog Box Prototypes and Defines
X * =========================================================
X */
#define	MAXDIALOGROWS		50
#define	MAXDIALOGBUTTONS	25
#define	MINDIALOGWIDTH		10
struct _dialogBox_st {
X   WINDOW	*parent;
X   WINDOW	*win;
X   WINDOW	*shadowWin;
X   chtype	*info[MAXDIALOGROWS];
X   int		infoLen[MAXDIALOGROWS];
X   int		infoPos[MAXDIALOGROWS];
X   chtype	*buttonLabel[MAXDIALOGBUTTONS];
X   int		buttonLen[MAXDIALOGROWS];
X   int		buttonPos[MAXDIALOGROWS];
X   int		messageRows;
X   int		buttonCount;
X   int		currentButton;
X   int		boxWidth;
X   int		boxHeight;
X   EExitType	exitType;
X   boolean	separator;
X   boolean	box;
X   boolean	shadow;
X   chtype	highlight;
X   CDKSCREEN	*screen;
X   int		screenIndex;
X   BINDFN	bindFunction[MAXBINDINGS];
X   void *	bindData[MAXBINDINGS];
X   PROCESSFN	preProcessFunction;
X   void *	preProcessData;
X   PROCESSFN	postProcessFunction;
X   void *	postProcessData;
};
typedef struct _dialogBox_st CDKDIALOG;
CDKDIALOG *newCDKDialog (CDKSCREEN *cdkscreen,
X				int xPos, int yPos,
X				char **message, int Rows,
X				char **buttons, int buttonCount,
X				chtype highlight,
X				boolean separator, boolean box, boolean shadow);
int activateCDKDialog (CDKDIALOG *dialog, chtype *actions);
int injectCDKDialog (CDKDIALOG *dialog, chtype input);
void setCDKDialog (CDKDIALOG *dialog, chtype highlight,
X			boolean separator, boolean box);
void drawCDKDialogButton (CDKDIALOG *dialog, int button,
X				boolean box, chtype active, chtype highlight);
void drawCDKDialog (CDKDIALOG *dialog, boolean box);
void eraseCDKDialog (CDKDIALOG *dialog);
void destroyCDKDialog (CDKDIALOG *dialog);
void redrawCDKDialogButtons (CDKDIALOG *dialog);
void setCDKDialogPreProcess (CDKDIALOG *dialog, PROCESSFN callback, void *data);
void setCDKDialogPostProcess (CDKDIALOG *dialog, PROCESSFN callback, void *data);
X
/*
X * =========================================================
X * 	Declare Scale Box Prototypes and Defines
X * =========================================================
X */
struct _scale_st {
X   WINDOW	*parent;
X   WINDOW	*win;
X   WINDOW	*shadowWin;
X   WINDOW	*fieldWin;
X   WINDOW	*labelWin;
X   chtype	*label;
X   int		labelLen;
X   int		labelPos;
X   int		fieldWidth;
X   chtype	fieldAttr;
X   int		low;
X   int		high;
X   int		current;
X   int		inc;
X   int		fastinc;
X   EExitType	exitType;
X   boolean	box;
X   boolean	shadow;
X   CDKSCREEN	*screen;
X   int		screenIndex;
X   BINDFN	bindFunction[MAXBINDINGS];
X   void *	bindData[MAXBINDINGS];
X   PROCESSFN	preProcessFunction;
X   void *	preProcessData;
X   PROCESSFN	postProcessFunction;
X   void *	postProcessData;
};
typedef struct _scale_st CDKSCALE;
CDKSCALE *newCDKScale (CDKSCREEN *cdkscreen,
X			int xpos, int ypos, int lpos,
X			char *label, chtype fieldAttr, int fieldWidth,
X			int start, int low, int high, int inc, int fastinc,
X			boolean box, boolean shadow);
int activateCDKScale (CDKSCALE *scale, chtype *actions);
int injectCDKScale (CDKSCALE *scale, chtype input);
void setCDKScale (CDKSCALE *scale, int low, int high, int value, boolean box);
void drawCDKScale (CDKSCALE *scale, boolean box);
void drawCDKScaleField (CDKSCALE *scale);
void eraseCDKScale (CDKSCALE *scale);
void destroyCDKScale (CDKSCALE *scale);
void setCDKScalePreProcess (CDKSCALE *scale, PROCESSFN callback, void *data);
void setCDKScalePostProcess (CDKSCALE *scale, PROCESSFN callback, void *data);
X
/*
X * =========================================================
X * 	Declare Marquee Prototypes and Defines
X * =========================================================
X */
struct _marquee_st {
X   WINDOW	*parent;
X   WINDOW	*win;
X   WINDOW	*shadowWin;
X   int		active;
X   int		width;
X   CDKSCREEN	*screen;
X   int		screenIndex;
X   boolean	box;
X   boolean	shadow;
};
typedef struct _marquee_st CDKMARQUEE;
CDKMARQUEE *newCDKMarquee (CDKSCREEN *cdkscreen, int xpos, int ypos,
X				int width, boolean shadow);
int activateCDKMarquee (CDKMARQUEE *marquee, char *message,
X				int delay, int repeat, boolean box);
void drawCDKMarquee (CDKMARQUEE *marquee, boolean box);
void eraseCDKMarquee (CDKMARQUEE *marquee);
void destroyCDKMarquee (CDKMARQUEE *marquee);
X
/*
X * =========================================================
X * 	Declare Menu Prototypes and Defines
X * =========================================================
X */
#define MAXMENUITEMS	30
#define MAXSUBITEMS	98
struct _menu_st {
X   WINDOW	*parent;
X   WINDOW	*pullWin[MAXMENUITEMS];
X   WINDOW	*titleWin[MAXMENUITEMS];
X   chtype	*title[MAXMENUITEMS];
X   int		titleLen[MAXMENUITEMS];
X   chtype	*sublist[MAXMENUITEMS][MAXSUBITEMS];
X   int		sublistLen[MAXMENUITEMS][MAXSUBITEMS];
X   int		subsize[MAXMENUITEMS];
X   int		menuPos;
X   int		menuItems;
X   chtype	titleAttr;
X   chtype	subtitleAttr;
X   int		currentTitle;
X   int		currentSubtitle;
X   int		lastTitle;
X   int		lastSubtitle;
X   EExitType	exitType;
X   CDKSCREEN	*screen;
X   int		screenIndex;
X   int		lastSelection;
X   BINDFN	bindFunction[MAXBINDINGS];
X   void *	bindData[MAXBINDINGS];
X   PROCESSFN	preProcessFunction;
X   void *	preProcessData;
X   PROCESSFN	postProcessFunction;
X   void *	postProcessData;
};
typedef struct _menu_st CDKMENU;
CDKMENU *newCDKMenu (CDKSCREEN *cdkscreen,
X			char *menulist[MAXMENUITEMS][MAXSUBITEMS],
X			int menuitems,
X			int *subsize,
X			int *menuloc,
X			int menuPos,
X			chtype titleattr,
X			chtype subtitleattr);
int activateCDKMenu (CDKMENU *menu, chtype *actions);
int injectCDKMenu (CDKMENU *menu, chtype input);
void setCDKMenu (CDKMENU *menu, int menuitem, int submenuitem,
X			chtype titlehighlight, chtype subtitlehighlight);
void drawCDKMenu (CDKMENU *menu);
void drawCDKMenuTitles (CDKMENU *menu);
void drawCDKMenuSubwin (CDKMENU *menu);
void eraseCDKMenu (CDKMENU *menu);
void eraseCDKMenuSubwin (CDKMENU *menu);
void destroyCDKMenu (CDKMENU *menu);
void cleanUpMenu (CDKMENU *menu);
void setCDKMenuPreProcess (CDKMENU *menu, PROCESSFN callback, void *data);
void setCDKMenuPostProcess (CDKMENU *menu, PROCESSFN callback, void *data);
X
/*
X * =========================================================
X * 	Declare Matrix Prototypes and Defines
X * =========================================================
X */
#define	MAXMATRIXROWS	1000
#define	MAXMATRIXCOLS	1000
struct _matrix_st {
X   WINDOW	*parent;
X   WINDOW	*win;
X   WINDOW	*shadowWin;
X   WINDOW	*cell[MAXMATRIXROWS][MAXMATRIXCOLS];
X   char		*info[MAXMATRIXROWS][MAXMATRIXCOLS];
X   int		rows;
X   int		cols;
X   int		vrows;
X   int		vcols;
X   int		colwidths[MAXMATRIXCOLS];
X   int		colvalues[MAXMATRIXCOLS];
X   chtype	*coltitle[MAXMATRIXCOLS];
X   int		coltitleLen[MAXMATRIXROWS];
X   int		coltitlePos[MAXMATRIXROWS];
X   int		maxct;
X   chtype	*rowtitle[MAXMATRIXROWS];
X   int		rowtitleLen[MAXMATRIXROWS];
X   int		rowtitlePos[MAXMATRIXROWS];
X   int		maxrt;
X   int		rowSpace;
X   int		colSpace;
X   int		row;
X   int		col;
X   int		crow;
X   int		ccol;
X   int		trow;
X   int		lcol;
X   int		oldcrow;
X   int		oldccol;
X   int		oldvrow;
X   int		oldvcol;
X   EExitType	exitType;
X   boolean	boxMatrix;
X   boolean	boxCell;
X   boolean	shadow;
X   chtype	highlight;
X   int		dominant;
X   chtype	filler;
X   CDKSCREEN	*screen;
X   int		screenIndex;
X   BINDFN	bindFunction[MAXBINDINGS];
X   void *	bindData[MAXBINDINGS];
X   void	*	callbackfn;
X   PROCESSFN    preProcessFunction;
X   void *       preProcessData;
X   PROCESSFN    postProcessFunction;
X   void *       postProcessData;
};
typedef struct _matrix_st CDKMATRIX;
typedef void (*MATRIXCB) (CDKMATRIX *matrix, chtype input);
CDKMATRIX *newCDKMatrix (CDKSCREEN *cdkscreen,
X				int xpos, int ypos,
X				int rows, int cols,
X				int vrows, int vcols,
X				char **rowtitles,
X				char **coltitles,
X				int *colwidths, int *coltypes,
X				int rowspace, int colspace, chtype filler,
X				int dominantAttrib,
X				boolean boxMatrix, boolean boxCell,
X				boolean shadow);
int activateCDKMatrix (CDKMATRIX *matrix, chtype *actions);
int injectCDKMatrix (CDKMATRIX *matrix, chtype input);
void setCDKMatrix (CDKMATRIX *matrix,
X			char *info[MAXMATRIXROWS][MAXMATRIXCOLS],
X			int rows, int *subSize);
void drawCDKMatrix (CDKMATRIX *matrix, boolean box);
void eraseCDKMatrix (CDKMATRIX *matrix);
void cleanCDKMatrix (CDKMATRIX *matrix);
void setCDKMatrixCB (CDKMATRIX *matrix, MATRIXCB callback);
int moveToCDKMatrixCell (CDKMATRIX *matrix, int newrow, int newcol);
void destroyCDKMatrix (CDKMATRIX *matrix);
void drawCDKMatrixCell (CDKMATRIX *matrix,
X			int srow, int scol, int vrow, int vcol,
X			chtype attr, boolean box);
void CDKMatrixCallBack (CDKMATRIX *matrix, chtype input);
void highlightCDKMatrixCell (CDKMATRIX *matrix);
int jumpToCell (CDKMATRIX *matrix);
void setCDKMatrixPreProcess (CDKMATRIX *matrix, PROCESSFN callback, void *data);
void setCDKMatrixPostProcess (CDKMATRIX *matrix, PROCESSFN callback, void *data);
X
/*
X * =========================================================
X * 	Declare Histogram Prototypes and Defines
X * =========================================================
X */
struct _histogram_st {
X   WINDOW			*parent;
X   WINDOW			*win;
X   WINDOW			*shadowWin;
X   WINDOW 			*labelWin;
X   chtype			*label;
X   int				labelLen;
X   char				*statschar;
X   char				*lowchar;
X   char				*highchar;
X   chtype			filler;
X   chtype			labelAttr;
X   float			percent;
X   int				height;
X   int				width;
X   int 				orient;
X   int				statspos;
X   int				statsattr;
X   EHistogramDisplayType	viewtype;
X   int				high;
X   int				low;
X   int				value;
X   int				chars;
X   int				lowx,	lowy;
X   int				highx,	highy;
X   int				labelx,	labely;
X   int				statsx,	statsy;
X   int				histx,	histy;
X   boolean			box;
X   boolean			shadow;
X   CDKSCREEN			*screen;
X   int				screenIndex;
};
typedef struct _histogram_st CDKHISTOGRAM;
CDKHISTOGRAM *newCDKHistogram (CDKSCREEN *cdkscreen,
X				int xpos, int ypos, int lpos,
X				int height, int width, int orient,
X				char *label, boolean box, boolean shadow);
void setCDKHistogram (CDKHISTOGRAM *histogram,
X			EHistogramDisplayType viewtype,
X			int statspos, chtype statsattr,
X			int low, int high, int value,
X			chtype filler, boolean box);
void drawCDKHistogram (CDKHISTOGRAM *histogram, boolean box);
void eraseCDKHistogram (CDKHISTOGRAM *histogram);
void destroyCDKHistogram (CDKHISTOGRAM *histogram);
X
/*
X * =========================================================
X * 	Declare Selection List Prototypes and Defines
X * =========================================================
X */
#define	MAXCHOICES	100
struct _selection_st {
X   WINDOW	*parent;
X   WINDOW	*win;
X   WINDOW	*shadowWin;
X   chtype	*title;
X   int		titlePos;
X   int		titleLen;
X   int		titleAdj;
X   chtype	*item[MAXITEMS];
X   int		itemLen[MAXITEMS];
X   int		itemPos[MAXITEMS];
X   chtype	*choice[MAXCHOICES];
X   int		choicelen[MAXCHOICES];
X   int		choiceCount;
X   int		maxchoicelen;
X   int		selections[MAXITEMS];
X   int		maxTopItem;
X   int		maxLeftChar;
X   int		leftChar;
X   int		lastItem;
X   int		currentTop;
X   int		currentHigh;
X   int		currentItem;
X   int		listSize;
X   int		boxWidth;
X   int		boxHeight;
X   int		viewSize;
X   EExitType	exitType;
X   boolean	box;
X   boolean	shadow;
X   chtype	highlight;
X   CDKSCREEN	*screen;
X   int		screenIndex;
X   BINDFN	bindFunction[MAXBINDINGS];
X   void *	bindData[MAXBINDINGS];
X   PROCESSFN	preProcessFunction;
X   void *	preProcessData;
X   PROCESSFN	postProcessFunction;
X   void *	postProcessData;
};
typedef struct _selection_st CDKSELECTION;
CDKSELECTION *newCDKSelection (CDKSCREEN *cdkscreen,
X				int xpos, int ypos, int height, int width,
X				char *title,
X				char **list, int listSize,
X				char **choices, int choiceSize,
X				chtype highlight,
X				boolean box, boolean shadow);
int activateCDKSelection (CDKSELECTION *selection, chtype *actions);
int injectCDKSelection (CDKSELECTION *selection, chtype input);
void drawCDKSelection (CDKSELECTION *selection, boolean box);
void eraseCDKSelection (CDKSELECTION *selection);
void destroyCDKSelection (CDKSELECTION *selection);
void drawCDKSelectionList (CDKSELECTION *selection, boolean box);
void setCDKSelection (CDKSELECTION *selection, chtype highlight,
X			int defChoices[], boolean box);
void setCDKSelectionPreProcess (CDKSELECTION *selection, PROCESSFN callback, void *data);
void setCDKSelectionPostProcess (CDKSELECTION *selection, PROCESSFN callback, void *data);
X
X
/*
X * =========================================================
X * 	Declare Viewer List Prototypes and Defines
X * =========================================================
X */
#define	MAXLINES	10000
#define	MAXBUTTONS	50
struct _viewer_st {
X   WINDOW	*parent;
X   WINDOW	*win;
X   WINDOW	*shadowWin;
X   chtype	*button[MAXBUTTONS];
X   int		buttonLen[MAXBUTTONS];
X   int		buttonPos[MAXBUTTONS];
X   int		buttonCount;
X   chtype	buttonHighlight;
X   chtype	*info[MAXLINES];
X   int		infoLen[MAXLINES];
X   int		infoPos[MAXLINES];
X   chtype	*title;
X   int		titleLen;
X   int		titlePos;
X   int		infoSize;
X   int		boxHeight;
X   int		boxWidth;
X   int		viewSize;
X   int		currentTop;
X   int		currentButton;
X   int		leftChar;
X   int		length;
X   int		maxLeftChar;
X   int		maxTopLine;
X   int		characters;
X   boolean	interpret;
X   EExitType	exitType;
X   boolean	box;
X   boolean	shadow;
X   CDKSCREEN	*screen;
X   int		screenIndex;
X   BINDFN	bindFunction[MAXBINDINGS];
X   void *	bindData[MAXBINDINGS];
};
typedef struct _viewer_st CDKVIEWER;
CDKVIEWER *newCDKViewer (CDKSCREEN *cdkscreen,
X				int xpos, int ypos,
X				int height, int width,
X				char **buttons, int buttonCount,
X				chtype buttonHighlight,
X				boolean box, boolean shadow);
int activateCDKViewer (CDKVIEWER *viewer);
int setCDKViewer (CDKVIEWER *viewer, char *title, 
X			char **info, int infoSize,
X			chtype buttonHighlight,
X			boolean interpret, boolean box);
void drawCDKViewer (CDKVIEWER *viewer, int boolean);
void drawCDKViewerButtons (CDKVIEWER *viewer);
void eraseCDKViewer (CDKVIEWER *viewer);
void destroyCDKViewer (CDKVIEWER *viewer);
X
/*
X * =========================================================
X * 	Declare Graph Prototypes and Defines
X * =========================================================
X */
struct _graph_st {
X   WINDOW		*parent;
X   WINDOW		*win;
X   WINDOW		*shadowWin;
X   chtype		*title;
X   chtype		*graphChar;
X   int			titlePos;
X   int			titleLen;
X   boolean		box;
X   boolean		shadow;
X   int			boxHeight;
X   int			boxWidth;
X   chtype		*xtitle;
X   int			xtitlePos;
X   int			xtitleLen;
X   int			values[MAXLINES];
X   int			count;
X   int			minx;
X   int			maxx;
X   int			xscale;
X   int			txpos;
X   chtype		*ytitle;
X   int			ytitlePos;
X   int			ytitleLen;
X   int			yscale;
X   int			typos;
X   EGraphDisplayType	displayType;
X   CDKSCREEN		*screen;
X   int			screenIndex;
};
typedef struct _graph_st CDKGRAPH;
CDKGRAPH *newCDKGraph (CDKSCREEN *cdkscreen,
X			int xpos, int ypos, int height, int width,
X			char *title, char *xtitle, char *ytitle);
int setCDKGraph (CDKGRAPH *graph, 
X			int *values, int count, char *graphChar,
X			boolean startAtZero,
X			EGraphDisplayType displayType);
void drawCDKGraph (CDKGRAPH *graph, boolean box);
void eraseCDKGraph (CDKGRAPH *graph);
void destroyCDKGraph (CDKGRAPH *graph);
X
/*
X * =========================================================
X * 	Declare Radio Button Prototypes and Defines
X * =========================================================
X */
struct _radio_st {
X   WINDOW	*parent;
X   WINDOW	*win;
X   WINDOW	*shadowWin;
X   chtype	*title;
X   int		titleLen;
X   int		titlePos;
X   chtype	*item[MAXITEMS];
X   int		itemLen[MAXITEMS];
X   int		itemPos[MAXITEMS];
X   int		titleAdj;
X   chtype	choiceChar;
X   int		maxLeftChar;
X   int		widestItem;
X   int		leftChar;
X   int		selectedItem;
X   int		currentTop;
X   int		currentItem;
X   int		currentHigh;
X   int		listSize;
X   int		lastItem;
X   int		maxTopItem;
X   int		boxWidth;
X   int		boxHeight;
X   int		viewSize;
X   int		defItem;
X   EExitType	exitType;
X   boolean	box;
X   boolean	shadow;
X   chtype	highlight;
X   CDKSCREEN	*screen;
X   int		screenIndex;
X   BINDFN	bindFunction[MAXBINDINGS];
X   void *	bindData[MAXBINDINGS];
X   PROCESSFN	preProcessFunction;
X   void *	preProcessData;
X   PROCESSFN	postProcessFunction;
X   void *	postProcessData;
};
typedef struct _radio_st CDKRADIO;
CDKRADIO *newCDKRadio (CDKSCREEN *cdkscreen,
X			int xpos, int ypos, int height, int width,
X			char *title, char **mesg, int items,
X			chtype choiceChar, int defItem,
X			chtype highlight, boolean box, boolean shadow);
int activateCDKRadio (CDKRADIO *radio, chtype *actions);
int injectCDKRadio (CDKRADIO *radio, chtype input);
void setCDKRadio (CDKRADIO *radio, chtype highlight,
X			chtype choiceChar, boolean box);
void drawCDKRadio (CDKRADIO *radio, boolean box);
void drawCDKRadioList (CDKRADIO *radio, boolean box);
void eraseCDKRadio (CDKRADIO *radio);
void destroyCDKRadio (CDKRADIO *radio);
void setCDKRadioPreProcess (CDKRADIO *radio, PROCESSFN callback, void *data);
void setCDKRadioPostProcess (CDKRADIO *radio, PROCESSFN callback, void *data);
X
/*
X * =========================================================
X * 	       Declare Template Object....
X * =========================================================
X */
struct _template_st {
X   WINDOW	*parent;
X   WINDOW	*win;
X   WINDOW	*shadowWin;
X   WINDOW	*labelWin;
X   WINDOW	*field;
X   chtype	*label;
X   chtype	*overlay;
X   chtype	overlayAttr;
X   char 	*plate;
X   char		*info;
X   int		labelLen;
X   int		overlayLen;
X   int		labelPos;
X   int		fieldWidth;
X   int		platePos;
X   int		plateLen;
X   int		screenPos;
X   int		infoPos;
X   chtype	labelAttr;
X   chtype	fieldAttr;
X   CDKSCREEN	*screen;
X   int		screenIndex;
X   EExitType	exitType;
X   boolean	box;
X   boolean	shadow;
X   BINDFN	bindFunction[MAXBINDINGS];
X   void *	bindData[MAXBINDINGS];
X   void	*	callbackfn;
X   PROCESSFN	preProcessFunction;
X   void *	preProcessData;
X   PROCESSFN	postProcessFunction;
X   void *	postProcessData;
};
typedef struct _template_st CDKTEMPLATE;
typedef void (*TEMPLATECB) (CDKTEMPLATE *template, chtype input);
CDKTEMPLATE *newCDKTemplate (CDKSCREEN *cdkscreen,
X				int xpos, int ypos, int lpos,
X				char *label, char *plate, char *overlay,
X				boolean box, boolean shadow);
char *activateCDKTemplate (CDKTEMPLATE *template, chtype *actions);
char *injectCDKTemplate (CDKTEMPLATE *template, chtype input);
void setCDKTemplate (CDKTEMPLATE *template, char *value, boolean box);
void drawCDKTemplate (CDKTEMPLATE *template, boolean box);
void drawCDKTemplateField (CDKTEMPLATE *template);
void eraseCDKTemplate (CDKTEMPLATE *template);
void cleanCDKTemplate (CDKTEMPLATE *template);
void destroyCDKTemplate (CDKTEMPLATE *template);
void setCDKTemplateCB (CDKTEMPLATE *template, TEMPLATECB callback);
char *mixCDKTemplate (CDKTEMPLATE *template);
char *unmixCDKTemplate (CDKTEMPLATE *template, char *string);
void adjustCDKTemplateCursor (CDKTEMPLATE *template, int direction);
void CDKTemplateCallBack (CDKTEMPLATE *template, chtype input);
void setCDKTemplatePreProcess (CDKTEMPLATE *template, PROCESSFN callback, void *data);
void setCDKTemplatePostProcess (CDKTEMPLATE *template, PROCESSFN callback, void *data);
X
/*
X * =========================================================
X * 	       Declare Scrolling Window Object....
X * =========================================================
X */
struct _swindow_st {
X   WINDOW	*parent;
X   WINDOW	*win;
X   WINDOW	*shadowWin;
X   chtype	*info[MAXLINES];
X   int		infoPos[MAXLINES];
X   int		infoLen[MAXLINES];
X   chtype	*title;
X   int		titlePos;
X   int		titleLen;
X   int		titleAdj;
X   int		itemCount;
X   int		boxHeight;
X   int		boxWidth;
X   int		viewSize;
X   int		maxTopLine;
X   int		currentTop;
X   int		leftChar;
X   int		maxLeftChar;
X   int		widestLine;
X   int		saveLines;
X   EExitType	exitType;
X   boolean	box;
X   boolean	shadow;
X   CDKSCREEN	*screen;
X   int		screenIndex;
X   BINDFN	bindFunction[MAXBINDINGS];
X   void *	bindData[MAXBINDINGS];
X   PROCESSFN	preProcessFunction;
X   void *	preProcessData;
X   PROCESSFN	postProcessFunction;
X   void *	postProcessData;
};
typedef struct _swindow_st CDKSWINDOW;
typedef void (*SWINDOWCB) (CDKSWINDOW *swindow, chtype input);
CDKSWINDOW *newCDKSwindow (CDKSCREEN *cdkscreen,
X				int xpos, int ypos, int height, int width,
X				char *title,
X				int saveLines,
X				boolean box, boolean shadow);
void activateCDKSwindow (CDKSWINDOW *swindow, chtype *actions);
int injectCDKSwindow (CDKSWINDOW *swindow, chtype input);
int execCDKSwindow (CDKSWINDOW *swindow, char *command, int insertPos);
int dumpCDKSwindow (CDKSWINDOW *swindow, char *filename);
void saveCDKSwindowInformation (CDKSWINDOW *swindow);
void loadCDKSwindowInformation (CDKSWINDOW *swindow);
void setCDKSwindow (CDKSWINDOW *swindow, char **info, int lines, boolean box);
void drawCDKSwindow (CDKSWINDOW *swindow, boolean box);
void drawCDKSwindowList (CDKSWINDOW *swindow, boolean box);
void eraseCDKSwindow (CDKSWINDOW *swindow);
void cleanCDKSwindow (CDKSWINDOW *swindow);
void addCDKSwindow (CDKSWINDOW *swindow, char *info, int insertPos);
void trimCDKSwindow (CDKSWINDOW *swindow, int start, int finish);
void destroyCDKSwindow (CDKSWINDOW *swindow);
void setCDKSwindowPreProcess (CDKSWINDOW *swindow, PROCESSFN callback, void *data);
void setCDKSwindowPostProcess (CDKSWINDOW *swindow, PROCESSFN callback, void *data);
X
/*
X * =========================================================
X * 	       Declare Item List Widget
X * =========================================================
X */
struct _itemlist_st {
X   CDKSCREEN	*screen;
X   WINDOW	*parent;
X   WINDOW	*win;
X   WINDOW	*shadowWin;
X   WINDOW	*labelWin;
X   chtype	*label;
X   int		labelPos;
X   int		labelLen;
X   WINDOW	*fieldWin;
X   int		fieldWidth;
X   chtype	*item[MAXITEMS];
X   int		itemPos[MAXITEMS];
X   int		itemLen[MAXITEMS];
X   int		itemCount;
X   int		currentItem;
X   int		defaultItem;
X   EExitType	exitType;
X   boolean	box;
X   boolean	shadow;
X   int		screenIndex;
X   BINDFN	bindFunction[MAXBINDINGS];
X   void *	bindData[MAXBINDINGS];
X   PROCESSFN	preProcessFunction;
X   void *	preProcessData;
X   PROCESSFN	postProcessFunction;
X   void *	postProcessData;
};
typedef struct _itemlist_st CDKITEMLIST;
CDKITEMLIST *newCDKItemlist (CDKSCREEN *cdkscreen,
X				int xpos, int ypos,
X				int lpos, char *label,
X				char **itemlist, int count, int defaultItem,
X				boolean box, boolean shadow);
int activateCDKItemlist (CDKITEMLIST *itemlist, chtype *actions);
int injectCDKItemlist (CDKITEMLIST *itemlist, chtype input);
void setCDKItemlist (CDKITEMLIST *itemlist, char **list, int count,
X			int current, boolean box);
void drawCDKItemlist (CDKITEMLIST *itemlist, boolean box);
void drawCDKItemlistField (CDKITEMLIST *itemlist);
void eraseCDKItemlist (CDKITEMLIST *itemlist);
void destroyCDKItemlist	(CDKITEMLIST *itemlist);
void setCDKItemlistPreProcess (CDKITEMLIST *itemlist, PROCESSFN callback, void *data);
void setCDKItemlistPostProcess (CDKITEMLIST *itemlist, PROCESSFN callback, void *data);
X
/*
X * =========================================================
X *             Declare File Selector Widget
X * =========================================================
X */
struct _fileselector_st {
X   CDKSCREEN	*screen;
X   WINDOW	*parent;
X   WINDOW	*win;
X   WINDOW	*shadowWin;
X   CDKLABEL	*title;
X   CDKENTRY	*entryField;
X   CDKSCROLL	*scrollField;
X   char		*dirContents[MAXITEMS];
X   int		fileCounter;
X   char 	*pwd;
X   char		*pathname;
X   int		xpos;
X   int		ypos;
X   int		height;
X   int		width;
X   chtype	fieldAttribute;
X   chtype	fillerCharacter;
X   chtype	highlight;
X   char		*dirAttribute;
X   char		*fileAttribute;
X   char		*linkAttribute;
X   char		*sockAttribute;
X   EExitType	exitType;
X   boolean	box;
X   boolean	shadow;
X   int		screenIndex;
};
typedef struct _fileselector_st CDKFSELECT;
CDKFSELECT *newCDKFselect (CDKSCREEN *cdkscreen,
X				int xpos, int ypos,
X				int height, int width, 
X				char *label, chtype fieldAttribute, 
X				chtype fillerChar, chtype highlight,
X				char *dirAttributes, char *fileAttributes,
X				char *linkAttribute, char *sockAttribute,
X				boolean box, boolean shadow);
char *activateCDKFselect (CDKFSELECT *fselect, chtype *actions);
char *injectCDKFselect (CDKFSELECT *fselect, chtype input);
void setCDKFselect (CDKFSELECT *fselect,
X			char *directory,
X			chtype fieldAttribute, chtype fillerChar,
X			chtype highlight,
X			char *dirAttribute, char *fileAttribute,
X			char *linkAttribute, char *sockAttribute,
X			boolean box);
void setCDKFselectDirContents (CDKFSELECT *fselect);
void drawCDKFselect (CDKFSELECT *fselect, boolean box);
void eraseCDKFselect (CDKFSELECT *fselect);
void destroyCDKFselect (CDKFSELECT *fselect);
void deleteFileCB (EObjectType objectType, void *object, void *clientData);
X
/*
X * =========================================================
X *             Declare Slider Widget
X * =========================================================
X */
struct _slider_st {
X   CDKSCREEN	*screen;
X   WINDOW	*parent;
X   WINDOW	*win;
X   WINDOW	*shadowWin;
X   WINDOW	*fieldWin;
X   WINDOW	*labelWin;
X   chtype	*label;
X   int		labelPos;
X   int		labelLen;
X   int		fieldWidth;
X   int		realFieldWidth;
X   chtype	filler;
X   int 		low;
X   int		high;
X   int		inc;
X   int		fastinc;
X   int		current;
X   int		orient;
X   float	step;
X   int		xpos;
X   int		ypos;
X   int		height;
X   int		width;
X   EExitType	exitType;
X   boolean	box;
X   boolean	shadow;
X   int		screenIndex;
X   BINDFN	bindFunction[MAXBINDINGS];
X   void *	bindData[MAXBINDINGS];
X   PROCESSFN	preProcessFunction;
X   void *	preProcessData;
X   PROCESSFN	postProcessFunction;
X   void *	postProcessData;
};
typedef struct _slider_st CDKSLIDER;
CDKSLIDER *newCDKSlider (CDKSCREEN *cdkscreen,
X				int xpos, int ypos, int lpos,
X				char *label, chtype fieldAttr, int fieldWidth,
X				int start, int low, int high,
X				int inc, int fastInc,
X				boolean box, boolean shadow);
int activateCDKSlider (CDKSLIDER *slider, chtype *actions);
int injectCDKSlider (CDKSLIDER *slider, chtype input);
void setCDKSlider (CDKSLIDER *slider, int low, int high, int value, boolean box);
void drawCDKSlider (CDKSLIDER *slider, boolean box);
void drawCDKSliderField (CDKSLIDER *slider);
void eraseCDKSlider (CDKSLIDER *slider);
void destroyCDKSlider (CDKSLIDER *slider);
void setCDKSliderPreProcess (CDKSLIDER *slider, PROCESSFN callback, void *data);
void setCDKSliderPostProcess (CDKSLIDER *slider, PROCESSFN callback, void *data);
X
/*
X * =========================================================
X *             Declare Alphabetic List Widget
X * =========================================================
X */
struct _alphalist_st {
X   CDKSCREEN	*screen;
X   WINDOW	*parent;
X   WINDOW	*win;
X   WINDOW	*shadowWin;
X   CDKENTRY	*entryField;
X   CDKSCROLL	*scrollField;
X   char		*list[MAXITEMS];
X   int		listSize;
X   int		xpos;
X   int		ypos;
X   int		height;
X   int		width;
X   chtype	highlight;
X   chtype	fillerChar;
X   boolean	box;
X   boolean	shadow;
X   EExitType	exitType;
X   int		screenIndex;
X   BINDFN	bindFunction[MAXBINDINGS];
X   void *	bindData[MAXBINDINGS];
X   PROCESSFN	preProcessFunction;
X   void *	preProcessData;
X   PROCESSFN	postProcessFunction;
X   void *	postProcessData;
};
typedef struct _alphalist_st CDKALPHALIST;
CDKALPHALIST *newCDKAlphalist (CDKSCREEN *cdkscreen,
X				int xpos, int ypos,
X				int height, int width,
X				char *label, char *list[MAXITEMS], int listSize,
X				chtype fillerChar, chtype highlight,
X				boolean box, boolean shadow);
char *activateCDKAlphalist (CDKALPHALIST *alphalist, chtype *actions);
char *injectCDKAlphalist (CDKALPHALIST *alphalist, chtype input);
void setCDKAlphalist (CDKALPHALIST *alphalist,
X			char *list[MAXITEMS], int listSize,
X			chtype fillerChar, chtype highlight, boolean box);
void drawCDKAlphalist (CDKALPHALIST *alphalist, boolean box);
void eraseCDKAlphalist (CDKALPHALIST *alphalist);
void destroyCDKAlphalist (CDKALPHALIST *alphalist);
void setCDKAlphalistPreProcess (CDKALPHALIST *alphalist, PROCESSFN callback, void *data);
void setCDKAlphalistPostProcess (CDKALPHALIST *alphalist, PROCESSFN callback, void *data);
X
/*
X * =========================================================
X * 	            Declare Calendar Widget
X * =========================================================
X */
#define	MAXDAYS		50
#define	MAXMONTHS	13
#define	MAXYEARS	502
struct _calendar_st {
X   WINDOW	*parent;
X   WINDOW	*win;
X   WINDOW	*labelWin;
X   WINDOW	*fieldWin;
X   WINDOW	*shadowWin;
X   int		xpos;
X   int		ypos;
X   int		height;
X   int		width;
X   int		labelLen;
X   chtype	yearAttrib;
X   chtype	monthAttrib;
X   chtype	dayAttrib;
X   chtype	highlight;
X   chtype	marker[MAXDAYS][MAXMONTHS][MAXYEARS];
X   int		day;
X   int		month;
X   int		year;
X   int		weekDay;
X   EExitType	exitType;
X   boolean	box;
X   boolean	shadow;
X   CDKSCREEN	*screen;
X   int		screenIndex;
X   BINDFN	bindFunction[MAXBINDINGS];
X   void *	bindData[MAXBINDINGS];
X   PROCESSFN	preProcessFunction;
X   void *	preProcessData;
X   PROCESSFN	postProcessFunction;
X   void *	postProcessData;
};
typedef struct _calendar_st CDKCALENDAR;
CDKCALENDAR *newCDKCalendar (CDKSCREEN *screen, int xPos, int yPos,
X			int day, int month, int year,
X			chtype dayAttrib, chtype monthAttrib,
X			chtype yearAttrib, chtype highlight,
X			boolean box, boolean shadow);
time_t activateCDKCalendar (CDKCALENDAR *calendar, chtype *actions);
time_t injectCDKCalendar (CDKCALENDAR *calendar, chtype input);
void setCDKCalendar (CDKCALENDAR *calendar,
X			int day, int month, int year,
X			chtype dayAttrib, chtype monthAttrib,
X			chtype yearAttrib, chtype highlight,
X			boolean box);
void setCDKCalendarDate (CDKCALENDAR *calendar, int day, int month, int year);
void setCDKCalendarMarker (CDKCALENDAR *calendar,
X				int day, int month, int year,
X				chtype markerChar);
void removeCDKCalendarMarker (CDKCALENDAR *calendar,
X				int day, int month, int year);
void drawCDKCalendar (CDKCALENDAR *calendar, boolean box);
void drawCDKCalendarField (CDKCALENDAR *calendar);
void eraseCDKCalendar (CDKCALENDAR *calendar);
void destroyCDKCalendar (CDKCALENDAR *calendar);
void setCDKCalendarPreProcess (CDKCALENDAR *calendar, PROCESSFN callback, void *data);
void setCDKCalendarPostProcess (CDKCALENDAR *calendar, PROCESSFN callback, void *data);
X
/*
X * =========================================================
X * 	            Declare Tree Widget
X * =========================================================
X */
typedef struct btree_st NTREE;
struct btree_st {
X	NTREE *parent;
X	NTREE *child[50];
X	char *node;
X	int children;
};
struct _tree_st {
X   WINDOW	*parent;
X   WINDOW	*win;
X   WINDOW	*labelWin;
X   WINDOW	*fieldWin;
X   WINDOW	*shadowWin;
X   int		xpos;
X   int		ypos;
X   int		height;
X   int		width;
X   NTREE	*btree;
X   boolean	box;
X   boolean	shadow;
X   CDKSCREEN	*screen;
X   int		screenIndex;
X   BINDFN	bindFunction[MAXBINDINGS];
X   void *	bindData[MAXBINDINGS];
X   PROCESSFN	preProcessFunction;
X   void *	preProcessData;
X   PROCESSFN	postProcessFunction;
X   void *	postProcessData;
};
typedef struct _calendar_st CDKTREE;
CDKTREE *newCDKTree (CDKSCREEN *screen, int xPos, int yPos,
X			NTREE *btree, chtype highlight, 
X			boolean box, boolean shadow);
int activateCDKTree (CDKTREE *tree, chtype *actions);
int injectCDKTree (CDKTREE *tree, chtype input);
void setCDKTree (CDKTREE *tree, NTREE *btree, chtype highlight, boolean box);
void drawCDKTree (CDKTREE *tree, boolean box);
void drawCDKTreeField (CDKTREE *tree);
void eraseCDKTree (CDKTREE *tree);
void destroyCDKTree (CDKTREE *tree);
void setCDKTreePreProcess (CDKTREE *tree, PROCESSFN callback, void *data);
void setCDKTreePostProcess (CDKTREE *tree, PROCESSFN callback, void *data);
#endif
SHAR_EOF
  $shar_touch -am 0709111596 'cdk4.8.0/cdk.h' &&
  chmod 0444 'cdk4.8.0/cdk.h' ||
  echo 'restore of cdk4.8.0/cdk.h failed'
  shar_count="`wc -c < 'cdk4.8.0/cdk.h'`"
  test 45193 -eq "$shar_count" ||
    echo "cdk4.8.0/cdk.h: original size 45193, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk4.8.0/curdefs.h ==============
if test -f 'cdk4.8.0/curdefs.h' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk4.8.0/curdefs.h (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk4.8.0/curdefs.h (binary)'
  sed 's/^X//' << 'SHAR_EOF' > _sharuue.tmp &&
begin 600 cdk4.8.0/curdefs.h
M(VEF;F1E9B!#55)$149?2`HC9&5F:6YE($-54D1%1E]("@HO*@H@*B`D075T
M:&]R.B!G;&]V97(@)`H@*B`D1&%T93H@,3DY-B\P-R\P.2`Q-3HQ,SHS,"`D
M"B`J("12979I<VEO;CH@,2XR,2`D"B`J+PH*+RH*("H@5&AI<R!H96%D97(@
M9FEL92!I<R!F;W(@;6%C:&EN97,@=VET:&]U="!A(&9U;&P@8W5R<V5S(&1E
M9FEN:71I;VXN"B`J+PH*(VEF9&5F($Y/0TA465!%"G1Y<&5D968@=6YS:6=N
M960@;&]N9R`@8VAT>7!E.PHC96YD:68*"B-I9FYD968)0T1+7U)%1E)%4T@*
M(V1E9FEN90E#1$M?4D5&4D532`DG#"<)+RH@2V5Y('5S960@=&\@<F5F<F5S
M:"!T:&4@<V-R965N+@DJ+PHC96YD:68*(VEF;F1E9@E#1$M?4$%35$4*(V1E
M9FEN90E#1$M?4$%35$4))Q8G"2\J($ME>2!U<V5D(&9O<B!P87-T:6YG+@D)
M*B\*(V5N9&EF"B-I9FYD968)0T1+7T-/4%D*(V1E9FEN90E#1$M?0T]060DG
M&2<)+RH@2V5Y('5S960@9F]R('1A:VEN9R!C;W!I97,N"0DJ+PHC96YD:68*
M(VEF;F1E9@E#1$M?15)!4T4*(V1E9FEN90E#1$M?15)!4T4))Q4G"2\J($ME
M>2!U<V5D(&9O<B!E<F%S:6YG(&9I96QD<RX)"2HO"B-E;F1I9@HC:69N9&5F
M"4-$2U]#550*(V1E9FEN90E#1$M?0U54"0DG&"<)+RH@2V5Y('5S960@9F]R
M(&-U='1I;F<N"0DJ+PHC96YD:68*(VEF;F1E9B!#1$M?0D5'3T9,24Y%"B-D
M969I;F4@0T1+7T)%1T]&3$E.10DG`2<*(V5N9&EF"B-I9FYD968@0T1+7T5.
M1$]&3$E.10HC9&5F:6YE($-$2U]%3D1/1DQ)3D4))P4G"B-E;F1I9@HC:69N
M9&5F($-$2U]"04-+0TA!4@HC9&5F:6YE($-$2U]"04-+0TA!4@DG`B<*(V5N
M9&EF"B-I9FYD968@0T1+7T9/4D-(05(*(V1E9FEN92!#1$M?1D]20TA!4@DG
M!B<*(V5N9&EF"B-I9FYD968@0T1+7U1204Y34$]310HC9&5F:6YE($-$2U]4
M4D%.4U!/4T4))Q0G"B-E;F1I9@HC:69N9&5F"4-$2U]415-4"B-D969I;F4)
M0T1+7U1%4U0))_`G"B-E;F1I9@H*(VEF;F1E9@E34$%#10HC9&5F:6YE"5-0
M04-%"0DG("<*(V5N9&EF"B-I9FYD968@1$5,151%"B-D969I;F4@1$5,151%
M"0DG7#$W-R<)+RH@1&5L971E(&ME>0D)"0DJ+PHC96YD:68*(VEF;F1E9@E4
M04(*(V1E9FEN90E404()"2=<="<)+RH@5&%B(&ME>2X)"0D)*B\*(V5N9&EF
M"B-I9FYD968)2T597T530PHC9&5F:6YE"4M%65]%4T,)"2<;)PDO*B!%<V-A
M<&4@2V5Y+@D)"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?4D5455)."B-D969I
M;F4@2T597U)%5%523@DG7#`Q,B<)+RH@4F5T=7)N(&ME>0D)"0DJ+PHC96YD
M:68*(VEF;F1E9B!+15E?5$%""B-D969I;F4@2T597U1!0@D))UQT)PDO*B!4
M86(@:V5Y"0D)"2HO"B-E;F1I9@HC:69N9&5F($M%65]!,0HC9&5F:6YE($M%
M65]!,0D),#4S-`DO*B!5<'!E<B!L969T(&]F(&ME>7!A9`D)"2HO"B-E;F1I
M9@HC:69N9&5F($M%65]!,PHC9&5F:6YE($M%65]!,PD),#4S-0DO*B!5<'!E
M<B!R:6=H="!O9B!K97EP860)"2HO"B-E;F1I9@HC:69N9&5F($M%65]",@HC
M9&5F:6YE($M%65]",@D),#4S-@DO*B!#96YT97(@;V8@:V5Y<&%D"0D)*B\*
M(V5N9&EF"B-I9FYD968@2T597T,Q"B-D969I;F4@2T597T,Q"0DP-3,W"2\J
M($QO=V5R(&QE9G0@;V8@:V5Y<&%D"0D)*B\*(V5N9&EF"B-I9FYD968@2T59
M7T,S"B-D969I;F4@2T597T,S"0DP-30P"2\J($QO=V5R(')I9VAT(&]F(&ME
M>7!A9`D)*B\*(V5N9&EF"B-I9FYD968@2T597T)404(*(V1E9FEN92!+15E?
M0E1!0@DP-30Q"2\J($)A8VL@=&%B(&ME>0D)"0DJ+PHC96YD:68*(VEF;F1E
M9B!+15E?0D5'"B-D969I;F4@2T597T)%1PD),#4T,@DO*B!B96<H:6YN:6YG
M*2!K97D)"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?0T%.0T5,"B-D969I;F4@
M2T597T-!3D-%3`DP-30S"2\J(&-A;F-E;"!K97D)"0D)*B\*(V5N9&EF"B-I
M9FYD968@2T597T-,3U-%"B-D969I;F4@2T597T-,3U-%"3`U-#0)+RH@8VQO
M<V4@:V5Y"0D)"2HO"B-E;F1I9@HC:69N9&5F($M%65]#3TU-04Y$"B-D969I
M;F4@2T597T-/34U!3D0),#4T-0DO*B!C;60@*&-O;6UA;F0I(&ME>0D)"2HO
M"B-E;F1I9@HC:69N9&5F($M%65]#3U!9"B-D969I;F4@2T597T-/4%D),#4T
M-@DO*B!C;W!Y(&ME>0D)"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?0U)%051%
M"B-D969I;F4@2T597T-214%410DP-30W"2\J(&-R96%T92!K97D)"0D)*B\*
M(V5N9&EF"B-I9FYD968@2T597T5.1`HC9&5F:6YE($M%65]%3D0)"3`U-3`)
M+RH@96YD(&ME>0D)"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?15A)5`HC9&5F
M:6YE($M%65]%6$E4"3`U-3$)+RH@97AI="!K97D)"0D)*B\*(V5N9&EF"B-I
M9FYD968@2T597T9)3D0*(V1E9FEN92!+15E?1DE.1`DP-34R"2\J(&9I;F0@
M:V5Y"0D)"2HO"B-E;F1I9@HC:69N9&5F($M%65](14Q0"B-D969I;F4@2T59
M7TA%3%`),#4U,PDO*B!H96QP(&ME>0D)"0DJ+PHC96YD:68*(VEF;F1E9B!+
M15E?34%22PHC9&5F:6YE($M%65]-05)+"3`U-30)+RH@;6%R:R!K97D)"0D)
M*B\*(V5N9&EF"B-I9FYD968@2T597TU%4U-!1T4*(V1E9FEN92!+15E?3453
M4T%'10DP-34U"2\J(&UE<W-A9V4@:V5Y"0D)"2HO"B-E;F1I9@HC:69N9&5F
M($M%65]-3U9%"B-D969I;F4@2T597TU/5D4),#4U-@DO*B!M;W9E(&ME>0D)
M"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?3D585`HC9&5F:6YE($M%65].15A4
M"3`U-3<)+RH@;F5X="!O8FIE8W0@:V5Y"0D)*B\*(V5N9&EF"B-I9FYD968@
M2T597T]014X*(V1E9FEN92!+15E?3U!%3@DP-38P"2\J(&]P96X@:V5Y"0D)
M"2HO"B-E;F1I9@HC:69N9&5F($M%65]/4%1)3TY3"B-D969I;F4@2T597T]0
M5$E/3E,),#4V,0DO*B!O<'1I;VYS(&ME>0D)"0DJ+PHC96YD:68*(VEF;F1E
M9B!+15E?4%)%5DE/55,*(V1E9FEN92!+15E?4%)%5DE/55,),#4V,@DO*B!P
M<F5V:6]U<R!O8FIE8W0@:V5Y"0D)*B\*(V5N9&EF"B-I9FYD968@2T597U)%
M1$\*(V1E9FEN92!+15E?4D5$3PDP-38S"2\J(')E9&\@:V5Y"0D)"2HO"B-E
M;F1I9@HC:69N9&5F($M%65]2149%4D5.0T4*(V1E9FEN92!+15E?4D5&15)%
M3D-%"3`U-C0)+RH@<F5F*&5R96YC92D@:V5Y"0D)*B\*(V5N9&EF"B-I9FYD
M968@2T597U)%1E)%4T@*(V1E9FEN92!+15E?4D5&4D532`DP-38U"2\J(')E
M9G)E<V@@:V5Y"0D)"2HO"B-E;F1I9@HC:69N9&5F($M%65]215!,04-%"B-D
M969I;F4@2T597U)%4$Q!0T4),#4V-@DO*B!R97!L86-E(&ME>0D)"0DJ+PHC
M96YD:68*(VEF;F1E9B!+15E?4D535$%25`HC9&5F:6YE($M%65]215-405)4
M"3`U-C<)+RH@<F5S=&%R="!K97D)"0D)*B\*(V5N9&EF"B-I9FYD968@2T59
M7U)%4U5-10HC9&5F:6YE($M%65]215-5344),#4W,`DO*B!R97-U;64@:V5Y
M"0D)"2HO"B-E;F1I9@HC:69N9&5F($M%65]3059%"B-D969I;F4@2T597U-!
M5D4),#4W,0DO*B!S879E(&ME>0D)"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?
M4T)%1PHC9&5F:6YE($M%65]30D5'"3`U-S()+RH@<VAI9G1E9"!B96=I;FYI
M;F<@:V5Y"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?4T-!3D-%3`HC9&5F:6YE
M($M%65]30T%.0T5,"3`U-S,)+RH@<VAI9G1E9"!C86YC96P@:V5Y"0D)*B\*
M(V5N9&EF"B-I9FYD968@2T597U-#3TU-04Y$"B-D969I;F4@2T597U-#3TU-
M04Y$"3`U-S0)+RH@<VAI9G1E9"!C;VUM86YD(&ME>0D)"2HO"B-E;F1I9@HC
M:69N9&5F($M%65]30T]060HC9&5F:6YE($M%65]30T]060DP-3<U"2\J('-H
M:69T960@8V]P>2!K97D)"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?4T-214%4
M10HC9&5F:6YE($M%65]30U)%051%"3`U-S8)+RH@<VAI9G1E9"!C<F5A=&4@
M:V5Y"0D)*B\*(V5N9&EF"B-I9FYD968@2T597U-$0PHC9&5F:6YE($M%65]3
M1$,)"3`U-S<)+RH@<VAI9G1E9"!D96QE=&4@8VAA<B!K97D)"2HO"B-E;F1I
M9@HC:69N9&5F($M%65]31$P*(V1E9FEN92!+15E?4T1,"0DP-C`P"2\J('-H
M:69T960@9&5L971E(&QI;F4@:V5Y"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?
M4T5,14-4"B-D969I;F4@2T597U-%3$5#5`DP-C`Q"2\J('-E;&5C="!K97D)
M"0D)*B\*(V5N9&EF"B-I9FYD968@2T597U-%3D0*(V1E9FEN92!+15E?4T5.
M1`DP-C`R"2\J('-H:69T960@96YD(&ME>0D)"2HO"B-E;F1I9@HC:69N9&5F
M($M%65]314],"B-D969I;F4@2T597U-%3TP),#8P,PDO*B!S:&EF=&5D(&-L
M96%R(&QI;F4@:V5Y"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?4T58250*(V1E
M9FEN92!+15E?4T58250),#8P-`DO*B!S:&EF=&5D(&5X:70@:V5Y"0D)*B\*
M(V5N9&EF"B-I9FYD968@2T597U-&24Y$"B-D969I;F4@2T597U-&24Y$"3`V
M,#4)+RH@<VAI9G1E9"!F:6YD(&ME>0D)"2HO"B-E;F1I9@HC:69N9&5F($M%
M65]32$5,4`HC9&5F:6YE($M%65]32$5,4`DP-C`V"2\J('-H:69T960@:&5L
M<"!K97D)"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?4TA/344*(V1E9FEN92!+
M15E?4TA/344),#8P-PDO*B!S:&EF=&5D(&AO;64@:V5Y"0D)*B\*(V5N9&EF
M"B-I9FYD968@2T597U-)0PHC9&5F:6YE($M%65]324,)"3`V,3`)+RH@<VAI
M9G1E9"!I;G!U="!K97D)"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?4TQ%1E0*
M(V1E9FEN92!+15E?4TQ%1E0),#8Q,0DO*B!S:&EF=&5D(&QE9G0@87)R;W<@
M:V5Y"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?4TU%4U-!1T4*(V1E9FEN92!+
M15E?4TU%4U-!1T4),#8Q,@DO*B!S:&EF=&5D(&UE<W-A9V4@:V5Y"0D)*B\*
M(V5N9&EF"B-I9FYD968@2T597U--3U9%"B-D969I;F4@2T597U--3U9%"3`V
M,3,)+RH@<VAI9G1E9"!M;W9E(&ME>0D)"2HO"B-E;F1I9@HC:69N9&5F($M%
M65]33D585`HC9&5F:6YE($M%65]33D585`DP-C$T"2\J('-H:69T960@;F5X
M="!K97D)"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?4T]05$E/3E,*(V1E9FEN
M92!+15E?4T]05$E/3E,),#8Q-0DO*B!S:&EF=&5D(&]P=&EO;G,@:V5Y"0D)
M*B\*(V5N9&EF"B-I9FYD968@2T597U-04D5624]54PHC9&5F:6YE($M%65]3
M4%)%5DE/55,),#8Q-@DO*B!S:&EF=&5D('!R978@:V5Y"0D)*B\*(V5N9&EF
M"B-I9FYD968@2T597U-04DE.5`HC9&5F:6YE($M%65]34%))3E0),#8Q-PDO
M*B!S:&EF=&5D('!R:6YT(&ME>0D)"2HO"B-E;F1I9@HC:69N9&5F($M%65]3
M4D5$3PHC9&5F:6YE($M%65]34D5$3PDP-C(P"2\J('-H:69T960@<F5D;R!K
M97D)"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?4U)%4$Q!0T4*(V1E9FEN92!+
M15E?4U)%4$Q!0T4),#8R,0DO*B!S:&EF=&5D(')E<&QA8V4@:V5Y"0D)*B\*
M(V5N9&EF"B-I9FYD968@2T597U-224=(5`HC9&5F:6YE($M%65]34DE'2%0)
M,#8R,@DO*B!S:&EF=&5D(')I9VAT(&%R<F]W"0D)*B\*(V5N9&EF"B-I9FYD
M968@2T597U-24U5-10HC9&5F:6YE($M%65]34E-5344),#8R,PDO*B!S:&EF
M=&5D(')E<W5M92!K97D)"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?4U-!5D4*
M(V1E9FEN92!+15E?4U-!5D4),#8R-`DO*B!S:&EF=&5D('-A=F4@:V5Y"0D)
M*B\*(V5N9&EF"B-I9FYD968@2T597U-355-014Y$"B-D969I;F4@2T597U-3
M55-014Y$"3`V,C4)+RH@<VAI9G1E9"!S=7-P96YD(&ME>0D)"2HO"B-E;F1I
M9@HC:69N9&5F($M%65]354Y$3PHC9&5F:6YE($M%65]354Y$3PDP-C(V"2\J
M('-H:69T960@=6YD;R!K97D)"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?4U53
M4$5.1`HC9&5F:6YE($M%65]355-014Y$"3`V,C<)+RH@<W5S<&5N9"!K97D)
M"0D)*B\*(V5N9&EF"B-I9FYD968@2T597U5.1$\*(V1E9FEN92!+15E?54Y$
M3PDP-C,P"2\J('5N9&\@:V5Y"0D)"2HO"B-E;F1I9@HC:69N9&5F($M%65]-
M05@*(V1E9FEN92!+15E?34%8"0DP-S<W"2\J($UA>&EM=6T@8W5R<V5S(&ME
M>0D)"2HO"B-E;F1I9@HC:69N9&5F($%?05144DE"551%4PHC9&5F:6YE($%?
M05144DE"551%4R`@("`P>&9F9F9F9C`P"B-E;F1I9@HC:69N9&5F($%?3D]2
M34%,"B-D969I;F4@05].3U)-04P@("`@("`@(#!X,#`P,#`P,#`*(V5N9&EF
M"B-I9FYD968@05]35$%.1$]55`HC9&5F:6YE($%?4U1!3D1/550@("`@("`P
M>#`P,#$P,#`P"B-E;F1I9@HC:69N9&5F($%?54Y$15),24Y%"B-D969I;F4@
M05]53D1%4DQ)3D4@("`@(#!X,#`P,C`P,#`*(V5N9&EF"B-I9FYD968@05]2
M159%4E-%"B-D969I;F4@05]2159%4E-%("`@("`@(#!X,#`P-#`P,#`*(V5N
M9&EF"B-I9FYD968@05]"3$E.2PHC9&5F:6YE($%?0DQ)3DL@("`@("`@("`P
M>#`P,#@P,#`P"B-E;F1I9@HC:69N9&5F($%?1$E-"B-D969I;F4@05]$24T@
M("`@("`@("`@(#!X,#`Q,#`P,#`*(V5N9&EF"B-I9FYD968@05]"3TQ$"B-D
M969I;F4@05]"3TQ$("`@("`@("`@(#!X,#`R,#`P,#`*(V5N9&EF"B-I9FYD
M968@05]!3%1#2$%24T54"B-D969I;F4@05]!3%1#2$%24T54("`@(#!X,#`T
M,#`P,#`*(V5N9&EF"B-I9FYD968@05])3E9)4PHC9&5F:6YE($%?24Y625,@
M("`@("`@("`P>#`P.#`P,#`P"B-E;F1I9@HC:69N9&5F($%?4%)/5$5#5`HC
M9&5F:6YE($%?4%)/5$5#5"`@("`@("`P>#`Q,#`P,#`P"B-E;F1I9@HC:69N
M9&5F($%?0TA!4E1%6%0*(V1E9FEN92!!7T-(05)415A4("`@("`@,'@P,#`P
M,#!F9@HC96YD:68*(VEF;F1E9B!!7T-/3$]2"B-D969I;F4@05]#3TQ/4B`@
M("`@("`@(#!X,#`P,&9F,#`*(V5N9&EF"B-I9FYD968@2T597TU)3@HC9&5F
M:6YE($M%65]-24X)"3`T,#$)+RH@36EN:6UU;2!C=7)S97,@:V5Y"0D)*B\*
M(V5N9&EF"B-I9FYD968@2T597T)214%+"B-D969I;F4@2T597T)214%+("`@
M("`@(#`T,#$)+RH@8G)E86L@:V5Y("AU;G)E;&EA8FQE*0D)*B\*(V5N9&EF
M"B-I9FYD968@2T597T1/5TX*(V1E9FEN92!+15E?1$]73B`@("`@("`@,#0P
M,@DO*B!4:&4@9F]U<B!A<G)O=R!K97ES("XN+@D)*B\*(V5N9&EF"B-I9FYD
M968@2T597U50"B-D969I;F4@2T597U50("`@("`@("`@(#`T,#,*(V5N9&EF
M"B-I9FYD968@2T597TQ%1E0*(V1E9FEN92!+15E?3$5&5"`@("`@("`@,#0P
M-`HC96YD:68*(VEF;F1E9B!+15E?4DE'2%0*(V1E9FEN92!+15E?4DE'2%0@
M("`@("`@,#0P-0DO*B`N+BX@*B\*(V5N9&EF"B-I9FYD968@2T597TA/344*
M(V1E9FEN92!+15E?2$]-12`@("`@("`@,#0P-@DO*B!(;VUE(&ME>2`H=7!W
M87)D*VQE9G0@87)R;W<I"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?0D%#2U-0
M04-%"B-D969I;F4@2T597T)!0TM34$%#12`@(#`T,#<)+RH@8F%C:W-P86-E
M("AU;G)E;&EA8FQE*0D)*B\*(V5N9&EF"B-I9FYD968@2T597T8P"B-D969I
M;F4@2T597T8P("`@("`@("`@(#`T,3`)+RH@1G5N8W1I;VX@:V5Y<RX@(%-P
M86-E(&9O<B`V-`D)*B\*(V5N9&EF"B-I9FYD968@2T597T8Q"B-D969I;F4@
M2T597T8Q("`@("`@("`@(#`T,3$*(V5N9&EF"B-I9FYD968@2T597T8R"B-D
M969I;F4@2T597T8R("`@("`@("`@(#`T,3(*(V5N9&EF"B-I9FYD968@2T59
M7T8S"B-D969I;F4@2T597T8S("`@("`@("`@(#`T,3,*(V5N9&EF"B-I9FYD
M968@2T597T8T"B-D969I;F4@2T597T8T("`@("`@("`@(#`T,30*(V5N9&EF
M"B-I9FYD968@2T597T8U"B-D969I;F4@2T597T8U("`@("`@("`@(#`T,34*
M(V5N9&EF"B-I9FYD968@2T597T8V"B-D969I;F4@2T597T8V("`@("`@("`@
M(#`T,38*(V5N9&EF"B-I9FYD968@2T597T8W"B-D969I;F4@2T597T8W("`@
M("`@("`@(#`T,3<*(V5N9&EF"B-I9FYD968@2T597T8X"B-D969I;F4@2T59
M7T8X("`@("`@("`@(#`T,3@*(V5N9&EF"B-I9FYD968@2T597T8Y"B-D969I
M;F4@2T597T8Y("`@("`@("`@(#`T,3D*(V5N9&EF"B-I9FYD968@2T597T8Q
M,`HC9&5F:6YE($M%65]&,3`)"3`T,C`*(V5N9&EF"B-I9FYD968@2T597T8Q
M,0HC9&5F:6YE($M%65]&,3$)"3`T,C$*(V5N9&EF"B-I9FYD968@2T597T8Q
M,@HC9&5F:6YE($M%65]&,3()"3`T,C(*(V5N9&EF"B-I9FYD968@2T597T1,
M"B-D969I;F4@2T597T1,("`@("`@("`@(#`U,3`)+RH@1&5L971E(&QI;F4)
M"0D)*B\*(V5N9&EF"B-I9FYD968@2T597TE,"B-D969I;F4@2T597TE,("`@
M("`@("`@(#`U,3$)+RH@26YS97)T(&QI;F4)"0D)*B\*(V5N9&EF"B-I9FYD
M968@2T597T1#"B-D969I;F4@2T597T1#("`@("`@("`@(#`U,3()+RH@1&5L
M971E(&-H87)A8W1E<@D)"2HO"B-E;F1I9@HC:69N9&5F($M%65])0PHC9&5F
M:6YE($M%65])0R`@("`@("`@("`P-3$S"2\J($EN<V5R="!C:&%R(&]R(&5N
M=&5R(&EN<V5R="!M;V1E"2HO"B-E;F1I9@HC:69N9&5F($M%65]%24,*(V1E
M9FEN92!+15E?14E#("`@("`@("`@,#4Q-`DO*B!%>&ET(&EN<V5R="!C:&%R
M(&UO9&4)"2HO"B-E;F1I9@HC:69N9&5F($M%65]#3$5!4@HC9&5F:6YE($M%
M65]#3$5!4B`@("`@("`P-3$U"2\J($-L96%R('-C<F5E;@D)"0DJ+PHC96YD
M:68*(VEF;F1E9B!+15E?14]3"B-D969I;F4@2T597T5/4R`@("`@("`@(#`U
M,38)+RH@0VQE87(@=&\@96YD(&]F('-C<F5E;@D)*B\*(V5N9&EF"B-I9FYD
M968@2T597T5/3`HC9&5F:6YE($M%65]%3TP@("`@("`@("`P-3$W"2\J($-L
M96%R('1O(&5N9"!O9B!L:6YE"0D)*B\*(V5N9&EF"B-I9FYD968@2T597U-&
M"B-D969I;F4@2T597U-&("`@("`@("`@(#`U,C`)+RH@4V-R;VQL(#$@;&EN
M92!F;W)W87)D"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?4U(*(V1E9FEN92!+
M15E?4U(@("`@("`@("`@,#4R,0DO*B!38W)O;&P@,2!L:6YE(&)A8VMW87)D
M<R`H<F5V97)S92D)*B\*(V5N9&EF"B-I9FYD968@2T597TY004=%"B-D969I
M;F4@2T597TY004=%("`@("`@(#`U,C()+RH@3F5X="!P86=E"0D)"2HO"B-E
M;F1I9@HC:69N9&5F($M%65]04$%'10HC9&5F:6YE($M%65]04$%'12`@("`@
M("`P-3(S"2\J(%!R979I;W5S('!A9V4)"0DJ+PHC96YD:68*(VEF;F1E9B!+
M15E?4U1!0@HC9&5F:6YE($M%65]35$%"("`@("`@("`P-3(T"2\J(%-E="!T
M86()"0D)*B\*(V5N9&EF"B-I9FYD968@2T597T-404(*(V1E9FEN92!+15E?
M0U1!0B`@("`@("`@,#4R-0DO*B!#;&5A<B!T86()"0D)*B\*(V5N9&EF"B-I
M9FYD968@2T597T-!5$%""B-D969I;F4@2T597T-!5$%"("`@("`@(#`U,C8)
M+RH@0VQE87(@86QL('1A8G,)"0DJ+PHC96YD:68*(VEF;F1E9B!+15E?14Y4
M15(*(V1E9FEN92!+15E?14Y415(@("`@("`@,#4R-PDO*B!%;G1E<B!O<B!S
M96YD("AU;G)E;&EA8FQE*0D)*B\*(V5N9&EF"B-I9FYD968@2T597U-215-%
M5`HC9&5F:6YE($M%65]34D53150@("`@("`P-3,P"2\J('-O9G0@*'!A<G1I
M86PI(')E<V5T("AU;G)E;&EA8FQE*0DJ+PHC96YD:68*(VEF;F1E9B!+15E?
M4D53150*(V1E9FEN92!+15E?4D53150@("`@("`@,#4S,0DO*B!R97-E="!O
M<B!H87)D(')E<V5T("AU;G)E;&EA8FQE*0DJ+PHC96YD:68*(VEF;F1E9B!+
M15E?4%))3E0*(V1E9FEN92!+15E?4%))3E0@("`@("`@,#4S,@DO*B!P<FEN
M="!O<B!C;W!Y"0D)*B\*(V5N9&EF"B-I9FYD968@2T597TQ,"B-D969I;F4@
M2T597TQ,("`@("`@("`@(#`U,S,)+RH@:&]M92!D;W=N(&]R(&)O='1O;2`H
M;&]W97(@;&5F="D)*B\*(V5N9&EF"@HO*@H@*B!3;VUE('-Y<W1E;7,@*&QI
M:V4@04E8(#XZ?"`I(&1O;B=T(&AA=F4@<')E9&5F:6YE9"!I=&5M<PH@*B!L
M:6ME($%#4U\J('-O($D@:&%V92!T;R`G9F%K92<@=&AE;2!H97)E+@HJ+PHC
M:69N9&5F($%#4U](3$E.10HC9&5F:6YE"4%#4U](3$E.10DG+2<*(V5N9&EF
M"B-I9FYD968@04-37U9,24Y%"B-D969I;F4)04-37U9,24Y%"2=\)PHC96YD
M:68*(VEF;F1E9B!!0U-?54Q#3U).15(*(V1E9FEN90E!0U-?54Q#3U).15()
M)RLG"B-E;F1I9@HC:69N9&5F($%#4U]54D-/4DY%4@HC9&5F:6YE"4%#4U]5
M4D-/4DY%4@DG*R<*(V5N9&EF"B-I9FYD968@04-37TQ,0T]23D52"B-D969I
M;F4)04-37TQ,0T]23D52"2<K)PHC96YD:68*(VEF;F1E9B!!0U-?3%)#3U).
M15(*(V1E9FEN90E!0U-?3%)#3U).15())RLG"B-E;F1I9@HC:69N9&5F($%#
M4U],5$5%"B-D969I;F4)04-37TQ4144))RLG"B-E;F1I9@HC:69N9&5F($%#
M4U]25$5%"B-D969I;F4)04-37U)4144))RLG"B-E;F1I9@HC:69N9&5F($%#
M4U]45$5%"B-D969I;F4)04-37U14144))RLG"B-E;F1I9@HC:69N9&5F($%#
M4U]"5$5%"B-D969I;F4)04-37T)4144))RLG"B-E;F1I9@HC:69N9&5F($%#
M4U]03%53"B-D969I;F4)04-37U!,55,))RLG"B-E;F1I9@HC96YD:68@+RH@
,0U521$5&7T@@*B\*
`
end
SHAR_EOF
  echo 'uudecoding file cdk4.8.0/curdefs.h' &&
  uudecode _sharuue.tmp < _sharuue.tmp && rm -f _sharuue.tmp &&
  $shar_touch -am 0709111596 'cdk4.8.0/curdefs.h' &&
  chmod 0444 'cdk4.8.0/curdefs.h' ||
  echo 'restore of cdk4.8.0/curdefs.h failed'
  shar_count="`wc -c < 'cdk4.8.0/curdefs.h'`"
  test 10137 -eq "$shar_count" ||
    echo "cdk4.8.0/curdefs.h: original size 10137, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk4.8.0/Makefile ==============
if test -f 'cdk4.8.0/Makefile' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk4.8.0/Makefile (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk4.8.0/Makefile (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk4.8.0/Makefile' &&
# Generated automatically from Makefile.in by configure.
#
# This is the makefile for the CDK library. Uncomment the machine/os
# type which best suits your machine.
#
X
# Set up some global variables.
CDKLIB	= libcdk.a
CDKSLIB	= libcdk.so.1
VERSION	= 4.8.0
X
# Set up directory paths.
MANDIR		= ./man
EXAMDIR		= ./exam
DEMODIR		= ./demo
RELDIR		= ./cdk$(VERSION)
INST_ROOTDIR	= /usr
INST_LIBDIR	= ${INST_ROOTDIR}/lib
INST_INCDIR	= ${INST_ROOTDIR}/include
INST_MANDIR	= ${INST_ROOTDIR}/man/man3
INST_SRCDIR	= ${INST_ROOTDIR}/src
X
# Linux
CC	= gcc
INCPATH = -I/usr/include/ncurses -I/usr/local/include
LIBPATH = -L/usr/lib -L.
LINKLIB = -lncurses -lm
SHARED	= -fPIC
SLINK	= -shared -Wl,-soname,$(CDKSLIB)
CFLAGS	= $(INCPATH) -Wall -DCOLOR -O
RANLIB	= @ranlib $(CDKLIB)
X
# Linux XCurses (Use this if you have Xcurses support)
#CC	= gcc 
#INCPATH	= -I/home/mark/PDCurses-2.3
#LIBPATH	= -L/home/mark/PDCurses/pdcurses -L.
#LINKLIB	= $(LIBPATH) -lxcurses -lm
#SHARED	= -fPIC
#SLINK	= -shared -Wl,-soname,$(CDKSLIB)
#CFLAGS	= $(INCPATH) -g -Wall -DLINUX -DCOLOR -DXCURSES
X
# Free-BSD
#CC	= gcc
#INCPATH = -I/usr/include/ncurses -I/usr/local/include
#LIBPATH = -L/usr/lib -L.
#LINKLIB = -lncurses -lm
#SHARED	= -fPIC
#SLINK	= -shared -Wl,-soname,$(CDKSLIB)
#CFLAGS	= $(INCPATH) -Wall -DCOLOR -O -DFREE_BSD
#RANLIB	= @ranlib $(CDKLIB)
X
# SUN
#CC	= gcc 
#INCPATH = -I/usr/5include
#LIBPATH = -L/usr/5lib -L/usr/lib
#LINKLIB = -lcurses -ltermcap -lm
#CFLAGS	= $(INCPATH)  -g -DNOSTRERR -DOLDCURSES
#RANLIB	= @ranlib $(CDKLIB)
X
# SOLARIS
#CC	= cc
#INCPATH = 
#LIBPATH = -L/usr/ccs/lib
#LINKLIB = -lcurses -ltermcap -lm
#SLINK	= -G
#CFLAGS	= $(INCPATH) -g -DNOBZERO -DNOUSLEEP -DNODYNALLOC
#SFLAGS	= -Fpic
#RANLIB	= echo 
X
# AIX
#CC	= cc 
#INCPATH	=  
#LIBPATH	=  
#LINKLIB	= $(LIBPATH) -lcurses -ltermcap -lm
#CFLAGS	= $(INCPATH) -g -qlanglvl=ansi -DAIX -DNODYNALLOC
#RANLIB	= @ranlib $(CDKLIB)
X
# HP-UX
#CC	= c89
#INCPATH	=  
#LIBPATH	=  
#LINKLIB	= $(LIBPATH) -lcurses -lm
#CFLAGS	= $(INCPATH) -g -Aa -D_HPUX_SOURCE -DNODYNALLOC -DNOCHTYPE
#RANLIB	= @ranlib $(CDKLIB)
X
###############################################################
#          Do Not change anything under this line.            #
###############################################################
X
# Create the file lists.
CDKHDR		= cdk.h curdefs.h
CDKWIDGETS	= alphalist.c calendar.c dialog.c entry.c graph.c \
X			fselect.c histogram.c itemlist.c label.c \
X			marquee.c matrix.c mentry.c menu.c radio.c \
X			scale.c scroll.c selection.c slider.c \
X			swindow.c template.c viewer.c
CDKSRC		= draw.c cdk.c cdkscreen.c binding.c debug.c $(CDKWIDGETS)
CDKOBJS		= $(CDKSRC:.c=.o)
CDKEXAMSRC	= $(CDKWIDGETS:.c=_ex.c) subwindow_ex.c bind_ex.c hello_ex.c
CDKEXAMBIN	= $(CDKEXAMSRC:_ex.c=)
CDKDEMOSRC	= fileview.c rolodex.c command.c clock.c
CDKDEMOHDR	= rolodex.h
CDKDEMOBIN	= $(CDKDEMOSRC:.c=)
CDKMAN		= $(CDKWIDGETS:.c=.3) cdk.3 screen.3 binding.3 display.3 misc.3
CDKDOCS		= BUGS EXPANDING INSTALL NOTES README TODO VERSION COPYING
X
# Create the compile information for the executables.
tst: tst.o $(CDKOBJS)
X	$(CC) $(CFLAGS) -o tst tst.o $(CDKOBJS) $(INCPATH) $(LIBPATH) $(LINKLIB)
X
stst: tst.o
X	$(CC) $(CFLAGS) -o stst tst.o $(CDKSLIB).0 $(INCPATH) $(LIBPATH) $(LINKLIB)
X
lib: $(CDKOBJS)
X	@ar r $(CDKLIB) $(CDKOBJS)
X	@$(RANLIB)
X
# Standard library directive.
cdklib $(CDKLIB):
X	@$(MAKE) clean
X	$(CC) $(CFLAGS) -c $(CDKSRC)
X	@ar r $(CDKLIB) $(CDKOBJS)
X	@$(RANLIB)
X
# Shared library directive.
cdkslib $(CDKSLIB):
X	@$(MAKE) clean
X	$(CC) $(CFLAGS) $(SFLAGS) -c $(CDKSRC)
X	$(CC) $(SLINK) -o $(CDKSLIB).0 $(CDKOBJS)
X
# Install the library and realted files.
install:
X	@$(MAKE) instman
X	@$(MAKE) instsrc
X	@$(MAKE) instlib
X	@echo "Installation done.";
X
# Install the manual pages.
instman:
X	@echo "Installing manual pages...";
X	@mkdir -p $(INST_MANDIR);
X	@(cd $(MANDIR); for i in $(CDKMAN); do \
X	   if [ "$${i}" = "cdk.3" ]; then \
X	      echo "	$(INST_MANDIR)/$${i}"; \
X	      rm -f $(INST_MANDIR)/$${i}; \
X	      cp $$i $(INST_MANDIR)/$${i}; \
X	   else \
X	      echo "	$(INST_MANDIR)/cdk_$${i}"; \
X	      rm -f $(INST_MANDIR)/cdk_$${i}; \
X	      cp $$i $(INST_MANDIR)/cdk_$${i}; \
X	   fi \
X	done)
X
# Install the source and release documents.
instsrc:
X	@if [ ! -d $(INST_SRCDIR)/cdk ]; then \
X	   echo "Making directory $(INST_SRCDIR)/cdk ... "; \
X	   mkdir -p $(INST_SRCDIR)/cdk; \
X	fi;
X	@echo "Installing source example files...";
X	@(cd $(EXAMDIR); for i in $(CDKEXAMSRC); do \
X	   echo "	$(INST_SRCDIR)/cdk/$$i" ; \
X	   rm -f $(INST_SRCDIR)/cdk/$$i; \
X	   cp $$i $(INST_SRCDIR)/cdk/$$i; \
X	done)
X	@echo "Installing release documents...";
X	@for i in $(CDKDOCS) ; do \
X	   echo "	$(INST_SRCDIR)/cdk/$$i"; \
X	   rm -f $(INST_SRCDIR)/cdk/$$i; \
X	   cp $$i $(INST_SRCDIR)/cdk/$$i; \
X	done
X
# Install the libraries and header files.
instlib:
X	@echo "Installing Cdk library files...";
X	@if [ -f $(CDKLIB) ] ; then \
X	   echo "	$(INST_LIBDIR)/$(CDKLIB)"; \
X	   cp $(CDKLIB) $(INST_LIBDIR)/$(CDKLIB); \
X	fi
X	@if [ -f $(CDKSLIB) ] ; then \
X	   echo "	$(INST_LIBDIR)/$(CDKSLIB).0"; \
X	   cp $(CDKSLIB).0 $(INST_LIBDIR)/$(CDKSLIB).0; \
X	fi
X	@mkdir -p $(INST_INCDIR);
X	@echo "	$(INST_INCDIR)/cdk.h";
X	@rm -f $(INST_INCDIR)/cdk.h
X	@cp cdk.h $(INST_INCDIR)
X	@echo "	$(INST_INCDIR)/curdefs.h";
X	@rm -f $(INST_INCDIR)/curdefs.h
X	@cp curdefs.h $(INST_INCDIR)
X
examples:
X	@(cd $(EXAMDIR); \
X	make -f Makefile.examples CFLAGS="$(CFLAGS)" CDKEXAMBIN="$(CDKEXAMBIN)" \
X	INCPATH="$(INCPATH)" CC="$(CC)" LIBPATH="$(LIBPATH)" LINKLIB="$(LINKLIB)")
X
cleanexam:
X	@(cd $(EXAMDIR); make CDKEXAMBIN="$(CDKEXAMBIN)" -f Makefile.examples clean)
X
demos:
X	@(cd $(DEMODIR); \
X	make -f Makefile.demos CFLAGS="$(CFLAGS)" CDKDEMOBIN="$(CDKDEMOBIN)" \
X	INCPATH="$(INCPATH)" CC="$(CC)" LIBPATH="$(LIBPATH)" LINKLIB="$(LINKLIB)")
X
cleandemo:
X	@(cd $(DEMODIR); make CDKDEMOBIN="$(CDKDEMOBIN)" -f Makefile.demos clean)
X
clean:
X	rm -f *.o core tst stst $(CDKLIB) $(CDKSLIB).0
X	@$(MAKE) cleanexam
X	@$(MAKE) cleandemo
X
update:
X	@co $(CDKSRC) $(CDKHDR) $(CDKDOCS)
X	@(cd $(EXAMDIR); co $(CDKEXAMSRC))
X	@(cd $(DEMODIR); co $(CDKDEMOSRC) $(CDKDEMOHDR))
X	@(cd man; co $(CDKMAN))
X
release:
X	@$(MAKE) update
X	@rm -rf $(RELDIR) $(RELDIR).tgz
X	@mkdir $(RELDIR)
X	@mkdir $(RELDIR)/exam
X	@mkdir $(RELDIR)/demo
X	@mkdir $(RELDIR)/man
X	@for i in $(CDKSRC) $(CDKDOCS) $(CDKHDR); do \
X	   cp $$i $(RELDIR); \
X	done
X	@for i in $(CDKMAN); do \
X	   cp $(MANDIR)/$$i $(RELDIR)/man ; \
X	done
X	@for i in $(CDKEXAMSRC); do \
X	   cp $(EXAMDIR)/$$i $(RELDIR)/exam ; \
X	done
X	@for i in $(CDKDEMOSRC); do \
X	   cp $(DEMODIR)/$$i $(RELDIR)/demo ; \
X	done
X	@for i in $(CDKDEMOHDR); do \
X	   cp $(DEMODIR)/$$i $(RELDIR)/demo ; \
X	done
X	@chmod +w Makefile
X	@cp Makefile $(RELDIR)
X	@cp $(EXAMDIR)/Makefile.examples $(RELDIR)/exam;
X	@cp $(DEMODIR)/Makefile.demos $(RELDIR)/demo;
X	@tar cvf $(RELDIR).tar $(RELDIR)
X	@gzip $(RELDIR).tar
X	@mv $(RELDIR).tar.gz $(RELDIR).tgz
X	@rm -rf $(RELDIR)
SHAR_EOF
  $shar_touch -am 0709111596 'cdk4.8.0/Makefile' &&
  chmod 0644 'cdk4.8.0/Makefile' ||
  echo 'restore of cdk4.8.0/Makefile failed'
  shar_count="`wc -c < 'cdk4.8.0/Makefile'`"
  test 6858 -eq "$shar_count" ||
    echo "cdk4.8.0/Makefile: original size 6858, current size $shar_count"
  rm -f _sharnew.tmp
fi
rm -f _sharseq.tmp
echo 'You have unpacked the last part'
exit 0
