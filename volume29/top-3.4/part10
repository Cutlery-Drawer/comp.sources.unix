Newsgroups: comp.sources.unix
From: wnl@groupsys.com (William Lefebvre)
Subject: v29i111: top-3.4 - top process display, V3.4, Part10/22
References: <1.841608857.22962@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: wnl@groupsys.com (William Lefebvre)
Posting-Number: Volume 29, Issue 111
Archive-Name: top-3.4/part10

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 10 (of 22)."
# Contents:  top-3.4/machine/m_aix32.c top-3.4/machine/m_dynix.c
#   top-3.4/machine/m_dynix32.c
# Wrapped by lefebvre@acapulco on Fri Aug 30 12:35:50 1996
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'top-3.4/machine/m_aix32.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'top-3.4/machine/m_aix32.c'\"
else
echo shar: Extracting \"'top-3.4/machine/m_aix32.c'\" \(17513 characters\)
sed "s/^X//" >'top-3.4/machine/m_aix32.c' <<'END_OF_FILE'
X/*
X * top - a top users display for Unix
X *
X * SYNOPSIS:  POWER and POWER2 running AIX 3.2.5.0
X *
X * DESCRIPTION:
X * This is the machine-dependent module for AIX 3.2.5.0
X * It is tested on all POWER architectures.
X *
X * TERMCAP: -lcurses
X *
X * CFLAGS: -DORDER
X *
X * AUTHOR:  Erik Deumens <deumens@qtp.ufl.edu>
X */
X
X#include <stdlib.h>
X#include <stdio.h>
X#include <fcntl.h>
X#include <nlist.h>
X#include <sys/sysinfo.h>
X#include <procinfo.h>
X#include <sys/proc.h>
X/*
X#include <sys/var.h>
X*/
X#include <pwd.h>
X#include "top.h"
X#include "machine.h"
X
X
X#define PROCRESS(p) (((p)->u.ui_trss + (p)->u.ui_drss)*4)
X#define PROCSIZE(p) (((p)->u.ui_tsize/1024+(p)->u.ui_dvm)*4)
X#define PROCTIME(pi) (pi->u.ui_ru.ru_utime.tv_sec + pi->u.ui_ru.ru_stime.tv_sec)
X
X/*
X * structure procsinfo exists in AIX 4.1 and is constructed here by combining
X * procinfo and userinfo which exists in AIX 3.2 also.
X */
Xstruct procsinfo {
X  struct procinfo p;
X  struct userinfo u;
X};
X
X/*
X * structure definition taken from 'monitor' by Jussi Maki (jmaki@hut.fi)
X */
Xstruct vmker {
X    uint n0,n1,n2,n3,n4,n5,n6,n7,n8;
X    uint totalmem;
X    uint badmem; /* this is used in RS/6000 model 220 */
X    uint freemem;
X    uint n12;
X    uint numperm;   /* this seems to keep other than text and data segment 
X                       usage; name taken from /usr/lpp/bos/samples/vmtune.c */
X    uint totalvmem,freevmem;
X    uint n15, n16, n17, n18, n19;
X};
X
X
X#define KMEM "/dev/kmem"
X
X/* Indices in the nlist array */
X#define X_AVENRUN       0
X#define X_SYSINFO       1
X#define X_VMKER         2
X#define X_PROC          3
X#define X_V             4
X
Xstatic struct nlist nlst[] = {
X    { "avenrun", 0, 0, 0, 0, 0 }, /* 0 */
X    { "sysinfo", 0, 0, 0, 0, 0 }, /* 1 */
X    { "vmker",   0, 0, 0, 0, 0 }, /* 2 */
X    { "proc",    0, 0, 0, 0, 0 }, /* 3 */
X    { "v",       0, 0, 0, 0, 0 }, /* 4 */
X    {  NULL, 0, 0, 0, 0, 0 }
X};
X
X
X/* get_process_info returns handle. definition is here */
Xstruct handle
X{
X	struct procsinfo **next_proc;
X	int remaining;
X};
X
X/*
X *  These definitions control the format of the per-process area
X */
Xstatic char header[] =
X  "  PID X        PRI NICE   SIZE   RES STATE   TIME   WCPU    CPU COMMAND";
X/* 0123456   -- field to fill in starts at header+6 */
X#define UNAME_START 6
X
X#define Proc_format \
X	"%5d %-8.8s %3d %4d %5d%c %4d%c %-5s %6s %5.2f%% %5.2f%% %.14s%s"
X
X
X/* these are for detailing the process states */
Xint process_states[9];
Xchar *procstatenames[] = {
X    " none, ", " sleeping, ", " state2, ", " runnable, ",
X    " idle, ", " zombie, ", " stopped, ", " running, ", " swapped, ",
X    NULL
X};
X
X
X/* these are for detailing the cpu states */
Xint cpu_states[4];
Xchar *cpustatenames[] = {
X    "idle", "user", "kernel", "wait",
X    NULL
X};
X
X/* these are for detailing the memory statistics */
Xint memory_stats[7];
Xchar *memorynames[] = {
X    "M Total. Real: ", "M, ", "M Free, ", "M Buffers. Virtual: ", "M, ", "M Free, ", NULL
X};
X#define M_TOTAL	   0
X#define M_REAL     1
X#define M_REALFREE 2
X#define M_BUFFERS  3
X#define M_VIRTUAL  4
X#define M_VIRTFREE 5
X
Xchar *state_abbrev[] = {
X    "", "sleep", "", "run", "sleep", "zomb", "stop", "run", "swap"
X};
X
X/* sorting orders. first is default */
Xchar *ordernames[] = {
X    "cpu", "size", "res", "time", "pri", NULL
X};
X
X/* compare routines */
Xint compare_cpu(), compare_size(), compare_res(), compare_time(), 
X    compare_prio();
X
Xint (*proc_compares[])() = {
X    compare_cpu,
X    compare_size,
X    compare_res,
X    compare_time,
X    compare_prio,
X    NULL
X};
X
X/* useful externals */
Xextern int errno;
Xextern char *sys_errlist[];
Xlong lseek();
Xlong time();
Xlong percentages();
X
X
X/* useful globals */
Xint kmem;			/* file descriptor */
X
X/* offsets in kernel */
Xstatic unsigned long avenrun_offset;
Xstatic unsigned long sysinfo_offset;
Xstatic unsigned long vmker_offset;
Xstatic unsigned long proc_offset;
Xstatic unsigned long v_offset;
X
X/* used for calculating cpu state percentages */
Xstatic long cp_time[CPU_NTIMES];
Xstatic long cp_old[CPU_NTIMES];
Xstatic long cp_diff[CPU_NTIMES];
X
X/* the runqueue length is a cumulative value. keep old value */
Xlong old_runque;
X
X/* process info */
X/*struct var v_info;*/		/* to determine nprocs */
Xint nprocs;			/* maximum nr of procs in proctab */
Xint ncpus;			/* nr of cpus installed */
X
Xint ptsize;			/* size of process table in bytes */
Xstruct proc *p_proc;		/* a copy of the process table */
Xstruct procsinfo *p_info;	/* needed for vm and ru info */
Xstruct procinfo *p_infop;       /* return array for getproc call */
Xstruct procsinfo **pref;	/* processes selected for display */
Xint pref_len;			/* number of processes selected */
X
X/* needed to calculate WCPU */
Xunsigned long curtime;
X
X
X/*
X * Initialize globals, get kernel offsets and stuff...
X */
Xmachine_init(statics)
X    struct statics *statics;
X{
X    if ((kmem = open(KMEM, O_RDONLY)) == -1) {
X	perror(KMEM);
X	return -1;
X    }
X
X    /* get kernel symbol offsets */
X    if (knlist(nlst, 5, sizeof(struct nlist)) != 0) {
X	perror("knlist");
X	return -1;
X    }
X    avenrun_offset = nlst[X_AVENRUN].n_value;
X    sysinfo_offset = nlst[X_SYSINFO].n_value;
X    vmker_offset   = nlst[X_VMKER].n_value;
X    proc_offset    = nlst[X_PROC].n_value;
X    v_offset       = nlst[X_V].n_value;
X
X    ncpus = 1;                 /* number of cpus, AIX 3.2 has only 1 CPU */
X    nprocs = PROCMASK(NPROC);
X
X    ptsize = nprocs * sizeof (struct proc);
X    p_proc = (struct proc *)malloc(ptsize);
X    p_info = (struct procsinfo *)malloc(nprocs * sizeof (struct procsinfo));
X    p_infop = (struct procinfo *)malloc(nprocs * sizeof (struct procinfo));
X    pref = (struct procsinfo **)malloc(nprocs * sizeof (struct procsinfo *));
X
X    if (!p_proc || !p_info || !p_infop || !pref) {
X	fprintf(stderr, "top: not enough memory\n");
X	return -1;
X    }
X
X    statics->procstate_names = procstatenames;
X    statics->cpustate_names = cpustatenames;
X    statics->memory_names = memorynames;
X    statics->order_names = ordernames;
X
X    return(0);
X}
X
X
X
Xchar *format_header(uname_field)
X    register char *uname_field;
X{
X    register char *ptr;
X
X    ptr = header + UNAME_START;
X    while (*uname_field != '\0')
X    {
X	*ptr++ = *uname_field++;
X    }
X
X    return(header);
X}
X
X
X
X
Xget_system_info(si)
X    struct system_info *si;
X{
X    int load_avg[3];
X    struct sysinfo s_info;
X    struct vmker m_info;
X    int i;
X    double total = 0;
X
X    /* get the load avarage array */
X    getkval(avenrun_offset, (caddr_t)load_avg, sizeof load_avg, "avenrun");
X
X    /* get the sysinfo structure */
X    getkval(sysinfo_offset, (caddr_t)&s_info, sizeof s_info, "sysinfo");
X
X    /* get vmker structure */
X    getkval(vmker_offset, (caddr_t)&m_info, sizeof m_info, "vmker");
X
X    /* convert load avarages to doubles */
X    for (i = 0; i < 3; i++)
X	si->load_avg[i] = (double)load_avg[i]/65536.0;
X
X    /* calculate cpu state in percentages */
X    for (i = 0; i < CPU_NTIMES; i++) {
X	cp_old[i] = cp_time[i];
X	cp_time[i] = s_info.cpu[i];
X	cp_diff[i] = cp_time[i] - cp_old[i];
X	total += cp_diff[i];
X    }
X
X    total = total/1000.0;  /* top itself will correct this */
X    for (i = 0; i < CPU_NTIMES; i++) {
X        cpu_states[i] = cp_diff[i] / total;
X    }
X
X    /* calculate memory statistics, scale 4K pages to megabytes */
X#define PAGE_TO_MB(a) ((a)*4/1024)
X    memory_stats[M_TOTAL]    = PAGE_TO_MB(m_info.totalmem+m_info.totalvmem);
X    memory_stats[M_REAL]     = PAGE_TO_MB(m_info.totalmem);
X    memory_stats[M_REALFREE] = PAGE_TO_MB(m_info.freemem);
X    memory_stats[M_BUFFERS]  = PAGE_TO_MB(m_info.numperm);
X    memory_stats[M_VIRTUAL]  = PAGE_TO_MB(m_info.totalvmem);
X    memory_stats[M_VIRTFREE] = PAGE_TO_MB(m_info.freevmem);
X
X    /* runnable processes */
X    process_states[0] = s_info.runque - old_runque;
X    old_runque = s_info.runque;
X
X    si->cpustates = cpu_states;
X    si->memory = memory_stats;
X}
X
Xstatic struct handle handle;
X
Xcaddr_t get_process_info(si, sel, compare)
X    struct system_info *si;
X    struct process_select *sel;
X    int (*compare)();
X{
X    int i, nproc, st;
X    int active_procs = 0, total_procs = 0;
X    struct procsinfo *pp, **p_pref = pref;
X    unsigned long pctcpu;
X    pid_t procsindex = 0;
X    struct proc *p;
X
X    si->procstates = process_states;
X
X    curtime = time(0);
X
X    /* get the procinfo structures of all running processes */
X    nproc = getproc(p_infop, nprocs, sizeof (struct procinfo));
X    if (nproc < 0) {
X	perror("getproc");
X	exit(1);
X    }
X    for (i=0; i<nproc; i++) {
X      st = getuser(&p_infop[i],sizeof(struct procinfo),
X		   &p_info[i].u,sizeof(struct userinfo));
X      if (st==-1) p_infop[i].pi_stat = SZOMB; 
X      memcpy (&p_info[i].p,&p_infop[i],sizeof(struct procinfo));
X    }
X
X    /* the swapper has no cmd-line attached */
X    strcpy(p_info[0].u.ui_comm, "swapper");
X    
X    /* get proc table */
X    getkval(proc_offset, (caddr_t)p_proc, ptsize, "proc");
X
X    memset(process_states, 0, sizeof process_states);
X
X    /* build a list of pointers to processes to show. walk through the
X     * list of procsinfo structures instead of the proc table since the
X     * mapping of procsinfo -> proctable is easy, the other way around
X     * is cumbersome
X     */
X    for (pp = p_info, i = 0; i < nproc; pp++, i++) {
X
X	p = &p_proc[PROCMASK(pp->p.pi_pid)];
X
X        if (pp->p.pi_stat && (sel->system || ((pp->p.pi_flag & SKPROC) == 0))) {
X	    total_procs++;
X	    process_states[p->p_stat]++;
X	    if ( (pp->p.pi_stat != SZOMB) &&
X		(sel->idle || p->p_cpticks != 0 /*|| (p->p_stat == SACTIVE)*/)
X		&& (sel->uid == -1 || pp->p.pi_uid == (uid_t)sel->uid)) {
X                *p_pref++ = pp;
X		active_procs++;
X	    }
X	}
X    }   
X
X    /* the pref array now holds pointers to the procsinfo structures in
X     * the p_info array that were selected for display
X     */
X
X    /* sort if requested */
X    if (compare != NULL)
X	qsort((char *)pref, active_procs, sizeof (struct procsinfo *), 
X	      compare);
X    
X    si->last_pid = -1;		/* no way to figure out last used pid */
X    si->p_total = total_procs;
X    si->p_active = pref_len = active_procs;
X
X    handle.next_proc = pref;
X    handle.remaining = active_procs;
X
X    return((caddr_t)&handle);
X}
X
Xchar fmt[128];		/* static area where result is built */
X
X/* define what weighted cpu is. use definition of %CPU from 'man ps(1)' */
X#define weighted_cpu(pp) (PROCTIME(pp) == 0 ? 0.0 : \
X                        (((PROCTIME(pp)*100.0)/(curtime-pi->u.ui_start)/ncpus)))
X#define double_pctcpu(p) ((double)p->p_pctcpu/(double)FLT_MODULO)
X
Xchar *format_next_process(handle, get_userid)
X    caddr_t handle;
X    char *(*get_userid)();
X{
X    register struct handle *hp;
X    register struct procsinfo *pi;
X    register struct proc *p;
X    char *uname;
X    long cpu_time;
X    int proc_size, proc_ress;
X    char size_unit = 'K';
X    char ress_unit = 'K';
X
X    hp = (struct handle *)handle;
X    if (hp->remaining == 0) {	/* safe guard */
X	fmt[0] = '\0';
X	return fmt;
X    }
X    pi = *(hp->next_proc++);
X    hp->remaining--;
X    p = &p_proc[PROCMASK(pi->p.pi_pid)];
X
X    cpu_time = PROCTIME(pi);
X
X    /* we disply sizes up to 10M in KiloBytes, beyond 10M in MegaBytes */
X    if ((proc_size = (pi->u.ui_tsize/1024+pi->u.ui_dvm)*4) > 10240) {
X	proc_size /= 1024;
X	size_unit = 'M';
X    }
X    if ((proc_ress = (pi->u.ui_trss + pi->u.ui_drss)*4) > 10240) {
X	proc_ress /= 1024;
X	ress_unit = 'M';
X    }
X
X    sprintf(fmt, Proc_format ,
X            pi->p.pi_pid,					  /* PID */
X            (*get_userid)(pi->u.ui_uid),			  /* login name */
X            getpriority(PRIO_PROCESS, pi->p.pi_pid),
X	    EXTRACT_NICE(p),				  /* fixed or vari */
X            proc_size,					  /* size */
X            size_unit,					  /* K or M */
X            proc_ress,					  /* resident */
X            ress_unit,					  /* K or M */
X            state_abbrev[p->p_stat],			  /* process state */
X            format_time(cpu_time),			  /* time used */
X	    weighted_cpu(pi),	                          /* WCPU */
X	    100.0 * double_pctcpu(p),                     /* CPU */
X            printable(pi->u.ui_comm),                       /* COMM */
X	    (pi->p.pi_flag & SKPROC) == 0 ? "" : " (sys)"  /* kernel process? */
X	    );
X    return(fmt);
X}
X
X
X/*
X *  getkval(offset, ptr, size, refstr) - get a value out of the kernel.
X *	"offset" is the byte offset into the kernel for the desired value,
X *  	"ptr" points to a buffer into which the value is retrieved,
X *  	"size" is the size of the buffer (and the object to retrieve),
X *  	"refstr" is a reference string used when printing error meessages,
X *	    if "refstr" starts with a '!', then a failure on read will not
X *  	    be fatal (this may seem like a silly way to do things, but I
X *  	    really didn't want the overhead of another argument).
X *  	
X */
Xgetkval(offset, ptr, size, refstr)
X    unsigned long offset;
X    caddr_t ptr;
X    int size;
X    char *refstr;
X{
X    int upper_2gb = 0;
X
X    /* reads above 2Gb are done by seeking to offset%2Gb, and supplying
X     * 1 (opposed to 0) as fourth parameter to readx (see 'man kmem')
X     */
X    if (offset > 1<<31) {
X	upper_2gb = 1;
X	offset &= 0x7fffffff;
X    }
X
X    if (lseek(kmem, offset, SEEK_SET) != offset) {
X	fprintf(stderr, "top: lseek failed\n");
X	exit(-1);
X    }
X
X    if (readx(kmem, ptr, size, upper_2gb) != size) {
X	if (*refstr == '!')
X	    return 0;
X	else {
X	    fprintf(stderr, "top: kvm_read for %s: %s\n", refstr,
X		    sys_errlist[errno]);
X	    exit(-1);
X	}
X    }
X
X    return 1 ;
X}
X    
X/* comparison routine for qsort */
X/*
X * The following code is taken from the solaris module and adjusted
X * for AIX -- JV .
X */
X
X#define ORDERKEY_PCTCPU \
X           if (lresult = p2->p_pctcpu - p1->p_pctcpu, \
X               (result = lresult > 0 ? 1 : lresult < 0 ? -1 : 0) == 0)
X
X#define ORDERKEY_CPTICKS \
X           if ((result = PROCTIME(pi2) - PROCTIME(pi1)) == 0)
X
X
X#define ORDERKEY_STATE \
X           if ((result = sorted_state[p2->p_stat]  \
X                         - sorted_state[p1->p_stat])  == 0)
X
X/* Nice values directly reflect the process' priority, and are always >0 ;-) */
X#define ORDERKEY_PRIO \
X	   if ((result = EXTRACT_NICE(p1) - EXTRACT_NICE(p2)) == 0) 
X
X#define ORDERKEY_RSSIZE \
X           if ((result = PROCRESS(pi2) - PROCRESS(pi1)) == 0)
X#define ORDERKEY_MEM \
X           if ((result = PROCSIZE(pi2) - PROCSIZE(pi1)) == 0)
X
Xstatic unsigned char sorted_state[] =
X{
X    0, /* not used */
X    0,
X    0,
X    0,
X    3,                          /* sleep */
X    1,				/* zombie */
X    4,				/* stop */
X    6,				/* run */
X    2,				/* swap */
X};
X
X/* compare_cpu - the comparison function for sorting by cpu percentage */
X
Xint
Xcompare_cpu(ppi1, ppi2)
X    struct procsinfo **ppi1;
X    struct procsinfo **ppi2;
X{
X    register struct procsinfo *pi1 = *ppi1, *pi2 = *ppi2;
X    register struct proc *p1;
X    register struct proc *p2;
X    register int result;
X    register long lresult;
X
X    p1 = &p_proc[PROCMASK(pi1->p.pi_pid)];
X    p2 = &p_proc[PROCMASK(pi2->p.pi_pid)];
X
X    ORDERKEY_PCTCPU
X    ORDERKEY_CPTICKS
X    ORDERKEY_STATE
X    ORDERKEY_PRIO
X    ORDERKEY_RSSIZE
X    ORDERKEY_MEM
X    ;
X
X    return result;
X}
X    
X
X/* compare_size - the comparison function for sorting by total memory usage */
X
Xint
Xcompare_size(ppi1, ppi2)
X    struct procsinfo **ppi1;
X    struct procsinfo **ppi2;
X{
X    register struct procsinfo *pi1 = *ppi1, *pi2 = *ppi2;
X    register struct proc *p1;
X    register struct proc *p2;
X    register int result;
X    register long lresult;
X
X    p1 = &p_proc[PROCMASK(pi1->p.pi_pid)];
X    p2 = &p_proc[PROCMASK(pi2->p.pi_pid)];
X
X    ORDERKEY_MEM
X    ORDERKEY_RSSIZE
X    ORDERKEY_PCTCPU
X    ORDERKEY_CPTICKS
X    ORDERKEY_STATE
X    ORDERKEY_PRIO
X    ;
X
X    return result;
X}
X    
X
X/* compare_res - the comparison function for sorting by resident set size */
X
Xint
Xcompare_res(ppi1, ppi2)
X    struct procsinfo **ppi1;
X    struct procsinfo **ppi2;
X{
X    register struct procsinfo *pi1 = *ppi1, *pi2 = *ppi2;
X    register struct proc *p1;
X    register struct proc *p2;
X    register int result;
X    register long lresult;
X
X    p1 = &p_proc[PROCMASK(pi1->p.pi_pid)];
X    p2 = &p_proc[PROCMASK(pi2->p.pi_pid)];
X
X    ORDERKEY_RSSIZE
X    ORDERKEY_MEM
X    ORDERKEY_PCTCPU
X    ORDERKEY_CPTICKS
X    ORDERKEY_STATE
X    ORDERKEY_PRIO
X    ;
X
X    return result;
X}
X    
X
X/* compare_time - the comparison function for sorting by total cpu time */
X
Xint
Xcompare_time(ppi1, ppi2)
X    struct procsinfo **ppi1;
X    struct procsinfo **ppi2;
X{
X    register struct procsinfo *pi1 = *ppi1, *pi2 = *ppi2;
X    register struct proc *p1;
X    register struct proc *p2;
X    register int result;
X    register long lresult;
X
X    p1 = &p_proc[PROCMASK(pi1->p.pi_pid)];
X    p2 = &p_proc[PROCMASK(pi2->p.pi_pid)];
X
X    ORDERKEY_CPTICKS
X    ORDERKEY_PCTCPU
X    ORDERKEY_STATE
X    ORDERKEY_PRIO
X    ORDERKEY_MEM
X    ORDERKEY_RSSIZE
X    ;
X
X    return result;
X}
X    
X
X/* compare_prio - the comparison function for sorting by cpu percentage */
X
Xint
Xcompare_prio(ppi1, ppi2)
X    struct procsinfo **ppi1;
X    struct procsinfo **ppi2;
X{
X    register struct procsinfo *pi1 = *ppi1, *pi2 = *ppi2;
X    register struct proc *p1;
X    register struct proc *p2;
X    register int result;
X    register long lresult;
X
X    p1 = &p_proc[PROCMASK(pi1->p.pi_pid)];
X    p2 = &p_proc[PROCMASK(pi2->p.pi_pid)];
X
X    ORDERKEY_PRIO
X    ORDERKEY_PCTCPU
X    ORDERKEY_CPTICKS
X    ORDERKEY_STATE
X    ORDERKEY_RSSIZE
X    ORDERKEY_MEM
X    ;
X
X    return result;
X}
X    
X
Xproc_owner(pid)
Xint pid;
X{
X   int uid;
X   register struct procsinfo **prefp = pref;
X   register int cnt = pref_len;
X
X   while (--cnt >= 0) {
X       if ((*prefp)->p.pi_pid == pid)
X	   return (*prefp)->p.pi_uid;
X       prefp++;
X   }
X   
X   return(-1);
X}
X
END_OF_FILE
if test 17513 -ne `wc -c <'top-3.4/machine/m_aix32.c'`; then
    echo shar: \"'top-3.4/machine/m_aix32.c'\" unpacked with wrong size!
fi
# end of 'top-3.4/machine/m_aix32.c'
fi
if test -f 'top-3.4/machine/m_dynix.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'top-3.4/machine/m_dynix.c'\"
else
echo shar: Extracting \"'top-3.4/machine/m_dynix.c'\" \(17512 characters\)
sed "s/^X//" >'top-3.4/machine/m_dynix.c' <<'END_OF_FILE'
X/*
X * top - a top users display for Unix
X *
X * SYNOPSIS:  any Sequent Running Dynix 3.0.x
X *
X * DESCRIPTION:
X * This is the machine-dependent module for Sequent Dynix 3
X * This makes top work on the following systems:
X *	Sequent Semmetry, Dynix 3.0.12
X *	Sequent Balance,  Dynix 3.0.4
X *
X * AUTHOR:  Daniel Trinkle <trinkle@cs.purdue.edu>
X */
X
X#include <sys/types.h>
X#include <sys/signal.h>
X#include <sys/param.h>
X
X#include <stdio.h>
X#include <nlist.h>
X#include <math.h>
X#include <sys/dir.h>
X#include <sys/user.h>
X#include <sys/proc.h>
X#include <sys/dk.h>
X#include <sys/vm.h>
X#include <machine/pte.h>
X#include <machine/plocal.h>
X#include <machine/engine.h>
X#include <sys/file.h>
X
X#include "top.h"
X#include "machine.h"
X#include "utils.h"
X
X#ifndef uid_t
X/* some early versions of DYNIX don't have uid_t */
X#define uid_t int
X#endif
X
Xstruct engine *engine;
Xstruct engine *pengine;
Xstruct plocal **pplocal;
Xint Nengine;
X
X/* get_process_info passes back a handle.  This is what it looks like: */
X
Xstruct handle
X{
X    struct proc **next_proc;	/* points to next valid proc pointer */
X    int remaining;		/* number of pointers remaining */
X};
X
X/* declarations for load_avg */
Xtypedef long load_avg;
Xtypedef long pctcpu;
X#define loaddouble(la) ((double)(la) / FSCALE)
X#define intload(i) ((int)((i) * FSCALE))
X#define pctdouble(p) ((double)(p) / FSCALE)
X
X/* define what weighted cpu is.  */
X#define weighted_cpu(pct, pp) ((pp)->p_time == 0 ? 0.0 : \
X			 ((pct) / (1.0 - exp((pp)->p_time * logcpu))))
X
X/* what we consider to be process size: */
X#define PROCSIZE(pp) ((pp)->p_dsize + (pp)->p_ssize)
X
X/* definitions for indices in the nlist array */
X#define X_AVENRUN	0
X#define X_CCPU		1
X#define X_MPID		2
X#define X_NPROC		3
X#define X_PROC		4
X#define X_TOTAL		5
X#define X_ENGINE	6
X#define X_NENGINE	7
X
Xstatic struct nlist nlst[] = {
X    { "_avenrun" },		/* 0 */
X    { "_ccpu" },		/* 1 */
X    { "_mpid" },		/* 2 */
X    { "_nproc" },		/* 3 */
X    { "_proc" },		/* 4 */
X    { "_total" },		/* 5 */
X    { "_engine" },		/* 6 */
X    { "_Nengine" },		/* 7 */
X    { 0 }
X};
X
X/*
X *  These definitions control the format of the per-process area
X */
X
Xstatic char header[] =
X  "  PID X        PRI NICE  SIZE   RES STATE   TIME   WCPU    CPU COMMAND";
X/* 0123456   -- field to fill in starts at header+6 */
X#define UNAME_START 6
X
X#define Proc_format \
X	"%5d %-8.8s %3d %4d %5s %5s %-5s %6s %5.2f%% %5.2f%% %.16s"
X
X
X/* process state names for the "STATE" column of the display */
X/* the extra nulls in the string "run" are for adding a slash and
X   the processor number when needed */
X
Xchar *state_abbrev[] =
X{
X    "", "sleep", "WAIT", "run", "start", "zomb", "stop", "RUN"
X};
X
X/* values that we stash away in _init and use in later routines */
X
Xstatic double logcpu;
X
X#define VMUNIX "/dynix"
X#define KMEM "/dev/kmem"
X#define MEM "/dev/mem"
X
Xstatic int kmem = -1;
Xstatic int mem = -1;
X
Xstruct vmtotal total;
X
X/* these are retrieved from the kernel in _init */
X
Xstatic unsigned long proc;
Xstatic          int  nproc;
Xstatic load_avg  ccpu;
X
X/* these are offsets obtained via nlist and used in the get_ functions */
X
Xstatic unsigned long mpid_offset;
Xstatic unsigned long avenrun_offset;
Xstatic unsigned long total_offset;
X
X/* these are for calculating cpu state percentages */
X
Xstatic long cp_time[CPUSTATES];
Xstatic long cp_old[CPUSTATES];
Xstatic long cp_diff[CPUSTATES];
X
X/* these are for detailing the process states */
X
Xint process_states[8];
Xchar *procstatenames[] = {
X    "", " sleeping, ", " ABANDONED, ", " runable, ", " starting, ",
X    " zombie, ", " stopped, ", " running, ",
X    NULL
X};
X
X/* these are for detailing the cpu states */
X
Xint cpu_states[CPUSTATES];
Xchar *cpustatenames[] = {
X    "user", "nice", "system", "idle",
X    NULL
X};
X
X/* these are for detailing the memory statistics */
X
Xint memory_stats[5];
Xchar *memorynames[] = {
X    "K (", "K) real, ", "K (", "K) virtual, ", "K free", NULL
X};
X
X/* these are for keeping track of the proc array */
X
Xstatic int bytes;
Xstatic int pref_len;
Xstatic struct proc *pbase;
Xstatic struct proc **pref;
X
X#define pagetok(size)	((size) << (PGSHIFT - LOG1024))
X
X/* useful externals */
Xextern int errno;
Xextern char *sys_errlist[];
X
Xlong lseek();
X
Xmachine_init(statics)
X
Xstruct statics *statics;
X
X{
X    register int i;
X
X    /* open kernel memory */
X    if ((kmem = open(KMEM, 0)) < 0)
X    {
X	perror(KMEM);
X	exit(20);
X    }
X    if ((mem = open(MEM, 0)) < 0)
X    {
X	perror(MEM);
X	exit(21);
X    }
X
X    /* get the list of symbols we want to access in the kernel */
X    if ((i = nlist(VMUNIX, nlst)) < 0)
X    {
X	fprintf(stderr, "top: nlist failed\n");
X	return(-1);
X    }
X
X    /* make sure they were all found */
X    if (i > 0 && check_nlist(nlst) > 0)
X    {
X	return(-1);
X    }
X
X    /* get the symbol values out of kmem */
X    (void) getkval(nlst[X_PROC].n_value,   (int *)(&proc),	sizeof(proc),
X	    nlst[X_PROC].n_name);
X    (void) getkval(nlst[X_NPROC].n_value,  &nproc,		sizeof(nproc),
X	    nlst[X_NPROC].n_name);
X    (void) getkval(nlst[X_CCPU].n_value,   (int *)(&ccpu),	sizeof(ccpu),
X	    nlst[X_CCPU].n_name);
X    (void) getkval(nlst[X_NENGINE].n_value,  &Nengine,  sizeof(int),
X	    nlst[X_NENGINE].n_name);
X    (void) getkval(nlst[X_ENGINE].n_value,  &pengine,  sizeof(struct engine *),
X	    nlst[X_ENGINE].n_name);
X
X    engine = (struct engine *)calloc(Nengine, sizeof(struct engine));
X    if (engine == NULL)
X    {
X	fprintf(stderr, "Cannot allocate memory for engine structure\n");
X	exit(2);
X    }
X    (void) getkval(pengine,  &engine[0],  Nengine * sizeof(struct engine),
X	    "engine array");
X    pplocal = (struct plocal **)calloc(Nengine, sizeof(struct plocal *));
X    if (pplocal == NULL)
X    {
X	fprintf(stderr, "Cannot allocate memory for plocal structures\n");
X	exit(2);
X    }
X    for (i = 0; i < Nengine; i++) {
X	pplocal[i] = (struct plocal *)&engine[i].e_local->pp_local[0][0];
X    }
X
X    /* stash away certain offsets for later use */
X    mpid_offset = nlst[X_MPID].n_value;
X    avenrun_offset = nlst[X_AVENRUN].n_value;
X    total_offset = nlst[X_TOTAL].n_value;
X
X    /* this is used in calculating WCPU -- calculate it ahead of time */
X    logcpu = log(loaddouble(ccpu));
X
X    /* allocate space for proc structure array and array of pointers */
X    bytes = nproc * sizeof(struct proc);
X    pbase = (struct proc *)malloc(bytes);
X    pref  = (struct proc **)malloc(nproc * sizeof(struct proc *));
X
X    /* Just in case ... */
X    if (pbase == (struct proc *)NULL || pref == (struct proc **)NULL)
X    {
X	fprintf(stderr, "top: can't allocate sufficient memory\n");
X	return(-1);
X    }
X
X    /* fill in the statics information */
X    statics->procstate_names = procstatenames;
X    statics->cpustate_names = cpustatenames;
X    statics->memory_names = memorynames;
X
X    /* all done! */
X    return(0);
X}
X
Xchar *format_header(uname_field)
X
Xregister char *uname_field;
X
X{
X    register char *ptr;
X
X    ptr = header + UNAME_START;
X    while (*uname_field != '\0')
X    {
X	*ptr++ = *uname_field++;
X    }
X
X    return(header);
X}
X
Xget_system_info(si)
X
Xstruct system_info *si;
X
X{
X    load_avg avenrun[3];
X    struct plocal plocal;
X    register int i, j;
X
X    /* get the cp_time array */
X    for (j = 0; j < CPUSTATES; j++)
X	cp_time[j] = 0L;
X    for (i = 0; i < Nengine; i++) {
X	(void) getkval(pplocal[i], &plocal, sizeof(struct plocal), "plocal array");
X	for (j = 0; j < CPUSTATES; j++)
X	    cp_time[j] += (long)plocal.cnt.v_time[j];
X    }
X
X    /* get load average array */
X    (void) getkval(avenrun_offset, (int *)avenrun, sizeof(avenrun),
X		   "_avenrun");
X
X    /* get mpid -- process id of last process */
X    (void) getkval(mpid_offset, &(si->last_pid), sizeof(si->last_pid),
X		   "_mpid");
X
X    /* convert load averages to doubles */
X    {
X	register int i;
X	register double *infoloadp;
X	register load_avg *sysloadp;
X
X	infoloadp = si->load_avg;
X	sysloadp = avenrun;
X	for (i = 0; i < 3; i++)
X	{
X	    *infoloadp++ = loaddouble(*sysloadp++);
X	}
X    }
X
X    /* convert cp_time counts to percentages */
X    (void) percentages(CPUSTATES, cpu_states, cp_time, cp_old, cp_diff);
X
X    /* get total -- systemwide main memory usage structure */
X    (void) getkval(total_offset, (int *)(&total), sizeof(total),
X		   "_total");
X    /* convert memory stats to Kbytes */
X    memory_stats[0] = pagetok(total.t_rm);
X    memory_stats[1] = pagetok(total.t_arm);
X    memory_stats[2] = pagetok(total.t_vm);
X    memory_stats[3] = pagetok(total.t_avm);
X    memory_stats[4] = pagetok(total.t_free);
X
X    /* set arrays and strings */
X    si->cpustates = cpu_states;
X    si->memory = memory_stats;
X}
X
Xstatic struct handle handle;
X
Xcaddr_t get_process_info(si, sel, compare)
X
Xstruct system_info *si;
Xstruct process_select *sel;
Xint (*compare)();
X
X{
X    register int i;
X    register int total_procs;
X    register int active_procs;
X    register struct proc **prefp;
X    register struct proc *pp;
X
X    /* these are copied out of sel for speed */
X    int show_idle;
X    int show_system;
X    int show_uid;
X
X    /* read all the proc structures in one fell swoop */
X    (void) getkval(proc, (int *)pbase, bytes, "proc array");
X
X    /* get a pointer to the states summary array */
X    si->procstates = process_states;
X
X    /* set up flags which define what we are going to select */
X    show_idle = sel->idle;
X    show_system = sel->system;
X    show_uid = sel->uid != -1;
X
X    /* count up process states and get pointers to interesting procs */
X    total_procs = 0;
X    active_procs = 0;
X    bzero((char *)process_states, sizeof(process_states));
X    prefp = pref;
X    for (pp = pbase, i = 0; i < nproc; pp++, i++)
X    {
X	/*
X	 *  Place pointers to each valid proc structure in pref[].
X	 *  Process slots that are actually in use have a non-zero
X	 *  status field.  Processes with SSYS set are system
X	 *  processes---these get ignored unless show_sysprocs is set.
X	 */
X	if (pp->p_stat != 0 &&
X	    (show_system || ((pp->p_flag & SSYS) == 0)))
X	{
X	    total_procs++;
X	    process_states[pp->p_stat]++;
X	    if ((pp->p_stat != SZOMB) &&
X		(show_idle || (pp->p_pctcpu != 0) || (pp->p_stat == SRUN)) &&
X		(!show_uid || pp->p_uid == (uid_t)sel->uid))
X	    {
X		*prefp++ = pp;
X		active_procs++;
X	    }
X	}
X    }
X
X    /* if requested, sort the "interesting" processes */
X    if (compare != NULL)
X    {
X	qsort((char *)pref, active_procs, sizeof(struct proc *), compare);
X    }
X
X    /* remember active and total counts */
X    si->p_total = total_procs;
X    si->p_active = pref_len = active_procs;
X
X    /* pass back a handle */
X    handle.next_proc = pref;
X    handle.remaining = active_procs;
X    return((caddr_t)&handle);
X}
X
Xchar fmt[MAX_COLS];		/* static area where result is built */
X
Xchar *format_next_process(handle, get_userid)
X
Xcaddr_t handle;
Xchar *(*get_userid)();
X
X{
X    register struct proc *pp;
X    register long cputime;
X    register double pct;
X    struct user u;
X    struct handle *hp;
X
X    /* find and remember the next proc structure */
X    hp = (struct handle *)handle;
X    pp = *(hp->next_proc++);
X    hp->remaining--;
X    
X
X    /* get the process's user struct and set cputime */
X    if (getu(pp, &u) == -1)
X    {
X	(void) strcpy(u.u_comm, "<swapped>");
X	cputime = 0;
X    }
X    else
X    {
X	/* set u_comm for system processes */
X	if (u.u_comm[0] == '\0')
X	{
X	    if (pp->p_pid == 0)
X	    {
X		(void) strcpy(u.u_comm, "Swapper");
X	    }
X	    else if (pp->p_pid == 2)
X	    {
X		(void) strcpy(u.u_comm, "Pager");
X	    }
X	}
X
X	cputime = u.u_ru.ru_utime.tv_sec + u.u_ru.ru_stime.tv_sec;
X    }
X
X    /* calculate the base for cpu percentages */
X    pct = pctdouble(pp->p_pctcpu);
X
X    /* format this entry */
X    sprintf(fmt,
X	    Proc_format,
X	    pp->p_pid,
X	    (*get_userid)(pp->p_uid),
X	    pp->p_pri - PZERO,
X	    pp->p_nice - NZERO,
X	    format_k(pagetok(PROCSIZE(pp))),
X	    format_k(pagetok(pp->p_rssize)),
X	    state_abbrev[pp->p_stat],
X	    format_time(cputime),
X	    100.0 * weighted_cpu(pct, pp),
X	    100.0 * pct,
X	    printable(u.u_comm));
X
X    /* return the result */
X    return(fmt);
X}
X
X/*
X *  getu(p, u) - get the user structure for the process whose proc structure
X *	is pointed to by p.  The user structure is put in the buffer pointed
X *	to by u.  Return 0 if successful, -1 on failure (such as the process
X *	being swapped out).
X */
X
Xgetu(p, u)
X
Xregister struct proc *p;
Xstruct user *u;
X
X{
X    struct pte uptes[UPAGES];
X    register caddr_t upage;
X    register struct pte *pte;
X    register nbytes, n;
X
X    /*
X     *  Check if the process is currently loaded or swapped out.  The way we
X     *  get the u area is totally different for the two cases.  For this
X     *  application, we just don't bother if the process is swapped out.
X     */
X    if ((p->p_flag & SLOAD) == 0)
X    {
X	return(-1);
X    }
X
X    /*
X     *  Process is currently in memory, we hope!
X     */
X#ifdef ns32000
X    if (!getkval(p->p_upte, uptes, sizeof(uptes), "!p->p_upte"))
X#else
X    if (!getkval(p->p_pttop, uptes, sizeof(uptes), "!p->p_upte"))
X#endif
X    {
X	/* we can't seem to get to it, so pretend it's swapped out */
X	return(-1);
X    } 
X    upage = (caddr_t)u;
X    pte = uptes;
X    for (nbytes = sizeof(struct user); nbytes > 0; nbytes -= NBPG)
X    {
X    	(void) lseek(mem, (long)(pte++->pg_pfnum * NBPG), 0);
X	n = MIN(nbytes, NBPG);
X	if (read(mem, upage, n) != n)
X	{
X	    /* we can't seem to get to it, so pretend it's swapped out */
X	    return(-1);
X	}
X	upage += n;
X    }
X    return(0);
X}
X
X/*
X * check_nlist(nlst) - checks the nlist to see if any symbols were not
X *		found.  For every symbol that was not found, a one-line
X *		message is printed to stderr.  The routine returns the
X *		number of symbols NOT found.
X */
X
Xint check_nlist(nlst)
X
Xregister struct nlist *nlst;
X
X{
X    register int i;
X
X    /* check to see if we got ALL the symbols we requested */
X    /* this will write one line to stderr for every symbol not found */
X
X    i = 0;
X    while (nlst->n_name != NULL)
X    {
X	if (nlst->n_type == 0)
X	{
X	    /* this one wasn't found */
X	    fprintf(stderr, "kernel: no symbol named `%s'\n", nlst->n_name);
X	    i = 1;
X	}
X	nlst++;
X    }
X
X    return(i);
X}
X
X
X/*
X *  getkval(offset, ptr, size, refstr) - get a value out of the kernel.
X *	"offset" is the byte offset into the kernel for the desired value,
X *  	"ptr" points to a buffer into which the value is retrieved,
X *  	"size" is the size of the buffer (and the object to retrieve),
X *  	"refstr" is a reference string used when printing error meessages,
X *	    if "refstr" starts with a '!', then a failure on read will not
X *  	    be fatal (this may seem like a silly way to do things, but I
X *  	    really didn't want the overhead of another argument).
X *  	
X */
X
Xgetkval(offset, ptr, size, refstr)
X
Xunsigned long offset;
Xint *ptr;
Xint size;
Xchar *refstr;
X
X{
X    if (lseek(kmem, (long)offset, 0) == -1)
X    {
X	if (*refstr == '!')
X	{
X	    refstr++;
X	}
X	fprintf(stderr, "%s: lseek to %s: %s\n",
X	    KMEM, refstr, sys_errlist[errno]);
X	quit(22);
X    }
X    if (read(kmem, (char *)ptr, size) == -1)
X    {
X	if (*refstr == '!')
X	{
X	    /* we lost the race with the kernel, process isn't in memory */
X	    return(0);
X	} 
X	else 
X	{
X	    fprintf(stderr, "%s: reading %s: %s\n",
X		KMEM, refstr, sys_errlist[errno]);
X	    quit(23);
X	}
X    }
X    return(1);
X}
X    
X/* comparison routine for qsort */
X
X/*
X *  proc_compare - comparison function for "qsort"
X *	Compares the resource consumption of two processes using five
X *  	distinct keys.  The keys (in descending order of importance) are:
X *  	percent cpu, cpu ticks, state, resident set size, total virtual
X *  	memory usage.  The process states are ordered as follows (from least
X *  	to most important):  WAIT, zombie, sleep, stop, start, run.  The
X *  	array declaration below maps a process state index into a number
X *  	that reflects this ordering.
X */
X
Xstatic unsigned char sorted_state[] =
X{
X    0,	/* not used		*/
X    3,	/* sleep		*/
X    1,	/* ABANDONED (WAIT)	*/
X    6,	/* run			*/
X    5,	/* start		*/
X    2,	/* zombie		*/
X    4,	/* stop			*/
X    7	/* RUN			*/
X};
X 
Xproc_compare(pp1, pp2)
X
Xstruct proc **pp1;
Xstruct proc **pp2;
X
X{
X    register struct proc *p1;
X    register struct proc *p2;
X    register int result;
X    register pctcpu lresult;
X
X    /* remove one level of indirection */
X    p1 = *pp1;
X    p2 = *pp2;
X
X    /* compare percent cpu (pctcpu) */
X    if ((lresult = p2->p_pctcpu - p1->p_pctcpu) == 0)
X    {
X	/* use cpticks to break the tie */
X	if ((result = p2->p_cpticks - p1->p_cpticks) == 0)
X	{
X	    /* use process state to break the tie */
X	    if ((result = sorted_state[p2->p_stat] -
X			  sorted_state[p1->p_stat])  == 0)
X	    {
X		/* use priority to break the tie */
X		if ((result = p2->p_pri - p1->p_pri) == 0)
X		{
X		    /* use resident set size (rssize) to break the tie */
X		    if ((result = p2->p_rssize - p1->p_rssize) == 0)
X		    {
X			/* use total memory to break the tie */
X			result = PROCSIZE(p2) - PROCSIZE(p1);
X		    }
X		}
X	    }
X	}
X    }
X    else
X    {
X	result = lresult < 0 ? -1 : 1;
X    }
X
X    return(result);
X}
X
X
X/*
X * proc_owner(pid) - returns the uid that owns process "pid", or -1 if
X *		the process does not exist.
X *		It is EXTREMLY IMPORTANT that this function work correctly.
X *		If top runs setuid root (as in SVR4), then this function
X *		is the only thing that stands in the way of a serious
X *		security problem.  It validates requests for the "kill"
X *		and "renice" commands.
X */
X
Xint proc_owner(pid)
X
Xint pid;
X
X{
X    register int cnt;
X    register struct proc **prefp;
X    register struct proc *pp;
X
X    prefp = pref;
X    cnt = pref_len;
X    while (--cnt >= 0)
X    {
X	if ((pp = *prefp++)->p_pid == (pid_t)pid)
X	{
X	    return((int)pp->p_uid);
X	}
X    }
X    return(-1);
X}
END_OF_FILE
if test 17512 -ne `wc -c <'top-3.4/machine/m_dynix.c'`; then
    echo shar: \"'top-3.4/machine/m_dynix.c'\" unpacked with wrong size!
fi
# end of 'top-3.4/machine/m_dynix.c'
fi
if test -f 'top-3.4/machine/m_dynix32.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'top-3.4/machine/m_dynix32.c'\"
else
echo shar: Extracting \"'top-3.4/machine/m_dynix32.c'\" \(17571 characters\)
sed "s/^X//" >'top-3.4/machine/m_dynix32.c' <<'END_OF_FILE'
X/*
X * top - a top users display for Unix
X *
X * SYNOPSIS:  any Sequent Running Dynix 3.2.x
X *
X * DESCRIPTION:
X * This is the machine-dependent module for Sequent Dynix 3.2.0
X * This makes top work on the following systems:
X *	Dynix 3.2.0 and perhaps later versions
X *
X * CFLAGS: -DBSD
X *
X * AUTHOR:  Daniel Trinkle <trinkle@cs.purdue.edu>
X */
X
X#include <sys/types.h>
X#include <sys/signal.h>
X#include <sys/param.h>
X
X#include <stdio.h>
X#include <nlist.h>
X#include <math.h>
X#include <sys/dir.h>
X#include <sys/user.h>
X#include <sys/proc.h>
X#include <sys/dk.h>
X#include <sys/vm.h>
X#include <machine/pte.h>
X#include <machine/plocal.h>
X#include <machine/engine.h>
X#include <sys/file.h>
X
X#include "top.h"
X#include "machine.h"
X#include "utils.h"
X
X#ifndef uid_t
X/* some early versions of DYNIX don't have uid_t */
X#define uid_t int
X#endif
X
X#ifndef pid_t
X/* ditto pid_t */
X#define pid_t short
X#endif
X
Xstruct engine *engine;
Xstruct engine *pengine;
Xstruct plocal **pplocal;
Xint Nengine;
X
X/* get_process_info passes back a handle.  This is what it looks like: */
X
Xstruct handle
X{
X    struct proc **next_proc;	/* points to next valid proc pointer */
X    int remaining;		/* number of pointers remaining */
X};
X
X/* declarations for load_avg */
Xtypedef long load_avg;
Xtypedef long pctcpu;
X#define loaddouble(la) ((double)(la) / FSCALE)
X#define intload(i) ((int)((i) * FSCALE))
X#define pctdouble(p) ((double)(p) / FSCALE)
X
X/* define what weighted cpu is.  */
X#define weighted_cpu(pct, pp) ((pp)->p_time == 0 ? 0.0 : \
X			 ((pct) / (1.0 - exp((pp)->p_time * logcpu))))
X
X/* what we consider to be process size: */
X#define PROCSIZE(pp) ((pp)->p_dsize + (pp)->p_ssize)
X
X/* definitions for indices in the nlist array */
X#define X_AVENRUN	0
X#define X_CCPU		1
X#define X_MPID		2
X#define X_NPROC		3
X#define X_PROC		4
X#define X_TOTAL		5
X#define X_ENGINE	6
X#define X_NENGINE	7
X
Xstatic struct nlist nlst[] = {
X    { "_avenrun" },		/* 0 */
X    { "_ccpu" },		/* 1 */
X    { "_mpid" },		/* 2 */
X    { "_nproc" },		/* 3 */
X    { "_proc" },		/* 4 */
X    { "_total" },		/* 5 */
X    { "_engine" },		/* 6 */
X    { "_Nengine" },		/* 7 */
X    { 0 }
X};
X
X/*
X *  These definitions control the format of the per-process area
X */
X
Xstatic char header[] =
X  "  PID X        PRI NICE  SIZE   RES STATE   TIME   WCPU    CPU COMMAND";
X/* 0123456   -- field to fill in starts at header+6 */
X#define UNAME_START 6
X
X#define Proc_format \
X	"%5d %-8.8s %3d %4d %5s %5s %-5s %6s %5.2f%% %5.2f%% %.14s"
X
X
X/* process state names for the "STATE" column of the display */
X/* the extra nulls in the string "run" are for adding a slash and
X   the processor number when needed */
X
Xchar *state_abbrev[] =
X{
X    "", "sleep", "WAIT", "run", "start", "zomb", "stop", "RUN"
X};
X
X/* values that we stash away in _init and use in later routines */
X
Xstatic double logcpu;
X
X#define VMUNIX "/dynix"
X#define KMEM "/dev/kmem"
X#define MEM "/dev/mem"
X
Xstatic int kmem = -1;
Xstatic int mem = -1;
X
Xstruct vmtotal total;
X
X/* these are retrieved from the kernel in _init */
X
Xstatic unsigned long proc;
Xstatic          int  nproc;
Xstatic load_avg  ccpu;
X
X/* these are offsets obtained via nlist and used in the get_ functions */
X
Xstatic unsigned long mpid_offset;
Xstatic unsigned long avenrun_offset;
Xstatic unsigned long total_offset;
X
X/* these are for calculating cpu state percentages */
X
Xstatic long cp_time[CPUSTATES];
Xstatic long cp_old[CPUSTATES];
Xstatic long cp_diff[CPUSTATES];
X
X/* these are for detailing the process states */
X
Xint process_states[8];
Xchar *procstatenames[] = {
X    "", " sleeping, ", " ABANDONED, ", " runable, ", " starting, ",
X    " zombie, ", " stopped, ", " running, ",
X    NULL
X};
X
X/* these are for detailing the cpu states */
X
Xint cpu_states[CPUSTATES];
Xchar *cpustatenames[] = {
X    "user", "nice", "system", "idle",
X    NULL
X};
X
X/* these are for detailing the memory statistics */
X
Xint memory_stats[5];
Xchar *memorynames[] = {
X    "K (", "K) real, ", "K (", "K) virtual, ", "K free", NULL
X};
X
X/* these are for keeping track of the proc array */
X
Xstatic int bytes;
Xstatic int pref_len;
Xstatic struct proc *pbase;
Xstatic struct proc **pref;
X
X#define pagetok(size)	((size) << (PGSHIFT - LOG1024))
X
X/* useful externals */
Xextern int errno;
Xextern char *sys_errlist[];
X
Xlong lseek();
X
Xmachine_init(statics)
X
Xstruct statics *statics;
X
X{
X    register int i;
X
X    /* open kernel memory */
X    if ((kmem = open(KMEM, 0)) < 0)
X    {
X	perror(KMEM);
X	exit(20);
X    }
X    if ((mem = open(MEM, 0)) < 0)
X    {
X	perror(MEM);
X	exit(21);
X    }
X
X    /* get the list of symbols we want to access in the kernel */
X    if ((i = nlist(VMUNIX, nlst)) < 0)
X    {
X	fprintf(stderr, "top: nlist failed\n");
X	return(-1);
X    }
X
X    /* make sure they were all found */
X    if (i > 0 && check_nlist(nlst) > 0)
X    {
X	return(-1);
X    }
X
X    /* get the symbol values out of kmem */
X    (void) getkval(nlst[X_PROC].n_value,   (int *)(&proc),	sizeof(proc),
X	    nlst[X_PROC].n_name);
X    (void) getkval(nlst[X_NPROC].n_value,  &nproc,		sizeof(nproc),
X	    nlst[X_NPROC].n_name);
X    (void) getkval(nlst[X_CCPU].n_value,   (int *)(&ccpu),	sizeof(ccpu),
X	    nlst[X_CCPU].n_name);
X    (void) getkval(nlst[X_NENGINE].n_value,  &Nengine,  sizeof(int),
X	    nlst[X_NENGINE].n_name);
X    (void) getkval(nlst[X_ENGINE].n_value,  &pengine,  sizeof(struct engine *),
X	    nlst[X_ENGINE].n_name);
X
X    engine = (struct engine *)calloc(Nengine, sizeof(struct engine));
X    if (engine == NULL)
X    {
X	fprintf(stderr, "Cannot allocate memory for engine structure\n");
X	exit(2);
X    }
X    (void) getkval(pengine,  &engine[0],  Nengine * sizeof(struct engine),
X	    "engine array");
X    pplocal = (struct plocal **)calloc(Nengine, sizeof(struct plocal *));
X    if (pplocal == NULL)
X    {
X	fprintf(stderr, "Cannot allocate memory for plocal structures\n");
X	exit(2);
X    }
X    for (i = 0; i < Nengine; i++) {
X	pplocal[i] = (struct plocal *)&engine[i].e_local->pp_local[0][0];
X    }
X
X    /* stash away certain offsets for later use */
X    mpid_offset = nlst[X_MPID].n_value;
X    avenrun_offset = nlst[X_AVENRUN].n_value;
X    total_offset = nlst[X_TOTAL].n_value;
X
X    /* this is used in calculating WCPU -- calculate it ahead of time */
X    logcpu = log(loaddouble(ccpu));
X
X    /* allocate space for proc structure array and array of pointers */
X    bytes = nproc * sizeof(struct proc);
X    pbase = (struct proc *)malloc(bytes);
X    pref  = (struct proc **)malloc(nproc * sizeof(struct proc *));
X
X    /* Just in case ... */
X    if (pbase == (struct proc *)NULL || pref == (struct proc **)NULL)
X    {
X	fprintf(stderr, "top: can't allocate sufficient memory\n");
X	return(-1);
X    }
X
X    /* fill in the statics information */
X    statics->procstate_names = procstatenames;
X    statics->cpustate_names = cpustatenames;
X    statics->memory_names = memorynames;
X
X    /* all done! */
X    return(0);
X}
X
Xchar *format_header(uname_field)
X
Xregister char *uname_field;
X
X{
X    register char *ptr;
X
X    ptr = header + UNAME_START;
X    while (*uname_field != '\0')
X    {
X	*ptr++ = *uname_field++;
X    }
X
X    return(header);
X}
X
Xget_system_info(si)
X
Xstruct system_info *si;
X
X{
X    load_avg avenrun[3];
X    struct plocal plocal;
X    register int i, j;
X
X    /* get the cp_time array */
X    for (j = 0; j < CPUSTATES; j++)
X	cp_time[j] = 0L;
X    for (i = 0; i < Nengine; i++) {
X	(void) getkval(pplocal[i], &plocal, sizeof(struct plocal), "plocal array");
X	for (j = 0; j < CPUSTATES; j++)
X	    cp_time[j] += (long)plocal.cnt.v_time[j];
X    }
X
X    /* get load average array */
X    (void) getkval(avenrun_offset, (int *)avenrun, sizeof(avenrun),
X		   "_avenrun");
X
X    /* get mpid -- process id of last process */
X    (void) getkval(mpid_offset, &(si->last_pid), sizeof(si->last_pid),
X		   "_mpid");
X
X    /* convert load averages to doubles */
X    {
X	register int i;
X	register double *infoloadp;
X	register load_avg *sysloadp;
X
X	infoloadp = si->load_avg;
X	sysloadp = avenrun;
X	for (i = 0; i < 3; i++)
X	{
X	    *infoloadp++ = loaddouble(*sysloadp++);
X	}
X    }
X
X    /* convert cp_time counts to percentages */
X    (void) percentages(CPUSTATES, cpu_states, cp_time, cp_old, cp_diff);
X
X    /* get total -- systemwide main memory usage structure */
X    (void) getkval(total_offset, (int *)(&total), sizeof(total),
X		   "_total");
X    /* convert memory stats to Kbytes */
X    memory_stats[0] = pagetok(total.t_rm);
X    memory_stats[1] = pagetok(total.t_arm);
X    memory_stats[2] = pagetok(total.t_vm);
X    memory_stats[3] = pagetok(total.t_avm);
X    memory_stats[4] = pagetok(total.t_free);
X
X    /* set arrays and strings */
X    si->cpustates = cpu_states;
X    si->memory = memory_stats;
X}
X
Xstatic struct handle handle;
X
Xcaddr_t get_process_info(si, sel, compare)
X
Xstruct system_info *si;
Xstruct process_select *sel;
Xint (*compare)();
X
X{
X    register int i;
X    register int total_procs;
X    register int active_procs;
X    register struct proc **prefp;
X    register struct proc *pp;
X
X    /* these are copied out of sel for speed */
X    int show_idle;
X    int show_system;
X    int show_uid;
X
X    /* read all the proc structures in one fell swoop */
X    (void) getkval(proc, (int *)pbase, bytes, "proc array");
X
X    /* get a pointer to the states summary array */
X    si->procstates = process_states;
X
X    /* set up flags which define what we are going to select */
X    show_idle = sel->idle;
X    show_system = sel->system;
X    show_uid = sel->uid != -1;
X
X    /* count up process states and get pointers to interesting procs */
X    total_procs = 0;
X    active_procs = 0;
X    bzero((char *)process_states, sizeof(process_states));
X    prefp = pref;
X    for (pp = pbase, i = 0; i < nproc; pp++, i++)
X    {
X	/*
X	 *  Place pointers to each valid proc structure in pref[].
X	 *  Process slots that are actually in use have a non-zero
X	 *  status field.  Processes with SSYS set are system
X	 *  processes---these get ignored unless show_sysprocs is set.
X	 */
X	if (pp->p_stat != 0 &&
X	    (show_system || ((pp->p_flag & SSYS) == 0)))
X	{
X	    total_procs++;
X	    process_states[pp->p_stat]++;
X	    if ((pp->p_stat != SZOMB) &&
X		(show_idle || (pp->p_pctcpu != 0) || (pp->p_stat == SRUN)) &&
X		(!show_uid || pp->p_uid == (uid_t)sel->uid))
X	    {
X		*prefp++ = pp;
X		active_procs++;
X	    }
X	}
X    }
X
X    /* if requested, sort the "interesting" processes */
X    if (compare != NULL)
X    {
X	qsort((char *)pref, active_procs, sizeof(struct proc *), compare);
X    }
X
X    /* remember active and total counts */
X    si->p_total = total_procs;
X    si->p_active = pref_len = active_procs;
X
X    /* pass back a handle */
X    handle.next_proc = pref;
X    handle.remaining = active_procs;
X    return((caddr_t)&handle);
X}
X
Xchar fmt[MAX_COLS];		/* static area where result is built */
X
Xchar *format_next_process(handle, get_userid)
X
Xcaddr_t handle;
Xchar *(*get_userid)();
X
X{
X    register struct proc *pp;
X    register long cputime;
X    register double pct;
X    struct user u;
X    struct handle *hp;
X
X    /* find and remember the next proc structure */
X    hp = (struct handle *)handle;
X    pp = *(hp->next_proc++);
X    hp->remaining--;
X    
X
X    /* get the process's user struct and set cputime */
X    if (getu(pp, &u) == -1)
X    {
X	(void) strcpy(u.u_comm, "<swapped>");
X	cputime = 0;
X    }
X    else
X    {
X	/* set u_comm for system processes */
X	if (u.u_comm[0] == '\0')
X	{
X	    if (pp->p_pid == 0)
X	    {
X		(void) strcpy(u.u_comm, "Swapper");
X	    }
X	    else if (pp->p_pid == 2)
X	    {
X		(void) strcpy(u.u_comm, "Pager");
X	    }
X	}
X
X	cputime = u.u_ru.ru_utime.tv_sec + u.u_ru.ru_stime.tv_sec;
X    }
X
X    /* calculate the base for cpu percentages */
X    pct = pctdouble(pp->p_pctcpu);
X
X    /* format this entry */
X    sprintf(fmt,
X	    Proc_format,
X	    pp->p_pid,
X	    (*get_userid)(pp->p_uid),
X	    pp->p_pri - PZERO,
X	    pp->p_nice - NZERO,
X	    format_k(pagetok(PROCSIZE(pp))),
X	    format_k(pagetok(pp->p_rssize)),
X	    state_abbrev[pp->p_stat],
X	    format_time(cputime),
X	    100.0 * weighted_cpu(pct, pp),
X	    100.0 * pct,
X	    printable(u.u_comm));
X
X    /* return the result */
X    return(fmt);
X}
X
X/*
X *  getu(p, u) - get the user structure for the process whose proc structure
X *	is pointed to by p.  The user structure is put in the buffer pointed
X *	to by u.  Return 0 if successful, -1 on failure (such as the process
X *	being swapped out).
X */
X
Xgetu(p, u)
X
Xregister struct proc *p;
Xstruct user *u;
X
X{
X    struct pte uptes[UPAGES];
X    register caddr_t upage;
X    register struct pte *pte;
X    register nbytes, n;
X
X    /*
X     *  Check if the process is currently loaded or swapped out.  The way we
X     *  get the u area is totally different for the two cases.  For this
X     *  application, we just don't bother if the process is swapped out.
X     */
X    if ((p->p_flag & SLOAD) == 0)
X    {
X	return(-1);
X    }
X
X    /*
X     *  Process is currently in memory, we hope!
X     */
X#ifdef ns32000
X    if (!getkval(p->p_upte, uptes, sizeof(uptes), "!p->p_upte"))
X#else
X    if (!getkval(p->p_pttop, uptes, sizeof(uptes), "!p->p_upte"))
X#endif
X    {
X	/* we can't seem to get to it, so pretend it's swapped out */
X	return(-1);
X    } 
X    upage = (caddr_t)u;
X    pte = uptes;
X    for (nbytes = sizeof(struct user); nbytes > 0; nbytes -= NBPG)
X    {
X    	(void) lseek(mem, (long)(pte++->pg_pfnum * NBPG), 0);
X	n = MIN(nbytes, NBPG);
X	if (read(mem, upage, n) != n)
X	{
X	    /* we can't seem to get to it, so pretend it's swapped out */
X	    return(-1);
X	}
X	upage += n;
X    }
X    return(0);
X}
X
X/*
X * check_nlist(nlst) - checks the nlist to see if any symbols were not
X *		found.  For every symbol that was not found, a one-line
X *		message is printed to stderr.  The routine returns the
X *		number of symbols NOT found.
X */
X
Xint check_nlist(nlst)
X
Xregister struct nlist *nlst;
X
X{
X    register int i;
X
X    /* check to see if we got ALL the symbols we requested */
X    /* this will write one line to stderr for every symbol not found */
X
X    i = 0;
X    while (nlst->n_name != NULL)
X    {
X	if (nlst->n_type == 0)
X	{
X	    /* this one wasn't found */
X	    fprintf(stderr, "kernel: no symbol named `%s'\n", nlst->n_name);
X	    i = 1;
X	}
X	nlst++;
X    }
X
X    return(i);
X}
X
X
X/*
X *  getkval(offset, ptr, size, refstr) - get a value out of the kernel.
X *	"offset" is the byte offset into the kernel for the desired value,
X *  	"ptr" points to a buffer into which the value is retrieved,
X *  	"size" is the size of the buffer (and the object to retrieve),
X *  	"refstr" is a reference string used when printing error meessages,
X *	    if "refstr" starts with a '!', then a failure on read will not
X *  	    be fatal (this may seem like a silly way to do things, but I
X *  	    really didn't want the overhead of another argument).
X *  	
X */
X
Xgetkval(offset, ptr, size, refstr)
X
Xunsigned long offset;
Xint *ptr;
Xint size;
Xchar *refstr;
X
X{
X    if (lseek(kmem, (long)offset, 0) == -1)
X    {
X	if (*refstr == '!')
X	{
X	    refstr++;
X	}
X	fprintf(stderr, "%s: lseek to %s: %s\n",
X	    KMEM, refstr, sys_errlist[errno]);
X	quit(22);
X    }
X    if (read(kmem, (char *)ptr, size) == -1)
X    {
X	if (*refstr == '!')
X	{
X	    /* we lost the race with the kernel, process isn't in memory */
X	    return(0);
X	} 
X	else 
X	{
X	    fprintf(stderr, "%s: reading %s: %s\n",
X		KMEM, refstr, sys_errlist[errno]);
X	    quit(23);
X	}
X    }
X    return(1);
X}
X    
X/* comparison routine for qsort */
X
X/*
X *  proc_compare - comparison function for "qsort"
X *	Compares the resource consumption of two processes using five
X *  	distinct keys.  The keys (in descending order of importance) are:
X *  	percent cpu, cpu ticks, state, resident set size, total virtual
X *  	memory usage.  The process states are ordered as follows (from least
X *  	to most important):  WAIT, zombie, sleep, stop, start, run.  The
X *  	array declaration below maps a process state index into a number
X *  	that reflects this ordering.
X */
X
Xstatic unsigned char sorted_state[] =
X{
X    0,	/* not used		*/
X    3,	/* sleep		*/
X    1,	/* ABANDONED (WAIT)	*/
X    6,	/* run			*/
X    5,	/* start		*/
X    2,	/* zombie		*/
X    4,	/* stop			*/
X    7	/* RUN			*/
X};
X 
Xproc_compare(pp1, pp2)
X
Xstruct proc **pp1;
Xstruct proc **pp2;
X
X{
X    register struct proc *p1;
X    register struct proc *p2;
X    register int result;
X    register pctcpu lresult;
X
X    /* remove one level of indirection */
X    p1 = *pp1;
X    p2 = *pp2;
X
X    /* compare percent cpu (pctcpu) */
X    if ((lresult = p2->p_pctcpu - p1->p_pctcpu) == 0)
X    {
X	/* use cpticks to break the tie */
X	if ((result = p2->p_cpticks - p1->p_cpticks) == 0)
X	{
X	    /* use process state to break the tie */
X	    if ((result = sorted_state[p2->p_stat] -
X			  sorted_state[p1->p_stat])  == 0)
X	    {
X		/* use priority to break the tie */
X		if ((result = p2->p_pri - p1->p_pri) == 0)
X		{
X		    /* use resident set size (rssize) to break the tie */
X		    if ((result = p2->p_rssize - p1->p_rssize) == 0)
X		    {
X			/* use total memory to break the tie */
X			result = PROCSIZE(p2) - PROCSIZE(p1);
X		    }
X		}
X	    }
X	}
X    }
X    else
X    {
X	result = lresult < 0 ? -1 : 1;
X    }
X
X    return(result);
X}
X
X
X/*
X * proc_owner(pid) - returns the uid that owns process "pid", or -1 if
X *		the process does not exist.
X *		It is EXTREMLY IMPORTANT that this function work correctly.
X *		If top runs setuid root (as in SVR4), then this function
X *		is the only thing that stands in the way of a serious
X *		security problem.  It validates requests for the "kill"
X *		and "renice" commands.
X */
X
Xint proc_owner(pid)
X
Xint pid;
X
X{
X    register int cnt;
X    register struct proc **prefp;
X    register struct proc *pp;
X
X    prefp = pref;
X    cnt = pref_len;
X    while (--cnt >= 0)
X    {
X	if ((pp = *prefp++)->p_pid == (pid_t)pid)
X	{
X	    return((int)pp->p_uid);
X	}
X    }
X    return(-1);
X}
END_OF_FILE
if test 17571 -ne `wc -c <'top-3.4/machine/m_dynix32.c'`; then
    echo shar: \"'top-3.4/machine/m_dynix32.c'\" unpacked with wrong size!
fi
# end of 'top-3.4/machine/m_dynix32.c'
fi
echo shar: End of archive 10 \(of 22\).
cp /dev/null ark10isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 22 archives.
    echo "Now read README and INSTALL, then run Configure"
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0

