Newsgroups: comp.sources.unix
From: wnl@groupsys.com (William Lefebvre)
Subject: v29i113: top-3.4 - top process display, V3.4, Part12/22
References: <1.841608857.22962@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: wnl@groupsys.com (William Lefebvre)
Posting-Number: Volume 29, Issue 113
Archive-Name: top-3.4/part12

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 12 (of 22)."
# Contents:  top-3.4/machine/m_irix5.c top-3.4/machine/m_ncr3000.c
# Wrapped by lefebvre@acapulco on Fri Aug 30 12:35:50 1996
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'top-3.4/machine/m_irix5.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'top-3.4/machine/m_irix5.c'\"
else
echo shar: Extracting \"'top-3.4/machine/m_irix5.c'\" \(18699 characters\)
sed "s/^X//" >'top-3.4/machine/m_irix5.c' <<'END_OF_FILE'
X/*
X * top - a top users display for Unix
X *
X * SYNOPSIS:  any uniprocessor, 32 bit SGI machine running IRIX 5.3
X *
X * DESCRIPTION:
X * This is the machine-dependent module for IRIX 5.3.
X * It has been tested on Indys running 5.3 and Indigos running 5.3XFS
X *
X * LIBS: -lmld
X * CFLAGS: -DHAVE_GETOPT
X *
X * AUTHOR: Sandeep Cariapa <cariapa@sgi.com>
X * This is not a supported product of Silicon Graphics, Inc.
X * Please do not call SGI for support.
X *
X */
X
X#define _KMEMUSER
X
X#include <sys/types.h>
X#include <sys/time.h>
X#include <sys/stat.h>
X#include <sys/swap.h>
X#include <sys/proc.h>
X#include <sys/procfs.h>
X#include <sys/sysinfo.h>
X#include <sys/sysmp.h>
X#include <paths.h>
X#include <dirent.h>
X#include <stdio.h>
X#include <nlist.h>
X#include <unistd.h>
X#include <errno.h>
X#include <fcntl.h>
X#include "top.h"
X#include "machine.h"
X
X#ifdef IRIX64
X#define nlist nlist64
X#define lseek lseek64
X#define off_t off64_t
X#endif
X
X#define UNIX	"/unix"
X#define KMEM	"/dev/kmem"
X#define CPUSTATES 6
X
X#ifndef FSCALE
X#define FSHIFT  8		/* bits to right of fixed binary point */
X#define FSCALE  (1<<FSHIFT)
X#endif /* FSCALE */
X
X#ifdef FIXED_LOADAVG
X  typedef long load_avg;
X# define loaddouble(la) ((double)(la) / FIXED_LOADAVG)
X# define intload(i) ((int)((i) * FIXED_LOADAVG))
X#else
X  typedef double load_avg;
X# define loaddouble(la) (la)
X# define intload(i) ((double)(i))
X#endif
X
X#define percent_cpu(pp) (*(double *)pp->pr_fill)
X#define weighted_cpu(pp) (*(double *)&pp->pr_fill[2])
X
Xstatic int pagesize;
X#define pagetok(size) ((size)*pagesize)
X
Xstatic int numcpus;
X
X/*
X *  These definitions control the format of the per-process area
X */
X
Xstatic char header[] =
X  "  PID X        PRI NICE  SIZE   RES STATE   TIME   WCPU    CPU COMMAND";
X/* 0123456   -- field to fill in starts at header+6 */
X#define UNAME_START 6
X
X#define Proc_format \
X	"%5d %-8.8s %3d %4d %5s %5s %-5s %6s %5.2f%% %5.2f%% %.16s"
X
X/* these are for detailing the process states */
Xchar *state_abbrev[] =
X{"", "sleep", "run\0\0\0", "zombie", "stop", "idle", "", "swap"};
X
Xint process_states[8];
Xchar *procstatenames[] = {
X    "", " sleeping, ", " running, ", " zombie, ", " stopped, ",
X    " idle, ", "", " swapped, ",
X    NULL
X};
X
X/* these are for detailing the cpu states */
Xint cpu_states[CPUSTATES];
Xchar *cpustatenames[] = {
X    "idle", "usr", "ker", "wait", "swp", "intr",
X    NULL
X};
X
X/* these are for detailing the memory statistics */
X
Xint memory_stats[5];
Xchar *memorynames[] = {
X    "K max, ", "K avail, ", "K free, ", "K swap, ", "K free swap", NULL
X};
X
X/* useful externals */
Xextern int errno;
Xextern char *myname;
Xextern char *sys_errlist[];
Xextern char *format_k();
Xextern char *format_time();
Xextern long percentages();
X
X#define X_AVENRUN	0
X#define X_NPROC		1
X#define X_FREEMEM	2
X#define X_MAXMEM	3
X#define X_AVAILRMEM     4
X#define X_MPID		5
X
Xstatic struct nlist nlst[] = {
X{ "avenrun" },		/* 0. Array containing the 3 load averages. */
X{ "nproc" },		/* 1. Kernel parameter: Max number of processes. */
X{ "freemem" },		/* 2. Amount of free memory in system. */
X{ "maxmem" },		/* 3. Maximum amount of memory usable by system. */
X{ "availrmem" },        /* 4. Available real memory. */
X#ifndef IRIX64
X{ "mpid" },		/* 5. PID of last process. */
X#endif
X{ 0 }
X};
Xstatic unsigned long avenrun_offset;
Xstatic unsigned long nproc_offset;
Xstatic unsigned long freemem_offset;
Xstatic unsigned long maxmem_offset;
Xstatic unsigned long availrmem_offset;
Xstatic unsigned long mpid_offset;
Xdouble load[3];
Xchar fmt[MAX_COLS];
Xstatic int kmem;
Xstatic int nproc;
Xstatic int bytes;
Xstatic struct prpsinfo *pbase;
Xstatic struct prpsinfo **pref;
Xstatic DIR *procdir;
X
X/* get_process_info passes back a handle.  This is what it looks like: */
Xstruct handle  {
X  struct prpsinfo **next_proc;/* points to next valid proc pointer */
X  int remaining;	      /* number of pointers remaining */
X};
X
Xstatic struct handle handle;
Xvoid getptable();
X
X/*
X * Structure for keeping track of CPU times from last time around
X * the program.  We keep these things in a hash table, which is
X * recreated at every cycle.
X */
Xstruct oldproc
X  {
X    pid_t oldpid;
X    double oldtime;
X    double oldpct;
X  };
Xstatic int oldprocs;			/* size of table */
Xstatic struct oldproc *oldbase;
X#define HASH(x) ((x << 1) % oldprocs)
X#define PRPSINFOSIZE (sizeof(struct prpsinfo))
X
Xint machine_init(statics)
X     struct statics *statics;
X{
X  struct oldproc *op, *endbase;
X
X  if ((kmem = open(KMEM, O_RDONLY)) == -1) {
X    perror(KMEM);
X    return(-1);
X  }
X
X  /* get the list of symbols we want to access in the kernel */
X  (void) nlist(UNIX, nlst);
X  if (nlst[0].n_type == 0) {
X    fprintf(stderr, "%s: nlist failed\n", myname);
X    return(-1);
X  }
X
X  /* Check if we got all of 'em. */
X  if (check_nlist(nlst) > 0) {
X      return(-1);
X    }
X  avenrun_offset = nlst[X_AVENRUN].n_value;
X  nproc_offset = nlst[X_NPROC].n_value;
X  freemem_offset = nlst[X_FREEMEM].n_value;
X  maxmem_offset = nlst[X_MAXMEM].n_value;
X  availrmem_offset = nlst[X_AVAILRMEM].n_value;
X#ifndef IRIX64
X   mpid_offset = nlst[X_MPID].n_value;
X#endif
X
X  /* Got to do this first so that we can map real estate for the
X     process array. */
X  (void) getkval(nproc_offset, (int *) (&nproc), sizeof(nproc), "nproc");
X
X  /* allocate space for proc structure array and array of pointers */
X  bytes = nproc * sizeof (struct prpsinfo);
X  pbase = (struct prpsinfo *) malloc (bytes);
X  pref = (struct prpsinfo **) malloc (nproc * sizeof (struct prpsinfo *));
X  oldbase = (struct oldproc *) malloc (2 * nproc * sizeof (struct oldproc));
X
X  /* Just in case ... */
X  if (pbase == (struct prpsinfo *) NULL || pref == (struct prpsinfo **) NULL ||
X      oldbase == (struct oldproc *)NULL) {
X    (void) fprintf (stderr, "%s: can't allocate sufficient memory\n", myname);
X    return (-1);
X  }
X
X  oldprocs = 2 * nproc;
X  endbase = oldbase + oldprocs;
X  for (op = oldbase; op < endbase; op++) {
X    op->oldpid = -1;
X  }
X
X  if (!(procdir = opendir (_PATH_PROCFSPI))) {
X    (void) fprintf (stderr, "Unable to open %s\n", _PATH_PROCFSPI);
X    return (-1);
X  }
X
X  if (chdir (_PATH_PROCFSPI)) {
X    /* handy for later on when we're reading it */
X    (void) fprintf (stderr, "Unable to chdir to %s\n", _PATH_PROCFSPI);
X    return (-1);
X  }
X
X  statics->procstate_names = procstatenames;
X  statics->cpustate_names = cpustatenames;
X  statics->memory_names = memorynames;
X
X  pagesize = getpagesize()/1024;
X
X  /* all done! */
X  return(0);
X}
X
Xchar *format_header(uname_field)
X     register char *uname_field;
X
X{
X  register char *ptr;
X
X  ptr = header + UNAME_START;
X  while (*uname_field != '\0') {
X    *ptr++ = *uname_field++;
X  }
X
X  return(header);
X}
X
Xvoid get_system_info(si)
X     struct system_info *si;
X
X{
X  register int i;
X  int avenrun[3];
X  static int freemem;
X  static int maxmem;
X  static int availrmem;
X  struct sysinfo sysinfo;
X  static long cp_new[CPUSTATES];
X  static long cp_old[CPUSTATES];
X  static long cp_diff[CPUSTATES]; /* for cpu state percentages */
X  off_t  fswap;          /* current free swap in blocks */
X  off_t  tswap;          /* total swap in blocks */
X
X  (void) getkval(avenrun_offset, (int *)avenrun, sizeof(avenrun), "avenrun");
X  for (i = 0; i < 3; i++) {
X    si->load_avg[i] = loaddouble (avenrun[i]);
X    si->load_avg[i] = si->load_avg[i]/1024.0;
X  }
X
X  (void) getkval(freemem_offset, (int *) (&freemem), sizeof(freemem),
X"freemem");
X  (void) getkval(maxmem_offset, (int *) (&maxmem), sizeof(maxmem), "maxmem");
X  (void) getkval(availrmem_offset, (int *) (&availrmem), sizeof(availrmem),
X"availrmem");
X#ifdef IRIX64
X  si->last_pid = 0;
X#else
X  (void) getkval(mpid_offset, &(si->last_pid), sizeof (si->last_pid), "mpid");
X#endif
X  swapctl(SC_GETFREESWAP, &fswap);
X  swapctl(SC_GETSWAPTOT, &tswap);
X  memory_stats[0] = pagetok(maxmem);
X  memory_stats[1] = pagetok(availrmem);
X  memory_stats[2] = pagetok(freemem);
X  memory_stats[3] = tswap / 2;
X  memory_stats[4] = fswap / 2;
X
X  /* use sysmp() to get current sysinfo usage. Can run into all kinds of
X     problems if you try to nlist this kernel variable. */
X  if (sysmp(MP_SAGET, MPSA_SINFO, &sysinfo, sizeof(struct sysinfo)) == -1) {
X    perror("sysmp");
X    return;
X  }
X  /* copy sysinfo.cpu to an array of longs, as expected by percentages() */
X  for (i = 0; i < CPUSTATES; i++) {
X    cp_new[i] = sysinfo.cpu[i];
X  }
X  (void) percentages (CPUSTATES, cpu_states, cp_new, cp_old, cp_diff);
X
X  si->cpustates = cpu_states;
X  si->memory = memory_stats;
X
X  numcpus = sysmp(MP_NPROCS);
X
X  /* add a slash to the "run" state abbreviation */
X  if (numcpus > 1) {
X    state_abbrev[SRUN][3] = '/';
X  }
X
X  return;
X}
X
Xcaddr_t get_process_info(si, sel, compare)
X     struct system_info *si;
X     struct process_select *sel;
X     int (*compare)();
X{
X  register int i;
X  register int total_procs;
X  register int active_procs;
X  register struct prpsinfo **prefp;
X  register struct prpsinfo *pp;
X
X  /* these are copied out of sel for speed */
X  int show_idle;
X  int show_system;
X  int show_uid;
X
X  /* read all the proc structures */
X  getptable (pbase);
X
X  /* get a pointer to the states summary array */
X  si->procstates = process_states;
X
X  /* set up flags which define what we are going to select */
X  show_idle = sel->idle;
X  show_system = sel->system;
X  show_uid = sel->uid != -1;
X
X  /* count up process states and get pointers to interesting procs */
X  total_procs = 0;
X  active_procs = 0;
X  (void) memset (process_states, 0, sizeof (process_states));
X  prefp = pref;
X
X  for (pp = pbase, i = 0; i < nproc; pp++, i++)    {
X    /*
X     *  Place pointers to each valid proc structure in pref[].
X     *  Process slots that are actually in use have a non-zero
X     *  status field.  Processes with SSYS set are system
X     *  processes---these get ignored unless show_system is set.
X     */
X    if (pp->pr_state != 0 &&
X	(show_system || ((pp->pr_flag & SSYS) == 0))) {
X      total_procs++;
X      process_states[pp->pr_state]++;
X      if ((!pp->pr_zomb) &&
X	  (show_idle || (pp->pr_state == SRUN)) &&
X	  (!show_uid || pp->pr_uid == (uid_t) sel->uid))  {
X	*prefp++ = pp;
X	active_procs++;
X      }
X    }
X  }
X
X  /* if requested, sort the "interesting" processes */
X  if (compare != NULL)
X    qsort ((char *) pref, active_procs, sizeof (struct prpsinfo *), compare);
X
X  /* remember active and total counts */
X  si->p_total = total_procs;
X  si->p_active = active_procs;
X
X  /* pass back a handle */
X  handle.next_proc = pref;
X  handle.remaining = active_procs;
X  return((caddr_t)&handle);
X}
X
Xchar *format_next_process(handle, get_userid)
X     caddr_t handle;
X     char *(*get_userid)();
X
X{
X  register struct prpsinfo *pp;
X  struct handle *hp;
X  register long cputime;
X  register double pctcpu;
X
X  /* find and remember the next proc structure */
X  hp = (struct handle *) handle;
X  pp = *(hp->next_proc++);
X  hp->remaining--;
X
X  /* get the cpu usage and calculate the cpu percentages */
X  cputime = pp->pr_time.tv_sec;
X  pctcpu = percent_cpu (pp);
X
X  if (numcpus > 1) {
X	if (pp->pr_sonproc < 0)
X		state_abbrev[SRUN][4] = '*';
X	else
X		state_abbrev[SRUN][4] = pp->pr_sonproc + '0';
X  }
X
X  /* format this entry */
X  sprintf (fmt,
X	   Proc_format,
X	   pp->pr_pid,
X	   (*get_userid) (pp->pr_uid),
X	   pp->pr_pri - PZERO,
X	   pp->pr_nice - NZERO,
X	   format_k(pagetok(pp->pr_size)),
X	   format_k(pagetok(pp->pr_rssize)),
X	   state_abbrev[pp->pr_state],
X	   format_time(cputime),
X	   weighted_cpu (pp),
X	   pctcpu,
X	   pp->pr_fname);
X
X  /* return the result */
X    return(fmt);
X}
X
X/*
X *  getkval(offset, ptr, size, refstr) - get a value out of the kernel.
X *	"offset" is the byte offset into the kernel for the desired value,
X *  	"ptr" points to a buffer into which the value is retrieved,
X *  	"size" is the size of the buffer (and the object to retrieve),
X *  	"refstr" is a reference string used when printing error meessages,
X *	    if "refstr" starts with a '!', then a failure on read will not
X *  	    be fatal (this may seem like a silly way to do things, but I
X *  	    really didn't want the overhead of another argument).
X *
X */
X
Xint getkval(offset, ptr, size, refstr)
X     off_t offset;
X     int *ptr;
X     int size;
X     char *refstr;
X
X{
X  if (lseek(kmem, offset, SEEK_SET) == -1) {
X    if (*refstr == '!')
X      refstr++;
X    (void) fprintf(stderr, "%s: lseek to %s: %s\n", KMEM,
X		   refstr, strerror(errno));
X    exit(0);
X  }
X  if (read(kmem, (char *) ptr, size) == -1) {
X    if (*refstr == '!')
X      return(0);
X    else {
X      (void) fprintf(stderr, "%s: reading %s: %s\n", KMEM,
X		     refstr, strerror(errno));
X      exit(0);
X    }
X  }
X  return(1);
X}
X
X/*
X *  proc_compare - comparison function for "qsort"
X *	Compares the resource consumption of two processes using five
X *  	distinct keys.  The keys (in descending order of importance) are:
X *  	percent cpu, cpu ticks, state, resident set size, total virtual
X *  	memory usage.  The process states are ordered as follows (from least
X *  	to most important):  WAIT, zombie, sleep, stop, idle, run.  The
X *  	array declaration below maps a process state index into a number
X *  	that reflects this ordering.
X */
X
X
Xunsigned char sorted_state[] =
X{
X  0,				/* not used		*/
X  3,				/* sleep		*/
X  6,				/* run			*/
X  2,				/* zombie		*/
X  4,				/* stop			*/
X  5,				/* idle 		*/
X  0,				/* not used             */
X  1				/* being swapped (WAIT)	*/
X};
X
Xint proc_compare (pp1, pp2)
X     struct prpsinfo **pp1;
X     struct prpsinfo **pp2;
X{
X  register struct prpsinfo *p1;
X  register struct prpsinfo *p2;
X  register long result;
X
X  /* remove one level of indirection */
X  p1 = *pp1;
X  p2 = *pp2;
X
X  /* compare percent cpu (pctcpu) */
X  if ((result = (long) (p2->pr_cpu - p1->pr_cpu)) == 0) {
X    /* use cpticks to break the tie */
X    if ((result = p2->pr_time.tv_sec - p1->pr_time.tv_sec) == 0) {
X      /* use process state to break the tie */
X      if ((result = (long) (sorted_state[p2->pr_state] -
X			    sorted_state[p1->pr_state])) == 0) {
X	/* use priority to break the tie */
X	if ((result = p2->pr_oldpri - p1->pr_oldpri) == 0)  {
X	  /* use resident set size (rssize) to break the tie */
X	  if ((result = p2->pr_rssize - p1->pr_rssize) == 0)  {
X	    /* use total memory to break the tie */
X	    result = (p2->pr_size - p1->pr_size);
X	  }
X	}
X      }
X    }
X  }
X  return (result);
X}
X
X/* return the owner of the specified process. */
Xuid_t proc_owner (pid)
X     pid_t pid;
X{
X  register struct prpsinfo *p;
X  int i;
X
X  for (i = 0, p = pbase; i < nproc; i++, p++)
X    if (p->pr_pid == pid)
X      return (p->pr_uid);
X
X  return (-1);
X}
X
X/*
X * check_nlist(nlst) - checks the nlist to see if any symbols were not
X *		found.  For every symbol that was not found, a one-line
X *		message is printed to stderr.  The routine returns the
X *		number of symbols NOT found.
X */
X
Xint check_nlist(nlst)
X     register struct nlist *nlst;
X
X{
X  register int i;
X
X  /* check to see if we got ALL the symbols we requested */
X  /* this will write one line to stderr for every symbol not found */
X
X  i = 0;
X  while (nlst->n_name != NULL)   {
X      if (nlst->n_type == 0) {
X	  /* this one wasn't found */
X	  fprintf(stderr, "kernel: no symbol named `%s'\n", nlst->n_name);
X	  i = 1;
X	}
X      nlst++;
X    }
X
X  return(i);
X}
X
X/* get process table */
Xvoid getptable (baseptr)
X     struct prpsinfo *baseptr;
X{
X  struct prpsinfo *currproc;	/* pointer to current proc structure	*/
X  int numprocs = 0;
X  int i;
X  struct dirent *directp;
X  struct oldproc *op;
X  static struct timeval lasttime =
X  {0L, 0L};
X  struct timeval thistime;
X  struct timezone thiszone;
X  double timediff;
X  double alpha, beta;
X  struct oldproc *endbase;
X
X  gettimeofday (&thistime, &thiszone);
X
X  /*
X   * To avoid divides, we keep times in nanoseconds.  This is
X   * scaled by 1e7 rather than 1e9 so that when we divide we
X   * get percent.
X   */
X  if (lasttime.tv_sec)
X    timediff = ((double) thistime.tv_sec * 1.0e7 +
X		((double) thistime.tv_usec * 10.0)) -
X      ((double) lasttime.tv_sec * 1.0e7 +
X       ((double) lasttime.tv_usec * 10.0));
X  else
X    timediff = 1.0e7;
X
X  /*
X     * constants for exponential average.  avg = alpha * new + beta * avg
X     * The goal is 50% decay in 30 sec.  However if the sample period
X     * is greater than 30 sec, there's not a lot we can do.
X     */
X  if (timediff < 30.0e7)
X    {
X      alpha = 0.5 * (timediff / 30.0e7);
X      beta = 1.0 - alpha;
X    }
X  else
X    {
X      alpha = 0.5;
X      beta = 0.5;
X    }
X
X  endbase = oldbase + oldprocs;
X  currproc = baseptr;
X
X
X  for (rewinddir (procdir); directp = readdir (procdir);)
X    {
X      int fd;
X
X      if ((fd = open (directp->d_name, O_RDONLY)) < 0)
X	continue;
X
X      currproc = &baseptr[numprocs];
X      if (ioctl (fd, PIOCPSINFO, currproc) < 0)
X	{
X	  (void) close (fd);
X	  continue;
X	}
X
X      /*
X       * SVr4 doesn't keep track of CPU% in the kernel, so we have
X       * to do our own.  See if we've heard of this process before.
X       * If so, compute % based on CPU since last time.
X       */
X      op = oldbase + HASH (currproc->pr_pid);
X      while (1)
X	{
X	  if (op->oldpid == -1)	/* not there */
X	    break;
X	  if (op->oldpid == currproc->pr_pid)
X	    {			/* found old data */
X	      percent_cpu (currproc) =
X		((currproc->pr_time.tv_sec * 1.0e9 +
X		  currproc->pr_time.tv_nsec)
X		 - op->oldtime) / timediff;
X	      weighted_cpu (currproc) =
X		op->oldpct * beta + percent_cpu (currproc) * alpha;
X
X	      break;
X	    }
X	  op++;			/* try next entry in hash table */
X	  if (op == endbase)	/* table wrapped around */
X	    op = oldbase;
X	}
X
X      /* Otherwise, it's new, so use all of its CPU time */
X      if (op->oldpid == -1)
X	{
X	  if (lasttime.tv_sec)
X	    {
X	      percent_cpu (currproc) =
X		(currproc->pr_time.tv_sec * 1.0e9 +
X		 currproc->pr_time.tv_nsec) / timediff;
X	      weighted_cpu (currproc) =
X		percent_cpu (currproc);
X	    }
X	  else
X	    {			/* first screen -- no difference is possible */
X	      percent_cpu (currproc) = 0.0;
X	      weighted_cpu (currproc) = 0.0;
X	    }
X	}
X
X      numprocs++;
X      (void) close (fd);
X    }
X
X  if (nproc != numprocs)
X    nproc = numprocs;
X
X  /*
X   * Save current CPU time for next time around
X   * For the moment recreate the hash table each time, as the code
X   * is easier that way.
X   */
X  oldprocs = 2 * nproc;
X  endbase = oldbase + oldprocs;
X  for (op = oldbase; op < endbase; op++)
X    op->oldpid = -1;
X  for (i = 0, currproc = baseptr;
X       i < nproc;
X     i++, currproc = (struct prpsinfo *) ((char *) currproc + PRPSINFOSIZE))
X    {
X      /* find an empty spot */
X      op = oldbase + HASH (currproc->pr_pid);
X      while (1)
X	{
X	  if (op->oldpid == -1)
X	    break;
X	  op++;
X	  if (op == endbase)
X	    op = oldbase;
X	}
X      op->oldpid = currproc->pr_pid;
X      op->oldtime = (currproc->pr_time.tv_sec * 1.0e9 +
X		     currproc->pr_time.tv_nsec);
X      op->oldpct = weighted_cpu (currproc);
X    }
X  lasttime = thistime;
X
X}
X
END_OF_FILE
if test 18699 -ne `wc -c <'top-3.4/machine/m_irix5.c'`; then
    echo shar: \"'top-3.4/machine/m_irix5.c'\" unpacked with wrong size!
fi
# end of 'top-3.4/machine/m_irix5.c'
fi
if test -f 'top-3.4/machine/m_ncr3000.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'top-3.4/machine/m_ncr3000.c'\"
else
echo shar: Extracting \"'top-3.4/machine/m_ncr3000.c'\" \(18818 characters\)
sed "s/^X//" >'top-3.4/machine/m_ncr3000.c' <<'END_OF_FILE'
X/*
X * top - a top users display for Unix
X *
X * SYNOPSIS:  For NCR 3000 series systems Release 2.00.02 and above -
X *	works on 2.03.00 and earlier (and probably later) OS releases.
X * 	(Intel based System V Release 4)
X *
X * DESCRIPTION:
X *      System V release 4     for NCR 3000 series OS Rel 02.03.00 and above
X *
X * LIBS:  -lelf
X *
X * AUTHORS:  Andrew Herbert     <andrew@werple.apana.org.au>
X *           Robert Boucher     <boucher@sofkin.ca>
X *           Jeff Janvrin	<jeff.janvrin@columbiasc.ncr.com>
X *                              did the port to statfs (2.03)
X */
X
X#include "top.h"
X#include "machine.h"
X#include "utils.h"
X#include <stdio.h>
X#include <fcntl.h>
X#include <unistd.h>
X#include <stdlib.h>
X#include <errno.h>
X#include <dirent.h>
X#include <nlist.h>
X#include <string.h>
X#include <sys/types.h>
X#include <sys/stat.h>
X#include <sys/param.h>
X#include <sys/procfs.h>
X#include <sys/sysinfo.h>
X#include <sys/sysmacros.h>
X#include <sys/vmmeter.h>
X#include <vm/anon.h>
X#include <sys/priocntl.h>
X#include <sys/rtpriocntl.h>
X#include <sys/tspriocntl.h>
X#include <sys/procset.h>
X#include <sys/var.h>
X
X#define UNIX "/stand/unix"
X#define KMEM "/dev/kmem"
X#define PROCFS "/proc"
X#define CPUSTATES	5
X
X#ifndef PRIO_MAX
X#define PRIO_MAX	20
X#endif
X#ifndef PRIO_MIN
X#define PRIO_MIN	-20
X#endif
X
X#ifndef FSCALE
X#define FSHIFT  8		/* bits to right of fixed binary point */
X#define FSCALE  (1<<FSHIFT)
X#endif
X
X#define loaddouble(x) ((double)(x) / FSCALE)
X#define percent_cpu(x) ((double)(x)->pr_cpu / FSCALE)
X#define weighted_cpu(pct, pp) ( ((pp)->pr_time.tv_sec) == 0 ? 0.0 : \
X        ((pp)->pr_cpu) / ((pp)->pr_time.tv_sec) )
X#define pagetok(size) ctob(size) >> LOG1024
X
X/* definitions for the index in the nlist array */
X#define X_AVENRUN	0
X#define X_MPID		1
X#define X_V		2
X#define X_NPROC		3
X#define X_ANONINFO	4
X#define X_TOTAL		5
X#define X_SYSINFO	6
X
Xstatic struct nlist nlst[] =
X{
X{"avenrun"},			/* 0 */
X{"mpid"},			/* 1 */
X{"v"},			/* 2 */
X{"nproc"},			/* 3 */
X{"anoninfo"},			/* 4 */
X{"total"},			/* 5 */
X{"sysinfo"},			/* 6 */
X{NULL}
X};
X
Xstatic unsigned long avenrun_offset;
Xstatic unsigned long mpid_offset;
Xstatic unsigned long nproc_offset;
Xstatic unsigned long anoninfo_offset;
Xstatic unsigned long total_offset;
Xstatic unsigned long sysinfo_offset;
X
X/* get_process_info passes back a handle.  This is what it looks like: */
X
Xstruct handle
X  {
X    struct prpsinfo **next_proc;/* points to next valid proc pointer */
X    int remaining;		/* number of pointers remaining */
X  };
X
X/*
X *  These definitions control the format of the per-process area
X */
X
Xstatic char header[] =
X"  PID X        PRI NICE  SIZE   RES STATE   TIME   WCPU    CPU COMMAND";
X/* 0123456   -- field to fill in starts at header+6 */
X#define UNAME_START 6
X#define Proc_format \
X	"%5d %-8.8s %3d %4d %5s %5s %-5s %6s %3d.0%% %5.2f%% %.16s"
X
Xchar *state_abbrev[] =
X{"", "sleep", "run", "zombie", "stop", "start", "cpu", "swap"};
X
Xint process_states[8];
Xchar *procstatenames[] =
X{
X  "", " sleeping, ", " running, ", " zombie, ", " stopped, ",
X  " starting, ", " on cpu, ", " swapped, ",
X  NULL
X};
X
Xint cpu_states[CPUSTATES];
Xchar *cpustatenames[] =
X{"idle", "user", "kernel", "wait", "swap", NULL};
X
X/* these are for detailing the memory statistics */
X
Xint memory_stats[5];
Xchar *memorynames[] =
X{"K real, ", "K active, ", "K free, ", "K swap, ", "K free swap", NULL};
X
Xstatic int kmem = -1;
Xstatic int nproc;
Xstatic int bytes;
Xstatic int use_stats = 0;
Xstatic struct prpsinfo *pbase;
Xstatic struct prpsinfo **pref;
Xstatic DIR *procdir;
X
X/* useful externals */
Xextern int errno;
Xextern char *sys_errlist[];
Xextern char *myname;
Xextern int check_nlist ();
Xextern int getkval ();
Xextern void perror ();
Xextern void getptable ();
Xextern void quit ();
Xextern int nlist ();
X
Xint
Xmachine_init (struct statics *statics)
X  {
X    static struct var v;
X
X    /* fill in the statics information */
X    statics->procstate_names = procstatenames;
X    statics->cpustate_names = cpustatenames;
X    statics->memory_names = memorynames;
X
X    /* get the list of symbols we want to access in the kernel */
X    if (nlist (UNIX, nlst))
X      {
X	(void) fprintf (stderr, "Unable to nlist %s\n", UNIX);
X	return (-1);
X      }
X
X    /* make sure they were all found */
X    if (check_nlist (nlst) > 0)
X      return (-1);
X
X    /* open kernel memory */
X    if ((kmem = open (KMEM, O_RDONLY)) == -1)
X      {
X	perror (KMEM);
X	return (-1);
X      }
X
X    /* get the symbol values out of kmem */
X    /* NPROC Tuning parameter for max number of processes */
X    (void) getkval (nlst[X_V].n_value, (int *) &v, sizeof (struct var), nlst[X_V].n_name);
X    nproc = v.v_proc;
X
X    /* stash away certain offsets for later use */
X    mpid_offset = nlst[X_MPID].n_value;
X    nproc_offset = nlst[X_NPROC].n_value;
X    avenrun_offset = nlst[X_AVENRUN].n_value;
X    anoninfo_offset = nlst[X_ANONINFO].n_value;
X    total_offset = nlst[X_TOTAL].n_value;
X/* JJ this may need to be changed */
X    sysinfo_offset = nlst[X_SYSINFO].n_value;
X
X    /* allocate space for proc structure array and array of pointers */
X    bytes = nproc * sizeof (struct prpsinfo);
X    pbase = (struct prpsinfo *) malloc (bytes);
X    pref = (struct prpsinfo **) malloc (nproc * sizeof (struct prpsinfo *));
X
X    /* Just in case ... */
X    if (pbase == (struct prpsinfo *) NULL || pref == (struct prpsinfo **) NULL)
X      {
X	(void) fprintf (stderr, "%s: can't allocate sufficient memory\n", myname);
X	return (-1);
X      }
X
X    if (!(procdir = opendir (PROCFS)))
X      {
X	(void) fprintf (stderr, "Unable to open %s\n", PROCFS);
X	return (-1);
X      }
X
X    if (chdir (PROCFS))
X      {				/* handy for later on when we're reading it */
X	(void) fprintf (stderr, "Unable to chdir to %s\n", PROCFS);
X	return (-1);
X      }
X
X    /* all done! */
X    return (0);
X  }
X
Xchar *
Xformat_header (char *uname_field)
X{
X  register char *ptr;
X
X  ptr = header + UNAME_START;
X  while (*uname_field != '\0')
X    *ptr++ = *uname_field++;
X
X  return (header);
X}
X
Xvoid
Xget_system_info (struct system_info *si)
X{
X  long avenrun[3];
X  struct sysinfo sysinfo;
X  static struct sysinfo *mpinfo = NULL;	/* array, per-processor sysinfo structures. */
X  struct vmtotal total;
X  struct anoninfo anoninfo;
X  static time_t cp_old[CPUSTATES];
X  static time_t cp_diff[CPUSTATES];	/* for cpu state percentages */
X  static int num_cpus;
X  static int fd_cpu = 0;
X  register int i;
X
X  if ( use_stats == 1) {
X    if ( fd_cpu == 0 ) {
X      if ((fd_cpu = open("/stats/cpuinfo", O_RDONLY)) == -1) {
X        (void) fprintf (stderr, "%s: Open of /stats/cpuinfo failed\n", myname);
X	quit(2);
X      }
X      if (read(fd_cpu, &num_cpus, sizeof(int)) != sizeof(int)) {
X        (void) fprintf (stderr, "%s: Read of /stats/cpuinfo failed\n", myname);
X	quit(2);
X      }
X      close(fd_cpu);
X    }
X    if (mpinfo == NULL) {
X      mpinfo = (struct sysinfo *)calloc(num_cpus, sizeof(mpinfo[0]));
X      if (mpinfo == NULL) {
X        (void) fprintf (stderr, "%s: can't allocate space for per-processor sysinfos\n", myname);
X        quit(12);
X      }
X    }
X    /* Read the per cpu sysinfo structures into mpinfo struct. */
X    read_sysinfos(num_cpus, mpinfo);
X    /* Add up all of the percpu sysinfos to get global sysinfo */
X    sysinfo_data(num_cpus, &sysinfo, mpinfo);
X  } else {
X    (void) getkval (sysinfo_offset, &sysinfo, sizeof (struct sysinfo), "sysinfo");
X  }
X
X  /* convert cp_time counts to percentages */
X  (void) percentages (CPUSTATES, cpu_states, sysinfo.cpu, cp_old, cp_diff);
X
X  /* get mpid -- process id of last process */
X  (void) getkval (mpid_offset, &(si->last_pid), sizeof (si->last_pid),
X		  "mpid");
X
X  /* get load average array */
X  (void) getkval (avenrun_offset, (int *) avenrun, sizeof (avenrun), "avenrun");
X
X  /* convert load averages to doubles */
X  for (i = 0; i < 3; i++)
X    si->load_avg[i] = loaddouble (avenrun[i]);
X
X  /* get total -- systemwide main memory usage structure */
X  (void) getkval (total_offset, (int *) (&total), sizeof (total), "total");
X  /* convert memory stats to Kbytes */
X  memory_stats[0] = pagetok (total.t_rm);
X  memory_stats[1] = pagetok (total.t_arm);
X  memory_stats[2] = pagetok (total.t_free);
X  (void) getkval (anoninfo_offset, (int *) (&anoninfo), sizeof (anoninfo),
X		  "anoninfo");
X  memory_stats[3] = pagetok (anoninfo.ani_max - anoninfo.ani_free);
X  memory_stats[4] = pagetok (anoninfo.ani_max - anoninfo.ani_resv);
X
X  /* set arrays and strings */
X  si->cpustates = cpu_states;
X  si->memory = memory_stats;
X}
X
Xstatic struct handle handle;
X
Xcaddr_t
Xget_process_info (
X		   struct system_info *si,
X		   struct process_select *sel,
X		   int (*compare) ())
X{
X  register int i;
X  register int total_procs;
X  register int active_procs;
X  register struct prpsinfo **prefp;
X  register struct prpsinfo *pp;
X
X  /* these are copied out of sel for speed */
X  int show_idle;
X  int show_system;
X  int show_uid;
X
X  /* Get current number of processes */
X  (void) getkval (nproc_offset, (int *) (&nproc), sizeof (nproc), "nproc");
X
X  /* read all the proc structures */
X  getptable (pbase);
X
X  /* get a pointer to the states summary array */
X  si->procstates = process_states;
X
X  /* set up flags which define what we are going to select */
X  show_idle = sel->idle;
X  show_system = sel->system;
X  show_uid = sel->uid != -1;
X
X  /* count up process states and get pointers to interesting procs */
X  total_procs = 0;
X  active_procs = 0;
X  (void) memset (process_states, 0, sizeof (process_states));
X  prefp = pref;
X
X  for (pp = pbase, i = 0; i < nproc; pp++, i++)
X    {
X      /*
X	 *  Place pointers to each valid proc structure in pref[].
X	 *  Process slots that are actually in use have a non-zero
X	 *  status field.  Processes with SSYS set are system
X	 *  processes---these get ignored unless show_sysprocs is set.
X	 */
X      if (pp->pr_state != 0 &&
X	  (show_system || ((pp->pr_flag & SSYS) == 0)))
X	{
X	  total_procs++;
X	  process_states[pp->pr_state]++;
X	  if ((!pp->pr_zomb) &&
X	      (show_idle || (pp->pr_state == SRUN) || (pp->pr_state == SONPROC)) &&
X	      (!show_uid || pp->pr_uid == (uid_t) sel->uid))
X	    {
X	      *prefp++ = pp;
X	      active_procs++;
X	    }
X	}
X    }
X
X  /* if requested, sort the "interesting" processes */
X  if (compare != NULL)
X      qsort ((char *) pref, active_procs, sizeof (struct prpsinfo *), compare);
X
X  /* remember active and total counts */
X  si->p_total = total_procs;
X  si->p_active = active_procs;
X
X  /* pass back a handle */
X  handle.next_proc = pref;
X  handle.remaining = active_procs;
X  return ((caddr_t) & handle);
X}
X
Xchar fmt[MAX_COLS];			/* static area where result is built */
X
Xchar *
Xformat_next_process (
X		      caddr_t handle,
X		      char *(*get_userid) ())
X{
X  register struct prpsinfo *pp;
X  struct handle *hp;
X  register long cputime;
X  register double pctcpu;
X
X  /* find and remember the next proc structure */
X  hp = (struct handle *) handle;
X  pp = *(hp->next_proc++);
X  hp->remaining--;
X
X  /* get the cpu usage and calculate the cpu percentages */
X  cputime = pp->pr_time.tv_sec;
X  pctcpu = percent_cpu (pp);
X
X  /* format this entry */
X  (void) sprintf (fmt,
X		  Proc_format,
X		  pp->pr_pid,
X		  (*get_userid) (pp->pr_uid),
X		  pp->pr_pri - PZERO,
X		  pp->pr_nice - NZERO,
X		  format_k(pagetok (pp->pr_size)),
X		  format_k(pagetok (pp->pr_rssize)),
X		  state_abbrev[pp->pr_state],
X		  format_time(cputime),
X		  (pp->pr_cpu & 0377),
X		  100.0 * pctcpu,
X		  pp->pr_fname);
X
X  /* return the result */
X  return (fmt);
X}
X
X/*
X * check_nlist(nlst) - checks the nlist to see if any symbols were not
X *		found.  For every symbol that was not found, a one-line
X *		message is printed to stderr.  The routine returns the
X *		number of symbols NOT found.
X */
Xint
Xcheck_nlist (register struct nlist *nlst)
X{
X  register int i;
X  struct stat stat_buf;
X
X  /* check to see if we got ALL the symbols we requested */
X  /* this will write one line to stderr for every symbol not found */
X
X  i = 0;
X  while (nlst->n_name != NULL)
X    {
X      if (nlst->n_type == 0)
X	{
X	  if (strcmp("sysinfo", nlst->n_name) == 0)
X	    {
X		/* check to see if /stats file system exists. If so, 	*/
X		/* ignore error. 					*/
X		if ( !((stat("/stats/sysinfo", &stat_buf) == 0) && 
X		  (stat_buf.st_mode & S_IFREG)) )
X		  {
X		    (void) fprintf (stderr, "kernel: no symbol named `%s'\n", nlst->n_name);
X		    i = 1;
X		  } else {
X		    use_stats = 1;
X		  }
X	    } else {
X
X	      /* this one wasn't found */
X	      (void) fprintf (stderr, "kernel: no symbol named `%s'\n", nlst->n_name);
X	      i = 1;
X	    }
X	}
X      nlst++;
X    }
X  return (i);
X}
X
X
X/*
X *  getkval(offset, ptr, size, refstr) - get a value out of the kernel.
X *	"offset" is the byte offset into the kernel for the desired value,
X *  	"ptr" points to a buffer into which the value is retrieved,
X *  	"size" is the size of the buffer (and the object to retrieve),
X *  	"refstr" is a reference string used when printing error meessages,
X *	    if "refstr" starts with a '!', then a failure on read will not
X *  	    be fatal (this may seem like a silly way to do things, but I
X *  	    really didn't want the overhead of another argument).
X *
X */
Xint
Xgetkval (
X	  unsigned long offset,
X	  int *ptr,
X	  int size,
X	  char *refstr)
X{
X  if (lseek (kmem, (long) offset, 0) == -1)
X    {
X      if (*refstr == '!')
X	refstr++;
X      (void) fprintf (stderr, "%s: lseek to %s: %s\n",
X		      myname, refstr, sys_errlist[errno]);
X      quit (22);
X    }
X  if (read (kmem, (char *) ptr, size) == -1)
X    if (*refstr == '!')
X      /* we lost the race with the kernel, process isn't in memory */
X      return (0);
X    else
X      {
X	(void) fprintf (stderr, "%s: reading %s: %s\n",
X			myname, refstr, sys_errlist[errno]);
X	quit (23);
X      }
X  return (1);
X}
X
X/* comparison routine for qsort */
X
X/*
X *  proc_compare - comparison function for "qsort"
X *	Compares the resource consumption of two processes using five
X *  	distinct keys.  The keys (in descending order of importance) are:
X *  	percent cpu, cpu ticks, state, resident set size, total virtual
X *  	memory usage.  The process states are ordered as follows (from least
X *  	to most important):  WAIT, zombie, sleep, stop, start, run.  The
X *  	array declaration below maps a process state index into a number
X *  	that reflects this ordering.
X */
X
X
Xunsigned char sorted_state[] =
X{
X  0,				/* not used		*/
X  3,				/* sleep		*/
X  6,				/* run			*/
X  2,				/* zombie		*/
X  4,				/* stop			*/
X  5,				/* start		*/
X  7,				/* run on a processor   */
X  1				/* being swapped (WAIT)	*/
X};
X
Xint
Xproc_compare (
X	       struct prpsinfo **pp1,
X	       struct prpsinfo **pp2)
X{
X    register struct prpsinfo *p1;
X    register struct prpsinfo *p2;
X    register long result;
X
X    /* remove one level of indirection */
X    p1 = *pp1;
X    p2 = *pp2;
X
X    /* compare percent cpu (pctcpu) */
X    if ((result = (long) (p2->pr_cpu - p1->pr_cpu)) == 0)
X      {
X	/* use cpticks to break the tie */
X	if ((result = p2->pr_time.tv_sec - p1->pr_time.tv_sec) == 0)
X	  {
X	    /* use process state to break the tie */
X	    if ((result = (long) (sorted_state[p2->pr_state] -
X				  sorted_state[p1->pr_state])) == 0)
X	      {
X		/* use priority to break the tie */
X		if ((result = p2->pr_oldpri - p1->pr_oldpri) == 0)
X		  {
X		    /* use resident set size (rssize) to break the tie */
X		    if ((result = p2->pr_rssize - p1->pr_rssize) == 0)
X		      {
X			/* use total memory to break the tie */
X			result = (p2->pr_size - p1->pr_size);
X		      }
X		  }
X	      }
X	  }
X      }
X    return (result);
X  }
X
X/*
Xget process table
X*/
Xvoid
Xgetptable (struct prpsinfo *baseptr)
X{
X  struct prpsinfo *currproc;	/* pointer to current proc structure	*/
X  int numprocs = 0;
X  struct dirent *direntp;
X
X  for (rewinddir (procdir); direntp = readdir (procdir);)
X    {
X      int fd;
X
X      if ((fd = open (direntp->d_name, O_RDONLY)) < 0)
X	continue;
X
X      currproc = &baseptr[numprocs];
X      if (ioctl (fd, PIOCPSINFO, currproc) < 0)
X	{
X	  (void) close (fd);
X	  continue;
X	}
X
X      numprocs++;
X      (void) close (fd);
X    }
X
X  if (nproc != numprocs)
X    nproc = numprocs;
X}
X
X/* return the owner of the specified process, for use in commands.c as we're
X   running setuid root */
Xuid_t
Xproc_owner (pid_t pid)
X{
X  register struct prpsinfo *p;
X  int i;
X  for (i = 0, p = pbase; i < nproc; i++, p++)
X    if (p->pr_pid == pid)
X      return (p->pr_uid);
X
X  return (-1);
X}
X
Xint
Xsetpriority (int dummy, int who, int niceval)
X{
X  int scale;
X  int prio;
X  pcinfo_t pcinfo;
X  pcparms_t pcparms;
X  tsparms_t *tsparms;
X
X  strcpy (pcinfo.pc_clname, "TS");
X  if (priocntl (0, 0, PC_GETCID, (caddr_t) & pcinfo) == -1)
X    return (-1);
X
X  prio = niceval;
X  if (prio > PRIO_MAX)
X    prio = PRIO_MAX;
X  else if (prio < PRIO_MIN)
X    prio = PRIO_MIN;
X
X  tsparms = (tsparms_t *) pcparms.pc_clparms;
X  scale = ((tsinfo_t *) pcinfo.pc_clinfo)->ts_maxupri;
X  tsparms->ts_uprilim = tsparms->ts_upri = -(scale * prio) / 20;
X  pcparms.pc_cid = pcinfo.pc_cid;
X
X  if (priocntl (P_PID, who, PC_SETPARMS, (caddr_t) & pcparms) == -1)
X    return (-1);
X
X  return (0);
X}
X
X/****************************************************************
X * read_sysinfos() -						*
X *	Read all of the CPU specific sysinfo sturctures in from	*
X *	the /stats file system.					*
X ****************************************************************/
Xread_sysinfos(num_cpus, buf)
X	int num_cpus;
X	struct sysinfo	*buf;
X{
X
X	static int	fd1=0;	/* file descriptor for /stats/sysinfo */
X	int		read_sz;
X
X	/* Open /stats/sysinfo one time only and leave it open */
X	if (fd1==0) { 
X		if ((fd1 = open("/stats/sysinfo", O_RDONLY)) == -1)
X			(void) fprintf (stderr, "%s: Open of /stats/sysinfo failed\n", myname);
X	}
X	/* reset the read pointer to the beginning of the file */
X	if (lseek(fd1, 0L, SEEK_SET) == -1)
X		(void) fprintf (stderr, "%s: lseek to beginning of /stats/sysinfo failed\n", myname);
X	read_sz = num_cpus * sizeof(buf[0]);
X	if (read(fd1, buf, read_sz) != read_sz)
X		(void) fprintf (stderr, "%s: Read of /stats/sysinfo failed\n", myname);
X}
X
X/****************************************************************
X * sysinfo_data() -						*
X *	Add up all of the CPU specific sysinfo sturctures to	*
X *	make the GLOBAL sysinfo.				*
X ****************************************************************/
Xsysinfo_data(num_cpus, global_si, percpu_si)
X	int num_cpus;
X	struct sysinfo	*global_si;
X	struct sysinfo	*percpu_si;
X{
X	struct sysinfo	*percpu_p;
X	int		cpu, i, *global, *src;
X
X	/* null out the global statistics from last sample */
X	memset(global_si, 0, sizeof(struct sysinfo));
X
X	percpu_p = (struct sysinfo *)percpu_si;
X	for(cpu = 0; cpu < num_cpus; cpu++) {
X		global = (int *)global_si;
X		src = (int *)percpu_p;
X
X		/* assume sysinfo ends on an int boundary */
X		/* Currently, all of the struct sysinfo members are the same
X		 * size as an int. If that changes, we may not be able to
X		 * do this. But this should be safe.
X		 */
X		for(i=0; i<sizeof(struct sysinfo)/sizeof(int); i++) {
X			*global++ += *src++;
X		}
X		percpu_p++;
X	}
X}
END_OF_FILE
if test 18818 -ne `wc -c <'top-3.4/machine/m_ncr3000.c'`; then
    echo shar: \"'top-3.4/machine/m_ncr3000.c'\" unpacked with wrong size!
fi
# end of 'top-3.4/machine/m_ncr3000.c'
fi
echo shar: End of archive 12 \(of 22\).
cp /dev/null ark12isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 22 archives.
    echo "Now read README and INSTALL, then run Configure"
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0

