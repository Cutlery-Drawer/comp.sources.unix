Newsgroups: comp.sources.unix
From: wnl@groupsys.com (William Lefebvre)
Subject: v29i116: top-3.4 - top process display, V3.4, Part15/22
References: <1.841608857.22962@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: wnl@groupsys.com (William Lefebvre)
Posting-Number: Volume 29, Issue 116
Archive-Name: top-3.4/part15

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 16 (of 22)."
# Contents:  top-3.4/machine/m_ftx.c top-3.4/machine/m_sunos4mp.c
# Wrapped by lefebvre@acapulco on Fri Aug 30 12:35:51 1996
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'top-3.4/machine/m_ftx.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'top-3.4/machine/m_ftx.c'\"
else
echo shar: Extracting \"'top-3.4/machine/m_ftx.c'\" \(21257 characters\)
sed "s/^X//" >'top-3.4/machine/m_ftx.c' <<'END_OF_FILE'
X/*
X * top - a top users display for Unix
X *
X * SYNOPSIS:  For FTX based System V Release 4
X *
X * DESCRIPTION:
X *      System V release 4.0.x for FTX (FTX 2.3 and greater)
X *
X * LIBS:  -lelf
X *
X * AUTHORS:  Andrew Herbert     <andrew@werple.apana.org.au>
X *           Robert Boucher     <boucher@sofkin.ca>
X *           Steve Scherf	<scherf@swdc.stratus.com>
X */
X
X#include <stdio.h>
X#include <fcntl.h>
X#include <unistd.h>
X#include <stdlib.h>
X#include <errno.h>
X#include <dirent.h>
X#include <nlist.h>
X#include <string.h>
X#include <sys/types.h>
X#include <sys/param.h>
X#include <sys/procfs.h>
X#include <sys/sysmacros.h>
X#include <sys/sysinfo.h>
X#include <sys/vmmeter.h>
X#include <vm/anon.h>
X#include <sys/priocntl.h>
X#include <sys/rtpriocntl.h>
X#include <sys/tspriocntl.h>
X#include <sys/procset.h>
X#include <sys/var.h>
X#include <sys/tuneable.h>
X#include <sys/fs/rf_acct.h>
X#include <sys/sar.h>
X#include <sys/ftx/dcm.h>
X
X#include "top.h"
X#include "machine.h"
X
X#define UNIX "/unix"
X#define KMEM "/dev/kmem"
X#define PROCFS "/proc"
X#define SAR "/dev/sar"
X#define CPUSTATES	5
X
X#ifndef PRIO_MAX
X#define PRIO_MAX	20
X#endif
X#ifndef PRIO_MIN
X#define PRIO_MIN	-20
X#endif
X
X#ifndef FSCALE
X#define FSHIFT  8		/* bits to right of fixed binary point */
X#define FSCALE  (1<<FSHIFT)
X#endif
X
X#define loaddouble(x) ((double)(x) / FSCALE)
X#define pagetok(size) ctob(size) >> LOG1024
X#define PRTOMS(pp) \
X	((pp)->pr_time.tv_sec * 1000) + ((pp)->pr_time.tv_nsec / 1000000)
X
X/* definitions for the index in the nlist array */
X#define X_AVENRUN	0
X#define X_MPID		1
X#define X_V		2
X#define X_NPROC		3
X#define X_ANONINFO	4
X#define X_TOTAL		5
X
Xstatic struct nlist nlst[] =
X{
X  {"avenrun"},			/* 0 */
X  {"mpid"},			/* 1 */
X  {"v"},			/* 2 */
X  {"nproc"},			/* 3 */
X  {"anoninfo"},			/* 4 */
X  {"total"},			/* 5 */
X  {NULL}
X};
X
Xstatic unsigned long avenrun_offset;
Xstatic unsigned long mpid_offset;
Xstatic unsigned long nproc_offset;
Xstatic unsigned long anoninfo_offset;
Xstatic unsigned long total_offset;
X
X/* get_process_info passes back a handle.  This is what it looks like: */
X
Xstruct handle
X  {
X    struct prpsinfo **next_proc;/* points to next valid proc pointer */
X    int remaining;		/* number of pointers remaining */
X  };
X
X#define MAXTIMEHIST	12
X#define HASHSZ		512	/* This must be a power of 2. */
X#define HASHMASK	(HASHSZ - 1)
X#define TF_USED		0x01
X#define TF_NEWPROC	0x02
X
X#define TD_HASH(pid) \
X	(timedata_t *)(&hash[(pid) & HASHMASK])
X
Xtypedef struct hash {
X	struct timedata *hnext;
X	struct timedata *hlast;
X} hash_t;
X
X/* data for CPU and WCPU fields */
Xtypedef struct timedata {
X	struct timedata *hnext;
X	struct timedata *hlast;
X	struct timedata *lnext;
X	struct timedata *llast;
X	pid_t pid;
X	char index;
X	char cnt;
X	char flags;
X	long hist[MAXTIMEHIST];
X	long time;
X	long ltime;
X} timedata_t;
X
X
X/*
X *  These definitions control the format of the per-process area
X */
X
Xstatic char header[] =
X"  PID X        PRI NICE   SIZE   RES STATE   TIME   WCPU    CPU COMMAND";
X/* 0123456   -- field to fill in starts at header+6 */
X#define UNAME_START 6
X#define Proc_format \
X	"%5d %-8.8s %3d %4d%6dK %4dK %-5s%4d:%02d %5.2f%% %5.2f%% %.16s"
X
Xchar *state_abbrev[] =
X{"", "sleep", "run", "zombie", "stop", "start", "cpu", "swap"};
X
Xint process_states[8];
Xchar *procstatenames[] =
X{
X  "", " sleeping, ", " running, ", " zombie, ", " stopped, ",
X  " starting, ", " on cpu, ", " swapped, ",
X  NULL
X};
X
Xint cpu_states[CPUSTATES];
Xchar *cpustatenames[] =
X{"idle", "user", "kernel", "wait", "swap", NULL};
X
X/* these are for detailing the memory statistics */
X
Xint memory_stats[5];
Xchar *memorynames[] =
X{"K real, ", "K active, ", "K free, ", "K swap, ", "K free swap", NULL};
X
Xstatic int kmem;
Xstatic int sar;
Xstatic int initted;
Xstatic int nproc;
Xstatic int bytes;
Xstatic struct prpsinfo *pbase;
Xstatic struct prpsinfo **pref;
Xstatic DIR *procdir;
Xstatic char cpu_state[MAX_LOG_CPU];
Xstatic struct sysinfo cpu_sysinfo[MAX_LOG_CPU];
Xstatic sar_percpu_args_t spa;
Xstatic timedata_t timedata;
Xstatic long total_time;
Xstatic double total_cpu;
Xstatic hash_t hash[HASHSZ];
X
X/* useful externals */
Xextern int errno;
Xextern char *sys_errlist[];
Xextern char *myname;
Xextern long percentages ();
Xextern int check_nlist ();
Xextern int getkval ();
Xextern void perror ();
Xextern void getptable ();
Xextern void quit ();
Xextern int nlist ();
X
X/* Prototypes. */
Xvoid getsysinfo(struct sysinfo *);
Xvoid add_time(struct prpsinfo *);
Xvoid get_cpu(struct prpsinfo *, double *, double *);
Xvoid clean_timedata(void);
Xtimedata_t *get_timedata(struct prpsinfo *);
X
X
Xint
Xmachine_init (struct statics *statics)
X  {
X    int i;
X    static struct var v;
X
X    /* fill in the statics information */
X    statics->procstate_names = procstatenames;
X    statics->cpustate_names = cpustatenames;
X    statics->memory_names = memorynames;
X
X    /* get the list of symbols we want to access in the kernel */
X    if (nlist (UNIX, nlst))
X      {
X	(void) fprintf (stderr, "Unable to nlist %s\n", UNIX);
X	return (-1);
X      }
X
X    /* make sure they were all found */
X    if (check_nlist (nlst) > 0)
X      return (-1);
X
X    /* open kernel memory */
X    if ((kmem = open (KMEM, O_RDONLY)) == -1)
X      {
X	perror (KMEM);
X	return (-1);
X      }
X
X    /* Open the sar driver device node. */
X    if ((sar = open(SAR, O_RDONLY)) == -1)
X      {
X        perror (SAR);
X        return (-1);
X      }
X
X
X    /* get the symbol values out of kmem */
X    /* NPROC Tuning parameter for max number of processes */
X    (void) getkval (nlst[X_V].n_value, &v, sizeof (struct var), nlst[X_V].n_name);
X    nproc = v.v_proc;
X
X    /* stash away certain offsets for later use */
X    mpid_offset = nlst[X_MPID].n_value;
X    nproc_offset = nlst[X_NPROC].n_value;
X    avenrun_offset = nlst[X_AVENRUN].n_value;
X    anoninfo_offset = nlst[X_ANONINFO].n_value;
X    total_offset = nlst[X_TOTAL].n_value;
X
X    /* allocate space for proc structure array and array of pointers */
X    bytes = nproc * sizeof (struct prpsinfo);
X    pbase = (struct prpsinfo *) malloc (bytes);
X    pref = (struct prpsinfo **) malloc (nproc * sizeof (struct prpsinfo *));
X
X    /* Just in case ... */
X    if (pbase == (struct prpsinfo *) NULL || pref == (struct prpsinfo **) NULL)
X      {
X	(void) fprintf (stderr, "%s: can't allocate sufficient memory\n", myname);
X	return (-1);
X      }
X
X    if (!(procdir = opendir (PROCFS)))
X      {
X	(void) fprintf (stderr, "Unable to open %s\n", PROCFS);
X	return (-1);
X      }
X
X    if (chdir (PROCFS))
X      {				/* handy for later on when we're reading it */
X	(void) fprintf (stderr, "Unable to chdir to %s\n", PROCFS);
X	return (-1);
X      }
X
X    /* Set up the pointers to the sysinfo data area. */
X    spa.uvcp = (caddr_t) &cpu_state[0];
X    spa.uvsp = (caddr_t) &cpu_sysinfo[0];
X
X    timedata.lnext = &timedata;
X    timedata.llast = &timedata;
X
X    for (i = 0; i < HASHSZ; i++) {
X      hash[i].hnext = (timedata_t *)&hash[i];
X      hash[i].hlast = (timedata_t *)&hash[i];
X    }
X
X    /* all done! */
X    return (0);
X  }
X
Xchar *
Xformat_header (char *uname_field)
X{
X  register char *ptr;
X
X  ptr = header + UNAME_START;
X  while (*uname_field != '\0')
X    *ptr++ = *uname_field++;
X
X  return (header);
X}
X
Xvoid
Xget_system_info (struct system_info *si)
X{
X  long avenrun[3];
X  struct sysinfo sysinfo;
X  struct vmtotal total;
X  struct anoninfo anoninfo;
X  static time_t cp_old[CPUSTATES];
X  static time_t cp_diff[CPUSTATES];	/* for cpu state percentages */
X  register int i;
X
X  getsysinfo(&sysinfo);
X
X  /* convert cp_time counts to percentages */
X  (void) percentages (CPUSTATES, cpu_states, sysinfo.cpu, cp_old, cp_diff);
X
X  /* Find total CPU utilization, as a fraction of 1. */
X  total_cpu = (cpu_states[CPU_USER] + cpu_states[CPU_KERNEL]) / 1000.0;
X
X  /* get mpid -- process id of last process */
X  (void) getkval (mpid_offset, &(si->last_pid), sizeof (si->last_pid),
X		  "mpid");
X
X  /* get load average array */
X  (void) getkval (avenrun_offset, (int *) avenrun, sizeof (avenrun), "avenrun");
X
X  /* convert load averages to doubles */
X  for (i = 0; i < 3; i++)
X    si->load_avg[i] = loaddouble (avenrun[i]);
X
X  /* get total -- systemwide main memory usage structure */
X  (void) getkval (total_offset, (int *) (&total), sizeof (total), "total");
X  /* convert memory stats to Kbytes */
X  memory_stats[0] = pagetok (total.t_rm);
X  memory_stats[1] = pagetok (total.t_arm);
X  memory_stats[2] = pagetok (total.t_free);
X  (void) getkval (anoninfo_offset, (int *) (&anoninfo), sizeof (anoninfo),
X		  "anoninfo");
X  memory_stats[3] = pagetok (anoninfo.ani_max - anoninfo.ani_free);
X  memory_stats[4] = pagetok (anoninfo.ani_max - anoninfo.ani_resv);
X
X  /* set arrays and strings */
X  si->cpustates = cpu_states;
X  si->memory = memory_stats;
X}
X
Xstatic struct handle handle;
X
Xcaddr_t
Xget_process_info (
X		   struct system_info *si,
X		   struct process_select *sel,
X		   int (*compare) ())
X{
X  register int i;
X  register int total_procs;
X  register int active_procs;
X  register struct prpsinfo **prefp;
X  register struct prpsinfo *pp;
X
X  /* these are copied out of sel for speed */
X  int show_idle;
X  int show_system;
X  int show_uid;
X
X  /* Get current number of processes */
X  (void) getkval (nproc_offset, (int *) (&nproc), sizeof (nproc), "nproc");
X
X  /* read all the proc structures */
X  getptable (pbase);
X
X  /* get a pointer to the states summary array */
X  si->procstates = process_states;
X
X  /* set up flags which define what we are going to select */
X  show_idle = sel->idle;
X  show_system = sel->system;
X  show_uid = sel->uid != -1;
X
X  /* count up process states and get pointers to interesting procs */
X  total_procs = 0;
X  active_procs = 0;
X  total_time = 0;
X  (void) memset (process_states, 0, sizeof (process_states));
X  prefp = pref;
X
X  clean_timedata();
X
X  for (pp = pbase, i = 0; i < nproc; pp++, i++)
X    {
X      /*
X	 *  Place pointers to each valid proc structure in pref[].
X	 *  Process slots that are actually in use have a non-zero
X	 *  status field.  Processes with SSYS set are system
X	 *  processes---these get ignored unless show_sysprocs is set.
X	 */
X      if (pp->pr_state != 0 &&
X	  (show_system || ((pp->pr_flag & SSYS) == 0)))
X	{
X	  total_procs++;
X	  process_states[pp->pr_state]++;
X	  if ((!pp->pr_zomb) &&
X	      (show_idle || (pp->pr_state == SRUN) || (pp->pr_state == SONPROC)) &&
X	      (!show_uid || pp->pr_uid == (uid_t) sel->uid))
X	    {
X	      *prefp++ = pp;
X	      active_procs++;
X	    }
X	}
X
X      if (pp->pr_state != 0)
X        add_time(pp);
X    }
X
X  /* Note that we've run this at least once. */
X  initted++;
X
X  /* if requested, sort the "interesting" processes */
X  if (compare != NULL)
X      qsort ((char *) pref, active_procs, sizeof (struct prpsinfo *), compare);
X
X  /* remember active and total counts */
X  si->p_total = total_procs;
X  si->p_active = active_procs;
X
X  /* pass back a handle */
X  handle.next_proc = pref;
X  handle.remaining = active_procs;
X  return ((caddr_t) & handle);
X}
X
Xchar fmt[128];			/* static area where result is built */
X
Xchar *
Xformat_next_process (
X		      caddr_t handle,
X		      char *(*get_userid) ())
X{
X  register struct prpsinfo *pp;
X  struct handle *hp;
X  register long cputime;
X  double pctcpu;
X  double pctwcpu;
X
X  /* find and remember the next proc structure */
X  hp = (struct handle *) handle;
X  pp = *(hp->next_proc++);
X  hp->remaining--;
X
X  /* get the cpu usage and calculate the cpu percentages */
X  cputime = pp->pr_time.tv_sec;
X  get_cpu(pp, &pctcpu, &pctwcpu);
X
X  /* format this entry */
X  (void) sprintf (fmt,
X		  Proc_format,
X		  pp->pr_pid,
X		  (*get_userid) (pp->pr_uid),
X		  pp->pr_pri - PZERO,
X		  pp->pr_nice - NZERO,
X		  pagetok (pp->pr_size),
X		  pagetok (pp->pr_rssize),
X		  state_abbrev[pp->pr_state],
X		  cputime / 60l,
X		  cputime % 60l,
X		  pctwcpu,
X		  pctcpu,
X		  pp->pr_fname);
X
X  /* return the result */
X  return (fmt);
X}
X
X/*
X * check_nlist(nlst) - checks the nlist to see if any symbols were not
X *		found.  For every symbol that was not found, a one-line
X *		message is printed to stderr.  The routine returns the
X *		number of symbols NOT found.
X */
Xint
Xcheck_nlist (register struct nlist *nlst)
X{
X  register int i;
X
X  /* check to see if we got ALL the symbols we requested */
X  /* this will write one line to stderr for every symbol not found */
X
X  i = 0;
X  while (nlst->n_name != NULL)
X    {
X      if (nlst->n_type == 0)
X	{
X	  /* this one wasn't found */
X	  (void) fprintf (stderr, "kernel: no symbol named `%s'\n", nlst->n_name);
X	  i = 1;
X	}
X      nlst++;
X    }
X  return (i);
X}
X
X
X/*
X *  getkval(offset, ptr, size, refstr) - get a value out of the kernel.
X *	"offset" is the byte offset into the kernel for the desired value,
X *  	"ptr" points to a buffer into which the value is retrieved,
X *  	"size" is the size of the buffer (and the object to retrieve),
X *  	"refstr" is a reference string used when printing error meessages,
X *	    if "refstr" starts with a '!', then a failure on read will not
X *  	    be fatal (this may seem like a silly way to do things, but I
X *  	    really didn't want the overhead of another argument).
X *
X */
Xint
Xgetkval (
X	  unsigned long offset,
X	  int *ptr,
X	  int size,
X	  char *refstr)
X{
X  if (lseek (kmem, (long) offset, 0) == -1)
X    {
X      if (*refstr == '!')
X	refstr++;
X      (void) fprintf (stderr, "%s: lseek to %s: %s\n",
X		      myname, refstr, sys_errlist[errno]);
X      quit (22);
X    }
X  if (read (kmem, (char *) ptr, size) == -1)
X    if (*refstr == '!')
X      /* we lost the race with the kernel, process isn't in memory */
X      return (0);
X    else
X      {
X	(void) fprintf (stderr, "%s: reading %s: %s\n",
X			myname, refstr, sys_errlist[errno]);
X	quit (23);
X      }
X  return (1);
X}
X
X/* comparison routine for qsort */
X
X/*
X *  proc_compare - comparison function for "qsort"
X *	Compares the resource consumption of two processes using five
X *  	distinct keys.  The keys (in descending order of importance) are:
X *  	percent cpu, cpu ticks, state, resident set size, total virtual
X *  	memory usage.  The process states are ordered as follows (from least
X *  	to most important):  WAIT, zombie, sleep, stop, start, run.  The
X *  	array declaration below maps a process state index into a number
X *  	that reflects this ordering.
X */
X
X
Xunsigned char sorted_state[] =
X{
X  0,				/* not used		*/
X  3,				/* sleep		*/
X  6,				/* run			*/
X  2,				/* zombie		*/
X  4,				/* stop			*/
X  5,				/* start		*/
X  7,				/* run on a processor   */
X  1				/* being swapped (WAIT)	*/
X};
X
Xint
Xproc_compare (
X	       struct prpsinfo **pp1,
X	       struct prpsinfo **pp2)
X  {
X    register struct prpsinfo *p1;
X    register struct prpsinfo *p2;
X    register long result;
X    register long d1;
X    register long d2;
X    register timedata_t *td;
X
X    /* remove one level of indirection */
X    p1 = *pp1;
X    p2 = *pp2;
X
X    td = get_timedata(p1);
X    if (td->ltime == -1)
X      d1 = 0;
X    else
X      d1 = td->time - td->ltime;
X
X    td = get_timedata(p2);
X    if (td->ltime == -1)
X      d2 = 0;
X    else
X      d2 = td->time - td->ltime;
X
X    /* compare cpu usage */
X    if ((result = d2 - d1) == 0)
X      {
X	/* use cpticks to break the tie */
X	if ((result = (PRTOMS(p2) - PRTOMS(p1))) == 0)
X	  {
X	    /* use process state to break the tie */
X	    if ((result = (long) (sorted_state[p2->pr_state] -
X				  sorted_state[p1->pr_state])) == 0)
X	      {
X		/* use priority to break the tie */
X		if ((result = p2->pr_oldpri - p1->pr_oldpri) == 0)
X		  {
X		    /* use resident set size (rssize) to break the tie */
X		    if ((result = p2->pr_rssize - p1->pr_rssize) == 0)
X		      {
X			/* use total memory to break the tie */
X			result = (p2->pr_size - p1->pr_size);
X		      }
X		  }
X	      }
X	  }
X      }
X    return (result);
X  }
X
X/*
Xget process table
X*/
Xvoid
Xgetptable (struct prpsinfo *baseptr)
X{
X  struct prpsinfo *currproc;	/* pointer to current proc structure	*/
X  int numprocs = 0;
X  struct dirent *direntp;
X
X  for (rewinddir (procdir); direntp = readdir (procdir);)
X    {
X      int fd;
X
X      if ((fd = open (direntp->d_name, O_RDONLY)) < 0)
X	continue;
X
X      currproc = &baseptr[numprocs];
X      if (ioctl (fd, PIOCPSINFO, currproc) < 0)
X	{
X	  (void) close (fd);
X	  continue;
X	}
X
X      numprocs++;
X      (void) close (fd);
X    }
X
X  if (nproc != numprocs)
X    nproc = numprocs;
X}
X
X/* return the owner of the specified process, for use in commands.c as we're
X   running setuid root */
Xuid_t
Xproc_owner (pid_t pid)
X{
X  register struct prpsinfo *p;
X  int i;
X  for (i = 0, p = pbase; i < nproc; i++, p++)
X    if (p->pr_pid == pid)
X      return (p->pr_uid);
X
X  return (-1);
X}
X
Xint
Xsetpriority (int dummy, int who, int niceval)
X{
X  int scale;
X  int prio;
X  pcinfo_t pcinfo;
X  pcparms_t pcparms;
X  tsparms_t *tsparms;
X
X  strcpy (pcinfo.pc_clname, "TS");
X  if (priocntl (0, 0, PC_GETCID, (caddr_t) & pcinfo) == -1)
X    return (-1);
X
X  prio = niceval;
X  if (prio > PRIO_MAX)
X    prio = PRIO_MAX;
X  else if (prio < PRIO_MIN)
X    prio = PRIO_MIN;
X
X  tsparms = (tsparms_t *) pcparms.pc_clparms;
X  scale = ((tsinfo_t *) pcinfo.pc_clinfo)->ts_maxupri;
X  tsparms->ts_uprilim = tsparms->ts_upri = -(scale * prio) / 20;
X  pcparms.pc_cid = pcinfo.pc_cid;
X
X  if (priocntl (P_PID, who, PC_SETPARMS, (caddr_t) & pcparms) == -1)
X    return (-1);
X
X  return (0);
X}
X
X
X/*
X * Per-process CPU calculation:
X *
X * We emulate actual % CPU usage calculation, since the statistics
X * kept by FTX are not valid for this purpose. We fake this calculation
X * by totalling the amount of CPU time used by all processes since the
X * last update, and dividing this into the CPU time used by the process
X * in question. For the WCPU value, we average the CPU calculations for the
X * process over the last td->cnt updates. This means that the first update
X * when starting top will always be 0% CPU (no big deal), and that WCPU will
X * be averaged over a varying amount of time (also no big deal). This is
X * probably the best we can do, since the kernel doesn't keep any of these
X * statistics itself.
X *
X * This method seems to yield good results. The only problems seem to be the
X * fact that the first update always shows 0%, and that the
X * sysinfo CPU data isn't always in sync with the per-process CPU usage
X * when a CPU-intensive process quits. This latter problem causes funny
X * results, because the remaining processes get credited with the residual
X * CPU time.
X *
X * This algorithm may seem CPU intensive, but it's actually very 
X * inexpensive. The expensive part is the ioctl call to the sar driver.
X * No amount of optimization in this program will reduce the sar overhead.
X */
X
Xvoid
Xgetsysinfo (struct sysinfo *sysinfo)
X{
X	register int i;
X	register int j;
X	register int cpus;
X
X	/* Get the per-CPU sysinfo data from sar. */
X	if(ioctl(sar, SAR_SYSINFO, &spa)) {
X		perror("ioctl(sar, SAR_SYSINFO)");
X		quit(24);
X	}
X
X	(void)memset((char *)sysinfo, 0, sizeof(struct sysinfo));
X
X	/* Average the state times to get systemwide values. */
X	for(i = 0, cpus = 0; i < MAX_LOG_CPU; i++) {
X		if(cpu_state[i] != SAR_CPU_RUNNING)
X			continue;
X
X		cpus++;
X
X		for(j = 0; j < 5; j++)
X			sysinfo->cpu[j] += cpu_sysinfo[i].cpu[j];
X	}
X
X	for(i = 0; i < 5; i++)
X		sysinfo->cpu[i] /= cpus;
X}
X
X
Xvoid
Xadd_time (struct prpsinfo *pp)
X{
X	register timedata_t *td;
X
X	td = get_timedata(pp);
X
X	td->flags |= TF_USED;
X
X	if(td->time == -1) {
X		td->time = PRTOMS(pp);
X
X		if(!(td->flags & TF_NEWPROC))
X			return;
X
X		td->flags &= ~TF_NEWPROC;
X		td->ltime = 0;
X	}
X	else {
X		td->ltime = td->time;
X		td->time = PRTOMS(pp);
X	}
X
X	/* Keep track of the time spent by all processes. */
X	total_time += td->time - td->ltime;
X}
X
X
Xvoid
Xget_cpu(struct prpsinfo *pp, double *cpu, double *wcpu)
X{
X	register int i;
X	register int j;
X	register long t;
X	register timedata_t *td;
X
X	td = get_timedata(pp);
X
X	/* No history, so return 0%. */
X	if(td->ltime == -1) {
X		*cpu = 0;
X		*wcpu = 0;
X		return;
X	}
X
X	i = td->index;
X	td->index = (i + 1) % MAXTIMEHIST;
X	td->cnt = MIN((td->cnt + 1), MAXTIMEHIST);
X
X	/* Compute CPU usage (time diff from last update / total cpu time). */
X	/* We don't want to div by 0. */
X	if(total_time == 0) {
X		td->hist[i] = 0;
X		*cpu = 0.0;
X	}
X	else {
X		t = (td->time - td->ltime) * 10000 / total_time * total_cpu;
X		td->hist[i] = t;
X		*cpu = t / 100.0;
X	}
X
X	/* Compute WCPU usage (average CPU % since oldest update). */
X	for(j = 0, t = 0; j < td->cnt; j++) {
X		t += td->hist[i];
X
X		i--;
X		if(i < 0)
X			i = MAXTIMEHIST - 1;
X	}
X	*wcpu = t / j / 100.0;
X}
X
X
Xtimedata_t *
Xget_timedata(struct prpsinfo *pp)
X{
X	register timedata_t *t;
X	register timedata_t *l;
X
X	l = TD_HASH(pp->pr_pid);
X
X	for(t = l->hnext; t != l; t = t->hnext)
X		if(t->pid == pp->pr_pid)
X			return t;
X
X	t = (timedata_t *)malloc(sizeof(timedata_t));
X	if(t == 0) {
X		perror("malloc");
X		quit(25);
X	}
X
X	t->pid = pp->pr_pid;
X	t->index = 0;
X	t->cnt = 0;
X	t->time = -1;
X	t->ltime = -1;
X
X	if(initted)
X		t->flags = TF_USED | TF_NEWPROC;
X	else
X		t->flags = TF_USED;
X
X	/* Put struct on hash list. */
X	t->hnext = l->hnext; 
X	t->hlast = l; 
X	l->hnext->hlast = t;
X	l->hnext = t;
X
X	/* Put struct on timedata list. */
X	t->lnext = timedata.lnext; 
X	t->llast = &timedata;
X	timedata.lnext->llast = t;
X	timedata.lnext = t;
X
X	return t;
X}
X
X
Xvoid
Xclean_timedata(void)
X{
X	register timedata_t *t;
X
X	for(t = timedata.lnext; t != &timedata; t = t->lnext) {
X		if(!(t->flags & TF_USED)) {
X			t->hnext->hlast = t->hlast;
X			t->hlast->hnext = t->hnext;
X			t->lnext->llast = t->llast;
X			t->llast->lnext = t->lnext;
X			free(t);
X		}
X		else {
X			t->flags &= ~TF_USED;
X		}
X	}
X}
END_OF_FILE
if test 21257 -ne `wc -c <'top-3.4/machine/m_ftx.c'`; then
    echo shar: \"'top-3.4/machine/m_ftx.c'\" unpacked with wrong size!
fi
# end of 'top-3.4/machine/m_ftx.c'
fi
if test -f 'top-3.4/machine/m_sunos4mp.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'top-3.4/machine/m_sunos4mp.c'\"
else
echo shar: Extracting \"'top-3.4/machine/m_sunos4mp.c'\" \(19966 characters\)
sed "s/^X//" >'top-3.4/machine/m_sunos4mp.c' <<'END_OF_FILE'
X/*
X * top - a top users display for Unix
X *
X * SYNOPSIS:  any multi-processor Sun running SunOS versions 4.1.2 or 4.1.3
X *
X * DESCRIPTION:
X * This is the machine-dependent module for SunOS 4.x with multi-processor
X * support.  This module always compiles code for multiprocessors and
X * assumes that it is being compiled on a multiprocessor architecture
X * such as sun4m).  This makes top work on the following systems:
X *	SunOS 4.1.2 (MP architectures only)
X *	SunOS 4.1.3 (MP architectures only)
X *	Solbourne running os/mp 4.1b or later only
X *
X * LIBS:  -lkvm
X *
X * CFLAGS: -DHAVE_GETOPT
X *
X * AUTHOR:  William LeFebvre <phil@eecs.nwu.edu>
X * Solbourne support by David MacKenzie <djm@eng.umd.edu>
X */
X
X/*
X * #ifdef MULTIPROCESSOR means Sun MP or newer Solbourne
X */
X
X#include <sys/types.h>
X#include <sys/signal.h>
X
X/*
X * When including files, we need to have MULTIPROCESSOR on so that a version
X * compiled on a non-MP system will work on an MP system.  We must take
X * great care, then in pur interpretation of certain preprocessor constants,
X * such as NCPU, XPSTATES, XP_*.
X */
X#ifndef MULTIPROCESSOR
X#define MULTIPROCESSOR
X#endif
X
X/* make sure param.h gets loaded with KERNEL defined to get PZERO & NZERO */
X#define KERNEL
X#include <sys/param.h>
X#undef KERNEL
X
X#include <stdio.h>
X#include <kvm.h>
X#include <nlist.h>
X#include <math.h>
X#include <sys/dir.h>
X#include <sys/user.h>
X#include <sys/proc.h>
X#include <sys/dk.h>
X#include <sys/vm.h>
X#include <sys/file.h>
X#include <sys/time.h>
X#include <vm/page.h>
X
X#include "top.h"
X#include "machine.h"
X
X/* declarations for load_avg */
X#include "loadavg.h"
X
X/* get_process_info passes back a handle.  This is what it looks like: */
X
Xstruct handle
X{
X    struct proc **next_proc;	/* points to next valid proc pointer */
X    int remaining;		/* number of pointers remaining */
X};
X
X/* define what weighted cpu is.  */
X#define weighted_cpu(pct, pp) ((pp)->p_time == 0 ? 0.0 : \
X			 ((pct) / (1.0 - exp((pp)->p_time * logcpu))))
X
X/* what we consider to be process size: */
X#define PROCSIZE(pp) ((pp)->p_tsize + (pp)->p_dsize + (pp)->p_ssize)
X
X/* definitions for indices in the nlist array */
X#define X_AVENRUN	0
X#define X_CCPU		1
X#define X_MPID		2
X#define X_NPROC		3
X#define X_PROC		4
X#define X_TOTAL		5
X#define X_CP_TIME	6
X#define X_PAGES		7
X#define X_EPAGES	8
X
Xstatic struct nlist nlst[] = {
X#ifdef i386
X    { "avenrun" },		/* 0 */
X    { "ccpu" },			/* 1 */
X    { "mpid" },			/* 2 */
X    { "nproc" },		/* 3 */
X    { "proc" },			/* 4 */
X    { "total" },		/* 5 */
X    { "cp_time" },		/* 6 */
X    { "pages" },		/* 7 */
X    { "epages" },		/* 8 */
X#else
X    { "_avenrun" },		/* 0 */
X    { "_ccpu" },		/* 1 */
X    { "_mpid" },		/* 2 */
X    { "_nproc" },		/* 3 */
X    { "_proc" },		/* 4 */
X    { "_total" },		/* 5 */
X    { "_cp_time" },		/* 6 */
X    { "_pages" },		/* 7 */
X    { "_epages" },		/* 8 */
X#define NLST_REQUIRED   9
X    { "_ncpu" },
X#define X_NCPU		9
X    { "_xp_time" },
X#define X_XP_TIME	10
X#endif
X    { 0 }
X};
X
X/*
X *  These definitions control the format of the per-process area
X */
X
Xstatic char header[] =
X  "  PID X        PRI NICE  SIZE   RES STATE   TIME   WCPU    CPU COMMAND";
X/* 0123456   -- field to fill in starts at header+6 */
X#define UNAME_START 6
X
X#define Proc_format \
X	"%5d %-8.8s %3d %4d %5s %5s %-5s %6s %5.2f%% %5.2f%% %s"
X
X
X/* process state names for the "STATE" column of the display */
X/* the extra nulls in the string "run" are for adding a slash and
X   the processor number when needed */
X
Xchar *state_abbrev[] =
X{
X    "", "sleep", "WAIT", "run\0\0\0", "start", "zomb", "stop"
X};
X
X/* values that we stash away in _init and use in later routines */
X
Xstatic double logcpu;
Xkvm_t *kd;
X
X/* these are retrieved from the kernel in _init */
X
Xstatic unsigned long proc;
Xstatic          int  nproc;
Xstatic load_avg ccpu;
Xstatic unsigned long pages;
Xstatic unsigned long epages;
Xstatic          int  ncpu = 0;
X#define IS_MP   (ncpu > 1)
X
X/* these are offsets obtained via nlist and used in the get_ functions */
X
Xstatic unsigned long mpid_offset;
Xstatic unsigned long avenrun_offset;
Xstatic unsigned long total_offset;
Xstatic unsigned long cp_time_offset;
Xstatic unsigned long xp_time_offset;
X
X/* these are for calculating cpu state percentages */
X
Xstatic long cp_time[CPUSTATES];
Xstatic long cp_old[CPUSTATES];
Xstatic long cp_diff[CPUSTATES];
Xstatic long xp_time[NCPU][XPSTATES];
X/* for now we only accumulate spin time, but extending this to pick up
X   other stuff in xp_time is trivial.  */
Xstatic long xp_old[NCPU];
X
X/* these are for detailing the process states */
X
Xint process_states[7];
Xchar *procstatenames[] = {
X    "", " sleeping, ", " ABANDONED, ", " running, ", " starting, ",
X    " zombie, ", " stopped, ",
X    NULL
X};
X
X/* these are for detailing the cpu states */
X
Xint cpu_states[5];
Xchar *cpustatenames[] = {
X    "user", "nice", "system", "idle",
X    NULL,		/* set to "spin" on MP machines */
X    NULL
X};
X#define XCP_SPIN 4
X
X/* these are for detailing the memory statistics */
X
Xint memory_stats[4];
Xchar *memorynames[] = {
X    "K available, ", "K in use, ", "K free, ", "K locked", NULL
X};
X
X/* these are for keeping track of the proc array */
X
Xstatic int bytes;
Xstatic int pref_len;
Xstatic struct proc *pbase;
Xstatic struct proc **pref;
X
X/* these are for getting the memory statistics */
X
Xstatic struct page *physpage;
Xstatic int bytesize;
Xstatic int count;
Xstatic int pageshift;		/* log base 2 of the pagesize */
X
X/* define pagetok in terms of pageshift */
X
X#define pagetok(size) ((size) << pageshift)
X
X/* useful externals */
Xextern int errno;
Xextern char *sys_errlist[];
X
Xlong lseek();
Xlong time();
Xlong percentages();
X
Xmachine_init(statics)
X
Xstruct statics *statics;
X
X{
X    register int i;
X    register int pagesize;
X
X    /* initialize the kernel interface */
X    if ((kd = kvm_open(NULL, NULL, NULL, O_RDONLY, "top")) == NULL)
X    {
X	perror("kvm_open");
X	return(-1);
X    }
X
X    /* get the list of symbols we want to access in the kernel */
X    if ((i = kvm_nlist(kd, nlst)) < 0)
X    {
X	fprintf(stderr, "top: nlist failed\n");
X	return(-1);
X    }
X
X    /* were ncpu and xp_time not found in the nlist? */
X    if (i > 0 && nlst[X_NCPU].n_type == 0 && nlst[X_XP_TIME].n_type == 0)
X    {
X	/* we are only running with one cpu */
X	/* so we will pretend this didn't happen and set ncpu = 1 */
X	i -= 2;
X	ncpu = 1;
X    }
X
X    /* make sure they were all found */
X    if (i > 0 && check_nlist(nlst) > 0)
X    {
X	return(-1);
X    }
X
X    /* get the symbol values out of kmem */
X    (void) getkval(nlst[X_PROC].n_value,   (int *)(&proc),	sizeof(proc),
X	    nlst[X_PROC].n_name);
X    (void) getkval(nlst[X_NPROC].n_value,  &nproc,		sizeof(nproc),
X	    nlst[X_NPROC].n_name);
X    (void) getkval(nlst[X_CCPU].n_value,   (int *)(&ccpu),	sizeof(ccpu),
X	    nlst[X_CCPU].n_name);
X    (void) getkval(nlst[X_PAGES].n_value,  (int *)(&pages),	sizeof(pages),
X	    nlst[X_PAGES].n_name);
X    (void) getkval(nlst[X_EPAGES].n_value, (int *)(&epages),	sizeof(epages),
X	    nlst[X_EPAGES].n_name);
X    if (ncpu == 0)
X    {
X	/* we have not yet determined the number of processors, so
X	   do that now */
X	/* assert: nlst[X_NCPU].n_type != 0 => nlst[X_NCPU].n_value != 0 */
X	(void) getkval(nlst[X_NCPU].n_value,   (int *)(&ncpu),	sizeof(ncpu),
X		       nlst[X_NCPU].n_name);
X    }
X
X    /* stash away certain offsets for later use */
X    mpid_offset = nlst[X_MPID].n_value;
X    avenrun_offset = nlst[X_AVENRUN].n_value;
X    total_offset = nlst[X_TOTAL].n_value;
X    cp_time_offset = nlst[X_CP_TIME].n_value;
X    xp_time_offset = nlst[X_XP_TIME].n_value;
X
X    /* this is used in calculating WCPU -- calculate it ahead of time */
X    logcpu = log(loaddouble(ccpu));
X
X    /* allocate space for proc structure array and array of pointers */
X    bytes = nproc * sizeof(struct proc);
X    pbase = (struct proc *)malloc(bytes);
X    pref  = (struct proc **)malloc(nproc * sizeof(struct proc *));
X
X    /* Just in case ... */
X    if (pbase == (struct proc *)NULL || pref == (struct proc **)NULL)
X    {
X	fprintf(stderr, "top: can't allocate sufficient memory\n");
X	return(-1);
X    }
X
X    /* allocate a table to hold all the page structs */
X    bytesize = epages - pages;
X    count = bytesize / sizeof(struct page);
X    physpage = (struct page *)malloc(epages - pages);
X    if (physpage == NULL)
X    {
X	fprintf(stderr, "top: can't allocate sufficient memory\n");
X	return(-1);
X    }
X   
X    /* get the page size with "getpagesize" and calculate pageshift from it */
X    pagesize = getpagesize();
X    pageshift = 0;
X    while (pagesize > 1)
X    {
X	pageshift++;
X	pagesize >>= 1;
X    }
X
X    /* we only need the amount of log(2)1024 for our conversion */
X    pageshift -= LOG1024;
X
X    /* add a slash to the "run" state abbreviation */
X    if (IS_MP)
X    {
X	state_abbrev[SRUN][3] = '/';
X	cpustatenames[XCP_SPIN] = "spin";
X    }
X
X    /* fill in the statics information */
X    statics->procstate_names = procstatenames;
X    statics->cpustate_names = cpustatenames;
X    statics->memory_names = memorynames;
X
X    /* all done! */
X    return(0);
X}
X
Xchar *format_header(uname_field)
X
Xregister char *uname_field;
X
X{
X    register char *ptr;
X
X    ptr = header + UNAME_START;
X    while (*uname_field != '\0')
X    {
X	*ptr++ = *uname_field++;
X    }
X
X    return(header);
X}
X
Xget_system_info(si)
X
Xstruct system_info *si;
X
X{
X    load_avg avenrun[3];
X    long total;
X    long half_total;
X
X    /* get the cp_time array */
X    (void) getkval(cp_time_offset, (int *)cp_time, sizeof(cp_time),
X		   "_cp_time");
X
X    if (IS_MP)
X    {
X	/* get the xp_time array as well */
X	(void) getkval(xp_time_offset, (int *)xp_time, sizeof(xp_time),
X		       "_xp_time");
X    }
X
X    /* get load average array */
X    (void) getkval(avenrun_offset, (int *)avenrun, sizeof(avenrun),
X		   "_avenrun");
X
X    /* get mpid -- process id of last process */
X    (void) getkval(mpid_offset, &(si->last_pid), sizeof(si->last_pid),
X		   "_mpid");
X
X    /* get the array of physpage descriptors */
X    (void) getkval(pages, (int *)physpage, bytesize, "array _page");
X
X    /* convert load averages to doubles */
X    {
X	register int i;
X	register double *infoloadp;
X	register load_avg *sysloadp;
X
X	infoloadp = si->load_avg;
X	sysloadp = avenrun;
X	for (i = 0; i < 3; i++)
X	{
X	    *infoloadp++ = loaddouble(*sysloadp++);
X	}
X    }
X
X    /* convert cp_time counts to percentages */
X    total = percentages(CPUSTATES, cpu_states, cp_time, cp_old, cp_diff);
X
X    /* calculate spin time from all processors */
X    if (IS_MP)
X    {
X	register int c;
X	register int i;
X	register long sum;
X	register long change;
X
X	/* collect differences for each processor and add them */
X	sum = 0;
X	for (i = 0; i < ncpu; i++)
X	{
X	    c = xp_time[i][XP_SPIN];
X	    change = c - xp_old[i];
X	    if (change < 0)
X	    {
X		/* counter wrapped */
X		change = (long)((unsigned long)c -
X				(unsigned long)xp_old[i]);
X	    }
X	    sum += change;
X	    xp_old[i] = c;
X	}
X
X	/*
X	 *  NOTE:  I am assuming that the ticks found in xp_time are
X	 *  already included in the ticks accumulated in cp_time.  To
X	 *  get an accurate reflection, therefore, we have to subtract
X	 *  the spin time from the system time and recompute those two
X	 *  percentages.
X	 */
X	half_total = total / 2l;
X	cp_diff[CP_SYS] -= sum;
X	cpu_states[CP_SYS] = (int)((cp_diff[CP_SYS] * 1000 + half_total) /
X				   total);
X	cpu_states[XCP_SPIN] = (int)((sum * 1000 + half_total) / total);
X    }
X
X    /* sum memory statistics */
X    {
X	register struct page *pp;
X	register int cnt;
X	register int inuse;
X	register int free;
X	register int locked;
X
X	/* bop thru the array counting page types */
X	pp = physpage;
X	inuse = free = locked = 0;
X	for (cnt = count; --cnt >= 0; pp++)
X	{
X	    if (pp->p_free)
X	    	free++;
X	    else if (pp->p_lock || pp->p_keepcnt > 0)
X	    	locked++;
X	    else
X	    	inuse++;
X	}
X
X	/* convert memory stats to Kbytes */
X	memory_stats[0] = pagetok(inuse + free);
X	memory_stats[1] = pagetok(inuse);
X	memory_stats[2] = pagetok(free);
X	memory_stats[3] = pagetok(locked);
X    }
X
X    /* set arrays and strings */
X    si->cpustates = cpu_states;
X    si->memory = memory_stats;
X}
X
Xstatic struct handle handle;
X
Xcaddr_t get_process_info(si, sel, compare)
X
Xstruct system_info *si;
Xstruct process_select *sel;
Xint (*compare)();
X
X{
X    register int i;
X    register int total_procs;
X    register int active_procs;
X    register struct proc **prefp;
X    register struct proc *pp;
X
X    /* these are copied out of sel for speed */
X    int show_idle;
X    int show_system;
X    int show_uid;
X    int show_command;
X
X    /* read all the proc structures in one fell swoop */
X    (void) getkval(proc, (int *)pbase, bytes, "proc array");
X
X    /* get a pointer to the states summary array */
X    si->procstates = process_states;
X
X    /* set up flags which define what we are going to select */
X    show_idle = sel->idle;
X    show_system = sel->system;
X    show_uid = sel->uid != -1;
X    show_command = sel->command != NULL;
X
X    /* count up process states and get pointers to interesting procs */
X    total_procs = 0;
X    active_procs = 0;
X    bzero((char *)process_states, sizeof(process_states));
X    prefp = pref;
X    for (pp = pbase, i = 0; i < nproc; pp++, i++)
X    {
X	/*
X	 *  Place pointers to each valid proc structure in pref[].
X	 *  Process slots that are actually in use have a non-zero
X	 *  status field.  Processes with SSYS set are system
X	 *  processes---these get ignored unless show_sysprocs is set.
X	 */
X	if (pp->p_stat != 0 &&
X	    (show_system || ((pp->p_flag & SSYS) == 0)))
X	{
X	    total_procs++;
X	    process_states[pp->p_stat]++;
X	    if ((pp->p_stat != SZOMB) &&
X		(show_idle || (pp->p_pctcpu != 0) || (pp->p_stat == SRUN)) &&
X		(!show_uid || pp->p_uid == (uid_t)sel->uid))
X	    {
X		*prefp++ = pp;
X		active_procs++;
X	    }
X	}
X    }
X
X    /* if requested, sort the "interesting" processes */
X    if (compare != NULL)
X    {
X	qsort((char *)pref, active_procs, sizeof(struct proc *), compare);
X    }
X
X    /* remember active and total counts */
X    si->p_total = total_procs;
X    si->p_active = pref_len = active_procs;
X
X    /* pass back a handle */
X    handle.next_proc = pref;
X    handle.remaining = active_procs;
X    return((caddr_t)&handle);
X}
X
Xchar fmt[MAX_COLS];		/* static area where result is built */
X
Xchar *format_next_process(handle, get_userid)
X
Xcaddr_t handle;
Xchar *(*get_userid)();
X
X{
X    register struct proc *pp;
X    register long cputime;
X    register double pct;
X    struct user u;
X    struct handle *hp;
X
X    /* find and remember the next proc structure */
X    hp = (struct handle *)handle;
X    pp = *(hp->next_proc++);
X    hp->remaining--;
X    
X    /* get the process's user struct and set cputime */
X    if (getu(pp, &u) == -1)
X    {
X	(void) strcpy(u.u_comm, "<swapped>");
X	cputime = 0;
X    }
X    else
X    {
X	/* set u_comm for system processes */
X	if (u.u_comm[0] == '\0')
X	{
X	    if (pp->p_pid == 0)
X	    {
X		(void) strcpy(u.u_comm, "Swapper");
X	    }
X	    else if (pp->p_pid == 2)
X	    {
X		(void) strcpy(u.u_comm, "Pager");
X	    }
X	}
X
X	cputime = u.u_ru.ru_utime.tv_sec + u.u_ru.ru_stime.tv_sec;
X    }
X
X    /* calculate the base for cpu percentages */
X    pct = pctdouble(pp->p_pctcpu);
X
X    /*
X     *  If there is more than one cpu then add the processor number to
X     *  the "run/" string.  Note that this will only show up if the
X     *  process is in the run state.  Also note:  when they
X     *  start making Suns with more than 9 processors this will break
X     *  since the string will then be more than 5 characters.
X     */
X    if (IS_MP)
X    {
X	state_abbrev[SRUN][4] = (pp->p_cpuid & 0xf) + '0';
X    }
X
X    /* format this entry */
X    sprintf(fmt,
X	    Proc_format,
X	    pp->p_pid,
X	    (*get_userid)(pp->p_uid),
X	    pp->p_pri - PZERO,
X	    pp->p_nice - NZERO,
X	    format_k(pagetok(PROCSIZE(pp))),
X	    format_k(pagetok(pp->p_rssize)),
X	    state_abbrev[pp->p_stat],
X	    format_time(cputime),
X	    100.0 * weighted_cpu(pct, pp),
X	    100.0 * pct,
X	    printable(u.u_comm));
X
X    /* return the result */
X    return(fmt);
X}
X
X/*
X *  getu(p, u) - get the user structure for the process whose proc structure
X *	is pointed to by p.  The user structure is put in the buffer pointed
X *	to by u.  Return 0 if successful, -1 on failure (such as the process
X *	being swapped out).
X */
X
Xgetu(p, u)
X
Xregister struct proc *p;
Xstruct user *u;
X
X{
X    register struct user *lu;
X
X    lu = kvm_getu(kd, p);
X    if (lu == NULL)
X    {
X	return(-1);
X    }
X    else
X    {
X	*u = *lu;
X	return(0);
X    }
X}
X
X/*
X * check_nlist(nlst) - checks the nlist to see if any symbols were not
X *		found.  For every symbol that was not found, a one-line
X *		message is printed to stderr.  The routine returns the
X *		number of symbols NOT found.
X */
X
Xint check_nlist(nlst)
X
Xregister struct nlist *nlst;
X
X{
X    register int i;
X
X    /* check to see if we got ALL the symbols we requested */
X    /* this will write one line to stderr for every symbol not found */
X
X    i = 0;
X    while (nlst->n_name != NULL)
X    {
X#ifdef i386
X	if (nlst->n_value == 0)
X#else
X	if (nlst->n_type == 0)
X#endif
X	{
X	    /* this one wasn't found */
X	    fprintf(stderr, "kernel: no symbol named `%s'\n", nlst->n_name);
X	    i = 1;
X	}
X	nlst++;
X    }
X
X    return(i);
X}
X
X
X/*
X *  getkval(offset, ptr, size, refstr) - get a value out of the kernel.
X *	"offset" is the byte offset into the kernel for the desired value,
X *  	"ptr" points to a buffer into which the value is retrieved,
X *  	"size" is the size of the buffer (and the object to retrieve),
X *  	"refstr" is a reference string used when printing error meessages,
X *	    if "refstr" starts with a '!', then a failure on read will not
X *  	    be fatal (this may seem like a silly way to do things, but I
X *  	    really didn't want the overhead of another argument).
X *  	
X */
X
Xgetkval(offset, ptr, size, refstr)
X
Xunsigned long offset;
Xint *ptr;
Xint size;
Xchar *refstr;
X
X{
X    if (kvm_read(kd, offset, ptr, size) != size)
X    {
X	if (*refstr == '!')
X	{
X	    return(0);
X	}
X	else
X	{
X	    fprintf(stderr, "top: kvm_read for %s: %s\n",
X		refstr, sys_errlist[errno]);
X	    quit(23);
X	    /*NOTREACHED*/
X	}
X    }
X    return(1);
X}
X    
X/* comparison routine for qsort */
X
X/*
X *  proc_compare - comparison function for "qsort"
X *	Compares the resource consumption of two processes using five
X *  	distinct keys.  The keys (in descending order of importance) are:
X *  	percent cpu, cpu ticks, state, resident set size, total virtual
X *  	memory usage.  The process states are ordered as follows (from least
X *  	to most important):  WAIT, zombie, sleep, stop, start, run.  The
X *  	array declaration below maps a process state index into a number
X *  	that reflects this ordering.
X */
X
Xstatic unsigned char sorted_state[] =
X{
X    0,	/* not used		*/
X    3,	/* sleep		*/
X    1,	/* ABANDONED (WAIT)	*/
X    6,	/* run			*/
X    5,	/* start		*/
X    2,	/* zombie		*/
X    4	/* stop			*/
X};
X 
Xproc_compare(pp1, pp2)
X
Xstruct proc **pp1;
Xstruct proc **pp2;
X
X{
X    register struct proc *p1;
X    register struct proc *p2;
X    register int result;
X    register pctcpu lresult;
X
X    /* remove one level of indirection */
X    p1 = *pp1;
X    p2 = *pp2;
X
X    /* compare percent cpu (pctcpu) */
X    if ((lresult = p2->p_pctcpu - p1->p_pctcpu) == 0)
X    {
X	/* use cpticks to break the tie */
X	if ((result = p2->p_cpticks - p1->p_cpticks) == 0)
X	{
X	    /* use process state to break the tie */
X	    if ((result = sorted_state[p2->p_stat] -
X			  sorted_state[p1->p_stat])  == 0)
X	    {
X		/* use priority to break the tie */
X		if ((result = p2->p_pri - p1->p_pri) == 0)
X		{
X		    /* use resident set size (rssize) to break the tie */
X		    if ((result = p2->p_rssize - p1->p_rssize) == 0)
X		    {
X			/* use total memory to break the tie */
X			result = PROCSIZE(p2) - PROCSIZE(p1);
X		    }
X		}
X	    }
X	}
X    }
X    else
X    {
X	result = lresult < 0 ? -1 : 1;
X    }
X
X    return(result);
X}
X
Xint proc_owner(pid)
X
Xint pid;
X
X{
X    register int ac;
X    register struct proc **prefp;
X    register struct proc *pp;
X
X    prefp = pref;
X    ac = pref_len;
X    while (--ac >= 0)
X    {
X	if ((pp = *prefp++)->p_pid == (pid_t)pid)
X	{
X	    return((int)pp->p_uid);
X	}
X    }
X    return(-1);
X}
END_OF_FILE
if test 19966 -ne `wc -c <'top-3.4/machine/m_sunos4mp.c'`; then
    echo shar: \"'top-3.4/machine/m_sunos4mp.c'\" unpacked with wrong size!
fi
# end of 'top-3.4/machine/m_sunos4mp.c'
fi
echo shar: End of archive 16 \(of 22\).
cp /dev/null ark16isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 22 archives.
    echo "Now read README and INSTALL, then run Configure"
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0

