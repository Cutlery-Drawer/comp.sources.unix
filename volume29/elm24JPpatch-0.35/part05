Newsgroups: comp.sources.unix
From: oota@pes.com1.fc.nec.co.jp (oota toshiya)
Subject: v29i087: elm24JPpatch-0.35 - Japanese ISO-2022-JP extension kit for elm2.4 PL25, Part05/05
References: <1.821493364.9534@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: oota@pes.com1.fc.nec.co.jp (oota toshiya)
Posting-Number: Volume 29, Issue 87
Archive-Name: elm24JPpatch-0.35/part05

#!/bin/sh
# This is `part05' (part 5 of a multipart archive).
# Do not concatenate these parts, unpack them in order with `/bin/sh'.
# File `elm24JPpatch-0.35/src/jfep.c' is being continued...
#
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
if test ! -r _sharseq.tmp; then
  echo 'Please unpack part 1 first!'
  exit 1
fi
shar_sequence=`cat _sharseq.tmp`
if test "$shar_sequence" != 5; then
  echo "Please unpack part $shar_sequence next!"
  exit 1
fi
if test ! -f _sharnew.tmp; then
  echo 'x - still skipping elm24JPpatch-0.35/src/jfep.c'
else
  echo 'x - continuing file elm24JPpatch-0.35/src/jfep.c'
  sed 's/^X//' << 'SHAR_EOF' >> 'elm24JPpatch-0.35/src/jfep.c' &&
X
X	*poutbuf = hi;
X	poutbuf++;
X	*poutbuf = lo;
X	poutbuf++;
X
X      } else {
X        *poutbuf = *pbuf;
X	poutbuf++; pbuf++;
X      }
X    }
X
X    for ( pbuf = pbuf0 + bytes; pbuf+bytes <= pbuf1; ) {
X      if ( *pbuf >= 0x80 ) {
X	bytes = 2;
X      }	else {
X	bytes = 1;
X      }
X
X      if ( pbuf+bytes <= pbuf1 ) {
X       if ( bytes == 2 ) {
X
X	hi = *pbuf;
X	pbuf++;
X	lo = *pbuf;
X	pbuf++;
X/*printf("euc: hi=%x, lo=%x\r\n", hi, lo);*/
X	/* euc to sjis, from kanji.c in Ng */
X	hi &= 0x7f;
X	lo &= 0x7f;
X	if (hi >= 0xcf)
X	   hi +=0x80;
X	if((hi % 2) == 0){
X	  hi = (hi - 0x30) / 2 + 0x88;
X	  lo += 0x7e;
X	} else {
X	  if ( lo >= 0x60 )
X	    lo += 0x01;
X	  hi = (hi - 0x31) / 2 + 0x89;
X	  lo += 0x1f;
X	}
X	/* end, from kanji.c in Ng. */
X/*printf("sjis: hi=%x, lo=%x\r\n", hi, lo);*/
X
X	*poutbuf = hi;
X	poutbuf++;
X	*poutbuf = lo;
X	poutbuf++;
X
X       } else {
X        *poutbuf = *pbuf;
X	poutbuf++; pbuf++;
X       }
X      }
X    }
X
X    /* If ends with Kanji, add kanji-out-code. (93/10/08, wataru) */
X    if ( bytes == 2 ) {
X	/* Nothing to do for sjis. */
X    }
X
X    /* certify to be end of string. */
X    *poutbuf = '\0';
X
X    printf("jfep.c: %s\r\n", poutbuf);
X}
X
X                    
Xint jfep_org(inbuf)
Xunsigned char inbuf[];
X{
X
X    unsigned char c;
X    int endp=0,cur=0;
X    int byte=1, i=0;
X
X    unsigned char buf[1024], *pinbuf;
X
X    int rawstate;
X
X    cur = 1;
X    endp = 0;
X    byte = 1;
X
X    /*
X    ** ==== added on 92/11/30, wataru =====
X    ** Set what included to inbuf to buf.
X    ** Cursor is set to the end of the line.
X    */
X
X    if ( strlen(inbuf) != 0 ) {
X
X	/*
X	** if strlen(inbuf) != 0,
X	**	(1) convert inbuf[] into euc-code (GetChFrmStr()) )
X	**	(2) put it to buf[].
X	*/
X	pinbuf = (unsigned char *)inbuf;
X	c = GetChFrmStr(&pinbuf);
X	
X    	while ( c != UEOF && c != '\n' && c != CTRL_M 
X				&& c != '\0' && endp <= 1023 ) {
X	    if ( (ifprint(c) == 1) || (ifkanji1(c) == 1) ) {
X	    	if ( ifkanji1(c) == 1 ) {
X		    byte = 2;
X	    	}
X	    	else {
X		    byte = 1;
X	    	}
X
X		/* Put character */
X		buf[cur] = c;
X		endp++;
X		for ( i = 1; i < byte; i++ ) {
X		    c = GetChFrmStr(&pinbuf);
X		    buf[cur+i] = c;
X		    endp++;
X		}
X	    	reprint_char(cur,endp,1-byte,buf);
X	    	cur = cur + byte;
X	    }
X	    c = GetChFrmStr(&pinbuf);
X	}
X    }
X
X
X    rawstate = RawState();
X    Raw(ON);  /* set to RAW mode */
X
X    c = GETC;
X
X    while ( c != UEOF && c != '\n' && c != CTRL_M && c != BREAK_KEY
X    							&& endp <= 1023) {
X	if ( c == LEFT ) {
X	    if (cur > 2 ) {
X		if ((ifkanji1(buf[cur-2]) == 1) && (ifkanji2(buf[cur-1]) == 1) ) {
X		    byte = 2;
X	    	}
X	    }
X	    else {
X		byte = 1;
X	    }
X	    cursor_left(&cur,byte);
X	}
X	else if ( c == RIGHT ) {
X	    if ( ifkanji1(buf[cur]) == 1 ) {
X		byte = 2;
X	    }
X	    else {
X		byte = 1;
X	    }
X	    cursor_right(&cur,&endp,byte);
X	}
X	else if ( c == HEAD ) {
X	    while( cur > 1 ) {
X		if ( (ifkanji1(buf[cur-2]) == 1) && (ifkanji2(buf[cur-1]) == 1) ) {
X		    byte = 2;
X	    	}
X		else {
X		    byte = 1;
X		}
X		cursor_left(&cur,byte);
X	    }
X	}
X	else if ( c == TAIL ) {
X	    while( cur <= endp ) {
X		if ( ifkanji1(buf[cur]) == 1 ) {
X		    byte = 2;
X		}
X		else {
X		    byte = 1;
X		}
X		cursor_right(&cur,&endp,byte);
X	    }
X	}
X	else if ( c == DEL ) {
X	    if ( ifkanji1(buf[cur]) == 1 ) {
X		byte = 2;
X	    }
X	    else {
X		byte = 1;
X	    }
X	    delete_char(&cur,&endp,buf,byte);
X	    reprint_char(cur,endp,byte+1,buf);
X	}
X	else if ( c == BS ) {
X	    if ( (ifkanji1(buf[cur-2]) == 1) && (ifkanji2(buf[cur-1]) == 1) ) {
X		if ( (endp >= 2) && (cur > 2 ) ) {
X		    byte = 2;
X		    cursor_left(&cur,byte);
X	    	    delete_char(&cur,&endp,buf,byte);
X	    	    reprint_char(cur,endp,byte+1,buf);
X		}
X		else {
X		    BEEP;
X		}
X	    }
X	    else if ( (endp >= 1) && (cur >= 1) ) {
X		byte = 1;
X		cursor_left(&cur,byte);
X	    	delete_char(&cur,&endp,buf,byte);
X	    	reprint_char(cur,endp,byte+1,buf);
X	    }
X	    else {
X		BEEP;
X	    }
X	}
X	else if ( (ifprint(c) == 1) || (ifkanji1(c) == 1) ) {
X	    if ( ifkanji1(c) == 1 ) {
X		byte = 2;
X	    }
X	    else {
X		byte = 1;
X	    }
X	    insert_char(c,&cur,&endp,buf,byte);
X	    reprint_char(cur,endp,1-byte,buf);
X	    cur = cur + byte;
X	}
X	else if ( c == KILL_KEY ) { /* kill whole line. (93/08/25, wataru)*/
X	  while( cur > 1 ) {
X	    if ( (ifkanji1(buf[cur-2]) == 1) && (ifkanji2(buf[cur-1]) == 1) ) {
X	      byte = 2;
X	    }
X	    else {
X	      byte = 1;
X	    }
X	    cursor_left(&cur,byte);
X	  }
X   	  cur = 1;
X	  endp = 0;
X	  byte = 1;
X   	  reprint_char(cur,endp,byte+1,buf);
X	  CleartoEOLN();
X	}
X	else {
X	    	BEEP;
X	}
X	    c = GETC;
X    }
X    for ( i = 1; i <= endp; i++) {
X	buf[i-1] = buf[i];
X    }
X
X    if(rawstate == OFF) {
X    	Raw(OFF); /* reset to original mode. */
X    }
X
X    buf[endp] = '\0';
X
X#ifdef JIS
X    EucToJis(buf,inbuf);
X#endif
X    if ( c != BREAK_KEY ) {
X	return(strlen(inbuf));
X    } else {
X    	return(-1); /* return -1 if BREAK */
X    }
X}
X
X/* elm gives me as a pointer. (93/03/16, wataru)*/
Xint jfep(newinbuf)
Xchar *newinbuf;
X{
X    unsigned char newbuf[1024];
X    int i;
X
X    sprintf(newbuf,"%s", newinbuf);
X
X/* NG. (93/03/18, wataru) */
X/*    i = (int)jfep_org((unsigned char) newbuf);*/
X    i = (int)jfep_org(newbuf);
X
X    sprintf(newinbuf,"%s", newbuf);
X    return(i);
X}
SHAR_EOF
  echo 'File elm24JPpatch-0.35/src/jfep.c is complete' &&
  $shar_touch -am 0409232995 'elm24JPpatch-0.35/src/jfep.c' &&
  chmod 0640 'elm24JPpatch-0.35/src/jfep.c' ||
  echo 'restore of elm24JPpatch-0.35/src/jfep.c failed'
  shar_count="`wc -c < 'elm24JPpatch-0.35/src/jfep.c'`"
  test 12855 -eq "$shar_count" ||
    echo "elm24JPpatch-0.35/src/jfep.c: original size 12855, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= elm24JPpatch-0.35/src/getch.c ==============
if test -f 'elm24JPpatch-0.35/src/getch.c' && test X"$1" != X"-c"; then
  echo 'x - skipping elm24JPpatch-0.35/src/getch.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting elm24JPpatch-0.35/src/getch.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'elm24JPpatch-0.35/src/getch.c' &&
X#include <stdio.h>
X#include "kanji.h"
X
Xstatic unsigned char kflag=(unsigned char)0;
X
Xstatic char SCCSid[]=
X	"@(#) getch.c 93/07/16(wataru)";
X
X/* get a character without echoing */
Xunsigned char getch()
X{
X  unsigned char c, c1, c2;
X  static unsigned char Kin[]=KIN, Kout[]=KOUT;
X
X  /*SetRaw(0); /*stdin*/
X
X  /* get one character */
X  c = getchar();
X
X  while ( c == Kin[0] ) {
X   c1 = getchar();
X   c2 = getchar();
X   if ( c1 == Kin[1] ) {
X     if ( c2 == Kin[2] || c2 == Kin[3] ) {
X	kflag = (unsigned char) 0x80;
X	c = getchar();
X     }
X   }
X   else if ( c1 == Kout[1] ) {
X     if ( c2 == Kout[2] || c2 == Kout[3] ) {
X    	kflag = (unsigned char)0;
X    	c = getchar();
X      }
X    }
X  }
X
X  /*ResetRaw(0); /*stdin*/
X
X  if ( c == CTRL_M || c == CTRL_J ) {
X    c = '\n';
X  }
X
X  return (c | kflag);
X}
SHAR_EOF
  $shar_touch -am 0409232995 'elm24JPpatch-0.35/src/getch.c' &&
  chmod 0640 'elm24JPpatch-0.35/src/getch.c' ||
  echo 'restore of elm24JPpatch-0.35/src/getch.c failed'
  shar_count="`wc -c < 'elm24JPpatch-0.35/src/getch.c'`"
  test 795 -eq "$shar_count" ||
    echo "elm24JPpatch-0.35/src/getch.c: original size 795, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= elm24JPpatch-0.35/src/mmdec.c ==============
if test -f 'elm24JPpatch-0.35/src/mmdec.c' && test X"$1" != X"-c"; then
  echo 'x - skipping elm24JPpatch-0.35/src/mmdec.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting elm24JPpatch-0.35/src/mmdec.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'elm24JPpatch-0.35/src/mmdec.c' &&
X/*
X *	ISO-2022-JP handling routines
X *			&
X *	MIME decode routines (quick hack just for ISO-2022-JP)
X *
X *		Thu Dec  8 18:31:52 JST 1994
X *
X *	written by S.Ichikawa (ichikawa@nuee.nagoya-u.ac.jp)
X */
X
X#include <stdio.h>
X#include "defs.h"
X
X#ifndef BSD
X#include <string.h>
X#else
X#include <strings.h>
X#endif
X
X/*
X *  MIME decoding routines
X *
X *	Written by S. Ichikawa,
X *	inspired by encdec.c of <jh@efd.lth.se>.
X */
X
Xstatic char mm64[] =
X    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" ;
Xstatic int mmcont = 0;
X
Xvoid
Xmmdec_base64(t, s)
Xchar *t, *s;
X{
X    int   d, count, j, val;
X    char  buf[VERY_LONG_STRING], *bp, nw[4], *p;
X
X    for (bp = buf; *s; s += 4) {
X	val = 0;
X	if (s[2] == '=') count = 1;
X	else if (s[3] == '=') count = 2;
X	else count = 3;
X
X	for (j = 0; j <= count; j++) {
X		if (!(p = strchr(mm64, s[j]))) {
X			return;
X		}
X		d = p - mm64;
X		d <<= (3-j)*6;
X		val += d;
X	}
X	for (j = 2; j >= 0; j--) {
X		nw[j] = val & 255;
X		val >>= 8;
X	}
X	if (count--) *bp++ = nw[0];
X	if (count--) *bp++ = nw[1];
X	if (count) *bp++ = nw[2];
X    }
X    *bp = '\0';
X    strcpy(t, buf);
X}
X
Xvoid
Xmmdecode(trg, str)
Xchar *trg, *str;
X{
X    char buf[VERY_LONG_STRING], mmbuf[VERY_LONG_STRING];
X    char *s, *t, *u;
X
X    buf[0] = '\0';
X    for (s = str, u = buf; *s; ) {
X	if (strncmp(s, "=?ISO-2022-JP?B?", 16) == 0) {
X	    if (mmcont) {
X		for (t = s - 1;
X		    t >= str && (*t == ' ' || *t == '\t'); t--) {
X			u--;
X		}
X	    }
X	    for (s += 16, t = mmbuf; *s; ) {
X		if (s[0] == '?' && s[1] == '=') { 
X		    break;
X		} else {
X		    *t++ = *s++;
X		}
X	    }
X	    if (s[0] != '?' || s[1] != '=') {
X		goto end;
X	    } else {
X		s += 2;
X		*t = '\0';
X	    }
X	    mmdec_base64(mmbuf, mmbuf);
X	    for (t = mmbuf; *t; ) *u++ = *t++;
X	    mmcont = 1;
X	    /* if (*s == ' ' || *s == '\t') *u++ = *s; */
X	    /* for ( ; *s == ' ' || *s == '\t'; s++) ; */
X	} else {
X	    if (*s != ' ' && *s != '\t') mmcont = 0;
X	    *u++ = *s++;
X	}
X    }
X    *u = '\0';
Xend:
X    strcpy(trg, buf);
X}
SHAR_EOF
  $shar_touch -am 0404013095 'elm24JPpatch-0.35/src/mmdec.c' &&
  chmod 0640 'elm24JPpatch-0.35/src/mmdec.c' ||
  echo 'restore of elm24JPpatch-0.35/src/mmdec.c failed'
  shar_count="`wc -c < 'elm24JPpatch-0.35/src/mmdec.c'`"
  test 1975 -eq "$shar_count" ||
    echo "elm24JPpatch-0.35/src/mmdec.c: original size 1975, current size $shar_count"
  rm -f _sharnew.tmp
fi
rm -f _sharseq.tmp
echo 'You have unpacked the last part'
exit 0
