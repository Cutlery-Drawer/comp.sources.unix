Newsgroups: comp.sources.unix
From: lefebvre@athens.dis.anl.gov (William LeFebvre)
Subject: v29i015: top-3.3 - top users display, V3.3, Part15/16
References: <1.801816033.16454@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: lefebvre@athens.dis.anl.gov (William LeFebvre)
Posting-Number: Volume 29, Issue 15
Archive-Name: top-3.3/part15

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 15 (of 16)."
# Contents:  machine/m_netbsd10.c machine/m_sunos5.c
# Wrapped by lefebvre@athens on Thu Mar  2 11:39:44 1995
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'machine/m_netbsd10.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'machine/m_netbsd10.c'\"
else
echo shar: Extracting \"'machine/m_netbsd10.c'\" \(23164 characters\)
sed "s/^X//" >'machine/m_netbsd10.c' <<'END_OF_FILE'
X/*
X * top - a top users display for Unix
X *
X * SYNOPSIS:  For a NetBSD-1.0 (4.4BSD) system
X *	      Note process resident sizes could be wrong, but ps shows
X *	      zero for them too..
X *
X * DESCRIPTION:
X * Originally written for BSD4.4 system by Christos Zoulas.
X * Based on the FreeBSD 2.0 version by Steven Wallace && Wolfram Schneider
X * NetBSD-1.0 port by Arne Helme
X * .
X * This is the machine-dependent module for NetBSD-1.0
X * Works for:
X *	NetBSD-1.0
X *
X * LIBS: -lkvm
X *
X * AUTHOR:  Christos Zoulas <christos@ee.cornell.edu>
X *          Steven Wallace  <swallace@freebsd.org>
X *          Wolfram Schneider <wosch@cs.tu-berlin.de>
X *	    Arne Helme <arne@acm.org>
X *
X * $Id: machine.c,v 1.5 1995/01/06 02:04:39 swallace Exp $
X */
X
X
X
X#define LASTPID      /**/  /* use last pid, compiler depended */
X/* #define LASTPID_FIXED /**/ 
X#define VM_REAL      /**/  /* use the same values as vmstat -s */
X#define USE_SWAP     /**/  /* use swap usage (pstat -s), 
X                              need to much cpu time */
X/* #define DEBUG 1      /**/
X
X#include <sys/types.h>
X#include <sys/signal.h>
X#include <sys/param.h>
X
X#include "os.h"
X#include <stdio.h>
X#include <nlist.h>
X#include <math.h>
X#include <kvm.h>
X#include <sys/errno.h>
X#include <sys/sysctl.h>
X#include <sys/dir.h>
X#include <sys/dkstat.h>
X#include <sys/file.h>
X#include <sys/time.h>
X
X#ifdef USE_SWAP
X#include <stdlib.h>
X#include <sys/map.h>
X#include <sys/conf.h>
X#endif
X
Xstatic int check_nlist __P((struct nlist *));
Xstatic int getkval __P((unsigned long, int *, int, char *));
Xextern char* printable __P((char *));
X
X#include "top.h"
X#include "machine.h"
X
X
X/* get_process_info passes back a handle.  This is what it looks like: */
X
Xstruct handle
X{
X    struct kinfo_proc **next_proc;	/* points to next valid proc pointer */
X    int remaining;		/* number of pointers remaining */
X};
X
X/* declarations for load_avg */
X#include "loadavg.h"
X
X#define PP(pp, field) ((pp)->kp_proc . field)
X#define EP(pp, field) ((pp)->kp_eproc . field)
X#define VP(pp, field) ((pp)->kp_eproc.e_vm . field)
X
X/* define what weighted cpu is.  */
X#define weighted_cpu(pct, pp) (PP((pp), p_swtime) == 0 ? 0.0 : \
X			 ((pct) / (1.0 - exp(PP((pp), p_swtime) * logcpu))))
X
X/* what we consider to be process size: */
X#define PROCSIZE(pp) (VP((pp), vm_tsize) + VP((pp), vm_dsize) + VP((pp), vm_ssize))
X
X/* definitions for indices in the nlist array */
X
X
Xstatic struct nlist nlst[] = {
X#define X_CCPU		0
X    { "_ccpu" },		/* 0 */
X#define X_CP_TIME	1
X    { "_cp_time" },		/* 1 */
X#define X_HZ		2
X    { "_hz" },		        /* 2 */
X#define X_STATHZ	3
X    { "_stathz" },		/* 3 */
X#define X_AVENRUN	4
X    { "_averunnable" },		/* 4 */
X
X#ifdef USE_SWAP
X#define VM_SWAPMAP	5
X	{ "_swapmap" },	/* list of free swap areas */
X#define VM_NSWAPMAP	6
X	{ "_nswapmap" },/* size of the swap map */
X#define VM_SWDEVT	7
X	{ "_swdevt" },	/* list of swap devices and sizes */
X#define VM_NSWAP	8
X	{ "_nswap" },	/* size of largest swap device */
X#define VM_NSWDEV	9
X	{ "_nswdev" },	/* number of swap devices */
X#define VM_DMMAX	10
X	{ "_dmmax" },	/* maximum size of a swap block */
X#define VM_NISWAP	11
X	{ "_niswap" },
X#define VM_NISWDEV	12
X	{ "_niswdev" },
X#endif /* USE_SWAP */
X
X#ifdef VM_REAL
X#ifdef USE_SWAP
X#define X_CNT           13
X#else
X#define X_CNT           5
X#endif
X    { "_cnt" },		        /* struct vmmeter cnt */
X#endif
X
X#ifdef LASTPID
X#if (defined USE_SWAP && defined VM_REAL)
X#define X_LASTPID	14
X#elif (defined VM_REAL)
X#define X_LASTPID	6
X#else
X#define X_LASTPID       5
X#endif
X#ifdef LASTPID_FIXED
X    { "_nextpid" },		
X#else
X    { "_nextpid.178" },		/* lastpid, compiler depended 
X				 * should be changed 
X				 * in /sys/kern/kern_fork.c */
X#endif
X#endif
X
X    { 0 }
X};
X
X/*
X *  These definitions control the format of the per-process area
X */
X
Xstatic char header[] =
X  "  PID X        PRI NICE   SIZE   RES STATE   TIME   WCPU    CPU COMMAND";
X/* 0123456   -- field to fill in starts at header+6 */
X#define UNAME_START 6
X
X#define Proc_format \
X	"%5d %-8.8s %3d %4d%7s %5s %-5s%7s %5.2f%% %5.2f%% %.14s"
X
X
X/* process state names for the "STATE" column of the display */
X/* the extra nulls in the string "run" are for adding a slash and
X   the processor number when needed */
X
Xchar *state_abbrev[] =
X{
X    "", "start", "run\0\0\0", "sleep", "stop", "zomb", "WAIT"
X};
X
X
Xstatic kvm_t *kd;
X
X/* values that we stash away in _init and use in later routines */
X
Xstatic double logcpu;
X
X/* these are retrieved from the kernel in _init */
X
Xstatic          long hz;
Xstatic load_avg  ccpu;
X
X/* these are offsets obtained via nlist and used in the get_ functions */
X
Xstatic unsigned long cp_time_offset;
Xstatic unsigned long avenrun_offset;
X#ifdef LASTPID
Xstatic unsigned long lastpid_offset;
Xstatic long lastpid;
X#endif
X#ifdef VM_REAL
Xstatic unsigned long cnt_offset;
Xstatic long cnt;
X#endif
X/* these are for calculating cpu state percentages */
X
Xstatic long cp_time[CPUSTATES];
Xstatic long cp_old[CPUSTATES];
Xstatic long cp_diff[CPUSTATES];
X
X/* these are for detailing the process states */
X
Xint process_states[7];
Xchar *procstatenames[] = {
X    "", " starting, ", " running, ", " sleeping, ", " stopped, ",
X    " zombie, ", " ABANDONED, ",
X    NULL
X};
X
X/* these are for detailing the cpu states */
X
Xint cpu_states[CPUSTATES];
Xchar *cpustatenames[] = {
X    "user", "nice", "system", "interrupt", "idle", NULL
X};
X
X/* these are for detailing the memory statistics */
X
Xint memory_stats[8];
Xchar *memorynames[] = {
X#ifndef VM_REAL
X    "Real: ", "K/", "K ", "Virt: ", "K/",
X    "K ", "Free: ", "K", NULL
X#else
X#if 0
X    "K Act ", "K Inact ", "K Wired ", "K Free ", "% Swap, ",
X    "K/", "K SWIO", 
X#else
X    "K Act ", "K Inact ", "K Wired ", "K Free ", "% Swap, ",
X    "Kin ", "Kout", 
X#endif
X    NULL
X#endif
X};
X
X/* these are for keeping track of the proc array */
X
Xstatic int nproc;
Xstatic int onproc = -1;
Xstatic int pref_len;
Xstatic struct kinfo_proc *pbase;
Xstatic struct kinfo_proc **pref;
X
X/* these are for getting the memory statistics */
X
Xstatic int pageshift;		/* log base 2 of the pagesize */
X
X/* define pagetok in terms of pageshift */
X
X#define pagetok(size) ((size) << pageshift)
X
X/* useful externals */
Xlong percentages();
X
Xint
Xmachine_init(statics)
X
Xstruct statics *statics;
X
X{
X    register int i = 0;
X    register int pagesize;
X
X    if ((kd = kvm_open(NULL, NULL, NULL, O_RDONLY, "kvm_open")) == NULL)
X	return -1;
X
X
X    /* get the list of symbols we want to access in the kernel */
X    (void) kvm_nlist(kd, nlst);
X    if (nlst[0].n_type == 0)
X    {
X	fprintf(stderr, "top: nlist failed\n");
X	return(-1);
X    }
X
X    /* make sure they were all found */
X    if (i > 0 && check_nlist(nlst) > 0)
X    {
X	return(-1);
X    }
X
X    /* get the symbol values out of kmem */
X    (void) getkval(nlst[X_STATHZ].n_value, (int *)(&hz), sizeof(hz), "!");
X    if (!hz) {
X	(void) getkval(nlst[X_HZ].n_value, (int *)(&hz), sizeof(hz),
X		       nlst[X_HZ].n_name);
X    }
X
X
X#if (defined DEBUG)
X    fprintf(stderr, "Hertz: %d\n", hz); 
X#endif
X
X    (void) getkval(nlst[X_CCPU].n_value,   (int *)(&ccpu),	sizeof(ccpu),
X	    nlst[X_CCPU].n_name);
X
X    /* stash away certain offsets for later use */
X    cp_time_offset = nlst[X_CP_TIME].n_value;
X    avenrun_offset = nlst[X_AVENRUN].n_value;
X#ifdef LASTPID
X    lastpid_offset =  nlst[X_LASTPID].n_value;
X#endif
X#ifdef VM_REAL
X    cnt_offset = nlst[X_CNT].n_value;
X#endif
X
X    /* this is used in calculating WCPU -- calculate it ahead of time */
X    logcpu = log(loaddouble(ccpu));
X
X    pbase = NULL;
X    pref = NULL;
X    nproc = 0;
X    onproc = -1;
X    /* get the page size with "getpagesize" and calculate pageshift from it */
X    pagesize = getpagesize();
X    pageshift = 0;
X    while (pagesize > 1)
X    {
X	pageshift++;
X	pagesize >>= 1;
X    }
X
X    /* we only need the amount of log(2)1024 for our conversion */
X    pageshift -= LOG1024;
X
X    /* fill in the statics information */
X    statics->procstate_names = procstatenames;
X    statics->cpustate_names = cpustatenames;
X    statics->memory_names = memorynames;
X
X    /* all done! */
X    return(0);
X}
X
Xchar *format_header(uname_field)
X
Xregister char *uname_field;
X
X{
X    register char *ptr;
X
X    ptr = header + UNAME_START;
X    while (*uname_field != '\0')
X    {
X	*ptr++ = *uname_field++;
X    }
X
X    return(header);
X}
X
Xstatic int swappgsin = -1;
Xstatic int swappgsout = -1;
Xextern struct timeval timeout;
X
Xvoid
Xget_system_info(si)
X
Xstruct system_info *si;
X
X{
X    long total;
X    load_avg avenrun[3];
X
X    /* get the cp_time array */
X    (void) getkval(cp_time_offset, (int *)cp_time, sizeof(cp_time),
X		   nlst[X_CP_TIME].n_name);
X    (void) getkval(avenrun_offset, (int *)avenrun, sizeof(avenrun),
X		   nlst[X_AVENRUN].n_name);
X
X#ifdef LASTPID
X    (void) getkval(lastpid_offset, (int *)(&lastpid), sizeof(lastpid),
X		   "!");
X#endif
X
X    /* convert load averages to doubles */
X    {
X	register int i;
X	register double *infoloadp;
X	load_avg *avenrunp;
X
X#ifdef notyet
X	struct loadavg sysload;
X	int size;
X	getkerninfo(KINFO_LOADAVG, &sysload, &size, 0);
X#endif
X
X	infoloadp = si->load_avg;
X	avenrunp = avenrun;
X	for (i = 0; i < 3; i++)
X	{
X#ifdef notyet
X	    *infoloadp++ = ((double) sysload.ldavg[i]) / sysload.fscale;
X#endif
X	    *infoloadp++ = loaddouble(*avenrunp++);
X	}
X    }
X
X    /* convert cp_time counts to percentages */
X    total = percentages(CPUSTATES, cpu_states, cp_time, cp_old, cp_diff);
X
X    /* sum memory statistics */
X    {
X
X#ifndef VM_REAL
X	struct vmtotal total;
X	int size = sizeof(total);
X	static int mib[] = { CTL_VM, VM_METER };
X
X	/* get total -- systemwide main memory usage structure */
X	if (sysctl(mib, 2, &total, &size, NULL, 0) < 0) {
X	    (void) fprintf(stderr, "top: sysctl failed: %s\n", strerror(errno));
X	    bzero(&total, sizeof(total));
X	}
X	/* convert memory stats to Kbytes */
X	memory_stats[0] = -1;
X	memory_stats[1] = pagetok(total.t_arm);
X	memory_stats[2] = pagetok(total.t_rm);
X	memory_stats[3] = -1;
X	memory_stats[4] = pagetok(total.t_avm);
X	memory_stats[5] = pagetok(total.t_vm);
X	memory_stats[6] = -1;
X	memory_stats[7] = pagetok(total.t_free);
X    }
X#else
X	struct vmmeter sum;
X	static unsigned int swap_delay = 0;
X
X        (void) getkval(cnt_offset, (int *)(&sum), sizeof(sum),
X		   "_cnt");
X
X	/* convert memory stats to Kbytes */
X	memory_stats[0] = pagetok(sum.v_active_count);
X	memory_stats[1] = pagetok(sum.v_inactive_count);
X	memory_stats[2] = pagetok(sum.v_wire_count);
X	memory_stats[3] = pagetok(sum.v_free_count);
X
X        if (swappgsin < 0) {
X	    memory_stats[5] = 0;
X	    memory_stats[6] = 0;
X	} else {
X	    memory_stats[5] = pagetok(((sum.v_pswpin - swappgsin)));
X	    memory_stats[6] = pagetok(((sum.v_pswpout - swappgsout)));
X	}
X        swappgsin = sum.v_pswpin;
X	swappgsout = sum.v_pswpout;
X
X#ifdef USE_SWAP
X        if ((memory_stats[5] > 0 || memory_stats[6]) > 0 || swap_delay == 0) {
X	    memory_stats[4] = swapmode();
X	}
X        /* swap_delay++; XXX Arne */
X#else
X        memory_stats[4] = 0;
X#endif
X
X
X	memory_stats[7] = -1;
X    }
X#endif
X    /* set arrays and strings */
X    si->cpustates = cpu_states;
X    si->memory = memory_stats;
X#ifdef LASTPID
X    if(lastpid > 0) {
X	si->last_pid = lastpid;
X    } else {
X	si->last_pid = -1;
X    }
X#else
X    si->last_pid = -1;
X#endif
X
X}
X
Xstatic struct handle handle;
X
Xcaddr_t get_process_info(si, sel, compare)
X
Xstruct system_info *si;
Xstruct process_select *sel;
Xint (*compare)();
X
X{
X    register int i;
X    register int total_procs;
X    register int active_procs;
X    register struct kinfo_proc **prefp;
X    register struct kinfo_proc *pp;
X
X    /* these are copied out of sel for speed */
X    int show_idle;
X    int show_system;
X    int show_uid;
X    int show_command;
X
X    
X    pbase = kvm_getprocs(kd, KERN_PROC_ALL, 0, &nproc);
X    if (nproc > onproc)
X	pref = (struct kinfo_proc **) realloc(pref, sizeof(struct kinfo_proc *)
X		* (onproc = nproc));
X    if (pref == NULL || pbase == NULL) {
X	(void) fprintf(stderr, "top: Out of memory.\n");
X	quit(23);
X    }
X    /* get a pointer to the states summary array */
X    si->procstates = process_states;
X
X    /* set up flags which define what we are going to select */
X    show_idle = sel->idle;
X    show_system = sel->system;
X    show_uid = sel->uid != -1;
X    show_command = sel->command != NULL;
X
X    /* count up process states and get pointers to interesting procs */
X    total_procs = 0;
X    active_procs = 0;
X    memset((char *)process_states, 0, sizeof(process_states));
X    prefp = pref;
X    for (pp = pbase, i = 0; i < nproc; pp++, i++)
X    {
X	/*
X	 *  Place pointers to each valid proc structure in pref[].
X	 *  Process slots that are actually in use have a non-zero
X	 *  status field.  Processes with P_SYSTEM set are system
X	 *  processes---these get ignored unless show_sysprocs is set.
X	 */
X	if (PP(pp, p_stat) != 0 &&
X	    (show_system || ((PP(pp, p_flag) & P_SYSTEM) == 0)))
X	{
X	    total_procs++;
X	    process_states[(unsigned char) PP(pp, p_stat)]++;
X	    if ((PP(pp, p_stat) != SZOMB) &&
X		(show_idle || (PP(pp, p_pctcpu) != 0) || 
X		 (PP(pp, p_stat) == SRUN)) &&
X		(!show_uid || EP(pp, e_pcred.p_ruid) == (uid_t)sel->uid))
X	    {
X		*prefp++ = pp;
X		active_procs++;
X	    }
X	}
X    }
X
X    /* if requested, sort the "interesting" processes */
X    if (compare != NULL)
X    {
X	qsort((char *)pref, active_procs, sizeof(struct kinfo_proc *), compare);
X    }
X
X    /* remember active and total counts */
X    si->p_total = total_procs;
X    si->p_active = pref_len = active_procs;
X
X    /* pass back a handle */
X    handle.next_proc = pref;
X    handle.remaining = active_procs;
X    return((caddr_t)&handle);
X}
X
Xchar fmt[128];		/* static area where result is built */
X
Xchar *format_next_process(handle, get_userid)
X
Xcaddr_t handle;
Xchar *(*get_userid)();
X
X{
X    register struct kinfo_proc *pp;
X    register long cputime;
X    register double pct;
X    struct handle *hp;
X
X    /* find and remember the next proc structure */
X    hp = (struct handle *)handle;
X    pp = *(hp->next_proc++);
X    hp->remaining--;
X    
X
X    /* get the process's user struct and set cputime */
X    if ((PP(pp, p_flag) & P_INMEM) == 0) {
X	/*
X	 * Print swapped processes as <pname>
X	 */
X	char *comm = PP(pp, p_comm);
X#define COMSIZ sizeof(PP(pp, p_comm))
X	char buf[COMSIZ];
X	(void) strncpy(buf, comm, COMSIZ);
X	comm[0] = '<';
X	(void) strncpy(&comm[1], buf, COMSIZ - 2);
X	comm[COMSIZ - 2] = '\0';
X	(void) strncat(comm, ">", COMSIZ - 1);
X	comm[COMSIZ - 1] = '\0';
X    }
X
X#if 0
X    /* This does not produce the correct results */
X    cputime = PP(pp, p_uticks) + PP(pp, p_sticks) + PP(pp, p_iticks);
X#endif
X    cputime = PP(pp, p_rtime).tv_sec;	/* This does not count interrupts */
X
X    /* calculate the base for cpu percentages */
X    pct = pctdouble(PP(pp, p_pctcpu));
X
X    /* format this entry */
X    sprintf(fmt,
X	    Proc_format,
X	    PP(pp, p_pid),
X	    (*get_userid)(EP(pp, e_pcred.p_ruid)),
X	    PP(pp, p_priority) - PZERO,
X	    PP(pp, p_nice) - NZERO,
X	    format_k(pagetok(PROCSIZE(pp))),
X	    format_k(pagetok(VP(pp, vm_rssize))),
X	    state_abbrev[(unsigned char) PP(pp, p_stat)],
X	    format_time(cputime),
X	    10000.0 * weighted_cpu(pct, pp) / hz,
X	    10000.0 * pct / hz,
X	    printable(PP(pp, p_comm)));
X
X    /* return the result */
X    return(fmt);
X}
X
X
X/*
X * check_nlist(nlst) - checks the nlist to see if any symbols were not
X *		found.  For every symbol that was not found, a one-line
X *		message is printed to stderr.  The routine returns the
X *		number of symbols NOT found.
X */
X
Xstatic int check_nlist(nlst)
X
Xregister struct nlist *nlst;
X
X{
X    register int i;
X
X    /* check to see if we got ALL the symbols we requested */
X    /* this will write one line to stderr for every symbol not found */
X
X    i = 0;
X    while (nlst->n_name != NULL)
X    {
X	if (nlst->n_type == 0)
X	{
X	    /* this one wasn't found */
X	    (void) fprintf(stderr, "kernel: no symbol named `%s'\n",
X			   nlst->n_name);
X	    i = 1;
X	}
X	nlst++;
X    }
X
X    return(i);
X}
X
X
X/*
X *  getkval(offset, ptr, size, refstr) - get a value out of the kernel.
X *	"offset" is the byte offset into the kernel for the desired value,
X *  	"ptr" points to a buffer into which the value is retrieved,
X *  	"size" is the size of the buffer (and the object to retrieve),
X *  	"refstr" is a reference string used when printing error meessages,
X *	    if "refstr" starts with a '!', then a failure on read will not
X *  	    be fatal (this may seem like a silly way to do things, but I
X *  	    really didn't want the overhead of another argument).
X *  	
X */
X
Xstatic int getkval(offset, ptr, size, refstr)
X
Xunsigned long offset;
Xint *ptr;
Xint size;
Xchar *refstr;
X
X{
X    if (kvm_read(kd, offset, (char *) ptr, size) != size)
X    {
X	if (*refstr == '!')
X	{
X	    return(0);
X	}
X	else
X	{
X	    fprintf(stderr, "top: kvm_read for %s: %s\n",
X		refstr, strerror(errno));
X	    quit(23);
X	}
X    }
X    return(1);
X}
X    
X/* comparison routine for qsort */
X
X/*
X *  proc_compare - comparison function for "qsort"
X *	Compares the resource consumption of two processes using five
X *  	distinct keys.  The keys (in descending order of importance) are:
X *  	percent cpu, cpu ticks, state, resident set size, total virtual
X *  	memory usage.  The process states are ordered as follows (from least
X *  	to most important):  WAIT, zombie, sleep, stop, start, run.  The
X *  	array declaration below maps a process state index into a number
X *  	that reflects this ordering.
X */
X
Xstatic unsigned char sorted_state[] =
X{
X    0,	/* not used		*/
X    3,	/* sleep		*/
X    1,	/* ABANDONED (WAIT)	*/
X    6,	/* run			*/
X    5,	/* start		*/
X    2,	/* zombie		*/
X    4	/* stop			*/
X};
X 
Xint
Xproc_compare(pp1, pp2)
X
Xstruct proc **pp1;
Xstruct proc **pp2;
X
X{
X    register struct kinfo_proc *p1;
X    register struct kinfo_proc *p2;
X    register int result;
X    register pctcpu lresult;
X
X    /* remove one level of indirection */
X    p1 = *(struct kinfo_proc **) pp1;
X    p2 = *(struct kinfo_proc **) pp2;
X
X    /* compare percent cpu (pctcpu) */
X    if ((lresult = PP(p2, p_pctcpu) - PP(p1, p_pctcpu)) == 0)
X    {
X	/* use cpticks to break the tie */
X	if ((result = PP(p2, p_cpticks) - PP(p1, p_cpticks)) == 0)
X	{
X	    /* use process state to break the tie */
X	    if ((result = sorted_state[(unsigned char) PP(p2, p_stat)] -
X			  sorted_state[(unsigned char) PP(p1, p_stat)])  == 0)
X	    {
X		/* use priority to break the tie */
X		if ((result = PP(p2, p_priority) - PP(p1, p_priority)) == 0)
X		{
X		    /* use resident set size (rssize) to break the tie */
X		    if ((result = VP(p2, vm_rssize) - VP(p1, vm_rssize)) == 0)
X		    {
X			/* use total memory to break the tie */
X			result = PROCSIZE(p2) - PROCSIZE(p1);
X		    }
X		}
X	    }
X	}
X    }
X    else
X    {
X	result = lresult < 0 ? -1 : 1;
X    }
X
X    return(result);
X}
X
X
X/*
X * proc_owner(pid) - returns the uid that owns process "pid", or -1 if
X *		the process does not exist.
X *		It is EXTREMLY IMPORTANT that this function work correctly.
X *		If top runs setuid root (as in SVR4), then this function
X *		is the only thing that stands in the way of a serious
X *		security problem.  It validates requests for the "kill"
X *		and "renice" commands.
X */
X
Xint proc_owner(pid)
X
Xint pid;
X
X{
X    register int cnt;
X    register struct kinfo_proc **prefp;
X    register struct kinfo_proc *pp;
X
X    prefp = pref;
X    cnt = pref_len;
X    while (--cnt >= 0)
X    {
X	pp = *prefp++;	
X	if (PP(pp, p_pid) == (pid_t)pid)
X	{
X	    return((int)EP(pp, e_pcred.p_ruid));
X	}
X    }
X    return(-1);
X}
X
X
X#ifdef USE_SWAP
X/*
X * swapmode is based on a program called swapinfo written
X * by Kevin Lahey <kml@rokkaku.atl.ga.us>.
X */
X
X#define	SVAR(var) __STRING(var)	/* to force expansion */
X#define	KGET(idx, var)							\
X	KGET1(idx, &var, sizeof(var), SVAR(var))
X#define	KGET1(idx, p, s, msg)						\
X	KGET2(nlst[idx].n_value, p, s, msg)
X#define	KGET2(addr, p, s, msg)						\
X	if (kvm_read(kd, (u_long)(addr), p, s) != s)			\
X		warnx("cannot read %s: %s", msg, kvm_geterr(kd))
X#define	KGETRET(addr, p, s, msg)					\
X	if (kvm_read(kd, (u_long)(addr), p, s) != s) {			\
X		warnx("cannot read %s: %s", msg, kvm_geterr(kd));	\
X		return (0);						\
X	}
X
Xint
Xswapmode()
X{
X	char *header;
X	int hlen, nswap, nswdev, dmmax, nswapmap, niswap, niswdev;
X	int s, e, div, i, l, avail, nfree, npfree, used;
X	struct swdevt *sw;
X	long blocksize, *perdev;
X	struct map *swapmap, *kswapmap;
X	struct mapent *mp, *freemp;
X
X	KGET(VM_NSWAP, nswap);
X	KGET(VM_NSWDEV, nswdev);
X	KGET(VM_DMMAX, dmmax);
X	KGET(VM_NSWAPMAP, nswapmap);
X	KGET(VM_SWAPMAP, kswapmap);	/* kernel `swapmap' is a pointer */
X	if ((sw = malloc(nswdev * sizeof(*sw))) == NULL ||
X	    (perdev = malloc(nswdev * sizeof(*perdev))) == NULL ||
X	    (freemp = mp = malloc(nswapmap * sizeof(*mp))) == NULL)
X		err(1, "malloc");
X	KGET1(VM_SWDEVT, sw, nswdev * sizeof(*sw), "swdevt");
X	KGET2((long)kswapmap, mp, nswapmap * sizeof(*mp), "swapmap");
X
X	/* Supports sequential swap */
X	if (nlst[VM_NISWAP].n_value != 0) {
X		KGET(VM_NISWAP, niswap);
X		KGET(VM_NISWDEV, niswdev);
X	} else {
X		niswap = nswap;
X		niswdev = nswdev;
X	}
X
X	/* First entry in map is `struct map'; rest are mapent's. */
X	swapmap = (struct map *)mp;
X	if (nswapmap != swapmap->m_limit - (struct mapent *)kswapmap)
X		errx(1, "panic: nswapmap goof");
X
X	/* Count up swap space. */
X	nfree = 0;
X	memset(perdev, 0, nswdev * sizeof(*perdev));
X	for (mp++; mp->m_addr != 0; mp++) {
X		s = mp->m_addr;			/* start of swap region */
X		e = mp->m_addr + mp->m_size;	/* end of region */
X		nfree += mp->m_size;
X
X		/*
X		 * Swap space is split up among the configured disks.
X		 *
X		 * For interleaved swap devices, the first dmmax blocks
X		 * of swap space some from the first disk, the next dmmax
X		 * blocks from the next, and so on up to niswap blocks.
X		 *
X		 * Sequential swap devices follow the interleaved devices
X		 * (i.e. blocks starting at niswap) in the order in which
X		 * they appear in the swdev table.  The size of each device
X		 * will be a multiple of dmmax.
X		 *
X		 * The list of free space joins adjacent free blocks,
X		 * ignoring device boundries.  If we want to keep track
X		 * of this information per device, we'll just have to
X		 * extract it ourselves.  We know that dmmax-sized chunks
X		 * cannot span device boundaries (interleaved or sequential)
X		 * so we loop over such chunks assigning them to devices.
X		 */
X		i = -1;
X		while (s < e) {		/* XXX this is inefficient */
X			int bound = roundup(s+1, dmmax);
X
X			if (bound > e)
X				bound = e;
X			if (bound <= niswap) {
X				/* Interleaved swap chunk. */
X				if (i == -1)
X					i = (s / dmmax) % niswdev;
X				perdev[i] += bound - s;
X				if (++i >= niswdev)
X					i = 0;
X			} else {
X				/* Sequential swap chunk. */
X				if (i < niswdev) {
X					i = niswdev;
X					l = niswap + sw[i].sw_nblks;
X				}
X				while (s >= l) {
X					/* XXX don't die on bogus blocks */
X					if (i == nswdev-1)
X						break;
X					l += sw[++i].sw_nblks;
X				}
X				perdev[i] += bound - s;
X			}
X			s = bound;
X		}
X	}
X
X	header = getbsize(&hlen, &blocksize);
X	div = blocksize / 512;
X	avail = npfree = 0;
X	for (i = 0; i < nswdev; i++) {
X		int xsize, xfree;
X
X		xsize = sw[i].sw_nblks;
X		xfree = perdev[i];
X		used = xsize - xfree;
X		npfree++;
X		avail += xsize;
X	}
X
X	/* 
X	 * If only one partition has been set up via swapon(8), we don't
X	 * need to bother with totals.
X	 */
X	used = avail - nfree;
X	free (sw); free (freemp); free (perdev);
X	return  (int)(((double)used / (double)avail * 100.0) + 0.5);
X}
X
X
X#endif
X
END_OF_FILE
if test 23164 -ne `wc -c <'machine/m_netbsd10.c'`; then
    echo shar: \"'machine/m_netbsd10.c'\" unpacked with wrong size!
fi
# end of 'machine/m_netbsd10.c'
fi
if test -f 'machine/m_sunos5.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'machine/m_sunos5.c'\"
else
echo shar: Extracting \"'machine/m_sunos5.c'\" \(23154 characters\)
sed "s/^X//" >'machine/m_sunos5.c' <<'END_OF_FILE'
X/*
X * top - a top users display for Unix
X *
X * SYNOPSIS:  Any Sun running SunOS 5.x (Solaris 2.x)
X *
X * DESCRIPTION:
X * This is the machine-dependent module for SunOS 5.x (Solaris 2).
X * There is some support for MP architectures.
X * This makes top work on the following systems:
X *         SunOS 5.0 (not tested)
X *         SunOS 5.1
X *         SunOS 5.2
X *         SunOS 5.3
X *
X *     Tested on a SPARCclassic with SunOS 5.1, using gcc-2.3.3, and
X *     SPARCsystem 600 with SunOS 5.2, using Sun C
X *
X * LIBS: -lelf -lkvm
X *
X * CFLAGS: -DHAVE_GETOPT
X *
X *
X * AUTHORS:      Torsten Kasch 		<torsten@techfak.uni-bielefeld.de>
X *               Robert Boucher		<boucher@sofkin.ca>
X * CONTRIBUTORS: Marc Cohen 		<marc@aai.com>
X *               Charles Hedrick 	<hedrick@geneva.rutgers.edu>
X *	         William L. Jones 	<jones@chpc>
X *               Petri Kutvonen         <kutvonen@cs.helsinki.fi>
X *	         Casper Dik             <casper@fwi.uva.nl>
X */
X#define _KMEMUSER
X#include "top.h"
X#include "machine.h"
X#include "utils.h"
X#include <stdio.h>
X#include <fcntl.h>
X#include <unistd.h>
X#include <stdlib.h>
X#include <errno.h>
X#include <dirent.h>
X#include <nlist.h>
X#include <string.h>
X#include <kvm.h>
X#include <sys/types.h>
X#include <sys/param.h>
X#include <sys/signal.h>
X#include <sys/fault.h>
X#include <sys/sysinfo.h>
X#include <sys/sysmacros.h>
X#include <sys/syscall.h>
X#include <sys/user.h>
X#include <sys/proc.h>
X#include <sys/procfs.h>
X#include <sys/vm.h>
X#include <sys/var.h>
X#include <sys/cpuvar.h>
X#include <sys/file.h>
X#include <sys/time.h>
X#include <sys/priocntl.h>
X#include <sys/tspriocntl.h>
X#include <sys/processor.h>
X#include <vm/anon.h>
X#include <math.h>
X
X#define UNIX "/dev/ksyms"
X#define KMEM "/dev/kmem"
X#define PROCFS "/proc"
X#define CPUSTATES     5
X#ifndef PRIO_MIN
X#define PRIO_MIN	-20
X#endif
X#ifndef PRIO_MAX
X#define PRIO_MAX	20
X#endif
X
X#ifndef FSCALE
X#define FSHIFT  8		/* bits to right of fixed binary point */
X#define FSCALE  (1<<FSHIFT)
X#endif /* FSCALE */
X
X#define loaddouble(la) ((double)(la) / FSCALE)
X#define dbl_align(x)	(((unsigned long)(x)+(sizeof(double)-1)) & \
X						~(sizeof(double)-1))
X#ifdef SOLARIS24
X    /*
X     * snarfed from <sys/procfs.h>:
X     * The following percent numbers are 16-bit binary
X     * fractions [0 .. 1] with the binary point to the
X     * right of the high-order bit (one == 0x8000)
X     */
X#define percent_cpu(pp) (((double)pp->pr_pctcpu)/0x8000*100)
X#define weighted_cpu(pp) (*(double *)dbl_align(pp->pr_filler))
X#else
X#define percent_cpu(pp) (*(double *)dbl_align(&pp->pr_filler[0]))
X#define weighted_cpu(pp) (*(double *)dbl_align(&pp->pr_filler[2]))
X#endif
X
X/* NOTE:  this next macro assumes that PAGESHIFT is 12---i.e.: a page is 4K.
X   This is a blatantly general assumption and ought to be fixed */
X#define pagetok(size) ((size)<<2)
X
X/* definitions for indices in the nlist array */
X#define X_AVENRUN		 0
X#define X_MPID			 1
X#define X_CPU			 2
X#define X_V			 3
X#define X_NPROC			 4
X#define X_ANONINFO		 5
X#define X_FREEMEM		 6
X#define X_MAXMEM		 7
X#define X_AVAILRMEM		 8
X#define X_SWAPFS_MINFREE	 9
X#define X_NCPUS		   	10
X
Xstatic struct nlist nlst[] =
X{
X  {"avenrun"},			/* 0 */
X  {"mpid"},			/* 1 */
X  {"cpu"},			/* 2 */
X  {"v"},			/* 3 */
X  {"nproc"},			/* 4 */
X  {"anoninfo"},			/* 5 */
X  {"freemem"},			/* 6 */
X  {"maxmem"},			/* 7 */
X  {"availrmem"},		/* 8 */
X  {"swapfs_minfree"},		/* 9 */
X  {"ncpus"},			/* 10 */
X  {0}
X};
X
Xstatic unsigned long avenrun_offset;
Xstatic unsigned long mpid_offset;
Xstatic unsigned long *cpu_offset;
Xstatic unsigned long nproc_offset;
Xstatic unsigned long freemem_offset;
Xstatic unsigned long maxmem_offset;
Xstatic unsigned long availrmem_offset;
Xstatic unsigned long swapfs_minfree_offset;
Xstatic unsigned long anoninfo_offset;
X
X/* get_process_info passes back a handle.  This is what it looks like: */
Xstruct handle
X  {
X    struct prpsinfo **next_proc;/* points to next valid proc pointer */
X    int remaining;		/* number of pointers remaining */
X  };
X
X/*
X * Structure for keeping track of CPU times from last time around
X * the program.  We keep these things in a hash table, which is
X * recreated at every cycle.
X */
Xstruct oldproc
X  {
X    pid_t oldpid;
X    double oldtime;
X    double oldpct;
X  };
Xint oldprocs;			/* size of table */
X#define HASH(x) ((x << 1) % oldprocs)
X
X/*
X * GCC assumes that all doubles are aligned.  Unfortunately it
X * doesn't round up the structure size to be a multiple of 8.
X * Thus we'll get a coredump when going through array.  The
X * following is a size rounded up to 8.
X */
X#define PRPSINFOSIZE dbl_align(sizeof(struct prpsinfo))
X/*
X *  These definitions control the format of the per-process area
X */
Xstatic char header[] =
X"  PID X        PRI NICE  SIZE   RES STATE   TIME   WCPU    CPU COMMAND";
X/* 0123456   -- field to fill in starts at header+6 */
X#define UNAME_START 6
X
X#define Proc_format \
X        "%5d %-8.8s %3d %4d %5s %5s %-5s %6s %5.2f%% %5.2f%% %s"
X
X/* process state names for the "STATE" column of the display */
X/* the extra nulls in the string "run" are for adding a slash and
X   the processor number when needed */
Xchar *state_abbrev[] =
X{"", "sleep", "run", "zombie", "stop", "start", "cpu", "swap"};
X
Xint process_states[8];
Xchar *procstatenames[] =
X{
X  "", " sleeping, ", " running, ", " zombie, ", " stopped, ",
X  " starting, ", " on cpu, ", " swapped, ",
X  NULL
X};
X
Xint cpu_states[CPUSTATES];
Xchar *cpustatenames[] =
X{"idle", "user", "kernel", "iowait", "swap", NULL};
X
X/* these are for detailing the memory statistics */
Xint memory_stats[5];
Xchar *memorynames[] =
X{"K real, ", "K active, ", "K free, ", "K swap, ", "K free swap", NULL};
X
Xkvm_t *kd;
Xstatic DIR *procdir;
Xstatic int nproc;
Xstatic int ncpus;
X
X/* these are for keeping track of the proc array */
Xstatic int bytes;
Xstatic struct prpsinfo *pbase;
Xstatic struct prpsinfo **pref;
Xstatic struct oldproc *oldbase;
X
X/* useful externals */
Xextern int errno;
Xextern char *sys_errlist[];
Xextern char *myname;
Xextern int check_nlist ();
Xextern int gettimeofday ();
Xextern int getkval ();
Xextern void perror ();
Xextern void getptable ();
Xextern void quit ();
Xextern int nlist ();
X
Xint
Xmachine_init (struct statics *statics)
X  {
X    static struct var v;
X    struct oldproc *op, *endbase;
X    int i;
X    int offset;
X    processor_info_t pi;
X
X    /* perform the kvm_open */
X    kd = kvm_open (NULL, NULL, NULL, O_RDONLY, "top");
X
X    /* turn off super user privs */
X    seteuid(getuid());
X
X    /* fill in the statics information */
X    statics->procstate_names = procstatenames;
X    statics->cpustate_names = cpustatenames;
X    statics->memory_names = memorynames;
X
X    /* test kvm_open return value */
X    if (kd == NULL)
X      {
X	perror ("kvm_open");
X	return (-1);
X      }
X    if (kvm_nlist (kd, nlst) < 0)
X      {
X	perror ("kvm_nlist");
X	return (-1);
X      }
X    if (check_nlist (nlst) != 0)
X      return (-1);
X
X    /* NPROC Tuning parameter for max number of processes */
X    (void) getkval (nlst[X_V].n_value, &v, sizeof (struct var), nlst[X_V].n_name);
X    nproc = v.v_proc;
X
X    /* stash away certain offsets for later use */
X    mpid_offset = nlst[X_MPID].n_value;
X    nproc_offset = nlst[X_NPROC].n_value;
X    avenrun_offset = nlst[X_AVENRUN].n_value;
X    anoninfo_offset = nlst[X_ANONINFO].n_value;
X    freemem_offset = nlst[X_FREEMEM].n_value;
X    maxmem_offset = nlst[X_MAXMEM].n_value;
X    availrmem_offset = nlst[X_AVAILRMEM].n_value;
X    swapfs_minfree_offset = nlst[X_SWAPFS_MINFREE].n_value;
X
X    (void) getkval (nlst[X_NCPUS].n_value, (int *) (&ncpus),
X		    sizeof (ncpus), "ncpus");
X
X    cpu_offset = (unsigned long *) malloc (ncpus * sizeof (unsigned long));
X    for (i = offset = 0; i < ncpus; offset += sizeof(unsigned long)) {
X        (void) getkval (nlst[X_CPU].n_value + offset,
X                        &cpu_offset[i], sizeof (unsigned long),
X                        nlst[X_CPU].n_name );
X        if (cpu_offset[i] != 0)
X            i++;
X    }
X
X
X    /* allocate space for proc structure array and array of pointers */
X    bytes = nproc * PRPSINFOSIZE;
X    pbase = (struct prpsinfo *) malloc (bytes);
X    pref = (struct prpsinfo **) malloc (nproc * sizeof (struct prpsinfo *));
X    oldbase = (struct oldproc *) malloc (2 * nproc * sizeof (struct oldproc));
X
X
X    /* Just in case ... */
X    if (pbase == (struct prpsinfo *) NULL || pref == (struct prpsinfo **) NULL
X	|| oldbase == (struct oldproc *) NULL)
X      {
X	fprintf (stderr, "%s: can't allocate sufficient memory\n", myname);
X	return (-1);
X      }
X
X    oldprocs = 2 * nproc;
X    endbase = oldbase + oldprocs;
X    for (op = oldbase; op < endbase; op++)
X      op->oldpid = -1;
X
X    if (!(procdir = opendir (PROCFS)))
X      {
X	(void) fprintf (stderr, "Unable to open %s\n", PROCFS);
X	return (-1);
X      }
X
X    if (chdir (PROCFS))
X      {				/* handy for later on when we're reading it */
X	(void) fprintf (stderr, "Unable to chdir to %s\n", PROCFS);
X	return (-1);
X      }
X
X    /* all done! */
X    return (0);
X  }
X
X
Xchar *
Xformat_header (register char *uname_field)
X{
X  register char *ptr;
X
X  ptr = header + UNAME_START;
X  while (*uname_field != '\0')
X    *ptr++ = *uname_field++;
X
X  return (header);
X}
X
Xvoid
Xget_system_info (struct system_info *si)
X{
X  long avenrun[3];
X  struct cpu cpu;
X  static int freemem;
X  static int maxmem;
X  static int availrmem;
X  static int swapfs_minfree;
X  struct anoninfo anoninfo;
X  static long cp_time[CPUSTATES];
X  static long cp_old[CPUSTATES];
X  static long cp_diff[CPUSTATES];
X  register int j, i;
X
X  /* get the cp_time array */
X  for (j = 0; j < CPUSTATES; j++)
X    cp_time[j] = 0L;
X
X  for (i = 0; i < ncpus; i++)
X    if (cpu_offset[i] != 0)
X    {
X      (void) getkval (cpu_offset[i], &cpu, sizeof (struct cpu), "cpu");
X      for (j = 0; j < CPUSTATES-1; j++)
X	cp_time[j] += (long) cpu.cpu_stat.cpu_sysinfo.cpu[j];
X      cp_time[CPUSTATES-2] += (long) cpu.cpu_stat.cpu_sysinfo.wait[W_IO] +
X                              (long) cpu.cpu_stat.cpu_sysinfo.wait[W_PIO];
X      cp_time[CPUSTATES-1] += (long) cpu.cpu_stat.cpu_sysinfo.wait[W_SWAP];
X    }
X
X  /* convert cp_time counts to percentages */
X  (void) percentages (CPUSTATES, cpu_states, cp_time, cp_old, cp_diff);
X
X  /* get mpid -- process id of last process */
X  (void) getkval (mpid_offset, &(si->last_pid), sizeof (si->last_pid), "mpid");
X
X  /* get load average array */
X  (void) getkval (avenrun_offset, (int *) avenrun, sizeof (avenrun), "avenrun");
X
X  /* convert load averages to doubles */
X  for (i = 0; i < 3; i++)
X    si->load_avg[i] = loaddouble (avenrun[i]);
X
X  /* get system wide main memory usage structure */
X  (void) getkval (freemem_offset, (int *) (&freemem), sizeof (freemem), "freemem");
X  (void) getkval (maxmem_offset, (int *) (&maxmem), sizeof (maxmem), "maxmem");
X  memory_stats[0] = pagetok (maxmem);
X  memory_stats[1] = 0;
X  memory_stats[2] = pagetok (freemem);
X  (void) getkval (anoninfo_offset, (int *) (&anoninfo), sizeof (anoninfo), "anoninfo");
X  (void) getkval (availrmem_offset, (int *) (&availrmem), sizeof (availrmem), "availrmem");
X  (void) getkval (swapfs_minfree_offset, (int *) (&swapfs_minfree), sizeof (swapfs_minfree), "swapfs_minfree");
X  memory_stats[3] = pagetok (anoninfo.ani_resv);
X  memory_stats[4] = pagetok (MAX ((int) (anoninfo.ani_max - anoninfo.ani_resv), 0) + availrmem - swapfs_minfree);
X
X  /* set arrays and strings */
X  si->cpustates = cpu_states;
X  si->memory = memory_stats;
X}
X
Xstatic struct handle handle;
X
Xcaddr_t
Xget_process_info (
X		   struct system_info *si,
X		   struct process_select *sel,
X		   int (*compare) ())
X{
X  register int i;
X  register int total_procs;
X  register int active_procs;
X  register struct prpsinfo **prefp;
X  register struct prpsinfo *pp;
X
X  /* these are copied out of sel for speed */
X  int show_idle;
X  int show_system;
X  int show_uid;
X
X  /* Get current number of processes */
X  (void) getkval (nproc_offset, (int *) (&nproc), sizeof (nproc), "nproc");
X
X  /* read all the proc structures */
X  getptable (pbase);
X
X  /* get a pointer to the states summary array */
X  si->procstates = process_states;
X
X  /* set up flags which define what we are going to select */
X  show_idle = sel->idle;
X  show_system = sel->system;
X  show_uid = sel->uid != -1;
X
X  /* count up process states and get pointers to interesting procs */
X  total_procs = 0;
X  active_procs = 0;
X  (void) memset (process_states, 0, sizeof (process_states));
X  prefp = pref;
X
X  for (pp = pbase, i = 0; i < nproc;
X       i++, pp = (struct prpsinfo *) ((char *) pp + PRPSINFOSIZE))
X    {
X      /*
X	 *  Place pointers to each valid proc structure in pref[].
X	 *  Process slots that are actually in use have a non-zero
X	 *  status field.  Processes with SSYS set are system
X	 *  processes---these get ignored unless show_sysprocs is set.
X	 */
X      if (pp->pr_state != 0 &&
X	  (show_system || ((pp->pr_flag & SSYS) == 0)))
X	{
X	  total_procs++;
X	  process_states[pp->pr_state]++;
X	  if ((!pp->pr_zomb) &&
X	      (show_idle || percent_cpu (pp) || (pp->pr_state == SRUN) || (pp->pr_state == SONPROC)) &&
X	      (!show_uid || pp->pr_uid == (uid_t) sel->uid))
X	    {
X	      *prefp++ = pp;
X	      active_procs++;
X	    }
X	}
X    }
X
X  /* if requested, sort the "interesting" processes */
X  if (compare != NULL)
X    qsort ((char *) pref, active_procs, sizeof (struct prpsinfo *), compare);
X
X  /* remember active and total counts */
X  si->p_total = total_procs;
X  si->p_active = active_procs;
X
X  /* pass back a handle */
X  handle.next_proc = pref;
X  handle.remaining = active_procs;
X  return ((caddr_t) & handle);
X}
X
Xchar fmt[MAX_COLS];			/* static area where result is built */
X
Xchar *
Xformat_next_process (
X		      caddr_t handle,
X		      char *(*get_userid) ())
X{
X  register struct prpsinfo *pp;
X  struct handle *hp;
X  register long cputime;
X  register double pctcpu;
X
X  /* find and remember the next proc structure */
X  hp = (struct handle *) handle;
X  pp = *(hp->next_proc++);
X  hp->remaining--;
X
X  /* get the cpu usage and calculate the cpu percentages */
X  cputime = pp->pr_time.tv_sec;
X  pctcpu = percent_cpu (pp);
X
X  /* format this entry */
X  sprintf (fmt,
X	   Proc_format,
X	   pp->pr_pid,
X	   (*get_userid) (pp->pr_uid),
X	   pp->pr_pri - PZERO,
X	   pp->pr_nice - NZERO,
X	   format_k(pp->pr_bysize / 1024),
X	   format_k(pp->pr_byrssize / 1024),
X	   state_abbrev[pp->pr_state],
X	   format_time(cputime),
X	   weighted_cpu (pp),
X	   pctcpu,
X	   pp->pr_fname);
X
X  /* return the result */
X  return (fmt);
X}
X
X/*
X * check_nlist(nlst) - checks the nlist to see if any symbols were not
X *		found.  For every symbol that was not found, a one-line
X *		message is printed to stderr.  The routine returns the
X *		number of symbols NOT found.
X */
Xint
Xcheck_nlist (register struct nlist *nlst)
X{
X  register int i;
X
X  /* check to see if we got ALL the symbols we requested */
X  /* this will write one line to stderr for every symbol not found */
X
X  i = 0;
X  while (nlst->n_name != NULL)
X    {
X      if (nlst->n_type == 0)
X	{
X	  /* this one wasn't found */
X	  fprintf (stderr, "kernel: no symbol named `%s'\n", nlst->n_name);
X	  i = 1;
X	}
X      nlst++;
X    }
X  return (i);
X}
X
X
X/*
X *  getkval(offset, ptr, size, refstr) - get a value out of the kernel.
X *	"offset" is the byte offset into the kernel for the desired value,
X *  	"ptr" points to a buffer into which the value is retrieved,
X *  	"size" is the size of the buffer (and the object to retrieve),
X *  	"refstr" is a reference string used when printing error meessages,
X *	    if "refstr" starts with a '!', then a failure on read will not
X *  	    be fatal (this may seem like a silly way to do things, but I
X *  	    really didn't want the overhead of another argument).
X *
X */
Xint
Xgetkval (unsigned long offset,
X	 int *ptr,
X	 int size,
X	 char *refstr)
X{
X  if (kvm_read (kd, offset, (char *) ptr, size) != size)
X    {
X      if (*refstr == '!')
X	{
X	  return (0);
X	}
X      else
X	{
X	  fprintf (stderr, "top: kvm_read for %s: %s\n", refstr, sys_errlist[errno]);
X	  quit (23);
X	}
X    }
X  return (1);
X
X}
X
X/* comparison routine for qsort */
X
X/*
X *  proc_compare - comparison function for "qsort"
X *	Compares the resource consumption of two processes using five
X *  	distinct keys.  The keys (in descending order of importance) are:
X *  	percent cpu, cpu ticks, state, resident set size, total virtual
X *  	memory usage.  The process states are ordered as follows (from least
X *  	to most important):  WAIT, zombie, sleep, stop, start, run.  The
X *  	array declaration below maps a process state index into a number
X *  	that reflects this ordering.
X */
X
X
Xunsigned char sorted_state[] =
X{
X  0,				/* not used		*/
X  3,				/* sleep		*/
X  6,				/* run			*/
X  2,				/* zombie		*/
X  4,				/* stop			*/
X  5,				/* start		*/
X  7,				/* run on a processor   */
X  1				/* being swapped (WAIT)	*/
X};
Xint
Xproc_compare (
X	       struct prpsinfo **pp1,
X	       struct prpsinfo **pp2)
X  {
X    register struct prpsinfo *p1;
X    register struct prpsinfo *p2;
X    register long result;
X    double dresult;
X
X    /* remove one level of indirection */
X    p1 = *pp1;
X    p2 = *pp2;
X
X    /* compare percent cpu (pctcpu) */
X    dresult = percent_cpu (p2) - percent_cpu (p1);
X    if (dresult != 0.0)
X      {
X	if (dresult > 0.0)
X	  return 1;
X	else
X	  return -1;
X      }
X    {
X      /* use cpticks to break the tie */
X      if ((result = p2->pr_time.tv_sec - p1->pr_time.tv_sec) == 0)
X	{
X	  /* use process state to break the tie */
X	  if ((result = (long) (sorted_state[p2->pr_state] -
X				sorted_state[p1->pr_state])) == 0)
X	    {
X	      /* use priority to break the tie */
X	      if ((result = p2->pr_oldpri - p1->pr_oldpri) == 0)
X		{
X		  /* use resident set size (rssize) to break the tie */
X		  if ((result = p2->pr_rssize - p1->pr_rssize) == 0)
X		    {
X		      /* use total memory to break the tie */
X		      result = (p2->pr_size - p1->pr_size);
X		    }
X		}
X	    }
X	}
X    }
X    return (result);
X  }
X
X/*
Xget process table
X V.4 only has a linked list of processes so we want to follow that
X linked list, get all the process structures, and put them in our own
X table
X*/
Xvoid
Xgetptable (struct prpsinfo *baseptr)
X{
X  struct prpsinfo *currproc;	/* pointer to current proc structure	*/
X  int numprocs = 0;
X  int i;
X  struct dirent *direntp;
X  struct oldproc *op;
X  static struct timeval lasttime =
X  {0, 0};
X  struct timeval thistime;
X  double timediff;
X  double alpha, beta;
X  struct oldproc *endbase;
X
X  gettimeofday (&thistime);
X  /*
X   * To avoid divides, we keep times in nanoseconds.  This is
X   * scaled by 1e7 rather than 1e9 so that when we divide we
X   * get percent.
X   */
X  if (lasttime.tv_sec)
X    timediff = ((double) thistime.tv_sec * 1.0e7 +
X		((double) thistime.tv_usec * 10.0)) -
X      ((double) lasttime.tv_sec * 1.0e7 +
X       ((double) lasttime.tv_usec * 10.0));
X  else
X    timediff = 1.0e7;
X
X  /*
X     * constants for exponential average.  avg = alpha * new + beta * avg
X     * The goal is 50% decay in 30 sec.  However if the sample period
X     * is greater than 30 sec, there's not a lot we can do.
X     */
X  if (timediff < 30.0e7)
X    {
X      alpha = 0.5 * (timediff / 30.0e7);
X      beta = 1.0 - alpha;
X    }
X  else
X    {
X      alpha = 0.5;
X      beta = 0.5;
X    }
X
X  endbase = oldbase + oldprocs;
X  currproc = baseptr;
X
X  /* before reading /proc files, turn on root privs */
X  /* (we don't care if this fails since it will be caught later) */
X  seteuid(0);
X
X  for (rewinddir (procdir); (direntp = readdir (procdir));)
X    {
X      int fd;
X
X      if ((fd = open (direntp->d_name, O_RDONLY)) < 0)
X	continue;
X
X      if (ioctl (fd, PIOCPSINFO, currproc) < 0)
X	{
X	  (void) close (fd);
X	  continue;
X	}
X
X      /*
X       * SVr4 doesn't keep track of CPU% in the kernel, so we have
X       * to do our own.  See if we've heard of this process before.
X       * If so, compute % based on CPU since last time.
X       */
X      op = oldbase + HASH (currproc->pr_pid);
X      while (1)
X	{
X	  if (op->oldpid == -1)	/* not there */
X	    break;
X	  if (op->oldpid == currproc->pr_pid)
X	    {			/* found old data */
X#ifndef SOLARIS24
X	      percent_cpu (currproc) =
X		((currproc->pr_time.tv_sec * 1.0e9 +
X		  currproc->pr_time.tv_nsec)
X		 - op->oldtime) / timediff;
X#endif
X	      weighted_cpu (currproc) =
X		op->oldpct * beta + percent_cpu (currproc) * alpha;
X
X	      break;
X	    }
X	  op++;			/* try next entry in hash table */
X	  if (op == endbase)	/* table wrapped around */
X	    op = oldbase;
X	}
X
X      /* Otherwise, it's new, so use all of its CPU time */
X      if (op->oldpid == -1)
X	{
X#ifdef SOLARIS24
X	  weighted_cpu (currproc) =
X	    percent_cpu (currproc);
X#else
X	  if (lasttime.tv_sec)
X	    {
X	      percent_cpu (currproc) =
X		(currproc->pr_time.tv_sec * 1.0e9 +
X		 currproc->pr_time.tv_nsec) / timediff;
X	      weighted_cpu (currproc) =
X		percent_cpu (currproc);
X	    }
X	  else
X	    {			/* first screen -- no difference is possible */
X	      percent_cpu (currproc) = 0.0;
X	      weighted_cpu (currproc) = 0.0;
X	    }
X#endif
X	}
X
X      numprocs++;
X      currproc = (struct prpsinfo *) ((char *) currproc + PRPSINFOSIZE);
X      (void) close (fd);
X    }
X
X  /* turn off root privs */
X  seteuid(getuid());
X
X  if (nproc != numprocs)
X    nproc = numprocs;
X
X  /*
X   * Save current CPU time for next time around
X   * For the moment recreate the hash table each time, as the code
X   * is easier that way.
X   */
X  oldprocs = 2 * nproc;
X  endbase = oldbase + oldprocs;
X  for (op = oldbase; op < endbase; op++)
X    op->oldpid = -1;
X  for (i = 0, currproc = baseptr;
X       i < nproc;
X     i++, currproc = (struct prpsinfo *) ((char *) currproc + PRPSINFOSIZE))
X    {
X      /* find an empty spot */
X      op = oldbase + HASH (currproc->pr_pid);
X      while (1)
X	{
X	  if (op->oldpid == -1)
X	    break;
X	  op++;
X	  if (op == endbase)
X	    op = oldbase;
X	}
X      op->oldpid = currproc->pr_pid;
X      op->oldtime = (currproc->pr_time.tv_sec * 1.0e9 +
X		     currproc->pr_time.tv_nsec);
X      op->oldpct = weighted_cpu (currproc);
X    }
X  lasttime = thistime;
X}
X
X/*
X * proc_owner(pid) - returns the uid that owns process "pid", or -1 if
X *              the process does not exist.
X *              It is EXTREMLY IMPORTANT that this function work correctly.
X *              If top runs setuid root (as in SVR4), then this function
X *              is the only thing that stands in the way of a serious
X *              security problem.  It validates requests for the "kill"
X *              and "renice" commands.
X */
Xuid_t
Xproc_owner (pid_t pid)
X{
X  register struct prpsinfo *p;
X  int i;
X  for (i = 0, p = pbase; i < nproc;
X       i++, p = (struct prpsinfo *) ((char *) p + PRPSINFOSIZE)) {
X    if (p->pr_pid == pid)
X      return (p->pr_uid);
X  }
X  return (-1);
X}
X
Xint
Xsetpriority (int dummy, int who, int niceval)
X{
X  int scale;
X  int prio;
X  pcinfo_t pcinfo;
X  pcparms_t pcparms;
X  tsparms_t *tsparms;
X
X  strcpy (pcinfo.pc_clname, "TS");
X  if (priocntl (0, 0, PC_GETCID, (caddr_t) & pcinfo) == -1)
X    return (-1);
X
X  prio = niceval;
X  if (prio > PRIO_MAX)
X    prio = PRIO_MAX;
X  else if (prio < PRIO_MIN)
X    prio = PRIO_MIN;
X
X  tsparms = (tsparms_t *) pcparms.pc_clparms;
X  scale = ((tsinfo_t *) pcinfo.pc_clinfo)->ts_maxupri;
X  tsparms->ts_uprilim = tsparms->ts_upri = -(scale * prio) / 20;
X  pcparms.pc_cid = pcinfo.pc_cid;
X
X  if (priocntl (P_PID, who, PC_SETPARMS, (caddr_t) & pcparms) == -1)
X    return (-1);
X
X  return (0);
X}
END_OF_FILE
if test 23154 -ne `wc -c <'machine/m_sunos5.c'`; then
    echo shar: \"'machine/m_sunos5.c'\" unpacked with wrong size!
fi
# end of 'machine/m_sunos5.c'
fi
echo shar: End of archive 15 \(of 16\).
cp /dev/null ark15isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 16 archives.
    echo "Now read README and INSTALL, then run Configure"
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
