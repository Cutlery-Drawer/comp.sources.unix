Newsgroups: comp.sources.unix
From: lefebvre@athens.dis.anl.gov (William LeFebvre)
Subject: v29i016: top-3.3 - top users display, V3.3, Part16/16
References: <1.801816033.16454@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: lefebvre@athens.dis.anl.gov (William LeFebvre)
Posting-Number: Volume 29, Issue 16
Archive-Name: top-3.3/part16

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 16 (of 16)."
# Contents:  machine/m_decosf1.c
# Wrapped by lefebvre@athens on Thu Mar  2 11:39:44 1995
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'machine/m_decosf1.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'machine/m_decosf1.c'\"
else
echo shar: Extracting \"'machine/m_decosf1.c'\" \(23310 characters\)
sed "s/^X//" >'machine/m_decosf1.c' <<'END_OF_FILE'
X/*
X * top - a top users display for Unix
X *
X * SYNOPSIS:  DEC Alpha AXP running OSF/1, versions 1.2, 1.3, 2.0, 3.0
X *
X * DESCRIPTION:
X * This is the machine-dependent module for DEC OSF/1 
X * It is known to work on OSF/1 1.2, 1.3, 2.0-T3, and 3.0
X * WARNING: do not use optimization with the standard "cc" compiler that
X * .        comes with V3.0.  There is some sort of bug that causes the
X * .        resulting executable to core dump.  When asked for compiler
X * .        options, do NOT specify -O.
X *
X * LIBS: -lmld -lmach
X *
X * CFLAGS: -DHAVE_GETOPT
X *
X * AUTHOR:  Anthony Baxter, <anthony@aaii.oz.au>
X * Derived originally from m_ultrix, by David S. Comay <dsc@seismo.css.gov>, 
X * although by now there is hardly any of the code from m_ultrix left.
X * Helped a lot by having the source for syd(1), by Claus Kalle, and
X * from several people at DEC who helped with providing information on
X * some of the less-documented bits of the kernel interface.
X *
X * Modified: 31-Oct-94, Pat Welch, tpw@physics.orst.edu
X *	changed _mpid to pidtab for compatibility with OSF/1 version 3.0
X *
X * Modified: 13-Dec-94, William LeFebvre, lefebvre@dis.anl.gov
X *	removed used of pidtab (that was bogus) and changed things to
X *	automatically detect the absence of _mpid in the nlist and
X *	recover gracefully---this appears to be the only difference
X *	with 3.0.
X */
X/* 
X * $Id: m_decosf1.c,v 1.14 1994/01/18 07:34:42 anthony Exp $
X * Theres some real icky bits in this code - you have been warned :)
X * Extremely icky bits are marked with FIXME: 
X *
X * Theory of operation: 
X * 
X * Use Mach calls to build up a structure that contains all the sorts
X * of stuff normally found in a struct proc in a BSD system. Then
X * everything else uses this structure. This has major performance wins,
X * and also should work for future versions of the O/S.
X */
X
X#include <sys/types.h>
X#include <sys/signal.h>
X#include <sys/param.h>
X
X#include <string.h>
X#include <sys/user.h>
X#include <stdio.h>
X#include <nlist.h>
X#include <math.h>
X#include <sys/dir.h>
X#include <sys/user.h>
X#include <sys/proc.h>
X#include <sys/dk.h>
X#include <sys/vm.h>
X#include <sys/file.h>
X#include <sys/time.h>
X/* #include <machine/pte.h> */
X#include <sys/table.h>
X#include <mach.h>
X#include <mach/mach_types.h>
X#include <mach/vm_statistics.h>
X#include <sys/syscall.h> /* for SYS_setpriority, in setpriority(), below */
X
X
X#include "top.h"
X#include "machine.h"
X
Xextern int errno, sys_nerr;
Xextern char *sys_errlist[];
X#define strerror(e) (((e) >= 0 && (e) < sys_nerr) ? sys_errlist[(e)] : "Unknown error")
X
X#define VMUNIX	"/vmunix"
X#define KMEM	"/dev/kmem"
X#define MEM	"/dev/mem"
X
X/* get_process_info passes back a handle.  This is what it looks like: */
X
Xstruct handle
X{
X    struct osf1_top_proc **next_proc;	/* points to next valid proc pointer */
X    int remaining;		/* number of pointers remaining */
X};
X
X/* declarations for load_avg */
X#include "loadavg.h"
X
X/* definitions for indices in the nlist array */
X#define X_MPID		0
X
Xstatic struct nlist nlst[] = {
X    { "_mpid" },		/* 0 */
X    { 0 }
X};
X
X/* Some versions of OSF/1 don't support reporting of the last PID.
X   This flag indicates whether or not we are reporting the last PID. */
Xstatic int do_last_pid = 1;
X
X/*
X *  These definitions control the format of the per-process area
X */
X
Xstatic char header[] =
X  "  PID X        PRI NICE  SIZE   RES STATE   TIME    CPU COMMAND";
X/* 0123456   -- field to fill in starts at header+6 */
X#define UNAME_START 6
X
X#define Proc_format \
X	"%5d %-8.8s %3d %4d %5s %5s %-5s %-6s %5.2f%% %.14s"
X
X
X/* process state names for the "STATE" column of the display */
X/* the extra nulls in the string "run" are for adding a slash and
X * the processor number when needed. Although OSF/1 doesnt support
X * multiple processors yet, (and this module _certainly_ doesnt
X * support it, either, we may as well plan for the future. :-)
X */
X
Xchar *state_abbrev[] =
X{
X    "", "run\0\0\0", "WAIT", "sleep", "sleep", "stop", "halt", "???", "zomb"
X};
X
X
Xstatic int kmem, mem;
X
X/* values that we stash away in _init and use in later routines */
X
Xstatic double logcpu;
X
X/* these are retrieved from the kernel in _init */
X
Xstatic unsigned long proc;
Xstatic          int  nproc;
Xstatic load_avg  ccpu;
X
Xtypedef long mtime_t;
X
X/* these are offsets obtained via nlist and used in the get_ functions */
X
Xstatic unsigned long mpid_offset;
X
X/* these are for detailing the process states */
X
Xint process_states[7];
Xchar *procstatenames[] = {
X    "", " running, ", " waiting, ", " sleeping, ", " idle, ",
X    " stopped", "",
X    NULL
X};
X
X/* these are for detailing the cpu states */
X
Xint cpu_states[4];
Xchar *cpustatenames[] = {
X    "user", "nice", "system", "idle", NULL
X};
X
Xlong old_cpu_ticks[4];
X
X/* these are for detailing the memory statistics */
X
Xint memory_stats[8];
Xchar *memorynames[] = {
X    "Real: ", "K/", "K act/tot  ", "Virtual: ", "M/",
X    "M use/tot  ", "Free: ", "K", NULL
X};
X
X/* these are for getting the memory statistics */
X
Xstatic int pageshift;		/* log base 2 of the pagesize */
X
X/* define pagetok in terms of pageshift */
X
X#define pagetok(size) ((size) << pageshift)
X
X/* take a process, make it a mach task, and grab all the info out */
Xvoid do_threads_calculations();
X
X/*
X * Because I dont feel like repeatedly grunging through the kernel with
X * Mach calls, and I also dont want the horrid performance hit this
X * would give, I read the stuff I need out, and put in into my own
X * structure, for later use.
X */
X
Xstruct osf1_top_proc {
X    size_t p_mach_virt_size;
X    char p_mach_state;
X    fixpt_t p_mach_pct_cpu; /* aka p_pctcpu */
X    int used_ticks;
X    size_t process_size;
X    pid_t p_pid;
X    uid_t p_ruid;
X    char p_pri;
X    char p_nice;
X    size_t p_rssize;
X    char u_comm[PI_COMLEN + 1];
X} ;
X
X/* these are for keeping track of the proc array */
X
Xstatic int bytes;
Xstatic int pref_len;
Xstatic struct osf1_top_proc *pbase;
Xstatic struct osf1_top_proc **pref;
X
X/* useful externals */
Xextern int errno;
Xextern char *sys_errlist[];
X
Xlong percentages();
X
Xmachine_init(statics)
Xstruct statics *statics;
X{
X    register int i = 0;
X    register int pagesize;
X    struct tbl_sysinfo sibuf;
X
X    if ((kmem = open(KMEM, O_RDONLY)) == -1) {
X	perror(KMEM);
X	return(-1);
X    }
X    if ((mem = open(MEM, O_RDONLY)) == -1) {
X	perror(MEM);
X	return(-1);
X    }
X
X    /* get the list of symbols we want to access in the kernel */
X    if (nlist(VMUNIX, nlst) == -1)
X    {
X	perror("TOP(nlist)");
X	return (-1);
X    }
X
X    if (nlst[X_MPID].n_type == 0)
X    {
X	/* this kernel has no _mpid, so go without */
X	do_last_pid = 0;
X    }
X    else
X    {
X	/* stash away mpid pointer for later use */
X	mpid_offset = nlst[X_MPID].n_value;
X    }
X
X    /* get the symbol values out of kmem */
X    nproc  = table(TBL_PROCINFO, 0, (struct tbl_procinfo *)NULL, 32767, 0);
X
X    /* allocate space for proc structure array and array of pointers */
X    bytes = nproc * sizeof(struct osf1_top_proc);
X    pbase = (struct osf1_top_proc *)malloc(bytes);
X    pref  = (struct osf1_top_proc **)malloc(nproc * 
X                                              sizeof(struct osf1_top_proc *));
X
X    /* Just in case ... */
X    if (pbase == (struct osf1_top_proc *)NULL || 
X                                  pref == (struct osf1_top_proc **)NULL)
X    {
X	fprintf(stderr, "top: cannot allocate sufficient memory\n");
X	return(-1);
X    }
X
X    /* get the page size with "getpagesize" and calculate pageshift from it */
X    pagesize = getpagesize();
X    pageshift = 0;
X    while (pagesize > 1)
X    {
X	pageshift++;
X	pagesize >>= 1;
X    }
X
X    /* we only need the amount of log(2)1024 for our conversion */
X    pageshift -= LOG1024;
X
X    /* fill in the statics information */
X    statics->procstate_names = procstatenames;
X    statics->cpustate_names = cpustatenames;
X    statics->memory_names = memorynames;
X
X    /* initialise this, for calculating cpu time */
X    if (table(TBL_SYSINFO,0,&sibuf,1,sizeof(struct tbl_sysinfo))<0) {
X	perror("TBL_SYSINFO");
X	return(-1);
X    }
X    old_cpu_ticks[0] = sibuf.si_user;
X    old_cpu_ticks[1] = sibuf.si_nice;
X    old_cpu_ticks[2] = sibuf.si_sys;
X    old_cpu_ticks[3] = sibuf.si_idle;
X
X    /* all done! */
X    return(0);
X}
X
Xchar *format_header(uname_field)
Xregister char *uname_field;
X{
X    register char *ptr;
X
X    ptr = header + UNAME_START;
X    while (*uname_field != '\0')
X    {
X	*ptr++ = *uname_field++;
X    }
X
X    return(header);
X}
X
Xget_system_info(si)
Xstruct system_info *si;
X{
X    struct tbl_loadavg labuf;
X    struct tbl_sysinfo sibuf;
X    struct tbl_swapinfo swbuf;
X    vm_statistics_data_t vmstats;
X    int swap_pages=0,swap_free=0,i;
X    long new_ticks[4],diff_ticks[4];
X    long delta_ticks;
X
X    if (do_last_pid)
X    {
X	/* last pid assigned */
X	(void) getkval(mpid_offset, &(si->last_pid), sizeof(si->last_pid), 
X		       "_mpid");
X    }
X    else
X    {
X	si->last_pid = -1;
X    }
X
X    /* get load averages */
X    if (table(TBL_LOADAVG,0,&labuf,1,sizeof(struct tbl_loadavg))<0) {
X	perror("TBL_LOADAVG");
X	return(-1);
X    }
X    if (labuf.tl_lscale)   /* scaled */
X	for(i=0;i<3;i++) 
X	    si->load_avg[i] = ((double)labuf.tl_avenrun.l[i] / 
X                                            (double)labuf.tl_lscale );
X    else                   /* not scaled */
X	for(i=0;i<3;i++) 
X	    si->load_avg[i] = labuf.tl_avenrun.d[i];
X
X    /* array of cpu state counters */
X    if (table(TBL_SYSINFO,0,&sibuf,1,sizeof(struct tbl_sysinfo))<0) {
X	perror("TBL_SYSINFO");
X	return(-1);
X    }
X    new_ticks[0] = sibuf.si_user ; new_ticks[1] = sibuf.si_nice;
X    new_ticks[2] = sibuf.si_sys  ; new_ticks[3] = sibuf.si_idle;
X    delta_ticks=0;
X    for(i=0;i<4;i++) {
X	diff_ticks[i] = new_ticks[i] - old_cpu_ticks[i];
X	delta_ticks += diff_ticks[i];
X	old_cpu_ticks[i] = new_ticks[i];
X    }
X    si->cpustates = cpu_states;
X    if(delta_ticks)
X	for(i=0;i<4;i++) 
X	    si->cpustates[i] = (int)( ( (double)diff_ticks[i] / 
X                                           (double)delta_ticks ) * 1000 );
X    
X    /* memory information */
X    /* this is possibly bogus - we work out total # pages by */
X    /* adding up the free, active, inactive, wired down, and */
X    /* zero filled. Anyone who knows a better way, TELL ME!  */
X    /* Change: dont use zero filled. */
X    (void) vm_statistics(task_self(),&vmstats);
X
X    /* thanks DEC for the table() command. No thanks at all for   */
X    /* omitting the man page for it from OSF/1 1.2, and failing   */
X    /* to document SWAPINFO in the 1.3 man page. Lets hear it for */
X    /* include files. */
X    i=0;
X    while(table(TBL_SWAPINFO,i,&swbuf,1,sizeof(struct tbl_swapinfo))>0) {
X	swap_pages += swbuf.size;
X	swap_free  += swbuf.free;
X	i++;
X    }
X    memory_stats[0] = -1;
X    memory_stats[1] = pagetok(vmstats.active_count);
X    memory_stats[2] = pagetok((vmstats.free_count + vmstats.active_count +
X	vmstats.inactive_count + vmstats.wire_count));
X    memory_stats[3] = -1;
X    memory_stats[4] = pagetok((swap_pages - swap_free))/1024;
X    memory_stats[5] = pagetok(swap_pages)/1024;
X    memory_stats[6] = -1;
X    memory_stats[7] = pagetok(vmstats.free_count);
X    si->memory = memory_stats;
X}
X
Xstatic struct handle handle;
X
Xcaddr_t get_process_info(si, sel, compare)
Xstruct system_info *si;
Xstruct process_select *sel;
Xint (*compare)();
X{
X    register int i;
X    register int total_procs;
X    register int active_procs;
X    register struct osf1_top_proc **prefp;
X    register struct osf1_top_proc *pp;
X    struct tbl_procinfo p_i[8];
X    int j,k,r;
X
X    /* these are copied out of sel for speed */
X    int show_idle;
X    int show_system;
X    int show_uid;
X    int show_command;
X
X    /* get a pointer to the states summary array */
X    si->procstates = process_states;
X
X    /* set up flags which define what we are going to select */
X    show_idle = sel->idle;
X    show_system = sel->system;
X    show_uid = sel->uid != -1;
X    show_command = sel->command != NULL;
X
X    /* count up process states and get pointers to interesting procs */
X    total_procs = 0;
X    active_procs = 0;
X    memset((char *)process_states, 0, sizeof(process_states));
X    process_states[0]=0;
X    process_states[1]=0;
X    process_states[2]=0;
X    process_states[3]=0;
X    process_states[4]=0;
X    process_states[5]=0;
X    process_states[6]=0;
X    prefp = pref;
X    pp=pbase;
X    for (j=0; j<nproc; j += 8) 
X    {
X	r = table(TBL_PROCINFO, j, (struct tbl_procinfo *)p_i, 8, 
X                                               sizeof(struct tbl_procinfo));
X	for (k=0; k < r; k++ , pp++) 
X	{
X	    if(p_i[k].pi_pid == 0) 
X	    {
X		pp->p_pid = 0;
X	    }
X	    else
X	    {
X		pp->p_pid = p_i[k].pi_pid;
X		pp->p_ruid = p_i[k].pi_ruid;
X		pp->p_nice = getpriority(PRIO_PROCESS,p_i[k].pi_pid);
X		/* Load useful values into the proc structure */
X		do_threads_calculations(pp);
X		/*
X		 *  Place pointers to each valid proc structure in pref[].
X		 *  Process slots that are actually in use have a non-zero
X		 *  status field.  Processes with SSYS set are system
X		 *  processes---these get ignored unless show_sysprocs is set.
X		 */
X		if (pp->p_mach_state != 0)
X		{
X		    total_procs++;
X		    process_states[pp->p_mach_state]++;
X		    if ((pp->p_mach_state != SZOMB) &&
X			(pp->p_mach_state != SIDL) &&
X			(show_idle || (pp->p_mach_pct_cpu != 0) || 
X                                   (pp->p_mach_state == SRUN)) &&
X			(!show_uid || pp->p_ruid == (uid_t)sel->uid)) {
X			*prefp++ = pp;
X			active_procs++;
X		    }
X		}
X	    }
X	}
X    }
X
X    /* if requested, sort the "interesting" processes */
X    if (compare != NULL)
X    {
X	qsort((char *)pref, active_procs, sizeof(struct osf1_top_proc *), 
X                                                                    compare);
X    }
X
X    /* remember active and total counts */
X    si->p_total = total_procs;
X    si->p_active = pref_len = active_procs;
X
X    /* pass back a handle */
X    handle.next_proc = pref;
X    handle.remaining = active_procs;
X    return((caddr_t)&handle);
X}
X
Xchar fmt[128];		/* static area where result is built */
X
Xchar *format_next_process(handle, get_userid)
Xcaddr_t handle;
Xchar *(*get_userid)();
X{
X    register struct osf1_top_proc *pp;
X    register long cputime;
X    register double pct;
X    int where;
X    struct user u;
X    struct handle *hp;
X
X    /* find and remember the next proc structure */
X    hp = (struct handle *)handle;
X    pp = *(hp->next_proc++);
X    hp->remaining--;
X
X    /* get the process's user struct and set cputime */
X    
X    if (table(TBL_UAREA,pp->p_pid,&u,1,sizeof(struct user))<0) {
X    /* whoops, it must have died between the read of the proc area
X     * and now. Oh well, lets just dump some meaningless thing out
X     * to keep the rest of the program happy
X     */
X	sprintf(fmt,
X		Proc_format,
X		pp->p_pid,
X		(*get_userid)(pp->p_ruid),
X		0,
X		0,
X		"",
X		"",
X		"dead",
X		"",
X		0.0,
X		"<dead>");
X	    return(fmt);
X    }
X
X    /* set u_comm for system processes */
X    if (u.u_comm[0] == '\0')
X    {
X	if (pp->p_pid == 0)
X	{
X	    (void) strcpy(u.u_comm, "[idle]");
X	}
X	else if (pp->p_pid == 2)
X	{
X	    (void) strcpy(u.u_comm, "[execpt.hndlr]");
X	}
X    }
X    if (where == 1) {
X	/*
X	 * Print swapped processes as <pname>
X	 */
X	char buf[sizeof(u.u_comm)];
X	(void) strncpy(buf, u.u_comm, sizeof(u.u_comm));
X	u.u_comm[0] = '<';
X	(void) strncpy(&u.u_comm[1], buf, sizeof(u.u_comm) - 2);
X	u.u_comm[sizeof(u.u_comm) - 2] = '\0';
X	(void) strncat(u.u_comm, ">", sizeof(u.u_comm) - 1);
X	u.u_comm[sizeof(u.u_comm) - 1] = '\0';
X    }
X
X    cputime = u.u_ru.ru_utime.tv_sec + u.u_ru.ru_stime.tv_sec;
X
X    /* calculate the base for cpu percentages */
X    pct = pctdouble(pp->p_mach_pct_cpu);
X
X    /* format this entry */
X    sprintf(fmt,
X	    Proc_format,
X	    pp->p_pid,
X	    (*get_userid)(pp->p_ruid),
X	    pp->p_pri,
X	    pp->p_nice,
X            format_k(pp->p_mach_virt_size/1024),
X            format_k(pp->p_rssize/1000),
X	    state_abbrev[pp->p_mach_state],
X	    format_time(cputime),
X	    100.0 * ((double)pp->p_mach_pct_cpu / 10000.0),
X	    printable(u.u_comm));
X
X    /* return the result */
X    return(fmt);
X}
X
X/*
X *  getkval(offset, ptr, size, refstr) - get a value out of the kernel.
X *	"offset" is the byte offset into the kernel for the desired value,
X *  	"ptr" points to a buffer into which the value is retrieved,
X *  	"size" is the size of the buffer (and the object to retrieve),
X *  	"refstr" is a reference string used when printing error meessages,
X *	    if "refstr" starts with a '!', then a failure on read will not
X *  	    be fatal (this may seem like a silly way to do things, but I
X *  	    really didn't want the overhead of another argument).
X *  	
X */
X
Xgetkval(offset, ptr, size, refstr)
X
Xunsigned long offset;
Xint *ptr;
Xint size;
Xchar *refstr;
X
X{
X    if (lseek(kmem, (long)offset, L_SET) == -1) {
X        if (*refstr == '!')
X            refstr++;
X        (void) fprintf(stderr, "%s: lseek to %s: %s\n", KMEM, 
X		       refstr, strerror(errno));
X        quit(23);
X    }
X    if (read(kmem, (char *) ptr, size) == -1) {
X        if (*refstr == '!') 
X            return(0);
X        else {
X            (void) fprintf(stderr, "%s: reading %s: %s\n", KMEM, 
X			   refstr, strerror(errno));
X            quit(23);
X        }
X    }
X    return(1);
X}
X    
X/* comparison routine for qsort */
X
X/*
X *  proc_compare - comparison function for "qsort"
X *   Compares the resource consumption of two processes using five
X *   distinct keys. The keys (in descending order of importance) are:
X *   percent cpu, cpu ticks, state, resident set size, total virtual
X *   memory usage. The process states are ordered as follows (from least
X *   to most important): WAIT, zombie, sleep, stop, start, run. The array
X *   declaration below maps a process state index into a number that
X *   reflects this ordering.
X */
X
Xstatic unsigned char sorted_state[] =
X{
X   0, /*""*/
X   8, /*"run"*/
X   1, /*"WAIT"*/
X   6, /*"sleep"*/
X   5, /*"idle"*/
X   7, /*"stop"*/
X   4, /*"halt"*/
X   3, /*"???"*/
X   2, /*"zomb"*/
X};
X 
Xproc_compare(pp1, pp2)
X
Xstruct osf1_top_proc **pp1;
Xstruct osf1_top_proc **pp2;
X
X{
X    register struct osf1_top_proc *p1;
X    register struct osf1_top_proc *p2;
X    register int result;
X    register pctcpu lresult=0.0;
X    struct user u1, u2;
X
X    /* remove one level of indirection */
X    p1 = *pp1;
X    p2 = *pp2;
X
X    /* compare percent cpu (pctcpu) */
X    if ((lresult = p2->p_mach_pct_cpu - p1->p_mach_pct_cpu) == 0)
X    {
X	/* use process state to break the tie */
X	if ((result = sorted_state[p2->p_mach_state] -
X		  sorted_state[p1->p_mach_state])  == 0)
X	{
X	    /* use elapsed time to break the tie */
X	    if ((result = p2->used_ticks - p1->used_ticks) == 0)
X	    {
X		/* use priority to break the tie */
X		if ((result = p2->p_pri - p1->p_pri) == 0)
X		{
X		    /* use resident set size (rssize) to break the tie */
X		    if ((result = p2->p_rssize - p1->p_rssize) == 0)
X		    {
X			/* use total memory to break the tie */
X			result = p2->process_size - p1->process_size;
X		    }
X		}
X	    }
X	}
X    }
X
X    if(lresult)
X	result = lresult < 0 ? -1 : 1;
X    return(result);
X}
X
X/*
X * proc_owner(pid) - returns the uid that owns process "pid", or -1 if
X *		the process does not exist.
X *		It is EXTREMLY IMPORTANT that this function work correctly.
X *		If top runs setuid root (as in SVR4), then this function
X *		is the only thing that stands in the way of a serious
X *		security problem.  It validates requests for the "kill"
X *		and "renice" commands.
X */
X
Xint proc_owner(pid)
X
Xint pid;
X
X{
X    register int cnt;
X    register struct osf1_top_proc **prefp;
X    register struct osf1_top_proc *pp;
X
X    prefp = pref;
X    cnt = pref_len;
X    while (--cnt >= 0)
X    {
X	if ((pp = *prefp++)->p_pid == (pid_t)pid)
X	{
X	    return((int)pp->p_ruid);
X	}
X    }
X    return(-1);
X}
X
X
X/*
X * We use the Mach interface, as well as the table(UAREA,,,) call to
X * get some more information, then put it into unused fields in our
X * copy of the proc structure, to make it faster and easier to get at
X * later.
X */
Xvoid do_threads_calculations(thisproc)
Xstruct osf1_top_proc *thisproc; 
X{
X  int j;
X  task_t  thistask;
X  task_basic_info_data_t   taskinfo;
X  unsigned int taskinfo_l;
X  thread_array_t    threadarr;
X  unsigned int threadarr_l;
X  thread_basic_info_t     threadinfo;
X  thread_basic_info_data_t threadinfodata;
X  unsigned int threadinfo_l;
X  int task_tot_cpu=0;  /* total cpu usage of threads in a task */
X  struct user u;
X
X  thisproc->p_pri=0; 
X  thisproc->p_rssize=0; 
X  thisproc->p_mach_virt_size=0; 
X  thisproc->p_mach_state=0; 
X  thisproc->p_mach_pct_cpu=0;
X
X  if(task_by_unix_pid(task_self(), thisproc->p_pid, &thistask) 
X                                                != KERN_SUCCESS){
X      thisproc->p_mach_state=8; /* (zombie) */
X  } else {
X    taskinfo_l=TASK_BASIC_INFO_COUNT;
X    if(task_info(thistask, TASK_BASIC_INFO, (task_info_t) &taskinfo, 
X                                      &taskinfo_l)
X       != KERN_SUCCESS) {
X      thisproc->p_mach_state=8; /* (zombie) */
X    } else {
X      int minim_state=99,mcurp=1000,mbasp=1000,mslpt=999;
X
X      thisproc->p_rssize=taskinfo.resident_size;
X      thisproc->p_mach_virt_size=taskinfo.virtual_size;
X
X      (void) task_threads(thistask, &threadarr, &threadarr_l);
X      threadinfo= &threadinfodata;
X      for(j=0; j < threadarr_l; j++) {
X	threadinfo_l=THREAD_BASIC_INFO_COUNT;
X	if(thread_info(threadarr[j],THREAD_BASIC_INFO,
X	       (thread_info_t) threadinfo, &threadinfo_l) == KERN_SUCCESS) {
X	    
X	  task_tot_cpu += threadinfo->cpu_usage;
X	  if(minim_state>threadinfo->run_state) 
X              minim_state=threadinfo->run_state;
X	  if(mcurp>threadinfo->cur_priority) 
X              mcurp=threadinfo->cur_priority;
X	  if(mbasp>threadinfo->base_priority) 
X              mbasp=threadinfo->base_priority;
X	  if(mslpt>threadinfo->sleep_time) 
X              mslpt=threadinfo->sleep_time;
X	}
X      }
X      switch (minim_state) {
X      case TH_STATE_RUNNING:      
X	    thisproc->p_mach_state=1;  break;
X      case TH_STATE_UNINTERRUPTIBLE: 
X	    thisproc->p_mach_state=2; break;
X      case TH_STATE_WAITING:      
X	    thisproc->p_mach_state=(threadinfo->sleep_time > 20) ? 4 : 3; break;
X      case TH_STATE_STOPPED:      
X	    thisproc->p_mach_state=5; break;
X      case TH_STATE_HALTED:       
X	    thisproc->p_mach_state=6; break;
X      default:                    
X	    thisproc->p_mach_state=7; break;
X      }
X
X      thisproc->p_pri=mcurp;
X      thisproc->p_mach_pct_cpu=(fixpt_t)(task_tot_cpu*10);
X      vm_deallocate(task_self(),(vm_address_t)threadarr,threadarr_l);
X    }
X  }
X  if (table(TBL_UAREA,thisproc->p_pid,&u,1,sizeof(struct user))>=0) {
X    thisproc->used_ticks=(u.u_ru.ru_utime.tv_sec + u.u_ru.ru_stime.tv_sec);
X    thisproc->process_size=u.u_tsize + u.u_dsize + u.u_ssize;
X  }
X}
X
X/* The reason for this function is that the system call will let
X * someone lower their own processes priority (because top is setuid :-(
X * Yes, using syscall() is a hack, if you can come up with something 
X * better, then I'd be thrilled to hear it. I'm not holding my breath,
X * though.  
X *             Anthony.
X */
Xint setpriority(int dummy, int procnum, int niceval)
X{
X
X    int uid, curprio;
X
X    uid=getuid();
X    if ( (curprio=getpriority(PRIO_PROCESS,procnum) ) == -1) 
X    {
X	return(-1); /* errno goes back to renice_process() */
X    }
X    /* check for not-root - if so, dont allow users to decrease priority */
X    else if ( uid && (niceval<curprio) )
X    {
X	errno=EACCES;
X	return(-1);
X    }
X    return(syscall(SYS_setpriority,PRIO_PROCESS,procnum,niceval));
X}
END_OF_FILE
if test 23310 -ne `wc -c <'machine/m_decosf1.c'`; then
    echo shar: \"'machine/m_decosf1.c'\" unpacked with wrong size!
fi
# end of 'machine/m_decosf1.c'
fi
echo shar: End of archive 16 \(of 16\).
cp /dev/null ark16isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 16 archives.
    echo "Now read README and INSTALL, then run Configure"
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
