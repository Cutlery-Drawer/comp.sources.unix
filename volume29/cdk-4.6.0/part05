Newsgroups: comp.sources.unix
From: glover@credit.erin.utoronto.ca (Mike Glover)
Subject: v29i078: cdk - curses development kit, V4.6.0, Part05/09
References: <1.821493023.9103@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: glover@credit.erin.utoronto.ca (Mike Glover)
Posting-Number: Volume 29, Issue 78
Archive-Name: cdk-4.6.0/part05

#!/bin/sh
# This is `part05' (part 5 of a multipart archive).
# Do not concatenate these parts, unpack them in order with `/bin/sh'.
# File `cdk-4.6.0/entry.c' is being continued...
#
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
if test ! -r _sharseq.tmp; then
  echo 'Please unpack part 1 first!'
  exit 1
fi
shar_sequence=`cat _sharseq.tmp`
if test "$shar_sequence" != 5; then
  echo "Please unpack part $shar_sequence next!"
  exit 1
fi
if test ! -f _sharnew.tmp; then
  echo 'x - still skipping cdk-4.6.0/entry.c'
else
  echo 'x - continuing file cdk-4.6.0/entry.c'
  sed 's/^X//' << 'SHAR_EOF' >> '_sharuue.tmp' &&
XM("!["B`@("`@("`@("`@('!L86EN8VAA<B`]('1O;&]W97(@*'!L86EN8VAA
XM<BD["B`@("`@("`@('T*"B`@("`@("`@("\J(%5P9&%T92!T:&4@<V-R965N
XM(&%N9"!P;VEN=&5R+@D)"0DJ+PH@("`@("`@("!I9B`H(&5N=')Y+3YS8W)E
XM96YC;VP@(3T@96YT<GDM/F9I96QD=VED=&@M,2D*("`@("`@("`@>PH@("`@
XM("`@("`@("`O*B!5<&1A=&4@=&AE(&-H87)A8W1E<B!P;VEN=&5R+@D)"0DJ
XM+PH@("`@("`@("`@("!T96UP(#T@*&EN="ES=')L96X@*&5N=')Y+3YI;F9O
XM*3L*("`@("`@("`@("`@9F]R("AX/71E;7`[('@@/B!E;G1R>2T^<V-R965N
XM8V]L*V5N=')Y+3YL969T8VAA<CL@>"TM*0H@("`@("`@("`@("!["B`@("`@
XM("`@("`@("`@(&5N=')Y+3YI;F9O6WA=(#T@96YT<GDM/FEN9F];>"TQ73L*
XM("`@("`@("`@("`@?0H@("`@("`@("`@("!E;G1R>2T^:6YF;UL@96YT<GDM
XM/G-C<F5E;F-O;"ME;G1R>2T^;&5F=&-H87)=(#T@<&QA:6YC:&%R.PH*("`@
XM("`@("`@("`@+RH@57!D871E('1H92!S8W)E96XN"0D)"0DJ+PH@("`@("`@
XM("`@("!I9B`H"65N=')Y+3YD:7-P='EP92`]/2!V2$E.5"!\?"!E;G1R>2T^
XM9&ES<'1Y<&4@/3T@=DA#2$%2('Q\(%P*"0D)96YT<GDM/F1I<W!T>7!E(#T]
XM('9(34E8140@?'P@96YT<GDM/F1I<W!T>7!E(#T]('952$-(05(@?'P@7`H)
XM"0EE;G1R>2T^9&ES<'1Y<&4@/3T@=DQ(0TA!4B!\?"!E;G1R>2T^9&ES<'1Y
XM<&4@/3T@=E5(34E8140@?'P@7`H)"0EE;G1R>2T^9&ES<'1Y<&4@/3T@=DQ(
XM34E8140@*0H@("`@("`@("`@("!["B`@("`@("`@("`@("`@(&UV=VEN<V-H
XM("AE;G1R>2T^9FEE;&0L(#`L(&5N=')Y+3YS8W)E96YC;VPK*RP@)RXG('P@
XM96YT<GDM/F9I96QD871T<BD["B`@("`@("`@("`@('T*("`@("`@("`@("`@
XM96QS90H@("`@("`@("`@("!["B`@("`@("`@("`@("`@(&UV=VEN<V-H("AE
XM;G1R>2T^9FEE;&0L(#`L(&5N=')Y+3YS8W)E96YC;VPK*RP@<&QA:6YC:&%R
XM('P@96YT<GDM/F9I96QD871T<BD["B`@("`@("`@("`@('T*("`@("`@("`@
XM("`@=VUO=F4@*&5N=')Y+3YF:65L9"P@,"P@96YT<GDM/G-C<F5E;F-O;"`I
XM.PH@("`@("`@("`@("!W<F5F<F5S:"`H96YT<GDM/F9I96QD*3L*("`@("`@
XM("`@?0H@("`@("`@("!E;'-E"B`@("`@("`@('L*("`@("`@("`@("`@+RH@
XM57!D871E('1H92!C:&%R86-T97(@<&]I;G1E<BX)"0D)*B\*("`@("`@("`@
XM("`@=&5M<`D)/2`H:6YT*7-T<FQE;B`H96YT<GDM/FEN9F\I.PH@("`@("`@
XM("`@("!E;G1R>2T^:6YF;UMT96UP+3%="3T@<&QA:6YC:&%R.PH@("`@("`@
XM("`@("!E;G1R>2T^:6YF;UMT96UP70D](&5N=')Y+3YF:6QL97(@)B!!7T-(
XM05)415A4.PH@("`@("`@("`@("!E;G1R>2T^:6YF;UMT96UP*S%="3T@)UPP
XM)SL*"B`@("`@("`@("`@("\J(%5P9&%T92!T:&4@<V-R965N"0D)"0DJ+PH@
XM("`@("`@("`@("!M=G=D96QC:"`H96YT<GDM/F9I96QD+"`P+"`P*3L*("`@
XM("`@("`@("`@:68@*`EE;G1R>2T^9&ES<'1Y<&4@/3T@=DA)3E0@?'P@96YT
XM<GDM/F1I<W!T>7!E(#T]('9(0TA!4B!\?"!<"@D)"65N=')Y+3YD:7-P='EP
XM92`]/2!V2$U)6$5$('Q\(&5N=')Y+3YD:7-P='EP92`]/2!V54A#2$%2('Q\
XM(%P*"0D)96YT<GDM/F1I<W!T>7!E(#T]('9,2$-(05(@?'P@96YT<GDM/F1I
XM<W!T>7!E(#T]('952$U)6$5$('Q\(%P*"0D)96YT<GDM/F1I<W!T>7!E(#T]
XM('9,2$U)6$5$("D*("`@("`@("`@("`@>PH@("`@("`@("`@("`@("!M=G=A
XM9&1C:"`H96YT<GDM/F9I96QD+"`P+"!E;G1R>2T^9FEE;&1W:61T:"TR+"`G
XM+B<@?"!E;G1R>2T^9FEE;&1A='1R*3L*("`@("`@("`@("`@?0H@("`@("`@
XM("`@("!E;'-E"B`@("`@("`@("`@('L*("`@("`@("`@("`@("`@;79W861D
XM8V@@*&5N=')Y+3YF:65L9"P@,"P@96YT<GDM/F9I96QD=VED=&@M,BP@<&QA
XM:6YC:&%R('P@96YT<GDM/F9I96QD871T<BD["B`@("`@("`@("`@('T*("`@
XM("`@("`@("`@;79W861D8V@@*&5N=')Y+3YF:65L9"P@,"P@96YT<GDM/F9I
XM96QD=VED=&@M,2P@96YT<GDM/F9I;&QE<BD["B`@("`@("`@("`@('=M;W9E
XM("AE;G1R>2T^9FEE;&0L(#`L(&5N=')Y+3YF:65L9'=I9'1H+3$I.PH@("`@
XM("`@("`@("!W<F5F<F5S:"`H96YT<GDM/F9I96QD*3L*("`@("`@("`@("`@
XM96YT<GDM/FQE9G1C:&%R*RL["B`@("`@("`@('T*("`@("`@?0H@("!]"GT*
XM"B\J"B`J(%1H:7,@97)A<V5S('1H92!I;F9O<FUA=&EO;B!I;B!T:&4@96YT
XM<GD@9FEE;&0*("H@86YD(')E9')A=W,@82!C;&5A;B!A;F0@96UP='D@96YT
XM<GD@9FEE;&0N"B`J+PIV;VED(&-L96%N0T1+16YT<GD@*$-$2T5.5%)9("IE
XM;G1R>2D*>PH@("`O*B!$96-L87)E(&QO8V%L('9A<FEA8FQE<RX)"0D)"0DJ
XM+PH@("!C:&%R('!L86EN8VAA<@D](&5N=')Y+3YF:6QL97(@)B!!7T-(05)4
XM15A4.PH@("!I;G0@=VED=&@@/2!E;G1R>2T^9FEE;&1W:61T:#L*("`@:6YT
XM('@["@H@("`O*B!%<F%S92!T:&4@:6YF;W)M871I;VX@:6X@=&AE(&-H87)A
XM8W1E<B!P;VEN=&5R+@D)"2HO"B`@(&-L96%N0VAA<B`H96YT<GDM/FEN9F\L
XM(&5N=')Y+3YT;W1A;'=I9'1H+"`G7#`G*3L*("`@96YT<GDM/FEN9F];,%T)
XM/2!P;&%I;F-H87(["@H@("`O*B!#;&5A;B!T:&4@96YT<GD@<V-R965N(&9I
XM96QD+@D)"0D)*B\*("`@9F]R("AX/3`[('@@/"!W:61T:#L@>"LK*0H@("![
XM"B`@("`@(&UV=V%D9&-H("AE;G1R>2T^9FEE;&0L(#`L('@L(&5N=')Y+3YF
XM:6QL97(I.PH@("!]"@H@("`O*B!2969R97-H('1H92!E;G1R>2!F:65L9"X)
XM"0D)"0DJ+PH@("!W<F5F<F5S:"`H96YT<GDM/F9I96QD*3L*?0H*+RH*("H@
XM5&AI<R!D<F%W<R!T:&4@96YT<GD@9FEE;&0N"B`J+PIV;VED(&1R87=#1$M%
XM;G1R>2`H0T1+14Y44ED@*F5N=')Y+"!B;V]L96%N($)O>"D*>PH@("`O*B!%
XM<F%S92!T:&4@96YT<GD@=VED9V5T(&9R;VT@=&AE('-C<F5E;BX)"0D)*B\*
XM("`@97)A<V5#1$M%;G1R>2`H96YT<GDI.PH*("`@+RH@1&ED('=E(&%S:R!F
XM;W(@82!S:&%D;W<_/S\)"0D)"2HO"B`@(&EF("AE;G1R>2T^<VAA9&]W*0H@
XM("!["B`@("`@(&1R87=3:&%D;W<@*&5N=')Y+3YS:&%D;W=W:6XI.PH@("!]
XM"@H@("`O*B!";W@@=&AE('=I9&=E="!I9B!A<VME9"X)"0D)"0DJ+PH@("!I
XM9B`H0F]X*0H@("!["B`@("`@(&)O>"`H96YT<GDM/G=I;BP@04-37U9,24Y%
XM+"!!0U-?2$Q)3D4I.PH@("`@("!W<F5F<F5S:"`H96YT<GDM/G=I;BD["B`@
XM('T*"B`@("\J($1R87<@:6X@=&AE(&QA8F5L('1O('1H92!W:61G970N"0D)
XM"0DJ+PH@("!W<FET94-H='EP92`H96YT<GDM/FQA8F5L=VEN+"`P+"`P+"!E
XM;G1R>2T^;&%B96PL($A/4DE:3TY404PL(#`L(&5N=')Y+3YL86)E;&QE;BD[
XM"B`@('=R969R97-H("AE;G1R>2T^;&%B96QW:6XI.PH*("`@+RH@4F5D<F%W
XM('1H92!E;G1R>2!F:65L9"X)"0D)"0DJ+PH@("!D<F%W0T1+16YT<GE&:65L
XM9"`H96YT<GDI.PI]"@HO*@H@*B!4:&ES(')E9')A=W,@=&AE(&5N=')Y(&9I
XM96QD+@H@*B\*=F]I9"!D<F%W0T1+16YT<GE&:65L9"`H0T1+14Y44ED@*F5N
XM=')Y*0I["B`@("\J($1E8VQA<F4@=F%R:6%B;&5S+@D)"0D)"2HO"B`@(&EN
XM="!I;F9O3&5N9W1H(#T@*&EN="ES=')L96X@*&5N=')Y+3YI;F9O*3L*("`@
XM:6YT('@@/2`P.PH*("`@+RH@1')A=R!I;B!T:&4@9FEL;&5R(&-H87)A8W1E
XM<G,N"0D)"0DJ+PH@("!F;W(@*'@],#L@>"`\(&5N=')Y+3YF:65L9'=I9'1H
XM.R!X*RLI"B`@('L*("`@("`@;79W861D8V@@*&5N=')Y+3YF:65L9"P@,"P@
XM>"P@96YT<GDM/F9I;&QE<BD["B`@('T*("`@"B`@("\J($EF('1H97)E(&ES
XM(&EN9F]R;6%T:6]N(&EN('1H92!F:65L9"X@5&AE;B!D<F%W(&ET(&EN+@D)
XM*B\*("`@:68@*&5N=')Y+3YI;F9O("$]("AC:&%R("HI($Y53$PI"B`@('L*
XM("`@("`@+RH@5V4@;F5E9"!T;R!A9&IU<W0@=&AE(&9I96QD(&EN9F\N"0D)
XM"2HO"B`@("`@(&EF("AI;F9O3&5N9W1H(#X@96YT<GDM/F9I96QD=VED=&@I
XM"B`@("`@('L*("`@("`@("`@+RH@5&AE(&9I96QD(&EN9F]R;6%T:6]N(&ES
XM(&QA<F=E<B!T:&%N('1H92!F:65L9"X)"2HO"B`@("`@("`@(&5N=')Y+3YL
XM969T8VAA<B`]("AI;F9O3&5N9W1H("T@96YT<GDM/F9I96QD=VED=&@I.PH@
XM("`@("`@("!E;G1R>2T^<V-R965N8V]L(#T@96YT<GDM/F9I96QD=VED=&@M
XM,3L*("`@("`@?0H@("`@("!E;'-E"B`@("`@('L*("`@("`@("`@+RH@5&AE
XM(&9I96QD(&EN9F]R;6%T:6]N(&ES('-M86QL97(@=&AA;B!T:&4@9FEE;&0N
XM"0DJ+PH@("`@("`@("!E;G1R>2T^;&5F=&-H87(@/2`P.PH@("`@("`@("!E
XM;G1R>2T^<V-R965N8V]L(#T@:6YF;TQE;F=T:"TQ.PH@("`@("!]"B`@('T*
XM(`H@("`O*B!2961R87<@=&AE(&9I96QD+@D)"0D)"0DJ+PH@("!F;W(@*'@]
XM96YT<GDM/FQE9G1C:&%R.R!X(#P@:6YF;TQE;F=T:#L@>"LK*0H@("!["B`@
XM("`@(&UV=V%D9&-H("AE;G1R>2T^9FEE;&0L(#`L('@M96YT<GDM/FQE9G1C
XM:&%R+"!E;G1R>2T^:6YF;UMX72D["B`@('T*("`@=VUO=F4@*&5N=')Y+3YF
XM:65L9"P@,"P@96YT<GDM/G-C<F5E;F-O;"D["@H@("`O*B!2969R97-H('1H
XM92!F:65L9"X)"0D)"0DJ+PH@("!W<F5F<F5S:"`H96YT<GDM/F9I96QD*3L*
XM?0H*+RH*("H@5&AI<R!E<F%S97,@86X@96YT<GD@=VED9V5T(&9R;VT@=&AE
XM('-C<F5E;BX*("HO"G9O:60@97)A<V5#1$M%;G1R>2`H0T1+14Y44ED@*F5N
XM=')Y*0I["B`@('=E<F%S92`H96YT<GDM/F9I96QD*3L*("`@=V5R87-E("AE
XM;G1R>2T^;&%B96QW:6XI.PH@("!W97)A<V4@*&5N=')Y+3YW:6XI.PH@("!W
XM<F5F<F5S:"`H96YT<GDM/G=I;BD["B`@"B`@("\J($1O('=E('=A;G0@=&\@
XM97)A<V4@=&AE('-H861O=RX)"0D)"2HO"B`@(&EF("AE;G1R>2T^<VAA9&]W
XM*0H@("!["B`@("`@('=E<F%S92`H96YT<GDM/G-H861O=W=I;BD["B`@("`@
XM('=R969R97-H("AE;G1R>2T^<VAA9&]W=VEN*3L*("`@?0I]"@HO*@H@*B!4
XM:&ES(&1E<W1R;WES(&%N(&5N=')Y('=I9&=E="X*("HO"G9O:60@9&5S=')O
XM>4-$2T5N=')Y("A#1$M%3E1262`J96YT<GDI"GL*("`@+RH@17)A<V4@=&AE
XM(&]B:F5C="X)"0D)"0D)*B\*("`@97)A<V5#1$M%;G1R>2`H96YT<GDI.PH*
XM("`@+RH@0VQE87(@;W5T('1H92!C:&%R86-T97(@<&]I;G1E<G,N"0D)"0DJ
XM+PH@("!F<F5E0VAT>7!E("AE;G1R>2T^;&%B96PI.PH@("!F<F5E0VAA<B`H
XM96YT<GDM/FEN9F\I.PH*("`@+RH@1&5L971E('1H92!W:6YD;W=S+@D)"0D)
XM"2HO"B`@(&1E;'=I;B`H96YT<GDM/G=I;BD["B`@(&1E;'=I;B`H96YT<GDM
XM/F9I96QD*3L*("`@9&5L=VEN("AE;G1R>2T^;&%B96QW:6XI.PH@("!I9B`H
XM96YT<GDM/G-H861O=RD*("`@>PH@("`@("!D96QW:6X@*&5N=')Y+3YS:&%D
XM;W=W:6XI.PH@("!]"@H@("`O*B!5;G)E9VES=&5R('1H:7,@;V)J96-T+@D)
XM"0D)"2HO"B`@('5N<F5G:7-T97)#1$M/8FIE8W0@*'9%3E1262P@96YT<GDI
XM.PH*("`@+RH@1FEN:7-H(&-L96%N:6YG('5P+@D)"0D)"2HO"B`@(&9R964@
XM*&5N=')Y*3L*?0H*+RH*("H@5&AI<R!R96UO=F5S('1H92!O;&0@:6YF;W)M
XM871I;VX@:6X@=&AE(&5N=')Y(&9I96QD(&%N9"!K965P<R!T:&4*("H@;F5W
XM(&EN9F]R;6%T:6]N(&=I=F5N+@H@*B\*=F]I9"!S971#1$M%;G1R>2`H0T1+
XM14Y44ED@*F5N=')Y+"!C:&%R("IN97=686QU92P@:6YT(&UI;BP@:6YT(&UA
XM>"P@8F]O;&5A;B!B;W@I"GL*("`@+RH@1&5C;&%R92!L;V-A;"!V87)I86)L
XM97,N"0D)"0D)*B\*("`@:6YT(&-O<'EC:&%R<PD](#`["@H@("`O*B!+965P
XM('1H92!I;G0@=F%L=65S('!A<W-E9"!I;BX)"0D)"2HO"B`@(&5N=')Y+3YM
XM:6X)"3T@;6EN.PH@("!E;G1R>2T^;6%X"0D](&UA>#L*("`@96YT<GDM/F)O
XM>`D)/2!B;W@["@H@("`O*B!)9B!T:&4@<&]I;G1E<B!S96YT(&EN(&ES('1H
XM92!S86UE('!O:6YT97(@87,@8F5F;W)E+"!D;R!N;W1H:6YG+@DJ+PH@("!I
XM9B`H96YT<GDM/FEN9F\@/3T@;F5W5F%L=64I"B`@('L*("`@("`@<F5T=7)N
XM.PH@("!]"@H@("`O*B!*=7-T('1O(&)E('-U<F4L(&EF(&QE=',@;6%K92!S
XM=7)E('1H92!N97<@=F%L=64@:7-N)W0@3E5,3"X)*B\*("`@:68@*&YE=U9A
XM;'5E(#T]("AC:&%R("HI3E5,3"D*("`@>R`*("`@("`@+RH@5&AE;B!W92!W
XM86YT('1O(&IU<W0@97)A<V4@=&AE(&]L9"!V86QU92X)"0DJ+PH@("`@("!C
XM;&5A;D-H87(@*&5N=')Y+3YI;F9O+"!E;G1R>2T^9FEE;&1W:61T:"P@)UPP
XM)RD["B`@("`@(')E='5R;CL*("`@?0H*("`@+RH@1&5T97)M:6YE(&AO=R!M
XM86YY(&-H87)A8W1E<G,@=V4@;F5E9"!T;R!C;W!Y+@D)"2HO"B`@(&-O<'EC
XM:&%R<PD]($U)3B`H*&EN="ES=')L96XH;F5W5F%L=64I+"!E;G1R>2T^;6%X
XM*3L*"B`@("\J($]++"!E<F%S92!T:&4@;VQD('9A;'5E+"!A;F0@8V]P>2!I
XM;B!T:&4@;F5W('9A;'5E+@D)*B\*("`@8VQE86Y#:&%R("AE;G1R>2T^:6YF
XM;RP@96YT<GDM/FUA>"P@)UPP)RD["B`@('-T<FYC<'D@*&5N=')Y+3YI;F9O
X:+"!N97=686QU92P@8V]P>6-H87)S*3L*?0IT
X`
Xend
SHAR_EOF
  echo 'File cdk-4.6.0/entry.c is complete' &&
  echo 'uudecoding file cdk-4.6.0/entry.c' &&
  uudecode _sharuue.tmp < _sharuue.tmp && rm -f _sharuue.tmp &&
  $shar_touch -am 1229121095 'cdk-4.6.0/entry.c' &&
  chmod 0400 'cdk-4.6.0/entry.c' ||
  echo 'restore of cdk-4.6.0/entry.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/entry.c'`"
  test 19691 -eq "$shar_count" ||
    echo "cdk-4.6.0/entry.c: original size 19691, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/graph.c ==============
if test -f 'cdk-4.6.0/graph.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/graph.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/graph.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/graph.c' &&
X#include "cdk.h"
X
X/*
X * $Author: glover $
X * $Date: 1995/12/15 23:49:30 $
X * $Revision: 1.23 $
X */
X
X/*
X * This creates a graph widget.
X */
XCDKGRAPH *newCDKGraph (CDKSCREEN *cdkscreen, int xplace, int yplace, int height, int width, char *title, char *xtitle, char *ytitle)
X{
X   /* Declare local variables.						*/
X   CDKGRAPH *graph	= (CDKGRAPH *)malloc (sizeof (CDKGRAPH));
X   int xpos		= xplace;
X   int ypos		= yplace;
X
X   /* Rejustify the x and y positions if we need to.			*/
X   alignxy (cdkscreen->window, &xpos, &ypos, width+3, height);
X
X   /* Create the graph pointer						*/
X   graph->parent	= cdkscreen->window;
X   graph->win		= newwin (height, width+3, ypos, xpos);
X   graph->boxHeight	= height;
X   graph->boxWidth	= width+3;
X   graph->box		= NOBOX;
X   graph->minx		= 0;
X   graph->maxx		= 0;
X   graph->xscale	= 0;
X   graph->yscale	= 0;
X   graph->displayType	= vLINE;
X
X   /* Is the graph pointer NULL???					*/
X   if (graph->win == (WINDOW *)NULL)
X   {
X      /* Clean up any memory used.					*/
X      free (graph);
X
X      /* Return a NULL pointer.						*/
X      return ( (CDKGRAPH *)NULL );
X   }
X
X   /* Translate the graph title char * to a chtype *			*/
X   if (title != (char *)NULL)
X   {
X      graph->title	= char2Chtype (title, &graph->titlelen, &graph->titlepos);
X      graph->titlepos	= justifyString (graph->boxWidth, graph->titlelen, graph->titlepos);
X   }
X   else
X   {
X      graph->title	= char2Chtype ("<C></5>Untitled", &graph->titlelen, &graph->titlepos);
X      graph->titlepos	= justifyString (graph->boxWidth, graph->titlelen, graph->titlepos);
X   }
X
X   /* Translate the X Axis title char * to a chtype *			*/
X   if (xtitle != (char *)NULL)
X   {
X      graph->xtitle	= char2Chtype (xtitle, &graph->xtitlelen, &graph->xtitlepos);
X      graph->xtitlepos	= justifyString (graph->boxHeight, graph->xtitlelen, graph->xtitlepos);
X   } 
X   else
X   {
X      graph->xtitle	= char2Chtype ("<C></5>X Axis", &graph->xtitlelen, &graph->xtitlepos);
X      graph->xtitlepos	= justifyString (graph->boxHeight, graph->xtitlelen, graph->xtitlepos);
X   }
X
X   /* Translate the Y Axis title char * to a chtype *			*/
X   if (ytitle != (char *)NULL)
X   {
X      graph->ytitle	= char2Chtype (ytitle, &graph->ytitlelen, &graph->ytitlepos);
X      graph->ytitlepos	= justifyString (graph->boxWidth, graph->ytitlelen, graph->ytitlepos);
X   } 
X   else
X   {
X      graph->ytitle	= char2Chtype ("<C></5>Y Axis", &graph->ytitlelen, &graph->ytitlepos);
X      graph->ytitlepos	= justifyString (graph->boxWidth, graph->ytitlelen, graph->ytitlepos);
X   }
X
X   /* Set some values of the graph structure.				*/
X   graph->graphchar	= (chtype *)NULL;
X
X   /* Register this baby.						*/
X   registerCDKObject (cdkscreen, vGRAPH, graph);
X
X   /* Return the graph pointer.						*/
X   return (graph);
X}
X
X/*
X * This sets the values of the graph.
X */
Xint setCDKGraph (CDKGRAPH *graph, int *values, int count, char *graphChars, boolean startAtZero, EGraphDisplayType displayType)
X{
X   /* Declare local variables.						*/
X   int min	= 99999999;
X   int max	= (min * -1);
X   int x	= 0;
X   int charCount, temp;
X
X   /* Keep the display type.						*/
X   graph->displayType	= displayType;
X
X   /* Remove the old graph char if it exists.				*/
X   freeChtype (graph->graphchar);
X   graph->graphchar = char2Chtype (graphChars, &charCount, &temp);
X
X   /* Check if the number of characters back is the same as the number	*/
X   /* of elements in the list.						*/
X   if (charCount < count)
X   {
X      /* Oops. Better let them know.					*/
X      freeChtype (graph->graphchar);
X      return (FALSE);
X   }
X
X   /* Copy the X values.						*/
X   for (x=0; x <count; x++)
X   {
X      /* Determine the min/max values of the graph.			*/
X      min		= MIN (values[x], min);
X      max		= MAX (values[x], max);
X
X      /* Copy the value.						*/
X      graph->values[x]	= values[x];
X   }
X   graph->count = count;
X   graph->minx = min;
X   graph->maxx = max;
X
X   /* Check the start at zero status.					*/
X   if (startAtZero)
X   {
X      graph->minx = 0;
X   }
X
X   /* Determine the scales.						*/
X   graph->xscale = ((graph->maxx - graph->minx) / (graph->boxHeight - 5));
X   graph->yscale = ((graph->boxWidth-4) / count);
X   return (TRUE);
X}
X
X/*
X * This function draws the graph widget.
X */
Xvoid drawCDKGraph (CDKGRAPH *graph, boolean Box)
X{
X   /* Declare local variables.						*/
X   int x		= 0;
X   int y		= 0;
X   int adj		= 0;
X   chtype attrib	= ' '|A_REVERSE;
X   char temp[100];
X
X   /* Keep the box information.						*/
X   graph->box		= Box;
X
X   /* Erase the old object...						*/
X   eraseCDKGraph (graph);
X
X   /* Draw in the vertical axis						*/
X   drawLine (graph->win, 2, 1, 2, graph->boxHeight-3, ACS_VLINE);
X
X   /* Draw in the horizontal axis					*/
X   drawLine (graph->win, 3, graph->boxHeight-3, graph->boxWidth, graph->boxHeight-3, ACS_HLINE);
X
X   /* Draw in the graph title.						*/
X   if (graph->title != (chtype *)NULL)
X   {
X      writeChtype (graph->win, graph->titlepos, 0, graph->title, HORIZONTAL, 0, graph->titlelen);
X   }
X   
X   /* Draw in the X axis title.						*/
X   if (graph->xtitle != (chtype *)NULL)
X   {
X      writeChtype (graph->win, 0, graph->xtitlepos, graph->xtitle, VERTICAL, 0, graph->xtitlelen);
X      attrib	= graph->xtitle[0] & A_ATTRIBUTES;
X   }
X   
X   /* Draw in the X axis high value.					*/
X   sprintf (temp, "%d", graph->maxx);
X   writeCharAttrib (graph->win, 1, 1, temp, attrib, VERTICAL, 0, strlen(temp));
X   
X   /* Draw in the X axis low value.					*/
X   sprintf (temp, "%d", graph->minx);
X   writeCharAttrib (graph->win, 1, graph->boxHeight-2-strlen(temp), temp, attrib, VERTICAL, 0, strlen(temp));
X   
X   /* Draw in the Y axis title.						*/
X   if (graph->ytitle != (chtype *)NULL)
X   {
X      writeChtype (graph->win, graph->ytitlepos, graph->boxHeight-1, graph->ytitle, HORIZONTAL, 0, graph->ytitlelen);
X      attrib	= graph->ytitle[0] & A_ATTRIBUTES;
X   }
X
X   /* Draw in the Y axis high value.					*/
X   sprintf (temp, "%d", graph->count);
X   writeCharAttrib (graph->win, graph->boxWidth-strlen(temp)-1, graph->boxHeight-2, temp, attrib, HORIZONTAL, 0, strlen(temp));
X   
X   /* Draw in the Y axis low value.					*/
X   sprintf (temp, "0");
X   writeCharAttrib (graph->win, 3, graph->boxHeight-2, temp, attrib, HORIZONTAL, 0, strlen(temp));
X   
X   /* Draw in the lines.						*/
X   adj	= 3;
X   for (y=0; y < graph->count; y++)
X   {
X       int colheight	= (graph->values[y] / graph->xscale) - 1;
X       mvwaddch (graph->win, graph->boxHeight-3, adj-1, ACS_TTEE);
X
X       /* If this is a plot graph, all we do is draw a dot.		*/
X       if (graph->displayType == vPLOT)
X       {
X          int temploc = graph->boxHeight-4-colheight;
X          mvwaddch (graph->win, temploc, adj, graph->graphchar[y]);
X          adj += 2;
X       } 
X       else
X       {
X          for (x=0; x <= graph->yscale; x++)
X          {
X             /* Draw a line.						*/
X             drawLine (graph->win, adj, graph->boxHeight-4-colheight, adj, graph->boxHeight-4, graph->graphchar[y]);
X             adj++;
X          }
X       }
X   }
X
X   /* Draw in the axis corners.						*/
X   mvwaddch (graph->win, 0, 2, ACS_URCORNER);
X   mvwaddch (graph->win, graph->boxHeight-3, 2, ACS_LLCORNER);
X   mvwaddch (graph->win, graph->boxHeight-3, graph->boxWidth, ACS_URCORNER);
X
X   /* Refresh and lets see 'er.						*/
X   wrefresh (graph->win);
X   wrefresh (graph->parent);
X}
X
X/*
X * This function destroys the graph widget.
X */
Xvoid destroyCDKGraph (CDKGRAPH *graph)
X{
X   /* Erase the object.							*/
X   eraseCDKGraph (graph);
X
X   /* Clear up the char pointers.					*/
X   freeChtype (graph->title);
X   freeChtype (graph->xtitle);
X   freeChtype (graph->ytitle);
X   freeChtype (graph->graphchar);
X      
X   /* Clean up the windows.						*/
X   delwin (graph->win);
X
X   /* Unregister this object.						*/
X   unregisterCDKObject (vGRAPH, graph);
X
X   /* Finish cleaning up.						*/
X   free (graph);
X}
X
X/*
X * This function erases the graph widget from the screen.
X */
Xvoid eraseCDKGraph (CDKGRAPH *graph)
X{
X   werase (graph->win);
X   wrefresh (graph->win);
X}
SHAR_EOF
  $shar_touch -am 1229121095 'cdk-4.6.0/graph.c' &&
  chmod 0400 'cdk-4.6.0/graph.c' ||
  echo 'restore of cdk-4.6.0/graph.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/graph.c'`"
  test 7984 -eq "$shar_count" ||
    echo "cdk-4.6.0/graph.c: original size 7984, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/fselect.c ==============
if test -f 'cdk-4.6.0/fselect.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/fselect.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/fselect.c (binary)'
  sed 's/^X//' << 'SHAR_EOF' > _sharuue.tmp &&
Xbegin 600 cdk-4.6.0/fselect.c
XM(VEN8VQU9&4@(F-D:RYH(@H@"B\J"B`J("1!=71H;W(Z(&UI:V5G("0*("H@
XM)$1A=&4Z(#$Y.34O,3(O,3(@,34Z,S(Z,3(@)`H@*B`D4F5V:7-I;VXZ(#$N
XM,30@)`H@*B\*(`HO*B!$96-L87)E(&QO8V%L(&9U;F-T:6]N('!R;W1O='EP
XM97,N"0D)"0DJ+PIV;VED(&=E=$1I<D-O;G1E;G1S("A#1$M&4T5,14-4("IF
XM<V5L96-T*3L*=F]I9"!D:7-P;&%Y1FEL96EN9F\@*$5/8FIE8W14>7!E(&]B
XM:F5C=%1Y<&4L('9O:60@*F]B:F5C="P@=F]I9"`J8VQI96YT1&%T82D["G9O
XM:60@9V5T1&ER3F%M92`H14]B:F5C=%1Y<&4@;V)J96-T5'EP92P@=F]I9"`J
XM;V)J96-T+"!V;VED("IC;&EE;G1$871A*3L*=F]I9"!D96QE=&5&:6QE("A%
XM3V)J96-T5'EP92!O8FIE8W14>7!E+"!V;VED("IO8FIE8W0L('9O:60@*F-L
XM:65N=$1A=&$I.PH*+RH*("H@5&AI<R!C<F5A=&5S(&$@9FEL92!S96QE8W1I
XM;VX@=VED9V5T+@H@*B\*0T1+1E-%3$5#5"`J;F5W0T1+1G-E;&5C="`H0T1+
XM4T-2145.("IC9&MS8W)E96XL(&EN="!X<&QA8V4L(&EN="!Y<&QA8V4L(&EN
XM="!H96EG:'0L(&EN="!W:61T:"P@8VAT>7!E(&9I96QD071T<FEB=71E+"!C
XM:'1Y<&4@9FEL;&5R0VAA<BP@8VAT>7!E(&AI9VAL:6=H="P@8VAA<B`J9$%T
XM=')I8G5T92P@8VAA<B`J9D%T=')I8G5T92P@8VAA<B`J;$%T=')I8G5T92P@
XM8VAA<B`J<T%T=')I8G5T92P@8F]O;&5A;B!B;W@L(&)O;VQE86X@<VAA9&]W
XM*0I["B`@+RH@4V5T('5P('-O;64@=F%R:6%B;&5S+B`@("`@("`@("`@("`@
XM("`@("`@("`@("`@("`@("`@("`@("`@("`@("`@*B\*("`@0T1+1E-%3$5#
XM5"`J9G-E;&5C=`D]("A#1$M&4T5,14-4("HI;6%L;&]C("AS:7IE;V8@*$-$
XM2T9314Q%0U0I*3L*("`@:6YT(&)O>%=I9'1H"0D]('=I9'1H.PH@("!I;G0@
XM8F]X2&5I9VAT"3T@:&5I9VAT.PH@("!I;G0@>'!O<PD)/2!X<&QA8V4["B`@
XM(&EN="!Y<&]S"0D]('EP;&%C93L*("`@:6YT(&5N=')Y5VED=&@L('@["@H@
XM("`O*B!296IU<W1I9GD@=&AE('@@86YD('D@<&]S:71I;VYS(&EF('=E(&YE
XM960@=&\N"0D)*B\*("`@86QI9VYX>2`H8V1K<V-R965N+3YW:6YD;W<L("9X
XM<&]S+"`F>7!O<RP@8F]X5VED=&@L(&)O>$AE:6=H="D["@H@("`O*B!3970@
XM=&AE(&AE:6=H="!A;F0@=VED=&@@=F%L=65S+@D)"0D)*B\*("`@8F]X5VED
XM=&@@/2`H=VED=&@@/"`Q-2`_(#$U(#H@=VED=&@I.PH@("!B;WA(96EG:'0@
XM/2`H:&5I9VAT(#P@-B`_(#8@.B!H96EG:'0I.PH*("`@+RH@36%K92!T:&4@
XM9FEL92!S96QE8W1O<B!W:6YD;W<N"0D)"0DJ+PH@("!F<V5L96-T+3YW:6X)
XM"3T@;F5W=VEN("AB;WA(96EG:'0L(&)O>%=I9'1H+"!Y<&]S+"!X<&]S*3L*
XM"B`@("\J($ES('1H92!W:6YD;W<@3E5,3#\_/PD)"0D)"2HO"B`@(&EF("AF
XM<V5L96-T+3YW:6X@/3T@*%=)3D1/5R`J*4Y53$PI"B`@('L*("`@("`@<F5T
XM=7)N("@@*$-$2T9314Q%0U0@*BE.54Q,("D["B`@('T*"B`@("\J(%-E="!S
XM;VUE('9A<FEA8FQE<RX)"0D)"0DJ+PH@("!F<V5L96-T+3YS8W)E96X)"3T@
XM8V1K<V-R965N.PH@("!F<V5L96-T+3YP87)E;G0)"3T@8V1K<V-R965N+3YW
XM:6YD;W<["B`@(&9S96QE8W0M/F1I<D%T=')I8G5T90D](&-O<'E#:&%R("AD
XM071T<FEB=71E*3L*("`@9G-E;&5C="T^9FEL94%T=')I8G5T90D](&-O<'E#
XM:&%R("AF071T<FEB=71E*3L*("`@9G-E;&5C="T^;&EN:T%T=')I8G5T90D]
XM(&-O<'E#:&%R("AL071T<FEB=71E*3L*("`@9G-E;&5C="T^<V]C:T%T=')I
XM8G5T90D](&-O<'E#:&%R("AS071T<FEB=71E*3L*("`@9G-E;&5C="T^:&EG
XM:&QI9VAT"0D](&AI9VAL:6=H=#L*("`@9G-E;&5C="T^9FEL;&5R0VAA<F%C
XM=&5R"3T@9FEL;&5R0VAA<CL*("`@9G-E;&5C="T^9FEE;&1!='1R:6)U=&4)
XM/2!F:65L9$%T=')I8G5T93L*("`@9G-E;&5C="T^:&5I9VAT"0D](&)O>$AE
XM:6=H=#L*("`@9G-E;&5C="T^=VED=&@)"3T@8F]X5VED=&@["B`@(&9S96QE
XM8W0M/F9I;&5#;W5N=&5R"0D](#`["B`@(&9S96QE8W0M/G!W9`D)"3T@*&-H
XM87(@*BE.54Q,.PH@("!F<V5L96-T+3YB;W@)"0D](&)O>#L*("`@9G-E;&5C
XM="T^<VAA9&]W"0D]('-H861O=SL*"B`@("\J(%IE<F\@;W5T('1H92!C;VYT
XM96YT<R!O9B!T:&4@9&ER96-T;W)Y(&QI<W1I;F<N"0D)*B\*("`@9F]R("AX
XM/3`[('@@/"!-05A)5$5-4SL@>"LK*0H@("!["B`@("`@(&9S96QE8W0M/F1I
XM<D-O;G1E;G1S6WA="3T@*&-H87(@*BE.54Q,.PH@("!]"@H@("`O*B!'970@
XM=&AE('!R97-E;G0@=V]R:VEN9R!D:7)E8W1O<GDN"0D)"2HO"B`@(&9S96QE
XM8W0M/G!W9`D](&=E=&-W9"`H3E5,3"P@-3$R*3L*"B`@("\J($=E="!T:&4@
XM8V]N=&5N=',@;V8@=&AE(&-U<G)E;G0@9&ER96-T;W)Y+@D)"2HO"B`@(&=E
XM=$1I<D-O;G1E;G1S("AF<V5L96-T*3L*"B`@("\J($-R96%T92!T:&4@96YT
XM<GD@9FEE;&0@:6X@=&AE('-E;&5C=&]R+@D)"0DJ+PH@("!E;G1R>5=I9'1H
XM(#T@8F]X5VED=&@@+2`X.PH@("!F<V5L96-T+3YF:6QE;F%M90D](&YE=T-$
XM2T5N=')Y("AC9&MS8W)E96XL"@D)"2AF<V5L96-T+3YW:6XI+3Y?8F5G>"P@
XM"@D)"2AF<V5L96-T+3YW:6XI+3Y?8F5G>2P*"0D)3$5&5"P*"0D)(D9I;&4Z
XM(BP@9FEE;&1!='1R:6)U=&4L(&9I;&QE<D-H87(L(`H)"0EV34E8140L(&5N
XM=')Y5VED=&@L(#`L(#4Q,BP@)D-$2T5N=')Y0V%L;$)A8VLL(`H)"0E44E5%
XM+"!&04Q312D["@H@("`O*B!0=70@=&AE(&-U<G)E;G0@=V]R:VEN9R!D:7)E
XM8W1O<GD@:6X@=&AE(&5N=')Y(&9I96QD+@D)*B\*("`@<V5T0T1+16YT<GD@
XM*&9S96QE8W0M/F9I;&5N86UE+"!F<V5L96-T+3YP=V0L(#`L(#4Q,BP@*&9S
XM96QE8W0M/F9I;&5N86UE*2T^8F]X*3L*(`H@("`O*B!#<F5A=&4@=&AE('-C
XM<F]L;&EN9R!L:7-T(&EN('1H92!S96QE8W1O<BX)"0DJ+PH@("!F<V5L96-T
XM+3YF:6QE;&ES=`D](&YE=T-$2U-C<F]L;"`H8V1K<V-R965N+`H)"0DH9G-E
XM;&5C="T^=VEN*2T^7V)E9W@L"@D)"2AF<V5L96-T+3YW:6XI+3Y?8F5G>2`K
XM(#(L"@D)"6)O>$AE:6=H="`M(#,L(&)O>%=I9'1H+`H)"0DH8VAA<B`J*4Y5
XM3$PL"@D)"69S96QE8W0M/F1I<D-O;G1E;G1S+"!F<V5L96-T+3YF:6QE0V]U
XM;G1E<BP*"0D)3D].54U"15)3+"!F<V5L96-T+3YH:6=H;&EG:'0L(%12544L
XM($9!3%-%*3L*"B`@("\J($1E9FEN92!T:&4@8V%L;&)A8VMS(&9O<B!T:&4@
XM<V-R;VQL:6YG(&QI<W0N"0D)*B\*("`@8FEN9$-$2T]B:F5C="`H=E-#4D],
XM3"P@9G-E;&5C="T^9FEL96QI<W0L("<_)RP@9&ES<&QA>49I;&5I;F9O+"!F
XM<V5L96-T*3L*("`@8FEN9$-$2T]B:F5C="`H=E-#4D],3"P@9G-E;&5C="T^
XM9FEL96QI<W0L("=Q)RP@9&ES<&QA>49I;&5I;F9O+"!F<V5L96-T*3L*("`@
XM8FEN9$-$2T]B:F5C="`H=E-#4D],3"P@9G-E;&5C="T^9FEL96QI<W0L($M%
XM65]404(L(&=E=$1I<DYA;64L(&9S96QE8W0I.PH@("!B:6YD0T1+3V)J96-T
XM("AV4T-23TQ,+"!F<V5L96-T+3YF:6QE;&ES="P@1$5,151%+"!D96QE=&5&
XM:6QE+"!F<V5L96-T*3L*"B`@("\J(%)E9VES=&5R('1H:7,@8F%B>2X)"0D)
XM"0DJ+PH@("!R96=I<W1E<D-$2T]B:F5C="`H8V1K<V-R965N+"!V1E-%3$5#
XM5"P@9G-E;&5C="D["@H@("`O*B!2971U<FX@=&AE(&9I;&4@<V5L96-T;W(@
XM<&]I;G1E<BX)"0D)"2HO"B`@(')E='5R;B`H(&9S96QE8W0@*3L*?0H*+RH*
XM("H@5&AI<R!E<F%S97,@=&AE(&9I;&4@<V5L96-T;W(@9G)O;2!T:&4@<V-R
XM965N+@H@*B\*=F]I9"!E<F%S94-$2T9S96QE8W0@*$-$2T9314Q%0U0@*F9S
XM96QE8W0I"GL*("`@97)A<V5#1$M38W)O;&P@*&9S96QE8W0M/F9I;&5L:7-T
XM*3L*("`@97)A<V5#1$M%;G1R>2`H9G-E;&5C="T^9FEL96YA;64I.PH@("!W
XM97)A<V4@*&9S96QE8W0M/G=I;BD["GT*"B\J"B`J(%1H:7,@9')A=W,@=&AE
XM(&9I;&4@<V5L96-T;W(@=VED9V5T+@H@*B\*=F]I9"!D<F%W0T1+1G-E;&5C
XM="`H0T1+1E-%3$5#5"`J9G-E;&5C="P@8F]O;&5A;B!";W@I"GL*("`@+RH@
XM17)A<V4@=&AE(&]L9"!F:6QE('-E;&5C=&]R+@D)"0D)*B\*("`@97)A<V5#
XM1$M&<V5L96-T("AF<V5L96-T*3L*"B`@("\J($1R87<@:6X@=&AE('-H861O
XM=R!I9B!W92!N965D('1O+@D)"0D)*B\*("`@:68@*&9S96QE8W0M/G-H861O
XM=RD*("`@>PH@("`@("!D<F%W4VAA9&]W("AF<V5L96-T+3YS:&%D;W=W:6XI
XM.PH@("!]"@H@("`O*B!$<F%W(&EN('1H92!S8W)O;&QI;F<@;&ES="X)"0D)
XM"2HO"B`@(&1R87=#1$M38W)O;&P@*&9S96QE8W0M/F9I;&5L:7-T+"!";W@I
XM.PH*("`@+RH@1')A=R!I;B!T:&4@96YT<GD@9FEE;&0N"0D)"0D)*B\*("`@
XM9')A=T-$2T5N=')Y("AF<V5L96-T+3YF:6QE;F%M92P@0F]X*3L*?0H*+RH*
XM("H@5&AI<R!C<F5A=&5S(&$@;&ES="!O9B!T:&4@9FEL97,@:6X@=&AE(&-U
XM<G)E;G0@9&ER96-T;W)Y+@H@*B\*=F]I9"!G971$:7)#;VYT96YT<R`H0T1+
XM1E-%3$5#5"`J9G-E;&5C="D*>PH@("`O*B!$96-L87)E(&QO8V%L('9A<FEA
XM8FQE<RX)"0D)"0DJ+PH@("!S=')U8W0@9&ER96YT("ID:7)3=')U8W0["B`@
XM('-T<G5C="!S=&%T(&9I;&53=&%T.PH@("!C:&%R("ID:7),:7-T6TU!6$E4
XM14U373L*("`@8VAA<B!T96UP6S(P,%TL(&UO9&4["B`@($1)4B`J9'`["B`@
XM(&EN="!C;W5N=&5R(#T@,#L*("`@:6YT('@@/2`P.PH*("`@+RH@0VQE86X@
XM;W5T('1H92!O;&0@9&ER96-T;W)Y(&QI<W0N"0D)"0DJ+PH@("!F;W(@*&-O
XM=6YT97(@/2`P.R!C;W5N=&5R(#P@9G-E;&5C="T^9FEL94-O=6YT97([(&-O
XM=6YT97(K*RD*("`@>PH@("`@("!F<F5E0VAA<B`H9G-E;&5C="T^9&ER0V]N
XM=&5N='-;8V]U;G1E<ETI.PH@("!]"@H@("`O*B!/<&5N('1H92!D:7)E8W1O
XM<GDN"0D)"0D)*B\*("`@9'`@/2!O<&5N9&ER("AF<V5L96-T+3YP=V0I.PH*
XM("`@+RH@4F5A9"!T:&4@9&ER96-T;W)Y+@D)"0D)"2HO"B`@(&-O=6YT97(@
XM/2`P.PH@("!W:&EL92`H("AD:7)3=')U8W0@/2!R96%D9&ER("AD<"DI("$]
XM($Y53$PI"B`@('L*("`@("`@9&ER3&ES=%MC;W5N=&5R72`](&-O<'E#:&%R
XM("AD:7)3=')U8W0M/F1?;F%M92D["B`@("`@(&-O=6YT97(K*SL*("`@?0H@
XM("!F<V5L96-T+3YF:6QE0V]U;G1E<@D](&-O=6YT97(["@H@("`O*B!3;W)T
XM('1H92!I;F9O+@D)"0D)"0DJ+PH@("!Q=6EC:U-O<G0@*&1I<DQI<W0L(#`L
XM(&9S96QE8W0M/F9I;&5#;W5N=&5R+3$I.PH*("`@+RH@4V5T('1H92!P<F]P
XM97)T:65S(&]F('1H92!F:6QE<RX)"0D)"2HO"B`@(&9O<B`H>#TP.R!X(#P@
XM9G-E;&5C="T^9FEL94-O=6YT97([('@K*RD*("`@>PH@("`@("`O*B!3=&%T
XM('1H92!F:6QE+@D)"0D)"0DJ+PH@("`@("!L<W1A="`H9&ER3&ES=%MX72P@
XM)F9I;&53=&%T*3L*"B`@("`@("\J($-H96-K('1H92!M;V1E+@D)"0D)"2HO
XM"B`@("`@(&UO9&4@/2`G("<["B`@("`@(&EF("@@*"AF:6QE4W1A="YS=%]M
XM;V1E("8@4U])6%534BD@(3T@,"D@?'P*"0DH*&9I;&53=&%T+G-T7VUO9&4@
XM)B!37TE81U)0*2`A/2`P*2!\?`H)"2@H9FEL95-T870N<W1?;6]D92`F(%-?
XM25A/5$@I("$](#`I("D*("`@("`@>PH@("`@("`@("`@;6]D92`]("<J)SL*
XM("`@("`@?0H*("`@("`@+RH@0W)E871E('1H92!F:6QE;F%M92X)"0D)"0DJ
XM+PH@("`@("!I9B`H(%-?25-,3DL@*&9I;&53=&%T+G-T7VUO9&4I("D*("`@
XM("`@>PH@("`@("`@("!S<')I;G1F("AT96UP+"`B)7-`(BP@9&ER3&ES=%MX
XM72D["B`@("`@("`@(&9S96QE8W0M/F1I<D-O;G1E;G1S6WA=(#T@8V]P>4-H
XM87(@*'1E;7`I.PH@("`@("!]"B`@("`@(&5L<V4@:68@*"!37TE34T]#2R`H
XM9FEL95-T870N<W1?;6]D92D@*0H@("`@("!["B`@("`@("`@('-P<FEN=&8@
XM*'1E;7`L("(E<R8B+"!D:7),:7-T6WA=*3L*("`@("`@("`@9G-E;&5C="T^
XM9&ER0V]N=&5N='-;>%T@/2!C;W!Y0VAA<B`H=&5M<"D["B`@("`@('T*("`@
XM("`@96QS92!I9B`H(%-?25-214<H9FEL95-T870N<W1?;6]D92D@*0H@("`@
XM("!["B`@("`@("`@('-P<FEN=&8@*'1E;7`L("(E<R5S)6,B+"!F<V5L96-T
XM+3YF:6QE071T<FEB=71E+"!D:7),:7-T6WA=+"!M;V1E*3L*("`@("`@("`@
XM9G-E;&5C="T^9&ER0V]N=&5N='-;>%T@/2!C;W!Y0VAA<B`H=&5M<"D["B`@
XM("`@('T*("`@("`@96QS92!I9B`H(%-?25-$25(H9FEL95-T870N<W1?;6]D
XM92D@*0H@("`@("!["B`@("`@("`@('-P<FEN=&8@*'1E;7`L("(E<R5S+R(L
XM(&9S96QE8W0M/F1I<D%T=')I8G5T92P@9&ER3&ES=%MX72D["B`@("`@("`@
XM(&9S96QE8W0M/F1I<D-O;G1E;G1S6WA=(#T@8V]P>4-H87(@*'1E;7`I.PH@
XM("`@("!]"B`@("`@(&5L<V4*("`@("`@>PH@("`@("`@("!S<')I;G1F("AT
XM96UP+"`B)7,E8R(L(&1I<DQI<W1;>%TL(&UO9&4I.PH@("`@("`@("!F<V5L
XM96-T+3YD:7)#;VYT96YT<UMX72`](&-O<'E#:&%R("AT96UP*3L*("`@("`@
XM?0H*("`@("`@+RH@1G)E92!U<"!T:&ES('!I96-E(&]F(&UE;6]R>2X)"0D)
XM"2HO"B`@("`@(&9R965#:&%R("AD:7),:7-T6WA=*3L*("`@?0H*("`@+RH@
XM0VQO<V4@=&AE(&1I<F5C=&]R>2X)"0D)"0DJ+PH@("!C;&]S961I<B`H9'`I
XM.PI]"@HO*@H@*B!4:&ES(&%C=&EV871E<R!T:&4@9FEL92!S96QE8W1O<BX*
XM("HO"F-H87(@*F%C=&EV871E0T1+1G-E;&5C="`H0T1+1E-%3$5#5"`J9G-E
XM;&5C="D*>PH@("`O*B!$96-L87)E(&QO8V%L('9A<FEA8FQE<RX)"0D)"0DJ
XM+PH@("!#1$M30U)/3$P)*F9S8W)O;&P@/2!F<V5L96-T+3YF:6QE;&ES=#L*
XM("`@<W1R=6-T('-T870)9FEL95-T870["B`@(&-H87(@"2IF:6QE;F%M93L*
XM("`@:6YT(`D)8VAO:6-E.PH@("!B;V]L96%N"7)E9W5L87)&:6QE.PH@("!C
XM:&%R"0ET96UP6S$P,%T["@H@("`O*B!$;R!T:&ES(&9O<F5V97(N+BXN"0D)
XM"0D)*B\*("`@9F]R("@[.RD*("`@>PH@("`@("`O*B!!8W1I=F%T92!T:&4@
XM<V-R;VQL:6YG(&QI<W0N"0D)"0DJ+PH@("`@("!C:&]I8V4@/2!A8W1I=F%T
XM94-$2U-C<F]L;"`H(&9S8W)O;&P@*3L*"B`@("`@("\J($-H96-K('1H92!V
XM86QU92!O9B!T:&4@8VAO:6-E+@D)"0D)*B\*("`@("`@:68@*&-H;VEC92`]
XM/2`M,2D*("`@("`@>PH@("`@("`@("!R971U<FX@*"AC:&%R("HI3E5,3"D[
XM"B`@("`@('T*"B`@("`@("\J($-R96%T92!T:&4@9FEL96YA;64N"0D)"0D)
XM*B\*("`@("`@9FEL96YA;64@/2!C:'1Y<&4R0VAA<B`H9G-C<F]L;"T^:71E
XM;5MF<V-R;VQL+3YC=7)R96YT271E;5TI.PH@("`@("!F:6QE;F%M95MS=')L
XM96XH9FEL96YA;64I+3%=(#T@)UPP)SL*"B`@("`@("\J($1E=&5R;6EN92!T
XM:&4@9FEL92!T>7!E+@D)"0D)*B\*("`@("`@;'-T870@*&9I;&5N86UE+"`F
XM9FEL95-T870I.PH@("`@("!R96=U;&%R1FEL90D]("@@4U])4U)%1RAF:6QE
XM4W1A="YS=%]M;V1E*2`_(#$@.B`P*3L*("`@("`@:68@*')E9W5L87)&:6QE
XM*0H@("`@("!["B`@("`@("`@("\J($ET)W,@82!R96=U;&%R(&9I;&4L(&-R
XM96%T92!T:&4@9G5L;"!P871H+@D)"2HO"B`@("`@("`@('-P<FEN=&8@*'1E
XM;7`L("(E<R\E<R(L(&9S96QE8W0M/G!W9"P@9FEL96YA;64I.PH@("`@("`@
XM("!F<V5L96-T+3YP871H;F%M92`](&-O<'E#:&%R("AT96UP*3L*("`@("`@
XM"B`@("`@("`@("\J($-L96%N('5P('1H92!U<V5D(&UE;6]R>2X)"0D)"2HO
XM"B`@("`@("`@(&9R964@*&9I;&5N86UE*3L*"B`@("`@("`@("\J(%)E='5R
XM;B!T:&4@8V]M<&QE=&4@<&%T:&YA;64N"0D)"2HO"B`@("`@("`@(')E='5R
XM;B`H(&9S96QE8W0M/G!A=&AN86UE("D["B`@("`@('T*("`@("`@96QS90H@
XM("`@("!["B`@("`@("`@("\J($-R96%T92!T:&4@9&ER96-T;W)Y(&YA;64N
XM"0D)"0DJ+PH@("`@("`@("!S<')I;G1F("AT96UP+"`B)7,O)7,B+"!F<V5L
XM96-T+3YP=V0L(&9I;&5N86UE*3L*"B`@("`@("`@("\J($-L96%N('5P('1H
XM92!U<V5D(&UE;6]R>2X)"0D)"2HO"B`@("`@("`@(&9R964@*&9I;&5N86UE
XM*3L*"B`@("`@("`@("\J(%-E="!T:&4@9FEL92!S96QE8W1O<B!I;F9O<FUA
XM=&EO;BX)"0D)*B\*("`@("`@("`@<V5T0T1+1G-E;&5C="`H9G-E;&5C="P@
XM=&5M<"P*"0EF<V5L96-T+3YF:65L9$%T=')I8G5T92P@9G-E;&5C="T^9FEL
XM;&5R0VAA<F%C=&5R+"!F<V5L96-T+3YH:6=H;&EG:'0L"@D)9G-E;&5C="T^
XM9&ER071T<FEB=71E+"!F<V5L96-T+3YF:6QE071T<FEB=71E+"`*"0EF<V5L
XM96-T+3YL:6YK071T<FEB=71E+"!F<V5L96-T+3YS;V-K071T<FEB=71E+"`*
XM"0EF<V5L96-T+3YB;W@I.PH@("`@("!]"B`@('T*?0H*+RH@"B`J(%1H:7,@
XM:7,@82!C86QL8F%C:R!F<F]M('1H92!S8W)O;&QI;F<@;&ES="!T;R!A8W1I
XM=F%T92!T:&4@96YT<GD@9FEE;&0N"B`J+PIV;VED(&=E=$1I<DYA;64@*$5/
XM8FIE8W14>7!E(&]B:F5C=%1Y<&4L('9O:60@*F]B:F5C="P@=F]I9"`J8VQI
XM96YT1&%T82D*>PH@("`O*B!$96-L87)E(&QO8V%L('9A<FEA8FQE<RX)"0D)
XM"0DJ+PH@("!#1$M&4T5,14-4"2IF<V5L96-T"3T@*$-$2T9314Q%0U0@*BEC
XM;&EE;G1$871A.PH@("!#1$M%3E1260DJ9F5N=')Y"0D]("A#1$M%3E1262`J
XM*69S96QE8W0M/F9I;&5N86UE.PH@("!S=')U8W0@<W1A=`EF:6QE4W1A=#L*
XM("`@8VAA<@D)*F1I<F5C=&]R>3L*"B`@("\J($%C=&EV871E('1H92!E;G1R
XM>2!F:65L9"X)"0D)"0DJ+PH@("!D:7)E8W1O<GD@/2!C;W!Y0VAA<B`H86-T
XM:79A=&5#1$M%;G1R>2`H9F5N=')Y*2D["@H@("`O*B!#:&5C:R!T:&4@9&ER
XM96-T;W)Y+V9I;&5N86UE"0D)"0DJ+PH@("!L<W1A="`H9&ER96-T;W)Y+"`F
XM9FEL95-T870I.PH@("`*("`@+RH@4V5T('1H92!F:6QE('-E;&5C=&]R(&EN
XM9F]R;6%T:6]N+@D)"0DJ+PH@("!S971#1$M&<V5L96-T("AF<V5L96-T+"!D
XM:7)E8W1O<GDL"@D)"69S96QE8W0M/F9I96QD071T<FEB=71E+"!F<V5L96-T
XM+3YF:6QL97)#:&%R86-T97(L(&9S96QE8W0M/FAI9VAL:6=H="P*"0D)9G-E
XM;&5C="T^9&ER071T<FEB=71E+"!F<V5L96-T+3YF:6QE071T<FEB=71E+"`*
XM"0D)9G-E;&5C="T^;&EN:T%T=')I8G5T92P@9G-E;&5C="T^<V]C:T%T=')I
XM8G5T92P@"@D)"69S96QE8W0M/F)O>"D["@H@("`O*B!#;&5A;B!U<"!A;GD@
XM;65M;W)T>2!U<V5D+@D)"0D)*B\*("`@9G)E92`H9&ER96-T;W)Y*3L*?0H*
XM+RH*("H@5&AI<R!F=6YC=&EO;B!S971S('1H92!I;F9O<FUA=&EO;B!I;G-I
XM9&4@=&AE(&9I;&4@<V5L96-T;W(N"B`J+PIV;VED('-E=$-$2T9S96QE8W0@
XM*$-$2T9314Q%0U0@*F9S96QE8W0L(&-H87(@*F1I<F5C=&]R>2P@8VAT>7!E
XM(&9I96QD071T<FEB+"!C:'1Y<&4@9FEL;&5R+"!C:'1Y<&4@:&EG:&QI9VAT
XM+"!C:&%R("ID:7)!='1R:6)U=&4L(&-H87(@*F9I;&5!='1R:6)U=&4L(&-H
XM87(@*FQI;FM!='1R:6)U=&4L(&-H87(@*G-O8VM!='1R:6)U=&4L(&)O;VQE
XM86X@8F]X*0I["B`@("\J($1E8VQA<F4@;&]C86P@=F%R:6%B;&5S+@D)"0D)
XM"2HO"B`@($-$2U-#4D],3"`J9G-C<F]L;"`](&9S96QE8W0M/F9I;&5L:7-T
XM.PH@("!#1$M%3E1262`J9F5N=')Y(#T@9G-E;&5C="T^9FEL96YA;64["B`@
XM(&-H87(@*FUE<V=;,3!=+"!T96UP6S$P,%T["@H@("`O*B!+965P('1H92!I
XM;F9O('-E;G0@=&\@=7,N"0D)"0D)*B\*("`@9G-E;&5C="T^9FEE;&1!='1R
XM:6)U=&4@/2!F:65L9$%T=')I8CL*("`@9G-E;&5C="T^9FEL;&5R0VAA<F%C
XM=&5R(#T@9FEL;&5R.PH@("!F<V5L96-T+3YH:6=H;&EG:'0@/2!H:6=H;&EG
XM:'0["@H@("`O*B!#:&%N9V4@9&ER96-T;W)I97,N"0D)"0D)*B\*("`@:68@
XM*&-H9&ER("AD:7)E8W1O<GDI*0H@("!["B`@("`@("\J($)E97`@870@=&AE
XM;2X)"0D)"0D)*B\*("`@("`@0F5E<"@I.PH*("`@("`@+RH@0V]U;&1N)W0@
XM9V5T(&EN=&\@=&AE(&1I<F5C=&]R>2P@<&]P('5P(&$@;&ET=&QE(&UE<W-A
XM9V4N"2HO"B`@("`@('-P<FEN=&8@*'1E;7`L("(\0SY#;W5L9"!N;W0@8VAA
XM;F=E(&EN=&\@)7,B+"!D:7)E8W1O<GDI.PH@("`@("!M97-G6S!=(#T@8V]P
XM>4-H87(@*'1E;7`I.PH*("`@("`@<W!R:6YT9B`H=&5M<"P@(CQ#/CPO53XE
XM<R(L('-T<F5R<F]R*&5R<FYO*2`I.PH@("`@("!M97-G6S%=(#T@8V]P>4-H
XM87(@*'1E;7`I.PH*("`@("`@;65S9ULR72`]("(@(CL*("`@("`@;65S9ULS
XM72`]("(\0SY0<F5S<R!!;GD@2V5Y(%1O($-O;G1I;G5E+B(["B`@("`@(`H@
XM("`@("`O*B!0;W`@57`@82!M97-S86=E+@D)"0D)"2HO"B`@("`@('!O<%5P
XM365S<V%G92`H9G-E;&5C="T^<V-R965N+"!M97-G+"`T*3L*"B`@("`@("\J
XM($-L96%N('5P('-O;64@;65M;W)Y+@D)"0D)"2HO"B`@("`@(&9R965#:&%R
XM("AM97-G6S!=*3L*("`@("`@9G)E94-H87(@*&UE<V=;,5TI.PH*("`@("`@
XM+RH@1V5T(&]U="!O9B!H97)E+BXN"0D)"0D)*B\*("`@("`@<F5T=7)N.PH@
XM("!]"@H@("`O*B!)9B!T:&4@:6YF;W)M871I;VX@8V]M:6YG(&EN(&ES('1H
XM92!S86UE(&%S('1H92!I;F9O<FUA=&EO;@DJ+PH@("`O*B!T:&%T(&ES(&%L
XM<F5A9'D@=&AE<F4L('1H97)E(&ES(&YO(&YE960@=&\@9&5S=')O>2!I="X)
XM"2HO"B`@(&EF("AF<V5L96-T+3YP=V0@(3T@9&ER96-T;W)Y*0H@("!["B`@
XM("`@("\J(%)E;6]V92!T:&4@;VQD('!O:6YT97()86YD('-E="!T:&4@;F5W
XM('9A;'5E+@D)"2HO"B`@("`@(&9R965#:&%R("AF<V5L96-T+3YP=V0I.PH@
XM("`@("!F<V5L96-T+3YP=V0@/2!G971C=V0@*$Y53$PL(#4Q,BD["B`@('T*
XM("`@:68@*&9S96QE8W0M/F9I;&5!='1R:6)U=&4@(3T@9FEL94%T=')I8G5T
XM92D*("`@>PH@("`@("`O*B!296UO=F4@=&AE(&]L9"!P;VEN=&5R"6%N9"!S
XM970@=&AE(&YE=R!V86QU92X)"0DJ+PH@("`@("!F<F5E0VAA<B`H9G-E;&5C
XM="T^9FEL94%T=')I8G5T92D["B`@("`@(&9S96QE8W0M/F9I;&5!='1R:6)U
XM=&4@/2!C;W!Y0VAA<B`H9FEL94%T=')I8G5T92D["B`@("`@(&9S96QE8W0M
XM/F9I;&5!='1R:6)U=&4@/2!C;W!Y0VAA<B`H9FEL94%T=')I8G5T92D["B`@
XM('T*("`@:68@*&9S96QE8W0M/F1I<D%T=')I8G5T92`A/2!D:7)!='1R:6)U
XM=&4I"B`@('L*("`@("`@+RH@4F5M;W9E('1H92!O;&0@<&]I;G1E<@EA;F0@
XM<V5T('1H92!N97<@=F%L=64N"0D)*B\*("`@("`@9G)E94-H87(@*&9S96QE
XM8W0M/F1I<D%T=')I8G5T92D["B`@("`@(&9S96QE8W0M/F1I<D%T=')I8G5T
XM92`](&-O<'E#:&%R("AD:7)!='1R:6)U=&4I.PH@("!]"B`@(&EF("AF<V5L
XM96-T+3YL:6YK071T<FEB=71E("$](&QI;FM!='1R:6)U=&4I"B`@('L*("`@
XM("`@+RH@4F5M;W9E('1H92!O;&0@<&]I;G1E<@EA;F0@<V5T('1H92!N97<@
XM=F%L=64N"0D)*B\*("`@("`@9G)E94-H87(@*&9S96QE8W0M/FQI;FM!='1R
XM:6)U=&4I.PH@("`@("!F<V5L96-T+3YL:6YK071T<FEB=71E(#T@8V]P>4-H
XM87(@*&QI;FM!='1R:6)U=&4I.PH@("!]"B`@(&EF("AF<V5L96-T+3YS;V-K
XM071T<FEB=71E("$]('-O8VM!='1R:6)U=&4I"B`@('L*("`@("`@+RH@4F5M
XM;W9E('1H92!O;&0@<&]I;G1E<@EA;F0@<V5T('1H92!N97<@=F%L=64N"0D)
XM*B\*("`@("`@9G)E94-H87(@*&9S96QE8W0M/G-O8VM!='1R:6)U=&4I.PH@
XM("`@("!F<V5L96-T+3YS;V-K071T<FEB=71E(#T@8V]P>4-H87(@*'-O8VM!
XM='1R:6)U=&4I.PH@("!]"B`@(`H@("`O*B!3970@=&AE(&-O;G1E;G1S(&]F
XM('1H92!E;G1R>2!F:65L9"X)"0D)*B\*("`@<V5T0T1+16YT<GD@*&9E;G1R
XM>2P@9G-E;&5C="T^<'=D+"`P+"`U,3(L(&9E;G1R>2T^8F]X*3L*("`@9')A
XM=T-$2T5N=')Y("AF96YT<GDL(&9E;G1R>2T^8F]X*3L*"B`@("\J($=E="!T
XM:&4@9&ER96-T;W)Y(&-O;G1E;G1S+@D)"0D)*B\*("`@9V5T1&ER0V]N=&5N
XM=',@*&9S96QE8W0I.PH*("`@+RH@4V5T('1H92!V86QU97,@:6X@=&AE('-C
XM<F]L;&EN9R!L:7-T+@D)"0DJ+PH@("!S971#1$M38W)O;&P@*&9S8W)O;&PL
XM"@D)9G-E;&5C="T^9&ER0V]N=&5N=',L(&9S96QE8W0M/F9I;&5#;W5N=&5R
XM+`H)"49!3%-%+"!F<V-R;VQL+3YH:6=H;&EG:'0L(&9S8W)O;&PM/F)O>"D[
XM"GT*"B\J"B`J(%1H:7,@9&5S=')O>7,@=&AE(&9I;&4@<V5L96-T;W(N"0H@
XM*B\*=F]I9"!D97-T<F]Y0T1+1G-E;&5C="`H0T1+1E-%3$5#5"`J9G-E;&5C
XM="D*>PH@("!I;G0@>#L*"B`@("\J($5R87-E('1H92!F:6QE('-E;&5C=&]R
XM+@D)"0D)"2HO"B`@(&5R87-E0T1+1G-E;&5C="`H9G-E;&5C="D["@H@("`O
XM*B!&<F5E('5P('1H92!C:&%R86-T97(@<&]I;G1E<G,N"0D)"0DJ+PH@("!F
XM<F5E0VAA<B`H9G-E;&5C="T^<'=D*3L*("`@9G)E94-H87(@*&9S96QE8W0M
XM/G!A=&AN86UE*3L*("`@9G)E94-H87(@*&9S96QE8W0M/F1I<D%T=')I8G5T
XM92D["B`@(&9R965#:&%R("AF<V5L96-T+3YF:6QE071T<FEB=71E*3L*("`@
XM9G)E94-H87(@*&9S96QE8W0M/FQI;FM!='1R:6)U=&4I.PH@("!F<F5E0VAA
XM<B`H9G-E;&5C="T^<V]C:T%T=')I8G5T92D["B`@(&9O<B`H>#TP.R!X(#P@
XM9G-E;&5C="T^9FEL94-O=6YT97([('@K*RD*("`@>PH@("`@("!F<F5E0VAA
XM<B`H9G-E;&5C="T^9&ER0V]N=&5N='-;>%TI.PH@("!]"@H@("`O*B!&<F5E
XM('5P('1H92!W:6YD;W<@<&]I;G1E<G,N(`D)"0D)*B\*("`@:68@*&9S96QE
XM8W0M/G-H861O=RD*("`@>PH@("`@("!D96QW:6X@*&9S96QE8W0M/G-H861O
XM=W=I;BD["B`@('T*("`@9&5L=VEN("AF<V5L96-T+3YW:6XI.PH*("`@+RH@
XM1&5S=')O>2!T:&4@;W1H97(@0V1K(&]B:F5C=',N"0D)"0DJ+PH@("!D97-T
XM<F]Y0T1+16YT<GD@*&9S96QE8W0M/F9I;&5N86UE*3L*("`@9&5S=')O>4-$
XM2U-C<F]L;"`H9G-E;&5C="T^9FEL96QI<W0I.PH@"B`@("\J(%5N<F5G:7-T
XM97(@=&AE(&]B:F5C="X)"0D)"0DJ+PH@("!U;G)E9VES=&5R0T1+3V)J96-T
XM("AV1E-%3$5#5"P@9G-E;&5C="D["@H@("`O*B!&<F5E('5P('1H92!O8FIE
XM8W0@<&]I;G1E<BX)"0D)"2HO"B`@(&9R964@*&9S96QE8W0I.PI]"@HO*@H@
XM*BHJ*BHJ*BHJ*BHJ*BHJ*BHJ*BHJ*BHJ*BHJ*BHJ*BH*("H@0V%L;&)A8VL@
XM9G5N8W1I;VYS+@H@*BHJ*BHJ*BHJ*BHJ*BHJ*BHJ*BHJ*BHJ*BHJ*BHJ*BH*
XM("HO"@HO*B`*("H@5&AI<R!I<R!A(&-A;&QB86-K('1O('1H92!S8W)O;&QI
XM;F<@;&ES="!W:&EC:"!D:7-P;&%Y<R!I;F9O<FUA=&EO;@H@*B!A8F]U="!T
XM:&4@8W5R<F5N="!F:6QE+B`H86YD('1H92!W:&]L92!D:7)E8W1O<GD@87,@
XM=V5L;"D*("HO"G9O:60@9&ES<&QA>49I;&5I;F9O("A%3V)J96-T5'EP92!O
XM8FIE8W14>7!E+"!V;VED("IO8FIE8W0L('9O:60@*F-L:65N=$1A=&$I"GL*
XM("`@+RH@1&5C;&%R92!L;V-A;"!V87)I86)L97,N"0D)"0D)*B\*("`@0T1+
XM4T-23TQ,"0DJ9G-C<F]L;`D]("A#1$M30U)/3$P@*BEO8FIE8W0["B`@($-$
XM2T9314Q%0U0)"2IF<V5L96-T"3T@*$-$2T9314Q%0U0@*BEC;&EE;G1$871A
XM.PH@("!#1$M,04)%3`D)*FEN9F],86)E;#L*("`@<W1R=6-T('-T870)"69I
XM;&53=&%T.PH@("!S=')U8W0@<&%S<W=D"2IP=T5N=#L*("`@<W1R=6-T(&=R
XM;W5P"0DJ9W)%;G0["B`@(&-H87()"0DJ9FEL96YA;64["B`@(&-H87()"0DJ
XM9FEL971Y<&4["B`@(&-H87(@"0DJ;65S9ULQ,%T["B`@(&-H87()"0ET96UP
XM6S$P,%T["B`@(&EN=`D)"6QE;CL*"B`@("\J($=E="!T:&4@9FEL92!N86UE
XM+@D)"0D)"2HO"B`@(&9I;&5N86UE"3T@8VAT>7!E,D-H87(@*&9S8W)O;&PM
XM/FET96U;9G-C<F]L;"T^8W5R<F5N=$ET96U=*3L*("`@9FEL96YA;65;<W1R
XM;&5N*&9I;&5N86UE*2TQ72`]("=<,"<["@H@("`O*B!'970@<W!E8VEF:6,@
XM:6YF;W)M871I;VX@86)O=70@=&AE(&9I;&5S+@D)"0DJ+PH@("!L<W1A="`H
XM9FEL96YA;64L("9F:6QE4W1A="D["B`@(`H@("`O*B!$971E<FUI;F4@=&AE
XM(&9I;&4@='EP92X)"0D)"0DJ+PH@("!I9B`H(%-?25-,3DL@*&9I;&53=&%T
XM+G-T7VUO9&4I("D*("`@>PH@("`@("!F:6QE='EP92`]("),:6YK(CL*("`@
XM?0H@("!E;'-E(&EF("@@4U])4U-/0TL@*&9I;&53=&%T+G-T7VUO9&4I("D*
XM("`@>PH@("`@("!F:6QE='EP92`](")3;V-K970B.PH@("!]"B`@(&5L<V4@
XM:68@*"!37TE34D5'*&9I;&53=&%T+G-T7VUO9&4I("D*("`@>PH@("`@("!F
XM:6QE='EP92`](")296=U;&%R($9I;&4B.PH@("!]"B`@(&5L<V4@:68@*"!3
XM7TE31$E2*&9I;&53=&%T+G-T7VUO9&4I("D*("`@>PH@("`@("!F:6QE='EP
XM92`](")$:7)E8W1O<GDB.PH@("!]"B`@(&5L<V4@:68@*"!37TE30TA2*&9I
XM;&53=&%T+G-T7VUO9&4I("D*("`@>PH@("`@("!F:6QE='EP92`](")#:&%R
XM86-T97(@1&5V:6-E(CL*("`@?0H@("!E;'-E(&EF("@@4U])4T),2RAF:6QE
XM4W1A="YS=%]M;V1E*2`I"B`@('L*("`@("`@9FEL971Y<&4@/2`B0FQO8VL@
XM1&5V:6-E(CL*("`@?0H@("!E;'-E(&EF("@@4U])4T9)1D\H9FEL95-T870N
XM<W1?;6]D92D@*0H@("!["B`@("`@(&9I;&5T>7!E(#T@(D9)1D\@1&5V:6-E
XM(CL*("`@?0H@("!E;'-E"B`@('L*("`@("`@9FEL971Y<&4@/2`B56YK;F]W
XM;B(["B`@('T*"B`@("\J($=E="!T:&4@=7-E<B!N86UE(&%N9"!G<F]U<"!N
XM86UE+@D)"0D)*B\*("`@<'=%;G0@/2!G971P=W5I9"`H9FEL95-T870N<W1?
XM=6ED*3L*("`@9W)%;G0@/2!G971G<F=I9"`H9FEL95-T870N<W1?9VED*3L*
XM"B`@("\J($-R96%T92!T:&4@;65S<V%G92X)"0D)"0DJ+PH@("!S<')I;G1F
XM("AT96UP+"`B1&ER96-T;W)Y("`Z(#PO53XE<R(L(&9S96QE8W0M/G!W9"D[
XM"B`@(&UE<V=;,%T@/2!C;W!Y0VAA<B`H=&5M<"D["@H@("!S<')I;G1F("AT
XM96UP+"`B1FEL96YA;64@("`Z(#PO53XE<R(L(&9I;&5N86UE*3L*("`@;65S
XM9ULQ72`](&-O<'E#:&%R("AT96UP*3L*"B`@('-P<FEN=&8@*'1E;7`L(")/
XM=VYE<B`@("`@(#H@/"]5/B5S/"%5/B`H)60I(BP@<'=%;G0M/G!W7VYA;64L
XM(&9I;&53=&%T+G-T7W5I9"D["B`@(&UE<V=;,ET@/2!C;W!Y0VAA<B`H=&5M
XM<"D["@H@("!S<')I;G1F("AT96UP+"`B1W)O=7`@("`@("`Z(#PO53XE<SPA
XM53X@*"5D*2(L(&=R16YT+3YG<E]N86UE+"!F:6QE4W1A="YS=%]G:60I.PH@
XM("!M97-G6S-=(#T@8V]P>4-H87(@*'1E;7`I.PH*("`@<W!R:6YT9B`H=&5M
XM<"P@(E-I>F4@("`@("`@.B`\+U4^)6QD/"%5/B!B>71E<R(L(&9I;&53=&%T
XM+G-T7W-I>F4I.PH@("!M97-G6S1=(#T@8V]P>4-H87(@*'1E;7`I.PH*("`@
XM<W!R:6YT9B`H=&5M<"P@(DQA<W0@06-C97-S.B`\+U4^)7,B+"!C=&EM92`H
XM)F9I;&53=&%T+G-T7V%T:6UE*2`I.PH@("!L96X@/2!S=')L96X@*'1E;7`I
XM.PH@("!T96UP6VQE;ET@/2`G7#`G.R!T96UP6VQE;BTQ72`]("=<,"<["B`@
XM(&UE<V=;-5T@/2!C;W!Y0VAA<B`H=&5M<"D["@H@("!S<')I;G1F("AT96UP
XM+"`B3&%S="!#:&%N9V4Z(#PO53XE<R(L(&-T:6UE("@F9FEL95-T870N<W1?
XM8W1I;64I("D["B`@(&QE;B`]('-T<FQE;B`H=&5M<"D["B`@('1E;7!;;&5N
XM72`]("=<,"<[('1E;7!;;&5N+3%=(#T@)UPP)SL*("`@;65S9ULV72`](&-O
XM<'E#:&%R("AT96UP*3L*"B`@('-P<FEN=&8@*'1E;7`L(")&:6QE(%1Y<&4@
XM(#H@/"]5/B5S(BP@9FEL971Y<&4I.PH@("!M97-G6S==(#T@8V]P>4-H87(@
XM*'1E;7`I.PH*("`@;65S9ULX72`]("(@(CL*("`@;65S9ULY72`]("(\0SY0
XM<F5S<R!!;GD@2V5Y(%1O($-O;G1I;G5E+B(["@H@("`O*B!#<F5A=&4@=&AE
XM('!O<"!U<"!L86)E;"X)"0D)"0DJ+PH@("!I;F9O3&%B96P)/2!N97=#1$M,
XM86)E;"`H9G-C<F]L;"T^<V-R965N+"!#14Y415(L($-%3E1%4BP@;65S9RP@
XM."P@5%)512P@1D%,4T4I.PH@("!D<F%W0T1+3&%B96P@*&EN9F],86)E;"P@
XM5%)512D["B`@('=G971C:"`H:6YF;TQA8F5L+3YW:6XI.PH*("`@+RH@0VQE
XM86X@=7`@<V]M92!M96UO<GDN"0D)"0D)*B\*("`@9&5S=')O>4-$2TQA8F5L
XM("AI;F9O3&%B96PI.PH@("!F<F5E0VAA<B`H9FEL96YA;64I.PH@("!F<F5E
XM0VAA<B`H;65S9ULP72D[(&9R965#:&%R("AM97-G6S%=*3L*("`@9G)E94-H
XM87(@*&UE<V=;,ETI.R!F<F5E0VAA<B`H;65S9ULS72D["B`@(&9R965#:&%R
XM("AM97-G6S1=*3L@9G)E94-H87(@*&UE<V=;-5TI.PH@("!F<F5E0VAA<B`H
XM;65S9ULV72D[(&9R965#:&%R("AM97-G6S==*3L*"B`@("\J(%)E9')A=R!T
XM:&4@9FEL92!S96QE8W1O<BX)"0D)"0DJ+PH@("!D<F%W0T1+1G-E;&5C="`H
XM9G-E;&5C="P@9G-E;&5C="T^8F]X*3L*?0H*+RH*("H@5&AI<R!A;&QO=W,@
XM=&AE('5S97(@=&\@9&5L971E(&$@9FEL92X*("HO"G9O:60@9&5L971E1FEL
XM92`H14]B:F5C=%1Y<&4@;V)J96-T5'EP92P@=F]I9"`J;V)J96-T+"!V;VED
XM("IC;&EE;G1$871A*0I["B`@("\J($1E8VQA<F4@;&]C86P@=F%R:6%B;&5S
XM+@D)"0D)"2HO"B`@($-$2U-#4D],3`DJ9G-C<F]L;`D]("A#1$M30U)/3$P@
XM*BEO8FIE8W0["B`@($-$2T9314Q%0U0)*F9S96QE8W0)/2`H0T1+1E-%3$5#
XM5"`J*6-L:65N=$1A=&$["B`@(&-H87()"2IB=71T;VYS6UT)/2![(DYO(BP@
XM(EEE<R)].PH@("!#1$M$24%,3T<)*G%U97-T:6]N.PH@("!C:&%R"0DJ;65S
XM9ULQ,%TL("IF:6QE;F%M92P@=&5M<%LQ,#!=.PH*("`@+RH@1V5T('1H92!F
XM:6QE;F%M92!W:&EC:"!I<R!T;R!B92!D96QE=&5D+@D)"0DJ+PH@("!F:6QE
XM;F%M92`](&-H='EP93)#:&%R("AF<V-R;VQL+3YI=&5M6V9S8W)O;&PM/F-U
XM<G)E;G1)=&5M72D["B`@(&9I;&5N86UE6W-T<FQE;BAF:6QE;F%M92DM,5T@
XM/2`G7#`G.PH*("`@+RH@0W)E871E('1H92!D:6%L;V<@;65S<V%G92X)"0D)
XM"2HO"B`@(&UE<V=;,%T@/2`B/$,^07)E('EO=2!S=7)E('EO=2!W86YT('1O
XM(&1E;&5T92!T:&4@9FEL93HB.PH@("!S<')I;G1F("AT96UP+"`B/$,^/"]5
XM/B5S/R(L(&9I;&5N86UE*3L@;65S9ULQ72`](&-O<'E#:&%R("AT96UP*3L*
XM"B`@("\J($-R96%T92!T:&4@9&EA;&]G(&)O>"X)"0D)"0DJ+PH@("!Q=65S
XM=&EO;B`](&YE=T-$2T1I86QO9R`H9G-E;&5C="T^<V-R965N+"!#14Y415(L
XM($-%3E1%4BP*"0D);65S9RP@,BP@8G5T=&]N<RP@,BP@05]2159%4E-%+`H)
XM"0E44E5%+"!44E5%+"!&04Q312D["@H@("`O*B!#;&5A;B!U<"!T:&ES('!O
XM:6YT97(N("AW92!M87D@;F5E9"!I="!A9V%I;B!R96%L('-O;VXN*0D)*B\*
XM("`@9G)E94-H87(@*&UE<V=;,5TI.PH*("`@+RH@268@=&AE('-A:60@>65S
XM('1H96X@=')Y('1O(&YU:V4@:70N"0D)"2HO"B`@(&EF("AA8W1I=F%T94-$
XM2T1I86QO9R`H<75E<W1I;VXI(#T](#$I"B`@('L*("`@("`@+RH@268@=V4@
XM=V5R92!S=6-C97-S9G5L+"!R96QO860@=&AE('-C<F]L;&EN9R!L:7-T+@D)
XM*B\*("`@("`@:68@*'5N;&EN:R`H9FEL96YA;64I(#T](#`I"B`@("`@('L*
XM("`@("`@("`@+RH@4V5T('1H92!F:6QE('-E;&5C=&]R(&EN9F]R;6%T:6]N
XM+@D)"0DJ+PH@("`@("`@("!S971#1$M&<V5L96-T("AF<V5L96-T+"!F<V5L
XM96-T+3YP=V0L"@D)9G-E;&5C="T^9FEE;&1!='1R:6)U=&4L(&9S96QE8W0M
XM/F9I;&QE<D-H87)A8W1E<BP@9G-E;&5C="T^:&EG:&QI9VAT+`H)"69S96QE
XM8W0M/F1I<D%T=')I8G5T92P@9G-E;&5C="T^9FEL94%T=')I8G5T92P@"@D)
XM9G-E;&5C="T^;&EN:T%T=')I8G5T92P@9G-E;&5C="T^<V]C:T%T=')I8G5T
XM92P@"@D)9G-E;&5C="T^8F]X*3L*("`@("`@?0H@("`@("!E;'-E"B`@("`@
XM('L*("`@("`@("`@+RH@4&]P('5P(&$@;65S<V%G92X)"0D)"0DJ+PH@("`@
XM("`@("!S<')I;G1F("AT96UP+"`B/$,^0V%N)W0@9&5L971E(&9I;&4Z(#PE
XM<SXB+"!S=')E<G)O<B`H97)R;F\I("D["B`@("`@("`@(&UE<V=;,%T@/2!C
XM;W!Y0VAA<B`H=&5M<"D["B`@("`@("`@(&UE<V=;,5T@/2`B("(["B`@("`@
XM("`@(&UE<V=;,ET@/2`B/$,^4')E<W,@86YY(&ME>2!T;R!C;VYT:6YU92XB
XM.PH@("`@("`@("!P;W!5<$UE<W-A9V4@*&9S96QE8W0M/G-C<F5E;BP@;65S
XM9RP@,RD["B`@("`@("`@(&9R965#:&%R("AM97-G6S!=*3L*("`@("`@?0H@
XM("!]"@H@("`O*B!#;&5A;B!U<"X)"0D)"0D)"2HO"B`@(&1E<W1R;WE#1$M$
XM:6%L;V<@*'%U97-T:6]N*3L*"B`@("\J(%)E9')A=R!T:&4@9FEL92!S96QE
XM8W1O<BX)"0D)"0DJ+PH@("!D<F%W0T1+1G-E;&5C="`H9G-E;&5C="P@9G-E
X.;&5C="T^8F]X*3L*?0H@
X`
Xend
SHAR_EOF
  echo 'uudecoding file cdk-4.6.0/fselect.c' &&
  uudecode _sharuue.tmp < _sharuue.tmp && rm -f _sharuue.tmp &&
  $shar_touch -am 1229121095 'cdk-4.6.0/fselect.c' &&
  chmod 0400 'cdk-4.6.0/fselect.c' ||
  echo 'restore of cdk-4.6.0/fselect.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/fselect.c'`"
  test 18104 -eq "$shar_count" ||
    echo "cdk-4.6.0/fselect.c: original size 18104, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/histogram.c ==============
if test -f 'cdk-4.6.0/histogram.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/histogram.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/histogram.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/histogram.c' &&
X#include "cdk.h"
X
X/*
X * $Author: glover $
X * $Date: 1995/12/10 02:16:34 $
X * $Revision: 1.30 $
X */
X
X/*
X * This creates a histogram widget.
X */
XCDKHISTOGRAM *newCDKHistogram (CDKSCREEN *cdkscreen, int xplace, int yplace, int lplace, int height, int width, int orient, char *label, boolean box, boolean shadow)
X{
X   /* Declare local variables.						*/
X   CDKHISTOGRAM *histogram	= (CDKHISTOGRAM *)malloc (sizeof (CDKHISTOGRAM));
X   int boxwidth			= 0;
X   int boxheight		= height + 2;
X   int xpos			= xplace;
X   int ypos			= yplace;
X   int labelxoffset		= 0;
X   int labelyoffset		= 0;
X   int fieldxoffset		= 0;
X   int fieldyoffset		= 0;
X   int junk			= 0;
X   char *plainLabel;
X
X   /* Translate the char * to a chtype *				*/
X   histogram->label	= char2Chtype (label, &histogram->labellen, &junk);
X   plainLabel		= chtype2Char (histogram->label);
X   boxwidth		= width + histogram->labellen + 3;
X
X   /* Adjust the offset values given the location of the label.		*/
X   alignlabel (plainLabel, lplace, width, &boxwidth, &boxheight, &labelxoffset, &labelyoffset, &fieldxoffset, &fieldyoffset);
X   freeChar (plainLabel);
X
X   /* Rejustify the x and y positions if we need to.			*/
X   alignxy (cdkscreen->window, &xpos, &ypos, boxwidth, boxheight);
X
X   /* Create the histogram pointer.					*/
X   histogram->parent	= cdkscreen->window;
X   histogram->win	= newwin (boxheight, boxwidth, ypos, xpos);
X   histogram->shadowwin	= (WINDOW *)NULL;
X   histogram->labelwin	= subwin (cdkscreen->window, 1, histogram->labellen+2, ypos+labelyoffset, xpos+labelxoffset);
X   histogram->width	= width;
X   histogram->height	= height;
X   histogram->orient	= orient;
X   histogram->shadow	= shadow;
X
X   /* Is the window NULL.						*/
X   if (histogram->win == (WINDOW *)NULL)
X   {
X      /* Remove the labelwin if its not NULL.				*/
X      if ( histogram->labelwin != (WINDOW *)NULL)
X      {
X         delwin (histogram->labelwin);
X      }
X
X      /* Clean up any memory used.					*/
X      freeChtype (histogram->label);
X      free (histogram);
X
X      /* Return a NULL pointer.						*/
X      return ( (CDKHISTOGRAM *)NULL );
X   }
X
X   /* Set up some default values.					*/
X   histogram->filler	= '#' | A_REVERSE;
X   histogram->statsattr	= A_NORMAL;
X   histogram->statspos	= TOP;
X   histogram->viewtype	= vREAL;
X   histogram->high	= 0;
X   histogram->low	= 0;
X   histogram->value	= 0;
X   histogram->chars	= 0;
X   histogram->lowx	= 0;
X   histogram->lowy	= 0;
X   histogram->highx	= 0;
X   histogram->highy	= 0;
X   histogram->labelx	= 0;
X   histogram->labely	= 0;
X   histogram->statsx	= 0;
X   histogram->statsy	= 0;
X   histogram->histx	= 0;
X   histogram->histy	= 0;
X   histogram->lowchar	= (char *)NULL;
X   histogram->highchar	= (char *)NULL;
X   histogram->statschar	= (char *)NULL;
X   histogram->box	= box;
X
X   /* Do we want a shadow???						*/
X   if (shadow)
X   {
X      histogram->shadowwin	= subwin (cdkscreen->window, boxheight, boxwidth, ypos+1, xpos+1);
X   }
X
X   /* Register this baby.						*/
X   registerCDKObject (cdkscreen, vHISTOGRAM, histogram);
X
X   /* Return this thing.						*/
X   return (histogram);
X}
X
X/*
X * This sets the values for the histogram.
X */
Xvoid setCDKHistogram (CDKHISTOGRAM *histogram, EHistogramDisplayType viewtype, int statspos, chtype statsattr, int low, int high, int value, chtype filler, boolean box)
X{
X   /* Declare local variables.						*/
X   char		string[100];
X   int		adj;
X   float	temp;
X
X   /* Keep the box info.						*/
X   histogram->box	= box;
X
X   /* We should error check the information we have.			*/
X   histogram->low	= (low <= high ? low : 0);
X   histogram->high	= (low <= high ? high : 0);
X   histogram->value	= ( low <= value && value <= high ? value : 0);
X
X   /* Set some of the basic values.					*/
X   histogram->statspos	= statspos;
X   histogram->statsattr	= statsattr;
X   histogram->filler	= filler;
X   histogram->viewtype	= viewtype;
X   histogram->percent	= (histogram->high == 0 ? 0 : ( (float)histogram->value / (float)histogram->high ));
X   if (histogram->orient == VERTICAL)
X   {
X      temp		= histogram->percent * (float)histogram->height;
X   } 
X   else
X   {
X      temp		= histogram->percent * (float)histogram->width;
X   }
X   histogram->chars	= ( (float)abs(temp) == (float)temp ? (int)temp : (int)temp + 1);
X
X   /* We have a number of variables which determine the personality of	*/
X   /* the histogram. We have to go through each one methodically, and 	*/
X   /* set them correctly. This section does this.			*/
X   if (histogram->viewtype != vNONE)
X   {
X      if (histogram->orient == VERTICAL)
X      {
X         /* Set the vertical adjustment var				*/
X         adj = (histogram->label != (chtype *)NULL ? histogram->labellen + 1 : 0);
X
X         /* Make a vertical histogram the exception.			*/
X         if (histogram->statspos == LEFT || histogram->statspos == TOP)
X         {
X            /* Set the character strings correctly.			*/
X            freeChar (histogram->lowchar);
X            freeChar (histogram->highchar);
X            freeChar (histogram->statschar);
X
X            /* Set the low label attributes.				*/
X            sprintf (string, "%d", histogram->low);
X            histogram->lowchar		= copyChar (string);
X            histogram->lowx		= histogram->height - (int)strlen (string) + 2;
X            histogram->lowy		= adj;
X            
X            /* Set the high label attributes.				*/
X            sprintf (string, "%d", histogram->high);
X            histogram->highchar		= copyChar (string);
X            histogram->highx		= 0;
X            histogram->highy		= adj;
X   
X            /* Set the stats label attributes.				*/
X            if (histogram->viewtype == vPERCENT)
X            {
X               sprintf (string, "%3.1f%%", (float) (histogram->percent * 100));
X            }
X            else if (histogram->viewtype == vFRACTION)
X            {
X               sprintf (string, "%d/%d", histogram->value, histogram->high);
X            }
X            else
X            {
X               sprintf (string, "%d", histogram->value);
X            }
X            histogram->statschar	= copyChar (string);
X            histogram->statsx		= ((histogram->height - (int)strlen(string)) / 2) + 1;
X            histogram->statsy		= adj;
X         }
X         else if (histogram->statspos == RIGHT || histogram->statspos == BOTTOM)
X         {
X            /* Set the character strings correctly.			*/
X            freeChar (histogram->lowchar);
X            freeChar (histogram->highchar);
X            freeChar (histogram->statschar);
X   
X            /* Set the low label attributes.				*/
X            sprintf (string, "%d", histogram->low);
X            histogram->lowchar		= copyChar (string);
X            histogram->lowx		= histogram->height - (int)strlen (string) + 2;
X            histogram->lowy		= histogram->width + 1;
X            
X            /* Set the high label attributes.				*/
X            sprintf (string, "%d", histogram->high);
X            histogram->highchar		= copyChar (string);
X            histogram->highx		= 0;
X            histogram->highy		= histogram->width + 1;
X   
X            /* Set the stats label attributes.				*/
X            if (histogram->viewtype == vPERCENT)
X            {
X               sprintf (string, "%3.2f%%", (float) (histogram->percent * 100));
X            }
X            else if (histogram->viewtype == vFRACTION)
X            {
X               sprintf (string, "%d/%d", histogram->value, histogram->high);
X            }
X            else
X            {
X               sprintf (string, "%d", histogram->value);
X            }
X            histogram->statschar	= copyChar (string);
X            histogram->statsx		= ((histogram->height - (int)strlen(string)) / 2) + 1;
X            histogram->statsy		= histogram->width + 1;
X         }
X
X         /* Set the histogram positions attributes.			*/
X         histogram->histx		= histogram->height - histogram->chars + 1;
X         histogram->histy		= adj;
X      }
X      else
X      {
X         /* Set the vertical adjustment var				*/
X         adj = (histogram->label != (chtype *)NULL ? histogram->labellen + 1 : 0);
X
X         /* Make horizontal the default.				*/
X         if (histogram->statspos == TOP || histogram->statspos == LEFT)
X         {
X            /* Set the character strings correctly.			*/
X            freeChar (histogram->lowchar);
X            freeChar (histogram->highchar);
X            freeChar (histogram->statschar);
X
X            /* Set the low label attributes.    			*/
X            sprintf (string, "%d", histogram->low);
X            histogram->lowchar          = copyChar (string);
X            histogram->lowx             = 0;
X            histogram->lowy             = adj;
X            
X            /* Set the high label attributes.   			*/
X            sprintf (string, "%d", histogram->high);
X            histogram->highchar         = copyChar (string);
X            histogram->highx            = 0;
X            histogram->highy            = histogram->width - (int)strlen (string) + adj + 1;
X   
X            /* Set the stats label attributes.  			*/
X            if (histogram->viewtype == vPERCENT)
X            {
X               sprintf (string, "%3.1f%%", (float) (histogram->percent * 100));
X            }
X            else if (histogram->viewtype == vFRACTION)
X            {
X               sprintf (string, "%d/%d", histogram->value, histogram->high);
X            }
X            else
X            {
X               sprintf (string, "%d", histogram->value);
X            }
X            histogram->statschar        = copyChar (string);
X            histogram->statsx           = 0;
X            histogram->statsy           = ((histogram->width - (int)strlen(string)) / 2) + adj + 1;
X         }
X         else if (histogram->statspos == BOTTOM || histogram->statspos == RIGHT)
X         {
X            /* Set the character strings correctly.			*/
X            freeChar (histogram->lowchar);
X            freeChar (histogram->highchar);
X            freeChar (histogram->statschar);
X
X            /* Set the low label attributes.    			*/
X            sprintf (string, "%d", histogram->low);
X            histogram->lowchar          = copyChar (string);
X            histogram->lowx             = histogram->height + 1;
X            histogram->lowy             = adj;
X            
X            /* Set the high label attributes.   			*/
X            sprintf (string, "%d", histogram->high);
X            histogram->highchar         = copyChar (string);
X            histogram->highx            = histogram->height + 1;
X            histogram->highy            = histogram->width - (int)strlen (string) + adj + 1;
X   
X            /* Set the stats label attributes.  			*/
X            if (histogram->viewtype == vPERCENT)
X            {
X               sprintf (string, "%3.1f%%", (float) (histogram->percent * 100));
X            }
X            else if (histogram->viewtype == vFRACTION)
X            {
X               sprintf (string, "%d/%d", histogram->value, histogram->high);
X            }
X            else
X            {
X               sprintf (string, "%d", histogram->value);
X            }
X            histogram->statschar        = copyChar (string);
X            histogram->statsx           = histogram->height + 1;
X            histogram->statsy           = ((histogram->width - (int)strlen(string)) / 2) + adj + 1;
X         }
X         else if (histogram->statspos == CENTER)
X         {
X            /* Set the character strings correctly.			*/
X            freeChar (histogram->lowchar);
X            freeChar (histogram->highchar);
X            freeChar (histogram->statschar);
X
X            /* Set the low label attributes.    			*/
X            sprintf (string, "%d", histogram->low);
X            histogram->lowchar          = copyChar (string);
X            histogram->lowx             = (histogram->height == 1 ? 1 : (histogram->height / 2) );
X            histogram->lowy             = adj;
X            
X            /* Set the high label attributes.   			*/
X            sprintf (string, "%d", histogram->high);
X            histogram->highchar         = copyChar (string);
X            histogram->highx            = (histogram->height == 1 ? 1 : (histogram->height / 2) );
X            histogram->highy            = histogram->width - (int)strlen (string) + adj + 1;
X   
X            /* Set the stats label attributes.  			*/
X            if (histogram->viewtype == vPERCENT)
X            {
X               sprintf (string, "%3.1f%%", (float) (histogram->percent * 100));
X            }
X            else if (histogram->viewtype == vFRACTION)
X            {
X               sprintf (string, "%d/%d", histogram->value, histogram->high);
X            }
X            else
X            {
X               sprintf (string, "%d", histogram->value);
X            }
X            histogram->statschar        = copyChar (string);
X            histogram->statsx           = (histogram->height == 1 ? 1 : (histogram->height / 2) );
X            histogram->statsy           = ((histogram->width - (int)strlen(string)) / 2) + adj + 1;
X         }
X      }
X   }
X}
X
X/*
X * This function draws the histogram.
X */
Xvoid drawCDKHistogram (CDKHISTOGRAM *histogram, boolean Box)
X{
X   /* Declare the local variables.					*/
X   int x	= 0;
X   int y	= 0;
X
X   /* Erase the old object...						*/
X   eraseCDKHistogram (histogram);
X
X   /* Box the widget if asked.						*/
X   if (Box)
X   {
X      box (histogram->win, histogram->statsattr | ACS_VLINE, histogram->statsattr |ACS_HLINE);
X   }
X
X   /* Do we have a shadow to draw???					*/
X   if (histogram->shadow)
X   {
X      drawShadow (histogram->shadowwin);
X   }
X
X   /* Draw the histogram.						*/
X   if (histogram->orient == VERTICAL)
X   {
X       /* Declare the local vars.					*/
X       int temp	= (int)strlen (histogram->highchar);
X       chtype fattr, fchar, battr, bchar;
X
X       /* Draw in the high label					*/
X       for (x=0; x < temp; x++)
X       {
X          mvwaddch (histogram->win,	histogram->highx + x,
X					histogram->highy,
X					histogram->highchar[x] | histogram->statsattr);
X       }
X
X       /* Draw in the low label						*/
X       temp =(int)strlen (histogram->lowchar);
X       for (x=0; x < temp; x++)
X       {
X          mvwaddch (histogram->win,	histogram->lowx + x,
X					histogram->lowy,
X					histogram->lowchar[x] | histogram->statsattr);
X       }
X
X       /* Draw in the stats label					*/
X       temp =(int)strlen (histogram->statschar);
X       for (x=0; x < temp; x++)
X       {
X          mvwaddch (histogram->win,	histogram->statsx + x,
X					histogram->statsy,
X					histogram->statschar[x] | histogram->statsattr);
X       }
X
X       /* Draw in the histogram.					*/
X       temp	= histogram->labellen;
X       fattr	= histogram->filler & A_ATTRIBUTES;
X       fchar	= histogram->filler & A_CHARTEXT;
X
X       for (x=histogram->histx; x <= histogram->height; x++)
X       {
X          for (y=1; y <= histogram->width; y++)
X          {
X#ifdef WINCHBUG
X             battr	= ' ' | A_REVERSE;
X#else
X             battr	= mvwinch (histogram->win, x, y+temp );
X#endif
X             fchar	= battr & A_ATTRIBUTES;
X             bchar	= battr & A_CHARTEXT;
X             if (bchar == ' ')
X             {
X                mvwaddch (histogram->win, x, y+temp, histogram->filler);
X             }
X             else
X             {
X                mvwaddch (histogram->win, x, y+temp, battr | fattr);
X             }
X          }
X       }
X       wrefresh (histogram->win);
X
X       /* Draw in the label						*/
X       writeChtype (histogram->labelwin, 0, 0, histogram->label, HORIZONTAL, 0, histogram->labellen);
X       wrefresh (histogram->labelwin);
X   }
X   else
X   {
X       /* Declare the local vars.					*/
X       int temp	= (int)strlen (histogram->highchar);
X       chtype fattr, fchar, battr, bchar;
X       int x, y;
X
X       /* Draw in the high label					*/
X       for (x=0; x < temp; x++)
X       {
X          mvwaddch (histogram->win,	histogram->highx,
X					histogram->highy + x,
X					histogram->highchar[x] | histogram->statsattr);
X       }
X
X       /* Draw in the low label						*/
X       temp	= (int)strlen (histogram->lowchar);
X       for (x=0; x < temp; x++)
X       {
X          mvwaddch (histogram->win,	histogram->lowx,
X					histogram->lowy + x,
X					histogram->lowchar[x] | histogram->statsattr);
X       }
X
X       /* Draw in the stats label					*/
X       temp	= (int)strlen (histogram->statschar);
X       for (x=0; x < temp; x++)
X       {
X          mvwaddch (histogram->win,	histogram->statsx,
X					histogram->statsy + x,
X					histogram->statschar[x] | histogram->statsattr);
X       }
X
X       /* Set up some variables we need for the histogram.		*/
X       temp	= histogram->labellen;
X       fattr	= histogram->filler & A_ATTRIBUTES;
X       fchar	= histogram->filler & A_CHARTEXT;
X
X       /* Draw in the histogram.					*/
X       for (x=1; x <= histogram->height; x++)
X       {
X          for (y=0; y < histogram->chars; y++)
X          {
X             /* Get the character and split it into its elements	*/
X#ifdef WINCHBUG
X             battr	= ' ' | A_REVERSE;
X#else
X             battr	= mvwinch (histogram->win, x, y+temp );
X#endif
X             bchar	= battr & A_CHARTEXT;
X             fchar	= battr & A_ATTRIBUTES;
X
X             /* If there was nothing there, put the histogram		*/
X             /* down.							*/
X             if (bchar == ' ')
X             {
X                mvwaddch (histogram->win, x, y+temp, histogram->filler);
X             }
X             else
X             {
X                mvwaddch (histogram->win, x, y+temp, bchar | fattr);
X             }
X          }
X       }
X       wrefresh (histogram->win);
X
X       /* Draw in the label						*/
X       writeChtype (histogram->labelwin, 0, 0, histogram->label, HORIZONTAL, 0, histogram->labellen);
X       wrefresh (histogram->labelwin);
X   }
X}
X
X/*
X * This function destroys the histogram.
X */
Xvoid destroyCDKHistogram (CDKHISTOGRAM *histogram)
X{
X   /* Erase the object.							*/
X   eraseCDKHistogram (histogram);
X
X   /* Clean up the char pointers.					*/
X   freeChtype (histogram->label);
X   freeChar (histogram->lowchar);
X   freeChar (histogram->highchar);
X   freeChar (histogram->statschar);
X
X   /* Clean up the windows.						*/
X   delwin (histogram->win);
X   delwin (histogram->labelwin);
X   if (histogram->shadow)
X   {
X      delwin (histogram->shadowwin);
X   }
X
X   /* Unregister this object.						*/
X   unregisterCDKObject (vHISTOGRAM, histogram);
X
X   /* Finish cleaning up.						*/
X   free (histogram);
X}
X
X/*
X * This function erases the histogram from the screen.
X */
Xvoid eraseCDKHistogram (CDKHISTOGRAM *histogram)
X{
X   werase (histogram->win);
X   werase (histogram->labelwin);
X   wrefresh (histogram->win);
X   wrefresh (histogram->labelwin);
X
X   /* Do we need to erase the shadow...					*/
X   if (histogram->shadow)
X   {
X      werase (histogram->shadowwin);
X      wrefresh (histogram->shadowwin);
X   }
X}
SHAR_EOF
  $shar_touch -am 1229121095 'cdk-4.6.0/histogram.c' &&
  chmod 0400 'cdk-4.6.0/histogram.c' ||
  echo 'restore of cdk-4.6.0/histogram.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/histogram.c'`"
  test 18650 -eq "$shar_count" ||
    echo "cdk-4.6.0/histogram.c: original size 18650, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/itemlist.c ==============
if test -f 'cdk-4.6.0/itemlist.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/itemlist.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/itemlist.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/itemlist.c' &&
X#include "cdk.h"
X
X/*
X * $Author: glover $
X * $Date: 1995/12/10 02:16:34 $
X * $Revision: 1.5 $
X */
X
X/*
X * This creates a pointer to an itemlist widget.
X */
XCDKITEMLIST *newCDKItemlist (CDKSCREEN *cdkscreen, int xplace, int yplace, int lplace, char *label, char **item, int count, int defaultItem, boolean box, boolean shadow)
X{
X   /* Set up some variables.						*/
X   CDKITEMLIST *itemlist = (CDKITEMLIST *)malloc (sizeof (CDKITEMLIST));
X   char *plainlabel	= (char *)NULL;
X   int boxwidth		= 0;
X   int boxheight	= 3;
X   int fieldWidth	= 0;
X   int xpos		= xplace;
X   int ypos		= yplace;
X   int labelxoffset	= 0;
X   int labelyoffset	= 0;
X   int fieldxoffset	= 0;
X   int fieldyoffset	= 0;
X   int temp		= 0;
X   int x;
X
X   /* Translate the label char *pointer to a chtype pointer.		*/
X   itemlist->label	= char2Chtype (label, &itemlist->labellen, &temp);
X   plainlabel		= chtype2Char (itemlist->label);
X
X   /* Go through the list and determine the widest item.		*/
X   for (x=0; x < count; x++)
X   {
X      /* Copy the item to the list.					*/
X      itemlist->item[x]	= char2Chtype (item[x], &itemlist->itemlen[x], &itemlist->itempos[x]);
X      fieldWidth = (fieldWidth < itemlist->itemlen[x] ? itemlist->itemlen[x] : fieldWidth);
X   }
X   fieldWidth += 2;
X
X   /* Now we need to justify the strings.				*/
X   for (x=0; x < count; x++)
X   {
X      itemlist->itempos[x] = justifyString (fieldWidth, itemlist->itemlen[x], itemlist->itempos[x]);
X   }
X
X   /* Adjust the offset values given the location of the label.		*/
X   alignlabel (plainlabel, lplace, fieldWidth, &boxwidth, &boxheight, &labelxoffset, &labelyoffset, &fieldxoffset, &fieldyoffset);
X   freeChar (plainlabel);
X   
X   /* Rejustify the x and y positions if we need to.			*/
X   alignxy (cdkscreen->window, &xpos, &ypos, boxwidth, boxheight);
X
X   /* Make the label window.						*/
X   itemlist->win = newwin (boxheight, boxwidth, ypos, xpos);
X
X   /* Is the window NULL ???						*/
X   if (itemlist->win == (WINDOW *)NULL)
X   {
X      /* Clean up the pointers.						*/
X      freeChtype (itemlist->label);
X      free (itemlist);
X      
X      /* Exit with NULL.						*/
X      return ( (CDKITEMLIST *)NULL );
X   }
X
X   /* Make the field window.						*/
X   itemlist->fieldwin	= subwin (cdkscreen->window, 1, fieldWidth, ypos+fieldyoffset, xpos+fieldxoffset);
X   itemlist->labelwin	= subwin (cdkscreen->window, 1, itemlist->labellen+1, ypos+labelyoffset, xpos+labelxoffset);
X   keypad (itemlist->fieldwin, TRUE);
X
X   /* Set up the rest of the structure.					*/
X   itemlist->parent		= cdkscreen->window;
X   itemlist->shadowwin		= (WINDOW *)NULL;
X   itemlist->fieldWidth		= fieldWidth;
X   itemlist->itemCount		= count-1;
X   itemlist->box		= box;
X   itemlist->shadow		= shadow;
X
X   /* Set then default item.						*/
X   if (defaultItem >= 0 && defaultItem <= itemlist->itemCount)
X   {
X      itemlist->currentItem	= defaultItem;
X      itemlist->defaultItem	= defaultItem;
X   }
X   else
X   {
X      itemlist->currentItem	= 0;
X      itemlist->defaultItem	= 0;
X   }
X
X   /* Do we want a shadow???						*/
X   if (shadow)
X   {
X      itemlist->shadowwin = newwin (boxheight, boxwidth, ypos+1, xpos+1);
X   }
X
X   /* Clean the key bindings.						*/
X   cleanCDKObjectBindings (vITEMLIST, itemlist);
X
X   /* Register this baby.               				*/
X   registerCDKObject (cdkscreen, vITEMLIST, itemlist);
X
X   /* Return the pointer to the structure				*/
X   return (itemlist);
X}
X
X/*
X * This allows the user to play with the widget.
X */
Xint activateCDKItemlist (CDKITEMLIST *itemlist)
X{
X   /* Declare some local variables.					*/
X   chtype input;
X
X   /* Draw the widget.							*/
X   drawCDKItemlist (itemlist, itemlist->box);
X
X   /* Let 'em play....							*/
X   for (;;)
X   {
X      /* Get the input from the user.					*/
X      input = wgetch (itemlist->fieldwin);
X
X      /* Check a predefined binding.					*/
X      if ( ! checkCDKObjectBind (vITEMLIST, itemlist, input) )
X      {
X         switch (input)
X         {
X            case KEY_UP : case KEY_RIGHT : case ' ' : case '+' : case 'n' :
X                 if (itemlist->currentItem < itemlist->itemCount )
X                 {
X                    itemlist->currentItem++;
X                 }
X                 else
X                 {
X                    itemlist->currentItem = 0;
X                 }
X                 break;
X
X            case KEY_DOWN : case KEY_LEFT : case '-' : case 'p' :
X                 if (itemlist->currentItem > 0 )
X                 {
X                    itemlist->currentItem--;
X                 }
X                 else
X                 {
X                    itemlist->currentItem = itemlist->itemCount;
X                 }
X                 break;
X
X            case 'd' : case 'D' :
X                 itemlist->currentItem = itemlist->defaultItem;
X                 break;
X
X            case '0' :
X                 itemlist->currentItem = 0;
X                 break;
X
X            case '$' :
X                 itemlist->currentItem = itemlist->itemCount;
X                 break;
X
X            case KEY_RETURN : case KEY_TAB : case CDK_NEXT :
X                 return ( itemlist->currentItem );
X                 break;
X
X            case CDK_REFRESH :
X                 refreshCDKScreen (itemlist->screen);
X                 break;
X
X            default :
X                 Beep();
X                 break;
X         }
X      }
X
X      /* Redraw the field.					*/
X      drawCDKItemlistField (itemlist);
X   }
X}
X
X/*
X * This draws the widget on the screen.
X */
Xvoid drawCDKItemlist (CDKITEMLIST *itemlist, int Box)
X{
X   /* Erase the widget from the screen.					*/
X   eraseCDKItemlist (itemlist);
X 
X   /* Did we ask for a shadow?						*/
X   if (itemlist->shadow)
X   {
X      drawShadow (itemlist->shadowwin);
X   }
X 
X   /* Box the widget if asked.						*/
X   if (Box)
X   {
X      box (itemlist->win, ACS_VLINE, ACS_HLINE);
X      wrefresh (itemlist->win);
X   }
X 
X   /* Draw in the label to the widget.                                  */
X   writeChtype (itemlist->labelwin, 0, 0, itemlist->label, HORIZONTAL, 0, itemlist->labellen);
X   wrefresh (itemlist->labelwin);
X
X   /* Draw in the field.						*/
X   drawCDKItemlistField (itemlist);
X}
X
X/*
X * This function draws the contents of the field.
X */
Xvoid drawCDKItemlistField (CDKITEMLIST *itemlist)
X{
X   /* Declare local vars.						*/
X   int currentItem = itemlist->currentItem;
X   int x;
X
X   /* Draw in the current item in the field.				*/
X   werase (itemlist->fieldwin);
X   for (x=0; x < itemlist->itemlen[currentItem]; x++)
X   {
X      mvwaddch (itemlist->fieldwin, 0, x+itemlist->itempos[currentItem], itemlist->item[currentItem][x]);
X   }
X   wrefresh (itemlist->fieldwin);
X}
X
X/*
X * This function removes the widget from the screen.
X */
Xvoid eraseCDKItemlist (CDKITEMLIST *itemlist)
X{
X   werase (itemlist->fieldwin);
X   werase (itemlist->labelwin);
X   werase (itemlist->win);
X   wrefresh (itemlist->win);
X
X   /* Do we want to erase the shadow.				*/
X   if (itemlist->shadow)
X   {
X      werase (itemlist->shadowwin);
X      wrefresh (itemlist->shadowwin);
X   }
X}
X
X/*
X * This function destroys the widget and all the memory it used.
X */
Xvoid destroyCDKItemlist (CDKITEMLIST *itemlist)
X{
X   /* Declare local variables.					*/
X   int x;
X
X   /* Erase the object.						*/
X   eraseCDKItemlist (itemlist);
X
X   /* Clear out the character pointers.				*/
X   freeChtype (itemlist->label);
X   for (x=0; x <= itemlist->itemCount; x++)
X   {
X      freeChtype (itemlist->item[x]);
X   }
X
X   /* Delete the windows.					*/
X   delwin (itemlist->fieldwin);
X   delwin (itemlist->labelwin);
X   delwin (itemlist->win);
X   if (itemlist->shadow)
X   {
X      delwin (itemlist->shadowwin);
X   }
X
X   /* Unregister this object.					*/
X   unregisterCDKObject (vITEMLIST, itemlist);
X
X   /* Finish cleaning up.					*/
X   free (itemlist);
X}
X
X/*
X * This function sets the contents of the list.
X */
Xvoid setCDKItemlist (CDKITEMLIST *itemlist, char **item, int count, int defaultItem, boolean box)
X{
X   /* Declare local variables.					*/
X   int x;
X
X   /* Free up the old memory.					*/
X   for (x=0; x <= itemlist->itemCount; x++)
X   {
X      freeChtype (itemlist->item[x]);
X   }
X
X   /* Copy in the new information.				*/
X   itemlist->itemCount = count-1;
X   for (x=0; x <= itemlist->itemCount; x++)
X   {
X      /* Copy the new stuff in.					*/
X      itemlist->item[x]	= char2Chtype (item[x], &itemlist->itemlen[x], &itemlist->itempos[x]);
X      itemlist->itempos[x] = justifyString (itemlist->fieldWidth, itemlist->itemlen[x], itemlist->itempos[x]);
X   }
X
X   /* Set the box flag.						*/
X   itemlist->box = box;
X
X   /* Set the default item.					*/
X   if (defaultItem >= 0 && defaultItem <= itemlist->itemCount)
X   {
X      itemlist->currentItem = defaultItem;
X      itemlist->defaultItem = defaultItem;
X   }
X
X   /* Draw the field.						*/
X   drawCDKItemlistField (itemlist);
X}
SHAR_EOF
  $shar_touch -am 1229121095 'cdk-4.6.0/itemlist.c' &&
  chmod 0400 'cdk-4.6.0/itemlist.c' ||
  echo 'restore of cdk-4.6.0/itemlist.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/itemlist.c'`"
  test 8749 -eq "$shar_count" ||
    echo "cdk-4.6.0/itemlist.c: original size 8749, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/label.c ==============
if test -f 'cdk-4.6.0/label.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/label.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/label.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/label.c' &&
X#include "cdk.h"
X
X/*
X * $Author: glover $
X * $Date: 1995/12/10 02:16:34 $
X * $Revision: 1.28 $
X */
X
X/*
X * This creates a label widget.
X */
XCDKLABEL *newCDKLabel(CDKSCREEN *cdkscreen, int xplace, int yplace, char **mesg, int rows, boolean box, boolean shadow)
X{
X   /* Maintain the label information					*/
X   CDKLABEL *label	= (CDKLABEL *)malloc (sizeof (CDKLABEL));
X   int boxWidth		= 0;
X   int boxHeight	= rows + 2;
X   int xpos		= xplace;
X   int ypos		= yplace;
X   int x		= 0;
X
X   /* Determine the box width.						*/
X   for (x=0; x < rows; x++)
X   {
X      /* Translate the char * to a chtype.				*/
X      label->info[x]	= char2Chtype (mesg[x], &label->infolen[x], &label->infopos[x]);
X      boxWidth		= MAX(boxWidth, label->infolen[x]);
X   }
X   boxWidth += 2;
X
X   /* Create the string alignments.					*/
X   for (x=0; x < rows; x++)
X   {
X      label->infopos[x]	= justifyString (boxWidth, label->infolen[x], label->infopos[x]);
X   }
X
X   /* Rejustify the x and y positions if we need to.			*/
X   alignxy (cdkscreen->window, &xpos, &ypos, boxWidth, boxHeight);
X
X   /* Create the label							*/
X   label->parent	= cdkscreen->window;
X   label->win		= newwin (boxHeight, boxWidth, ypos, xpos);
X   label->shadowwin	= (WINDOW *)NULL;
X   label->xpos		= xpos;
X   label->ypos		= ypos;
X   label->rows		= rows;
X   label->width		= boxWidth;
X   label->box		= box;
X   label->shadow	= shadow;
X
X   /* Is the window NULL???						*/
X   if (label->win == (WINDOW *)NULL) 
X   {
X      /* Free up any memory used.					*/
X      for (x=0; x < rows; x++)
X      {
X         freeChtype (label->info[x]);
X      }
X      free(label);
X
X      /* Return a NULL pointer.						*/
X      return ( (CDKLABEL *)NULL );
X   }
X
X   /* If a shadow was requested, then create the shadow window.		*/
X   if (shadow)
X   {
X      label->shadowwin	= newwin (boxHeight, boxWidth, ypos+1, xpos+1);
X   }
X
X   /* Register this baby.						*/
X   registerCDKObject (cdkscreen, vLABEL, label);
X
X   /* Return the label pointer.						*/
X   return (label);
X}
X
X/*
X * This draws the label widget.
X */
Xvoid drawCDKLabel (CDKLABEL *label, boolean Box)
X{
X   /* Declare local variables.						*/
X   int x	= 0;
X   
X   /* Keep the box information.						*/
X   label->box	= Box;
X
X   /* Erase the label widget from the screen.				*/
X   eraseCDKLabel (label);
X
X   /* Box the widget if asked.						*/
X   if (label->box)
X   {
X      box (label->win, ACS_VLINE, ACS_HLINE);
X   }
X
X   /* Is there a shadow???						*/
X   if (label->shadow)
X   {
X      drawShadow (label->shadowwin);
X   }
X
X   /* Draw in the message.						*/
X   for (x=0; x < label->rows; x++)
X   {
X     writeChtype (label->win, label->infopos[x], x+1, label->info[x], HORIZONTAL, 0, label->infolen[x]);
X   }
X   wrefresh (label->win);
X}
X
X/*
X * This erases the label widget.
X */
Xvoid eraseCDKLabel (CDKLABEL *label)
X{
X   werase (label->win);
X   wrefresh (label->win);
X
X   /* Do we need to erase the shadow win.				*/
X   if (label->shadow)
X   {
X      werase (label->shadowwin);
X      wrefresh (label->shadowwin);
X   }
X}
X
X/*
X * This destroys the label object pointer.
X */
Xvoid destroyCDKLabel (CDKLABEL *label)
X{
X   /* Declare local variables.						*/
X   int x		= 0;
X
X   /* Erase the old label.						*/
X   eraseCDKLabel (label);
X
X   /* Free up the character pointers.					*/
X   for (x=0; x < label->rows ; x++)
X   {
X      freeChtype (label->info[x]);
X   }
X
X   /* Free up the window pointers.					*/
X   delwin (label->win);
X
X   /* Is there a shadow with this widget???				*/
X   if (label->shadow)
X   {
X      delwin (label->shadowwin);
X   }
X 
X   /* Unregister the object.						*/
X   unregisterCDKObject (vLABEL, label);
X
X   /* Free the object pointer.						*/
X   free (label);
X}
X
X/*
X * This pauses until a user hits a key...
X */
Xchar waitCDKLabel (CDKLABEL *label, char key)
X{
X   /* If the key is null, we'll accept anything.			*/
X   if ( key == (char)NULL )
X   {
X      return (wgetch (label->win));
X   }
X   else
X   {
X      /* Only exit when a specific key is hit.				*/
X      char newkey;
X      for (;;)
X      {
X         newkey = wgetch(label->win);
X         if (newkey == key)
X         {
X            return ( newkey );
X         }
X      }
X   }
X}
SHAR_EOF
  $shar_touch -am 1229121095 'cdk-4.6.0/label.c' &&
  chmod 0400 'cdk-4.6.0/label.c' ||
  echo 'restore of cdk-4.6.0/label.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/label.c'`"
  test 4121 -eq "$shar_count" ||
    echo "cdk-4.6.0/label.c: original size 4121, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/marquee.c ==============
if test -f 'cdk-4.6.0/marquee.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/marquee.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/marquee.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/marquee.c' &&
X#include "cdk.h"
X
X/*
X * $Author: glover $
X * $Date: 1995/12/10 02:16:34 $
X * $Revision: 1.24 $
X */
X
X/*
X * This creates a marquee widget.
X */
XCDKMARQUEE *newCDKMarquee (CDKSCREEN *cdkscreen, int xplace, int yplace, int width, boolean shadow)
X{
X   CDKMARQUEE *marquee	= (CDKMARQUEE *)malloc (sizeof (CDKMARQUEE));
X   int xpos		= xplace;
X   int ypos		= yplace;
X   int boxheight	= 3;
X   int boxwidth		= width + 2;
X
X   /* Rejustify the x and y positions if we need to.			*/
X   alignxy (cdkscreen->window, &xpos, &ypos, boxwidth, boxheight);
X
X   /* Create the marquee pointer.					*/
X   marquee->parent	= cdkscreen->window;
X   marquee->win		= newwin (boxheight, boxwidth, ypos, xpos);
X   marquee->shadowwin	= (WINDOW *)NULL;
X   marquee->active	= TRUE;
X   marquee->width	= width;
X   marquee->box		= NOBOX;
X   marquee->shadow	= shadow;
X
X   /* Is the window NULL???						*/
X   if (marquee->win == (WINDOW *)NULL)
X   {
X      /* Clean up any memory.						*/
X      free (marquee);
X
X      /* Return a NULL pointer.						*/
X      return ( (CDKMARQUEE *)NULL );
X   }
X
X   /* Register this baby.						*/
X   registerCDKObject (cdkscreen, vMARQUEE, marquee);
X
X   /* Return the marquee pointer.					*/
X   return(marquee);
X}
X
X/* 
X * This activates the marquee.
X */
Xint activateCDKMarquee (CDKMARQUEE *marquee, char *mesg, int delay, int repeat, boolean box)
X{
X   /* Declear local variables.						*/
X   chtype *message;
X   int mesglength 	= 0;
X   int startpos		= 0;
X   int firstchar	= 0;
X   int lastchar		= 1;
X   int repeatCount	= 0;
X   int viewsize		= 0;
X#ifdef NOUSLEEP
X   int sleeper		= 0;
X#endif
X   int x, y, junk;
X
X   /* Keep the box info.						*/
X   marquee->box = box;
X
X   /* Make sure the message has some content.				*/
X   if (mesg == (char *)NULL)
X   {
X      return (-1);
X   }
X   
X   /* Translate the char * to a chtype *				*/
X   message	= char2Chtype (mesg, &mesglength, &junk);
X
X   /* Draw in the marquee.						*/
X   drawCDKMarquee (marquee, box);
X
X   /* Set up the variables.						*/
X   viewsize = lastchar - firstchar;
X   startpos = marquee->width - viewsize + 1;
X
X   /* Start doing the marquee thing...					*/
X   for (;;)
X   {
X      if (marquee->active)
X      {
X         /* Draw in the characters.					*/
X         y = firstchar;
X         for (x=startpos ; x < (startpos+viewsize) ; x++)
X         {
X            mvwaddch (marquee->win, 1, x, message[y]);
X            y++;
X         }
X         wrefresh (marquee->win);
X   
X         /* Set my variables.						*/
X         if (mesglength < marquee->width-2)
X         {
X            if (lastchar < mesglength)
X            {
X               lastchar ++;
X               viewsize ++;
X               startpos = marquee->width - viewsize + 1;
X            }
X            else if (lastchar == mesglength)
X            {
X               if (startpos > 1)
X               {
X                  /* This means the whole string is visible.		*/
X                  startpos --;
X                  viewsize = mesglength;
X               }
X               else
X               {
X                 /* We have to start chopping the viewsize		*/
X                 startpos = 1;
X                 firstchar ++;
X                 viewsize --;
X               }
X            }
X         }
X         else
X         {
X            if (startpos > 1)
X            {
X               lastchar ++;
X               viewsize ++;
X               startpos --;
X            }
X            else
X            {
X               if (lastchar < mesglength)
X               {
X                  firstchar ++;
X                  lastchar  ++;
X                  viewsize = marquee->width;
X                  startpos = 1;
X               }
X               else
X               {
X                  firstchar ++;
X                  viewsize --;
X                  startpos = 1;
X               }
X            }
X         }
X
X         /* OK, lets check if we have to start over.			*/
X         if ( viewsize == 0 && firstchar == mesglength)
X         {
X            /* Check if we need to repeat or not.			*/
X            repeatCount ++;
X            if (repeat > 0 && repeatCount == repeat)
X            {
X               freeChtype (message);
X               return (0);
X            }
X
X            /* Time to start over. 					*/
X            mvwaddch (marquee->win, 1, 1, ' '|A_NORMAL);
X            wrefresh (marquee->win);
X#ifndef NOUSLEEP
X            curs_set(0);
X#endif
X            firstchar = 0;
X            lastchar = 1;
X            viewsize = lastchar - firstchar;
X            startpos = marquee->width - viewsize + 1;
X         }
X   
X         /* Now sleep							*/
X#ifdef NOUSLEEP
X         for (sleeper = 0; sleeper <= (delay * 250) ; sleeper++) {}
X#else
X         usleep ( (delay * 10000) );
X#endif
X      }
X      else
X      {
X         printf ("\r\n\r\n\r\n\r\nMarquee turned off\r\n");
X         }
X   }
X}
X
X/*
X * This draws the marquee widget on the screen.
X */
Xvoid drawCDKMarquee (CDKMARQUEE *marquee, boolean Box)
X{
X   /* Keep the box information.						*/
X   marquee->box	= Box;
X
X   /* Erase the old object...						*/
X   eraseCDKMarquee (marquee);
X
X   /* Do we need to draw a shadow???					*/
X   if (marquee->shadow)
X   {
X      drawShadow (marquee->shadowwin);
X   }
X
X   /* Box it if needed.							*/
X   if (Box)
X   {
X      box (marquee->win, ACS_VLINE, ACS_HLINE);
X      wrefresh (marquee->win);
X   }
X}
X
X/*
X * This destroys the marquee.
X */
Xvoid destroyCDKMarquee (CDKMARQUEE *marquee)
X{
X   /* Erase the object.							*/
X   eraseCDKMarquee (marquee);
X
X   /* Clean up the windows.						*/
X   delwin (marquee->win);
X   if (marquee->shadow)
X   {
X      delwin (marquee->shadowwin);
X   }
X
X   /* Unregister this object.						*/
X   unregisterCDKObject (vMARQUEE, marquee);
X   
X   /* Finish cleaning up.						*/
X   free (marquee);
X}
X
X/*
X * This erases the marquee.
X */
Xvoid eraseCDKMarquee (CDKMARQUEE *marquee)
X{
X   werase (marquee->win);
X   wrefresh (marquee->win);
X   if (marquee->shadow)
X   {
X      werase (marquee->shadowwin);
X      wrefresh (marquee->shadowwin);
X   }
X}
SHAR_EOF
  $shar_touch -am 1229121095 'cdk-4.6.0/marquee.c' &&
  chmod 0400 'cdk-4.6.0/marquee.c' ||
  echo 'restore of cdk-4.6.0/marquee.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/marquee.c'`"
  test 5915 -eq "$shar_count" ||
    echo "cdk-4.6.0/marquee.c: original size 5915, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/matrix.c ==============
if test -f 'cdk-4.6.0/matrix.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/matrix.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/matrix.c (binary)'
  sed 's/^X//' << 'SHAR_EOF' > _sharuue.tmp &&
Xbegin 600 cdk-4.6.0/matrix.c
XM(VEN8VQU9&4@(F-D:RYH(@H*+RH*("H@)$%U=&AO<CH@9VQO=F5R("0*("H@
XM)$1A=&4Z(#$Y.34O,3(O,C,@,C(Z,C@Z-38@)`H@*B`D4F5V:7-I;VXZ(#$N
XM-S,@)`H@*B\*"B\J($1E8V%L<F4@9VQO8F%L('9A<G,N"0D)"0D)"2HO"G-T
XM871I8R!C:&%R("I087-T94)U9F9E<@D]("AC:&%R("HI3E5,3#L*=F]I9"!R
XM961R87=4:71L97,@*$-$2TU!5%))6"`J;6%T<FEX+"!I;G0@<F]W+"!I;G0@
XM8V]L*3L*"B\J"B`J(%1H:7,@9G5N8W1I;VX@8W)E871E<R!T:&4@;6%T<FEX
XM('=I9&=E="X*("HO"D-$2TU!5%))6"`J;F5W0T1+36%T<FEX("A#1$M30U)%
XM14X@*F-D:W-C<F5E;BP@:6YT('AP;&%C92P@:6YT('EP;&%C92P@:6YT(')O
XM=W,L(&EN="!C;VQS+"!I;G0@=G)O=W,L(&EN="!V8V]L<RP@8VAA<B`J*G)O
XM=W1I=&QE<RP@8VAA<B`J*F-O;'1I=&QE<RP@:6YT("IC;VQW:61T:',L(&EN
XM="`J8V]L=F%L=65S+"!I;G0@<G-P86-E+"!I;G0@8W-P86-E+"!C:'1Y<&4@
XM9FEL;&5R+"!I;G0@9&]M:6YA;G0L($U!5%))6$-"($-$2TUA=')I>$-A;&Q"
XM86-K1FXL(&)O;VQE86X@8F]X36%T<FEX+"!B;V]L96%N(&)O>$-E;&PL(&)O
XM;VQE86X@<VAA9&]W*0I["B`@("\J($1E8VQA<F4@;&]C86P@=F%R:6%B;&5S
XM+@D)"0D)"2HO"B`@($-$2TU!5%))6"`J;6%T<FEX"3T@*$-$2TU!5%))6"`J
XM*6UA;&QO8R`H<VEZ96]F*$-$2TU!5%))6"DI.PH@("!I;G0@8F]X:&5I9VAT
XM"3T@,#L*("`@:6YT(&)O>'=I9'1H"0D](#`["B`@(&EN="!X<&]S"0D]('AP
XM;&%C93L*("`@:6YT('EP;W,)"3T@>7!L86-E.PH@("!I;G0@;6%X4F]W5&ET
XM;&57:61T:`D](#`["B`@(&EN="!B96=X+"!B96=Y+"!X+"!Y+"!Z+"!W+"!C
XM96QL=VED=&@["B`@(&EN="!R;W=S<&%C90D)/2!-05@@*#`L(')S<&%C92D[
XM"B`@(&EN="!C;VQS<&%C90D)/2!-05@@*#`L(&-S<&%C92D["@H@("`O*B!-
XM86ME('-U<F4@=&AA="!T:&4@;G5M8F5R(&]F(')O=W,O8V]L<R]V<F]W<R]V
XM8V]L<R!I<R!N;W0@>F5R;RX)*B\*("`@:68@*')O=W,@/3T@,"!\?"!C;VQS
XM(#T](#`@?'P@=G)O=W,@/3T@,"!\?"!V8V]L<R`]/2`P*0H@("!["B`@("`@
XM("\J($9R964@=7`@86YY('5S960@;65M;W)Y+@D)"0D)*B\*("`@("`@9G)E
XM92`H;6%T<FEX*3L*"B`@("`@("\J(%)E='5R;B!A($Y53$P@<&]I;G1E<BX)
XM"0D)"0DJ+PH@("`@("!R971U<FX@*"`H0T1+34%44DE8("HI3E5,3"`I.PH@
XM("!]"@H@("`O*B!-86ME('-U<F4@=&AE(&YU;6)E<B!O9B!V:7)T=6%L(&-E
XM;&QS(&ES(&YO="!L87)G97(@=&AA;@D)*B\*("`@+RH@=&AE('!H>7-I8V%L
XM('-I>F4N"0D)"0D)*B\*("`@=G)O=W,@/2`H=G)O=W,@/B!R;W=S(#\@<F]W
XM<R`Z('9R;W=S*3L*("`@=F-O;',@/2`H=F-O;',@/B!C;VQS(#\@8V]L<R`Z
XM('9C;VQS*3L*"B`@("\J($1E=&5R;6EN92!T:&4@:&5I9VAT(&]F('1H92!B
XM;W@N"0D)"0DJ+PH@("!F;W(@*'@],3L@>"`\/2!V<F]W<SL@>"LK*0H@("![
XM"B`@("`@(&)O>&AE:6=H="`K/2`S("L@<F]W<W!A8V4["B`@('T*"B`@("\J
XM($1E=&5R;6EN92!T:&4@;6%X:6UU;2!R;W<@=&ET;&4@=VED=&@)"0D)*B\*
XM("`@;6%X4F]W5&ET;&57:61T:`D](#`["B`@(&9O<B`H>#TQ.R!X(#P](')O
XM=W,[('@K*RD*("`@>PH@("`@("!M871R:7@M/G)O=W1I=&QE6WA=(#T@8VAA
XM<C)#:'1Y<&4@*')O=W1I=&QE<UMX72P@)FUA=')I>"T^<F]W=&ET;&5L96Y;
XM>%TL("9M871R:7@M/G)O=W1I=&QE<&]S6WA=*3L*("`@("`@;6%X4F]W5&ET
XM;&57:61T:"`]($U!6"`H;6%X4F]W5&ET;&57:61T:"P@;6%T<FEX+3YR;W=T
XM:71L96QE;EMX72D["B`@('T*("`@;6%T<FEX+3YM87AR="`](&UA>%)O=U1I
XM=&QE5VED=&@@*R`R.PH@("!B;WAW:61T:"`](&UA=')I>"T^;6%X<G0["@H@
XM("`O*B!792!N965D('1O(')E:G5S=&EF>2!T:&4@<F]W('1I=&QE(&-E;&P@
XM:6YF;RX)"0DJ+PH@("!F;W(@*'@],3L@>"`\/2!R;W=S.R!X*RLI"B`@('L*
XM("`@("`@;6%T<FEX+3YR;W=T:71L97!O<UMX70D](&IU<W1I9GE3=')I;F<@
XM*&UA=')I>"T^;6%X<G0L(&UA=')I>"T^<F]W=&ET;&5L96Y;>%TL(&UA=')I
XM>"T^<F]W=&ET;&5P;W-;>%TI.PH@("!]"@H@("`O*B!$971E<FUI;F4@=&AE
XM('=I9'1H(&]F('1H92!M871R:7@N"0D)"2HO"B`@(&9O<B`H>#TQ.R!X(#P]
XM('9C;VQS.R!X*RLI"B`@('L*("`@("`@8F]X=VED=&@@*ST@8V]L=VED=&AS
XM6WA=("L@,B`K(&-O;'-P86-E.PH@("!]"B`@(&)O>'=I9'1H+2T["B`@(&)O
XM>&AE:6=H="LK.PH*("`@+RH@4F5J=7-T:69Y('1H92!X(&%N9"!Y('!O<VET
XM:6]N<R!I9B!W92!N965D('1O+@D)"2HO"B`@(&%L:6=N>'D@*&-D:W-C<F5E
XM;BT^=VEN9&]W+"`F>'!O<RP@)GEP;W,L(&)O>'=I9'1H+"!B;WAH96EG:'0I
XM.PH*("`@+RH@36%K92!T:&4@<&]P+75P('=I;F1O=RX)"0D)"0DJ+PH@("!M
XM871R:7@M/G=I;B`](&YE=W=I;B`H8F]X:&5I9VAT+"!B;WAW:61T:"P@>7!O
XM<RP@>'!O<RD["@H@("`O*B!#:&5C:R!I9B!T:&4@;F5W('=I;F1O=R!I<R!.
XM54Q,(&]R(&YO="X)"0D)*B\*("`@:68@*&UA=')I>"T^=VEN(#T]("A724Y$
XM3U<@*BE.54Q,*0H@("!["B`@("`@("\J($9R964@=7`@86YY('5S960@;65M
XM;W)Y+@D)"0D)*B\*("`@("`@9F]R("AZ/3$[('H@/#T@<F]W<SL@>BLK*0H@
XM("`@("!["B`@("`@("`@(&9R965#:'1Y<&4@*&UA=')I>"T^<F]W=&ET;&5;
XM>ETI.PH@("`@("!]"B`@("`@(&9R964@*&UA=')I>"D["@H@("`@("`O*B!2
XM971U<FX@82!.54Q,('!O:6YT97(N"0D)"0D)*B\*("`@("`@<F5T=7)N("@@
XM*$-$2TU!5%))6"`J*4Y53$P@*3L*("`@?0H*("`@+RH@36%K92!T:&4@<W5B
XM=VEN9&]W<R!I;B!T:&4@<&]P+75P+@D)"0DJ+PH@("!B96=X(#T@>'!O<SL*
XM("`@8F5G>2`]('EP;W,@*R`Q.PH*("`@+RH@36%K92!T:&4@)V5M<'1Y)R`P
XM>#`@8V5L;"X)"0D)"2HO"B`@(&UA=')I>"T^8V5L;%LP75LP72`]('-U8G=I
SHAR_EOF
  : || echo 'restore of cdk-4.6.0/matrix.c failed'
fi
echo 'End of archive part 5'
echo 'File cdk-4.6.0/matrix.c is continued in part 6'
echo 6 > _sharseq.tmp
exit 0
