Newsgroups: comp.sources.unix
From: glover@credit.erin.utoronto.ca (Mike Glover)
Subject: v29i074: cdk - curses development kit, V4.6.0, Part01/09
Message-id: <1.821493023.9103@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: glover@credit.erin.utoronto.ca (Mike Glover)
Posting-Number: Volume 29, Issue 74
Archive-Name: cdk-4.6.0/part01

#!/bin/sh
# This is a shell archive (produced by GNU sharutils 4.1).
# To extract the files from this archive, save it to some FILE, remove
# everything before the `!/bin/sh' line above, then type `sh FILE'.
#
# Made on 1996-01-12 16:28 PST by <vixie@gw.home.vix.com>.
# Source directory was `/tmp_mnt/fs/a3/CSU/New'.
#
# Existing files will *not* be overwritten unless `-c' is specified.
#
# This is part 1 of a multipart archive.                                   
# Do not concatenate these parts, unpack them in order with `/bin/sh'.     
#
# This shar contains:
# length mode       name
# ------ ---------- ------------------------------------------
#   1760 (null) -r--------
#     25 (null) -r--------
#   1189 (null) -r--------
#   2593 (null) -r--------
#   2467 (null) -r--------
#   3870 (null) -r--------
#   1610 (null) -r--------
#   1303 (null) -r--------
#   1129 (null) -r--------
#   2141 (null) -r--------
#   1206 (null) -r--------
#   1629 (null) -r--------
#   2011 (null) -r--------
#   1133 (null) -r--------
#   1994 (null) -r--------
#   2028 (null) -r--------
#   2250 (null) -r--------
#   1323 (null) -r--------
#   2121 (null) -r--------
#   1225 (null) -r--------
#   6028 (null) -r--------
#    952 (null) -r--------
#   9349 (null) -r--------
#   3882 (null) -r--------
#   7319 (null) -r--------
#   5067 (null) -r--------
#   6893 (null) -r--------
#   3479 (null) -r--------
#   3428 (null) -r--------
#  11392 (null) -r--------
#   9696 (null) -r--------
#   5404 (null) -r--------
#   6580 (null) -r--------
#   7625 (null) -r--------
#   6578 (null) -r--------
#   6872 (null) -r--------
#   7553 (null) -r--------
#   8356 (null) -r--------
#   7865 (null) -r--------
#   3709 (null) -r--------
#   4367 (null) -r--------
#   3832 (null) -r--------
#   7178 (null) -r--------
#  17381 (null) -r--------
#  43192 (null) -r--------
#  15040 (null) -r--------
#    854 (null) -r--------
#   8211 (null) -r--------
#   8755 (null) -r--------
#  19691 (null) -r--------
#   7984 (null) -r--------
#  18104 (null) -r--------
#  18650 (null) -r--------
#   8749 (null) -r--------
#   4121 (null) -r--------
#   5915 (null) -r--------
#  40088 (null) -r--------
#  20412 (null) -r--------
#  11502 (null) -r--------
#  12901 (null) -r--------
#   7714 (null) -r--------
#  14237 (null) -r--------
#  14619 (null) -r--------
#  14208 (null) -r--------
#  14153 (null) -r--------
#  24087 (null) -r--------
#   1618 (null) -r--r--r--
#   2143 (null) -r--r--r--
#   2784 (null) -r--r--r--
#   2023 (null) -r--r--r--
#   5465 (null) -r--r--r--
#    634 (null) -r--------
#    315 (null) -r--r--r--
#  20399 (null) -r--r--r--
#  32493 (null) -r--------
#  10047 (null) -r--------
#   5267 (null) -r--------
#
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
if test -r _sharseq.tmp; then
  echo 'Must unpack archives in sequence!'
  echo Please unpack part `cat _sharseq.tmp` next
  exit 1
fi
# ============= cdk-4.6.0/examples/dialog_ex.c ==============
if test ! -d 'cdk-4.6.0'; then
  echo 'x - creating directory cdk-4.6.0'
  mkdir 'cdk-4.6.0'
fi
if test ! -d 'cdk-4.6.0/examples'; then
  echo 'x - creating directory cdk-4.6.0/examples'
  mkdir 'cdk-4.6.0/examples'
fi
if test -f 'cdk-4.6.0/examples/dialog_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/dialog_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/dialog_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/dialog_ex.c' &&
X#include "cdk.h"
X
Xvoid main()
X{
X   /* Declare variables.			*/
X   CDKSCREEN	*cdkscreen;
X   CDKDIALOG	*question;
X   WINDOW	*cursesWin;
X   char		*buttons[40];
X   char		*message[40];
X   char		temp[100];
X   int		selection;
X   int		x;
X
X   /* Set up CDK 				*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen (cursesWin);
X
X   /* Start color.              		*/
X   initCDKColor();
X
X   /* Set up the dialog box.			*/
X   for (x=0; x < 20; x++)
X   {
X      sprintf (temp, "</U/3>%d<!3>", x); buttons[x] = copyChar (temp);
X   }
X
X   message[0]	= "<C></5>This is the message region.";
X   message[1]	= "<L></B>There can be almost any number";
X   message[2]	= "<R></U>of lines here as you wish.";
X   message[3]	= "<C></2>This example only displays four lines.";
X
X   /* Create the dialog box.			*/
X   question	= newCDKDialog (cdkscreen, CENTER, CENTER, message, 4, buttons, 20, COLOR_PAIR(2), TRUE, TRUE, FALSE);
X
X   /* Check if we got a null value back.	*/
X   if (question == (CDKDIALOG *)NULL)
X   {
X      /* Clean up the memory.			*/
X      for (x=0; x < 20; x++)
X      {
X          free (buttons[x]);
X      }
X      destroyCDKScreen (cdkscreen);
X
X      /* End curses...				*/
X      endCDK();
X
X      /* Spit out a message.			*/
X      printf ("Oops. Can't seem to create the dialog box. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Activate the dialog box.			*/
X   selection	= activateCDKDialog (question);
X
X   /* Clean up					*/
X   destroyCDKDialog (question);
X   destroyCDKScreen (cdkscreen);
X   endCDK();
X
X   /* Destroy the memory the buttons use.	*/
X   for (x=0; x < 20; x++)
X   {
X       free (buttons[x]);
X   }
X   delwin (cursesWin);
X
X   /* Spit out the info				*/
X   printf ("\n\n\n");
X   printf ("Button Number Chosen: %d\n", selection);
X   exit (0);
X}
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/dialog_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/dialog_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/dialog_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/dialog_ex.c'`"
  test 1760 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/dialog_ex.c: original size 1760, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/examples/draw_ex.c ==============
if test -f 'cdk-4.6.0/examples/draw_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/draw_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/draw_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/draw_ex.c' &&
X/* This is to come....*/
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/draw_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/draw_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/draw_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/draw_ex.c'`"
  test 25 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/draw_ex.c: original size 25, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/examples/entry_ex.c ==============
if test -f 'cdk-4.6.0/examples/entry_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/entry_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/entry_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/entry_ex.c' &&
X#include "cdk.h"
X
Xvoid main()
X{
X   /* Declare vars			*/
X   CDKSCREEN	*cdkscreen;
X   CDKENTRY	*directory;
X   WINDOW	*cursesWin;
X   char		*label;
X   char		*info;
X
X   /* Set up CDK 			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen( cursesWin );
X
X   /* Start CDK colors.			*/
X   initCDKColor();
X
X   /* Declare the labels.		*/
X   label	= "</U/5>Directory:<!U!5>";
X   directory	= newCDKEntry (cdkscreen, CENTER, CENTER, LEFT, label, A_NORMAL, '.', vMIXED, 10, 0, 256, &CDKEntryCallBack, TRUE, FALSE);
X
X   /* Is the widget NULL??		*/
X   if (directory == (CDKENTRY *)NULL)
X   {
X      /* Clean up			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a little message.	*/
X      printf ("Oops. Can't seem to create the entry box. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Draw the CDK screen.		*/
X   refreshCDKScreen ( cdkscreen );
X
X   /* Activate the entry fields.	*/
X   info	= strdup(activateCDKEntry (directory) );
X   
X   /* Clean up				*/
X   destroyCDKEntry (directory);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X  
X   /* Spit out what the user typed.	*/
X   printf ("info: %s\n", info);
X   free(info);
X   exit (0);
X}
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/entry_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/entry_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/entry_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/entry_ex.c'`"
  test 1189 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/entry_ex.c: original size 1189, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/examples/graph_ex.c ==============
if test -f 'cdk-4.6.0/examples/graph_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/graph_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/graph_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/graph_ex.c' &&
X#include "cdk.h"
X
Xvoid main()
X{
X   /* Declare vars			*/
X   CDKSCREEN	*cdkscreen;
X   CDKGRAPH	*graph;
X   CDKLABEL	*pause;
X   WINDOW	*cursesWin;
X   char	*mesg[2], *title, *xtitle, *ytitle;
X   chtype graphchars[20];
X   int values[20], colors[20];
X   int count;
X
X   /* Set up CDK			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen ( cursesWin );
X
X   /* Start CDK Colors			*/
X   initCDKColor();
X
X   /* Create the graph values.		*/
X   values[0]	= 10;	graphchars[0]	= '*'|A_NORMAL;	colors[0]	= 5;
X   values[1]	= 15;	graphchars[1]	= '*'|A_NORMAL;	colors[1]	= 5;
X   values[2]	= 20;	graphchars[2]	= '*'|A_NORMAL;	colors[2]	= 5;
X   values[3]	= 25;	graphchars[3]	= '*'|A_NORMAL;	colors[3]	= 5;
X   values[4]	= 30;	graphchars[4]	= '*'|A_NORMAL;	colors[4]	= 5;
X   values[5]	= 35;	graphchars[5]	= '*'|A_NORMAL;	colors[5]	= 5;
X   values[6]	= 40;	graphchars[6]	= '*'|A_NORMAL;	colors[6]	= 5;
X   values[7]	= 45;	graphchars[7]	= '*'|A_NORMAL;	colors[7]	= 5;
X   values[8]	= 50;	graphchars[8]	= '*'|A_NORMAL;	colors[8]	= 5;
X   values[9]	= 55;	graphchars[9]	= '*'|A_NORMAL;	colors[9]	= 5;
X   count	= 10;
X   title	= "<C>Test Graph";
X   xtitle	= "<C>X AXIS TITLE";
X   ytitle	= "<C>Y AXIS TITLE";
X  
X   /* Create the label values.		*/
X   mesg[0]	= "Press Any Key When Done Viewing The Graph.";
X
X   /* Create the graph widget		*/
X   graph = newCDKGraph (cdkscreen, CENTER, CENTER, 10, 20, title, xtitle, ytitle);
X
X   /* Is the graph NULL???		*/
X   if (graph == (CDKGRAPH *)NULL)
X   {
X      /* Shut down CDK.			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.	*/
X      printf ("Oops. Can not make the graph widget. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Create the label widget.		*/
X   pause = newCDKLabel (cdkscreen, CENTER, BOTTOM, mesg, 1, TRUE, FALSE);
X   if ( pause == (CDKLABEL *)NULL)
X   {
X      /* Shut down CDK.			*/
X      destroyCDKGraph (graph);
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.	*/
X      printf ("Oops. Can not make the label widget. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Set the graph values.		*/
X   setCDKGraph (graph, values, count, FALSE, graphchars, colors, vPLOT);
X
X   /* Draw the screen.			*/
X   refreshCDKScreen (cdkscreen);
X   drawCDKGraph (graph, BOX);
X   drawCDKLabel (pause, BOX);
X
X   /* Pause until the user says so...	*/
X   waitCDKLabel (pause, (char)NULL);
X
X   /* Clean up.                         */
X   destroyCDKGraph (graph);
X   destroyCDKLabel (pause);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X   exit (0);
X}
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/graph_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/graph_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/graph_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/graph_ex.c'`"
  test 2593 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/graph_ex.c: original size 2593, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/examples/fselect_ex.c ==============
if test -f 'cdk-4.6.0/examples/fselect_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/fselect_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/fselect_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/fselect_ex.c' &&
X#include "cdk.h"
X
X#define	MAXINFOLINES	10000
X
Xvoid main(int argc, char **argv)
X{
X   /* Declare variables.			*/
X   CDKSCREEN	*cdkscreen;
X   CDKVIEWER	*example;
X   CDKFSELECT	*fileSelector;
X   WINDOW	*cursesWin;
X   char		*filename;
X   char		*info[MAXINFOLINES];
X   char		*button[25];
X   char		title[500];
X   int		selected;
X   int		lines;
X   int		x;
X
X   /* Create the viewer buttons.				*/
X   button[0]	= "</5><<OK>><!5>";
X   button[1]	= "</5><<Maybe>><!5>";
X   button[2]	= "</5><<Maybe Not>><!5>";
X   button[3]	= "</5><<Cancel>><!5>";
X
X   /* Set up CDK 						*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen ( cursesWin );
X
X   /* Start color.						*/
X   initCDKColor();
X
X   /* Get the filename.						*/
X   fileSelector = newCDKFselect (cdkscreen, CENTER, CENTER, 20, 55,
X			A_NORMAL, '.', COLOR_PAIR(48)|A_REVERSE,
X			"</5>", "</48>", "</N>", "</N>",
X			TRUE, FALSE);
X 
X   /* Activate the file selector.				*/
X   filename = activateCDKFselect (fileSelector);
X
X   /* Check if the value was NULL.				*/
X   if ( filename == (char *)NULL )
X   {
X      /* Exit CDK.						*/
X      destroyCDKFselect (fileSelector);
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.				*/
X      printf ("No file selected.\n");
X      exit (0);
X   }
X
X   /* Create the viewer.					*/
X   example = newCDKViewer (cdkscreen,
X		CENTER, CENTER, 20, 70,
X		button, 1, TRUE, FALSE);
X
X   /* Is the viewer pointer NULL??				*/
X   if (example == (CDKVIEWER *)NULL)
X   {
X      /* Exit CDK.						*/
X      destroyCDKFselect (fileSelector);
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.				*/
X      printf ("Oops. Can't seem to create viewer. Is the window too small?\n");
X      exit (0);
X   }
X
X   /* Set up the info.						*/
X   lines = readFile (filename, info, MAXINFOLINES);
X   if (lines == 0)
X   {
X      printf ("Could not open %s\n", filename);
X      exit (1);
X   }
X
X   /* Make it run...						*/
X   sprintf (title, "<C></B/21>Filename:<!21></22>%20s<!22!B>", filename);
X   selected = activateCDKViewer (example, title, info, lines,
X		COLOR_PAIR(21)|A_REVERSE, TRUE, TRUE);
X
X   /* Clean up.							*/
X   destroyCDKViewer (example);
X   destroyCDKFselect (fileSelector);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X   for (x=0; x < lines; x++)
X   {
X      freeChar (info[x]);
X   }
X
X   /* Spit out some info.					*/
X   printf ("\n\n\n\n");
X   printf ("You picked button %d\n", selected);
X}
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/fselect_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/fselect_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/fselect_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/fselect_ex.c'`"
  test 2467 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/fselect_ex.c: original size 2467, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/examples/histogram_ex.c ==============
if test -f 'cdk-4.6.0/examples/histogram_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/histogram_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/histogram_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/histogram_ex.c' &&
X#include "cdk.h"
X
Xvoid main()
X{
X   /* Declare vars			*/
X   CDKSCREEN	*cdkscreen;
X   CDKHISTOGRAM	*volume;
X   CDKHISTOGRAM	*bass;
X   CDKHISTOGRAM	*treble;
X   WINDOW	*cursesWin;
X   char *volumeLabel, *bassLabel, *trebleLabel;
X
X   /* Set up CDK 			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen ( cursesWin );
X
X   /* Start CDK Color			*/
X   initCDKColor();
X
X   /* Set up the histogram labels.	*/
X   volumeLabel	= "</5>Volume<!5>";
X   bassLabel	= "</5>Bass  <!5>";
X   trebleLabel	= "</5>Treble<!5>";
X
X   /* Create the histogram objects.	*/
X   volume	= newCDKHistogram (cdkscreen, 10, 10, LEFT, 1, 20, HORIZONTAL, volumeLabel, TRUE, FALSE);
X   if (volume == (CDKHISTOGRAM *)NULL)
X   {
X      /* Exit CDK.			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X      
X      /* Print out a message and exit.	*/
X      printf ("Oops. Can not make volume histogram. Is the window big enough??\n");
X      exit (1);
X   }
X
X   bass		= newCDKHistogram (cdkscreen, 10, 12, LEFT, 1, 20, HORIZONTAL, bassLabel, TRUE, FALSE);
X   if (bass == (CDKHISTOGRAM *)NULL)
X   {
X      /* Exit CDK.			*/
X      destroyCDKHistogram (volume);
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.	*/
X      printf ("Oops. Can not make bass histogram. Is the window big enough??\n");
X      exit (1);
X   }
X
X   treble	= newCDKHistogram (cdkscreen, 10, 14, LEFT, 1, 20, HORIZONTAL, trebleLabel, TRUE, FALSE);
X   if (treble == (CDKHISTOGRAM *)NULL)
X   {
X      /* Exit CDK.			*/
X      destroyCDKHistogram (volume);
X      destroyCDKHistogram (bass);
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.	*/
X      printf ("Oops. Can not make treble histogram. Is the window big enough??\n");
X      exit (1);
X   }
X
X   /* Set the histogram values.		*/
X   setCDKHistogram (volume, vPERCENT, CENTER, A_BOLD, 0, 10, 6, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (bass  , vPERCENT, CENTER, A_BOLD, 0, 10, 3, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (treble, vPERCENT, CENTER, A_BOLD, 0, 10, 7, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   refreshCDKScreen (cdkscreen);
X   sleep (4);
X
X   /* Set the histogram values.		*/
X   setCDKHistogram (volume, vPERCENT, CENTER, A_BOLD, 0, 10, 8, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (bass  , vPERCENT, CENTER, A_BOLD, 0, 10, 1, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (treble, vPERCENT, CENTER, A_BOLD, 0, 10, 9, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   refreshCDKScreen (cdkscreen);
X   sleep (4);
X
X   /* Set the histogram values.		*/
X   setCDKHistogram (volume, vPERCENT, CENTER, A_BOLD, 0, 10, 10, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (bass  , vPERCENT, CENTER, A_BOLD, 0, 10, 7, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (treble, vPERCENT, CENTER, A_BOLD, 0, 10, 10, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   refreshCDKScreen (cdkscreen);
X   sleep (4);
X
X   /* Set the histogram values.		*/
X   setCDKHistogram (volume, vPERCENT, CENTER, A_BOLD, 0, 10, 1, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (bass  , vPERCENT, CENTER, A_BOLD, 0, 10, 8, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (treble, vPERCENT, CENTER, A_BOLD, 0, 10, 3, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   refreshCDKScreen (cdkscreen);
X   sleep (4);
X
X   /* Set the histogram values.		*/
X   setCDKHistogram (volume, vPERCENT, CENTER, A_BOLD, 0, 10, 3, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (bass  , vPERCENT, CENTER, A_BOLD, 0, 10, 3, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   setCDKHistogram (treble, vPERCENT, CENTER, A_BOLD, 0, 10, 3, ' '|A_REVERSE|COLOR_PAIR(3), BOX);
X   refreshCDKScreen (cdkscreen);
X   sleep (4);
X
X   /* Clean up.				*/
X   destroyCDKHistogram (volume);
X   destroyCDKHistogram (bass);
X   destroyCDKHistogram (treble);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X   exit (0);
X}
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/histogram_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/histogram_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/histogram_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/histogram_ex.c'`"
  test 3870 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/histogram_ex.c: original size 3870, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/examples/itemlist_ex.c ==============
if test -f 'cdk-4.6.0/examples/itemlist_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/itemlist_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/itemlist_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/itemlist_ex.c' &&
X#include "cdk.h"
X
Xvoid main()
X{
X   /* Declare vars			*/
X   CDKSCREEN	*cdkscreen;
X   CDKITEMLIST	*monthlist;
X   WINDOW	*cursesWin;
X   char		*label;
X   char		*info[MAXITEMS];
X   int		choice;
X
X   /* Set up CDK 			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen( cursesWin );
X
X   /* Start CDK colors.			*/
X   initCDKColor();
X
X   /* Create the choice list.		*/
X   info[0]	= "<C></5>January";
X   info[1]	= "<C></5>Feburary";
X   info[2]	= "<C></5>March";
X   info[3]	= "<C></5>April";
X   info[4]	= "<C></5>May";
X   info[5]	= "<C></5>June";
X   info[6]	= "<C></5>July";
X   info[7]	= "<C></5>August";
X   info[8]	= "<C></5>September";
X   info[9]	= "<C></5>October";
X   info[10]	= "<C></5>November";
X   info[11]	= "<C></5>December";
X
X   /* Declare the labels.		*/
X   label	= "</U/5>Pick a Month:<!U!5>";
X   monthlist	= newCDKItemlist (
X			cdkscreen,
X			CENTER, CENTER, LEFT,
X			label, info, 12, 5, TRUE, FALSE);
X
X   /* Is the widget NULL??		*/
X   if (monthlist == (CDKITEMLIST *)NULL)
X   {
X      /* Clean up			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a little message.	*/
X      printf ("Oops. Can't seem to create the entry box. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Draw the CDK screen.		*/
X   refreshCDKScreen (cdkscreen);
X
X   /* Activate the widget.		*/
X   choice = activateCDKItemlist (monthlist);
X
X   /* Clean up.				*/
X   destroyCDKItemlist (monthlist);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X 
X   /* Spit out what the user typed.	*/
X   printf ("You picked choice #%d which is %s\n", choice, info[choice]);
X   exit (0);
X}
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/itemlist_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/itemlist_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/itemlist_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/itemlist_ex.c'`"
  test 1610 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/itemlist_ex.c: original size 1610, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/examples/label_ex.c ==============
if test -f 'cdk-4.6.0/examples/label_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/label_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/label_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/label_ex.c' &&
X#include "cdk.h"
X
Xvoid main()
X{
X   /* Declare variables.	*/
X   CDKSCREEN	*cdkscreen;
X   CDKLABEL	*demo;
X   WINDOW 	*cursesWin;
X   char		*mesg[4];
X
X   /* Set up CDK 		*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen( cursesWin );
X
X   /* Start CDK Colors		*/
X   initCDKColor();
X
X   /* Set the labels up.	*/
X   mesg[0] = "</1/B>This line should have a yellow foreground and a blue background.";
X   mesg[1] = "</2/B>This line should have a white  foreground and a blue background.";
X   mesg[2] = "</3/B>This line should have a yellow foreground and a red  background.";
X   mesg[3] = "<C>This line should be set to whatever the screen default is.";
X
X   /* Declare the labels.	*/
X   demo	= newCDKLabel (cdkscreen, CENTER, CENTER, mesg, 4, TRUE, TRUE);
X
X   /* Is the label NULL???	*/
X   if ( demo == (CDKLABEL *)NULL)
X   {
X      /* Clean up the memory.	*/
X      destroyCDKScreen (cdkscreen);
X
X      /* End curses...		*/
X      endCDK();
X
X      /* Spit out a message.	*/
X      printf ("Oops. Can't seem to create the label. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Draw the CDK screen.	*/
X   refreshCDKScreen ( cdkscreen );
X   waitCDKLabel (demo, ' ');
X
X   /* Clean up			*/
X   destroyCDKLabel (demo);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X   exit (0);
X}
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/label_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/label_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/label_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/label_ex.c'`"
  test 1303 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/label_ex.c: original size 1303, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/examples/marquee_ex.c ==============
if test -f 'cdk-4.6.0/examples/marquee_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/marquee_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/marquee_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/marquee_ex.c' &&
X#include "cdk.h"
X
Xvoid main()
X{
X   /* Declare vars			*/
X   CDKSCREEN	*cdkscreen;
X   CDKMARQUEE	*testmarquee;
X   WINDOW	*cursesWin;
X   char 	*message;
X   int delay	= 5;
X   int repeat	= 3;
X
X   /* Set up CDK			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen ( cursesWin );
X
X   /* Start CDK Colors			*/
X   initCDKColor();
X
X   /* Create the marquee.		*/
X   testmarquee	= newCDKMarquee (cdkscreen, CENTER, TOP, 30, FALSE);
X
X   /* Check if the marquee is NULL.	*/
X   if (testmarquee == (CDKMARQUEE *)NULL)
X   {
X      /* Exit Cdk.			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message.		*/
X      printf ("Oops. Can't seem to create the marquee window. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Draw the CDK screen.		*/
X   refreshCDKScreen (cdkscreen);
X
X   /* Run the marquee.			*/
X   message	= "</5>Hi Mike. </B>How are you?<!B> </K>This should be blinking...<!K> ";
X   activateCDKMarquee (testmarquee, message, delay, repeat, TRUE);
X
X   /* Clean up.				*/
X   destroyCDKMarquee (testmarquee);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X   exit (0);
X}
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/marquee_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/marquee_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/marquee_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/marquee_ex.c'`"
  test 1129 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/marquee_ex.c: original size 1129, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/examples/matrix_ex.c ==============
if test -f 'cdk-4.6.0/examples/matrix_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/matrix_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/matrix_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/matrix_ex.c' &&
X#include "cdk.h"
X
Xvoid main()
X{
X   /* Declare vars	*/
X   CDKSCREEN	*cdkscreen;
X   CDKMATRIX	*testmatrix;
X   WINDOW	*cursesWin;
X   int		colwidth[10];
X   int		colvalue[10];
X   char		*coltitle[10];
X   char		*rowtitle[10];
X
X   int rows = 8;
X   int cols = 5;
X   int vrows = 3;
X   int vcols = 5;
X   int x, y;
X
X   /* Set up CDK */ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen ( cursesWin );
X
X   /* Start CDK Colors.		*/
X   initCDKColor();
X
X   /* Set up the matrix	*/
X   coltitle[1] = "</B/5>Course";   colwidth[1] = 7 ; colvalue[1] = vUMIXED;
X   coltitle[2] = "</B/44>Lec 1";    colwidth[2] = 7 ; colvalue[2] = vUMIXED;
X   coltitle[3] = "</B/44>Lec 2";    colwidth[3] = 7 ; colvalue[3] = vUMIXED;
X   coltitle[4] = "</B/44>Lec 3";    colwidth[4] = 7 ; colvalue[4] = vUMIXED;
X   coltitle[5] = "</B/7>Flag";     colwidth[5] = 1 ; colvalue[5] = vUMIXED;
X   rowtitle[1] = "</B/6>Course 1"; rowtitle[2] = "<C></B/6>Course 2";
X   rowtitle[3] = "</B/6>Course 3"; rowtitle[4] = "<L></B/6>Course 4";
X   rowtitle[5] = "</B/6>Course 5"; rowtitle[6] = "<R></B/6>Course 6"; 
X   rowtitle[7] = "</B/6>Course 7"; rowtitle[8] = "<R></B/6>Course 8"; 
X
X   /* Create the matrix object.	*/
X   testmatrix = newCDKMatrix (cdkscreen,
X					CENTER, CENTER,
X					rows, cols, vrows, vcols,
X					rowtitle, coltitle,
X					colwidth, colvalue, 
X					1, 1, '.',
X					COL, &CDKMatrixCallBack,
X					TRUE, TRUE, TRUE);
X
X   /* Check to see if the matrix is NULL.	*/
X   if ( testmatrix == (CDKMATRIX *)NULL )
X   {
X      /* Clean up.				*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X 
X      /* Print out a little message.		*/
X      printf ("Oops. Can't seem to create the entry box. Is the window too small ?\n");
X      exit (1);
X   }
X
X   /* Activate the matrix.	*/
X   activateCDKMatrix (testmatrix);
X
X   /* Spit out the info.	*/
X   printf ("\n\n\n");
X   for (x=1; x <= rows; x++)
X   {
X      for (y=1; y <= cols; y++)
X      {
X         printf ("(%d,%d) = '%s'\t", x, y, testmatrix->info[x][y]);
X      }
X      printf ("\n");
X   }
X
X   /* Clean up.			*/
X   destroyCDKMatrix (testmatrix);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X   exit (0);
X}
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/matrix_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/matrix_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/matrix_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/matrix_ex.c'`"
  test 2141 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/matrix_ex.c: original size 2141, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/examples/mentry_ex.c ==============
if test -f 'cdk-4.6.0/examples/mentry_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/mentry_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/mentry_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/mentry_ex.c' &&
X#include "cdk.h"
X
Xvoid main()
X{
X   /* Declare variables.	*/
X   CDKSCREEN	*cdkscreen;
X   CDKMENTRY	*filename;
X   WINDOW	*cursesWin;
X   char		*info;
X   char		*label	= "</5>Filename:<!5>";
X
X   /* Set up CDK 		*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen ( cursesWin );
X
X   /* Start CDK Colors.		*/
X   initCDKColor();
X
X   /* Set up the multi-line entry field.	*/
X   filename	= newCDKMentry (cdkscreen, CENTER, CENTER, LEFT, label, A_BOLD, '.', vMIXED, 20, 5, 20, 0, &CDKMentryCallBack, TRUE, FALSE);
X
X   /* Is the object NULL?	*/
X   if ( filename == (CDKMENTRY *)NULL)
X   {
X      /* Shut down CDK.		*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message.	*/
X      printf ("Oops. Can not create CDK object. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Draw the CDK screen.	*/
X   refreshCDKScreen ( cdkscreen );
X
X   /* Activate this thing.	*/
X   activateCDKMentry (filename);
X   info	= strdup (filename->info);
X
X   /* Clean up.	*/
X   destroyCDKMentry (filename);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X
X   /* Spit out the results.	*/
X   printf ("\n\n\n");
X   printf ("Filename : <%s>\n", info);
X   free(info);
X   exit (0);
X}
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/mentry_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/mentry_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/mentry_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/mentry_ex.c'`"
  test 1206 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/mentry_ex.c: original size 1206, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/examples/menu_ex.c ==============
if test -f 'cdk-4.6.0/examples/menu_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/menu_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/menu_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/menu_ex.c' &&
X#include "cdk.h"
X
Xvoid main()
X{
X   /* Declare vars		*/
X   CDKSCREEN	*cdkscreen;
X   CDKMENU	*testobj;
X   WINDOW	*cursesWin;
X   int		submenusize[3], menuloc[4];
X   int		selection;
X   char		*menulist[MAXMENUITEMS][MAXSUBITEMS];
X
X   /* Set up CDK 		*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen ( cursesWin );
X
X   /* Start CDK color.		*/
X   initCDKColor();
X
X   /* Set up the menu.		*/
X   menulist[0][0] = "</5>File" ; menulist[1][0] = "</5>Edit";  menulist[2][0] = "</5>Help";
X   menulist[0][1] = "</5>Save" ; menulist[1][1] = "</5>Cut  "; menulist[2][1] = "</5>On Edit ";
X   menulist[0][2] = "</5>Exit" ; menulist[1][2] = "</5>Copy "; menulist[2][2] = "</5>On File ";
X                                 menulist[1][3] = "</5>Paste"; menulist[2][3] = "</5>About...";
X   submenusize[0] = 3;	menuloc[0] = LEFT;
X   submenusize[1] = 4;	menuloc[1] = LEFT;
X   submenusize[2] = 4;	menuloc[2] = RIGHT;
X
X   /* Create the menu.		*/
X   testobj 	= newCDKMenu (cdkscreen, menulist, 3, submenusize, menuloc, COLOR_PAIR(9), COLOR_PAIR(44));
X   
X   /* Draw the CDK screen.	*/
X   refreshCDKScreen (cdkscreen);
X    
X   /* Activate the menu		*/
X   selection	= activateCDKMenu (testobj);
X
X   /* Clean up.	*/
X   destroyCDKMenu (testobj);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X
X   /* Print out the results.	*/
X   if (selection == -1) 
X   {
X      printf ("\n\n\n");
X      printf ("Item Number Selected : %d\n", selection);
X      printf ("This means you escaped without selecting anything.\n");
X   }
X   else
X   {
X      printf ("\n\n\n");
X      printf ("Item Number Selected : %d\n", selection);
X   }
X   exit (0);
X}
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/menu_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/menu_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/menu_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/menu_ex.c'`"
  test 1629 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/menu_ex.c: original size 1629, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/examples/radio_ex.c ==============
if test -f 'cdk-4.6.0/examples/radio_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/radio_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/radio_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/radio_ex.c' &&
X#include "cdk.h"
X
Xvoid main()
X{
X   /* Declare vars			*/
X   CDKSCREEN	*cdkscreen;
X   CDKRADIO	*tester;
X   WINDOW	*cursesWin;
X   char		*item[30], *title;
X   char		temp[100];
X   int		selection;
X
X   /* Set up CDK 			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen ( cursesWin );
X
X   /* Set up CDK Colors.		*/
X   initCDKColor();
X
X   /* Set up the scrolling list		*/
X   sprintf (temp, "<L></40/B>This is item #0<!40>"); item[0] = copyChar (temp);
X   sprintf (temp, "<C></41/B>This is item #1<!41>"); item[1] = copyChar (temp);
X   sprintf (temp, "<R></42/B>This is item #2<!42>"); item[2] = copyChar (temp);
X   sprintf (temp, "<C></43/B>This is item #3<!43>"); item[3] = copyChar (temp);
X   sprintf (temp, "<L></44/B>This is item #4<!44>"); item[4] = copyChar (temp);
X   sprintf (temp, "<C></45/B>This is item #5<!45>"); item[5] = copyChar (temp);
X   sprintf (temp, "<R></46/B>This is item #6<!46>"); item[6] = copyChar (temp);
X   sprintf (temp, "<C></47/B>This is item #7<!47>"); item[7] = copyChar (temp);
X   sprintf (temp, "<L></48/B>This is item #8<!48>"); item[8] = copyChar (temp);
X   sprintf (temp, "<C></49/B>This is item #9<!49>"); item[9] = copyChar (temp);
X
X   /* Create the scrolling list		*/
X   title	= "<C></5>Radio List<!5>";
X   tester	= newCDKRadio (cdkscreen, CENTER, CENTER, 10, 20,
X				title, item, 10,
X				'#'|A_REVERSE, 1,
X				COLOR_PAIR(5), TRUE, FALSE);
X
X   /* Check if the radio list is NULL.	*/
X   if (tester == (CDKRADIO *)NULL)
X   {
X      /* Exit CDK.			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.	*/
X      printf ("Ooops. Can't seem to create the raiod widget. Is the window too small??\n");
X      exit (1);
X   }
X
X   /* Activate the radio list.		*/
X   selection	= activateCDKRadio (tester);
X
X   /* Clean up.				*/
X   destroyCDKRadio (tester);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X
X   /* Spit out the info.		*/
X   printf ("\n\n\n");
X   printf ("Selection Number: %d\n", selection);
X   exit (0);
X}
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/radio_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/radio_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/radio_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/radio_ex.c'`"
  test 2011 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/radio_ex.c: original size 2011, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/examples/scale_ex.c ==============
if test -f 'cdk-4.6.0/examples/scale_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/scale_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/scale_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/scale_ex.c' &&
X#include "cdk.h"
X
Xvoid main()
X{
X   /* Declare vars		*/
X   CDKSCREEN	*cdkscreen;
X   CDKSCALE	*testscale;
X   WINDOW	*cursesWin;
X   int		selection;
X   char *label;
X
X   /* Set up CDK		 */ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen ( cursesWin );
X
X   /* Start CDK Colors.		*/
X   initCDKColor();
X
X   /* Create the scale.		*/
X   label	= "</5>Scale Label:";
X   testscale	= newCDKScale (cdkscreen, CENTER, CENTER, CENTER, label, A_NORMAL, 5, 1, 1, 5, 1, 1, TRUE, FALSE);
X
X   /* Is the scale NULL?	*/
X   if (testscale == (CDKSCALE *)NULL)
X   {
X      /* Exit CDK.		*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X      
X      /* Print out a message.	*/
X      printf ("Oops. Can't make the scale widget. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Draw the CDK screen.	*/
X   refreshCDKScreen ( cdkscreen );
X
X   /* Activate the scale.	*/
X   selection	= activateCDKScale (testscale);
X
X   /* Clean up.	*/
X   destroyCDKScale (testscale);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X
X   /* Spit out the info.	*/
X   printf ("\n\n\n");
X   printf ("Selection: %d\n", selection);
X   exit (0);
X}
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/scale_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/scale_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/scale_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/scale_ex.c'`"
  test 1133 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/scale_ex.c: original size 1133, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/examples/scroll_ex.c ==============
if test -f 'cdk-4.6.0/examples/scroll_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/scroll_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/scroll_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/scroll_ex.c' &&
X#include "cdk.h"
X
Xvoid main()
X{
X   /* Declare vars			*/
X   CDKSCREEN	*cdkscreen;
X   CDKSCROLL	*tester;
X   WINDOW	*cursesWin;
X   char		*item[30], *title;
X   char		temp[100];
X   int		selection;
X
X   /* Set up CDK 			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen ( cursesWin );
X
X   /* Set up CDK Colors.		*/
X   initCDKColor();
X
X   /* Set up the scrolling list		*/
X   sprintf (temp, "<L></40/B>This is item #0<!40>"); item[0] = copyChar (temp);
X   sprintf (temp, "<C></41/B>This is item #1<!41>"); item[1] = copyChar (temp);
X   sprintf (temp, "<R></42/B>This is item #2<!42>"); item[2] = copyChar (temp);
X   sprintf (temp, "<C></43/B>This is item #3<!43>"); item[3] = copyChar (temp);
X   sprintf (temp, "<L></44/B>This is item #4<!44>"); item[4] = copyChar (temp);
X   sprintf (temp, "<C></45/B>This is item #5<!45>"); item[5] = copyChar (temp);
X   sprintf (temp, "<R></46/B>This is item #6<!46>"); item[6] = copyChar (temp);
X   sprintf (temp, "<C></47/B>This is item #7<!47>"); item[7] = copyChar (temp);
X   sprintf (temp, "<L></48/B>This is item #8<!48>"); item[8] = copyChar (temp);
X   sprintf (temp, "<C></49/B>This is item #9<!49>"); item[9] = copyChar (temp);
X
X   /* Create the scrolling list		*/
X   title	= "<C></5>Scrolling List<!5>";
X   tester	= newCDKScroll (cdkscreen, CENTER, CENTER, 10, 50, title,
X				item, 10, NONUMBERS, A_BLINK, TRUE, FALSE);
X
X   /* Is the scrolling list NULL??	*/
X   if (tester == (CDKSCROLL *)NULL)
X   {
X      /* Exit CDK.			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X      
X      /* Print out a message and exit.	*/
X      printf ("Oops. Could not make scrolling list. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Activate the scrolling list.	*/
X   selection	= activateCDKScroll (tester);
X
X   /* Clean up.				*/
X   destroyCDKScroll (tester);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X
X   /* Spit out the info.		*/
X   printf ("\n\n\n");
X   printf ("Selection Number: %d\n", selection);
X   exit (0);
X}
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/scroll_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/scroll_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/scroll_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/scroll_ex.c'`"
  test 1994 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/scroll_ex.c: original size 1994, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/examples/selection_ex.c ==============
if test -f 'cdk-4.6.0/examples/selection_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/selection_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/selection_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/selection_ex.c' &&
X#include "cdk.h"
X
Xvoid main()
X{
X   /* Declare vars			*/
X   CDKSCREEN	*cdkscreen;
X   CDKSELECTION	*tester;
X   WINDOW	*cursesWin;
X   char		*item[30], *choices[5], *title;
X   char		temp[100];
X
X   /* Set up CDK 			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen ( cursesWin );
X
X   /* Set up CDK Colors.		*/
X   initCDKColor();
X
X   /* Set up the scrolling list		*/
X   sprintf (temp, "<L></56/B>This is item #0"); item[0] = copyChar (temp);
X   sprintf (temp, "<C></56/B>This is item #1"); item[1] = copyChar (temp);
X   sprintf (temp, "<R></56/B>This is item #2"); item[2] = copyChar (temp);
X   sprintf (temp, "<C></56/B>This is item #3"); item[3] = copyChar (temp);
X   sprintf (temp, "<L></56/B>This is item #4"); item[4] = copyChar (temp);
X   sprintf (temp, "<C></56/B>This is item #5"); item[5] = copyChar (temp);
X   sprintf (temp, "<R></56/B>This is item #6"); item[6] = copyChar (temp);
X   sprintf (temp, "<C></56/B>This is item #7"); item[7] = copyChar (temp);
X   sprintf (temp, "<L></56/B>This is item #8"); item[8] = copyChar (temp);
X   sprintf (temp, "<C></56/B>This is item #9"); item[9] = copyChar (temp);
X   sprintf (temp, "</5>Yes  "); choices[0]	= copyChar(temp);
X   sprintf (temp, "</2>No   "); choices[1]	= copyChar(temp);
X   sprintf (temp, "</B/4>Maybe"); choices[2]	= copyChar(temp);
X
X   /* Create the selection list		*/
X   title	= "<C></5>Selection List<!5>";
X   tester	= newCDKSelection (cdkscreen, CENTER, CENTER, 10, 50, title, item, 10, choices, 3, A_REVERSE, TRUE, FALSE);
X
X   /* Is the selection list NULL??	*/
X   if (tester == (CDKSELECTION *)NULL)
X   {
X      /* Exit CDK.			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.	*/
X      printf ("Oops. Can;t seem to create the selection list. Is the window too small?\n");
X      exit (1);
X   }
X
X   /* Activate the selection list.	*/
X   activateCDKSelection (tester);
X
X   /* Clean up.				*/
X   destroyCDKSelection (tester);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X   exit (0);
X}
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/selection_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/selection_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/selection_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/selection_ex.c'`"
  test 2028 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/selection_ex.c: original size 2028, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/examples/swindow_ex.c ==============
if test -f 'cdk-4.6.0/examples/swindow_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/swindow_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/swindow_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/swindow_ex.c' &&
X#include "cdk.h"
X
Xvoid main()
X{
X   /* Declare vars	*/
X   CDKSCREEN	*cdkscreen;
X   CDKSWINDOW	*tester;
X   WINDOW	*cursesWin;
X   char *title;
X   char **loginfo;
X   char temp[100];
X   int length, x;
X
X   /* Set up CDK 			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen ( cursesWin );
X
X   /* Start CDK colors			*/
X   initCDKColor();
X
X   /* Create the scrolling window	*/
X   title	= "<C></5>Error Log<!5>";
X   tester	= newCDKSwindow (cdkscreen, CENTER, CENTER, 6, 65, title, 100, TRUE, FALSE);
X
X   /* Is the window NULL.		*/
X   if (tester == (CDKSWINDOW *)NULL)
X   {
X      /* Exit CDK.			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.	*/
X      printf ("Oops. Can not seem to create the scrolling window. Is the window too small??\n");
X      exit (1);
X   }
X
X   /* Load up the scrolling window.	*/
X   addCDKSwindow (tester, "<C></11>TOP: This is the first line.", BOTTOM);
X   addCDKSwindow (tester, "<C>Sleeping for 1 second.", BOTTOM);
X   sleep (1);
X
X   addCDKSwindow (tester, "<L></11>1: This is another line.", BOTTOM);
X   addCDKSwindow (tester, "<C>Sleeping for 1 second.", BOTTOM);
X   sleep (1);
X
X   addCDKSwindow (tester, "<C></11>2: This is another line.", BOTTOM);
X   addCDKSwindow (tester, "<C>Sleeping for 1 second.", BOTTOM);
X   sleep (1);
X
X   addCDKSwindow (tester, "<R></11>3: This is another line.", BOTTOM);
X   addCDKSwindow (tester, "<C>Sleeping for 1 second.", BOTTOM);
X   sleep (1);
X
X   addCDKSwindow (tester, "<C></11>4: This is another line.", BOTTOM);
X   addCDKSwindow (tester, "<C>Sleeping for 1 second.", BOTTOM);
X   sleep (1);
X
X   addCDKSwindow (tester, "<L></11>5: This is another line.", BOTTOM);
X   addCDKSwindow (tester, "<C>Sleeping for 1 second.", BOTTOM);
X   sleep (1);
X
X   addCDKSwindow (tester, "<C></11>6: This is another line.", BOTTOM);
X   addCDKSwindow (tester, "<C>Sleeping for 1 second.", BOTTOM);
X   sleep (1);
X
X   addCDKSwindow (tester, "<C>Done. You can now play.", BOTTOM);
X
X   addCDKSwindow (tester, "<C>This is being added to the top.", TOP);
X
X   /* Activate the scrolling window.	*/
X   activateCDKSwindow (tester);
X
X   /* Clean up.				*/
X   destroyCDKScreen (cdkscreen);
X   destroyCDKSwindow (tester);
X   delwin (cursesWin);
X   endCDK();
X   exit (0);
X}
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/swindow_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/swindow_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/swindow_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/swindow_ex.c'`"
  test 2250 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/swindow_ex.c: original size 2250, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/examples/template_ex.c ==============
if test -f 'cdk-4.6.0/examples/template_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/template_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/template_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/template_ex.c' &&
X#include "cdk.h"
X
Xvoid main()
X{
X   /* Declare variables.		*/
X   CDKSCREEN	*cdkscreen;
X   CDKTEMPLATE	*codeword;
X   WINDOW	*cursesWin;
X   char		*info;
X   char		*label		= "</5>CODEWORD:<!5>";
X   char 	*overlay	= "</B/6>F_ __ __ __ __ __ _L<!6>";
X   char 	*plate		= "AA CC cc MM XX xx ##";
X
X   /* Set up CDK 			*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen( cursesWin );
X
X   /* Start CDK Colors.			*/
X   initCDKColor();
X
X   /* Declare the template.		*/
X   codeword	= newCDKTemplate (cdkscreen, CENTER, CENTER, LEFT, label, plate, overlay, &CDKTemplateCallBack, TRUE, TRUE);
X
X   /* Is the template pointer NULL	*/
X   if (codeword == (CDKTEMPLATE *)NULL)
X   {
X      /* Exit CDK.			*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.	*/
X      printf ("Oops. Can;'t seem to create template. Is the window too small?");
X      exit (1);
X   }
X
X   /* Draw the CDK screen.		*/
X   refreshCDKScreen ( cdkscreen );
X
X   /* Activate the template 		*/
X   activateCDKTemplate (codeword);
X   info	= strdup (codeword->info);
X   
X   /* Clean up.				*/
X   destroyCDKTemplate (codeword);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X
X   /* Print out the info gathered...    */
X   printf ("\n\n\n");
X   printf ("Code Word: %s\n", info);
X   free (info);
X   exit (0);
X}
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/template_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/template_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/template_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/template_ex.c'`"
  test 1323 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/template_ex.c: original size 1323, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/examples/viewer_ex.c ==============
if test -f 'cdk-4.6.0/examples/viewer_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/viewer_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/viewer_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/viewer_ex.c' &&
X#include "cdk.h"
X
X#define	MAXINFOLINES	10000
X
Xvoid main(int argc, char **argv)
X{
X   /* Declare variables.			*/
X   CDKSCREEN	*cdkscreen;
X   CDKVIEWER	*example;
X   CDKFSELECT	*fileSelector;
X   WINDOW	*cursesWin;
X   char		*filename;
X   char		*info[MAXINFOLINES];
X   char		*button[25];
X   char		title[500];
X   int		selected;
X   int		lines;
X   int		x;
X
X   /* Create the viewer buttons.				*/
X   button[0]	= "</5><<OK>><!5>";
X   button[1]	= "</5><<Maybe>><!5>";
X   button[2]	= "</5><<Maybe Not>><!5>";
X   button[3]	= "</5><<Cancel>><!5>";
X
X   /* Set up CDK 						*/ 
X   cursesWin = initscr();
X   cdkscreen = initCDKScreen ( cursesWin );
X
X   /* Start color.						*/
X   initCDKColor();
X
X   /* Get the filename.						*/
X   fileSelector = newCDKFselect (cdkscreen, CENTER, CENTER, 20, 55,
X			A_NORMAL, '.', COLOR_PAIR(48)|A_REVERSE,
X			"</5>", "</48>", "</N>", "</N>",
X			TRUE, FALSE);
X 
X   /* Activate the file selector.				*/
X   filename = activateCDKFselect (fileSelector);
X
X   /* Create the viewer.					*/
X   example = newCDKViewer (cdkscreen,
X		CENTER, CENTER, 20, 70,
X		button, 1, TRUE, FALSE);
X
X   /* Is the viewer pointer NULL??				*/
X   if (example == (CDKVIEWER *)NULL)
X   {
X      /* Exit CDK.						*/
X      destroyCDKScreen (cdkscreen);
X      endCDK();
X
X      /* Print out a message and exit.				*/
X      printf ("Oops. Can't seem to create viewer. Is the window too small?\n");
X      exit (0);
X   }
X
X   /* Set up the info.						*/
X   lines = readFile (filename, info, MAXINFOLINES);
X   if (lines == 0)
X   {
X      printf ("Could not open %s\n", filename);
X      exit (1);
X   }
X
X   /* Make it run...						*/
X   sprintf (title, "<C></B/21>Filename:<!21></22>%20s<!22!B>", filename);
X   selected = activateCDKViewer (example, title, info, lines,
X		COLOR_PAIR(21)|A_REVERSE, TRUE, TRUE);
X
X   /* Clean up.							*/
X   destroyCDKViewer (example);
X   destroyCDKFselect (fileSelector);
X   destroyCDKScreen (cdkscreen);
X   delwin (cursesWin);
X   endCDK();
X   for (x=0; x < lines; x++)
X   {
X      freeChar (info[x]);
X   }
X
X   /* Spit out some info.					*/
X   printf ("\n\n\n\n");
X   printf ("You picked button %d\n", selected);
X}
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/viewer_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/viewer_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/viewer_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/viewer_ex.c'`"
  test 2121 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/viewer_ex.c: original size 2121, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/examples/subwindow_ex.c ==============
if test -f 'cdk-4.6.0/examples/subwindow_ex.c' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/examples/subwindow_ex.c (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/examples/subwindow_ex.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/examples/subwindow_ex.c' &&
X#include "cdk.h"
X
Xvoid main()
X{
X   /* Declare vars			*/
X   CDKSCREEN	*cdkscreen;
X   CDKSCROLL	*dowList;
X   CDKENTRY	*directory;
X   WINDOW	*cursWindow;
X   char		*dow[] = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
X   char		*file;
X   int 		pick;
X
X   /* Start curses.			*/
X   initscr();
X
X   /* Create a basic window.		*/
X   cursWindow = newwin (15, 40, 5, 5);
X  
X   /* Start Cdk.			*/
X   cdkscreen = initCDKScreen (cursWindow);
X
X   /* Box our window.			*/
X   box (cursWindow, ACS_VLINE, ACS_HLINE);
X   wrefresh (cursWindow);
X
X   /* Create a basic scrolling list inside the window.	*/
X   dowList = newCDKScroll (cdkscreen, CENTER, CENTER, 10, 15,
X			"</U>Pick a Day", dow, 7, NONUMBERS, A_REVERSE,
X			TRUE, FALSE);
X
X   /* Create a basic entry field.			*/
X   directory = newCDKEntry (cdkscreen, CENTER, BOTTOM, LEFT, "Directory",
X			A_REVERSE, '.', vMIXED, 10, 0, 256, &CDKEntryCallBack,
X			TRUE, FALSE);
X
X   if (dowList == (CDKSCROLL *)NULL)
X   {
X      endwin();
X      printf ("\nScrolling list is NULL\n");
X   }
X
X   /* Start an infinite loop.	*/
X   for (;;)
X   {
X      refreshCDKScreen (cdkscreen);
X
X      pick = activateCDKScroll (dowList);
X      file = activateCDKEntry (directory);
X   }
X}
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/examples/subwindow_ex.c' &&
  chmod 0400 'cdk-4.6.0/examples/subwindow_ex.c' ||
  echo 'restore of cdk-4.6.0/examples/subwindow_ex.c failed'
  shar_count="`wc -c < 'cdk-4.6.0/examples/subwindow_ex.c'`"
  test 1225 -eq "$shar_count" ||
    echo "cdk-4.6.0/examples/subwindow_ex.c: original size 1225, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/man/dialog.3x ==============
if test ! -d 'cdk-4.6.0/man'; then
  echo 'x - creating directory cdk-4.6.0/man'
  mkdir 'cdk-4.6.0/man'
fi
if test -f 'cdk-4.6.0/man/dialog.3x' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/man/dialog.3x (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/man/dialog.3x (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/man/dialog.3x' &&
X.de It
X.br
X.ie \\n(.$>=3 .ne \\$3
X.el .ne 3
X.IP "\\$1" \\$2
X..
X.TH cdk_dialog 3X "05 Dec 1995"
X.SH NAME
XnewCDKDialog, activateCDKDialog, setCDKDialog, drawCDKDialog, eraseCDKDialog, 
XdestroyCDKDialog \- Creates a managed curses dialog widget.
X.SH SYNOPSIS
X.LP
X.B cc
X.RI "[ " "flag" " \|.\|.\|. ] " "file" " \|.\|.\|."
X.B \-lcdk
X.RI "[ " "library" " \|.\|.\|. ]"
X.LP
X#include <cdk.h>
X.LP
X.BI "CDKDIALOG *newCDKDialog (CDKSCREEN *" "cdkscreen",
X.BI "int " "xpos",
X.BI "int " "ypos",
X.BI "char ** " "message" ,
X.BI "int " "rows",
X.BI "char ** " "buttons" ,
X.BI "int " "buttonCount",
X.BI "chtype " "highlight" ,
X.BI "boolean " "separator",
X.BI "boolean " "box",
X.BI "boolean " "shadow");
X.LP
X.BI "int activateCDKDialog (CDKDIALOG *" "dialog");
X.LP
X.BI "void setCDKDialog (CDKDIALOG *" "dialog",
X.BI "chtype " "highlight",
X.BI "boolean " "separator",
X.BI "boolean " "box");
X.LP
X.BI "void drawCDKDialog (CDKDIALOG *" "dialog",
X.BI "boolean " "box");
X.LP
X.BI "void eraseCDKDialog (CDKDIALOG *" "dialog");
X.LP
X.BI "void destroyCDKDialog (CDKDIALOG *" "dialog");
X.LP
X.BI "void bindCDKObject (EObjectType " "widgetType",
X.BI "void *" "object",
X.BI "chtype " "key",
X.BI "BINDFN " "function",
X.BI "void *" "data");
X.SH DESCRIPTION
XThe Cdk dialog widget creates a dialog box with a message and a varied number of
Xbuttons to choose from. The following are functions which create or manipulate
Xthe Cdk dialog box widget.
X.IP "CDKDIALOG *newCDKDialog (\f2screen\f1, \f2xpos\f1, \f2ypos\f1, \f2message\f1, \f2rows\f1, \f2buttons\f1, \f2buttonCount\f1, \f2highLight\f1, \f2separator\f1, \f2box\f1, \f2shadow\f1);" 3
XThis function call creates a pointer to a dialog widget. The parameter
X\f2screen\f1 is of type CDKSCREEN. The parameter \f2xpos\f1 controls the placement
Xof the object along the horizontal axis; which means it can take an integer value
Xor the predefined values of \f4LEFT\f1, \f4RIGHT\f1, and \f4CENTER\f1. The
Xparameter \f2ypos\f1 controls the placement of the object along the vertical
Xaxis which means it can accept an integer value or a predefined value of 
X\f4TOP\f1, \f4BOTTOM\f1, and \f4CENTER\f1. 
XThe parameter \f2message\f1 is a \f4char **\f1 to be displayed in the message region
Xof the dialog box. The \f2rows\f1 parameter states how many elements there are
Xin the \f2message\f1. The \f2buttons\f1 array contains a list of all
Xthe buttons to be displayed on the dialog box; while \f2buttonCount\f1 is the
Xnumber of elements in the \f2button\f1 array. \f2highlight\f1 is the attribute
Xof the currently highlighted button. The \f2box\f1 parameter states whether the
Xwidget will be drawn with a box around it or not. \f2separator\f1 states
Xwhether a separator line will be drawn between the message region and the 
Xbuttons. The \f2shadow\f1 parameter accepts a boolean value to turn the shadow
Xon or off around this widget. If the widget could not be created then a NULL
Xpointer is returned.
X.IP "int activateCDKDialog (\f2dialog\f1);" 3
XThis function activates the dialog widget and lets the user interact with the
Xwidget. The only parameter this function requires is the \f2dialog\f1 widget
Xpointer. This function returns an integer value which has a range of 0 to
Xthe number of buttons -1.
X.IP "void setCDKDialog (\f2dialog\f1, \f2highlight\f1, \f2separator\f1, \f2box\f1);" 3
XThis function lets the programmer modify certain elements of an already defined
Xdialog widget. The parameter names correspond to the same parameter names listed
Xin the \f2newCDKDialog\f1 function.
X.IP "void drawCDKDialog(\f2dialog\f1, \f2box\f1);" 3
XThis function draws the dialog widget on the screen. The \f2box\f1 option 
Xdraws the widget with or without a box.
X.IP "void eraseCDKDialog (\f2dialog\f1);" 3
XThis function removes the widget from the screen. This does \f4NOT\f1 destroy
Xthe widget.
X.IP "void destroyCDKDialog (\f2dialog\f1);" 3
XThis function removes the widget from the screen and frees up any memory the
Xobject may be using.
X.IP "void bindCDKObject (\f2widgetType\f1, \f2object\f1, \f2key\f1, \f2function\f1, \f2data\f1);" 3
XThis function allows the user to create special key bindings. The \f2widgetType\f1
Xparameter is a defined type which states what Cdk object type is being used.
XTo learn more about the type \f4EObjectType\f1 read the \f4cdk_binding\f1 manual
Xpage. The \f2object\f1 parameter is the pointer to the widget object. The
X\f2key\f1 is the character to bind. The \f2function\f1 is the function type. To
Xlearn more about the key binding callback function types read the \f2cdk_binding\f1
Xmanual page. The last parameter \f2data\f1 is a pointer to any data that needs
Xto get passed to the callback function.
X.SH KEY BINDINGS
XWhen the widget is activated there are several default key bindings which will
Xhelp the user enter or manipulate the information quickly. The following table
Xoutlines the keys and their actions for this widget.
X.LP
X.nf
X\f2Key          Action\f1
XLeft Arrow   Selects the button to the left of the current button.
XRight Arrow  Selects the button to the right of the current button.
XTab          Selects the button to the left of the current button.
XSpace        Selects the button to the left of the current button.
XReturn       Exits the widget and returns an integer value
X             representing which button was selected.
XCtrl-N       Exits the widget and returns an integer value
X             representing which button was selected.
XCtrl-R       Refreshes the screen.
X.fi
X.SH SEE ALSO
X.BR cdk (3X),
X.BR cdk_screen (3X),
X.BR cdk_display (3X),
X.BR cdk_binding (3X)
X.SH NOTES
X.PP
XThe header file \f4<cdk.h>\f1 automatically includes the header files
X\f4<curses.h>\f1, \f4<stdlib.h>\f1, \f4<string.h>\f1, \f4<ctype.h>\f1,
X\f4<unistd.h>\f1, \f4<dirent.h>\f1, \f4<time.h>\f1, \f4<errno.h>\f1,
X\f4<pwd.h>\f1, \f4<grp.h>\f1, \f4<sys/stat.h>\f1, and \f4<sys/types.h>\f1.
XThe \f4<curses.h>\f1 header file includes \f4<stdio.h>\f1 and \f4<unctrl.h>\f1.
X.PP
XIf you have \f4ncurses\f1 installed on your machine add -DNCURSES to the 
Xcompile line to include the ncurses header files instead.
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/man/dialog.3x' &&
  chmod 0400 'cdk-4.6.0/man/dialog.3x' ||
  echo 'restore of cdk-4.6.0/man/dialog.3x failed'
  shar_count="`wc -c < 'cdk-4.6.0/man/dialog.3x'`"
  test 6028 -eq "$shar_count" ||
    echo "cdk-4.6.0/man/dialog.3x: original size 6028, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/man/draw.3x ==============
if test -f 'cdk-4.6.0/man/draw.3x' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/man/draw.3x (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/man/draw.3x (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/man/draw.3x' &&
X.de It
X.br
X.ie \\n(.$>=3 .ne \\$3
X.el .ne 3
X.IP "\\$1" \\$2
X..
X.TH cdk_draw 3X "05 Dec 1995"
X.SH NAME
X   Cdk - \f2Curses Development Kit\f1 Drawing Routines
X.LP
X.SH SYNOPSIS
X.LP
X.B cc
X.RI "[ " "flag" " \|.\|.\|. ] " "file" " \|.\|.\|."
X.B \-lcdk
X.RI "[ " "library" " \|.\|.\|. ]"
X.LP
X#include <cdk.h>
X.LP
X\f4UNDER CONSTRUCTION\f1
X.SH DESCRIPTION
X.SH SEE ALSO
X.BR cdk (3X),
X.BR cdk_screen (3X),
X.BR cdk_display (3X),
X.BR cdk_binding (3X)
X.SH NOTES
X.PP
XThe header file \f4<cdk.h>\f1 automatically includes the header files
X\f4<curses.h>\f1, \f4<stdlib.h>\f1, \f4<string.h>\f1, \f4<ctype.h>\f1,
X\f4<unistd.h>\f1, \f4<dirent.h>\f1, \f4<time.h>\f1, \f4<errno.h>\f1,
X\f4<pwd.h>\f1, \f4<grp.h>\f1, \f4<sys/stat.h>\f1, and \f4<sys/types.h>\f1.
XThe \f4<curses.h>\f1 header file includes \f4<stdio.h>\f1 and \f4<unctrl.h>\f1.
X.PP
XIf you have \f4ncurses\f1 installed on your machine add -DNCURSES to the 
Xcompile line to include the ncurses header files instead.
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/man/draw.3x' &&
  chmod 0400 'cdk-4.6.0/man/draw.3x' ||
  echo 'restore of cdk-4.6.0/man/draw.3x failed'
  shar_count="`wc -c < 'cdk-4.6.0/man/draw.3x'`"
  test 952 -eq "$shar_count" ||
    echo "cdk-4.6.0/man/draw.3x: original size 952, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/man/entry.3x ==============
if test -f 'cdk-4.6.0/man/entry.3x' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/man/entry.3x (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/man/entry.3x (binary)'
  sed 's/^X//' << 'SHAR_EOF' > _sharuue.tmp &&
Xbegin 600 cdk-4.6.0/man/entry.3x
XM+F1E($ET"BYB<@HN:64@7%QN*"XD/CTS("YN92!<7"0S"BYE;"`N;F4@,PHN
XM25`@(EQ<)#$B(%Q<)#(*+BX*+E1((&-D:U]E;G1R>2`S6"`B,#4@1&5C(#$Y
XM.34B"BY32"!.04U%"FYE=T-$2T5N=')Y+"!A8W1I=F%T94-$2T5N=')Y+"!S
XM971#1$M%;G1R>2P@9')A=T-$2T5N=')Y+"!E<F%S94-$2T5N=')Y+"`*8VQE
XM86Y#1$M%;G1R>2P@9&5S=')O>4-$2T5N=')Y(%PM($-R96%T97,@82!M86YA
XM9V5D(&-U<G-E<R!E;G1R>2!W:61G970N"BY32"!364Y/4%-)4PHN3%`*+D(@
XM8V,*+E))(");("(@(F9L86<B("(@7'PN7'PN7'PN(%T@(B`B9FEL92(@(B!<
XM?"Y<?"Y<?"XB"BY"(%PM;&-D:PHN4DD@(EL@(B`B;&EB<F%R>2(@(B!<?"Y<
XM?"Y<?"X@72(*+DQ0"B-I;F-L=61E(#QC9&LN:#X*+DQ0"BY"22`B0T1+14Y4
XM4ED@*FYE=T-$2T5N=')Y("A#1$M30U)%14X@*B(@(F-D:W-C<F5E;B(L"BY"
XM22`B:6YT("(@(GAP;W,B+`HN0DD@(FEN="`B(")Y<&]S(BP*+D))(")I;G0@
XM(B`B;'!O<R(L"BY"22`B8VAA<B`J(B`B;&%B96PB+`HN0DD@(F-H='EP92`B
XM(")F:65L9$%T=')I8G5T92(L"BY"22`B8VAT>7!E("(@(F9I;&QE<D-H87)A
XM8W1E<B(L"BY"22`B141I<W!L87E4>7!E("(@(F1I<W!L87E4>7!E(BP*+D))
XM(")I;G0@(B`B9FEE;&17:61T:"(L"BY"22`B:6YT("(@(FUI;FEM=6U,96YG
XM=&@B+`HN0DD@(FEN="`B(")M87AI;75M3&5N9W1H(BP*+D))(")%3E1264-"
XM("(@(F-A;&Q"86-K1G5N8W1I;VXB+`HN0DD@(F)O;VQE86X@(B`B8F]X(BP*
XM+D))(")B;V]L96%N("(@(G-H861O=R(I.PHN3%`*+D))(")C:&%R("IA8W1I
XM=F%T94-$2T5N=')Y("A#1$M%3E1262`J(B`B96YT<GDB*3L*+DQ0"BY"22`B
XM=F]I9"!S971#1$M%;G1R>2`H0T1+14Y44ED@*B(@(F5N=')Y(BP*+D))(")C
XM:&%R("HB(")V86QU92(L"BY"22`B:6YT("(@(FUI;FEM=6U,96YG=&@B+`HN
XM0DD@(FEN="`B(")M87AI;75M3&5N9W1H(BP*+D))(")B;V]L96%N("(@(F)O
XM>"(I.PHN3%`*+D))(")V;VED(&1R87=#1$M%;G1R>2`H0T1+14Y44ED@*B(@
XM(F5N=')Y(BP*+D))(")B;V]L96%N("(@(F)O>"(I.PHN3%`*+D))(")V;VED
XM(&5R87-E0T1+16YT<GD@*$-$2T5.5%)9("HB(")E;G1R>2(I.PHN3%`*+D))
XM(")V;VED(&-L96%N0T1+16YT<GD@*$-$2T5.5%)9("HB(")E;G1R>2(I.PHN
XM3%`*+D))(")V;VED(&1E<W1R;WE#1$M%;G1R>2`H0T1+14Y44ED@*B(@(F5N
XM=')Y(BD["BY,4`HN0DD@(G9O:60@8FEN9$-$2T]B:F5C="`H14]B:F5C=%1Y
XM<&4@(B`B=VED9V5T5'EP92(L"BY"22`B=F]I9"`J(B`B;V)J96-T(BP*+D))
XM(")C:'1Y<&4@(B`B:V5Y(BP*+D))(")"24Y$1DX@(B`B9G5N8W1I;VXB+`HN
XM0DD@(G9O:60@*B(@(F1A=&$B*3L*+E-(($1%4T-225!424]."E1H92!#9&L@
XM96YT<GD@=VED9V5T(&-R96%T97,@86X@96YT<GD@8F]X('=I=&@@82!L86)E
XM;"!A;F0@86X@96YT<GD@9FEE;&0N(%1H92`*9F]L;&]W:6YG(&%R92!F=6YC
XM=&EO;G,@=VAI8V@@8W)E871E(&]R(&UA;FEP=6QA=&4@=&AE($-D:R!E;G1R
XM>2!B;W@@=VED9V5T+@HN25`@(D-$2T5.5%)9("IN97=#1$M%;G1R>2`H7&8R
XM<V-R965N7&8Q+"!<9C)X<&]S7&8Q+"!<9C)Y<&]S7&8Q+"!<9C)L<&]S7&8Q
XM+"!<9C)L86)E;%QF,2P@7&8R9FEE;&1!='1R:6)U=&5<9C$L(%QF,F9I;&QE
XM<D-H87)A8W1E<EQF,2P@7&8R9&ES<&QA>51Y<&5<9C$L(%QF,F9I96QD5VED
XM=&A<9C$L(%QF,FUI;FEM=6U,96YG=&A<9C$L(%QF,FUA>&EM=6U,96YG=&A<
XM9C$L(%QF,F-A;&QB86-K1G5N8W1I;VY<9C$L(%QF,F)O>%QF,2P@7&8R<VAA
XM9&]W7&8Q*3LB(#,*5&AI<R!F=6YC=&EO;B!C86QL(&-R96%T97,@82!P;VEN
XM=&5R('1O(&%N(&5N=')Y('=I9&=E="X@5&AE('!A<F%M971E<@I<9C)S8W)E
XM96Y<9C$@:7,@;V8@='EP92!#1$M30U)%14XN(%1H92!P87)A;65T97(@7&8R
XM>'!O<UQF,2!C;VYT<F]L<R!T:&4@<&QA8V5M96YT"F]F('1H92!O8FIE8W0@
XM86QO;F<@=&AE(&AO<FEZ;VYT86P@87AI<SL@=VAI8V@@;65A;G,@:70@8V%N
XM('1A:V4@86X@:6YT96=E<B!V86QU90IO<B!T:&4@<')E9&5F:6YE9"!V86QU
XM97,@;V8@7&8T3$5&5%QF,2P@7&8T4DE'2%1<9C$L(&%N9"!<9C1#14Y415)<
XM9C$N(%1H90IP87)A;65T97(@7&8R>7!O<UQF,2!C;VYT<F]L<R!T:&4@<&QA
XM8V5M96YT(&]F('1H92!O8FIE8W0@86QO;F<@=&AE('9E<G1I8V%L"F%X:7,@
XM=VAI8V@@;65A;G,@:70@8V%N(&%C8V5P="!A;B!I;G1E9V5R('9A;'5E(&]R
XM(&$@<')E9&5F:6YE9"!V86QU92!O9B`*7&8T5$]07&8Q+"!<9C1"3U143TU<
XM9C$L(&%N9"!<9C1#14Y415)<9C$N(%1H92!P87)A;65T97(@7&8R;'!O<UQF
XM,2!C;VYT<F]L<PIW:&5R92!T:&4@;&%B96P@:7,@=&\@8F4@<V5T+B!)="!C
XM86X@=&%K92!A;B!I;G1E9V5R('9A;'5E(&]R(&]N92!O9B!T:&4@"G!R961E
XM9FEN960@=F%L=65S.B!<9C143U!<9C$L(%QF-$)/5%1/35QF,2P@7&8T3$5&
XM5%QF,2P@7&8T4DE'2%1<9C$L(&%N9"`*7&8T0T5.5$527&8Q+B!4:&4@7&8R
XM;&%B96Q<9C$@<&%R86UE=&5R(&ES('1H92!S=')I;F<@=VAI8V@@=VEL;"!B
XM92!D:7-P;&%Y960*:6X@=&AE(&QA8F5L(&]F('1H92!E;G1R>2!F:65L9"X@
XM5&AE(%QF,F9I96QD071T<FEB=71E7&8Q(&ES('1H92!A='1R:6)U=&4@;V8*
XM=&AE(&-H87)A8W1E<G,@=&\@8F4@9&ES<&QA>65D('=H96X@=&AE>2!A<F4@
XM='EP960@:6XN(%QF,F9I;&QE<EQF,2!I<R!T:&4@"F-H87)A8W1E<B!W:&EC
XM:"!I<R!T;R!B92!D:7-P;&%Y960@:6X@86X@96UP='D@<W!A8V4@:6X@=&AE
XM(&5N=')Y(&9I96QD+B!4:&4*<&%R86UE=&5R(%QF,F1I<W!L87E4>7!E7&8Q
XM('1E;&QS(&AO=R!T:&4@96YT<GD@9FEE;&0@=VEL;"!B96AA=F4@=VAE;B!A
XM(&-H87)A8W1E<@II<R!E;G1E<F5D(&EN=&\@=&AE(&9I96QD+B!4:&4@9F]L
XM;&]W:6YG('1A8FQE(&]U=&QI;F5S('9A;&ED('9A;'5E<R!F;W(@=&AI<PIF
XM:65L9"!A;F0@=VAA="!T:&4@<F5S=6QT(&ES+@HN3%`*+FYF(`I<9C)$:7-P
XM;&%Y(%1Y<&4@("`@("!297-U;'1<9C$*=D-(05(@("`@("`@("`@("`@3VYL
XM>2!A8V-E<'1S(&%L<&AA8F5T:6,@8VAA<F%C=&5R<RX*=DQ#2$%2("`@("`@
XM("`@("`@3VYL>2!A8V-E<'1S(&%L<&AA8F5T:6,@8VAA<F%C=&5R<RX*("`@
XM("`@("`@("`@("`@("`@36%P<R!T:&4@8VAA<F%C=&5R('1O(&QO=V5R(&-A
XM<V4*("`@("`@("`@("`@("`@("`@=VAE;B!A(&-H87)A8W1E<B!H87,@8F5E
XM;B!A8V-E<'1E9"X*=E5#2$%2("`@("`@("`@("`@3VYL>2!A8V-E<'1S(&%L
XM<&AA8F5T:6,@8VAA<F%C=&5R<RX*("`@("`@("`@("`@("`@("`@36%P<R!T
XM:&4@8VAA<F%C=&5R('1O('5P<&5R(&-A<V4*("`@("`@("`@("`@("`@("`@
XM=VAE;B!A(&-H87)A8W1E<B!H87,@8F5E;B!A8V-E<'1E9"X*=DA#2$%2("`@
XM("`@("`@("`@3VYL>2!A8V-E<'1S(&%L<&AA8F5T:6,@8VAA<F%C=&5R<RX*
XM("`@("`@("`@("`@("`@("`@1&ES<&QA>7,@82!<9C0N7&8Q('=H96X@82!C
XM:&%R86-T97(*("`@("`@("`@("`@("`@("`@:&%S(&)E96X@86-C97!T960N
XM"G952$-(05(@("`@("`@("`@($]N;'D@86-C97!T<R!A;'!H86)E=&EC(&-H
XM87)A8W1E<G,N"B`@("`@("`@("`@("`@("`@($1I<W!L87ES(&$@7&8T+EQF
XM,2!A;F0@;6%P<R!T:&4*("`@("`@("`@("`@("`@("`@8VAA<F%C=&5R('1O
XM('5P<&5R(&-A<V4@=VAE;B!A"B`@("`@("`@("`@("`@("`@(&-H87)A8W1E
XM<B!H87,@8F5E;B!A8V-E<'1E9"X*=DQ(0TA!4B`@("`@("`@("`@3VYL>2!A
XM8V-E<'1S(&%L<&AA8F5T:6,@8VAA<F%C=&5R<RX*("`@("`@("`@("`@("`@
XM("`@1&ES<&QA>7,@82!<9C0N7&8Q(&%N9"!M87!S('1H90H@("`@("`@("`@
XM("`@("`@("!C:&%R86-T97(@=&\@;&]W97(@8V%S92!W:&5N(&$*("`@("`@
XM("`@("`@("`@("`@8VAA<F%C=&5R(&AA<R!B965N(&%C8V5P=&5D+@IV24Y4
XM("`@("`@("`@("`@("!/;FQY(&%C8V5P=',@;G5M97)I8R!C:&%R86-T97)S
XM+@IV2$E.5"`@("`@("`@("`@("!/;FQY(&%C8V5P=',@;G5M97)I8R!C:&%R
XM86-T97)S+@H@("`@("`@("`@("`@("`@("!$:7-P;&%Y<R!A(%QF-"Y<9C$@
XM=VAE;B!A(&-H87)A8W1E<@H@("`@("`@("`@("`@("`@("!H87,@8F5E;B!A
XM8V-E<'1E9"X*=DU)6$5$("`@("`@("`@("`@06-C97!T<R!A;GD@8VAA<F%C
XM=&5R('1Y<&5S+@IV3$U)6$5$("`@("`@("`@("!!8V-E<'1S(&%N>2!C:&%R
XM86-T97(@='EP97,N"B`@("`@("`@("`@("`@("`@($UA<',@=&AE(&-H87)A
XM8W1E<B!T;R!L;W=E<B!C87-E"B`@("`@("`@("`@("`@("`@('=H96X@86X@
XM86QP:&%B971I8R!C:&%R86-T97(@:&%S"B`@("`@("`@("`@("`@("`@(&)E
XM96X@86-C97!T960N"G9534E8140@("`@("`@("`@($%C8V5P=',@86YY(&-H
XM87)A8W1E<B!T>7!E<RX*("`@("`@("`@("`@("`@("`@36%P<R!T:&4@8VAA
XM<F%C=&5R('1O('5P<&5R(&-A<V4*("`@("`@("`@("`@("`@("`@=VAE;B!A
XM;B!A;'!H86)E=&EC(&-H87)A8W1E<B!H87,*("`@("`@("`@("`@("`@("`@
XM8F5E;B!A8V-E<'1E9"X*=DA-25A%1"`@("`@("`@("`@06-C97!T<R!A;GD@
XM8VAA<F%C=&5R('1Y<&5S+@H@("`@("`@("`@("`@("`@("!$:7-P;&%Y<R!A
XM(%QF-"Y<9C$@=VAE;B!A(&-H87)A8W1E<@H@("`@("`@("`@("`@("`@("!H
XM87,@8F5E;B!A8V-E<'1E9"X*=DQ(34E8140@("`@("`@("`@06-C97!T<R!A
XM;GD@8VAA<F%C=&5R('1Y<&5S+@H@("`@("`@("`@("`@("`@("!$:7-P;&%Y
XM<R!A(%QF-"Y<9C$@86YD(&UA<',@=&AE"B`@("`@("`@("`@("`@("`@(&-H
XM87)A8W1E<B!T;R!L;W=E<B!C87-E('=H96X@80H@("`@("`@("`@("`@("`@
XM("!C:&%R86-T97(@:&%S(&)E96X@86-C97!T960N"G952$U)6$5$("`@("`@
XM("`@($%C8V5P=',@86YY(&-H87)A8W1E<B!T>7!E<RX*("`@("`@("`@("`@
XM("`@("`@1&ES<&QA>7,@82!<9C0N7&8Q(&%N9"!M87!S('1H90H@("`@("`@
XM("`@("`@("`@("!C:&%R86-T97(@=&\@=7!P97(@8V%S92!W:&5N(&$*("`@
XM("`@("`@("`@("`@("`@8VAA<F%C=&5R(&AA<R!B965N(&%C8V5P=&5D+@IV
XM5DE%5T].3%D@("`@("`@("!5;F5D:71A8FQE(&9I96QD+@HN9FD*+DE0("(B
XM(#,*5&AE(%QF,F9I96QD5VED=&A<9C$@<&%R86UE=&5R('-T871E<R!H;W<@
XM=VED92!T:&4@9FEE;&0@=VEL;"!B92X@5&AE('!A<F%M971E<@I<9C)M:6YI
XM;75M3&5N9W1H7&8Q('-T871E<R!H;W<@;6%N>2!C:&%R86-T97)S(&AA=F4@
XM=&\@8F4@96YT97)E9"!B969O<F4@=&AE"G5S92!C86X@97AI="!T:&4@96YT
XM<GD@9FEE;&0N(%1H92!<9C)M87AI;75M3&5N9W1H7&8Q('!A<F%M971E<B!S
XM971S('1H92`*;6%X:6UU;2!N=6UB97(@;V8@8VAA<F%C=&5R<R!T:&%T(&-A
XM;B!B92!E;G1E<F5D+B!4:&4@7&8R8V%L;$)A8VM&=6YC=&EO;EQF,2!I<PIW
XM:&5R92!T:&4@=7-E(&-A;B!S=V%P(&]U="!T:&4@:V5Y('!R;V-E<W-I;F<@
XM96QE;65N="!O9B!T:&4@=VED9V5T+B!)9B!T:&4*<')O9W)A;6UE<B!F965L
XM<R!T:&5Y(&YE960@=&\@<F4M;6%P(&%L;"P@;W(@;6]S="P@;W(@=&AE(&ME
XM>2!B:6YD:6YG<R!O9B!T:&4*96YT<GD@9FEE;&0L('=R:71E(&$@9G5N8W1I
XM;VX@;V8@='EP92!<9C1%3E1264-"7&8Q(&%N9"!C86QL('1H92!E;G1R>2!W
XM:61G970*=7-I;F<@=&AI<R!F=6YC=&EO;B!I;G-T96%D(&]F('1H92!D969A
XM=6QT+B!4:&4@8W5R<F5N="!D969A=6QT(&9U;F-T:6]N(&ES"EQF-$-$2T5N
XM=')Y0V%L;$)A8VM<9C$N(%1H92!<9C)B;WA<9C$@<&%R86UE=&5R('-T871E
XM<R!W:&5T:&5R('1H92!W:61G970@=VEL;`IB92!D<F%W;B!W:71H(&$@8F]X
XM(&%R;W5N9"!I="!O<B!N;W0N(%1H92!<9C)S:&%D;W=<9C$@<&%R86UE=&5R
XM(&%C8V5P=',@82`*8F]O;&5A;B!V86QU92!T;R!T=7)N('1H92!S:&%D;W<@
XM;VX@;W(@;V9F(&%R;W5N9"!T:&ES('=I9&=E="X@268@=&AE('=I9&=E=`IC
XM;W5L9"!N;W0@8F4@8W)E871E9"!T:&5N(&$@3E5,3"!P;VEN=&5R(&ES(')E
XM='5R;F5D+@HN25`@(F-H87(@*F%C=&EV871E0T1+16YT<GD@*%QF,F5N=')Y
XM7&8Q*3LB(#,*5&AI<R!F=6YC=&EO;B!A8W1I=F%T97,@=&AE(&5N=')Y('=I
XM9&=E="!A;F0@;&5T<R!T:&4@=7-E<B!I;G1E<F%C="!W:71H('1H90IW:61G
XM970N(%1H92!O;FQY('!A<F%M971E<B!T:&ES(&9U;F-T:6]N(')E<75I<F5S
XM(&ES('1H92!<9C)E;G1R>5QF,2!W:61G970*<&]I;G1E<BX@5&AI<R!F=6YC
XM=&EO;B!R971U<FYS(&$@7&8T8VAA<B`J7&8Q(&]F('1H92!I;F9O<FUA=&EO
XM;B!W:&EC:"!W87,@='EP960@:6X*=&AE(&9I96QD+@HN25`@(G9O:60@<V5T
XM0T1+16YT<GD@*%QF,F5N=')Y7&8Q+"!<9C)V86QU95QF,2P@7&8R;6EN:6UU
XM;4QE;F=T:%QF,2P@7&8R;6%X:6UU;4QE;F=T:%QF,2P@7&8R8F]X7&8Q*3LB
XM(#,*5&AI<R!F=6YC=&EO;B!L971S('1H92!P<F]G<F%M;65R(&UO9&EF>2!C
XM97)T86EN(&5L96UE;G1S(&]F(&%N(&%L<F5A9'D@9&5F:6YE9`IE;G1R>2!W
XM:61G970N(%1H92!P87)A;65T97(@;F%M97,@8V]R<F5S<&]N9"!T;R!T:&4@
XM<V%M92!P87)A;65T97(@;F%M97,@;&ES=&5D"FEN('1H92!<9C1N97=#1$M%
XM;G1R>5QF,2!F=6YC=&EO;BX*+DE0(")V;VED(&1R87=#1$M%;G1R>2A<9C)E
XM;G1R>5QF,2P@7&8R8F]X7&8Q*3LB(#,*5&AI<R!F=6YC=&EO;B!D<F%W<R!T
XM:&4@96YT<GD@=VED9V5T(&]N('1H92!S8W)E96XN(%1H92!<9C)B;WA<9C$@
XM;W!T:6]N(`ID<F%W<R!T:&4@=VED9V5T('=I=&@@;W(@=VET:&]U="!A(&)O
XM>"X*+DE0(")V;VED(&5R87-E0T1+16YT<GD@*%QF,F5N=')Y7&8Q*3LB(#,*
XM5&AI<R!F=6YC=&EO;B!R96UO=F5S('1H92!W:61G970@9G)O;2!T:&4@<V-R
XM965N+B!4:&ES(&1O97,@7&8T3D]47&8Q(&1E<W1R;WD*=&AE('=I9&=E="X*
XM+DE0(")V;VED(&-L96%N0T1+16YT<GD@*%QF,F5N=')Y7&8Q*3LB(#,*5&AI
XM<R!F=6YC=&EO;B!C;&5A<G,@=&AE(&EN9F]R;6%T:6]N(&9R;VT@=&AE(&9I
XM96QD+@HN25`@(G9O:60@9&5S=')O>4-$2T5N=')Y("A<9C)E;G1R>5QF,2D[
XM(B`S"E1H:7,@9G5N8W1I;VX@<F5M;W9E<R!T:&4@=VED9V5T(&9R;VT@=&AE
XM('-C<F5E;B!A;F0@9G)E97,@=7`@86YY(&UE;6]R>2!T:&4*;V)J96-T(&UA
XM>2!B92!U<VEN9RX*+DE0(")V;VED(&)I;F1#1$M/8FIE8W0@*%QF,G=I9&=E
XM=%1Y<&5<9C$L(%QF,F]B:F5C=%QF,2P@7&8R:V5Y7&8Q+"!<9C)F=6YC=&EO
XM;EQF,2P@7&8R9&%T85QF,2D[(B`S"E1H:7,@9G5N8W1I;VX@86QL;W=S('1H
XM92!U<V5R('1O(&-R96%T92!S<&5C:6%L(&ME>2!B:6YD:6YG<RX@5&AE(%QF
XM,G=I9&=E=%1Y<&5<9C$*<&%R86UE=&5R(&ES(&$@9&5F:6YE9"!T>7!E('=H
XM:6-H('-T871E<R!W:&%T($-D:R!O8FIE8W0@='EP92!I<R!B96EN9R!U<V5D
XM+@I4;R!L96%R;B!M;W)E(&%B;W5T('1H92!T>7!E(%QF-$5/8FIE8W14>7!E
XM7&8Q(')E860@=&AE(%QF,F-D:U]B:6YD:6YG7&8Q(&UA;G5A;`IP86=E+B!4
XM:&4@7&8R;V)J96-T7&8Q('!A<F%M971E<B!I<R!T:&4@<&]I;G1E<B!T;R!T
XM:&4@=VED9V5T(&]B:F5C="X@5&AE"EQF,FME>5QF,2!I<R!T:&4@8VAA<F%C
XM=&5R('1O(&)I;F0N(%1H92!<9C)F=6YC=&EO;EQF,2!I<R!T:&4@9G5N8W1I
XM;VX@='EP92X@5&\*;&5A<FX@;6]R92!A8F]U="!T:&4@:V5Y(&)I;F1I;F<@
XM8V%L;&)A8VL@9G5N8W1I;VX@='EP97,@<F5A9"!T:&4@7&8T8V1K7V)I;F1I
XM;F=<9C$*;6%N=6%L('!A9V4N(%1H92!L87-T('!A<F%M971E<B!<9C)D871A
XM7&8Q(&ES(&$@<&]I;G1E<B!T;R!A;GD@9&%T82!T:&%T(&YE961S"G1O(&=E
XM="!P87-S960@=&\@=&AE(&-A;&QB86-K(&9U;F-T:6]N+@HN4T@@2T59($))
XM3D1)3D=3"E=H96X@=&AE('=I9&=E="!I<R!A8W1I=F%T960@=&AE<F4@87)E
XM('-E=F5R86P@9&5F875L="!K97D@8FEN9&EN9W,@=VAI8V@@=VEL;`IH96QP
XM('1H92!U<V5R(&5N=&5R(&]R(&UA;FEP=6QA=&4@=&AE(&EN9F]R;6%T:6]N
XM('%U:6-K;'DN(%1H92!F;VQL;W=I;F<@=&%B;&4*;W5T;&EN97,@=&AE(&ME
XM>7,@86YD('1H96ER(&%C=&EO;G,@9F]R('1H:7,@=VED9V5T+@HN3%`*+FYF
XM"EQF,DME>2`@("`@("`@("!!8W1I;VY<9C$*3&5F="!!<G)O=R`@36]V97,@
XM=&AE(&-U<G-O<B!T:&4@=&AE(&QE9G0N"E)I9VAT($%R<F]W($UO=F5S('1H
XM92!C=7)S;W(@=&AE('1H92!R:6=H="X*1&5L971E("`@("`@1&5L971E<R!T
XM:&4@8VAA<F%C=&5R('1O('1H92!L969T(&]F('1H92!C=7)S;W(N"D)A8VMS
XM<&%C92`@($1E;&5T97,@=&AE(&-H87)A8W1E<B!T;R!T:&4@;&5F="!O9B!T
XM:&4@8W5R<V]R+@I2971U<FX@("`@("!%>&ET<R!T:&4@=VED9V5T(&%N9"!R
XM971U<FYS(&$@8VAA<B`J(')E<')E<V5N=&EN9PH@("`@("`@("`@("!T:&4@
XM:6YF;W)M871I;VX@=VAI8V@@=V%S('1Y<&5D(&EN=&\@=&AE(&9I96QD+@I4
XM86(@("`@("`@("!%>&ET<R!T:&4@=VED9V5T(&%N9"!R971U<FYS(&$@8VAA
XM<B`J(')E<')E<V5N=&EN9PH@("`@("`@("`@("!T:&4@:6YF;W)M871I;VX@
XM=VAI8V@@=V%S('1Y<&5D(&EN=&\@=&AE(&9I96QD+@I#=')L+4X@("`@("!%
XM>&ET<R!T:&4@=VED9V5T(&%N9"!R971U<FYS(&$@8VAA<B`J(')E<')E<V5N
XM=&EN9PH@("`@("`@("`@("!T:&4@:6YF;W)M871I;VX@=VAI8V@@=V%S('1Y
XM<&5D(&EN=&\@=&AE(&9I96QD+@I#=')L+5(@("`@("!2969R97-H97,@=&AE
XM('-C<F5E;BX*+F9I"BY32"!3144@04Q33PHN0E(@8V1K("@S6"DL"BY"4B!C
XM9&M?<V-R965N("@S6"DL"BY"4B!C9&M?9&ES<&QA>2`H,U@I+`HN0E(@8V1K
XM7V)I;F1I;F<@*#-8*0HN4T@@3D]415,*+E!0"E1H92!H96%D97(@9FEL92!<
XM9C0\8V1K+F@^7&8Q(&%U=&]M871I8V%L;'D@:6YC;'5D97,@=&AE(&AE861E
XM<B!F:6QE<PI<9C0\8W5R<V5S+F@^7&8Q+"!<9C0\<W1D;&EB+F@^7&8Q+"!<
XM9C0\<W1R:6YG+F@^7&8Q+"!<9C0\8W1Y<&4N:#Y<9C$L"EQF-#QU;FES=&0N
XM:#Y<9C$L(%QF-#QD:7)E;G0N:#Y<9C$L(%QF-#QT:6UE+F@^7&8Q+"!<9C0\
XM97)R;F\N:#Y<9C$L"EQF-#QP=V0N:#Y<9C$L(%QF-#QG<G`N:#Y<9C$L(%QF
XM-#QS>7,O<W1A="YH/EQF,2P@86YD(%QF-#QS>7,O='EP97,N:#Y<9C$N"E1H
XM92!<9C0\8W5R<V5S+F@^7&8Q(&AE861E<B!F:6QE(&EN8VQU9&5S(%QF-#QS
XM=&1I;RYH/EQF,2!A;F0@7&8T/'5N8W1R;"YH/EQF,2X*+E!0"DEF('EO=2!H
XM879E(%QF-&YC=7)S97-<9C$@:6YS=&%L;&5D(&]N('EO=7(@;6%C:&EN92!A
XM9&0@+41.0U524T53('1O('1H92`*8V]M<&EL92!L:6YE('1O(&EN8VQU9&4@
XB=&AE(&YC=7)S97,@:&5A9&5R(&9I;&5S(&EN<W1E860N"G1O
X`
Xend
SHAR_EOF
  echo 'uudecoding file cdk-4.6.0/man/entry.3x' &&
  uudecode _sharuue.tmp < _sharuue.tmp && rm -f _sharuue.tmp &&
  $shar_touch -am 1229121195 'cdk-4.6.0/man/entry.3x' &&
  chmod 0400 'cdk-4.6.0/man/entry.3x' ||
  echo 'restore of cdk-4.6.0/man/entry.3x failed'
  shar_count="`wc -c < 'cdk-4.6.0/man/entry.3x'`"
  test 9349 -eq "$shar_count" ||
    echo "cdk-4.6.0/man/entry.3x: original size 9349, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/man/graph.3x ==============
if test -f 'cdk-4.6.0/man/graph.3x' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/man/graph.3x (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/man/graph.3x (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'cdk-4.6.0/man/graph.3x' &&
X.de It
X.br
X.ie \\n(.$>=3 .ne \\$3
X.el .ne 3
X.IP "\\$1" \\$2
X..
X.TH cdk_graph 3X "05 Dec 1995"
X.SH NAME
XnewCDKGraph, setCDKGraph, drawCDKGraph, eraseCDKGraph, 
XdestroyCDKGraph \- Creates a managed curses graph widget.
X.SH SYNOPSIS
X.LP
X.B cc
X.RI "[ " "flag" " \|.\|.\|. ] " "file" " \|.\|.\|."
X.B \-lcdk
X.RI "[ " "library" " \|.\|.\|. ]"
X.LP
X#include <cdk.h>
X.LP
X.BI "CDKGRAPH *newCDKGraph (CDKSCREEN *" "cdkscreen",
X.BI "int " "xpos",
X.BI "int " "ypos",
X.BI "int " "height",
X.BI "int " "width",
X.BI "char *" "title",
X.BI "char *" "xtitle",
X.BI "char *" "ytitle");
X.LP
X.BI "void setCDKGraph (CDKGRAPH *" "graph",
X.BI "int *" "values",
X.BI "int " "valueCount",
X.BI "char *" "graphCharacters",
X.BI "boolean " "startAtZero",
X.BI "EGraphDisplayType " "displayType");
X.LP
X.BI "void drawCDKGraph (CDKGRAPH *" "graph",
X.BI "boolean " "box");
X.LP
X.BI "void eraseCDKGraph (CDKGRAPH *" "graph");
X.LP
X.BI "void destroyCDKGraph (CDKGRAPH *" "graph");
X.LP
X.SH DESCRIPTION
XThe Cdk graph widget creates a graph widget. This widget can draw a graph in
Xboth plot mode and line mode. The following are functions which create or 
Xmanipulate the Cdk graph box widget.
X.IP "CDKGRAPH *newCDKGraph (\f2screen\f1, \f2xpos\f1, \f2ypos\f1, \f2height\f1, \f2width\f1, \f2title\f1, \f2xtitle\f1, \f2ytitle\f1);" 3
XThis function call creates a pointer to an graph widget. The parameter
X\f2screen\f1 is of type CDKSCREEN. The parameter \f2xpos\f1 controls the placement
Xof the object along the horizontal axis; which means it can take an integer value
Xor the predefined values of \f4LEFT\f1, \f4RIGHT\f1, and \f4CENTER\f1. The
Xparameter \f2ypos\f1 controls the placement of the object along the vertical
Xaxis which means it can accept an integer value or a predefined value of 
X\f4TOP\f1, \f4BOTTOM\f1, and \f4CENTER\f1. The parameters \f2height\f1 and 
X\f2width\f1 specify the actual window height and width respectively. The
Xthree parameters: \f2title\f1, \f2xtitle\f1, and \f2ytitle\f1, are the
Xgraph title, the X axis title, and the Y axis title respectively. If the widget
Xcould not be created then a NULL pointer is returned.
X.IP "void setCDKGraph (\f2graph\f1, \f2values\f1, \f2valueCount\f1, \f2graphCharacters\f1, \f2startAtZero\f1, \f2displayType\f1);" 3
XThis function lets the programmer set the specific values of the graph widget.
XThe parameter \f2values\f1 is an integer array of the values to display in the
Xwidget; \f2valueCount\f1 is the number of values in the array. The parameter
X\f2graphCharacters\f1 is an array of the characters to use for each graph point.
XThe parameter \f2startAtZero\f1 states whether you want the graph to start at
Xzero or the lowest values of the X and Y axis'. The parameter \f2displayType\f1
Xaccepts either \f4vPLOT\f1, to make the graph draw the values as a plot graph,
Xor \f4vLINE\f1 to draw the values as a line graph.
X.IP "void drawCDKGraph(\f2graph\f1, \f2box\f1);" 3
XThis function draws the graph widget on the screen. The \f2box\f1 option 
Xdraws the widget with or without a box.
X.IP "void eraseCDKGraph (\f2graph\f1);" 3
XThis function removes the widget from the screen. This does \f4NOT\f1 destroy
Xthe widget.
X.IP "void destroyCDKGraph (\f2graph\f1);" 3
XThis function removes the widget from the screen and frees up any memory the
Xobject may be using.
X.SH SEE ALSO
X.BR cdk (3X),
X.BR cdk_screen (3X),
X.BR cdk_display (3X),
X.BR cdk_binding (3X)
X.SH NOTES
X.PP
XThe header file \f4<cdk.h>\f1 automatically includes the header files
X\f4<curses.h>\f1, \f4<stdlib.h>\f1, \f4<string.h>\f1, \f4<ctype.h>\f1,
X\f4<unistd.h>\f1, \f4<dirent.h>\f1, \f4<time.h>\f1, \f4<errno.h>\f1,
X\f4<pwd.h>\f1, \f4<grp.h>\f1, \f4<sys/stat.h>\f1, and \f4<sys/types.h>\f1.
XThe \f4<curses.h>\f1 header file includes \f4<stdio.h>\f1 and \f4<unctrl.h>\f1.
X.PP
XIf you have \f4ncurses\f1 installed on your machine add -DNCURSES to the 
Xcompile line to include the ncurses header files instead.
SHAR_EOF
  $shar_touch -am 1229121195 'cdk-4.6.0/man/graph.3x' &&
  chmod 0400 'cdk-4.6.0/man/graph.3x' ||
  echo 'restore of cdk-4.6.0/man/graph.3x failed'
  shar_count="`wc -c < 'cdk-4.6.0/man/graph.3x'`"
  test 3882 -eq "$shar_count" ||
    echo "cdk-4.6.0/man/graph.3x: original size 3882, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= cdk-4.6.0/man/fselect.3x ==============
if test -f 'cdk-4.6.0/man/fselect.3x' && test X"$1" != X"-c"; then
  echo 'x - skipping cdk-4.6.0/man/fselect.3x (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting cdk-4.6.0/man/fselect.3x (binary)'
  sed 's/^X//' << 'SHAR_EOF' > _sharuue.tmp &&
Xbegin 600 cdk-4.6.0/man/fselect.3x
XM+F1E($ET"BYB<@HN:64@7%QN*"XD/CTS("YN92!<7"0S"BYE;"`N;F4@,PHN
XM25`@(EQ<)#$B(%Q<)#(*+BX*+E1((&-D:U]F<V5L96-T(#-8("(P-2!$96,@
XM,3DY-2(*+E-(($Y!344*;F5W0T1+1G-E;&5C="P@86-T:79A=&5#1$M&<V5L
XM96-T+"!S971#1$M&<V5L96-T+"!D<F%W0T1+1G-E;&5C="P@"F5R87-E0T1+
XM1G-E;&5C="P@9&5S=')O>4-$2T9S96QE8W0@7"T@"D-R96%T97,@82!M86YA
XM9V5D(&-U<G-E<R!F:6QE('-E;&5C=&]R('=I9&=E="X*+E-((%-93D]04TE3
XM"BY,4`HN0B!C8PHN4DD@(EL@(B`B9FQA9R(@(B!<?"Y<?"Y<?"X@72`B(")F
XM:6QE(B`B(%Q\+EQ\+EQ\+B(*+D(@7"UL8V1K"BY222`B6R`B(")L:6)R87)Y
XM(B`B(%Q\+EQ\+EQ\+B!=(@HN3%`*(VEN8VQU9&4@/&-D:RYH/@HN3%`*+D))
XM(")#1$M&4T5,14-4("IN97=#1$M&<V5L96-T("A#1$M30U)%14X@*B(@(F-D
XM:W-C<F5E;B(L"BY"22`B:6YT("(@(GAP;W,B+`HN0DD@(FEN="`B(")Y<&]S
XM(BP*+D))(")I;G0@(B`B:&5I9VAT(BP*+D))(")I;G0@(B`B=VED=&@B+`HN
XM0DD@(F-H='EP92`B(")F:65L9$%T=')I8G5T92(L"BY"22`B8VAT>7!E("(@
XM(F9I;&QE<D-H87)A8W1E<B(L"BY"22`B8VAT>7!E("(@(FAI9VAL:6=H="(L
XM"BY"22`B8VAA<B`J(B`B9&ER071T<FEB=71E<R(L"BY"22`B8VAA<B`J(B`B
XM9FEL94%T=')I8G5T97,B+`HN0DD@(F-H87(@*B(@(FQI;FM!='1R:6)U=&4B
XM+`HN0DD@(F-H87(@*B(@(G-O8VM!='1R:6)U=&4B+`HN0DD@(F)O;VQE86X@
XM(B`B8F]X(BP*+D))(")B;V]L96%N("(@(G-H861O=R(I.PHN3%`*+D))(")C
XM:&%R("IA8W1I=F%T94-$2T9S96QE8W0@*$-$2T9314Q%0U0@*B(@(F9S96QE
XM8W0B*3L*+DQ0"BY"22`B=F]I9"!S971#1$M&<V5L96-T("A#1$M&4T5,14-4
XM("HB(")F<V5L96-T(BP*+D))(")C:'1Y<&4@(B`B9FEE;&1!='1R:6)U=&4B
XM+`HN0DD@(F-H='EP92`B(")F:6QL97)#:&%R86-T97(B+`HN0DD@(F-H='EP
XM92`B(")H:6=H;&EG:'0B+`HN0DD@(F-H87(@*B(@(F1I<D%T=')I8G5T97,B
XM+`HN0DD@(F-H87(@*B(@(F9I;&5!='1R:6)U=&5S(BP*+D))(")C:&%R("HB
XM(")L:6YK071T<FEB=71E(BP*+D))(")C:&%R("HB(")S;V-K071T<FEB=71E
XM(BP*+D))(")B;V]L96%N("(@(F)O>"(I.PHN3%`*+D))(")V;VED(&1R87=#
XM1$M&<V5L96-T("A#1$M&4T5,14-4("HB(")F<V5L96-T(BP*+D))(")B;V]L
XM96%N("(@(F)O>"(I.PHN3%`*+D))(")V;VED(&5R87-E0T1+1G-E;&5C="`H
XM0T1+1E-%3$5#5"`J(B`B9G-E;&5C="(I.PHN3%`*+D))(")V;VED(&1E<W1R
XM;WE#1$M&<V5L96-T("A#1$M&4T5,14-4("HB(")F<V5L96-T(BD["BY,4`HN
XM0DD@(G9O:60@8FEN9$-$2T]B:F5C="`H14]B:F5C=%1Y<&4@(B`B=VED9V5T
XM5'EP92(L"BY"22`B=F]I9"`J(B`B;V)J96-T(BP*+D))(")C:'1Y<&4@(B`B
XM:V5Y(BP*+D))(")"24Y$1DX@(B`B9G5N8W1I;VXB+`HN0DD@(G9O:60@*B(@
XM(F1A=&$B*3L*+E-(($1%4T-225!424]."E1H92!#9&L@9FEL92!S96QE8W1O
XM<B!W:61G970@8W)E871E<R!A('=I9&=E="!W:&EC:"!A;&QO=W,@82!U<V5R
XM('1O(&EN=&5R86-T"G=I=&@@=&AE(%5N:7@@9FEL92!S>7-T96TN(%1H:7,@
XM=VED9V5T(&%L;&]W<R!T:&4@=7-E<B!T;R!T<F%V97)S92!T:&4@9FEL90IS
XM>7-T96T@86YD(&5V96X@9&5L971E(&9I;&5S+@HN25`@(D-$2T9314Q%0U0@
XM*FYE=T-$2T9S96QE8W0@*%QF,G-C<F5E;EQF,2P@7&8R>'!O<UQF,2P@7&8R
XM>7!O<UQF,2P@7&8R:&5I9VAT7&8Q+"!<9C)W:61T:%QF,2P@7&8R9FEE;&1!
XM='1R:6)U=&5<9C$L(%QF,F9I;&QE<D-H87)<9C$L(%QF,FAI9VAL:6=H=%QF
XM,2P@7&8R9&ER071T<FEB=71E<UQF,2P@7&8R9FEL94%T=')I8G5T97-<9C$L
XM(%QF,FQI;FM!='1R:6)U=&5<9C$L(%QF,G-O8VM!='1R:6)U=&5<9C$L(%QF
XM,F)O>%QF,2P@7&8R<VAA9&]W7&8Q*3L*5&AI<R!F=6YC=&EO;B!C86QL(&-R
XM96%T97,@82!P;VEN=&5R('1O(&$@9G-E;&5C="!W:61G970N(%1H92!P87)A
XM;65T97(*7&8R<V-R965N7&8Q(&ES(&]F('1Y<&4@0T1+4T-2145.+B!4:&4@
XM<&%R86UE=&5R(%QF,GAP;W-<9C$@8V]N=')O;',@=&AE('!L86-E;65N=`IO
XM9B!T:&4@;V)J96-T(&%L;VYG('1H92!H;W)I>F]N=&%L(&%X:7,[('=H:6-H
XM(&UE86YS(&ET(&-A;B!T86ME(&%N(&EN=&5G97(@=F%L=64*;W(@=&AE('!R
XM961E9FEN960@=F%L=65S(&]F(%QF-$Q%1E1<9C$L(%QF-%))1TA47&8Q+"!A
XM;F0@7&8T0T5.5$527&8Q+B!4:&4*<&%R86UE=&5R(%QF,GEP;W-<9C$@8V]N
XM=')O;',@=&AE('!L86-E;65N="!O9B!T:&4@;V)J96-T(&%L;VYG('1H92!V
XM97)T:6-A;`IA>&ES('=H:6-H(&UE86YS(&ET(&-A;B!A8V-E<'0@86X@:6YT
XM96=E<B!V86QU92!O<B!A('!R961E9FEN960@=F%L=64@;V8@"EQF-%1/4%QF
XM,2P@7&8T0D]45$]-7&8Q+"!A;F0@7&8T0T5.5$527&8Q+B!4:&4@<&%R86UE
XM=&5R<R!<9C)H96EG:'1<9C$@86YD(`I<9C)W:61T:%QF,2!C;VYT<F]L('1H
XM92!H96EG:'0@86YD('=I9'1H(&]F('1H92!F:6QE('-E;&5C=&]R(&)O>"X@
XM5&AE(%QF,F9I96QD071T<FEB=71E7&8Q"G!A<F%M971E<B!S971S('1H92!A
XM='1R:6)U=&4@;V8@=&AE(&5N=')Y(&9I96QD(&%T('1H92!T;W`@;V8@=&AE
XM('=I9&=E=#L*7&8R9FEL;&5R0VAA<F%C=&5R7&8Q(&1E9FEN97,@=&AE(&9I
XM;&QE<B!C:&%R86-T97(@9F]R('1H92!E;G1R>2!F:65L9"X@5&AE"EQF,FAI
XM9VAL:6=H=%QF,2!S971S('1H92!H:6=H;&EG:'0@871T<FEB=71E(&]N('1H
XM92!S8W)O;&QI;F<@;&ES="X@5&AE"FYE>'0@9F]U<B!P87)A;65T97)S.B!<
XM9C)D:7)!='1R:6)U=&5S7&8Q+"!<9C)F:6QE071T<FEB=71E<UQF,2P@7&8R
XM;&EN:T%T=')I8G5T95QF,2P*86YD(%QF,G-O8VM!='1R:6)U=&5<9C$@<V5T
XM('1H92!A='1R:6)U=&5S(&]F(&1I<F5C=&]R:65S+"!F:6QE<RP@;&EN:W,L
XM(&%N9"!S;V-K971S"F9O=6YD(&EN('1H92!D:7)E8W1O<GD@;&ES="X@5&AE
XM(%QF,F)O>%QF,2!P87)A;65T97(@<W1A=&5S('=H971H97(@=&AE('=I9&=E
XM=`IW:6QL(&)E(&1R87=N('=I=&@@82!B;W@@87)O=6YD(&ET(&]R(&YO="X@
XM5&AE(%QF,G-H861O=UQF,2!P87)A;65T97(@86-C97!T<R!A"F)O;VQE86X@
XM=F%L=64@=&\@='5R;B!T:&4@<VAA9&]W(&]N(&]R(&]F9B!A<F]U;F0@=&AI
XM<R!W:61G970N"BY)4"`B8VAA<B`J86-T:79A=&5#1$M&<V5L96-T("A<9C)F
XM<V5L96-T7&8Q*3LB(#,*5&AI<R!F=6YC=&EO;B!A8W1I=F%T97,@=&AE(&9S
XM96QE8W0@=VED9V5T(&%N9"!L971S('1H92!U<V5R(&EN=&5R86-T('=I=&@@
XM=&AE"G=I9&=E="X@5&AE(&]N;'D@<&%R86UE=&5R('1H:7,@9G5N8W1I;VX@
XM<F5Q=6ER97,@:7,@=&AE(%QF,F9S96QE8W1<9C$@=VED9V5T"G!O:6YT97(N
XM(%1H:7,@9G5N8W1I;VX@<F5T=7)N<R!A(%QF-&-H87(@*EQF,2!W:&EC:"!R
XM97!R97-E;G1S('1H92!C=7)R96YT"F9I;&5N86UE('-E;&5C=&5D+B!)9B!T
XM:&4@=VED9V5T(&-O=6QD(&YO="!B92!C<F5A=&5D('1H96X@82!.54Q,('!O
XM:6YT97(@:7,*<F5T=7)N960N"BY)4"`B=F]I9"!S971#1$M&<V5L96-T("A<
XM9C)F<V5L96-T7&8Q+"!<9C)D:7)E8W1O<GE<9C$L(%QF,F9I96QD071T<FEB
XM=71E7&8Q+"!<9C)F:6QL97)#:&%R7&8Q+"!<9C)H:6=H;&EG:'1<9C$L(%QF
XM,F1I<D%T=')I8G5T97-<9C$L(%QF,F9I;&5!='1R:6)U=&5S7&8Q+"!<9C)L
XM:6YK071T<FEB=71E7&8Q+"!<9C)S;V-K071T<FEB=71E7&8Q+"!<9C)B;WA<
XM9C$I.PI4:&ES(&9U;F-T:6]N(&QE=',@=&AE('!R;V=R86UM97(@;6]D:69Y
XM(&-E<G1A:6X@96QE;65N=',@;V8@86X@86QR96%D>2!D969I;F5D"F9S96QE
XM8W0@=VED9V5T+B!4:&4@<&%R86UE=&5R(&YA;65S(&-O<G)E<W!O;F0@=&\@
XM=&AE('-A;64@<&%R86UE=&5R(&YA;65S(&QI<W1E9`II;B!T:&4@7&8T;F5W
XM0T1+1G-E;&5C=%QF,2!F=6YC=&EO;BX*+DE0(")V;VED(&1R87=#1$M&<V5L
XM96-T*%QF,F9S96QE8W1<9C$L(%QF,F)O>%QF,2D[(B`S"E1H:7,@9G5N8W1I
XM;VX@9')A=W,@=&AE(&9S96QE8W0@=VED9V5T(&]N('1H92!S8W)E96XN(%1H
XM92!<9C)B;WA<9C$@;W!T:6]N(`ID<F%W<R!T:&4@=VED9V5T('=I=&@@;W(@
XM=VET:&]U="!A(&)O>"X*+DE0(")V;VED(&5R87-E0T1+1G-E;&5C="`H7&8R
XM9G-E;&5C=%QF,2D[(B`S"E1H:7,@9G5N8W1I;VX@<F5M;W9E<R!T:&4@=VED
XM9V5T(&9R;VT@=&AE('-C<F5E;BX@5&AI<R!D;V5S(%QF-$Y/5%QF,2!D97-T
XM<F]Y"G1H92!W:61G970N"BY)4"`B=F]I9"!D97-T<F]Y0T1+1G-E;&5C="`H
XM7&8R9G-E;&5C=%QF,2D[(B`S"E1H:7,@9G5N8W1I;VX@<F5M;W9E<R!T:&4@
XM=VED9V5T(&9R;VT@=&AE('-C<F5E;B!A;F0@9G)E97,@=7`@86YY(&UE;6]R
XM>2!T:&4*;V)J96-T(&UA>2!B92!U<VEN9RX*+DE0(")V;VED(&)I;F1#1$M/
XM8FIE8W0@*%QF,G=I9&=E=%1Y<&5<9C$L(%QF,F]B:F5C=%QF,2P@7&8R:V5Y
XM7&8Q+"!<9C)F=6YC=&EO;EQF,2P@7&8R9&%T85QF,2D[(B`S"E1H:7,@9G5N
XM8W1I;VX@86QL;W=S('1H92!U<V5R('1O(&-R96%T92!S<&5C:6%L(&ME>2!B
XM:6YD:6YG<RX@5&AE(%QF,G=I9&=E=%1Y<&5<9C$*<&%R86UE=&5R(&ES(&$@
XM9&5F:6YE9"!T>7!E('=H:6-H('-T871E<R!W:&%T($-D:R!O8FIE8W0@='EP
XM92!I<R!B96EN9R!U<V5D+@I4;R!L96%R;B!M;W)E(&%B;W5T('1H92!T>7!E
XM(%QF-$5/8FIE8W14>7!E7&8Q(')E860@=&AE(%QF,F-D:U]B:6YD:6YG7&8Q
XM(&UA;G5A;`IP86=E+B!4:&4@7&8R;V)J96-T7&8Q('!A<F%M971E<B!I<R!T
XM:&4@<&]I;G1E<B!T;R!T:&4@=VED9V5T(&]B:F5C="X@5&AE"EQF,FME>5QF
XM,2!I<R!T:&4@8VAA<F%C=&5R('1O(&)I;F0N(%1H92!<9C)F=6YC=&EO;EQF
XM,2!I<R!T:&4@9G5N8W1I;VX@='EP92X@5&\*;&5A<FX@;6]R92!A8F]U="!T
XM:&4@:V5Y(&)I;F1I;F<@8V%L;&)A8VL@9G5N8W1I;VX@='EP97,@<F5A9"!T
XM:&4@7&8T8V1K7V)I;F1I;F=<9C$*;6%N=6%L('!A9V4N(%1H92!L87-T('!A
XM<F%M971E<B!<9C)D871A7&8Q(&ES(&$@<&]I;G1E<B!T;R!A;GD@9&%T82!T
XM:&%T(&YE961S"G1O(&=E="!P87-S960@=&\@=&AE(&-A;&QB86-K(&9U;F-T
XM:6]N+@HN4T@@2T59($))3D1)3D=3"E=H96X@=&AE('=I9&=E="!I<R!A8W1I
XM=F%T960@=&AE<F4@87)E('-E=F5R86P@9&5F875L="!K97D@8FEN9&EN9W,@
XM=VAI8V@@=VEL;`IH96QP('1H92!U<V5R(&5N=&5R(&]R(&UA;FEP=6QA=&4@
XM=&AE(&EN9F]R;6%T:6]N('%U:6-K;'DN(%-I;F-E('1H:7,@=VED9V5T(&ES
XM(`IB=6EL="!F<F]M(&)O=&@@=&AE('-C<F]L;&EN9R!L:7-T('=I9&=E="!A
XM;F0@=&AE(&5N=')Y(&9I96QD('=I9&=E="P@=&AE(&ME>0IB:6YD:6YG<R!A
XM<F4@=&AE('-A;64@9F]R('1H92!R97-P96-T:79E(&9I96QD<RX@5&AE(&5X
XM=')A(&ME>2!B:6YD:6YG<R!A<F4*;&ES=&5D(&)E;&]W+@HN3%`*+FYF"EQF
XM-%-C<F]L;&EN9R!,:7-T($ME>2!":6YD:6YG<UQF,0I<9C)+97D@("`@("`@
XM("`@06-T:6]N7&8Q"E1A8B`@("`@("`@("!,96%V97,@<V-R;VQL:6YG(&QI
XM<W0@=VED9V5T(&%N9"!E;G1E<G,@=&AE(&5N=')Y"B`@("`@("`@("`@("!F
XM:65L9"!W:61G970N"E)E='5R;B`@("`@("!)9B!S96QE8W1I;F<@82!F:6QE
XM+"!L96%V97,@=&AE('=I9&=E="!A;F0@<F5T=7)N<PH@("`@("`@("`@("`@
XM=&AE(&-O;7!L971E('!A=&@@;V8@=&AE('-E;&5C=&5D(&9I;&5N86UE+B!)
XM9@H@("`@("`@("`@("`@<V5L96-T:6YG(&$@9&ER96-T;W)Y+"!E;G1E<G,@
XM=&AE(&1I<F5C=&]R>2X*1&5L971E("`@("`@($1E;&5T97,@=&AE(&9I;&4N
XM"C\@("`@("`@("`@("!3:&]W<R!I;F9O<FUA=&EO;B!A8F]U="!T:&4@9FEL
XM92!C=7)R96YT;'D@"B`@("`@("`@("`@("!H:6=H;&EG:'1E9"X*0U123"U.
XM("`@("`@($5X:71S('=I=&AO=70@<V5L96-T:6YG(&%N>71H:6YG+@H*7&8T
XM16YT<GD@1FEE;&0@2V5Y($)I;F1I;F=S7&8Q"EQF,DME>2`@("`@("`@("!!
XM8W1I;VY<9C$*4F5T=7)N("`@("`@($EF(&$@9FEL96YA;64@=V%S('-E;&5C
XM=&5D+"!E>&ET<R!T:&4@=VED9V5T(&%N9`H@("`@("`@("`@("`@<F5T=7)N
XM<R!T:&4@8V]M<&QE=&4@<&%T:&YA;64@;V8@=&AE(&9I;&4N($EF(&]N"B`@
XM("`@("`@("`@("!A(&1I<F5C=&]R>2P@96YT97)S('1H92!D:7)E8W1O<GDL
XM(&QI<W1S(&%L;"!O9@H@("`@("`@("`@("`@=&AE(&9I;&5S(&%N9"!E;G1E
XM<G,@=&AE('-C<F]L;&EN9R!L:7-T+@I486(@("`@("`@("`@268@82!F:6QE
SHAR_EOF
  : || echo 'restore of cdk-4.6.0/man/fselect.3x failed'
fi
echo 'End of archive part 1'
echo 'File cdk-4.6.0/man/fselect.3x is continued in part 2'
echo 2 > _sharseq.tmp
exit 0
