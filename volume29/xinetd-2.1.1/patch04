Newsgroups: comp.sources.unix
From: panos@cs.colorado.edu (Panos Tsirigotis)
Subject: v29i029: xinetd-2.1.1 - inetd replacement with access control and logging, Patch04
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: panos@cs.colorado.edu (Panos Tsirigotis)
Posting-Number: Volume 29, Issue 29
Archive-Name: xinetd-2.1.1/patch04

1. What this patch fixes

>From the CHANGELOG file:
      1) in exec_server() service descriptor might be closed when
         execing server. This made it impossible to start servers
         for 'nowait' services.  The bug occurred only Ultrix version
         4.3a or (probably) later (bug discovered and fix provided
         by doug@seas.smu.edu)

      2) for systems that supported supplementary group id's, the
         set_credentials() function did not set those group id's
         (they were being inherited from xinetd). Now initgroups(3)
         is called to set the supplementary group id's properly.
         (bug discovered and fix provided by maf+@osu.edu)


2. How to apply this patch

Cd to the directory that contains the 'xinetd' directory, and use
the command:
	patch -p < "name of this file here"

This patch will modify the files
	README
	xinetd/Makefile
	xinetd/CHANGELOG
	xinetd/child.c

The version variable in the Makefile will be changed to 2.1.5
You will need to recompile xinetd after applying this patch.
The accompanying libraries are *not* affected by this patch.

Note that the README file has been updated to point to a new
ftp location where the latest-and-greatest version of xinetd
can be found: ftp.irisa.fr in pub/mirrors/xinetd


3. Possible problems with this patch

The 2nd bug fixed by this patch assumes that your system supports
supplementary group id's. All BSD-derived systems, as well as
SVR4-compatible systems support supplementary group id's. If
your system does not support them (by not having the initgroups(3)
function in the C library), you will need to edit the file xinetd/child.c:
Replace the line
	#ifndef NO_INITGROUPS
with
	#ifdef notdef



Prereq: 2.1.4

*** /tmp/dist/xinetd/Makefile	Fri Oct 14 09:49:55 1994
--- xinetd/Makefile	Sat Oct 15 17:47:49 1994
***************
*** 22,28 ****
  #
  
  NAME					= xinetd
! VERSION				= 2.1.4
  
  #
  # Possible flags that can be defined in DEFS:
--- 22,28 ----
  #
  
  NAME					= xinetd
! VERSION				= 2.1.5
  
  #
  # Possible flags that can be defined in DEFS:
***************
*** 35,40 ****
--- 35,41 ----
  #     -DNO_RPC          if your OS does not support RPC
  #     -DNO_SIGLIST      if your C library does not contain sys_siglist
  #		-DNO_TIMERS			if you don't want to use the timer library
+ #		-DNO_INITIGROUPS	if your OS does not support the initgroups(3) call
  #
  # About signal handling:
  #  Case 1: POSIX signal handling is supported
*** /tmp/dist/xinetd/CHANGELOG	Fri Oct 14 09:49:55 1994
--- xinetd/CHANGELOG	Mon Oct 17 15:35:06 1994
***************
*** 106,108 ****
--- 106,123 ----
  			would cause the forked xinetd process which did the recording to
  			die since it would try to dereference a NULL pointer.
  
+ 
+ 2.1.5:
+ 	Bug fixes:
+ 		1) in exec_server() service descriptor might be closed when
+ 		   execing server. This made it impossible to start servers
+ 			for 'nowait' services.  The bug occurred only Ultrix version
+ 			4.3a or (probably) later (bug discovered and fix provided
+ 			by doug@seas.smu.edu)
+ 		
+ 		2) for systems that supported supplementary group id's, the
+ 			set_credentials() function did not set those group id's
+ 			(they were being inherited from xinetd). Now initgroups(3)
+ 			is called to set the supplementary group id's properly.
+ 			(bug discovered and fix provided by maf+@osu.edu)
+ 
*** /tmp/dist/xinetd/child.c	Fri Oct 14 09:48:19 1994
--- xinetd/child.c	Mon Oct 17 15:34:30 1994
***************
*** 14,19 ****
--- 14,21 ----
  #include <netinet/in.h>
  #include <syslog.h>
  #include <errno.h>
+ #include <pwd.h>
+ #include <fcntl.h>
  
  #include "str.h"
  #include "pset.h"
***************
*** 34,39 ****
--- 36,44 ----
  
  
  
+ /*
+  * This function is running in the new process
+  */
  PRIVATE void exec_server( serp )
  	struct server *serp ;
  {
***************
*** 44,53 ****
--- 49,77 ----
  	char *func = "exec_server" ;
  	void no_control_tty() ;
  
+ 	/*
+ 	 * The following code solves a problem with post-version-4.3
+ 	 * Ultrix systems (the bug was reported, and a fix was provided by
+ 	 * doug@seas.smu.edu; a slightly modified version of this
+ 	 * fix is included here).
+ 	 *
+ 	 * If this is a 'nowait' service, we pass the service descriptor
+ 	 * to the server. Note that we have set the close-on-exec flag
+ 	 * on all service descriptors. It is unclear whether the dup2()
+ 	 * will create a descriptor with the close-on-exec flag set,
+ 	 * so we explicitly clear the flag (since we are doing this
+ 	 * after the fork, it does not affect the descriptor of the
+ 	 * parent process).
+ 	 */
+ 	if ( fcntl( descriptor, F_SETFD, 0 ) == -1 )
+ 		msg( LOG_WARNING, func,
+ 			"fcntl( %d, clear close-on-exec ) failed: %m", descriptor ) ;
+ 
  	if ( debug.on )
  		msg( LOG_DEBUG, func, "duping %d", descriptor ) ;
  
  	for ( fd = 0 ; fd <= MAX_PASS_FD ; fd++ )
+ 	{
  		if ( dup2( descriptor, fd ) == -1 )
  		{
  			msg( LOG_ERR, func,
***************
*** 54,59 ****
--- 78,84 ----
  					"dup2( %d, %d ) failed: %m", descriptor, fd ) ;
  			_exit( 1 ) ;
  		}
+ 	}
  
  	(void) close( descriptor ) ;
  
***************
*** 132,137 ****
--- 157,195 ----
  				msg( LOG_ERR, func, "setgid failed: %m" ) ;
  				_exit( 1 ) ;
  			}
+ 
+ #ifndef NO_INITGROUPS
+ 			/*
+ 			 * Bug discovered by maf+@osu.edu (a bug fix was also provided;
+ 			 * a slightly modified version is included here):
+ 			 *		initgroups was not being invoked to set the remaining
+ 			 *		groups appropriately
+ 			 */
+ 			if ( SC_SPECIFIED( scp, A_USER ) )
+ 			{
+ 				struct passwd *pwd ;
+ 
+ 				/*
+ 				 * Invoke getpwuid() to get the user's name.
+ 				 *
+ 				 * XXX:	we should not need to invoke getpwuid(); we should
+ 				 *			remember the user name in the configuration file.
+ 				 */
+ 				if ( ( pwd = getpwuid( SC_UID( scp ) ) ) == NULL )
+ 				{
+ 					msg( LOG_ERR, func, "getpwuid( %d ) (service=%s) failed: %m",
+ 						SC_UID( scp ), SC_ID( scp ) ) ;
+ 					_exit( 1 ) ;
+ 				}
+ 
+ 				if ( initgroups( pwd->pw_name, pwd->pw_gid ) == -1 )
+ 				{
+ 					msg( LOG_ERR, func, "initgroups( %s, %d ) failed: %m",
+ 						pwd->pw_name, pwd->pw_gid ) ;
+ 					_exit( 1 ) ;
+ 				}
+ 			}
+ #endif	/* ! NO_INITGROUPS */
  		}
  		else
  			msg( LOG_WARNING, func, "can't change gid; not superuser" ) ;
*** /tmp/dist/README	Fri Oct 14 09:47:58 1994
--- README	Fri Oct 14 09:51:41 1994
***************
*** 58,65 ****
        6) No limit on number of server arguments
  
  Q. Where can I find the latest-and-greatest version ?
! A. It should be available via anonymous FTP from mystique.cs.colorado.edu
! 	in the directory "pub/xinetd".
  
  Q. Whom should I thank/blame for this program ?
  A. Any comments about xinetd should be sent to panos@cs.colorado.edu
--- 58,65 ----
        6) No limit on number of server arguments
  
  Q. Where can I find the latest-and-greatest version ?
! A. It should be available via anonymous FTP from ftp.irisa.fr
! 	in the directory "pub/mirrors/xinetd".
  
  Q. Whom should I thank/blame for this program ?
  A. Any comments about xinetd should be sent to panos@cs.colorado.edu

