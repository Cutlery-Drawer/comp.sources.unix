Subject:  v20i014:  Tools for generating software metrics, Part07/14
Newsgroups: comp.sources.unix
Sender: sources
Approved: rsalz@uunet.UU.NET

Submitted-by: Brian Renaud <huron.ann-arbor.mi.us!bdr>
Posting-number: Volume 20, Issue 14
Archive-name: metrics/part07

---- Cut Here and unpack ----
#!/bin/sh
# this is part 7 of a multipart archive
# do not concatenate these parts, unpack them in order with /bin/sh
# file src/halstead/c_halsfilt_c continued
#
CurArch=7
if test ! -r s2_seq_.tmp
then echo "Please unpack part 1 first!"
     exit 1; fi
( read Scheck
  if test "$Scheck" != $CurArch
  then echo "Please unpack part $Scheck next!"
       exit 1;
  else exit 0; fi
) < s2_seq_.tmp || exit 1
echo "x - Continuing file src/halstead/c_halsfilt_c"
sed 's/^X//' << 'SHAR_EOF' >> src/halstead/c_halsfilt_c
X125,0,	125,0,	125,0,	125,0,	
X125,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	125,0,	
X125,0,	125,0,	125,0,	0,0,	
X125,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	125,0,	
X125,0,	125,0,	125,0,	125,0,	
X130,0,	130,0,	130,0,	130,0,	
X130,0,	130,0,	130,0,	130,0,	
X130,136,	130,0,	130,0,	130,0,	
X130,0,	130,0,	130,0,	130,0,	
X130,0,	130,0,	130,0,	130,0,	
X130,0,	130,0,	130,0,	130,0,	
X130,0,	130,0,	130,0,	130,0,	
X130,0,	130,0,	130,0,	0,0,	
X130,0,	130,0,	130,0,	130,136,	
X130,0,	130,0,	130,0,	130,136,	
X130,0,	130,0,	130,0,	130,0,	
X130,0,	130,0,	130,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	130,0,	130,0,	130,0,	
X130,0,	130,0,	130,0,	130,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	130,0,	130,0,	
X130,0,	130,0,	0,0,	130,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	0,0,	0,0,	
X0,0,	0,0,	130,0,	130,0,	
X130,0,	130,0,	130,0,	0,0,	
X0,0};
Xstruct yysvf yysvec[] ={
X0,	0,	0,
Xyycrank+-1,	0,		0,	
Xyycrank+-116,	yysvec+1,	0,	
Xyycrank+0,	0,		yyvstop+1,
Xyycrank+4,	0,		yyvstop+3,
Xyycrank+0,	yysvec+4,	yyvstop+6,
Xyycrank+10,	0,		yyvstop+9,
Xyycrank+-147,	0,		yyvstop+12,
Xyycrank+0,	0,		yyvstop+14,
Xyycrank+-240,	0,		yyvstop+17,
Xyycrank+7,	0,		yyvstop+21,
Xyycrank+8,	0,		yyvstop+24,
Xyycrank+0,	0,		yyvstop+27,
Xyycrank+11,	0,		yyvstop+30,
Xyycrank+0,	yysvec+4,	yyvstop+33,
Xyycrank+12,	0,		yyvstop+36,
Xyycrank+299,	0,		yyvstop+39,
Xyycrank+11,	yysvec+16,	yyvstop+42,
Xyycrank+15,	yysvec+16,	yyvstop+45,
Xyycrank+33,	yysvec+16,	yyvstop+48,
Xyycrank+30,	yysvec+16,	yyvstop+51,
Xyycrank+25,	yysvec+16,	yyvstop+54,
Xyycrank+24,	yysvec+16,	yyvstop+57,
Xyycrank+23,	yysvec+16,	yyvstop+60,
Xyycrank+36,	yysvec+16,	yyvstop+63,
Xyycrank+25,	yysvec+16,	yyvstop+66,
Xyycrank+38,	yysvec+16,	yyvstop+69,
Xyycrank+48,	yysvec+16,	yyvstop+72,
Xyycrank+19,	yysvec+16,	yyvstop+75,
Xyycrank+32,	yysvec+16,	yyvstop+78,
Xyycrank+39,	yysvec+16,	yyvstop+81,
Xyycrank+23,	0,		yyvstop+84,
Xyycrank+209,	0,		yyvstop+87,
Xyycrank+0,	0,		yyvstop+89,
Xyycrank+28,	0,		0,	
Xyycrank+-421,	0,		0,	
Xyycrank+0,	0,		yyvstop+91,
Xyycrank+0,	0,		yyvstop+93,
Xyycrank+0,	yysvec+16,	yyvstop+96,
Xyycrank+33,	yysvec+16,	yyvstop+98,
Xyycrank+49,	yysvec+16,	yyvstop+100,
Xyycrank+43,	yysvec+16,	yyvstop+102,
Xyycrank+66,	yysvec+16,	yyvstop+104,
Xyycrank+55,	yysvec+16,	yyvstop+106,
Xyycrank+64,	yysvec+16,	yyvstop+108,
Xyycrank+-544,	0,		yyvstop+110,
Xyycrank+53,	yysvec+16,	yyvstop+113,
Xyycrank+53,	yysvec+16,	yyvstop+115,
Xyycrank+59,	yysvec+16,	yyvstop+117,
Xyycrank+57,	yysvec+16,	yyvstop+119,
Xyycrank+56,	yysvec+16,	yyvstop+121,
Xyycrank+-671,	0,		yyvstop+123,
Xyycrank+57,	yysvec+16,	yyvstop+126,
Xyycrank+64,	yysvec+16,	yyvstop+128,
Xyycrank+78,	yysvec+16,	yyvstop+130,
Xyycrank+64,	yysvec+16,	yyvstop+132,
Xyycrank+60,	yysvec+16,	yyvstop+134,
Xyycrank+86,	yysvec+16,	yyvstop+136,
Xyycrank+80,	yysvec+16,	yyvstop+138,
Xyycrank+74,	yysvec+16,	yyvstop+140,
Xyycrank+86,	yysvec+16,	yyvstop+142,
Xyycrank+85,	yysvec+16,	yyvstop+144,
Xyycrank+236,	yysvec+32,	yyvstop+146,
Xyycrank+0,	0,		yyvstop+148,
Xyycrank+0,	yysvec+34,	0,	
Xyycrank+0,	yysvec+34,	yyvstop+150,
Xyycrank+204,	0,		0,	
Xyycrank+81,	yysvec+16,	yyvstop+152,
Xyycrank+96,	yysvec+16,	yyvstop+154,
Xyycrank+95,	yysvec+16,	yyvstop+156,
Xyycrank+83,	yysvec+16,	yyvstop+158,
Xyycrank+82,	yysvec+16,	yyvstop+160,
Xyycrank+102,	yysvec+16,	yyvstop+162,
Xyycrank+0,	0,		yyvstop+164,
Xyycrank+104,	yysvec+16,	yyvstop+166,
Xyycrank+102,	yysvec+16,	yyvstop+168,
Xyycrank+103,	yysvec+16,	yyvstop+170,
Xyycrank+109,	yysvec+16,	yyvstop+172,
Xyycrank+97,	yysvec+16,	yyvstop+174,
Xyycrank+-798,	yysvec+51,	yyvstop+176,
Xyycrank+108,	yysvec+16,	yyvstop+179,
Xyycrank+108,	yysvec+16,	yyvstop+181,
Xyycrank+130,	yysvec+16,	yyvstop+183,
Xyycrank+134,	yysvec+16,	yyvstop+185,
Xyycrank+150,	yysvec+16,	yyvstop+187,
Xyycrank+146,	yysvec+16,	yyvstop+189,
Xyycrank+146,	yysvec+16,	yyvstop+191,
Xyycrank+148,	yysvec+16,	yyvstop+193,
Xyycrank+164,	yysvec+16,	yyvstop+195,
Xyycrank+155,	yysvec+16,	yyvstop+197,
Xyycrank+162,	yysvec+16,	yyvstop+199,
Xyycrank+161,	yysvec+16,	yyvstop+201,
Xyycrank+0,	0,		yyvstop+203,
Xyycrank+0,	yysvec+66,	0,	
Xyycrank+-925,	yysvec+51,	yyvstop+205,
Xyycrank+164,	yysvec+16,	yyvstop+208,
Xyycrank+169,	yysvec+16,	yyvstop+210,
Xyycrank+158,	yysvec+16,	yyvstop+212,
Xyycrank+168,	yysvec+16,	yyvstop+214,
Xyycrank+164,	yysvec+16,	yyvstop+216,
Xyycrank+163,	yysvec+16,	yyvstop+218,
Xyycrank+0,	0,		yyvstop+220,
Xyycrank+168,	yysvec+16,	yyvstop+222,
Xyycrank+170,	yysvec+16,	yyvstop+224,
Xyycrank+169,	yysvec+16,	yyvstop+226,
Xyycrank+175,	yysvec+16,	yyvstop+228,
Xyycrank+182,	yysvec+16,	yyvstop+230,
Xyycrank+200,	yysvec+16,	yyvstop+232,
Xyycrank+201,	yysvec+16,	yyvstop+234,
Xyycrank+202,	yysvec+16,	yyvstop+236,
Xyycrank+193,	yysvec+16,	yyvstop+238,
Xyycrank+201,	yysvec+16,	yyvstop+240,
Xyycrank+231,	yysvec+16,	yyvstop+242,
Xyycrank+0,	0,		yyvstop+244,
Xyycrank+223,	yysvec+16,	yyvstop+246,
Xyycrank+226,	yysvec+16,	yyvstop+248,
Xyycrank+234,	yysvec+16,	yyvstop+250,
Xyycrank+226,	yysvec+16,	yyvstop+252,
Xyycrank+222,	yysvec+16,	yyvstop+254,
Xyycrank+229,	yysvec+16,	yyvstop+256,
Xyycrank+238,	yysvec+16,	yyvstop+258,
Xyycrank+242,	yysvec+16,	yyvstop+260,
Xyycrank+226,	yysvec+16,	yyvstop+262,
Xyycrank+239,	yysvec+16,	yyvstop+264,
Xyycrank+243,	yysvec+16,	yyvstop+266,
Xyycrank+-1052,	yysvec+51,	yyvstop+268,
Xyycrank+235,	yysvec+16,	yyvstop+271,
Xyycrank+229,	yysvec+16,	yyvstop+273,
Xyycrank+241,	yysvec+16,	yyvstop+275,
Xyycrank+257,	yysvec+16,	yyvstop+277,
Xyycrank+-1179,	yysvec+51,	yyvstop+279,
Xyycrank+257,	yysvec+16,	yyvstop+282,
Xyycrank+0,	0,		yyvstop+284,
Xyycrank+259,	yysvec+16,	yyvstop+286,
Xyycrank+260,	yysvec+16,	yyvstop+288,
Xyycrank+248,	yysvec+16,	yyvstop+290,
Xyycrank+0,	0,		yyvstop+292,
Xyycrank+290,	yysvec+16,	yyvstop+294,
X0,	0,	0};
Xstruct yywork *yytop = yycrank+1306;
Xstruct yysvf *yybgin = yysvec+1;
Xchar yymatch[] ={
X00  ,01  ,01  ,01  ,01  ,01  ,01  ,01  ,
X01  ,011 ,012 ,01  ,01  ,01  ,01  ,01  ,
X01  ,01  ,01  ,01  ,01  ,01  ,01  ,01  ,
X01  ,01  ,01  ,01  ,01  ,01  ,01  ,01  ,
X011 ,'!' ,01  ,01  ,01  ,'%' ,'!' ,01  ,
X'(' ,')' ,'*' ,'%' ,'!' ,'%' ,'!' ,'%' ,
X'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,'0' ,
X'0' ,'0' ,':' ,':' ,'!' ,'!' ,'!' ,'!' ,
X01  ,'A' ,'A' ,'A' ,'A' ,'A' ,'A' ,'A' ,
X'A' ,'A' ,'A' ,'A' ,'A' ,'A' ,'A' ,'A' ,
X'A' ,'A' ,'A' ,'A' ,'A' ,'A' ,'A' ,'A' ,
X'A' ,'A' ,'A' ,'!' ,01  ,'!' ,'!' ,'A' ,
X01  ,'a' ,'a' ,'a' ,'a' ,'a' ,'a' ,'a' ,
X'a' ,'a' ,'a' ,'a' ,'a' ,'a' ,'a' ,'a' ,
X'a' ,'a' ,'a' ,'a' ,'a' ,'a' ,'a' ,'a' ,
X'a' ,'a' ,'a' ,'{' ,'!' ,'{' ,'!' ,01  ,
X0};
Xchar yyextra[] ={
X0,0,0,0,1,0,0,1,
X1,1,1,1,1,0,0,0,
X0};
X/*	ncform	4.1	83/08/11	*/
X
Xint yylineno =1;
X# define YYU(x) x
X# define NLSTATE yyprevious=YYNEWLINE
Xchar yytext[YYLMAX];
Xstruct yysvf *yylstate [YYLMAX], **yylsp, **yyolsp;
Xchar yysbuf[YYLMAX];
Xchar *yysptr = yysbuf;
Xint *yyfnd;
Xextern struct yysvf *yyestate;
Xint yyprevious = YYNEWLINE;
Xyylook(){
X	register struct yysvf *yystate, **lsp;
X	register struct yywork *yyt;
X	struct yysvf *yyz;
X	int yych;
X	struct yywork *yyr;
X# ifdef LEXDEBUG
X	int debug;
X# endif
X	char *yylastch;
X	/* start off machines */
X# ifdef LEXDEBUG
X	debug = 0;
X# endif
X	if (!yymorfg)
X		yylastch = yytext;
X	else {
X		yymorfg=0;
X		yylastch = yytext+yyleng;
X		}
X	for(;;){
X		lsp = yylstate;
X		yyestate = yystate = yybgin;
X		if (yyprevious==YYNEWLINE) yystate++;
X		for (;;){
X# ifdef LEXDEBUG
X			if(debug)fprintf(yyout,"state %d\n",yystate-yysvec-1);
X# endif
X			yyt = yystate->yystoff;
X			if(yyt == yycrank){		/* may not be any transitions */
X				yyz = yystate->yyother;
X				if(yyz == 0)break;
X				if(yyz->yystoff == yycrank)break;
X				}
X			*yylastch++ = yych = input();
X		tryagain:
X# ifdef LEXDEBUG
X			if(debug){
X				fprintf(yyout,"char ");
X				allprint(yych);
X				putchar('\n');
X				}
X# endif
X			yyr = yyt;
X			if ( (int)yyt > (int)yycrank){
X				yyt = yyr + yych;
X				if (yyt <= yytop && yyt->verify+yysvec == yystate){
X					if(yyt->advance+yysvec == YYLERR)	/* error transitions */
X						{unput(*--yylastch);break;}
X					*lsp++ = yystate = yyt->advance+yysvec;
X					goto contin;
X					}
X				}
X# ifdef YYOPTIM
X			else if((int)yyt < (int)yycrank) {		/* r < yycrank */
X				yyt = yyr = yycrank+(yycrank-yyt);
X# ifdef LEXDEBUG
X				if(debug)fprintf(yyout,"compressed state\n");
X# endif
X				yyt = yyt + yych;
X				if(yyt <= yytop && yyt->verify+yysvec == yystate){
X					if(yyt->advance+yysvec == YYLERR)	/* error transitions */
X						{unput(*--yylastch);break;}
X					*lsp++ = yystate = yyt->advance+yysvec;
X					goto contin;
X					}
X				yyt = yyr + YYU(yymatch[yych]);
SHAR_EOF
echo "End of part 7"
echo "File src/halstead/c_halsfilt_c is continued in part 8"
echo "8" > s2_seq_.tmp
exit 0


