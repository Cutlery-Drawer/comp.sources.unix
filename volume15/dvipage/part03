Subject:  v15i056:  Sun previewer for TeX DVI files, Part03/04
Newsgroups: comp.sources.unix
Sender: sources
Approved: rsalz@uunet.UU.NET

Submitted-by: Neil Hunt <hunt@spar-20.spar.slb.com>
Posting-number: Volume 15, Issue 56
Archive-name: divsun/part03

 Note that parts 2, 3 and 4 of this shar archive describe parts
 of the same file (dvipage.c) and must be unshared in order.

#! /bin/sh
#
# This is a shell archive.  Save this into a file, edit it
# and delete all lines above this comment.  Then give this
# file to sh by executing the command "sh file".  The files
# will be extracted into the current directory owned by
# you with default permissions.
#
# The files contained herein are:
#
# -rw-r--r--  1 hunt        25995 Apr 13 10:39 dvipage.c (part 2)
#
echo 'x (append) - dvipage.c (part 2)'
if test ! -f dvipage.c; then
	echo 'shar: earlier parts of dvipage.c not found; must unshar in order';
else
sed 's/^X//' << '________This_Is_The_END________' >> dvipage.c
X
X/*
X * goto_sheet:
X *	Opens requested sheet on screen.
X */
X
Xbool
Xgoto_sheet(new_sheet)
Xint new_sheet;
X{
X	int sheet;
X
X	if(! check_dvi_file())
X		return FALSE;
X
X	if(verbose & DEBUG_SHEET)
X		fprintf(stderr, "goto_sheet(%d)\n", new_sheet);
X
X	/*
X	 * Check against page limits.
X	 */
X	if(new_sheet <= 0)
X	{
X		message("Attempt to go to sheet %d", new_sheet);
X		return FALSE;
X	}
X
X	/*
X	 * Are we already at the desired page ?
X	 */
X	if(file_sheet == new_sheet)
X		return TRUE;
X
X	/*
X	 * Do we already know where the page is ?
X	 */
X	if(new_sheet < MAX_SHEETS && new_sheet <= last_known_sheet)
X	{
X		fseek(dvifp, sheet_table[new_sheet], 0);
X		file_sheet = new_sheet;
X		return TRUE;
X	}
X
X	/*
X	 * Can't find it directly in the table:
X	 * Go to the last known sheet...
X	 */
X	file_sheet = last_known_sheet;
X	fseek(dvifp, sheet_table[file_sheet], 0);
X
X	/*
X	 * Skip through the rest of the pages to the new page.
X	 */
X	while(file_sheet < new_sheet)
X	{
X		/*
X		 * Check for last page:
X		 * Last page is always returned.
X		 */
X		if(last_sheet && file_sheet >= last_sheet)
X		{
X			file_sheet = last_sheet - 1;
X			fseek(dvifp, sheet_table[file_sheet], 0);
X			return TRUE;
X		}
X
X		/*
X		 * Otherwise, skip this page and look at the next.
X		 */
X		process_page(SKIP);
X	}
X	return TRUE;
X}
X
X/*
X * goto_page:
X *	Opens requested page on screen.
X */
X
Xbool
Xgoto_page(new_page)
Xint new_page;
X{
X	int sheet;
X
X	if(! check_dvi_file())
X		return FALSE;
X
X	if(verbose & DEBUG_SHEET)
X		fprintf(stderr, "goto_page(%d)\n", new_page);
X
X	/*
X	 * Search for page in the table.
X	 */
X	for(sheet = 1; sheet < last_known_sheet; sheet++)
X	{
X		if(sheet_page[sheet] == new_page)
X		{
X			file_sheet = sheet;
X			fseek(dvifp, sheet_table[file_sheet], 0);
X			return TRUE;
X		}
X	}
X
X	/*
X	 * Can't find it directly in the table:
X	 * Go to the last known sheet...
X	 */
X	file_sheet = last_known_sheet;
X	fseek(dvifp, sheet_table[file_sheet], 0);
X
X	/*
X	 * Skip through the rest of the pages to the new page.
X	 */
X	for( ; ; )
X	{
X		/*
X		 * Check for last page:
X		 */
X		if(last_sheet && file_sheet >= last_sheet)
X		{
X			if(new_page == LAST_PAGE)
X			{
X				file_sheet = last_sheet - 1;
X				fseek(dvifp, sheet_table[file_sheet], 0);
X				return TRUE;
X			}
X			else
X				return FALSE;
X		}
X
X		/*
X		 * Otherwise, examine this page.
X		 */
X		sheet = file_sheet;
X		process_page(SKIP);
X
X		/*
X		 * If this was the page, go back,
X		 * and return it.
X		 */
X		if(sheet_page[sheet] == new_page)
X		{
X			file_sheet = sheet;
X			fseek(dvifp, sheet_table[file_sheet], 0);
X			return TRUE;
X		}
X	}
X}
X
X/*
X * DVI file functions.
X * ==================
X */
X
X/*
X * init_dvi_file:
X *	Opens the dvi file, and checks for valid codes etc.
X *	Reads the postamble (if enabled)
X *	Leaves the file pointer at the start of the first page.
X */
X
Xbool
Xinit_dvi_file()
X{
X	int i;
X
X	/*
X	 * Open the file
X	 */
X	if((dvifp = fopen(pathname, "r")) == NULL)
X	{
X		message("Cant open file %s", pathname);
X		return FALSE;
X	}
X
X	/*
X	 * Read the magic number and version number
X	 */
X	if((i = get_unsigned(dvifp, 1)) != PRE)
X	{
X		message("%s: not a dvi file", filename);
X		fclose(dvifp);
X		return FALSE;
X	}
X	if((i = get_signed(dvifp, 1)) != DVIFORMAT)
X	{
X		message("%s: dvi format %d not supported", filename, i);
X		fclose(dvifp);
X		return FALSE;
X	}
X
X	/*
X	 * Make a note of the access time.
X	 */
X	if(fstat(fileno(dvifp), &stat_buf) == 0)
X	{
X		mtime = stat_buf.st_mtime;
X	}
X	else
X	{
X		message("%s: dvifile stat failed.", filename);
X		mtime = 0;
X	}
X
X	if(pre_load)
X	{
X		/*
X		 * Load font information from postable.
X		 */
X		if(! read_postamble())
X		{
X			fclose(dvifp);
X			return FALSE;
X		}
X
X		/*
X		 * Return to start of first page.
X		 */
X		fseek(dvifp, (long)14, 0);
X	}
X	else
X	{
X		/*
X		 * Read basic data from preamble.
X		 */
X		num = get_unsigned(dvifp, 4);
X		den = get_unsigned(dvifp, 4);
X		mag = get_unsigned(dvifp, 4);
X		hconv = vconv = do_convert(num, den, resolution);
X	}
X
X	/*
X	 * Skip i more bytes of preamble.
X	 */
X	i = get_unsigned(dvifp, 1);
X	fseek(dvifp, (long)i, 1);
X
X	/*
X	 * Allocate buffer for the page.
X	 */
X	if(! (page_pr = pr_alloc(&page_mpr,
X	  (int)(page_w * resolution), (int)(page_h * resolution), 1)))
X	{
X		message("Out of memory for image allocation");
X		fclose(dvifp);
X		return FALSE;
X	}
X
X	if(verbose & DEBUG_IMSIZE)
X		fprintf(stderr, "Allocated buffer (%d x %d)\n",
X		  page_pr->pr_width, page_pr->pr_height);
X
X	/*
X	 * Set up the page fseek pointer table.
X	 * We are now at page 0.
X	 */
X	for(i = 0; i < MAX_SHEETS; i++)
X	{
X		sheet_table[i] = 0;
X		sheet_page[i] = BAD_PAGE;
X	}
X	file_sheet = 1;
X	last_sheet = 0;	/* last page == unknown */
X	last_known_sheet = 1;
X	sheet_table[last_known_sheet] = ftell(dvifp);
X
X	if(verbose & DEBUG_SHEET)
X		fprintf(stderr, "sheet_table[%d] = %d\n",
X		  last_known_sheet, ftell(dvifp));
X
X	return TRUE;
X}
X
X/*
X * close_dvi_file:
X *	Cleans up after reading a file.
X */
X
Xvoid
Xclose_dvi_file()
X{
X	if(dvifp == NULL)
X		return;
X
X	/*
X	 * Get rid of image memory.
X	 */
X	sample_pr = pr_free(&sample_mpr);
X	page_pr = pr_free(&page_mpr);
X
X	/*
X	 * close the dvifile.
X	 */
X	fclose(dvifp);
X	dvifp = NULL;
X	mtime = 0;
X
X	/*
X	 * Hack the sheet numbers to prevent access to the file.
X	 */
X	last_sheet = -1;
X	last_known_sheet = -1;
X
X	/*
X	 * Close the fonts and free up memory.
X	 */
X	close_fonts();
X}
X
X/*
X * check_dvi_file:
X *	Checks that this is the same file -- has not been modified since
X *	it was opened.
X */
X
Xbool
Xcheck_dvi_file()
X{
X	if(dvifp == NULL)
X	{
X		message("No dvifile open");
X		return FALSE;
X	}
X
X	if(fstat(fileno(dvifp), &stat_buf) != 0)
X	{
X		message("%s: dvifile fstat failed.", filename);
X		return FALSE;
X	}
X
X	if(stat_buf.st_mtime != mtime)
X	{
X		message("%s: dvifile modified", filename);
X		return FALSE;
X	}
X
X	return TRUE;
X}
X
X/*
X * read_postamble:
X *	This  routine  is  used  to  read  in  the  postamble  values.	It
X *	initializes the magnification and checks  the stack height prior  to
X *	starting printing the document.
X */
X
Xbool
Xread_postamble()
X{
X	if(! check_dvi_file())
X		return FALSE;
X
X	if(! find_postamble_ptr (&postambleptr))
X		return FALSE;
X
X	if(get_unsigned(dvifp, 1) != POST)
X	{
X		message("%s: bad dvi file: no POST at head of postamble",
X		  filename);
X		return FALSE;
X	}
X
X	(void)get_unsigned(dvifp, 4); /* discard last page pointer */
X	num = get_unsigned(dvifp, 4);
X	den = get_unsigned(dvifp, 4);
X	mag = get_unsigned(dvifp, 4);
X	hconv = vconv = do_convert(num, den, resolution);
X
X	get_unsigned(dvifp, 4);	/* height-plus-depth of tallest page */
X	get_unsigned(dvifp, 4);	/* width of widest page */
X
X	if(get_unsigned(dvifp, 2) >= STACKSIZE)
X	{
X		message("%s: bad dvi file: stack is too large",
X		  filename);
X		return FALSE;
X	}
X
X	/* last_sheet = */ get_unsigned(dvifp, 2);
X
X	if(! get_font_def())
X		return FALSE;
X
X	return TRUE;
X}
X
X/*
X * find_post_amble_ptr
X *	Move to the end of the dvifile and find the start of the postamble.
X */
X
Xbool
Xfind_postamble_ptr(postambleptr)
Xlong *postambleptr;
X{
X	int i;
X
X	fseek(dvifp, (long) 0, 2);
X	*postambleptr = ftell(dvifp) - 4;
X	fseek(dvifp, *postambleptr, 0);
X
X	for( ; ; )
X	{
X		fseek(dvifp, --(*postambleptr), 0);
X		if(((i = get_unsigned(dvifp, 1)) != 223) && (i != DVIFORMAT))
X		{
X			message(
X  "%s: Bad dvi file: bad end of file", filename);
X			return FALSE;
X		}
X		if (i == DVIFORMAT)
X			break;
X	}
X
X	fseek(dvifp, (*postambleptr) - 4, 0);
X	*postambleptr = get_unsigned(dvifp, 4);
X	fseek(dvifp, *postambleptr, 0);
X
X	return TRUE;
X}
X
X/*
X * process_page:
X *	Rasterises the next page in the dvifile into page_mpr.
X *	Leaves the file pointer at the start of the next page.
X *
X *	If skip mode is true, then nothing is actually drawn, the commands
X *	are interpreted only for the side effect of moving the filepointer
X *	to the next page.
X */
X
Xbool
Xprocess_page(skip_mode)
Xregister bool skip_mode;
X{
X	int command;	    /* current command			     */
X	register int i;	    /* command parameter; loop index	     */
X	int k;		    /* temporary parameter		     */
X	int val, val2;      /* temporarys to hold command information*/
X	int w;		    /* current horizontal spacing	     */
X	int x;		    /* current horizontal spacing	     */
X	int y;		    /* current vertical spacing		     */
X	int z;		    /* current vertical spacing		     */
X	int counter[10];
X	int sp;		    /* stack pointer			     */
X	static struct stack_entry stack[STACKSIZE];   /* stack */
X
X	if(! check_dvi_file())
X		return FALSE;
X
X	if(verbose & DEBUG_SHEET)
X		fprintf(stderr, "sheet %d starts at %d\n",
X		  file_sheet, ftell(dvifp));
X
X	while((command = get_unsigned(dvifp, 1)) != EOP)
X	{
X		switch(command)
X		{
X
X		case SET1:
X		case SET2:
X		case SET3:
X		case SET4:
X			val = get_unsigned(dvifp, command-SET1+1);
X			if(! skip_mode)
X				set_char(val, command);
X			break;
X
X		case SET_RULE:
X			val = get_unsigned(dvifp, 4);
X			val2 = get_unsigned(dvifp, 4);
X			if(! skip_mode)
X				set_rule(val, val2, 1);
X			break;
X
X		case PUT1:
X		case PUT2:
X		case PUT3:
X		case PUT4:
X			val = get_unsigned(dvifp,command-PUT1+1);
X			if(! skip_mode)
X				set_char(val, command);
X			break;
X
X		case PUT_RULE:
X			val = get_unsigned(dvifp, 4);
X			val2 = get_unsigned(dvifp, 4);
X			if(! skip_mode)
X				set_rule(val, val2, 0);
X			break;
X
X		case NOP:
X			break;
X
X		case BOP:
X			/*
X			 * These are the 10 counters.
X			 * Discard previous page pointer.
X			 */
X			for(i=0; i<10; i++)
X				counter[i] = get_unsigned(dvifp, 4);
X			(void)get_unsigned(dvifp, 4);
X
X			/*
X			 * The first counter is the page number.
X			 */
X			disp_page = counter[0];
X			if(file_sheet < MAX_SHEETS)
X				sheet_page[file_sheet] = disp_page;
X
X			/*
X			 * Show what is happening.
X			 */
X			sprintf(label, "%s:   File \"%s\"   Page %d   %s",
X			  DVIPAGE_LABEL, filename,
X			  disp_page, (skip_mode) ? "Skipping" : "Processing");
X			window_set(disp_frame,
X			  FRAME_LABEL, label,
X			  0);
X
X			if(! skip_mode)
X			{
X				/*
X				 * Clear the page
X				 */
X				pr_rop(page_pr, 0, 0,
X				  page_pr->pr_width, page_pr->pr_height,
X				  PIX_CLR, NULL, 0, 0);
X
X				/*
X				 * Mark the edges of the page
X				 */
X				pr_rect(page_pr, 0, 0,
X				  (int)(page_w * resolution),
X				  (int)(page_h * resolution),
X				  3, PIX_SET, 1);
X
X				/*
X				 * Mark the nominal page window.
X				 */
X				if(show_page_frame)
X				{
X					pr_rect(page_pr, 0+origin_x, 0+origin_y,
X					  (int)(page_w*resolution) - 2*origin_x,
X					  (int)(page_h*resolution) - 2*origin_y,
X					  1, PIX_SET, 1);
X				}
X			}
X
X			h = v = w = x = y = z = 0;
X			sp = 0;
X			fontptr = NULL;
X			break;
X
X		case PUSH:
X			if (sp >= STACKSIZE)
X			{
X				message(
X  "%s: Bad dvi file: stack overflow",
X				  filename);
X				return FALSE;
X			}
X			stack[sp].h = h;
X			stack[sp].v = v;
X			stack[sp].w = w;
X			stack[sp].x = x;
X			stack[sp].y = y;
X			stack[sp].z = z;
X			sp++;
X			break;
X
X		case POP:
X			--sp;
X			if (sp < 0)
X			{
X				message(
X  "%s: Bad dvi file: stack underflow",
X				  filename);
X				return FALSE;
X			}
X			h = stack[sp].h;
X			v = stack[sp].v;
X			w = stack[sp].w;
X			x = stack[sp].x;
X			y = stack[sp].y;
X			z = stack[sp].z;
X			break;
X
X		case RIGHT1:
X		case RIGHT2:
X		case RIGHT3:
X		case RIGHT4:
X			val = get_signed(dvifp,command-RIGHT1+1);
X			if(! skip_mode)
X				move_over(val);
X			break;
X
X		case W0:
X			if(! skip_mode)
X				move_over(w);
X			break;
X
X		case W1:
X		case W2:
X		case W3:
X		case W4:
X			w = get_signed(dvifp,command-W1+1);
X			if(! skip_mode)
X				move_over(w);
X			break;
X
X		case X0:
X			if(! skip_mode)
X				move_over(x);
X			break;
X
X		case X1:
X		case X2:
X		case X3:
X		case X4:
X			x = get_signed(dvifp,command-X1+1);
X			if(! skip_mode)
X				move_over(x);
X			break;
X
X		case DOWN1:
X		case DOWN2:
X		case DOWN3:
X		case DOWN4:
X			val = get_signed(dvifp,command-DOWN1+1);
X			if(! skip_mode)
X				move_down(val);
X			break;
X
X		case Y0:
X			if(! skip_mode)
X				move_down(y);
X			break;
X
X		case Y1:
X		case Y2:
X		case Y3:
X		case Y4:
X			y = get_signed(dvifp,command-Y1+1);
X			if(! skip_mode)
X				move_down(y);
X			break;
X
X		case Z0:
X			if(! skip_mode)
X				move_down(z);
X			break;
X
X		case Z1:
X		case Z2:
X		case Z3:
X		case Z4:
X			z = get_signed(dvifp,command-Z1+1);
X			if(! skip_mode)
X				move_down(z);
X			break;
X
X		case FNT1:
X		case FNT2:
X		case FNT3:
X		case FNT4:
X			if(! skip_mode)
X				set_font_num(
X				  get_unsigned(dvifp,command-FNT1+1));
X			break;
X
X		case XXX1:
X		case XXX2:
X		case XXX3:
X		case XXX4:
X			k = get_unsigned(dvifp,command-XXX1+1);
X			while(k--)
X				get_unsigned(dvifp, 1);
X			break;
X
X		case FNT_DEF1:
X		case FNT_DEF2:
X		case FNT_DEF3:
X		case FNT_DEF4:
X			if(pre_load)
X				skip_font_def(
X				  get_unsigned(dvifp, command-FNT_DEF1+1));
X			else
X				read_font_def(
X				  get_unsigned(dvifp, command-FNT_DEF1+1));
X			break;
X
X		case PRE:
X			message(
X  "%s: Bad dvi file: preamble found within main section",
X			  filename);
X			return FALSE;
X
X		case POST:
X			fseek(dvifp, (long) -1, 1);
X			last_sheet = file_sheet;
X
X			/*
X			 * We have done nothing, so there is no need to
X			 * resample the page or increment the page counter.
X			 */
X			return FALSE;
X
X		case POST_POST:
X			message(
X  "%s: Bad dvi file: postpostamble found within main section",
X			  filename);
X			return FALSE;
X
X		default:
X			if(command >= FONT_00 && command <= FONT_63)
X			{
X				if(! skip_mode)
X					set_font_num(command - FONT_00);
X			}
X			else if(command >= SETC_000 && command <= SETC_127)
X			{
X				if(! skip_mode)
X					set_char(command - SETC_000, command);
X			}
X			else
X			{
X				message(
X  "%s: Bad dvi file: undefined command (%d) found",
X				  filename, command);
X				return FALSE;
X			}
X		}
X	}
X
X	/*
X	 * End of page.
X	 */
X	if(! skip_mode)
X	{
X		/*
X		 * Sample the page.
X		 */
X		sample_page();
X		disp_sheet = file_sheet;
X	}
X
X	/*
X	 * The file is now at the start of the next page.
X	 */
X	file_sheet++;
X	if(file_sheet > last_known_sheet)
X	{
X		if(file_sheet < MAX_SHEETS)
X		{
X			last_known_sheet = file_sheet;
X			sheet_table[file_sheet] = ftell(dvifp);
X		}
X
X		if(verbose & DEBUG_SHEET)
X			fprintf(stderr, "sheet %d starts at %d\n",
X			  file_sheet, ftell(dvifp));
X	}
X
X	return TRUE;
X}
X
X/*
X * Draw and Move Functions.
X * ========================
X */
X
X/*
X * set_char:
X */
X
Xint buf[8];
X
Xvoid
Xset_char(c, command)
Xint c, command;
X{
X	register struct char_entry *ptr;  /* temporary char_entry pointer */
X	int k;
X
X	ptr = &(fontptr->ch[c]);
X	hh = pix_round(h, hconv);
X	vv = pix_round(v, vconv);
X	if(!ptr->where.isloaded)
X		if(! load_char(ptr))
X			return;
X
X	pr_rop(page_pr, hh-ptr->xOffset+origin_x, vv-ptr->yOffset+origin_y,
X	  ptr->width, ptr->height, PIX_SRC | PIX_DST,
X	  ptr->where.address.pixrectptr, 0, 0);
X
X	if(command <= SET4)
X		h += ptr->tfmw;
X
X	return;
X}
X
X/*
X * load_char:
X */
X
Xbool
Xload_char(ptr)
Xregister struct char_entry *ptr;
X{
X	register struct pixrect *pr;
X	register int nshorts, i, col, nints;
X	register short *dp, *sp;
X
X	if(ptr->where.address.fileOffset == 0)
X	{
X		ptr->where.address.pixrectptr = NULL;
X		return FALSE;
X	}
X
X	if(! open_font_file())
X		return FALSE;
X
X	fseek(pxlfp, ptr->where.address.fileOffset, 0);
X	pr = mem_create(ptr->width, ptr->height, 1);
X	nshorts = mpr_mdlinebytes(pr) >> 1;
X	nints = (ptr->width + 31) >> 5;
X	dp = mpr_d(pr)->md_image;
X	for(col = 0; col < ptr->height; col++)
X	{
X		fread(buf, 4, nints, pxlfp);
X		sp = (short *) &buf[0];
X		for(i = nshorts; i > 0; i--)
X			*dp++ = *sp++;
X	}
X	ptr->where.address.pixrectptr = pr;
X	ptr->where.isloaded = TRUE;
X
X	return TRUE;
X}
X
X/*
X * set_rule:
X *	This routine will draw a rule on the screen
X */
X
Xvoid
Xset_rule(a, b, Set)
Xint a, b;
Xbool Set;
X{
X	int ehh, evv;
X
X	hh = pix_round(h, hconv);
X	vv = pix_round(v-a, vconv);
X	ehh = pix_round(h + b, hconv);
X	evv = pix_round(v, vconv);
X
X	if(hh == ehh)
X		ehh++;
X	if(vv == evv)
X		vv--;
X	if((a > 0) && (b > 0))
X		pr_rop(page_pr, hh+origin_x, vv+origin_y,
X		  ehh-hh, evv-vv, PIX_SET, NULL, 0, 0);
X	if(Set)
X	{
X		h += b;
X/*		v += a; */
X	}
X}
X
X/*
X * move_down:
X */
X
Xvoid
Xmove_down(a)
Xint a;
X{
X	v += a;
X}
X
X
X/*
X * move_over:
X */
X
Xvoid
Xmove_over(b)
Xint b;
X{
X	h += b;
X}
X
X/*
X * set_font_num:/
X *	This routine is used to specify the font to be used in printing future
X *	chars.
X */
X
Xvoid
Xset_font_num(k)
Xint k;
X{
X	fontptr = hfontptr;
X	while((fontptr!=NULL) && (fontptr->k!=k))
X		fontptr = fontptr->next;
X
X	if(fontptr == NULL)
X		message("Font %d undefined", k);
X}
X
X/*
X * Font functions
X * ==============
X */
X
X/*
X * get_font_def:
X *	Read the font  definitions as they  are in the  postamble of the  DVI
X *	file.  Note that the font directory  is not yet loaded.  In order  to
X *	adapt ourselves to the existing "verser" the following font paramters
X *	are  copied   onto   output   fontno  (4   bytes),  chksum,  fontmag,
X *	fontnamelength (1 byte), fontname.  At the end, a -1 is put onto  the
X *	file.
X */
X
Xbool
Xget_font_def()
X{
X	char	str[50], *calloc ();
X	unsigned char   byte;
X	int	 i, fnamelen;
X
X	while(((byte = get_unsigned(dvifp, 1)) >= FNT_DEF1) &&
X	  (byte <= FNT_DEF4))
X	{
X		switch (byte)
X		{
X		case FNT_DEF1:
X			if(! read_font_def (get_unsigned(dvifp, 1)))
X				return FALSE;
X			break;
X
X		case FNT_DEF2:
X			if(! read_font_def (get_unsigned(dvifp, 2)))
X				return FALSE;
X			break;
X
X		case FNT_DEF3:
X			if(! read_font_def (get_unsigned(dvifp, 3)))
X				return FALSE;
X			break;
X
X		case FNT_DEF4:
X			if(! read_font_def (get_unsigned(dvifp, 4)))
X				return FALSE;
X			break;
X
X		default:
X			message(
X  "%s: Bad dvi file: bad font specification", filename);
X			return FALSE;
X		}
X	}
X	if(byte != POST_POST)
X	{
X		message(
X  "%s: Bad dvi file: no postpostamble after fontdefs", filename);
X		return FALSE;
X	}
X
X	return TRUE;
X}
X
X/*
X * close_fonts:
X *	Closes all the font files, and frees up all the memory.
X */
X
Xvoid
Xclose_fonts()
X{
X	register struct font_entry *pf, *next;
X	register struct pixrect *pr;
X	register int i;
X
X	for(pf = hfontptr; pf; pf = next)
X	{
X		if(verbose & DEBUG_FONTS)
X			fprintf(stderr, "Freeing font %s\n", pf->name);
X
X		if(pf->font_file_fd)
X			fclose(pf->font_file_fd);
X
X		for(i = 0; i < NPXLCHARS; i++)
X		{
X			if(pf->ch[i].where.isloaded == TRUE)
X			{
X				pr = pf->ch[i].where.address.pixrectptr;
X				pr_destroy(pr);
X			}
X		}
X
X		free(pf);
X
X		next = pf->next;
X	}
X
X	pfontptr = NULL;
X	hfontptr = NULL;
X	fontptr = NULL;
X
X	if(verbose & DEBUG_FONTS)
X		fprintf(stderr, "Closing %d font files\n", nopen);
X
X	for(i = 0; i <= nopen; i++)
X	{
X		fclose(pixel_files[i].pixel_file_fd);
X		pixel_files[i].pixel_file_fd = NULL;
X		pixel_files[i].use_count = 0;
X	}
X
X	nopen = 0;
X}
X
X/*
X * read_font_def:
X */
X
Xbool
Xread_font_def(k)
Xint k;
X{
X	int t, i;
X	register struct font_entry *tfontptr;	/* temporary pointer */
X	register struct char_entry *tcharptr;/* temporary char_entry pointer */
X	char *direct, *tcp, *tcp1;
X	int found;
X	char curarea[STRSIZE];
X
X	if((tfontptr = (struct font_entry *)calloc(1,
X	  sizeof(struct font_entry)))
X	  == NULL)
X	{
X		message("Out of memory for font entries");
X		return FALSE;
X	}
X	tfontptr->next = hfontptr;
X	fontptr = hfontptr = tfontptr;
X
X	tfontptr->k = k;
X	tfontptr->c = get_unsigned(dvifp, 4); /* checksum */
X	tfontptr->s = get_unsigned(dvifp, 4); /* space size */
X	tfontptr->d = get_unsigned(dvifp, 4); /* design size */
X	tfontptr->a = get_unsigned(dvifp, 1); /* area length for font name */
X	tfontptr->l = get_unsigned(dvifp, 1); /* device length */
X	fread(tfontptr->n, 1, tfontptr->a+tfontptr->l, dvifp);
X	tfontptr->n[tfontptr->a+tfontptr->l] = '\0';
X	tfontptr->font_space = tfontptr->s/6; /* never used */
X	tfontptr->font_mag = (int)((actual_factor((int)(((float)tfontptr->s/
X				(float)tfontptr->d)*1000.0 + 0.5)) * 
X#ifdef USEGLOBALMAG
X			actual_factor(mag) *
X#endif
X			(float)resolution * 5.0) + 0.5);
X	if (tfontptr->a != 0)
X		sprintf(tfontptr->name,
X		  "%s.%dpxl", tfontptr->n, tfontptr->font_mag);
X	else
X	{
X		direct = pxl_path;
X		found = FALSE;
X		do
X		{ 
X			tcp = index(direct, ':');
X			if(tcp == NULL)
X				tcp = strlen(direct) + direct;
X			strncpy(curarea, direct, tcp-direct);
X			tcp1 = curarea + (tcp - direct);
X			*tcp1++ = '/';
X			*tcp1++ = '\0';
X
X			sprintf(tfontptr->name, "%s%s.%dpxl",
X			  curarea, tfontptr->n, tfontptr->font_mag);
X			found = (access(tfontptr->name, READ) == 0);
X			if(*tcp)
X				direct = tcp + 1;
X			else
X				direct = tcp;
X		}
X		while( !found && *direct != '\0');
X	}
X	if(tfontptr != pfontptr)
X	{
X		if(! open_font_file())
X			return FALSE;
X	}
X
X	if((t = get_unsigned(pxlfp, 4)) != PXLID)
X	{
X		message("Bad PXL file version %d", t);
X		return FALSE;
X	}
X	fseek(pxlfp, -20, 2);
X	t = get_unsigned(pxlfp, 4);
X	if((tfontptr->c != 0) && (t != 0) && (tfontptr->c != t))
X		message("Bad PXL checksum, %s", tfontptr->name);
X
X	tfontptr->magnification = get_unsigned(pxlfp, 4);
X	tfontptr->designsize = get_unsigned(pxlfp, 4);
X
X	fseek(pxlfp, get_unsigned(pxlfp, 4) * 4, 0);
X
X	for(i = FIRSTPXLCHAR; i <= LASTPXLCHAR; i++)
X	{
X		tcharptr = &(tfontptr->ch[i]);
X		tcharptr->width = get_unsigned(pxlfp, 2);
X		tcharptr->height = get_unsigned(pxlfp, 2);
X		tcharptr->xOffset= get_signed(pxlfp, 2);
X		tcharptr->yOffset = get_signed(pxlfp, 2);
X		tcharptr->where.isloaded = FALSE;
X		tcharptr->where.address.fileOffset = get_unsigned(pxlfp, 4) * 4;
X		tcharptr->tfmw =
X		  ((float)get_unsigned(pxlfp, 4)*(float)tfontptr->s) /
X		  (float)(1<<20);
X	}
X
X	return TRUE;
X}
X
X
X/*
X * open_font_file:
X *	The original version of this dvi driver reopened the font file  each
X *	time the font changed, resulting in an enormous number of relatively
X *	expensive file  openings.   This version  keeps  a cache  of  up  to
X *	MAXOPEN open files,  so that when  a font change  is made, the  file
X *	pointer, pxlfp, can  usually be  updated from the  cache.  When  the
X *	file is not found in  the cache, it must  be opened.  In this  case,
X *	the next empty slot  in the cache  is assigned, or  if the cache  is
X *	full, the least used font file is closed and its slot reassigned for
X *	the new file.  Identification of the least used file is based on the
X *	counts of the number  of times each file  has been "opened" by  this
X *	routine.  On return, the file pointer is always repositioned to  the
X *	beginning of the file.
X */
X
Xbool
Xopen_font_file()
X{
X	register int i,least_used,current;
X
X	if(pfontptr == fontptr)
X		return TRUE;
X
X	/*
X	 * Search open list for file.
X	 */
X	for(current = 1; current <= nopen; current++)
X		if(pixel_files[current].pixel_file_fd == fontptr->font_file_fd)
X			break;
X
X	if(current <= nopen)
X	{
X		/*
X		 * If it is already open
X		 * reposition to start of file
X		 */
X		pxlfp = pixel_files[current].pixel_file_fd;
X		fseek(pxlfp,0,0);
X
X		if(verbose & DEBUG_FONTS)
X			fprintf(stderr, "Found (%x, %d) font '%s'\n",
X			  pxlfp, current, fontptr->name);
X	}
X	else
X	{
X		/*
X		 * If less than MAXOPEN, then just open it.
X		 */
X		if(nopen < MAXOPEN)
X			current = ++nopen;
X		else
X		{
X			/*
X			 * Close least recently used ?
X			 */
X			register struct font_entry *p = hfontptr;/* {1} */
X
X			least_used = 1;
X			for(i = 2; i <= MAXOPEN; ++i)
X				if(pixel_files[least_used].use_count >
X				  pixel_files[i].use_count)
X					least_used = i;
X
X			while(p->font_file_fd !=
X			  pixel_files[least_used].pixel_file_fd )
X				p = p->next;			/* {1} */
X
X			if(verbose & DEBUG_FONTS)
X				fprintf(stderr, "Closing (%x, %d) font '%s'\n",
X				  p->font_file_fd, least_used, p->name);
X
X			p->font_file_fd = NULL;		/* {1} */
X			fclose(pixel_files[least_used].pixel_file_fd);
X			current = least_used;
X		}
X
X		/*
X		 * Open the file.
X		 */
X		if((pxlfp=fopen(fontptr->name,"r")) == NULL)
X		{
X			message("Cant open PXL file %s", fontptr->name);
X			return FALSE;
X		}
X		else
X		{
X			if(verbose & DEBUG_FONTS)
X				fprintf(stderr, "Opened (%x, %d) font '%s'\n",
X				  pxlfp, current, fontptr->name);
X		}
X
X		pixel_files[current].pixel_file_fd = pxlfp;
X		pixel_files[current].use_count = 0;
X	}
X	pfontptr = fontptr;		/* make previous = current font */
X	fontptr->font_file_fd = pxlfp;	/* set file identifier */
X	pixel_files[current].use_count++;	/* update reference count */
X
X	return TRUE;
X}
X
X/*
X * skip_font_def:
X *	Ignore font definition when fonts have been read from the postamble.
X */
X
Xvoid
Xskip_font_def(k)
Xint k;
X{
X	int a, l;
X	char n[STRSIZE];
X
X	get_unsigned(dvifp, 4);
X	get_unsigned(dvifp, 4);
X	get_unsigned(dvifp, 4);
X	a = get_unsigned(dvifp, 1);
X	l = get_unsigned(dvifp, 1);
X	fseek(dvifp, a+l, 1);
X}
X
X/*
X * Utility Functions.
X * =================
X */
X
X/*
X * pix_round:
X */
X
Xint
Xpix_round(x, conv)	/* return rounded number of pixels */
Xregister int x;		/* in DVI units	 */
Xint conv;		/* conversion factor */
X{
X	return((int)((x + (conv >> 1)) / conv));
X}
X
X/*
X * get_unsigned:
X *
X */
X
Xint
Xget_unsigned(fp, n)	/* return n byte quantity from file fd */
Xregister FILE *fp;	/* file pointer	*/
Xregister int n;		/* number of bytes */
X{
X	register int x;	/* number being constructed */
X
X	x = 0;
X	while (n--)
X	{
X		x <<= 8;
X		x |= getc(fp);
X	}
X
X	return(x);
X}
X
X/*
X * get_signed:
X *
X */
X
Xint
Xget_signed(fp, n)   /* return n byte quantity from file fd */
Xregister FILE *fp;  /* file pointer	*/
Xregister int n;	 /* number of bytes */
X{
X	int n1;		 /* number of bytes		*/
X	register int x; /* number being constructed */
X
X	x = getc(fp);   /* get first (high-order) byte */
X	n1 = n--;
X	while (n--)
X	{
X		x <<= 8;
X		x |= getc(fp);
X	}
X
X	/* NOTE: This code assumes that the right-shift is an arithmetic, rather
X	than logical, shift which will propagate the sign bit right.   According
X	to Kernighan and Ritchie, this is compiler dependent! */
X
X	x<<=32-8*n1;
X	x>>=32-8*n1;  /* sign extend */
X
X	return(x);
X}
X
X/*
X * actual_factor:
X *	compute the actual size factor given the approximation.
X */
X
Xdouble
Xactual_factor(unmodsize)
Xint unmodsize;  /* actually factor * 1000 */
X{
X	float realsize;	/* the actual magnification factor */
X
X	realsize = (float)unmodsize / 1000.0;
X	/* a real hack to correct for rounding in some cases--rkf */
X	if(unmodsize==1095) realsize = 1.095445;	/*stephalf*/
X	else if(unmodsize==1315) realsize=1.314534;	/*stepihalf*/
X	else if(unmodsize==2074) realsize=2.0736;	/*stepiv*/
X	else if(unmodsize==2488) realsize=2.48832;  /*stepv*/
X	else if(unmodsize==2986) realsize=2.985984;	/*stepiv*/
X	/* the remaining magnification steps are represented with sufficient
X	   accuracy already */
X	return(realsize);
X}
X
X
X/*
X * do_convert
X */
X
Xint
Xdo_convert(num, den, convResolution)
Xint num;
Xint den;
Xint convResolution;
X{
X	register float conv;
X	conv = ((float)num/(float)den) * 
X#ifdef USEGLOBALMAG
X/*	actual_factor(mag) * why was this in as Actual Factor?  jls */
X	((float) mag/1000.0) *
X#endif
X	((float)convResolution/254000.0);
X	return((int) (1.0 / conv + 0.5));
X}
________This_Is_The_END________
if test `wc -c < dvipage.c` -ne 61849; then
	echo 'shar: dvipage.c was damaged during transit (should have been 61849 bytes)'
fi
fi		; : end of overwriting check
exit 0

