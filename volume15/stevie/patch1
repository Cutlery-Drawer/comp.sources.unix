Subject:  v15i042:  Missing header file for "stevie" editor, Patch1
Newsgroups: comp.sources.unix
Sender: sources
Approved: rsalz@uunet.UU.NET

Submitted-by: Tony Andrews <onecom!wldrdg!tony>
Posting-number: Volume 15, Issue 42
Archive-name: stevie/patch1

[  My mistake, sorry.  -r$  ]

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of shell archive."
# Contents:  stevie.h
# Wrapped by rsalz@fig.bbn.com on Tue Jun  7 14:12:01 1988
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'stevie.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'stevie.h'\"
else
echo shar: Extracting \"'stevie.h'\" \(4557 characters\)
sed "s/^X//" >'stevie.h' <<'END_OF_FILE'
X/*
X * STevie - ST editor for VI enthusiasts.    ...Tim Thompson...twitch!tjt...
X *
X * Extensive modifications by:  Tony Andrews       onecom!wldrdg!tony
X *
X */
X
X/*
X * One (and only 1) of the following defines should be uncommented.
X * Most of the code is pretty machine-independent. Machine dependent
X * code goes in a file like tos.c or unix.c. The only other place
X * where machine dependent code goes is term.h for escape sequences.
X */
X
X#define	ATARI			/* For the Atari ST */
X/* #define	UNIX			/* System V */
X/* #define	OS2			/* Microsoft OS/2 */
X
X/*
X * If ATARI is defined, one of the following compilers must be selected.
X */
X#ifdef	ATARI
X#define	MEGAMAX			/* Megamax Compiler */
X/* #define	ALCYON		/* Alcyon C compiler */
X#endif
X
X/*
X * If HELP is defined, the :help command shows a vi command summary.
X */
X#define	HELP			/* enable help command */
X
X#include <stdio.h>
X#include <ctype.h>
X#include <string.h>
X#include "ascii.h"
X#include "keymap.h"
X#include "param.h"
X#include "term.h"
X
Xextern	char	*strchr();
X
X#define NORMAL 0
X#define CMDLINE 1
X#define INSERT 2
X#define APPEND 3
X#define FORWARD 4
X#define BACKWARD 5
X
X/*
X * Boolean type definition and constants
X */
Xtypedef	short	bool_t;
X
X#ifndef	TRUE
X#define	FALSE	(0)
X#define	TRUE	(1)
X#endif
X
X/*
X * SLOP is the amount of extra space we get for text on a line during
X * editing operations that need more space. This keeps us from calling
X * malloc every time we get a character during insert mode. No extra
X * space is allocated when the file is initially read.
X */
X#define	SLOP	10
X
X/*
X * LINEINC is the gap we leave between the artificial line numbers. This
X * helps to avoid renumbering all the lines every time a new line is
X * inserted.
X */
X#define	LINEINC	10
X
X/*
X * See 'normal.c' for a description of can_undo.
X */
Xextern	bool_t	can_undo;
X
X#define CHANGED Changed = !(can_undo = FALSE)
X#define UNCHANGED Changed=0
X
Xstruct	line {
X	struct	line	*prev, *next;	/* previous and next lines */
X	char	*s;			/* text for this line */
X	int	size;			/* actual size of space at 's' */
X	unsigned int	num;		/* line "number" */
X};
X
X#define	LINEOF(x)	(x->linep->num)
X
Xstruct	lptr {
X	struct	line	*linep;		/* line we're referencing */
X	int	index;			/* position within that line */
X};
X
Xtypedef	struct line	LINE;
Xtypedef	struct lptr	LPTR;
X
Xstruct charinfo {
X	char ch_size;
X	char *ch_str;
X};
X
Xextern struct charinfo chars[];
X
Xextern int State;
Xextern int Rows;
Xextern int Columns;
Xextern char *Realscreen;
Xextern char *Nextscreen;
Xextern char *Filename;
Xextern LPTR *Filemem;
Xextern LPTR *Fileend;
Xextern LPTR *Topchar;
Xextern LPTR *Botchar;
Xextern LPTR *Curschar;
Xextern LPTR *Insstart;
Xextern int Cursrow, Curscol, Cursvcol, Curswant;
Xextern bool_t set_want_col;
Xextern int Prenum;
Xextern bool_t Debug;
Xextern bool_t Changed;
Xextern bool_t Binary;
Xextern char Redobuff[], Undobuff[], Insbuff[];
Xextern LPTR *Uncurschar;
Xextern char *Insptr;
Xextern int Ninsert, Undelchars;
X
Xextern char *malloc(), *strcpy();
X
X/*
X * alloc.c
X */
Xchar	*alloc(), *strsave();
Xvoid	screenalloc(), filealloc(), freeall();
XLINE	*newline();
Xbool_t	bufempty(), buf1line(), lineempty(), endofline(), canincrease();
X
X/*
X * cmdline.c
X */
Xvoid	readcmdline(), dotag(), msg(), emsg(), smsg(), gotocmd(), wait_return();
X
X/*
X * edit.c
X */
Xvoid	edit(), insertchar(), getout(), scrollup(), scrolldown(), beginline();
Xbool_t	oneright(), oneleft(), oneup(), onedown();
X
X/*
X * fileio.c
X */
Xvoid	filemess(), renum();
Xbool_t	readfile(), writeit();
X
X/*
X * help.c
X */
Xbool_t	help();
X
X/*
X * linefunc.c
X */
XLPTR	*nextline(), *prevline(), *coladvance();
X
X/*
X * main.c
X */
Xvoid	stuffin(), stuffnum(), addtobuff();
Xint	vgetc(), vpeekc();
Xbool_t	anyinput();
X
X/*
X * mark.c
X */
Xvoid	setpcmark(), clrall(), clrmark();
Xbool_t	setmark();
XLPTR	*getmark();
X
X/*
X * misccmds.c
X */
Xvoid	opencmd(), fileinfo(), inschar(), insstr(), delline();
Xbool_t	delchar();
Xint	cntllines(), plines();
XLPTR	*gotoline();
X
X/*
X * normal.c
X */
Xvoid	normal(), resetundo();
Xchar	*mkstr();
X
X/*
X * param.c
X */
Xvoid	doset();
X
X/*
X * ptrfunc.c
X */
Xint	inc(), dec();
Xint	gchar();
Xvoid	pchar(), pswap();
Xbool_t	lt(), gt(), equal(), ltoreq(), gtoreq();
X
X/*
X * screen.c
X */
Xvoid	updatescreen(), updateline();
Xvoid	screenclear(), cursupdate();
Xvoid	s_ins(), s_del();
X
X/*
X * search.c
X */
Xvoid	dosearch(), repsearch();
Xbool_t	searchc(), crepsearch(), findfunc();
XLPTR	*showmatch();
XLPTR	*fwd_word(), *bck_word(), *end_word();
X
X/*
X * Machine-dependent routines.
X */
Xint	inchar();
Xvoid	outchar(), outstr(), beep();
X#ifndef	OS2
Xvoid	remove(), rename();
X#endif
Xvoid	windinit(), windexit(), windgoto();
Xvoid	delay();
END_OF_FILE
if test 4557 -ne `wc -c <'stevie.h'`; then
    echo shar: \"'stevie.h'\" unpacked with wrong size!
fi
# end of 'stevie.h'
fi
echo shar: End of shell archive.
exit 0
