Subject:  v18i051:  Indent, C reformatting program, Part03/03
Newsgroups: comp.sources.unix
Sender: sources
Approved: rsalz@uunet.UU.NET

Submitted-by: Ozan Yigit <oz@nexus.yorku.ca>
Posting-number: Volume 18, Issue 51
Archive-name: indent/part03

[  In case it's not clear, this program contains the original version,
   plus the changes UCB and Sun have made.  Thanks to them for putting
   their work into the freely-redistributable category.  If you have
   indent on your systems, replace it with this version.  --r$  ]

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 3 (of 3)."
# Contents:  indent/indent.c
# Wrapped by oz@yunexus on Thu Mar  9 18:11:06 1989
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'indent/indent.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'indent/indent.c'\"
else
echo shar: Extracting \"'indent/indent.c'\" \(34171 characters\)
sed "s/^X//" >'indent/indent.c' <<'END_OF_FILE'
X/*
X * Copyright (c) 1985 Sun Microsystems, Inc.
X * Copyright (c) 1980 The Regents of the University of California.
X * Copyright (c) 1976 Board of Trustees of the University of Illinois.
X * All rights reserved.
X *
X * Redistribution and use in source and binary forms are permitted
X * provided that the above copyright notice and this paragraph are
X * duplicated in all such forms and that any documentation,
X * advertising materials, and other materials related to such
X * distribution and use acknowledge that the software was developed
X * by the University of California, Berkeley, the University of Illinois,
X * Urbana, and Sun Microsystems, Inc.  The name of either University
X * or Sun Microsystems may not be used to endorse or promote products
X * derived from this software without specific prior written permission.
X * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
X * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
X * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
X */
X
X#ifndef lint
Xchar copyright[] =
X"@(#) Copyright (c) 1985 Sun Microsystems, Inc.\n\
X @(#) Copyright (c) 1980 The Regents of the University of California.\n\
X @(#) Copyright (c) 1976 Board of Trustees of the University of Illinois.\n\
X All rights reserved.\n";
X#endif /* not lint */
X
X#ifndef lint
Xstatic char sccsid[] = "@(#)indent.c	5.11 (Berkeley) 9/15/88";
X#endif /* not lint */
X
X#include "indent_globs.h"
X#include "indent_codes.h"
X#include <sys/param.h>
X#include <ctype.h>
X
Xchar       *in_name = "Standard Input";	/* will always point to name of input
X					 * file */
Xchar       *out_name = "Standard Output";	/* will always point to name
X						 * of output file */
Xchar        bakfile[MAXPATHLEN] = "";
X
Xmain(argc, argv)
X    int         argc;
X    char      **argv;
X{
X
X    extern int  found_err;	/* flag set in diag() on error */
X    int         dec_ind;	/* current indentation for declarations */
X    int         di_stack[20];	/* a stack of structure indentation levels */
X    int         flushed_nl;	/* used when buffering up comments to remember
X				 * that a newline was passed over */
X    int         force_nl;	/* when true, code must be broken */
X    int         hd_type;	/* used to store type of stmt for if (...),
X				 * for (...), etc */
X    register int i;		/* local loop counter */
X    int         scase;		/* set to true when we see a case, so we will
X				 * know what to do with the following colon */
X    int         sp_sw;		/* when true, we are in the expressin of
X				 * if(...), while(...), etc. */
X    int         squest;		/* when this is positive, we have seen a ?
X				 * without the matching : in a <c>?<s>:<s>
X				 * construct */
X    register char *t_ptr;	/* used for copying tokens */
X    int         type_code;	/* the type of token, returned by lexi */
X
X    int         last_else = 0;	/* true iff last keyword was an else */
X
X
X    /*-----------------------------------------------*\
X    |		      INITIALIZATION		      |
X    \*-----------------------------------------------*/
X
X
X    ps.p_stack[0] = stmt;	/* this is the parser's stack */
X    ps.last_nl = true;		/* this is true if the last thing scanned was
X				 * a newline */
X    ps.last_token = semicolon;
X    combuf = (char *) malloc(bufsize);
X    labbuf = (char *) malloc(bufsize);
X    codebuf = (char *) malloc(bufsize);
X    l_com = combuf + bufsize - 5;
X    l_lab = labbuf + bufsize - 5;
X    l_code = codebuf + bufsize - 5;
X    combuf[0] = codebuf[0] = labbuf[0] = ' ';	/* set up code, label, and
X						 * comment buffers */
X    combuf[1] = codebuf[1] = labbuf[1] = '\0';
X    ps.else_if = 1;		/* Default else-if special processing to on */
X    s_lab = e_lab = labbuf + 1;
X    s_code = e_code = codebuf + 1;
X    s_com = e_com = combuf + 1;
X
X    buf_ptr = buf_end = in_buffer;
X    line_no = 1;
X    had_eof = ps.in_decl = ps.decl_on_line = break_comma = false;
X    sp_sw = force_nl = false;
X    ps.in_or_st = false;
X    ps.bl_line = true;
X    dec_ind = 0;
X    di_stack[ps.dec_nest = 0] = 0;
X    ps.want_blank = ps.in_stmt = ps.ind_stmt = false;
X
X
X    scase = ps.pcase = false;
X    squest = 0;
X    sc_end = 0;
X    bp_save = 0;
X    be_save = 0;
X
X    output = 0;
X
X
X
X    /*--------------------------------------------------*\
X    |   		COMMAND LINE SCAN		 |
X    \*--------------------------------------------------*/
X
X#ifdef undef
X    max_col = 78;		/* -l78 */
X    lineup_to_parens = 1;	/* -lp */
X    ps.ljust_decl = 0;		/* -ndj */
X    ps.com_ind = 33;		/* -c33 */
X    star_comment_cont = 1;	/* -sc */
X    ps.ind_size = 8;		/* -i8 */
X    verbose = 0;
X    ps.decl_indent = 16;	/* -di16 */
X    ps.indent_parameters = 1;	/* -ip */
X    ps.decl_com_ind = 0;	/* if this is not set to some positive value
X				 * by an arg, we will set this equal to
X				 * ps.com_ind */
X    btype_2 = 1;		/* -br */
X    cuddle_else = 1;		/* -ce */
X    ps.unindent_displace = 0;	/* -d0 */
X    ps.case_indent = 0;		/* -cli0 */
X    format_col1_comments = 1;	/* -fc1 */
X    procnames_start_line = 1;	/* -psl */
X    proc_calls_space = 0;	/* -npcs */
X    comment_delimiter_on_blankline = 1;	/* -cdb */
X    ps.leave_comma = 1;		/* -nbc */
X#endif
X
X    for (i = 1; i < argc; ++i)
X	if (strcmp(argv[i], "-npro") == 0)
X	    break;
X    set_defaults();
X    if (i >= argc)
X	set_profile();
X
X    for (i = 1; i < argc; ++i) {
X
X	/*
X	 * look thru args (if any) for changes to defaults
X	 */
X	if (argv[i][0] != '-') {/* no flag on parameter */
X	    if (input == 0) {	/* we must have the input file */
X		in_name = argv[i];	/* remember name of input file */
X		input = fopen(in_name, "r");
X		if (input == 0) {	/* check for open error */
X		    fprintf(stderr, "indent: can't open %s\n", argv[i]);
X		    exit(1);
X		}
X		continue;
X	    }
X	    else if (output == 0) {	/* we have the output file */
X		out_name = argv[i];	/* remember name of output file */
X		if (strcmp(in_name, out_name) == 0) {	/* attempt to overwrite
X							 * the file */
X		    fprintf(stderr, "indent: input and output files must be different\n");
X		    exit(1);
X		}
X		output = fopen(out_name, "w");
X		if (output == 0) {	/* check for create error */
X		    fprintf(stderr, "indent: can't create %s\n", argv[i]);
X		    exit(1);
X		}
X		continue;
X	    }
X	    fprintf(stderr, "indent: unknown parameter: %s\n", argv[i]);
X	    exit(1);
X	}
X	else
X	    set_option(argv[i]);
X    }				/* end of for */
X    if (input == 0) {
X	fprintf(stderr, "indent: usage: indent file [ outfile ] [ options ]\n");
X	exit(1);
X    }
X    if (output == 0)
X	if (troff)
X	    output = stdout;
X	else {
X	    out_name = in_name;
X	    bakcopy();
X	}
X    if (ps.com_ind <= 1)
X	ps.com_ind = 2;		/* dont put normal comments before column 2 */
X    if (troff) {
X	if (bodyf.font[0] == 0)
X	    parsefont(&bodyf, "R");
X	if (scomf.font[0] == 0)
X	    parsefont(&scomf, "I");
X	if (blkcomf.font[0] == 0)
X	    blkcomf = scomf, blkcomf.size += 2;
X	if (boxcomf.font[0] == 0)
X	    boxcomf = blkcomf;
X	if (stringf.font[0] == 0)
X	    parsefont(&stringf, "L");
X	if (keywordf.font[0] == 0)
X	    parsefont(&keywordf, "B");
X	writefdef(&bodyf, 'B');
X	writefdef(&scomf, 'C');
X	writefdef(&blkcomf, 'L');
X	writefdef(&boxcomf, 'X');
X	writefdef(&stringf, 'S');
X	writefdef(&keywordf, 'K');
X    }
X    if (block_comment_max_col <= 0)
X	block_comment_max_col = max_col;
X    if (ps.decl_com_ind <= 0)	/* if not specified by user, set this */
X	ps.decl_com_ind = ps.ljust_decl ? (ps.com_ind <= 10 ? 2 : ps.com_ind - 8) : ps.com_ind;
X    if (continuation_indent == 0)
X	continuation_indent = ps.ind_size;
X    fill_buffer();		/* get first batch of stuff into input buffer */
X
X    parse(semicolon);
X    {
X	register char *p = buf_ptr;
X	register    col = 1;
X
X	while (1) {
X	    if (*p == ' ')
X		col++;
X	    else if (*p == '\t')
X		col = ((col - 1) & ~7) + 9;
X	    else
X		break;
X	    p++;
X	};
X	if (col > ps.ind_size)
X	    ps.ind_level = ps.i_l_follow = col / ps.ind_size;
X    }
X    if (troff) {
X	register char *p = in_name,
X	           *beg = in_name;
X
X	while (*p)
X	    if (*p++ == '/')
X		beg = p;
X	fprintf(output, ".Fn \"%s\"\n", beg);
X    }
X    /*
X     * START OF MAIN LOOP
X     */
X
X    while (1) {			/* this is the main loop.  it will go until we
X				 * reach eof */
X	int         is_procname;
X
X	type_code = lexi();	/* lexi reads one token.  The actual
X				 * characters read are stored in "token". lexi
X				 * returns a code indicating the type of token */
X	is_procname = ps.procname[0];
X
X	/*
X	 * The following code moves everything following an if (), while (),
X	 * else, etc. up to the start of the following stmt to a buffer. This
X	 * allows proper handling of both kinds of brace placement.
X	 */
X
X	flushed_nl = false;
X	while (ps.search_brace) {	/* if we scanned an if(), while(),
X					 * etc., we might need to copy stuff
X					 * into a buffer we must loop, copying
X					 * stuff into save_com, until we find
X					 * the start of the stmt which follows
X					 * the if, or whatever */
X	    switch (type_code) {
X	    case newline:
X		++line_no;
X		flushed_nl = true;
X	    case form_feed:
X		break;		/* form feeds and newlines found here will be
X				 * ignored */
X
X	    case lbrace:	/* this is a brace that starts the compound
X				 * stmt */
X		if (sc_end == 0) {	/* ignore buffering if a comment wasnt
X					 * stored up */
X		    ps.search_brace = false;
X		    goto check_type;
X		}
X		if (btype_2) {
X		    save_com[0] = '{';	/* we either want to put the brace
X					 * right after the if */
X		    goto sw_buffer;	/* go to common code to get out of
X					 * this loop */
X		}
X	    case comment:	/* we have a comment, so we must copy it into
X				 * the buffer */
X		if (!flushed_nl || sc_end != 0) {
X		    if (sc_end == 0) {	/* if this is the first comment, we
X					 * must set up the buffer */
X			save_com[0] = save_com[1] = ' ';
X			sc_end = &(save_com[2]);
X		    }
X		    else {
X			*sc_end++ = '\n';	/* add newline between
X						 * comments */
X			*sc_end++ = ' ';
X			--line_no;
X		    }
X		    *sc_end++ = '/';	/* copy in start of comment */
X		    *sc_end++ = '*';
X
X		    for (;;) {	/* loop until we get to the end of the comment */
X			*sc_end = *buf_ptr++;
X			if (buf_ptr >= buf_end)
X			    fill_buffer();
X
X			if (*sc_end++ == '*' && *buf_ptr == '/')
X			    break;	/* we are at end of comment */
X
X			if (sc_end >= &(save_com[sc_size])) {	/* check for temp buffer
X								 * overflow */
X			    diag(1, "Internal buffer overflow - Move big comment from right after if, while, or whatever.");
X			    fflush(output);
X			    exit(1);
X			}
X		    }
X		    *sc_end++ = '/';	/* add ending slash */
X		    if (++buf_ptr >= buf_end)	/* get past / in buffer */
X			fill_buffer();
X		    break;
X		}
X	    default:		/* it is the start of a normal statment */
X		if (flushed_nl)	/* if we flushed a newline, make sure it is
X				 * put back */
X		    force_nl = true;
X		if (type_code == sp_paren && *token == 'i'
X			&& last_else && ps.else_if
X			|| type_code == sp_nparen && *token == 'e'
X			&& e_code != s_code && e_code[-1] == '}')
X		    force_nl = false;
X
X		if (sc_end == 0) {	/* ignore buffering if comment wasnt
X					 * saved up */
X		    ps.search_brace = false;
X		    goto check_type;
X		}
X		if (force_nl) {	/* if we should insert a nl here, put it into
X				 * the buffer */
X		    force_nl = false;
X		    --line_no;	/* this will be re-increased when the nl is
X				 * read from the buffer */
X		    *sc_end++ = '\n';
X		    *sc_end++ = ' ';
X		    if (verbose && !flushed_nl)	/* print error msg if the line
X						 * was not already broken */
X			diag(0, "Line broken");
X		    flushed_nl = false;
X		}
X		for (t_ptr = token; *t_ptr; ++t_ptr)
X		    *sc_end++ = *t_ptr;	/* copy token into temp buffer */
X		ps.procname[0] = 0;
X
X	sw_buffer:
X		ps.search_brace = false;	/* stop looking for start of
X						 * stmt */
X		bp_save = buf_ptr;	/* save current input buffer */
X		be_save = buf_end;
X		buf_ptr = save_com;	/* fix so that subsequent calls to
X					 * lexi will take tokens out of
X					 * save_com */
X		*sc_end++ = ' ';/* add trailing blank, just in case */
X		buf_end = sc_end;
X		sc_end = 0;
X		break;
X	    }			/* end of switch */
X	    if (type_code != 0)	/* we must make this check, just in case there
X				 * was an unexpected EOF */
X		type_code = lexi();	/* read another token */
X	    /* if (ps.search_brace) ps.procname[0] = 0; */
X	    if ((is_procname = ps.procname[0]) && flushed_nl
X		    && !procnames_start_line && ps.in_decl
X		    && type_code == ident)
X		flushed_nl = 0;
X	}			/* end of while (search_brace) */
X	last_else = 0;
Xcheck_type:
X	if (type_code == 0) {	/* we got eof */
X	    if (s_lab != e_lab || s_code != e_code
X		    || s_com != e_com)	/* must dump end of line */
X		dump_line();
X	    if (ps.tos > 1)	/* check for balanced braces */
X		diag(1, "Stuff missing from end of file.");
X
X	    if (verbose) {
X		printf("There were %d output lines and %d comments\n",
X		       ps.out_lines, ps.out_coms);
X		printf("(Lines with comments)/(Lines with code): %6.3f\n",
X		       (1.0 * ps.com_lines) / code_lines);
X	    }
X	    fflush(output);
X	    exit(found_err);
X	}
X	if (
X		(type_code != comment) &&
X		(type_code != newline) &&
X		(type_code != preesc) &&
X		(type_code != form_feed)) {
X	    if (force_nl &&
X		    (type_code != semicolon) &&
X		    (type_code != lbrace || !btype_2)) {
X		/* we should force a broken line here */
X		if (verbose && !flushed_nl)
X		    diag(0, "Line broken");
X		flushed_nl = false;
X		dump_line();
X		ps.want_blank = false;	/* dont insert blank at line start */
X		force_nl = false;
X	    }
X	    ps.in_stmt = true;	/* turn on flag which causes an extra level of
X				 * indentation. this is turned off by a ; or
X				 * '}' */
X	    if (s_com != e_com) {	/* the turkey has embedded a comment
X					 * in a line. fix it */
X		*e_code++ = ' ';
X		for (t_ptr = s_com; *t_ptr; ++t_ptr) {
X		    check_size(code);
X		    *e_code++ = *t_ptr;
X		}
X		*e_code++ = ' ';
X		*e_code = '\0';	/* null terminate code sect */
X		ps.want_blank = false;
X		e_com = s_com;
X	    }
X	}
X	else if (type_code != comment)	/* preserve force_nl thru a comment */
X	    force_nl = false;	/* cancel forced newline after newline, form
X				 * feed, etc */
X
X
X
X	/*-----------------------------------------------------*\
X	|	   do switch on type of token scanned		|
X	\*-----------------------------------------------------*/
X	check_size(code);
X	switch (type_code) {	/* now, decide what to do with the token */
X
X	case form_feed:	/* found a form feed in line */
X	    ps.use_ff = true;	/* a form feed is treated much like a newline */
X	    dump_line();
X	    ps.want_blank = false;
X	    break;
X
X	case newline:
X	    if (ps.last_token != comma || ps.p_l_follow > 0
X		    || !ps.leave_comma || ps.block_init || !break_comma || s_com != e_com) {
X		dump_line();
X		ps.want_blank = false;
X	    }
X	    ++line_no;		/* keep track of input line number */
X	    break;
X
X	case lparen:		/* got a '(' or '[' */
X	    ++ps.p_l_follow;	/* count parens to make Healy happy */
X	    if (ps.want_blank && *token != '[' &&
X		    (ps.last_token != ident || proc_calls_space
X	      || (ps.its_a_keyword && (!ps.sizeof_keyword || Bill_Shannon))))
X		*e_code++ = ' ';
X	    if (ps.in_decl && !ps.block_init)
X		if (troff && !ps.dumped_decl_indent && !is_procname && ps.last_token == decl) {
X		    ps.dumped_decl_indent = 1;
X		    sprintf(e_code, "\n.Du %dp+\200p \"%s\"\n", dec_ind * 7, token);
X		    e_code += strlen(e_code);
X		}
X		else {
X		    while ((e_code - s_code) < dec_ind) {
X			check_size(code);
X			*e_code++ = ' ';
X		    }
X		    *e_code++ = token[0];
X		}
X	    else
X		*e_code++ = token[0];
X	    ps.paren_indents[ps.p_l_follow - 1] = e_code - s_code;
X	    if (sp_sw && ps.p_l_follow == 1 && extra_expression_indent
X		    && ps.paren_indents[0] < 2 * ps.ind_size)
X		ps.paren_indents[0] = 2 * ps.ind_size;
X	    ps.want_blank = false;
X	    if (ps.in_or_st && *token == '(' && ps.tos <= 2) {
X		/*
X		 * this is a kluge to make sure that declarations will be
X		 * aligned right if proc decl has an explicit type on it, i.e.
X		 * "int a(x) {..."
X		 */
X		parse(semicolon);	/* I said this was a kluge... */
X		ps.in_or_st = false;	/* turn off flag for structure decl or
X					 * initialization */
X	    }
X	    if (ps.sizeof_keyword)
X		ps.sizeof_mask |= 1 << ps.p_l_follow;
X	    break;
X
X	case rparen:		/* got a ')' or ']' */
X	    if (ps.cast_mask & (1 << ps.p_l_follow) & ~ps.sizeof_mask) {
X		ps.last_u_d = true;
X		ps.cast_mask &= (1 << ps.p_l_follow) - 1;
X	    }
X	    ps.sizeof_mask &= (1 << ps.p_l_follow) - 1;
X	    if (--ps.p_l_follow < 0) {
X		ps.p_l_follow = 0;
X		diag(0, "Extra %c", *token);
X	    }
X	    if (e_code == s_code)	/* if the paren starts the line */
X		ps.paren_level = ps.p_l_follow;	/* then indent it */
X
X	    *e_code++ = token[0];
X	    ps.want_blank = true;
X
X	    if (sp_sw && (ps.p_l_follow == 0)) {	/* check for end of if
X							 * (...), or some such */
X		sp_sw = false;
X		force_nl = true;/* must force newline after if */
X		ps.last_u_d = true;	/* inform lexi that a following
X					 * operator is unary */
X		ps.in_stmt = false;	/* dont use stmt continuation
X					 * indentation */
X
X		parse(hd_type);	/* let parser worry about if, or whatever */
X	    }
X	    ps.search_brace = btype_2;	/* this should insure that constructs
X					 * such as main(){...} and int[]{...}
X					 * have their braces put in the right
X					 * place */
X	    break;
X
X	case unary_op:		/* this could be any unary operation */
X	    if (ps.want_blank)
X		*e_code++ = ' ';
X
X	    if (troff && !ps.dumped_decl_indent && ps.in_decl && !is_procname) {
X		sprintf(e_code, "\n.Du %dp+\200p \"%s\"\n", dec_ind * 7, token);
X		ps.dumped_decl_indent = 1;
X		e_code += strlen(e_code);
X	    }
X	    else {
X		char       *res = token;
X
X		if (ps.in_decl && !ps.block_init) {	/* if this is a unary op
X							 * in a declaration, we
X							 * should indent this
X							 * token */
X		    for (i = 0; token[i]; ++i);	/* find length of token */
X		    while ((e_code - s_code) < (dec_ind - i)) {
X			check_size(code);
X			*e_code++ = ' ';	/* pad it */
X		    }
X		}
X		if (troff && token[0] == '-' && token[1] == '>')
X		    res = "\\(->";
X		for (t_ptr = res; *t_ptr; ++t_ptr) {
X		    check_size(code);
X		    *e_code++ = *t_ptr;
X		}
X	    }
X	    ps.want_blank = false;
X	    break;
X
X	case binary_op:	/* any binary operation */
X    do_binary:
X	    if (ps.want_blank)
X		*e_code++ = ' ';
X	    {
X		char       *res = token;
X
X		if (troff)
X		    switch (token[0]) {
X		    case '<':
X			if (token[1] == '=')
X			    res = "\\(<=";
X			break;
X		    case '>':
X			if (token[1] == '=')
X			    res = "\\(>=";
X			break;
X		    case '!':
X			if (token[1] == '=')
X			    res = "\\(!=";
X			break;
X		    case '|':
X			if (token[1] == '|')
X			    res = "\\(br\\(br";
X			else if (token[1] == 0)
X			    res = "\\(br";
X			break;
X		    }
X		for (t_ptr = res; *t_ptr; ++t_ptr) {
X		    check_size(code);
X		    *e_code++ = *t_ptr;	/* move the operator */
X		}
X	    }
X	    ps.want_blank = true;
X	    break;
X
X	case postop:		/* got a trailing ++ or -- */
X	    *e_code++ = token[0];
X	    *e_code++ = token[1];
X	    ps.want_blank = true;
X	    break;
X
X	case question:		/* got a ? */
X	    squest++;		/* this will be used when a later colon
X				 * appears so we can distinguish the
X				 * <c>?<n>:<n> construct */
X	    if (ps.want_blank)
X		*e_code++ = ' ';
X	    *e_code++ = '?';
X	    ps.want_blank = true;
X	    break;
X
X	case casestmt:		/* got word 'case' or 'default' */
X	    scase = true;	/* so we can process the later colon properly */
X	    goto copy_id;
X
X	case colon:		/* got a ':' */
X	    if (squest > 0) {	/* it is part of the <c>?<n>: <n> construct */
X		--squest;
X		if (ps.want_blank)
X		    *e_code++ = ' ';
X		*e_code++ = ':';
X		ps.want_blank = true;
X		break;
X	    }
X	    if (ps.in_decl) {
X		*e_code++ = ':';
X		ps.want_blank = false;
X		break;
X	    }
X	    ps.in_stmt = false;	/* seeing a label does not imply we are in a
X				 * stmt */
X	    for (t_ptr = s_code; *t_ptr; ++t_ptr)
X		*e_lab++ = *t_ptr;	/* turn everything so far into a label */
X	    e_code = s_code;
X	    *e_lab++ = ':';
X	    *e_lab++ = ' ';
X	    *e_lab = '\0';
X
X	    force_nl = ps.pcase = scase;	/* ps.pcase will be used by
X						 * dump_line to decide how to
X						 * indent the label. force_nl
X						 * will force a case n: to be
X						 * on a line by itself */
X	    scase = false;
X	    ps.want_blank = false;
X	    break;
X
X	case semicolon:	/* got a ';' */
X	    ps.in_or_st = false;/* we are not in an initialization or
X				 * structure declaration */
X	    scase = false;	/* these will only need resetting in a error */
X	    squest = 0;
X	    if (ps.last_token == rparen)
X		ps.in_parameter_declaration = 0;
X	    ps.cast_mask = 0;
X	    ps.sizeof_mask = 0;
X	    ps.block_init = 0;
X	    ps.block_init_level = 0;
X	    ps.just_saw_decl--;
X
X	    if (ps.in_decl && s_code == e_code && !ps.block_init)
X		while ((e_code - s_code) < (dec_ind - 1)) {
X		    check_size(code);
X		    *e_code++ = ' ';
X		}
X
X	    ps.in_decl = (ps.dec_nest > 0);	/* if we were in a first level
X						 * structure declaration, we
X						 * arent any more */
X
X	    if ((!sp_sw || hd_type != forstmt) && ps.p_l_follow > 0) {
X
X		/*
X		 * This should be true iff there were unbalanced parens in the
X		 * stmt.  It is a bit complicated, because the semicolon might
X		 * be in a for stmt
X		 */
X		diag(1, "Unbalanced parens");
X		ps.p_l_follow = 0;
X		if (sp_sw) {	/* this is a check for a if, while, etc. with
X				 * unbalanced parens */
X		    sp_sw = false;
X		    parse(hd_type);	/* dont lose the if, or whatever */
X		}
X	    }
X	    *e_code++ = ';';
X	    ps.want_blank = true;
X	    ps.in_stmt = (ps.p_l_follow > 0);	/* we are no longer in the
X						 * middle of a stmt */
X
X	    if (!sp_sw) {	/* if not if for (;;) */
X		parse(semicolon);	/* let parser know about end of stmt */
X		force_nl = true;/* force newline after a end of stmt */
X	    }
X	    break;
X
X	case lbrace:		/* got a '{' */
X	    ps.in_stmt = false;	/* dont indent the {} */
X	    if (!ps.block_init)
X		force_nl = true;/* force other stuff on same line as '{' onto
X				 * new line */
X	    else if (ps.block_init_level <= 0)
X		ps.block_init_level = 1;
X	    else
X		ps.block_init_level++;
X
X	    if (s_code != e_code && !ps.block_init) {
X		if (!btype_2) {
X		    dump_line();
X		    ps.want_blank = false;
X		}
X		else if (ps.in_parameter_declaration && !ps.in_or_st) {
X		    ps.i_l_follow = 0;
X		    dump_line();
X		    ps.want_blank = false;
X		}
X	    }
X	    if (ps.in_parameter_declaration)
X		prefix_blankline_requested = 0;
X
X	    if (ps.p_l_follow > 0) {	/* check for preceeding unbalanced
X					 * parens */
X		diag(1, "Unbalanced parens");
X		ps.p_l_follow = 0;
X		if (sp_sw) {	/* check for unclosed if, for, etc. */
X		    sp_sw = false;
X		    parse(hd_type);
X		    ps.ind_level = ps.i_l_follow;
X		}
X	    }
X	    if (s_code == e_code)
X		ps.ind_stmt = false;	/* dont put extra indentation on line
X					 * with '{' */
X	    if (ps.in_decl && ps.in_or_st) {	/* this is either a structure
X						 * declaration or an init */
X		di_stack[ps.dec_nest++] = dec_ind;
X		/* ?		dec_ind = 0; */
X	    }
X	    else {
X		ps.decl_on_line = false;	/* we cant be in the middle of
X						 * a declaration, so dont do
X						 * special indentation of
X						 * comments */
X		if (blanklines_after_declarations_at_proctop
X			&& ps.in_parameter_declaration)
X		    postfix_blankline_requested = 1;
X		ps.in_parameter_declaration = 0;
X	    }
X	    dec_ind = 0;
X	    parse(lbrace);	/* let parser know about this */
X	    if (ps.want_blank)	/* put a blank before '{' if '{' is not at
X				 * start of line */
X		*e_code++ = ' ';
X	    ps.want_blank = false;
X	    *e_code++ = '{';
X	    ps.just_saw_decl = 0;
X	    break;
X
X	case rbrace:		/* got a '}' */
X	    if (ps.p_stack[ps.tos] == decl && !ps.block_init)	/* semicolons can be
X								 * omitted in
X								 * declarations */
X		parse(semicolon);
X	    if (ps.p_l_follow) {/* check for unclosed if, for, else. */
X		diag(1, "Unbalanced parens");
X		ps.p_l_follow = 0;
X		sp_sw = false;
X	    }
X	    ps.just_saw_decl = 0;
X	    ps.block_init_level--;
X	    if (s_code != e_code && !ps.block_init) {	/* '}' must be first on
X							 * line */
X		if (verbose)
X		    diag(0, "Line broken");
X		dump_line();
X	    }
X	    *e_code++ = '}';
X	    ps.want_blank = true;
X	    ps.in_stmt = ps.ind_stmt = false;
X	    if (ps.dec_nest > 0) {	/* we are in multi-level structure
X					 * declaration */
X		dec_ind = di_stack[--ps.dec_nest];
X		if (ps.dec_nest == 0 && !ps.in_parameter_declaration)
X		    ps.just_saw_decl = 2;
X		ps.in_decl = true;
X	    }
X	    prefix_blankline_requested = 0;
X	    parse(rbrace);	/* let parser know about this */
X	    ps.search_brace = cuddle_else && ps.p_stack[ps.tos] == ifhead
X		&& ps.il[ps.tos] >= ps.ind_level;
X	    if (ps.tos <= 1 && blanklines_after_procs && ps.dec_nest <= 0)
X		postfix_blankline_requested = 1;
X	    break;
X
X	case swstmt:		/* got keyword "switch" */
X	    sp_sw = true;
X	    hd_type = swstmt;	/* keep this for when we have seen the
X				 * expression */
X	    goto copy_id;	/* go move the token into buffer */
X
X	case sp_paren:		/* token is if, while, for */
X	    sp_sw = true;	/* the interesting stuff is done after the
X				 * expression is scanned */
X	    hd_type = (*token == 'i' ? ifstmt :
X		       (*token == 'w' ? whilestmt : forstmt));
X
X	    /*
X	     * remember the type of header for later use by parser
X	     */
X	    goto copy_id;	/* copy the token into line */
X
X	case sp_nparen:	/* got else, do */
X	    ps.in_stmt = false;
X	    if (*token == 'e') {
X		if (e_code != s_code && (!cuddle_else || e_code[-1] != '}')) {
X		    if (verbose)
X			diag(0, "Line broken");
X		    dump_line();/* make sure this starts a line */
X		    ps.want_blank = false;
X		}
X		force_nl = true;/* also, following stuff must go onto new line */
X		last_else = 1;
X		parse(elselit);
X	    }
X	    else {
X		if (e_code != s_code) {	/* make sure this starts a line */
X		    if (verbose)
X			diag(0, "Line broken");
X		    dump_line();
X		    ps.want_blank = false;
X		}
X		force_nl = true;/* also, following stuff must go onto new line */
X		last_else = 0;
X		parse(dolit);
X	    }
X	    goto copy_id;	/* move the token into line */
X
X	case decl:		/* we have a declaration type (int, register,
X				 * etc.) */
X	    parse(decl);	/* let parser worry about indentation */
X	    if (ps.last_token == rparen && ps.tos <= 1) {
X		ps.in_parameter_declaration = 1;
X		if (s_code != e_code) {
X		    dump_line();
X		    ps.want_blank = 0;
X		}
X	    }
X	    if (ps.in_parameter_declaration && ps.indent_parameters && ps.dec_nest == 0) {
X		ps.ind_level = ps.i_l_follow = 1;
X		ps.ind_stmt = 0;
X	    }
X	    ps.in_or_st = true;	/* this might be a structure or initialization
X				 * declaration */
X	    ps.in_decl = ps.decl_on_line = true;
X	    if ( /* !ps.in_or_st && */ ps.dec_nest <= 0)
X		ps.just_saw_decl = 2;
X	    prefix_blankline_requested = 0;
X	    for (i = 0; token[i++];);	/* get length of token */
X
X	    /*
X	     * dec_ind = e_code - s_code + (ps.decl_indent>i ? ps.decl_indent
X	     * : i);
X	     */
X	    dec_ind = ps.decl_indent > 0 ? ps.decl_indent : i;
X	    goto copy_id;
X
X	case ident:		/* got an identifier or constant */
X	    if (ps.in_decl) {	/* if we are in a declaration, we must indent
X				 * identifier */
X		if (ps.want_blank)
X		    *e_code++ = ' ';
X		ps.want_blank = false;
X		if (is_procname == 0 || !procnames_start_line) {
X		    if (!ps.block_init)
X			if (troff && !ps.dumped_decl_indent) {
X			    sprintf(e_code, "\n.De %dp+\200p\n", dec_ind * 7);
X			    ps.dumped_decl_indent = 1;
X			    e_code += strlen(e_code);
X			}
X			else
X			    while ((e_code - s_code) < dec_ind) {
X				check_size(code);
X				*e_code++ = ' ';
X			    }
X		}
X		else {
X		    if (dec_ind && s_code != e_code)
X			dump_line();
X		    dec_ind = 0;
X		    ps.want_blank = false;
X		}
X	    }
X	    else if (sp_sw && ps.p_l_follow == 0) {
X		sp_sw = false;
X		force_nl = true;
X		ps.last_u_d = true;
X		ps.in_stmt = false;
X		parse(hd_type);
X	    }
X    copy_id:
X	    if (ps.want_blank)
X		*e_code++ = ' ';
X	    if (troff && ps.its_a_keyword) {
X		e_code = chfont(&bodyf, &keywordf, e_code);
X		for (t_ptr = token; *t_ptr; ++t_ptr) {
X		    check_size(code);
X		    *e_code++ = keywordf.allcaps && islower(*t_ptr)
X			? toupper(*t_ptr) : *t_ptr;
X		}
X		e_code = chfont(&keywordf, &bodyf, e_code);
X	    }
X	    else
X		for (t_ptr = token; *t_ptr; ++t_ptr) {
X		    check_size(code);
X		    *e_code++ = *t_ptr;
X		}
X	    ps.want_blank = true;
X	    break;
X
X	case period:		/* treat a period kind of like a binary
X				 * operation */
X	    *e_code++ = '.';	/* move the period into line */
X	    ps.want_blank = false;	/* dont put a blank after a period */
X	    break;
X
X	case comma:
X	    ps.want_blank = (s_code != e_code);	/* only put blank after comma
X						 * if comma does not start the
X						 * line */
X	    if (ps.in_decl && is_procname == 0 && !ps.block_init)
X		while ((e_code - s_code) < (dec_ind - 1)) {
X		    check_size(code);
X		    *e_code++ = ' ';
X		}
X
X	    *e_code++ = ',';
X	    if (ps.p_l_follow == 0) {
X		if (ps.block_init_level <= 0)
X		    ps.block_init = 0;
X		if (break_comma && !ps.leave_comma)
X		    force_nl = true;
X	    }
X	    break;
X
X	case preesc:		/* got the character '#' */
X	    if ((s_com != e_com) ||
X		    (s_lab != e_lab) ||
X		    (s_code != e_code))
X		dump_line();
X	    *e_lab++ = '#';	/* move whole line to 'label' buffer */
X	    {
X		int         in_comment = 0;
X		int         com_start = 0;
X		char        quote = 0;
X		int         com_end = 0;
X
X		while (*buf_ptr != '\n' || in_comment) {
X		    check_size(lab);
X		    *e_lab = *buf_ptr++;
X		    if (buf_ptr >= buf_end)
X			fill_buffer();
X		    switch (*e_lab++) {
X		    case BACKSLASH:
X			if (troff)
X			    *e_lab++ = BACKSLASH;
X			if (!in_comment) {
X			    *e_lab++ = *buf_ptr++;
X			    if (buf_ptr >= buf_end)
X				fill_buffer();
X			}
X			break;
X		    case '/':
X			if (*buf_ptr == '*' && !in_comment && !quote) {
X			    in_comment = 1;
X			    *e_lab++ = *buf_ptr++;
X			    com_start = e_lab - s_lab - 2;
X			}
X			break;
X		    case '"':
X			if (quote == '"')
X			    quote = 0;
X			break;
X		    case '\'':
X			if (quote == '\'')
X			    quote = 0;
X			break;
X		    case '*':
X			if (*buf_ptr == '/' && in_comment) {
X			    in_comment = 0;
X			    *e_lab++ = *buf_ptr++;
X			    com_end = e_lab - s_lab;
X			}
X			break;
X		    }
X		}
X
X		while (e_lab > s_lab && (e_lab[-1] == ' ' || e_lab[-1] == '\t'))
X		    e_lab--;
X		if (e_lab - s_lab == com_end && bp_save == 0) {	/* comment on
X								 * preprocessor line */
X		    if (sc_end == 0)	/* if this is the first comment, we
X					 * must set up the buffer */
X			sc_end = &(save_com[0]);
X		    else {
X			*sc_end++ = '\n';	/* add newline between
X						 * comments */
X			*sc_end++ = ' ';
X			--line_no;
X		    }
X		    bcopy(s_lab + com_start, sc_end, com_end - com_start);
X		    sc_end += com_end - com_start;
X		    if (sc_end >= &save_com[sc_size])
X			abort();
X		    e_lab = s_lab + com_start;
X		    while (e_lab > s_lab && (e_lab[-1] == ' ' || e_lab[-1] == '\t'))
X			e_lab--;
X		    bp_save = buf_ptr;	/* save current input buffer */
X		    be_save = buf_end;
X		    buf_ptr = save_com;	/* fix so that subsequent calls to
X					 * lexi will take tokens out of
X					 * save_com */
X		    *sc_end++ = ' ';	/* add trailing blank, just in case */
X		    buf_end = sc_end;
X		    sc_end = 0;
X		}
X		*e_lab = '\0';	/* null terminate line */
X		ps.pcase = false;
X	    }
X
X	    if (strncmp(s_lab, "#if", 3) == 0) {
X		if (blanklines_around_conditional_compilation) {
X		    register    c;
X		    prefix_blankline_requested++;
X		    while ((c = getc(input)) == '\n');
X		    ungetc(c, input);
X		}
X		if (ifdef_level < sizeof state_stack / sizeof state_stack[0]) {
X		    match_state[ifdef_level].tos = -1;
X		    state_stack[ifdef_level++] = ps;
X		}
X		else
X		    diag(1, "#if stack overflow");
X	    }
X	    else if (strncmp(s_lab, "#else", 5) == 0)
X		if (ifdef_level <= 0)
X		    diag(1, "Unmatched #else");
X		else {
X		    match_state[ifdef_level - 1] = ps;
X		    ps = state_stack[ifdef_level - 1];
X		}
X	    else if (strncmp(s_lab, "#endif", 6) == 0) {
X		if (ifdef_level <= 0)
X		    diag(1, "Unmatched #endif");
X		else {
X		    ifdef_level--;
X
X#ifdef undef
X		    /*
X		     * This match needs to be more intelligent before the
X		     * message is useful
X		     */
X		    if (match_state[ifdef_level].tos >= 0
X			  && bcmp(&ps, &match_state[ifdef_level], sizeof ps))
X			diag(0, "Syntactically inconsistant #ifdef alternatives.");
X#endif
X		}
X		if (blanklines_around_conditional_compilation) {
X		    postfix_blankline_requested++;
X		    n_real_blanklines = 0;
X		}
X	    }
X	    break;		/* subsequent processing of the newline
X				 * character will cause the line to be printed */
X
X	case comment:		/* we have gotten a /*  this is a biggie */
X    proc_comment:
X	    if (flushed_nl) {	/* we should force a broken line here */
X		flushed_nl = false;
X		dump_line();
X		ps.want_blank = false;	/* dont insert blank at line start */
X		force_nl = false;
X	    }
X	    pr_comment();
X	    break;
X	}			/* end of big switch stmt */
X
X	*e_code = '\0';		/* make sure code section is null terminated */
X	if (type_code != comment && type_code != newline && type_code != preesc)
X	    ps.last_token = type_code;
X    }				/* end of main while (1) loop */
X};
X
X/*
X * copy input file to backup file if in_name is /blah/blah/blah/file, then
X * backup file will be ".Bfile" then make the backup file the input and
X * original input file the output
X */
Xbakcopy()
X{
X    int         n,
X                bakchn;
X    char        buff[8 * 1024];
X    register char *p;
X
X    /* construct file name .Bfile */
X    for (p = in_name; *p; p++);	/* skip to end of string */
X    while (p > in_name && *p != '/')	/* find last '/' */
X	p--;
X    if (*p == '/')
X	p++;
X    sprintf(bakfile, "%s.BAK", p);
X
X    /* copy in_name to backup file */
X    bakchn = creat(bakfile, 0600);
X    if (bakchn < 0) {
X	fprintf(stderr, "indent: can't create backup file \"%s\"\n", bakfile);
X	exit(1);
X    }
X    while (n = read(fileno(input), buff, sizeof buff))
X	if (write(bakchn, buff, n) != n) {
X	    fprintf(stderr, "indent: error writing backup file \"%s\"\n",
X		    bakfile);
X	    exit(1);
X	}
X    if (n < 0) {
X	fprintf(stderr, "indent: error reading input file \"%s\"\n", in_name);
X	exit(1);
X    }
X    close(bakchn);
X    fclose(input);
X
X    /* re-open backup file as the input file */
X    input = fopen(bakfile, "r");
X    if (input == 0) {
X	fprintf(stderr, "indent: can't re-open backup file\n");
X	exit(1);
X    }
X    /* now the original input file will be the output */
X    output = fopen(in_name, "w");
X    if (output == 0) {
X	fprintf(stderr, "indent: can't create %s\n", in_name);
X	unlink(bakfile);
X	exit(1);
X    }
X}
END_OF_FILE
if test 34171 -ne `wc -c <'indent/indent.c'`; then
    echo shar: \"'indent/indent.c'\" unpacked with wrong size!
fi
# end of 'indent/indent.c'
fi
echo shar: End of archive 3 \(of 3\).
cp /dev/null ark3isdone
MISSING=""
for I in 1 2 3 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 3 archives.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0

