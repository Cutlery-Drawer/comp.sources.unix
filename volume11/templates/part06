Subject:  v11i096:  Template mode for GNU Emacs, Part06/06
Newsgroups: comp.sources.unix
Sender: sources
Approved: rs@uunet.UU.NET

Submitted-by: "Mark A. Ardis" <maa@sei.cmu.edu>
Posting-number: Volume 11, Issue 96
Archive-name: templates/part06

#! /bin/sh
# This is a shell archive, meaning:
# 1. Remove everything above the #! /bin/sh line.
# 2. Save the resulting text in a file.
# 3. Execute the file with /bin/sh (not csh) to create:
#	awk.tpl
#	bib.tpl
#	c.tpl
#	elisp.tpl
#	generic.tpl
#	latex.tpl
#	pascal.tpl
#	scribe.tpl
#	texinfo.tpl
export PATH; PATH=/bin:/usr/bin:$PATH
echo shar: "extracting 'awk.tpl'" '(1382 characters)'
if test -f 'awk.tpl'
then
	echo shar: "will not over-write existing file 'awk.tpl'"
else
sed 's/^X//' << \SHAR_EOF > 'awk.tpl'
XTemplate whole Sequence
X:begin
X# <text:name>: an Awk program
X
XBEGIN <#action>
X
X<linelist>
X
XEND <#action>
X:end
X
XTemplate action Selection
X:begin
Xfor:
Xif:
Xignore:
Xprint:
Xsetvars:
Xwhile:
Xother:
X:end
X
XTemplate for Sequence
X:begin
Xfor (<text:initially>; <text:test>; <text:increment>)
X  {
X    <action>
X    }
X:end
X
XTemplate if Sequence
X:begin
Xif (<text:expression>)
X  {
X    <action>
X    }
Xelse
X  {
X    <action>
X    }
X:end
X
XTemplate while Sequence
X:begin
Xwhile (<text:expression>)
X  {
X    <action>
X    }
X:end
X
XTemplate ignore Sequence
X:begin
X{}
X:end
X
XTemplate print Sequence
X:begin
Xprintf <text:format> <text:args>
X:end
X
XTemplate setvars Sequence
X:begin
X{ FS = "<text:fieldseparator>"; RS = "<text:recordseparator>"}
X:end
X
XTemplate other Sequence
X:begin
X{ <text> }
X:end
X
XTemplate pattern Selection
X:begin
Xmatch:
Xmiss:
X:end
X
XTemplate match Repetition
X:begin
X&& <fieldmatch>
X:end
X
XTemplate fieldmatch Sequence
X:begin
X$<text:field> ~ /<text:regexpr>/
X:end
X
XTemplate miss Sequence
X:begin
X<#firstmatch><fieldmismatch>
X:end
X
XTemplate firstmatch Sequence
X:begin
X<match> && 
X:end
X
XTemplate fieldmismatch Sequence
X:begin
X$<text:field> !~ /<text:regexpr>/
X:end
X
XTemplate linelist Repetition
X:begin
X
X<line>
X:end
X
XTemplate line Sequence
X:begin
X<#pattern> <#action>
X:end
X
X
XLocal Variables:
Xtpl-begin-template-definition:"^Template"
Xtpl-begin-template-body:"^:begin"
Xtpl-end-template-body:"^:end"
Xend:
SHAR_EOF
if test 1382 -ne "`wc -c < 'awk.tpl'`"
then
	echo shar: "error transmitting 'awk.tpl'" '(should have been 1382 characters)'
fi
fi
echo shar: "extracting 'bib.tpl'" '(5484 characters)'
if test -f 'bib.tpl'
then
	echo shar: "will not over-write existing file 'bib.tpl'"
else
sed 's/^X//' << \SHAR_EOF > 'bib.tpl'
XTemplate citation Selection
X:begin
Xarticle:
Xbook:
Xbooklet:
Xinbook:
Xincollection:
Xinproceedings:
Xmanual:
Xmastersthesis:
Xmisc:
Xphdthesis:
Xproceedings:
Xtechreport:
Xunpublished:
X:end
X
XTemplate keywords Selection
X:begin
Xaddress:
Xannote:
Xauthor:
Xbooktitle:
Xchapter:
Xedition:
Xeditor:
Xhow-published:
Xinstitution:
Xjournal:
Xkey:
Xmonth-published:
Xnote:
Xnumber:
Xorganization:
Xpages:
Xpublisher:
Xschool:
Xseries:
Xtitle:
Xvolume:
Xyear:
X:end
X
XTemplate article Sequence
X:begin
X@Article{<text:name><2digits:year>
X,Key = "<text:name>"
X,Author = "<text:name><text:authors>"
X,Title = "<text:title>"
X,Journal = "<text:journal>"
X,Year = "19<2digits:year>"
X<#month-published>
X<#number>
X<#pages>
X<#volume>
X<#note>
X<#annote>
X}
X:end
X
XTemplate book Sequence
X:begin
X@Book{<text:name><2digits:year>
X,Key = "<text:name>"
X,Author = "<text:name><text:authors>"
X,Title = "<text:title>"
X,Publisher = "<text:publisher>"
X,Year = "19<2digits:year>"
X<#address>
X<#series>
X<#volume>
X<#note>
X<#annote>
X}
X:end
X
XTemplate booklet Sequence
X:begin
X@Booklet{<text:name><2digits:year>
X,Key = "<text:name>"
X,Author = "<text:name><text:authors>"
X,Title = "<text:title>"
X,Year = "19<2digits:year>"
X<#address>
X<#how-published>
X<#note>
X<#annote>
X}
X:end
X
XTemplate inbook Sequence
X:begin
X@InBook{<text:name><2digits:year>
X,Key = "<text:name>"
X,Author = "<text:name><text:authors>"
X,Title = "<text:title>"
X,BookTitle = "<text:booktitle>"
X,Publisher = "<text:publisher>"
X,Year = "19<2digits:year>"
X<#address>
X<#chapter>
X<#pages>
X<#series>
X<#volume>
X<#note>
X<#annote>
X}
X:end
X
XTemplate incollection Sequence
X:begin
X@InCollection{<text:name><2digits:year>
X,Key = "<text:name>"
X,Author = "<text:name><text:authors>"
X,Title = "<text:title>"
X,BookTitle = "<text:booktitle>"
X,Publisher = "<text:publisher>"
X,Year = "19<2digits:year>"
X<#address>
X<#chapter>
X<#editor>
X<#pages>
X<#series>
X<#volume>
X<#note>
X<#annote>
X}
X:end
X
XTemplate inproceedings Sequence
X:begin
X@InProceedings{<text:name><2digits:year>
X,Key = "<text:name>"
X,Author = "<text:name><text:authors>"
X,Title = "<text:title>"
X,BookTitle = "<text:booktitle>"
X,Publisher = "<text:publisher>"
X,Year = "19<2digits:year>"
X<#address>
X<#editor>
X<#month-published>
X<#pages>
X<#note>
X<#annote>
X}
X:end
X
XTemplate manual Sequence
X:begin
X@Manual{<text:name><2digits:year>
X,Key = "<text:name>"
X,Title = "<text:title>"
X,Year = "19<2digits:year>"
X<#address>
X<#author>
X<#edition>
X<#organization>
X<#note>
X<#annote>
X}
X:end
X
XTemplate mastersthesis Sequence
X:begin
X@MastersThesis{<text:name><2digits:year>
X,Key = "<text:name>"
X,Author = "<text:name><text:authors>"
X,Title = "<text:title>"
X,School = "<text:school>"
X,Year = "19<2digits:year>"
X<#month-published>
X<#note>
X<#annote>
X}
X:end
X
XTemplate misc Sequence
X:begin
X@Misc{<text:name><2digits:year>
X,Key = "<text:name>"
X<#author>
X<#how-published>
X<#title>
X<#note>
X<#annote>
X}
X:end
X
XTemplate phdthesis Sequence
X:begin
X@PhDThesis{<text:name><2digits:year>
X,Key = "<text:name>"
X,Author = "<text:name><text:authors>"
X,Title = "<text:title>"
X,School = "<text:school>"
X,Year = "19<2digits:year>"
X<#month-published>
X<#note>
X<#annote>
X}
X:end
X
XTemplate proceedings Sequence
X:begin
X@Proceedings{<text:name><2digits:year>
X,Key = "<text:name>"
X,Editor = "<text:name><text:editors>"
X,Title = "<text:title>"
X,Publisher = "<text:publisher>"
X,Year = "19<2digits:year>"
X<#address>
X<#note>
X<#annote>
X}
X:end
X
XTemplate techreport Sequence
X:begin
X@TechReport{<text:name><2digits:year>
X,Key = "<text:name>"
X,Author = "<text:name><text:authors>"
X,Title = "<text:title>"
X,Institution = "<text:institution>"
X,Year = "19<2digits:year>"
X<#month-published>
X<#number>
X<#note>
X<#annote>
X}
X:end
X
XTemplate unpublished Sequence
X:begin
X@Unpublished{<text:name><2digits:year>
X,Key = "<text:name>"
X,Author = "<text:name><text:authors>"
X,Title = "<text:title>"
X<#year>
X<#note>
X<#annote>
X}
X:end
X
XTemplate address Sequence
X:begin
X, Address = "<text:address>"
X:end
X
XTemplate annote Sequence
X:begin
X, Annote = "<textlong:annote>"
X:end
X
XTemplate author Sequence
X:begin
X, Author = "<text:name><text:authors>"
X:end
X
XTemplate booktitle Sequence
X:begin
X, BookTitle = "<text:booktitle>"
X:end
X
XTemplate chapter Sequence
X:begin
X, Chapter = "<text:chapter>"
X:end
X
XTemplate edition Sequence
X:begin
X, Edition = "<text:edition>"
X:end
X
XTemplate editor Sequence
X:begin
X, Editor = "<text:editor>"
X:end
X
XTemplate how-published Sequence
X:begin
X, HowPublished = "<text:how-published>"
X:end
X
XTemplate institution Sequence
X:begin
X, Institution = "<text:institution>"
X:end
X
XTemplate journal Sequence
X:begin
X, Journal = "<text:journal>"
X:end
X
XTemplate key Sequence
X:begin
X, Key = "<text:key>"
X:end
X
XTemplate month-published Sequence
X:begin
X, Month = "<text:month-published>"
X:end
X
XTemplate note Sequence
X:begin
X, Note = "<textlong:note>"
X:end
X
XTemplate number Sequence
X:begin
X, Number = "<text:number>"
X:end
X
XTemplate organization Sequence
X:begin
X, Organization = "<text:organization>"
X:end
X
XTemplate pages Sequence
X:begin
X, Pages = "<text:pages>"
X:end
X
XTemplate publisher Sequence
X:begin
X, Publisher = "<text:publisher>"
X:end
X
XTemplate school Sequence
X:begin
X, School = "<text:school>"
X:end
X
XTemplate series Sequence
X:begin
X, Series = "<text:series>"
X:end
X
XTemplate title Sequence
X:begin
X, Title = "<text:title>"
X:end
X
XTemplate volume Sequence
X:begin
X, Volume = "<text:volume>"
X:end
X
XTemplate year Sequence
X:begin
X, Year = "19<2digits:year>"
X:end
X
XTemplate 2digits Lexical
X:begin
X[0-9][0-9]
X:end
X
X
XLocal Variables:
Xtpl-begin-template-definition:"^Template"
Xtpl-begin-template-body:"^:begin"
Xtpl-end-template-body:"^:end"
Xend:
SHAR_EOF
if test 5484 -ne "`wc -c < 'bib.tpl'`"
then
	echo shar: "error transmitting 'bib.tpl'" '(should have been 5484 characters)'
fi
fi
echo shar: "extracting 'c.tpl'" '(2715 characters)'
if test -f 'c.tpl'
then
	echo shar: "will not over-write existing file 'c.tpl'"
else
sed 's/^X//' << \SHAR_EOF > 'c.tpl'
XTemplate program Sequence
X:begin
X/* <buffer-name>
X   by <user-full-name>, <today> */
X
X#include <stdio.h>
X<#vardecllist>
X
X<#functionlist>
X
X/******************** main program ********************/
X<main>
X
X:end
X
XTemplate includelist Repetition
X:begin
X
X<include>
X:end
X
XTemplate definelist Repetition
X:begin
X
X<define>
X:end
X
XTemplate vardecllist Repetition
X:begin
X
X<vardecl>
X:end
X
XTemplate argdecllist Repetition
X:begin
X
X<vardecl>
X:end
X
XTemplate functionlist Repetition
X:begin
X
X
X<function>
X:end
X
XTemplate main Sequence
X:begin
Xvoid main ()
X{
X     <#vardecllist>
X  <stmtlist>
X}
X:end
X
XTemplate include Sequence
X:begin
X#include <<text>>
X:end
X
XTemplate define Sequence
X:begin
X#define <textenter:name> <textenter:constant>
X:end
X
XTemplate vardecl Sequence
X:begin
X<type> <textenter:name>;
X:end
X
XTemplate type Selection
X:begin
Xchar
Xdouble
Xfloat
Xint
Xlong
Xshort
Xunsigned
Xvoid
Xother:
X:end
X
XTemplate other Sequence
X:begin
X<text>
X:end
X
XTemplate function Sequence
X:begin
X/****************************************/
X/* <textenter:name>:
X     <textlong:description>
X*/
X<type> <textenter:name> (<#arglist>)
X     <#argdecllist>
X{
X  <#vardecllist>
X  <stmtlist>
X} /* <textenter:name> */
X:end
X
XTemplate arglist Repetition
X:begin
X, <arg>
X:end
X
XTemplate arg Sequence
X:begin
X<text:arg>
X:end
X
XTemplate stmtlist Repetition
X:begin
X
X<stmt>
X:end
X
XTemplate caselist Repetition
X:begin
X
X<case>
X:end
X
XTemplate stmt Selection
X:begin
Xassignment:
Xbreak:
Xcase:
Xdo:
Xexpression:
Xfor:
Xif:
Xife:
Xreturn:
Xswitch:
Xwhile:
X:end
X
XTemplate assignment Sequence
X:begin
X<text:lhs> = <text:expression>;
X:end
X
XTemplate break Sequence
X:begin
Xbreak;
X:end
X
XTemplate case Sequence
X:begin
Xcase <text:constant>:
X  <stmtlist>
X  <#break>
X:end
X
XTemplate do Sequence
X:begin
Xdo
X  {
X    <stmtlist>
X    }
Xwhile (<text:expression>);
X:end
X
XTemplate expression Sequence
X:begin
X<text>
X:end
X
XTemplate for Sequence
X:begin
Xfor (<text:initially>; <text:test>; <text:increment>)
X  {
X    <stmtlist>
X    } /* for <text:test> */
X:end
X
XTemplate if Sequence
X:begin
Xif (<text:expression>)
X  {
X    <stmtlist:then>
X    } /* if (<text:expression>) */
X:end
X
XTemplate ife Sequence
X:begin
Xif (<text:expression>)
X  {
X    <stmtlist:then>
X    }
Xelse
X  {
X    <stmtlist:else>
X    } /* if (<text:expression>) */
X:end
X
XTemplate return Sequence
X:begin
Xreturn <#text:expression>;
X:end
X
XTemplate switch Sequence
X:begin
Xswitch (<text:expression>)
X  {
X     <caselist>
X     } /* switch (<text:expression>) */
X:end
X
XTemplate while Sequence
X:begin
Xwhile (<text:expression>)
X  {
X    <stmtlist>
X    } /* while (<text:expression>) */
X:end
X
XTemplate comment Sequence
X:begin
X/*
X  <textlong>
X*/
X:end
X
X
XLocal Variables:
Xtpl-begin-template-definition:"^Template"
Xtpl-begin-template-body:"^:begin"
Xtpl-end-template-body:"^:end"
Xend:
SHAR_EOF
if test 2715 -ne "`wc -c < 'c.tpl'`"
then
	echo shar: "error transmitting 'c.tpl'" '(should have been 2715 characters)'
fi
fi
echo shar: "extracting 'elisp.tpl'" '(2808 characters)'
if test -f 'elisp.tpl'
then
	echo shar: "will not over-write existing file 'elisp.tpl'"
else
sed 's/^X//' << \SHAR_EOF > 'elisp.tpl'
XTemplate all Selection
X:begin
Xpackage:
Xconstant:
Xvariable:
Xfunction:
Xstmt:
X:end
X
XTemplate package Sequence
X:begin
X;;; <buffer-name> -- <text:documentation>
X;;; <user-full-name>, <today>
X
X<#variables>
X<functions>
X:end
X
XTemplate variables Repetition
X:begin
X
X<variable>
X:end
X
XTemplate variable Sequence
X:begin
X(defvar <textenter:variable-name> <text:value>
X  "<textlong:documentation>"
X) ; <textenter:variable-name>
X:end
X
XTemplate functions Repetition
X:begin
X
X<function>
X:end
X
XTemplate function Sequence
X:begin
X
X(defun <textenter:function-name> (<text:arguments>)
X  "<textlong:documentation>"
X  (interactive "<arg-type><textenter:function-name>: <text:arguments>? ")
X					; Local Variables
X  (let (<text:local-variables>)
X					; Body
X    <stmt:body>
X  ) ; let
X) ; defun <textenter:function-name>
X
X:end
X
XTemplate arg-type Selection
X:begin
Xa	; Function name
Xb	; Buffer name (must exist)
XB	; Buffer name (possibly nonexistent)
Xc	; Single character
XC	; Command name
Xd	; Point as a number (no prompt)
XD	; Directory name
Xf	; File name (must exist)
XF	; File name (possibly nonexistent)
Xk	; Keystroke sequence (string)
Xm	; Mark as a number (no prompt)
Xn	; Number (reads a string and converts)
Xp	; Prefix arg converted to number
XP	; Prefix arg in raw form
Xr	; Region (no prompt)
Xs	; String
XS	; Symbol
Xv	; Variable name (must be user-variable-p)
Xx	; Lisp expression unevaluated
XX	; Lisp expression evaluated
X:end
X
XTemplate stmt Selection
X:begin
Xprogn:
Xcond:
Xdebug:
Xife:
Xif:
Xwhile:
Xwhilelist:
Xsimple:
X:end
X
XTemplate progn Sequence
X:begin
X(progn
X  <POINT>
X) ; progn
X:end
X
XTemplate simple Sequence
X:begin
X(<text:fn> <arglist>)
X:end
X
XTemplate arglist Repetition
X:begin
X <arg>
X:end
X
XTemplate arg Selection
X:begin
Xexpression:
Xstmt:
X:end
X
XTemplate expression Sequence
X:begin
X<text:expression>
X:end
X
XTemplate if Sequence
X:begin
X(if <text:condition>
X  <POINT>
X) ; if <text:condition>
X:end
X
XTemplate ife Sequence
X:begin
X(if <text:condition>
X  <POINT>
X; else
X  <POINT>
X) ; if <text:condition>
X:end
X
XTemplate cond Sequence
X:begin
X(cond
X  <clauselist>
X) ; cond
X:end
X
XTemplate clauselist Repetition
X:begin
X
X<clause>
X:end
X
XTemplate clause Sequence
X:begin
X(<text:condition>
X  <POINT>
X) ; <text:condition>
X:end
X
XTemplate while Sequence
X:begin
X(while <text:condition>
X  <POINT>
X) ; while <text:condition>
X:end
X
XTemplate whilelist Sequence
X:begin
X(while <text:list>
X  (setq <text:item> (car <text:list>))
X  (setq <text:list> (cdr <text:list>))
X  <POINT>
X) ; while <text:list>
X:end
X
XTemplate unrolledwhile Sequence
X:begin
X(if <text:condition>
X  <stmt:body>
X) ; if <text:condition>
X(while <text:condition>
X  <stmt:body>
X) ; while <text:condition>
X:end
X
XTemplate debug Sequence
X:begin
X(debug nil "<POINT>")
X:end
X
X
XLocal Variables:
Xtpl-begin-template-definition:"^Template"
Xtpl-begin-template-body:"^:begin"
Xtpl-end-template-body:"^:end"
Xend:
SHAR_EOF
if test 2808 -ne "`wc -c < 'elisp.tpl'`"
then
	echo shar: "error transmitting 'elisp.tpl'" '(should have been 2808 characters)'
fi
fi
echo shar: "extracting 'generic.tpl'" '(2815 characters)'
if test -f 'generic.tpl'
then
	echo shar: "will not over-write existing file 'generic.tpl'"
else
sed 's/^X//' << \SHAR_EOF > 'generic.tpl'
XTemplate buffer-name Function
X:begin
X(buffer-name)
X:end
X
XTemplate buffer-file-name Function
X:begin
X(buffer-file-name)
X:end
X
XTemplate current-time-string Function
X:begin
X(current-time-string)
X:end
X
XTemplate date Function
X:begin
X(concat "<monthnumber>" "/" "<day>" "/" "<year>")
X:end
X
XTemplate day Function
X:begin
X(let ((str (current-time-string)))
X  (string-match "[0-9]+" str)
X  (substring str (match-beginning 0) (match-end 0))
X)
X:end
X
XTemplate file-name-directory Function
X:begin
X(file-name-directory (buffer-file-name))
X:end
X
XTemplate file-name-nondirectory Function
X:begin
X(file-name-nondirectory (buffer-file-name))
X:end
X
XTemplate month Function
X:begin
X(let ((str (current-time-string))
X      prefix)
X  (setq prefix (substring str 4 7))
X  (cond
X    ((equal prefix "Jan")
X      "January")
X    ((equal prefix "Feb")
X      "February")
X    ((equal prefix "Mar")
X      "March")
X    ((equal prefix "Apr")
X      "April")
X    ((equal prefix "May")
X      "May")
X    ((equal prefix "Jun")
X      "June")
X    ((equal prefix "Jul")
X      "July")
X    ((equal prefix "Aug")
X      "August")
X    ((equal prefix "Sep")
X      "September")
X    ((equal prefix "Oct")
X      "October")
X    ((equal prefix "Nov")
X      "November")
X    ((equal prefix "Dec")
X      "December")
X  )
X)
X:end
X
XTemplate monthnumber Function
X:begin
X(let ((str (current-time-string))
X      prefix)
X  (setq prefix (substring str 4 7))
X  (cond
X    ((equal prefix "Jan")
X      "1")
X    ((equal prefix "Feb")
X      "2")
X    ((equal prefix "Mar")
X      "3")
X    ((equal prefix "Apr")
X      "4")
X    ((equal prefix "May")
X      "5")
X    ((equal prefix "Jun")
X      "6")
X    ((equal prefix "Jul")
X      "7")
X    ((equal prefix "Aug")
X      "8")
X    ((equal prefix "Sep")
X      "9")
X    ((equal prefix "Oct")
X      "10")
X    ((equal prefix "Nov")
X      "11")
X    ((equal prefix "Dec")
X      "12")
X  )
X)
X:end
X
XTemplate today Function
X:begin
X(concat "<month>" " " "<day>" ", 19" "<year>")
X:end
X
XTemplate time Function
X:begin
X(let ((str (current-time-string)))
X  (string-match "[0-9][0-9]:[0-9][0-9]" str)
X  (substring str (match-beginning 0) (match-end 0))
X)
X:end
X
XTemplate user-full-name Function
X:begin
X(user-full-name)
X:end
X
XTemplate weekday Function
X:begin
X(let ((str (current-time-string))
X      prefix)
X  (setq prefix (substring str 0 3))
X  (cond
X    ((equal prefix "Sun")
X      "Sunday")
X    ((equal prefix "Mon")
X      "Monday")
X    ((equal prefix "Tue")
X      "Tuesday")
X    ((equal prefix "Wed")
X      "Wednesday")
X    ((equal prefix "Thu")
X      "Thursday")
X    ((equal prefix "Fri")
X      "Friday")
X    ((equal prefix "Sat")
X      "Saturday")
X  )
X)
X:end
X
XTemplate year Function
X:begin
X(substring (current-time-string) -2)
X:end
X
X
XLocal Variables:
Xtpl-begin-template-definition:"^Template"
Xtpl-begin-template-body:"^:begin"
Xtpl-end-template-body:"^:end"
Xend:
SHAR_EOF
if test 2815 -ne "`wc -c < 'generic.tpl'`"
then
	echo shar: "error transmitting 'generic.tpl'" '(should have been 2815 characters)'
fi
fi
echo shar: "extracting 'latex.tpl'" '(2548 characters)'
if test -f 'latex.tpl'
then
	echo shar: "will not over-write existing file 'latex.tpl'"
else
sed 's/^X//' << \SHAR_EOF > 'latex.tpl'
XTemplate all Selection
X:begin
Xboilerplate:
Xbreaks:
Xdisplays:
Xlists:
Xsectioning:
Xsurround:
X:end
X
XTemplate abstract Sequence
X:begin
X\begin{abstract}
X<POINT>
X\end{abstract}
X:end
X
XTemplate appendix Sequence
X:begin
X\appendix{<POINT>}
X:end
X
XTemplate bf Sequence
X:begin
X{\bf <POINT>}
X:end
X
XTemplate boilerplate Selection
X:begin
Xabstract:
Xtitle:
Xwhole:
X:end
X
XTemplate breaks Selection
X:begin
Xlinebreak:
Xnewline:
Xnewpage:
Xpagebreak:
X:end
X
XTemplate center Sequence
X:begin
X\begin{center}
X<POINT>
X\end{center}
X:end
X
XTemplate chapter Sequence
X:begin
X\chapter{<POINT>}
X:end
X
XTemplate description Sequence
X:begin
X\begin {description}
X\item [<POINT>]
X\end {description}
X:end
X
XTemplate displays Selection
X:begin
Xcenter:
Xverbatim:
X:end
X
XTemplate em Sequence
X:begin
X{\em <POINT>}
X:end
X
XTemplate enumerate Sequence
X:begin
X\begin {enumerate}
X\item <POINT>
X\end {enumerate}
X:end
X
XTemplate it Sequence
X:begin
X{\it <POINT>}
X:end
X
XTemplate itemize Sequence
X:begin
X\begin {itemize}
X\item <POINT>
X\end {itemize}
X:end
X
XTemplate linebreak Sequence
X:begin
X\linebreak[4]
X:end
X
XTemplate lists Selection
X:begin
Xdescription:
Xenumerate:
Xitemize:
X:end
X
XTemplate newline Sequence
X:begin
X\newline
X:end
X
XTemplate newpage Sequence
X:begin
X\newpage
X:end
X
XTemplate pagebreak Sequence
X:begin
X\pagebreak[4]
X:end
X
XTemplate paragraph Sequence
X:begin
X\paragraph{<POINT>}
X:end
X
XTemplate part Sequence
X:begin
X\part{<POINT>}
X:end
X
XTemplate rm Sequence
X:begin
X{\rm <POINT>}
X:end
X
XTemplate section Sequence
X:begin
X\section{<POINT>}
X:end
X
XTemplate sectioning Selection
X:begin
Xappendix:
Xchapter:
Xparagraph:
Xpart:
Xsection:
Xsubparagraph:
Xsubsection:
Xsubsubsection:
X:end
X
XTemplate sl Sequence
X:begin
X{\sl <POINT>}
X:end
X
XTemplate subparagraph Sequence
X:begin
X\subparagraph{<POINT>}
X:end
X
XTemplate subsection Sequence
X:begin
X\subsection{<POINT>}
X:end
X
XTemplate subsubsection Sequence
X:begin
X\subsubsection{<POINT>}
X:end
X
XTemplate surround Selection
X:begin
Xbf:
Xem:
Xit:
Xrm:
Xsl:
Xtt:
X:end
X
XTemplate title Sequence
X:begin
X\title{<POINT>}
X\author{<user-full-name>}
X\date{<today>}
X\maketitle
X:end
X
XTemplate tt Sequence
X:begin
X{\tt <POINT>}
X:end
X
XTemplate verbatim Sequence
X:begin
X\begin{verbatim}
X<POINT>
X\end{verbatim}
X:end
X
XTemplate whole Sequence
X:begin
X\documentstyle [12pt] {article}
X
X\oddsidemargin 0in
X\evensidemargin 0in
X\topmargin -0.5in
X\textheight 9.0in
X\textwidth 6.5in
X
X% END OF STYLISTIC BOILERPLATE
X
X\begin{document}
X
X<#abstract>
X<title>
X
X<POINT>
X
X\end{document}
X
X:end
X
X
XLocal Variables:
Xtpl-begin-template-definition:"^Template"
Xtpl-begin-template-body:"^:begin"
Xtpl-end-template-body:"^:end"
Xend:
SHAR_EOF
if test 2548 -ne "`wc -c < 'latex.tpl'`"
then
	echo shar: "error transmitting 'latex.tpl'" '(should have been 2548 characters)'
fi
fi
echo shar: "extracting 'pascal.tpl'" '(3401 characters)'
if test -f 'pascal.tpl'
then
	echo shar: "will not over-write existing file 'pascal.tpl'"
else
sed 's/^X//' << \SHAR_EOF > 'pascal.tpl'
XTemplate all Selection
X:begin
Xprogram:
Xconstant:
Xtypedecl:
Xtype:
Xvariables:
Xprocedure:
Xfunction:
Xstmt:
X:end
X
XTemplate program Sequence
X:begin
Xprogram <textenter:name> (input, ouput);
Xconst
X   <constants>
Xtype
X   <types>
Xvar
X   <variables>
X
X<procedures>
X
X   begin { main program }
X      <stmtlist>
X   end.
X:end
X
XTemplate constants Repetition
X:begin
X
X<constant>
X:end
X
XTemplate constant Sequence
X:begin
X<textenter:name> = <text:value>;
X:end
X
XTemplate types Repetition
X:begin
X
X<typedecl>
X:end
X
XTemplate typedecl Sequence
X:begin
X<textenter:name> = <type>;
X:end
X
XTemplate type Selection
X:begin
Xarray:
Xboolean
Xchar
Xfile:
Xinteger
Xpointer:
Xrange:
Xreal
Xrecord:
Xscalar:
Xset:
Xother:
X:end
X
XTemplate array Sequence
X:begin
Xarray [<indexlist>] of <type>
X:end
X
XTemplate indexlist Repetition
X:begin
X, <indextype>
X:end
X
XTemplate indextype Selection
X:begin
Xrange:
Xscalar:
Xother:
X:end
X
XTemplate file Sequence
X:begin
Xfile of <type>
X:end
X
XTemplate pointer Sequence
X:begin
X^<type>
X:end
X
XTemplate range Sequence
X:begin
X<text:start> .. <text:stop>
X:end
X
XTemplate record Sequence
X:begin
Xrecord
X   <fieldlist>
Xend
X:end
X
XTemplate fieldlist Repetition
X:begin
X;
X<field>
X:end
X
XTemplate field Sequence
X:begin
X<textenter:name>: <type>
X:end
X
XTemplate scalar Sequence
X:begin
X(<itemlist>)
X:end
X
XTemplate itemlist Repetition
X:begin
X, <textenter:item>
X:end
X
XTemplate set Sequence
X:begin
Xset of <indextype>
X:end
X
XTemplate other Sequence
X:begin
X<text>
X:end
X
XTemplate variables Repetition
X:begin
X
X<variable>
X:end
X
XTemplate variable Sequence
X:begin
X<textenter:name>: <type>;
X:end
X
XTemplate procedures Repetition
X:begin
X
X<procfunc>
X:end
X
XTemplate procfunc Selection
X:begin
Xprocedure:
Xfunction:
X:end
X
XTemplate procedure Sequence
X:begin
X{************************************************************}
X
Xprocedure <textenter:name> (<args>);
Xvar
X   <variables>
Xbegin
X   <stmtlist>
Xend; { <textenter:name> }
X
X:end
X
XTemplate function Sequence
X:begin
X{************************************************************}
X
Xfunction <textenter:name> (<args>): <type>;
Xvar
X   <variables>
Xbegin
X   <stmtlist>
Xend; { <textenter:name> }
X
X:end
X
XTemplate args Repetition
X:begin
X; <argdecl>
X:end
X
XTemplate argdecl Sequence
X:begin
Xvar <textenter:id>: <type>
X:end
X
XTemplate stmtlist Repetition
X:begin
X
X<stmt>
X:end
X
XTemplate stmt Selection
X:begin
Xassignment:
Xcase:
Xcompound:
Xfor:
Xif:
Xrepeat:
Xwhile:
Xwith:
X:end
X
XTemplate assignment Sequence
X:begin
X<text:variable> := <text:expression>;
X:end
X
XTemplate case Sequence
X:begin
Xcase <text:expression> of
X   <caselist>
Xend;
X:end
X
XTemplate  caselist Repetition
X:begin
X;
X<caseclause>
X:end
X
XTemplate caseclause Sequence
X:begin
X<text:constant>: <stmt>
X:end
X
XTemplate compound Sequence
X:begin
Xbegin
X   <stmtlist>
Xend;
X:end
X
XTemplate for Sequence
X:begin
Xfor <text:index> := <text:start> to <text:stop> do begin
X   <stmtlist>
Xend; { for <text:index> }
X:end
X
XTemplate if Sequence
X:begin
Xif <text:ifcondition> then begin
X   <stmtlist>
Xend else begin
X   <stmtlist>
Xend; { if <text:ifcondition> }
X:end
X
XTemplate repeat Sequence
X:begin
Xrepeat
X   <stmtlist>
Xuntil <text:stop>;
X:end
X
XTemplate while Sequence
X:begin
Xwhile <text:whilecondition> do begin
X   <stmtlist>
Xend; { while <text:whilecondition> }
X:end
X
XTemplate with Sequence
X:begin
Xwith <text:idlist> do begin
X   <stmtlist>
Xend; { with <text:idlist> }
X:end
X
X
XLocal Variables:
Xtpl-begin-template-definition:"^Template"
Xtpl-begin-template-body:"^:begin"
Xtpl-end-template-body:"^:end"
Xend:
SHAR_EOF
if test 3401 -ne "`wc -c < 'pascal.tpl'`"
then
	echo shar: "error transmitting 'pascal.tpl'" '(should have been 3401 characters)'
fi
fi
echo shar: "extracting 'scribe.tpl'" '(6151 characters)'
if test -f 'scribe.tpl'
then
	echo shar: "will not over-write existing file 'scribe.tpl'"
else
sed 's/^X//' << \SHAR_EOF > 'scribe.tpl'
XTemplate all Selection
X:begin
Xcommand:	; spacing, include, ...
Xenvironment:	; bold, center, description, ...
Xpart:		; appendix, chapter, whole, ...
Xsurround:	; b, i, u, ux
Xvalue:		; date, page, section, ...
X:end
X
XTemplate appendix Sequence
X:begin
X@Appendix{<POINT>}
X:end
X
XTemplate appendixsection Sequence
X:begin
X@AppendixSection{<POINT>}
X:end
X
XTemplate arabic Sequence
X:begin
X@1
X:end
X
XTemplate b Sequence
X:begin
X@B{<POINT>}
X:end
X
XTemplate bold Sequence
X:begin
X@Begin{B}
X<POINT>
X@End{B}
X:end
X
XTemplate blankspace Sequence
X:begin
X@Blankspace{<POINT>}
X:end
X
XTemplate chapter Sequence
X:begin
X@Chapter{<POINT>}
X:end
X
XTemplate cite Sequence
X:begin
X@Cite{<POINT>}
X:end
X
XTemplate center Sequence
X:begin
X@Begin{Center}
X<POINT>
X@End{Center}
X:end
X
XTemplate command Selection
X:begin
Xblankspace:
Xcite:
Xenvironment:
Xfoot:
Xinclude:
Xmodify:
Xnewpage:
Xpart:
Xset:
Xtabclear:
Xtabdivide:
Xtabset:
Xvalue:
X:end
X
XTemplate counter Selection
X:begin
Xappendix
Xchapter
Xenumeration
Xpage
Xsubsection
X:end
X
XTemplate description Sequence
X:begin
X@Begin{Description}
X<POINT>
X@End{Description}
X:end
X
XTemplate device Selection
X:begin
Xfile:		; ASCII file for viewing on terminal
Ximagen300:	; laser printer
Xpagedfile:	; like file, but with formfeeds and headers, etc.
X:end
X
XTemplate document Selection
X:begin
Xarticle
Xmanual
Xreport
Xslides
X:end
X
XTemplate enumerate Sequence
X:begin
X@Begin{Enumerate}
X<POINT>
X@End{Enumerate}
X:end
X
XTemplate environment Selection
X:begin
Xbold:
Xcenter:
Xdescription:
Xenumerate:
Xformat:
Xheading:
Xitalic:
Xitemize:
Xmajorheading:
Xunderlined:
Xverbatim:
X:end
X
XTemplate file Sequence
X:begin
X@Device{File}
X@Style{Justification off}
X:end
X
XTemplate foot Sequence
X:begin
X@Foot{}
X:end
X
XTemplate format Sequence
X:begin
X@Begin{Format}
X<POINT>
X@End{Format}
X:end
X
XTemplate heading Sequence
X:begin
X@Begin{Heading}
X<POINT>
X@End{Heading}
X:end
X
XTemplate i Sequence
X:begin
X@I{<POINT>}
X:end
X
XTemplate italic Sequence
X:begin
X@Begin{I}
X<POINT>
X@End{I}
X:end
X
XTemplate imagen300 Sequence
X:begin
X@Device{Imagen300}
X@Style{FontFamily "ComputerModernRoman12"}
X:end
X
XTemplate include Sequence
X:begin
X@Include{<POINT>}
X:end
X
XTemplate itemize Sequence
X:begin
X@Begin{Itemize}
X<POINT>
X@End{Itemize}
X:end
X
XTemplate keyword Selection
X:begin
Xindent
Xjustification
X:end
X
XTemplate letterlower Sequence
X:begin
X@a
X:end
X
XTemplate letterupper Sequence
X:begin
X@A
X:end
X
XTemplate majorheading Sequence
X:begin
X@Begin{Majorheading}
X<POINT>
X@End{Majorheading}
X:end
X
XTemplate memo Sequence
X:begin
X@Center{M E M O R A N D U M}
X@Blankspace{0.25 inches}
X@Begin{Format}
X@Tabclear
X@Tabset{1 inch}
XFrom:@\<user-full-name>
XTo:@\<text:recipients>
XCc:@\<text:cclist>
XDate:@\@Value{Month} @Value{Day}, @Value{Year}
XSubject:@\<text:topic>
X@Blankspace{0.25 inches}
X@Tabclear
X@&-
X@End{Format}
X@Blankspace{0.25 inches}
X@Set{Page=1}
X@Comment{******************** END OF MEMO BOILERPLATE ********************}
X
X:end
X
XTemplate modify Sequence
X:begin
X@Modify{<counter>, Numbered{<template>}}
X:end
X
XTemplate newpage Sequence
X:begin
X@Newpage
X:end
X
XTemplate pagedfile Sequence
X:begin
X@Device{Pagedfile}
X@Style{Justification off}
X:end
X
XTemplate paragraph Sequence
X:begin
X@Paragraph{<POINT>}
X:end
X
XTemplate part Selection
X:begin
Xappendix:
Xappendixsection:
Xchapter:
Xmemo:
Xparagraph:
Xsection:
Xslidepage:
Xsubsection:
Xtitlepage:
Xwhole:
X:end
X
XTemplate romanlower Sequence
X:begin
X@i
X:end
X
XTemplate romanupper Sequence
X:begin
X@I
X:end
X
XTemplate section Sequence
X:begin
X@Section{<POINT>}
X:end
X
XTemplate set Sequence
X:begin
X@Set{<counter>=<POINT>}
X:end
X
XTemplate slidepage Sequence
X:begin
X@Comment{*********************************************************************}
X@Newpage
X@Comment{Page <text:page>}
X
X@Begin{Center}
X@Begin{B}
X<text:title>
X@End{B}
X@End{Center}
X
X@Blankspace{1 inch}
X
X@Tabclear
X@Tabset{<text:settings>}
X@Begin{Format}
X
X@End{Format}
X:end
X
XTemplate style Sequence
X:begin
X@Style{<keyword> <POINT>}
X:end
X
XTemplate subsection Sequence
X:begin
X@SubSection{<POINT>}
X:end
X
XTemplate surround Selection
X:begin
Xb:
Xi:
Xu:
Xux:
X:end
X
XTemplate tabclear Sequence
X:begin
X@Tabclear
X:end
X
XTemplate tabdivide Sequence
X:begin
X@Tabdivide{<POINT>}
X:end
X
XTemplate tabset Sequence
X:begin
X@Tabset{<POINT>}
X:end
X
XTemplate template Selection
X:begin
Xarabic:		; 1, 2, 3, ...
Xletterlower:	; a, b, c, ...
Xletterupper:	; A, B, C, ...
Xromanlower:	; i, ii, iii, ...
Xromanupper:	; I, II, III, ...
X:end
X
XTemplate titlepage Sequence
X:begin
X@Begin{TitlePage}
X@Begin{TitleBox}
X@Begin{MajorHeading}
X<text:title>
X@End{MajorHeading}
X
X<user-full-name>
X
X<textlong:address>
X
X@Value{Month} @Value{Day}, @Value{Year}
X
X@End{TitleBox}
X
X@CopyrightNotice{<user-full-name>}
X
X@Begin{ResearchCredit}
X
X@End{ResearchCredit}
X@End{TitlePage}
X@Newpage
X@Comment{***************** END OF TITLEPAGE BOILERPLATE *****************}
X:end
X
XTemplate u Sequence
X:begin
X@U{<POINT>}
X:end
X
XTemplate underlined Sequence
X:begin
X@Begin{U}
X<POINT>
X@End{U}
X:end
X
XTemplate ux Sequence
X:begin
X@UX{<POINT>}
X:end
X
XTemplate value Selection
X:begin
Xvdate:
Xvday:
Xvmanuscript:
Xvmonth:
Xvpage:
Xvsectionnumber:
Xvsectiontitle:
Xvtime:
Xvweekday:
Xvyear:
X:end
X
XTemplate vdate Sequence
X:begin
X@Value{Date}
X:end
X
XTemplate vday Sequence
X:begin
X@Value{Day}
X:end
X
XTemplate verbatim Sequence
X:begin
X@Begin{Verbatim}
X<POINT>
X@End{Verbatim}
X:end
X
XTemplate vmanuscript Sequence
X:begin
X@Value{Manuscript}
X:end
X
XTemplate vmonth Sequence
X:begin
X@Value{Month}
X:end
X
XTemplate vpage Sequence
X:begin
X@Value{Page}
X:end
X
XTemplate vsectionnumber Sequence
X:begin
X@Value{SectionNumber}
X:end
X
XTemplate vsectiontitle Sequence
X:begin
X@Value{SectionTitle}
X:end
X
XTemplate vtime Sequence
X:begin
X@Value{Time}
X:end
X
XTemplate vweekday Sequence
X:begin
X@Value{Weekday}
X:end
X
XTemplate vyear Sequence
X:begin
X@Value{Year}
X:end
X
XTemplate whole Sequence
X:begin
X@Make{<document>}
X<device>
X@Style{Linewidth 6.5 inches}
X@Style{Indent 0 chars}
X@Use{Bibliography = "<text:bibfile>"}
X@Style{References = StdAlphabetic}
X@Pageheading{left "<text:heading>", right <@Value(Page)>}
X@Pagefooting{center <@Value(Month) @Value(Day), @Value(Year)>}
X
X@Comment{****************** END OF STYLISTIC BOILERPLATE *********************}
X
X<titlepage>
X
X:end
X
X
XLocal Variables:
Xtpl-begin-template-definition:"^Template"
Xtpl-begin-template-body:"^:begin"
Xtpl-end-template-body:"^:end"
Xend:
SHAR_EOF
if test 6151 -ne "`wc -c < 'scribe.tpl'`"
then
	echo shar: "error transmitting 'scribe.tpl'" '(should have been 6151 characters)'
fi
fi
echo shar: "extracting 'texinfo.tpl'" '(8459 characters)'
if test -f 'texinfo.tpl'
then
	echo shar: "will not over-write existing file 'texinfo.tpl'"
else
sed 's/^X//' << \SHAR_EOF > 'texinfo.tpl'
XTemplate all Selection
X:begin
Xboilerplate:	; Large blocks of text
Xbreaks:		; Stop filling text
Xconditionals:	; TeX-only or Info-only
Xformatted:	; @xyz ... @end xyz
Xlists:		; enumerate, itemize, table
Xreferences:	; cross references
Xsectioning:	; chapters, sections, etc.
Xstrings:	; special characters and strings
Xsurround:	; @xyz{...}
X:end
X
XTemplate appendix Sequence
X:begin
X@appendix <POINT>
X:end
X
XTemplate appendixsection Sequence
X:begin
X@appendixsection <POINT>
X:end
X
XTemplate b Sequence
X:begin
X@b{<POINT>}
X:end
X
XTemplate boilerplate Selection
X:begin
Xinfonodes:	; Use this for on-line info nodes
Xmanual:		; Use this for printed manuals
Xwhole:		; Either of the above
X:end
X
XTemplate breaks Selection
X:begin
Xpagebreak:	; Start a new page
Xparagraphbreak:	; Start a new paragraph
Xspace:		; Leave some blank vertical space
X:end
X
XTemplate bs Sequence
X:begin
X@key{BS}
X:end
X
XTemplate bullet Sequence
X:begin
X@bullet{}
X:end
X
XTemplate center Sequence
X:begin
X@center <POINT>
X:end
X
XTemplate chapter Sequence
X:begin
X@chapter <POINT>
X:end
X
XTemplate cindex Sequence
X:begin
X@cindex <POINT>
X:end
X
XTemplate code Sequence
X:begin
X@code{<POINT>}
X:end
X
XTemplate commands Selection
X:begin
Xcomment:	; Ignore rest of line
Xheadings:	; Turn them on or off
Xinclude:	; Include a file
Xnoindent:	; Do not start a new paragraph
Xrefill:		; For info---refill after substitution of strings
X:end
X
XTemplate comment Sequence
X:begin
X@c <POINT>
X:end
X
XTemplate conditionals Selection
X:begin
Xifinfo:		; Transparent to TeX
Xiftex:		; Transparent to Info
X:end
X
XTemplate copyright Sequence
X:begin
X@copyright{}
X:end
X
XTemplate ctl Sequence
X:begin
X@key{CTL}
X:end
X
XTemplate ctrl Sequence
X:begin
X@ctrl{<POINT>}
X:end
X
XTemplate del Sequence
X:begin
X@key{DEL}
X:end
X
XTemplate dfn Sequence
X:begin
X@dfn{<POINT>}
X:end
X
XTemplate display Sequence
X:begin
X@display
X<POINT>
X@end display
X:end
X
XTemplate dots Sequence
X:begin
X@dots{}
X:end
X
XTemplate eitem Sequence
X:begin
X@item
X<POINT>
X:end
X
XTemplate enumerate Sequence
X:begin
X@enumerate
X@item
X<POINT>
X@end enumerate
X:end
X
XTemplate esc Sequence
X:begin
X@key{ESC}
X:end
X
XTemplate example Sequence
X:begin
X@example
X<POINT>
X@end example
X:end
X
XTemplate file Sequence
X:begin
X@file{<POINT>}
X:end
X
XTemplate findex Sequence
X:begin
X@findex <POINT>
X:end
X
XTemplate formatted Selection
X:begin
Xcenter:		; center a line
Xdisplay:	; like example, but variable-width font
Xexample:	; verbatim, with fixed-width font
Xgroup:		; keep together on a page
Xifinfo:		; Transparent to TeX
Xiftex:		; Transparent to Info
Xignore:		; Transparent to both
Xquotation:	; Indented display
X:end
X
XTemplate group Sequence
X:begin
X@group
X<POINT>
X@end group
X:end
X
XTemplate headings Sequence
X:begin
X@headings <text:onoroff>
X:end
X
XTemplate i Sequence
X:begin
X@i{<POINT>}
X:end
X
XTemplate ifinfo Sequence
X:begin
X@ifinfo
X<POINT>
X@end ifinfo
X:end
X
XTemplate iftex Sequence
X:begin
X@iftex
X<POINT>
X@end iftex
X:end
X
XTemplate ignore Sequence
X:begin
X@ignore
X<POINT>
X@end ignore
X:end
X
XTemplate iitem Sequence
X:begin
X@item @bullet
X<POINT>
X:end
X
XTemplate include Sequence
X:begin
X@include <text:file>
X:end
X
XTemplate indexcmds Selection
X:begin
Xcindex:		; Concepts
Xfindex:		; Functions
Xkindex:		; Keys
Xpindex:		; Programs
Xtindex:		; Data types
Xvindex:		; Variables
Xprintindex:	; Command for printing an index
X:end
X
XTemplate indexcode Selection
X:begin
Xcp		; Concepts
Xfn		; Functions
Xky		; Keys
Xpg		; Programs
Xtp		; Data types
Xvr		; Variables
X:end
X
XTemplate infonodes Sequence
X:begin
X@setfilename <text:filename>
X
X@node top, <textenter:next>, (dir), (dir)
X@chapter <POINT>
X
X<node>
X:end
X
XTemplate inforef Sequence
X:begin
X@xref{<text:node>,<text:name>,<text:file>}
X:end
X
XTemplate itemize Sequence
X:begin
X@itemize
X@item @bullet
X<POINT>
X@end itemize
X:end
X
XTemplate items Selection
X:begin
Xeitem:		; enumeration item
Xiitem:		; itemization item
Xmitem:		; menu item
Xtitem:		; table item
Xtxitem:		; table itemx
X:end
X
XTemplate kbd Sequence
X:begin
X@kbd{<POINT>}
X:end
X
XTemplate key Sequence
X:begin
X<specialchars>
X:end
X
XTemplate kindex Sequence
X:begin
X@kindex <POINT>
X:end
X
XTemplate lfd Sequence
X:begin
X@key{LFD}
X:end
X
XTemplate lists Selection
X:begin
Xenumerate:	; 1. foo
Xitemize:	; -- foo
Xtable:		; "foo"   text about foo
X:end
X
XTemplate manual Sequence
X:begin
X\input texinfo @c -*-texinfo-*-
X@settitle <text:title>
X
X@titlepage
X@sp 10
X@center @titlefont{<text:title>}
X@sp 3
X@center <user-full-name>
X@sp 1
X@center <text:address>
X@center <text:moreaddress>
X@sp 1
X@center <today>
X@sp 3
X@center @b{Abstract}
X<POINT>
X@end titlepage
X
X@c Include files with actual text
X@include <text:infonodesfile>
X
X@c Print indices
X<#printindex>
X
X@c Print table of contents
X@summarycontents
X@contents
X
X@bye
X:end
X
XTemplate menu Sequence
X:begin
X@menu
X* <text:node>:: <POINT>
X@end menu
X:end
X
XTemplate meta Sequence
X:begin
X@key{META}
X:end
X
XTemplate mitem Sequence
X:begin
X* <text:node>:: <POINT>
X:end
X
XTemplate ncsection Sequence
X:begin
X@ncsection <POINT>
X:end
X
XTemplate node Sequence
X:begin
X@node <textenter:here>, <textenter:nxt>, <textenter:prv>, <textenter:up>
X@chapter <POINT>
X:end
X
XTemplate noindent Sequence
X:begin
X@noindent
X:end
X
XTemplate pagebreak Sequence
X:begin
X@page
X:end
X
XTemplate paragraphbreak Sequence
X:begin
X@br
X:end
X
XTemplate pindex Sequence
X:begin
X@pindex <POINT>
X:end
X
XTemplate printindex Sequence
X:begin
X@node <textenter:indextype> Index, <textenter:nxt>, <textenter:prv>, <text:up>
X@unnumbered <textenter:indextype> Index
X@printindex <indexcode>
X:end
X
XTemplate pxref Sequence
X:begin
X@pxref{<text:node>}
X:end
X
XTemplate pxreflong Sequence
X:begin
X@pxref{<text:node>,<text:name>,<text:citation>,<text:file>,<text:title>}
X:end
X
XTemplate quotation Sequence
X:begin
X@quotation
X<POINT>
X@end quotation
X:end
X
XTemplate references Selection
X:begin
Xinforef:	; reference to a file without a manual
Xpxref:		; like xref, but inside a parenthesized sentence.
Xpxreflong:	; like xreflong, ...
Xxref:		; short form of cross reference
Xxreflong:	; long form with all the fields
X:end
X
XTemplate refill Sequence
X:begin
X@refill
X:end
X
XTemplate ret Sequence
X:begin
X@key{RET}
X:end
X
XTemplate samp Sequence
X:begin
X@samp{<POINT>}
X:end
X
XTemplate section Sequence
X:begin
X@section <POINT>
X:end
X
XTemplate sectioning Selection
X:begin
Xappendix:
Xappendixsection:
Xchapter:
Xmenu:			; Build a menu
Xncsection:		; Section when there are no chapters
Xnode:			; Build a node
Xsection:
Xsubsection:
Xsubsubsection:
Xunnumbered:
Xunnumberedsec:
X:end
X
XTemplate sft Sequence
X:begin
X@key{SFT}
X:end
X
XTemplate space Sequence
X:begin
X@sp <POINT>
X:end
X
XTemplate spc Sequence
X:begin
X@key{SPC}
X:end
X
XTemplate specialchars Selection
X:begin
Xbs:		; Backspace
Xctl:		; Control
Xdel:		; Delete key
Xesc:		; Escape
Xlfd:		; Linefeed
Xmeta:		; Meta key (Escape on most keyboards)
Xret:		; Carraige return
Xsft:		; Shift
Xspc:		; Space
Xtab:		; Tab
X:end
X
XTemplate strings Selection
X:begin
Xbullet:		; Bullet character for itemization
Xcopyright:	; Copyright symbol
Xdots:		; Ellipsis
Xkey:		; Choose a special character
Xtex:		; The TeX logo
X:end
X
XTemplate subsection Sequence
X:begin
X@subsection <POINT>
X:end
X
XTemplate subsubsection Sequence
X:begin
X@subsubsection <POINT>
X:end
X
XTemplate surround Selection
X:begin
Xb:		; Bold font
Xcode:		; Literal code
Xctrl:		; For control characters
Xdfn:		; Definition of a term
Xfile:		; File name
Xi:		; Italic font
Xkbd:		; Like code, but for names of keys
Xsamp:		; Literal text
Xt:		; Typewriter font (fixed-width)
Xvar:		; Metasyntactic variables (e.g., the file @var{file}...)
Xw:		; Prohibit line break within
X:end
X
XTemplate t Sequence
X:begin
X@t{<POINT>}
X:end
X
XTemplate tab Sequence
X:begin
X@key{TAB}
X:end
X
XTemplate table Sequence
X:begin
X@table <surround>
X@item <text:label>
X<POINT>
X@end table
X:end
X
XTemplate tex Sequence
X:begin
X@TeX{}
X:end
X
XTemplate tindex Sequence
X:begin
X@tindex <POINT>
X:end
X
XTemplate titem Sequence
X:begin
X@item <text:label>
X<POINT>
X:end
X
XTemplate txitem Sequence
X:begin
X@itemx <text:label>
X:end
X
XTemplate unnumbered Sequence
X:begin
X@unnumbered <POINT>
X:end
X
XTemplate unnumberedsec Sequence
X:begin
X@unnumberedsec <POINT>
X:end
X
XTemplate var Sequence
X:begin
X@var{<POINT>}
X:end
X
XTemplate vindex Sequence
X:begin
X@vindex <POINT>
X:end
X
XTemplate w Sequence
X:begin
X@w{<POINT>}
X:end
X
XTemplate whole Selection
X:begin
Xinfonodes:	; Use this for on-line info nodes.
Xmanual:		; Use this for a printed manual.
X:end
X
XTemplate xref Sequence
X:begin
X@xref{<text:node>}
X:end
X
XTemplate xreflong Sequence
X:begin
X@xref{<text:node>,<text:name>,<text:citation>,<text:file>,<text:title>}
X:end
X
X
XLocal Variables:
Xtpl-begin-template-definition:"^Template"
Xtpl-begin-template-body:"^:begin"
Xtpl-end-template-body:"^:end"
Xend:
SHAR_EOF
if test 8459 -ne "`wc -c < 'texinfo.tpl'`"
then
	echo shar: "error transmitting 'texinfo.tpl'" '(should have been 8459 characters)'
fi
fi
exit 0
#	End of shell archive


