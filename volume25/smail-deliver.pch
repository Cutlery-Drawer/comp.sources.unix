Newsgroups: comp.sources.unix
From: chip@tct.com (Chip Salzenberg)
Subject: v25i107: patches to smail 2.5 for Xenix and/or Deliver
Sender: sources-moderator@pa.dec.com
Approved: vixie@pa.dec.com

Submitted-By: chip@tct.com (Chip Salzenberg)
Posting-Number: Volume 25, Issue 107
Archive-Name: smail-deliver.pch

The enclosed patches modify Smail 2.5 for use with the Deliver program
and/or under the SCO Xenix/286 or Xenix/386 operating system.
  
Other miscellaneous changes:

1.  Bug fix in deliver.c, where the command buffers were too small.
2.  Support for a macro HOSTFILE, which if defined is taken to be the
    name of a file containing the hostname.
3.  Perform routing on plain hostnames as well as domainized names.
4.  Accept the syntax "a%b" as a synonym for "a@b".
5.  Include only the basename of child programs in the message log.

	chip@tct.com (Chip Salzenberg)

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of shell archive."
# Contents:  D.README D.patches X.Makefile X.install X.mn.post execm.c
# Wrapped by chip@count on Mon Aug 19 11:59:04 1991
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'D.README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'D.README'\"
else
echo shar: Extracting \"'D.README'\" \(3895 characters\)
sed "s/^X//" >'D.README' <<'END_OF_FILE'
XD.README -- 15 May 1990
X
XThis file describes how to use the enclosed smail 2.5 patches for use
Xwith Deliver and/or SCO Xenix.
X
XTo use these patches, you will need Deliver 2.0 or higher and Larry
XWall's patch program.  You need not have Xenix; these patches include
Xsome changes for Xenix, but they're all properly ifdef'd on M_XENIX.
X
X
XInstallation:
X
X1.  Find your original, untouched smail 2.5 sources.  Copy these to a
X    new directory.  (We'll call it "/usr/src/smail25".)  If you don't
X    have your original sources, some (or many!) patches may fail,
X    possibly introducing problems.
X
X2.  Unpack this sharchive in /usr/src/smail25.
X
X3.  If you are using Xenix, rename your original Makefile to
X    something else, and rename X.Makefile to Makefile.
X
X4.  Run "patch <D.patches".  Patch does the hard work of source changes.
X
X5.  Examine defs.h and modify it as necessary for your machine(s).
X    Note that my old Xenix patches used to support Micnet directly
X    from Smail.  No more!  Now any Micnet support is handled by
X    Deliver.
X
X6.  Type "make" to build smail (and, for Xenix, "execm").
X
X7.  If you are using Xenix, then >as root<, run "./X.install".
X    Otherwise, follow the installation instructions in the Smail
X    documentation.
X
X8.  If you are using Xenix, and if you must for some reason support
X    that kludge known as Micnet, then use the provided file X.mn.post
X    as your post-user delivery file.  Note that X.mn.post is written
X    in Perl 3.0; you must have Perl installed on your system for the
X    script to work.
X
X
XXenix installation should result in:
X
X	/usr/bin/rmail moved to /usr/bin/rmail.x and never used again.
X
X	Smail installed as /usr/bin/smail with a link to /usr/bin/rmail.
X
X	/usr/lib/mail/execmail moved to /usr/lib/mail/execmail.x and
X	never used again (unless you undefine DELIVER in defs.h).
X
X	The program execm.c installed as /usr/lib/mail/execmail.  This
X	"fake" execmail just parses its arguments and overlays itself
X	with smail, which does all the work. (The /usr/bin/mail
X	program uses execmail, so we can't ignore it.  I would have
X	just linked /usr/bin/smail to /usr/lib/mail/execmail, but
X	their arguments are different.)
X
X
XNotes on aliasing changes under Xenix:
X
XWith these patches installed, Smail bypasses the Xenix mail system,
Xincluding aliasing.  Smail does alias processing aliases using
X/usr/lib/mail/saliases.  This file has a format which is almost, but
Xnot quite, entirely unlike the Xenix aliases file.  See the smail
X"aliases.c" for some hints.  The main difference is that you can
Xinclude a name in parentheses after the alias:
X
X	postmaster:     chip                    (mail administrator)
X	rick:           rick@uunet.uu.net       (Rick Adams)
X
X
XNotes on the use of Xenix /usr/bin/mail:
X
XIf you want to use Internet-style addresses with /usr/bin/mail, you
Xhave to add the line "set execmail" to /usr/lib/mail/mailrc.
XOtherwise, /usr/bin/mail assumes that addresses without bangs must be
Xvalid local users.  Of course, you can use the bang notation with
Xdomains and /usr/bin/mail will always be happy.
X
XIf you do any significant amount of mail work, forget /usr/bin/mail
Xand use Elm.
X
X
XOther miscellaneous changes:
X
X1.  Bug fix in deliver.c, where the command buffers were too small.
X2.  Support for a macro HOSTFILE, which if defined is taken to be the
X    name of a file containing the hostname.
X3.  Perform routing on plain hostnames as well as domainized names.
X4.  Accept the syntax "a%b" as a synonym for "a@b".
X5.  Include only the basename of child programs in the message log.
X
X
XOne final comment:
X
XI'd like to have some idea of how widely used these patches are.  So
Xwhen you get it working -- or if you can't! -- drop me a line and tell
Xme about it.  My address is <chip@tct.com>.  If that doesn't work, try
X<uunet!pdn!tct!chip>.
X
X
XChip Salzenberg <chip@tct.com>
XComdev/TC Telemanagement, Sarasota, FL
X15 May 1990
END_OF_FILE
if test 3895 -ne `wc -c <'D.README'`; then
    echo shar: \"'D.README'\" unpacked with wrong size!
fi
# end of 'D.README'
fi
if test -f 'D.patches' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'D.patches'\"
else
echo shar: Extracting \"'D.patches'\" \(10492 characters\)
sed "s/^X//" >'D.patches' <<'END_OF_FILE'
X
XIndex: defs.h
X***************
X*** 25,28 ****
X--- 25,30 ----
X  /*#define SENDMAIL "/usr/lib/sendmail"	/* Turn off to use /bin/(l)mail only */
X  
X+ #define DELIVER "/usr/bin/deliver"	/* A really hoopy program */
X+ 
X  #ifdef BSD
X  #define GETHOSTNAME			/* use gethostname() */
X***************
X*** 31,35 ****
X  #endif
X  
X! /* if defined, HOSTNAME overrides UNAME and GETHOSTNAME */
X  /*#define HOSTNAME	"host"		/* literal name */
X  
X--- 33,44 ----
X  #endif
X  
X! /* if defined, HOSTFILE overrides UNAME and GETHOSTNAME */
X! #ifndef HOSTFILE
X! #ifdef M_XENIX
X! #define HOSTFILE    "/etc/systemid"	/* read host name from this file */
X! #endif
X! #endif
X! 
X! /* if defined, HOSTNAME overrides HOSTFILE, UNAME, and GETHOSTNAME */
X  /*#define HOSTNAME	"host"		/* literal name */
X  
X***************
X*** 41,45 ****
X   */
X  
X! #define MYDOM		".UUCP"		/* literal domain suffix */
X  
X  /*
X--- 50,54 ----
X   */
X  
X! #define MYDOM		".uucp"		/* literal domain suffix */
X  
X  /*
X***************
X*** 104,108 ****
X  */
X  
X! #define ALIAS	"/usr/lib/aliases"	/* location of mail aliases       */
X  /*#define CASEALIAS			/* make aliases case sensitive    */
X  /*#define LOWERLOGNAME			/* map local logins to lower case */
X--- 113,121 ----
X  */
X  
X! #ifdef M_XENIX
X! #define ALIAS   "/usr/lib/mail/saliases"
X! #else
X! #define ALIAS   "/usr/lib/aliases"
X! #endif
X  /*#define CASEALIAS			/* make aliases case sensitive    */
X  /*#define LOWERLOGNAME			/* map local logins to lower case */
X***************
X*** 124,129 ****
X   */
X  
X  #define FULLNAME	"/usr/lib/fullnames"
X! 					/* list of Full Name, address pairs */
X  
X  /*#define DOT_REQD			/* Must be George.P.Burdell@gatech.EDU
X--- 137,146 ----
X   */
X  
X+ 	/* list of Full Name, address pairs */
X+ #ifdef M_XENIX
X+ #define FULLNAME	"/usr/lib/mail/fullnames"
X+ #else
X  #define FULLNAME	"/usr/lib/fullnames"
X! #endif
X  
X  /*#define DOT_REQD			/* Must be George.P.Burdell@gatech.EDU
X***************
X*** 140,145 ****
X--- 157,166 ----
X  
X  #ifndef PATHS
X+ #ifdef M_XENIX
X+ #define PATHS	"/usr/lib/mail/paths"	/* location of the path database */
X+ #else
X  #define PATHS	"/usr/lib/uucp/paths"	/* location of the path database */
X  #endif
X+ #endif
X  
X  /*#define LOG	"/usr/spool/uucp/mail.log"	/* log of uucp mail */
X***************
X*** 161,166 ****
X  #endif
X  
X  #ifndef SMAIL
X! #define SMAIL		"/bin/smail"	/* location of smail command */
X  #endif
X  
X--- 182,192 ----
X  #endif
X  
X+ 	/* location of smail command */
X  #ifndef SMAIL
X! #ifdef M_XENIX
X! #define SMAIL		"/usr/bin/smail"
X! #else
X! #define SMAIL		"/bin/smail"
X! #endif
X  #endif
X  
X***************
X*** 178,183 ****
X  */
X  
X! #define RMAIL(flags,from,sys) "%s -a%s %s - %s!rmail",UUX,from,flags,sys /* */
X! /*#define RMAIL(flags,from,sys) "%s %s - %s!rmail",UUX,flags,sys /* */
X  
X  #define RARG(user)		" '(%s)'",user
X--- 204,212 ----
X  */
X  
X! #ifdef M_XENIX
X! #define RMAIL(flags,from,sys) "%s %s - %s!rmail",UUX,flags,sys
X! #else
X! #define RMAIL(flags,from,sys) "%s -a%s %s - %s!rmail",UUX,from,flags,sys
X! #endif
X  
X  #define RARG(user)		" '(%s)'",user
X***************
X*** 197,202 ****
X  
X  #define HANDLE	ALL
X! #define ROUTING JUSTDOMAIN
X  
X  #ifdef BSD
X  #define LMAIL(frm,sys)		"/bin/mail"	/* BSD local delivery agent */
X--- 226,238 ----
X  
X  #define HANDLE	ALL
X! #define ROUTING ALWAYS
X  
X+ #ifdef DELIVER
X+ #define LMAIL(frm,sys)		"%s",DELIVER
X+ #else
X+ #ifdef M_XENIX
X+ #define EXECMAIL		"/usr/lib/mail/execmail.x"
X+ #define LMAIL(frm,sys)		"%s",EXECMAIL
X+ #else
X  #ifdef BSD
X  #define LMAIL(frm,sys)		"/bin/mail"	/* BSD local delivery agent */
X***************
X*** 203,206 ****
X--- 239,244 ----
X  #else
X  #define LMAIL(frm,sys)		"/bin/lmail"	/* SV  local delivery agent */
X+ #endif
X+ #endif
X  #endif
X  
X
XIndex: alias.c
X***************
X*** 459,463 ****
X  	SKIPSPACE(p);		/* skip leading whitespace on line */
X  
X! 	while((*p != NULL) && (*p != '#')) {
X  		b = p;
X  		if(*b == '"') {
X--- 459,463 ----
X  	SKIPSPACE(p);		/* skip leading whitespace on line */
X  
X! 	while((*p != '\0') && (*p != '#')) {
X  		b = p;
X  		if(*b == '"') {
X
XIndex: deliver.c
X***************
X*** 65,71 ****
X  	char *mktemp();
X  	char from[SMLBUF];		/* accumulated from argument 	*/
X! 	char lcommand[SMLBUF];		/* local command issued 	*/
X! 	char rcommand[SMLBUF];		/* remote command issued	*/
X! 	char scommand[SMLBUF];		/* retry  command issued	*/
X  	char *command;			/* actual command		*/
X  	char buf[SMLBUF];		/* copying rest of the letter   */
X--- 65,71 ----
X  	char *mktemp();
X  	char from[SMLBUF];		/* accumulated from argument 	*/
X! 	char lcommand[MAXCLEN+SMLBUF];	/* local command issued 	*/
X! 	char rcommand[MAXCLEN+SMLBUF];	/* remote command issued	*/
X! 	char scommand[MAXCLEN+SMLBUF];	/* retry  command issued	*/
X  	char *command;			/* actual command		*/
X  	char buf[SMLBUF];		/* copying rest of the letter   */
X***************
X*** 101,105 ****
X  
X  /*
X! **  If we don't have sendmail, arrange to trap standard error
X  **  for inclusion in the message that is returned with failed mail.
X  */
X--- 101,105 ----
X  
X  /*
X! **  If we don't have a smart mailer, arrange to trap standard error
X  **  for inclusion in the message that is returned with failed mail.
X  */
X***************
X*** 112,116 ****
X  		}
X  
X! 		*lend = *rend = *send = '\0';
X  
X  /*
X--- 112,118 ----
X  		}
X  
X! 		*lend = '\0';
X! 		*rend = '\0';
X! 		*send = '\0';
X  
X  /*
X***************
X*** 162,165 ****
X--- 164,168 ----
X  			if ((formv[j] != form)
X  			 || (strcmpic(hostv[i], hostv[j]) != 0)
X+ 			 || ((send - scommand) > MAXCLEN)
X  			 || ((lend - lcommand) > MAXCLEN)
X  			 || ((rend - rcommand) > MAXCLEN)) {
X***************
X*** 218,228 ****
X  		if (retrying) {
X  			command = scommand;
X- 		} else if (form == LOCAL) {
X- 			command = lcommand;
X  		} else {
X! 			command = rcommand;
X! 			if(flags == uux_noqueue) {
X! 				noqcnt++;
X  			}
X  		}
X  		ADVISE("COMMAND: %s\n", command);
X--- 221,238 ----
X  		if (retrying) {
X  			command = scommand;
X  		} else {
X! #ifdef DELIVER
X! 			/* Let Deliver handle local and UUCP mail. */
X! 			command = lcommand;
X! #else
X! 			if (form == LOCAL) {
X! 				command = lcommand;
X! 			} else {
X! 				command = rcommand;
X! 				if(flags == uux_noqueue) {
X! 					noqcnt++;
X! 				}
X  			}
X+ #endif
X  		}
X  		ADVISE("COMMAND: %s\n", command);
X***************
X*** 270,278 ****
X  */
X  		if (form == LOCAL) {
X! #ifdef SENDMAIL
X  			(void) sprintf(buf, LFROM(from, nows, hostname));
X  			size += strlen(buf);
X  			(void) fputs(buf, out);
X! #else
X  			char *p;
X  			if((p=index(from, '!')) == NULL) {
X--- 280,288 ----
X  */
X  		if (form == LOCAL) {
X! #if defined(SENDMAIL) || defined(EXECMAIL) || defined(DELIVER)
X  			(void) sprintf(buf, LFROM(from, nows, hostname));
X  			size += strlen(buf);
X  			(void) fputs(buf, out);
X! #else /* no embedded bangs */
X  			char *p;
X  			if((p=index(from, '!')) == NULL) {
X***************
X*** 282,286 ****
X  				(void) fputs(buf, out);
X  			} else {
X! 				*p = NULL;
X  				(void) sprintf(buf, RFROM(p+1, nows, from));
X  				size += strlen(buf);
X--- 292,296 ----
X  				(void) fputs(buf, out);
X  			} else {
X! 				*p = '\0';
X  				(void) sprintf(buf, RFROM(p+1, nows, from));
X  				size += strlen(buf);
X***************
X*** 305,311 ****
X  		{
X  			(void) sprintf(buf,
X! 				"Received: by %s (%s)\n\tid AA%05d; %s\n",
X  					hostdomain, VERSION,
X! 					getpid(), arpanows);
X  			size += strlen(buf);
X  			(void) fputs(buf, out);
X--- 315,326 ----
X  		{
X  			(void) sprintf(buf,
X! 					"Received: by %s (%s%s); %s\n",
X  					hostdomain, VERSION,
X! #ifdef DELIVER
X! 					"+deliver",
X! #else
X! 					"",
X! #endif
X! 					arpanows);
X  			size += strlen(buf);
X  			(void) fputs(buf, out);
X***************
X*** 371,378 ****
X  					
X  					(void) fseek(spoolfp, message, 0);
X! #ifdef SENDMAIL
X! 					/* if we have sendmail, then it
X  					** was handed the mail, which failed.
X! 					** sendmail returns the failed mail
X  					** for us, so we need not do it again.
X  					*/
X--- 386,393 ----
X  					
X  					(void) fseek(spoolfp, message, 0);
X! #if defined(SENDMAIL) || defined(EXECMAIL)
X! 					/* if we have a smart mailer, then it
X  					** was handed the mail, which failed.
X! 					** smart mailers return the failed mail
X  					** for us, so we need not do it again.
X  					*/
X
XIndex: headers.c
X***************
X*** 154,157 ****
X--- 154,168 ----
X  		return (DOMAIN);
X  	}
X+ /*
X+ **  Try splitting at %.  If it works, this is user%domain, which we choose
X+ **  to understand as user@domain.  Prefer the righthand % in a%b%c.
X+ **  (This code allows 'user%foo@mydom' to mean '@mydom,user@foo'.)
X+ */
X+ 	if ((parts = ssplit(address, '%', partv)) >= 2) {
X+ 		(void) strcpy(domain, partv[parts-1]);
X+ 		(void) strncpy(user, partv[0], partv[parts-1]-partv[0]-1);
X+ 		user[partv[parts-1]-partv[0]-1] = '\0';
X+ 		return (DOMAIN);
X+ 	} 
X  /* 
X  **  Done trying.  This must be just a user name, form LOCAL.
X
XIndex: misc.c
X***************
X*** 52,58 ****
X  	int cmask;
X  
X! 	logtime = strcpy(tbuf, nows);
X! 	logtime[16] = '\0';
X! 	logtime += 4;
X  
X  	cmask = umask(0);
X--- 52,77 ----
X  	int cmask;
X  
X! 	/* To make the log file look nicer, show only the basename of
X! 	 * the command.
X! 	 */
X! 	if (*command == '/')
X! 	{
X! 		char *p, *ecmd;
X! 
X! 		if ( (ecmd = index(command, ' ')) != 0 )
X! 			*ecmd = '\0';
X! 
X! 		if ( (p = rindex(command, '/')) != 0 )
X! 			command = p + 1;
X! 
X! 		if ( ecmd != 0 )
X! 			*ecmd = ' ';
X! 	}
X! 
X! 	/* Time (now).
X! 	 */
X! 	strcpy(tbuf, nows);
X! 	tbuf[16] = '\0';
X! 	logtime = &tbuf[4];
X  
X  	cmask = umask(0);
X***************
X*** 312,315 ****
X--- 331,349 ----
X  	if (!*hostname)
X  		(void) strcpy(hostname, HOSTNAME);
X+ #endif
X+ #ifdef HOSTFILE
X+ 	if (!*hostname) {
X+ 		FILE *fp;
X+ 		char *p;
X+ 
X+ 		if ((fp = fopen(HOSTFILE, "r")) != NULL) {
X+ 			if (fgets(hostname, SMLBUF - 1, fp) != NULL
X+ 			 && (p = index(hostname, '\n')) != NULL)
X+ 				*p = '\0';
X+ 			else
X+ 				*hostname = '\0';
X+ 			fclose(fp);
X+ 		}
X+ 	}
X  #endif
X  #ifdef GETHOSTNAME
X
XIndex: nptx.c
X***************
X*** 126,130 ****
X  		if((p = rindex(name, '.')) == NULL) break;
X  		(void) strcpy(nl[i], p+1);
X! 		*p = NULL;
X  	}
X  	(void) strcpy(nl[i], name);
X--- 126,130 ----
X  		if((p = rindex(name, '.')) == NULL) break;
X  		(void) strcpy(nl[i], p+1);
X! 		*p = '\0';
X  	}
X  	(void) strcpy(nl[i], name);
X***************
X*** 163,167 ****
X  			if((pi = rindex(buf, '.')) == NULL) break;
X  			(void) strcpy(il[ii], pi+1);
X! 			*pi = NULL;
X  		}
X  		(void) strcpy(il[ii], buf);
X--- 163,167 ----
X  			if((pi = rindex(buf, '.')) == NULL) break;
X  			(void) strcpy(il[ii], pi+1);
X! 			*pi = '\0';
X  		}
X  		(void) strcpy(il[ii], buf);
END_OF_FILE
if test 10492 -ne `wc -c <'D.patches'`; then
    echo shar: \"'D.patches'\" unpacked with wrong size!
fi
# end of 'D.patches'
fi
if test -f 'X.Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'X.Makefile'\"
else
echo shar: Extracting \"'X.Makefile'\" \(1449 characters\)
sed "s/^X//" >'X.Makefile' <<'END_OF_FILE'
X# Makefile for smail under SCO Xenix
X# @(#)Makefile	2.5 (smail) 9/15/87
X#
X# Modified for SCO Xenix by Chip Salzenberg <chip@tct.com>.
X# Fixed as per comments of Chris Lewis <uunet!mnetor!spectrix!clewis>.
X#
X# With the addition of the "xenix" pseudo-target, this Makefile now makes
X# both smail and execm by default.
X#
X# Because installation under Xenix is odd, the "install" pseudo-target
X# has been removed.  Run "X.install" to install Smail under Xenix.
X
XCFLAGS	= -O
XLDFLAGS = -i
XSHELL	= /bin/sh
XCOPY    = copy -om
X
X#
X# System V Release 2.0 sites can use -lmalloc for a faster malloc
X#
X#LIBS	=	-lmalloc
X
XOBJECTS =	main.o map.o resolve.o deliver.o misc.o alias.o pw.o headers.o getpath.o str.o getopt.o
X
Xxenix:  smail execm
Xall:    smail svbinmail lcasep pathproc mkfnames nptx execm
X
Xsmail:		$(OBJECTS)
X		$(CC) $(LDFLAGS) -F 4000 $(OBJECTS) -o smail $(LIBS)
X
X$(OBJECTS):	defs.h
X
Xexecm:          execm.c
X		$(CC) $(CFLAGS) $(LDFLAGS) execm.c -o execm
X
Xsvbinmail:	svbinmail.c defs.h
X		$(CC) $(CFLAGS) $(LDFLAGS) svbinmail.c -o svbinmail
X
Xlcasep:		lcasep.c
X		$(CC) $(CFLAGS) $(LDFLAGS) lcasep.c -o lcasep
X
Xpathproc:	pathproc.sh
X		$(COPY) pathproc.sh pathproc
X		chmod 755 pathproc
X
Xmkfnames:	mkfnames.sh
X		$(COPY) mkfnames.sh mkfnames
X		chmod 755 mkfnames
X
Xnptx:		nptx.o pw.o str.o
X		$(CC) $(CFLAGS) nptx.o pw.o str.o -o nptx $(LIBS)
X
Xclean:
X		rm -f *.o *.ln a.out core
X
Xclobber:	clean
X		rm -f smail rmail lcasep pathproc mkfnames svbinmail nptx execm
END_OF_FILE
if test 1449 -ne `wc -c <'X.Makefile'`; then
    echo shar: \"'X.Makefile'\" unpacked with wrong size!
fi
# end of 'X.Makefile'
fi
if test -f 'X.install' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'X.install'\"
else
echo shar: Extracting \"'X.install'\" \(1050 characters\)
sed "s/^X//" >'X.install' <<'END_OF_FILE'
X:
X# X.install
X#
X# Shell script to install smail in a Xenix System V system.
X#
X# Note that this script renames the standard Xenix rmail and execmail
X# programs to rmail.x and execmail.x respectively.  If those `.x' files
X# already exist, then no renaming takes place, so you can run this script
X# more than once without losing those renamed programs.
X#
X# BTW, be sure to test everything thoroughly; a broken mail system is
X# sure to upset any users on your system.
X
XCOPY="copy -m"
XSMAIL="/usr/bin/smail"
XRMAIL="/usr/bin/rmail"
XEXECM="/usr/lib/mail/execmail"
X
Xfor f in smail execm
Xdo
X    if [ ! -x $f ]; then
X	echo "You need to compile $f first."
X	exit 1
X    fi
Xdone
X
Xecho "Installing current smail -- you have 5 seconds to abort."
Xsleep 5
X
Xif [ ! -f $RMAIL.x ]; then
X    mv $RMAIL $RMAIL.x
Xfi
Xrm -f $RMAIL
Xif [ ! -f $EXECM.x ]; then
X    mv $EXECM $EXECM.x
Xfi
Xrm -f $EXECM
X
X$COPY execm $EXECM
Xchown bin $EXECM
Xchgrp bin $EXECM
Xchmod 755 $EXECM
X
Xrm -f $SMAIL $RMAIL
X$COPY smail $SMAIL
Xchown bin $SMAIL
Xchgrp bin $SMAIL
Xchmod 755 $SMAIL
Xln $SMAIL $RMAIL
END_OF_FILE
if test 1050 -ne `wc -c <'X.install'`; then
    echo shar: \"'X.install'\" unpacked with wrong size!
fi
chmod +x 'X.install'
# end of 'X.install'
fi
if test -f 'X.mn.post' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'X.mn.post'\"
else
echo shar: Extracting \"'X.mn.post'\" \(1085 characters\)
sed "s/^X//" >'X.mn.post' <<'END_OF_FILE'
X#!/bin/perl
X# Post-user delivery file that supports Xenix Micnet.
X#
X# If you want to support Micnet with Deliver, then install this file
X# as /usr/local/lib/deliver.post.  This file reads the Micnet topology
X# file and automatically converts "micnethost!user" to "micnethost:user".
X# It's a good example of the flexibility of Deliver and Perl.
X#
X# NOTE:  Be sure that you have Deliver 2.0 patchlevel 9 or higher.
X
X# Various constants
X
X$SENDER = $ENV{'SENDER'};
X$MAILCLN = "/usr/lib/mail/mail.cln";
X
X# Figure out Micnet topology
X
X&read_top;
X
X# Parse addresses
X
Xfor $a (@ARGV) {
X	if (($host, $rest) = ($a =~ /^([^!]+)!([^!]+)$/)) {
X		if ($MICNET{$host}) {
X			print "|$MAILCLN -h 0 '$host' '$SENDER' '$rest'\n";
X		}
X		else {
X			print $a, "\n";
X		}
X	}
X	else {
X		print $a, "\n";
X	}
X}
X
X# Read Micnet topology file, collecting hostnames.
X
Xsub read_top {
X	return unless open(TOP, "/usr/lib/mail/top");
X	while (<TOP>) {
X		chop;
X		s/#.*//;
X		next if /^\s*$/;
X		($host1, $tty1, $host2, $tty2, $speed) = split;
X		next unless $speed;
X		$MICNET{$host1} = 1;
X		$MICNET{$host2} = 1;
X	}
X	close(TOP);
X}
END_OF_FILE
if test 1085 -ne `wc -c <'X.mn.post'`; then
    echo shar: \"'X.mn.post'\" unpacked with wrong size!
fi
# end of 'X.mn.post'
fi
if test -f 'execm.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'execm.c'\"
else
echo shar: Extracting \"'execm.c'\" \(667 characters\)
sed "s/^X//" >'execm.c' <<'END_OF_FILE'
X/*
X * execm.c
X *
X * This program is a substitute for Xenix's /usr/lib/mail/execmail.
X * It parses arguments appropriate for execmail, then runs /usr/bin/smail.
X *
X * Written by Chip Salzenberg <chip@tct.uucp>.
X */
X
X#include <stdio.h>
X
Xmain(argc, argv)
Xint     argc;
Xchar    **argv;
X{
X	char *progname = argv[0];
X
X	/*
X	 * Drop the execmail options.
X	 */
X	while (argv[1][0] == '-')
X	{
X		switch (argv[1][1])
X		{
X		case 'f':
X		case 'h':
X			argv += (argv[1][2] ? 1 : 2);
X			break;
X		default:
X			++argv;
X			break;
X		}
X	}
X
X	argv[0] = progname;
X	execv("/usr/bin/smail", argv);
X	execv("/bin/smail", argv);
X
X	fprintf(stderr, "%s: can't execute smail!\n", progname);
X	exit(1);
X}
END_OF_FILE
if test 667 -ne `wc -c <'execm.c'`; then
    echo shar: \"'execm.c'\" unpacked with wrong size!
fi
# end of 'execm.c'
fi
echo shar: End of shell archive.
exit 0
-- 
Chip Salzenberg at Teltronics/TCT     <chip@tct.com>, <uunet!pdn!tct!chip>
