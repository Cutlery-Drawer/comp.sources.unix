Newsgroups: comp.sources.unix
From: pmiller@bmr.gov.au (Peter Miller)
Subject: v28i098: cook - a file construction tool, V1.6, Part05/19
References: <1.775008949.28543@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: pmiller@bmr.gov.au (Peter Miller)
Posting-Number: Volume 28, Issue 98
Archive-Name: cook-1.6/part05

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 5 (of 19)."
# Contents:  aux/MANIFEST.sh aux/Makefile.head aux/patch.file.sh
#   common/ansi.c common/fp.c common/fp.h common/fp/len.c
#   common/s-v-arg.h common/str.h cook/builtin/defined.c
#   cook/builtin/exists.c cook/builtin/filter_out.c
#   cook/builtin/getenv.c cook/expr.h doc/function/upcase.so
#   doc/history.so doc/intro.so doc/option.so doc/refman.t
#   doc/variables.so lib/bison lib/program lib/yacc
#   make2cook/stmt/define.c make2cook/stmt/vpath.c man1/cooktime.1
#   man1/find_libs.1 test/00/t0030a.sh test/00/t0041a.sh
#   test/00/t0042a.sh test/00/t0043a.sh test/00/t0047a.sh
#   test/00/t0049a.sh test/00/t0051a.sh test/00/t0054a.sh
#   test/00/t0056a.sh test/00/t0062a.sh test/00/t0067a.sh
#   test/00/t0068a.sh test/00/t0069a.sh test/00/t0078a.sh
#   test/00/t0079a.sh
# Wrapped by vixie@gw.home.vix.com on Sat Jul 23 17:11:21 1994
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'aux/MANIFEST.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'aux/MANIFEST.sh'\"
else
echo shar: Extracting \"'aux/MANIFEST.sh'\" \(1948 characters\)
sed "s/^X//" >'aux/MANIFEST.sh' <<'END_OF_FILE'
X#! /bin/sh
X#
X#	cook - file construction tool
X#	Copyright (C) 1993, 1994 Peter Miller.
X#	All rights reserved.
X#
X#	This program is free software; you can redistribute it and/or modify
X#	it under the terms of the GNU General Public License as published by
X#	the Free Software Foundation; either version 2 of the License, or
X#	(at your option) any later version.
X#
X#	This program is distributed in the hope that it will be useful,
X#	but WITHOUT ANY WARRANTY; without even the implied warranty of
X#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#	GNU General Public License for more details.
X#
X#	You should have received a copy of the GNU General Public License
X#	along with this program; if not, write to the Free Software
X#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X#
X# MANIFEST: shell script to generate the MANIFEST file
X#
Xecho
Xecho
Xecho "MANIFEST	This file."
Xfor f in $*
Xdo
X	case $f in
X	MANIFEST)
X		;;
X	LICENSE)
X		info="GNU General Public License"
X		;;
X	README)
X		info="Blurb about cook"
X		;;
X	BUILDING)
X		info="Instructions how to build, test and install cook"
X		;;
X	aux/CHANGES*)
X		info="Change history of cook"
X		;;
X	Makefile)
X		info="Instructions to make(1) how to build and test cook"
X		;;
X	common/patchlevel.h)
X		info="The patch level of this distribution."
X		;;
X	doc/version.so)
X		info="The patch level of this distribution."
X		;;
X	aux/new.so)
X		info="Indirection to release note for this release."
X		;;
X	configure)
X		info="Shell script to construct Makefile and common/config.h"
X		;;
X	Makefile.in)
X		info="Template for Makefile, used by configure"
X		;;
X	common/config.h.in)
X		info="Template for common/config.h, used by configure"
X		;;
X	aux/template/*)
X		info="New file template."
X		;;
X	*)
X		info=`awk '
X/[ 	]MANIFEST:[ 	]/ {
X	for (j = 1; j < NF; ++j)
X		if ($j == "MANIFEST:")
X			break;
X	for (k = j + 1; k <= NF; ++k)
X		printf(" %s", $k);
X	printf("\n");
X	exit;
X}' $f`
X		;;
X	esac
X	echo "$f	$info"
Xdone
Xexit 0
END_OF_FILE
if test 1948 -ne `wc -c <'aux/MANIFEST.sh'`; then
    echo shar: \"'aux/MANIFEST.sh'\" unpacked with wrong size!
fi
# end of 'aux/MANIFEST.sh'
fi
if test -f 'aux/Makefile.head' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'aux/Makefile.head'\"
else
echo shar: Extracting \"'aux/Makefile.head'\" \(2017 characters\)
sed "s/^X//" >'aux/Makefile.head' <<'END_OF_FILE'
X#
X#	cook - file construction tool
X#	Copyright (C) 1990, 1991, 1992, 1993, 1994 Peter Miller.
X#	All rights reserved.
X#
X#	This program is free software; you can redistribute it and/or modify
X#	it under the terms of the GNU General Public License as published by
X#	the Free Software Foundation; either version 2 of the License, or
X#	(at your option) any later version.
X#
X#	This program is distributed in the hope that it will be useful,
X#	but WITHOUT ANY WARRANTY; without even the implied warranty of
X#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#	GNU General Public License for more details.
X#
X#	You should have received a copy of the GNU General Public License
X#	along with this program; if not, write to the Free Software
X#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X#
X# MANIFEST: instructions to make, how to build the cook package
X#
X
X#
X# directory containing the source
X#
Xsrcdir = @srcdir@
XVPATH = @srcdir@
X
X#
X# the name of the install program to use
X#
XINSTALL = @INSTALL@
XINSTALL_PROGRAM = @INSTALL_PROGRAM@
XINSTALL_DATA = @INSTALL_DATA@
X
X#
X# the name of the compiler to use
X#
XCC = @CC@
X
X#
X# The compiler flags to use
X#
XCFLAGS = -O
X
X#
X# The linker flags to use
X#
XLDFLAGS = -s
X
X#
X# prefix for installation path
X#
Xprefix = /usr/local
Xexec_prefix = $(prefix)
X
X#
X# where to put the library directory
X#	(contains data, don't use exec_prefix)
X#
Xlibdir = $(prefix)/lib/cook
X
X#
X# where to put the executables
X#
Xbindir = $(exec_prefix)/bin
X
X#
X# where to put the manuals
X#
Xmandir = $(prefix)/man
X
X#
X# Which yacc to use
X#
XYACC = @YACC@
X
X#
X# extra libraries required for your system
X#
XLIBS = @LIBS@
X
X#
X# shell to use to run tests and commands
X#
XSH = @SH@
X
X#
X# command used to construct libraries
X#
XAR = ar
X
X#
X# program used to place index within libraries
X#
XRANLIB = @RANLIB@
X
X#
X# You should not need to alter anything below this point.
X#------------------------------------------------------------
X
Xall: bin/c_incl bin/cook bin/cookfp bin/cooktime bin/find_libs \
X	bin/make2cook bin/roffpp
END_OF_FILE
if test 2017 -ne `wc -c <'aux/Makefile.head'`; then
    echo shar: \"'aux/Makefile.head'\" unpacked with wrong size!
fi
# end of 'aux/Makefile.head'
fi
if test -f 'aux/patch.file.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'aux/patch.file.sh'\"
else
echo shar: Extracting \"'aux/patch.file.sh'\" \(1949 characters\)
sed "s/^X//" >'aux/patch.file.sh' <<'END_OF_FILE'
X#!/bin/sh
X#
X#	cook - file construction tool
X#	Copyright (C) 1993, 1994 Peter Miller.
X#	All rights reserved.
X#
X#	This program is free software; you can redistribute it and/or modify
X#	it under the terms of the GNU General Public License as published by
X#	the Free Software Foundation; either version 2 of the License, or
X#	(at your option) any later version.
X#
X#	This program is distributed in the hope that it will be useful,
X#	but WITHOUT ANY WARRANTY; without even the implied warranty of
X#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#	GNU General Public License for more details.
X#
X#	You should have received a copy of the GNU General Public License
X#	along with this program; if not, write to the Free Software
X#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X#
X# MANIFEST: shell script to generate the patch for one file
X#
Xcase $# in
X4)
X	project=$1
X	change=$2
X	filename=$3
X	path=$4
X	;;
X*)
X	echo "usage: $0 <project> <change> <filename> <path>" 1>&2
X	exit 1
X	;;
Xesac
X
Xtmp=/tmp/$$
Xtmp2=/tmp/$$.2
X
X#
X# the patchlevel patch can be generated accurately
X#
Xif test "$filename" = "common/patchlevel.h"
Xthen
X	echo "Index: common/patchlevel.h"
X	prev=`aegis -list version -p $project -c $change | awk -F'"' '/previous/{print $2}'`
X	echo "Prereq: \"$prev\""
X	echo "#define PATCHLEVEL \"$prev\"" > $tmp
X	diff -c $tmp common/patchlevel.h | sed '1,2d'
X	rm -f $tmp
X	exit 0
Xfi
X
X#
X# fake patches for the generated files
X#
Xchanges=`echo $project | awk -F. '{print "aux/CHANGES."$1"."$2}'`
Xif test "$filename" = "$changes"
Xthen
X	echo "Index: $filename"
X	diff -c /dev/null $path | sed '1,2d'
X	exit 0
Xfi
X
X#
X# construct a diff listing for the file
X#
Xif aegis -cp $filename -delta 1 -output $tmp -p $project -c $change
Xthen
X	in=$tmp
Xelse
X	in=/dev/null
Xfi
Xif diff -c $in $path > $tmp2 2> /dev/null
Xthen
X	echo $filename unchanged 1>&2
Xelse
X	echo "Index: $filename"
X	sed '1,2d' < $tmp2
Xfi
X
X#
X# clean up and go home
X#
Xrm -f $tmp $tmp2
Xexit 0
END_OF_FILE
if test 1949 -ne `wc -c <'aux/patch.file.sh'`; then
    echo shar: \"'aux/patch.file.sh'\" unpacked with wrong size!
fi
# end of 'aux/patch.file.sh'
fi
if test -f 'common/ansi.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'common/ansi.c'\"
else
echo shar: Extracting \"'common/ansi.c'\" \(1986 characters\)
sed "s/^X//" >'common/ansi.c' <<'END_OF_FILE'
X/*
X *	cook - file construction tool
X *	Copyright (C) 1991, 1992, 1993, 1994 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: functions to implement missing ANSI C mandated functions
X *
X * This file contains functions for use with non-ANSI conforming systems
X * to implement absent ANSI functionality.
X */
X
X#include <ac/stddef.h>
X#include <ac/stdlib.h>
X#include <ac/string.h>
X#include <stdio.h>
X
X#include <main.h>
X
X
X/*
X * NAME
X *	strerror - string for error number
X *
X * SYNOPSIS
X *	char *strerror(int errnum);
X *
X * DESCRIPTION
X *	The strerror function maps the error number in errnum to an error
X *	message string.
X *
X * RETURNS
X *	The strerror function returns a pointer to the string, the contents of
X *	which are implementation-defined.  The array pointed to shall not be
X *	modified by the program, but may be overwritten by a subsequent call to
X *	the strerror function.
X *
X * CAVEAT
X *	Unknown errors will be rendered in the form "Error %d", where %d will
X *	be replaced by a decimal representation of the error number.
X */
X
X#ifndef HAVE_STRERROR
X
Xchar *
Xstrerror(n)
X	int		n;
X{
X	extern int	sys_nerr;
X	extern char	*sys_errlist[];
X	static char	buffer[16];
X
X	if (n < 1 || n > sys_nerr)
X	{
X		sprintf(buffer, "Error %d", n);
X		return buffer;
X	}
X	return sys_errlist[n];
X}
X
X#endif
END_OF_FILE
if test 1986 -ne `wc -c <'common/ansi.c'`; then
    echo shar: \"'common/ansi.c'\" unpacked with wrong size!
fi
# end of 'common/ansi.c'
fi
if test -f 'common/fp.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'common/fp.c'\"
else
echo shar: Extracting \"'common/fp.c'\" \(2280 characters\)
sed "s/^X//" >'common/fp.c' <<'END_OF_FILE'
X/*
X *	cook - file construction tool
X *	Copyright (C) 1994 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: functions to manipulate fingerprints
X */
X
X#include <errno.h>
X#include <ac/fcntl.h>
X#include <ac/unistd.h>
X
X#include <fp.h>
X#include <mem.h>
X
X
Xfingerprint_ty *
Xfingerprint_new(mp)
X	fingerprint_methods_ty *mp;
X{
X	fingerprint_ty	*fp;
X
X	fp = mem_alloc(mp->size);
X	fp->method = mp;
X	mp->constructor(fp);
X	return fp;
X}
X
X
Xvoid
Xfingerprint_delete(fp)
X	fingerprint_ty	*fp;
X{
X	fp->method->destructor(fp);
X	mem_free(fp);
X};
X
X
Xstatic int fingerprint_scan _((fingerprint_ty *, char *));
X
Xstatic int
Xfingerprint_scan(fp, fn)
X	fingerprint_ty	*fp;
X	char		*fn;
X{
X	int		fd;
X	unsigned char	ibuf[1024];
X	long		nbytes;
X	int		err;
X
X	if (fn)
X	{
X		fd = open(fn, O_RDONLY, 0666);
X		if (fd < 0)
X			return -1;
X	}
X	else
X		fd = 0;
X	for (;;)
X	{
X		nbytes = read(fd, ibuf, sizeof(ibuf));
X		if (nbytes < 0)
X		{
X			if (fn)
X			{
X				err = errno;
X				close(fd);
X				errno = err;
X			}
X			return -1;
X		}
X		if (nbytes == 0)
X			break;
X		fingerprint_addn(fp, ibuf, nbytes);
X	}
X	if (fn && close(fd) < 0)
X		return -1;
X	return 0;
X}
X
X
Xint
Xfingerprint_file_hash(fp, fn, obuf)
X	fingerprint_ty	*fp;
X	char		*fn;
X	unsigned char	*obuf;
X{
X	if (fingerprint_scan(fp, fn))
X		return -1;
X	return fingerprint_hash(fp, obuf);
X}
X
X
Xint
Xfingerprint_file_sum(fp, fn, obuf)
X	fingerprint_ty	*fp;
X	char		*fn;
X	char		*obuf;
X{
X	if (fingerprint_scan(fp, fn))
X		return -1;
X	fingerprint_sum(fp, obuf);
X	return 0;
X}
X
X
Xvoid
Xfingerprint_add(p, c)
X	fingerprint_ty	*p;
X	int		c;
X{
X	unsigned char	buf;
X
X	buf = c;
X	fingerprint_addn(p, &buf, 1);
X}
END_OF_FILE
if test 2280 -ne `wc -c <'common/fp.c'`; then
    echo shar: \"'common/fp.c'\" unpacked with wrong size!
fi
# end of 'common/fp.c'
fi
if test -f 'common/fp.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'common/fp.h'\"
else
echo shar: Extracting \"'common/fp.h'\" \(2011 characters\)
sed "s/^X//" >'common/fp.h' <<'END_OF_FILE'
X/*
X *	cook - file construction tool
X *	Copyright (C) 1994 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: interface definition for common/fp.c
X */
X
X#ifndef COMMON_FP_H
X#define COMMON_FP_H
X
X#include <main.h>
X
Xstruct fingerprint_methods_ty; /* forward */
X
X#define FINGERPRINT_BASE_CLASS \
X	struct fingerprint_methods_ty *method;
X
Xtypedef struct fingerprint_ty fingerprint_ty;
Xstruct fingerprint_ty
X{
X	FINGERPRINT_BASE_CLASS
X};
X
Xtypedef struct fingerprint_methods_ty fingerprint_methods_ty;
Xstruct fingerprint_methods_ty
X{
X	long		size;
X	char		*name;
X	void (*constructor)_((fingerprint_ty *));
X	void (*destructor)_((fingerprint_ty *));
X	void (*addn)_((fingerprint_ty *, unsigned char *, int));
X	int (*hash)_((fingerprint_ty *, unsigned char *));
X	void (*sum)_((fingerprint_ty *, char *));
X};
X
Xfingerprint_ty *fingerprint_new _((fingerprint_methods_ty *));
Xvoid fingerprint_delete _((fingerprint_ty *));
Xvoid fingerprint_add _((fingerprint_ty *, int));
Xint fingerprint_file_hash _((fingerprint_ty *, char *, unsigned char *));
Xint fingerprint_file_sum _((fingerprint_ty *, char *, char *));
X
X#define fingerprint_addn(p, s, n) \
X	(p)->method->addn((p), (s), (n))
X#define fingerprint_hash(p, s) \
X	(p)->method->hash((p), (s))
X#define fingerprint_sum(p, s) \
X	(p)->method->sum((p), (s))
X
X#endif /* COMMON_FP_H */
END_OF_FILE
if test 2011 -ne `wc -c <'common/fp.h'`; then
    echo shar: \"'common/fp.h'\" unpacked with wrong size!
fi
# end of 'common/fp.h'
fi
if test -f 'common/fp/len.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'common/fp/len.c'\"
else
echo shar: Extracting \"'common/fp/len.c'\" \(2110 characters\)
sed "s/^X//" >'common/fp/len.c' <<'END_OF_FILE'
X/*
X *	cook - file construction tool
X *	Copyright (C) 1994 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: functions to manipulate length fingerprints
X */
X
X#include <stdio.h>
X
X#include <fp/len.h>
X
X
Xtypedef struct len_ty len_ty;
Xstruct len_ty
X{
X	FINGERPRINT_BASE_CLASS
X	unsigned long	len;
X};
X
X
Xstatic void len_constructor _((fingerprint_ty *));
X
Xstatic void
Xlen_constructor(p)
X	fingerprint_ty	*p;
X{
X	len_ty		*f;
X
X	f = (len_ty *)p;
X	f->len = 0;
X}
X
X
Xstatic void len_destructor _((fingerprint_ty *));
X
Xstatic void
Xlen_destructor(p)
X	fingerprint_ty	*p;
X{
X}
X
X
Xstatic void len_addn _((fingerprint_ty *, unsigned char *, int));
X
Xstatic void
Xlen_addn(p, s, n)
X	fingerprint_ty	*p;
X	unsigned char	*s;
X	int		n;
X{
X	len_ty		*f;
X
X	f = (len_ty *)p;
X	f->len += n;
X}
X
X
Xstatic int len_hash _((fingerprint_ty *, unsigned char *));
X
Xstatic int
Xlen_hash(p, h)
X	fingerprint_ty	*p;
X	unsigned char	*h;
X{
X	len_ty		*f;
X	unsigned long	n;
X	int		j;
X
X	/*
X	 * return length as 5 bytes (yes, five)
X	 */
X	f = (len_ty *)p;
X	n = f->len;
X	f->len = 0;
X	for (j = 0; j < 5; ++j)
X	{
X		h[j] = n & 255;
X		n >>= 8;
X	}
X	return 5;
X}
X
X
Xstatic void len_sum _((fingerprint_ty *, char *));
X
Xstatic void
Xlen_sum(p, obuf)
X	fingerprint_ty	*p;
X	char		*obuf;
X{
X	len_ty		*f;
X
X	f = (len_ty *)p;
X	sprintf(obuf, "%8lu", f->len);
X}
X
X
Xfingerprint_methods_ty fp_len =
X{
X	sizeof(len_ty),
X	"length",
X	len_constructor,
X	len_destructor,
X	len_addn,
X	len_hash,
X	len_sum
X};
END_OF_FILE
if test 2110 -ne `wc -c <'common/fp/len.c'`; then
    echo shar: \"'common/fp/len.c'\" unpacked with wrong size!
fi
# end of 'common/fp/len.c'
fi
if test -f 'common/s-v-arg.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'common/s-v-arg.h'\"
else
echo shar: Extracting \"'common/s-v-arg.h'\" \(1866 characters\)
sed "s/^X//" >'common/s-v-arg.h' <<'END_OF_FILE'
X/*
X *	cook - file construction tool
X *	Copyright (C) 1993, 1994 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: isolate varargs.h vs stdarg.h differences
X */
X
X#ifndef S_V_ARG_H
X#define S_V_ARG_H
X
X/*
X * This file contains insulation from whether <varargs.h> is being used
X * or whether <stdarg.h> is being used.  Incompatibilities are hidden behind
X * three macros:
X *	sva_last	- last argument in variable arg func defn
X *	sva_last_decl	- declaration for last arg
X *	sva_start	- hides whether nth is used or not
X * These macros are non-syntactic (ugh!) but they sure make things prettier.
X *
X * Do not directly include either <stdarg.h> or <varargs.h> in the code,
X * always use this header <s-v-arg.h> instead.
X *
X * Never refer directly to va_start, va_arg, or va_dcl directly in the code.
X * Direct references to va_list, va_arg and va_end are OK.
X */
X
X#include <config.h>
X
X#ifndef HAVE_STDARG_H
X
X#include <varargs.h>
X
X#define sva_last ,va_alist
X#define sva_last_decl va_dcl
X#define sva_init(ap, nth) va_start(ap)
X
X#else
X
X#include <stdarg.h>
X
X#define sva_last
X#define	sva_last_decl
X#define	sva_init(ap, nth) va_start(ap, nth)
X
X#endif
X
X#endif /* S_V_ARG_H */
END_OF_FILE
if test 1866 -ne `wc -c <'common/s-v-arg.h'`; then
    echo shar: \"'common/s-v-arg.h'\" unpacked with wrong size!
fi
# end of 'common/s-v-arg.h'
fi
if test -f 'common/str.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'common/str.h'\"
else
echo shar: Extracting \"'common/str.h'\" \(1994 characters\)
sed "s/^X//" >'common/str.h' <<'END_OF_FILE'
X/*
X *	cook - file construction tool
X *	Copyright (C) 1990, 1991, 1992, 1993, 1994 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: interface definition for common/str.c
X */
X
X#ifndef STR_H
X#define STR_H
X
X#include <ac/stddef.h>
X#include <main.h>
X#include <s-v-arg.h>
X
Xtypedef unsigned long str_hash_ty;
X
Xtypedef struct string_ty string_ty;
Xstruct string_ty
X{
X	str_hash_ty	str_hash;
X	string_ty	*str_next;
X	long		str_references;
X	size_t		str_length;
X	char		str_text[1];
X};
X
Xextern string_ty *str_true;
Xextern string_ty *str_false;
X
Xvoid str_initialize _((void));
Xstring_ty *str_from_c _((char *));
Xstring_ty *str_n_from_c _((char *, size_t));
Xstring_ty *str_copy _((string_ty *));
Xvoid str_free _((string_ty *));
Xstring_ty *str_catenate _((string_ty *, string_ty *));
Xstring_ty *str_cat_three _((string_ty *, string_ty *, string_ty *));
Xint str_bool _((string_ty *));
Xstring_ty *str_upcase _((string_ty *));
Xstring_ty *str_downcase _((string_ty *));
Xstring_ty *str_substitute _((string_ty *from, string_ty *to, string_ty *to_me));
X
X#ifdef DEBUG
Xint str_valid _((string_ty *));
X#endif
X
Xstring_ty *str_field _((string_ty *s, int sep, int fldnum));
Xstring_ty *str_format _((char *, ...));
Xstring_ty *str_vformat _((char *, va_list));
X
X#define str_equal(s1, s2) ((s1) == (s2))
X
X#endif /* STR_H */
END_OF_FILE
if test 1994 -ne `wc -c <'common/str.h'`; then
    echo shar: \"'common/str.h'\" unpacked with wrong size!
fi
# end of 'common/str.h'
fi
if test -f 'cook/builtin/defined.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'cook/builtin/defined.c'\"
else
echo shar: Extracting \"'cook/builtin/defined.c'\" \(2275 characters\)
sed "s/^X//" >'cook/builtin/defined.c' <<'END_OF_FILE'
X/*
X *	cook - file construction tool
X *	Copyright (C) 1991, 1992, 1993, 1994 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: functions to implement the builtin defined function
X *
X * The builtin functions all append their results to the supplied
X * `result' word list.  The first word of the `args' word list
X * is the name of the function.
X *
X * all of the functions return 0 in success, or -1 on error.
X */
X
X#include <builtin/defined.h>
X#include <error.h>
X#include <expr.h>
X#include <id.h>
X
X
X/*
X * NAME
X *	builtin_defined - is a variable defined
X *
X * SYNOPSIS
X *	int builtin_defined(wlist *result, wlist *args);
X *
X * DESCRIPTION
X *	Defined is a built-in function of cook, described as follows:
X *	This function requires a single argument,
X *	the name of a variable to be tested for existence.
X *
X * RETURNS
X *	It returns "1" (true) if the named variable is defined
X *	and "" (false) if it is not.
X *
X * CAVEAT
X *	The returned result is in dynamic memory.
X *	It is the responsibility of the caller to dispose of
X *	the result when it is finished, with a wl_free() call.
X */
X
Xint
Xbuiltin_defined(result, args)
X	wlist		*result;
X	wlist		*args;
X{
X	int		j;
X
X	assert(result);
X	assert(args);
X	assert(args->wl_nwords);
X	if (args->wl_nwords < 2)
X	{
X		expr_error
X		(
X			"%s: requires one or more arguments",
X			args->wl_word[0]->str_text
X		);
X		return -1;
X	}
X	for (j = 1; j < args->wl_nwords; j++)
X	{
X		wlist		value;
X
X		if (id_search(args->wl_word[j], &value))
X		{
X			wl_free(&value);
X			wl_append(result, str_true);
X		}
X		else
X			wl_append(result, str_false);
X	}
X	return 0;
X}
END_OF_FILE
if test 2275 -ne `wc -c <'cook/builtin/defined.c'`; then
    echo shar: \"'cook/builtin/defined.c'\" unpacked with wrong size!
fi
# end of 'cook/builtin/defined.c'
fi
if test -f 'cook/builtin/exists.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'cook/builtin/exists.c'\"
else
echo shar: Extracting \"'cook/builtin/exists.c'\" \(2234 characters\)
sed "s/^X//" >'cook/builtin/exists.c' <<'END_OF_FILE'
X/*
X *	cook - file construction tool
X *	Copyright (C) 1991, 1992, 1993, 1994 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: functions to implement the builtin exists function
X *
X * The builtin function all append their results to the supplied
X * `result' word list.  The first word of the `args' word list
X * is the name of the function.
X *
X * all of the functions return 0 in success, or -1 on error.
X */
X
X#include <builtin/exists.h>
X#include <error.h>
X#include <expr.h>
X#include <os.h>
X
X
X/*
X * NAME
X *	builtin_exists - test for file existence
X *
X * SYNOPSIS
X *	int builtin_exists(wlist *result, wlist *args);
X *
X * DESCRIPTION
X *	The builtin_exists function is a built-in function of cook,
X *	described as follows:
X *	This function requires one argument,
X *	being the name of a file to test for existence.
X *	The resulting wordlist is "" (false) if the file does not exist,
X *	and "1" (true) if the file does exist.
X *
X * RETURNS
X *	A word list containing the expanded pathname of the named commands
X *	given as arguments.
X *
X * CAVEAT
X *	The returned result is in dynamic memory.
X *	It is the responsibility of the caller to dispose of
X *	the result when it is finished, with a wl_free() call.
X */
X
Xint
Xbuiltin_exists(result, args)
X	wlist		*result;
X	wlist		*args;
X{
X	int		j;
X
X	assert(result);
X	assert(args);
X	assert(args->wl_nwords);
X	for (j = 1; j < args->wl_nwords; ++j)
X	{
X		string_ty	*s;
X
X		s = args->wl_word[j];
X		if (os_exists(s))
X			wl_append(result, str_true);
X		else
X			wl_append(result, str_false);
X	}
X	return 0;
X}
END_OF_FILE
if test 2234 -ne `wc -c <'cook/builtin/exists.c'`; then
    echo shar: \"'cook/builtin/exists.c'\" unpacked with wrong size!
fi
# end of 'cook/builtin/exists.c'
fi
if test -f 'cook/builtin/filter_out.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'cook/builtin/filter_out.c'\"
else
echo shar: Extracting \"'cook/builtin/filter_out.c'\" \(2269 characters\)
sed "s/^X//" >'cook/builtin/filter_out.c' <<'END_OF_FILE'
X/*
X *	cook - file construction tool
X *	Copyright (C) 1994 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: functions to implement the builtin filter_out function
X *
X * The builtin functions all append their results to the supplied
X * `result' word list.  The first word of the `args' word list
X * is the name of the function.
X *
X * all of the functions return 0 in success, or -1 on error.
X */
X
X#include <builtin/filter_out.h>
X#include <error.h>
X#include <expr.h>
X#include <match.h>
X
X
X/*
X * NAME
X *	builtin_filter_out - wilcard filtering
X *
X * SYNOPSIS
X *	int builtin_filter_out(wlist *result, wlist *args);
X *
X * DESCRIPTION
X *	Filter_out is a built-in function of cook, described as follows:
X *	This function requires at least one argument.
X *	Filter_out uses the first argument as a pattern, and the result
X *	is the those of the second and subsequent arguments which do
X *	not match the patern.
X *
X * CAVEAT
X *	The returned result is in dynamic memory.
X *	It is the responsibility of the caller to dispose of
X *	the result when it is finished, with a wl_free() call.
X */
X
Xint
Xbuiltin_filter_out(result, args)
X	wlist		*result;
X	wlist		*args;
X{
X	int		j;
X	match_ty	*field;
X
X	assert(result);
X	assert(args);
X	assert(args->wl_nwords);
X	if (args->wl_nwords < 2)
X	{
X		expr_error
X		(
X			"%s: requires one or more arguments",
X			args->wl_word[0]->str_text
X		);
X		return -1;
X	}
X	for (j = 2; j < args->wl_nwords; j++)
X	{
X		field = match(args->wl_word[1], args->wl_word[j]);
X		if (field)
X			match_free(field);
X		else
X			wl_append(result, args->wl_word[j]);
X	}
X	return 0;
X}
END_OF_FILE
if test 2269 -ne `wc -c <'cook/builtin/filter_out.c'`; then
    echo shar: \"'cook/builtin/filter_out.c'\" unpacked with wrong size!
fi
# end of 'cook/builtin/filter_out.c'
fi
if test -f 'cook/builtin/getenv.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'cook/builtin/getenv.c'\"
else
echo shar: Extracting \"'cook/builtin/getenv.c'\" \(2110 characters\)
sed "s/^X//" >'cook/builtin/getenv.c' <<'END_OF_FILE'
X/*
X *	cook - file construction tool
X *	Copyright (C) 1991, 1992, 1993, 1994 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: functions to implement the builtin getenv function
X *
X * The builtin functions all append their results to the supplied
X * `result' word list.  The first word of the `args' word list
X * is the name of the function.
X *
X * all of the functions return 0 in success, or -1 on error.
X */
X
X#include <ac/stdlib.h>
X
X#include <builtin/getenv.h>
X#include <error.h>
X
X
X/*
X * NAME
X *	builtin_getenv - get environment variables
X *
X * SYNOPSIS
X *	int builtin_getenv(wlist *result, wlist *args);
X *
X * DESCRIPTION
X *	Getenv is a built-in function of cook, described as follows:
X *	This function requires one or more arguments.
X *
X * RETURNS
X *	A word list containing the values of the environment variables
X *	given as arguments.
X *
X * CAVEAT
X *	The returned result is in dynamic memory.
X *	It is the responsibility of the caller to dispose of
X *	the result when it is finished, with a wl_free() call.
X */
X
Xint
Xbuiltin_getenv(result, args)
X	wlist		*result;
X	wlist		*args;
X{
X	int		j;
X
X	assert(result);
X	assert(args);
X	assert(args->wl_nwords);
X	for (j = 1; j < args->wl_nwords; ++j)
X	{
X		char		*cp;
X		string_ty	*s;
X
X		cp = getenv(args->wl_word[j]->str_text);
X		if (!cp)
X			wl_append(result, str_false);
X		else
X		{
X			s = str_from_c(cp);
X			wl_append(result, s);
X			str_free(s);
X		}
X	}
X	return 0;
X}
END_OF_FILE
if test 2110 -ne `wc -c <'cook/builtin/getenv.c'`; then
    echo shar: \"'cook/builtin/getenv.c'\" unpacked with wrong size!
fi
# end of 'cook/builtin/getenv.c'
fi
if test -f 'cook/expr.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'cook/expr.h'\"
else
echo shar: Extracting \"'cook/expr.h'\" \(1922 characters\)
sed "s/^X//" >'cook/expr.h' <<'END_OF_FILE'
X/*
X *	cook - file construction tool
X *	Copyright (C) 1990, 1991, 1992, 1993 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: interface definition for cook/expr.c
X */
X
X#ifndef EXPR_H
X#define EXPR_H
X
X#include <str.h>
X#include <word.h>
X
X/*
X *  e_op values
X */
Xenum expr_op_ty
X{
X    OP_CAT = 1,
X    OP_FUNC,
X    OP_WORD
X};
Xtypedef enum expr_op_ty expr_op_ty;
X
Xtypedef struct elist elist;
Xstruct	elist
X{
X	size_t		el_nexprs;
X	struct expr	**el_expr;
X};
X
Xtypedef struct position position;
Xstruct	position
X{
X	string_ty	*pos_name;
X	int		pos_line;
X};
X
Xtypedef struct expr expr;
Xstruct expr
X{
X	expr_op_ty	e_op;
X	long		e_references;
X	position	e_position;
X	union
X	{
X		string_ty	*e__word;
X		elist		e__list;
X		expr		*e__arg[2];
X	}
X		e__u;
X};
X#define e_word	e__u.e__word
X#define e_list	e__u.e__list
X#define e_left	e__u.e__arg[0]
X#define e_right e__u.e__arg[1]
X
Xexpr *expr_alloc _((void));
Xexpr *expr_copy _((expr *));
Xvoid expr_free _((expr *));
Xint expr_eval _((wlist *, expr *));
Xvoid el_append _((elist *, expr *));
Xvoid el_free _((elist *));
Xvoid el_copy _((elist *, elist *));
Xint el2wl _((wlist *, elist *));
Xint expr_eval_condition _((expr *));
Xvoid expr_error _((char *, ...));
Xvoid el_zero _((elist *));
X
X#endif /* EXPR_H */
END_OF_FILE
if test 1922 -ne `wc -c <'cook/expr.h'`; then
    echo shar: \"'cook/expr.h'\" unpacked with wrong size!
fi
# end of 'cook/expr.h'
fi
if test -f 'doc/function/upcase.so' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'doc/function/upcase.so'\"
else
echo shar: Extracting \"'doc/function/upcase.so'\" \(2145 characters\)
sed "s/^X//" >'doc/function/upcase.so' <<'END_OF_FILE'
X.\"
X.\"	cook - file construction tool
X.\"	Copyright (C) 1990, 1991, 1992, 1993, 1994 Peter Miller.
X.\"	All rights reserved.
X.\"
X.\"	This program is free software; you can redistribute it and/or modify
X.\"	it under the terms of the GNU General Public License as published by
X.\"	the Free Software Foundation; either version 2 of the License, or
X.\"	(at your option) any later version.
X.\"
X.\"	This program is distributed in the hope that it will be useful,
X.\"	but WITHOUT ANY WARRANTY; without even the implied warranty of
X.\"	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X.\"	GNU General Public License for more details.
X.\"
X.\"	You should have received a copy of the GNU General Public License
X.\"	along with this program; if not, write to the Free Software
X.\"	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X.\"
X.\" MANIFEST: Reference Manual, Built-In Functions, Upcase
X.\"
X.H 2 "upcase"
XThis function requires one or more arguments,
Xwords to be forced into upper case.
X.\"
X.\"	cook - file construction tool
X.\"	Copyright (C) 1990, 1991, 1992, 1993, 1994 Peter Miller.
X.\"	All rights reserved.
X.\"
X.\"	This program is free software; you can redistribute it and/or modify
X.\"	it under the terms of the GNU General Public License as published by
X.\"	the Free Software Foundation; either version 2 of the License, or
X.\"	(at your option) any later version.
X.\"
X.\"	This program is distributed in the hope that it will be useful,
X.\"	but WITHOUT ANY WARRANTY; without even the implied warranty of
X.\"	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X.\"	GNU General Public License for more details.
X.\"
X.\"	You should have received a copy of the GNU General Public License
X.\"	along with this program; if not, write to the Free Software
X.\"	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X.\"
X.\" MANIFEST: Reference Manual, Built-In Functions, Downcase
X.\"
X.H 2 "downcase"
XThis function requires one or more arguments,
Xwords to be forced into lower case.
X.H 3 "Example"
X.TS
Xcenter,tab(;);
Xl l.
XExpression;Result
X_
X[upcase FOO];FOO
X[upcase Bar];BAR
X[upcase baz];BAZ
X.TE
X.H 3 "See Also"
Xdowncase
END_OF_FILE
if test 2145 -ne `wc -c <'doc/function/upcase.so'`; then
    echo shar: \"'doc/function/upcase.so'\" unpacked with wrong size!
fi
# end of 'doc/function/upcase.so'
fi
if test -f 'doc/history.so' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'doc/history.so'\"
else
echo shar: Extracting \"'doc/history.so'\" \(1884 characters\)
sed "s/^X//" >'doc/history.so' <<'END_OF_FILE'
X.\"
X.\"	cook - file construction tool
X.\"	Copyright (C) 1990, 1991, 1992, 1993 Peter Miller.
X.\"	All rights reserved.
X.\"
X.\"	This program is free software; you can redistribute it and/or modify
X.\"	it under the terms of the GNU General Public License as published by
X.\"	the Free Software Foundation; either version 2 of the License, or
X.\"	(at your option) any later version.
X.\"
X.\"	This program is distributed in the hope that it will be useful,
X.\"	but WITHOUT ANY WARRANTY; without even the implied warranty of
X.\"	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X.\"	GNU General Public License for more details.
X.\"
X.\"	You should have received a copy of the GNU General Public License
X.\"	along with this program; if not, write to the Free Software
X.\"	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X.\"
X.\" MANIFEST: Reference Manual, Ancient History
X.\"	
X.H 1 "Ancient History"
X.B Cook
Xwas originally developed because I was marooned on an operating
Xsystem without anything even vaguely resembling
Xmake.
XThis was in 1988.
XSince I had to write my own, 
XI added a few improvements.
XWhen I finally escaped back to \s-4UNIX\s+4,
Xit took only two days to port
X.B cook
Xto SystemV.
XI have since deleted all code for that original operating system,
Xalthough clues to its identity are still present.
X.P
XAfter I had
X.B cook
Xup on \s-4UNIX\s+4,
Xthe progress the world had made caught up with me.
XIt was gratifying that
Xmany of the features other make-oid authors had thought necessary
Xwere either already present,
Xor easily and seamlessly added.
X.P
X.B Cook
Xwas written with portability in mind.
XThis does not means it is entirely portable,
Xunfortunately.
X.B Cook
Xhas been tested on 
XSystemV R2 and SystemV R3
Xand SunOS R4.
XIt should also be portable to others.
X.P
XIf you have any trouble getting 
X.B cook
Xworking,
Xplease e-mail me so I know where I went wrong.
END_OF_FILE
if test 1884 -ne `wc -c <'doc/history.so'`; then
    echo shar: \"'doc/history.so'\" unpacked with wrong size!
fi
# end of 'doc/history.so'
fi
if test -f 'doc/intro.so' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'doc/intro.so'\"
else
echo shar: Extracting \"'doc/intro.so'\" \(2213 characters\)
sed "s/^X//" >'doc/intro.so' <<'END_OF_FILE'
X.\"
X.\"	cook - file construction tool
X.\"	Copyright (C) 1990, 1991, 1992, 1993 Peter Miller.
X.\"	All rights reserved.
X.\"
X.\"	This program is free software; you can redistribute it and/or modify
X.\"	it under the terms of the GNU General Public License as published by
X.\"	the Free Software Foundation; either version 2 of the License, or
X.\"	(at your option) any later version.
X.\"
X.\"	This program is distributed in the hope that it will be useful,
X.\"	but WITHOUT ANY WARRANTY; without even the implied warranty of
X.\"	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X.\"	GNU General Public License for more details.
X.\"
X.\"	You should have received a copy of the GNU General Public License
X.\"	along with this program; if not, write to the Free Software
X.\"	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X.\"
X.\" MANIFEST: Reference Manual, Introduction
X.\"	
X.H 1 "Introduction"
X.B Cook
Xis a tool for constructing files.
XIt is given a set of files to create,
Xand instructions detailing how to construct them.
XIn any non-trivial program
Xthere will be prerequisites to performing
Xthe actions necessary to creating any file,
Xsuch as extraction from a source-control system.
X.B Cook
Xprovides a mechanism to define these.
X.P
XWhen a program is being developed or maintained,
Xthe programmer will typically change one file of several
Xwhich comprise the program.
X.B Cook
Xexamines the last-modified times of the files to see when
Xthe prerequisites of a file have changed,
Ximplying that the file
Xneeds to be recreated as it is logically out of date.
X.P
X.B Cook
Xalso provides a facility for implicit recipes,
Xallowing users to specify how to form a file with a given suffix from
Xa file with a different suffix.
XFor example,
Xto create
X.IB filename .o
Xfrom
X.IB filename .c
X.H 2 "How to Use this Manual"
XThis manual is divided into two parts.
X.P
XThe first part is tutorial introduction to
X.BR cook .
XThis part runs from chapter 4 to chapter 5.
X.P
XThe second part is for reference and details precisely how
X.B cook
Xworks.
XThis part runs from chapter 6 to chapter 14.
X.P
XUsers familiar with other programs similar to 
X.B cook
Xare advised to skim the tutorial part before diving into the reference part.
END_OF_FILE
if test 2213 -ne `wc -c <'doc/intro.so'`; then
    echo shar: \"'doc/intro.so'\" unpacked with wrong size!
fi
# end of 'doc/intro.so'
fi
if test -f 'doc/option.so' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'doc/option.so'\"
else
echo shar: Extracting \"'doc/option.so'\" \(2455 characters\)
sed "s/^X//" >'doc/option.so' <<'END_OF_FILE'
X.\"
X.\"	cook - file construction tool
X.\"	Copyright (C) 1990, 1991, 1992, 1993 Peter Miller.
X.\"	All rights reserved.
X.\"
X.\"	This program is free software; you can redistribute it and/or modify
X.\"	it under the terms of the GNU General Public License as published by
X.\"	the Free Software Foundation; either version 2 of the License, or
X.\"	(at your option) any later version.
X.\"
X.\"	This program is distributed in the hope that it will be useful,
X.\"	but WITHOUT ANY WARRANTY; without even the implied warranty of
X.\"	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X.\"	GNU General Public License for more details.
X.\"
X.\"	You should have received a copy of the GNU General Public License
X.\"	along with this program; if not, write to the Free Software
X.\"	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X.\"
X.\" MANIFEST: Reference Manual, Option Precedence
X.\"	
X.H 1 "Option Precedence"
XAt various points in the description there are a number of flags and options
Xwith the same,
Xor similar,
Xnames.
XThese are in fact different levels of the same option.
X.P
XThe different levels,
Xfrom highest precedence to lowest,
Xare as follows.
X.VL 1i
X.LI "Error"
XThis level is used to disable undesirable side effects when an error occurs.
X.LI "Command Line"
XOptions specified on the command line override almost everything.
XThere are some isolated cases where there is no equivalent command line option.
XThey are in scope for the entire 
X.B cook
Xsession.
X.LI "Execute"
XWhen a command attached to a recipe is executed,
Xthe flags in the '\fBset\fP' clause are given this precedence.
XThey are in scope for the duration of the execution of the command they are
Xbound to.
X.LI "Recipe"
XWhen a recipe is considered for use,
Xthe flags in the '\fBset\fP' clause are given the precedence.
XThey are in scope for the evaluation of the ingredients names and the execution of the recipe body;
Xthey are not in scope while cooking the ingredients.
X.LI "Cookbook"
XWhen a '\fBset\fP' statement is encountered in the cookbook,
Xthe option are given this priority.
XThey are in scope until the end of the 
X.B cook
Xsession.
X.LI "Environment Variable"
X.br
XWhen the  options in the
X.B COOK
Xenvironment variable are set,
Xthey are given this precedence.
XThey are in scope for the entire
X.B cook
Xsession.
X.LI "Default"
XAll options have a default setting.
XThe defaults noted in chapter 3
Xare given this precedence.
XThey are in scope for the entire
X.B cook
Xsession.
X.LE
END_OF_FILE
if test 2455 -ne `wc -c <'doc/option.so'`; then
    echo shar: \"'doc/option.so'\" unpacked with wrong size!
fi
# end of 'doc/option.so'
fi
if test -f 'doc/refman.t' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'doc/refman.t'\"
else
echo shar: Extracting \"'doc/refman.t'\" \(1927 characters\)
sed "s/^X//" >'doc/refman.t' <<'END_OF_FILE'
X.\"
X.\"	cook - file construction tool
X.\"	Copyright (C) 1990, 1991, 1992, 1993, 1994 Peter Miller.
X.\"	All rights reserved.
X.\"
X.\"	This program is free software; you can redistribute it and/or modify
X.\"	it under the terms of the GNU General Public License as published by
X.\"	the Free Software Foundation; either version 2 of the License, or
X.\"	(at your option) any later version.
X.\"
X.\"	This program is distributed in the hope that it will be useful,
X.\"	but WITHOUT ANY WARRANTY; without even the implied warranty of
X.\"	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X.\"	GNU General Public License for more details.
X.\"
X.\"	You should have received a copy of the GNU General Public License
X.\"	along with this program; if not, write to the Free Software
X.\"	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X.\"
X.\" MANIFEST: Reference Manual
X.\"
X.\" must be formatted using "groff -s -t -mm refman.t | lpr"
X.\"
X.TL
Xcook
X.sp
Xa file construction tool
X.AF ""
X.AU "Peter Miller" "PM"
X.AT "Software Engineer"
X.AS
XThis document describes
X.BR cook ,
Xa maintenance tool designed to construct files.
X.B Cook
Xmay be used to maintain consistency between executable files and the
Xassociated source files that are used to generate them.
XThe consistency is designated by the relative
Xlast-modified times of files
Xand is thus automatically adjusted each time a file is edited,
Xcompiled or otherwise modified.
X.B Cook
Xvalidates the consistency of a system of
Xfiles and executes all commands necessary to maintain that
Xconsistency.
X.AE
X.MT 4 1
X.nr Hb 9
X.de eB
X.br
X.ft CW
X.in +0.5i
X.ta 8n 16n 24n 32n 40n 48n
X.nf
X..
X.de eE
X.br
X.ft R
X.fi
X.in -0.5i
X..
X.SK
X.PH "'Cook''Cook'"
X.PF "'Page %''Page %'"
X.nr Ej 1
X.so intro.so
X.so history.so
X.so conditions.so
X.so intro1.so
X.so intro2.so
X.so cmdline.so
X.so language.so
X.so builtin.so
X.so variables.so
X.so how.so
X.so option.so
X.so match.so
X.so system.so
X.so glossary.so
X.TC
END_OF_FILE
if test 1927 -ne `wc -c <'doc/refman.t'`; then
    echo shar: \"'doc/refman.t'\" unpacked with wrong size!
fi
# end of 'doc/refman.t'
fi
if test -f 'doc/variables.so' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'doc/variables.so'\"
else
echo shar: Extracting \"'doc/variables.so'\" \(2183 characters\)
sed "s/^X//" >'doc/variables.so' <<'END_OF_FILE'
X.\"
X.\"	cook - file construction tool
X.\"	Copyright (C) 1990, 1991, 1992, 1993 Peter Miller.
X.\"	All rights reserved.
X.\"
X.\"	This program is free software; you can redistribute it and/or modify
X.\"	it under the terms of the GNU General Public License as published by
X.\"	the Free Software Foundation; either version 2 of the License, or
X.\"	(at your option) any later version.
X.\"
X.\"	This program is distributed in the hope that it will be useful,
X.\"	but WITHOUT ANY WARRANTY; without even the implied warranty of
X.\"	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X.\"	GNU General Public License for more details.
X.\"
X.\"	You should have received a copy of the GNU General Public License
X.\"	along with this program; if not, write to the Free Software
X.\"	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X.\"
X.\" MANIFEST: Reference Manual, Predefined Variables
X.\"
X.H 1 "Predefined Variables"
XA number of variables are defined by
X.B cook
Xat run-time.
X.H 2 need
XThe ingredients of the recipe currently being cooked.
X.H 2 "search_list"
XThis variable may be set to a list of directories to be searched for
Xtargets and ingredients.
XThis list is initially the current directory (.)
Xand will always have the current directory prepended if it is not present.
XThis is useful when taking partial copies of a source
Xto perform controlled updates.
XUse the
X.I "resolve"
Xbuiltin function to determine what file name cook actually found.
XThe targets of recipes are always cooked into the current directory.
X.H 2 self
XThe name
X.B cook
Xwas invoked as,
Xusually "cook".
XBe careful what you call cook,
Xbecause anything with the string "cook" in it will be changed,
Xincluding (but not limited to) file suffixes and environment variable names.
X.H 2 target
XThe target of the recipe currently being cooked.
XSpecifically,
Xthe target which caused the recipe to be invoked.
X.H 2 targets
XThe targets of the recipe currently being cooked.
XThis includes all targets of the recipe,
Xshould there be more than one.
X.H 2 younger
XThe subset of the ingredients of the recipe currently being cooked
Xwhich are younger than the target.
X.H 2 version
XThe version of
X.B cook
Xcurrently executing.
END_OF_FILE
if test 2183 -ne `wc -c <'doc/variables.so'`; then
    echo shar: \"'doc/variables.so'\" unpacked with wrong size!
fi
# end of 'doc/variables.so'
fi
if test -f 'lib/bison' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lib/bison'\"
else
echo shar: Extracting \"'lib/bison'\" \(2006 characters\)
sed "s/^X//" >'lib/bison' <<'END_OF_FILE'
X/*
X * NAME
X *	bison - how to use bison
X *
X * DESCRIPTION
X *	This cookbook describes how to use bison.
X *
X *	You will have to add "-d" to the [bison_flags] variable
X *	if you want %.h files generated.
X *
X *	If a y.output file is constructed, it will be moved to %.list
X *
X * RECIPES
X *	%.c %.h: %.y	applied if -d in [bison_flags]
X *	%.c: %.y	applied if -d not in [bison_flags]
X *
X * VARIABLES
X *	bison_src	bison source files in the current directory.
X *	dot_src		Source files constructable in the current directory
X *			(unioned with existing setting, if necessary).
X *	dot_obj		Object files constructable in the current directory
X *			(unioned with existing setting, if necessary).
X *	dot_clean	Files which may be removed from the current directory
X *			in a clean target.			
X *	dot_lint_obj	Lint object files constructable in the current directory
X *			(unioned with existing setting, if necessary).
X *
X * MANIFEST: cookbook for using bison
X */
X
X#pragma once
X
X#include "c"
X
Xif [not [defined bison]] then
X    bison = bison;
Xif [not [defined bison_flags]] then
X    bison_flags = ;
Xbison_src = [glob *.y];
Xcc_src = [stringset [cc_src] - [fromto %.y %.c [bison_src]]];
Xdot_src =
X    [stringset
X	    [dot_src] [bison_src]
X	-
X	    [fromto %.y %.c [bison_src]] [fromto %.y %.s [bison_src]]
X    ];
Xdot_obj = [stringset [dot_obj] [fromto %.y %.o [bison_src]]];
Xdot_clean =
X    [stringset
X	[dot_clean]
X	[fromto %.y %.c [bison_src]]
X	[fromto %.y %.output [bison_src]]
X	[fromto %.y %.tab.c [bison_src]]
X	[fromto %.y %.tab.h [bison_src]]
X	[fromto %.y %.ln [bison_src]]
X	[fromto %.y %.s [bison_src]]
X    ];
Xdot_lint_obj = [stringset [dot_lint_obj] [fromto %.y %.ln [bison_src]]];
X
X%.c %.h: %.y if [in -d [bison_flags]]
X    {
X	if [exists %.output] then
X	    rm -f %.output
X		set clearstat;
X	[bison] [bison_flags] %.y;
X	mv %.tab.c %.c;
X	mv %.tab.h %.h;
X    }
X
X%.c: %.y if [not [in -d [bison_flags]]]
X    {
X	if [exists %.output] then
X	    rm -f %.output
X		set clearstat;
X	[bison] [bison_flags] %.y;
X	mv %.tab.c %.c;
X    }
END_OF_FILE
if test 2006 -ne `wc -c <'lib/bison'`; then
    echo shar: \"'lib/bison'\" unpacked with wrong size!
fi
# end of 'lib/bison'
fi
if test -f 'lib/program' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lib/program'\"
else
echo shar: Extracting \"'lib/program'\" \(2207 characters\)
sed "s/^X//" >'lib/program' <<'END_OF_FILE'
X/*
X * NAME
X *	program - construct a program
X *
X * DESCRIPTION
X *	This cookbook defines how to construct a program.
X *
X *	If you program uses any libraries, you will have to append
X *	them to cc_link_flags in your Howto.cook file.
X *
X * VARIABLES
X *	all		targets of the all recipe
X *	install		targets of the install recipe
X *	me		the name of the program to be constructed.
X *			Defaults to the last component of the pathname
X *			of the current directory.
X *	install		targets of the install command.
X *
X * RECIPES
X *	all:		construct the targets defined in [all].
X *	clean:		remove the files named in [dot_clean].
X *	clobber:	remove the files name in [dot_clean] and [all].
X *
X * If the [lib] variable is defined
X *	install:	construct the files named in [install].
X *	uninstall:	remove the files named in [install].
X *
X * MANIFEST: cookbook for constructing programs
X */
X
X#pragma once
X
Xif [not [defined me]] then
X    me = [entryname [dir [pathname x]]];
X
Xall = [me];
Xif [defined dot_lint_obj] then
X    all = [all] [me].lint;
Xdot_clean = [dot_clean] [me]~;
X
Xall: [all];
X
Xclean:
X    {
X	rm -f [dot_clean]
X	    set clearstat;
X    }
X
Xclobber: clean
X    {
X	rm -f [all]
X	    set clearstat;
X    }
X
Xif [defined bin] then
X{
X    install = [bin]/[me];
X
X    install: [install];
X
X    uninstall:
X        {
X            rm -f [install]
X		set clearstat;
X        }
X
X    [bin]/%: %
X        {
X            cp % [bin]/%;
X            chmod og-w [bin]/%;
X        }
X
X    [lib]/%: %
X        {
X            cp % [lib]/%;
X            chmod og-w [lib]/%;
X        }
X}
X
Xfind_libs = [find_command find_libs];
X
Xif [find_libs] then
X{
X    [me]: [dot_obj] [collect [find_libs] [cc_link_flags]]
X        {
X	    if [exists [me]~] then
X		rm -f [me]~
X		    set clearstat;
X	    if [exists [me]] then
X		mv [me] [me]~
X		    set clearstat;
X    	    [cc] [dot_obj] [cc_link_flags] -o [me];
X        }
X}
Xelse
X{
X    [me]: [dot_obj]
X        {
X	    if [exists [me]~] then
X		rm -f [me]~
X		    set clearstat;
X	    if [exists [me]] then
X		mv [me] [me]~
X		    set clearstat;
X    	    [cc] [dot_obj] [cc_link_flags] -o [me];
X        }
X}
X
Xif [defined dot_lint_obj] then
X{
X    [me].lint: [dot_lint_obj]
X        {
X	    [lint] [dot_lint_obj] [cc_link_flags];
X        }
X}
END_OF_FILE
if test 2207 -ne `wc -c <'lib/program'`; then
    echo shar: \"'lib/program'\" unpacked with wrong size!
fi
# end of 'lib/program'
fi
if test -f 'lib/yacc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lib/yacc'\"
else
echo shar: Extracting \"'lib/yacc'\" \(2216 characters\)
sed "s/^X//" >'lib/yacc' <<'END_OF_FILE'
X/*
X * NAME
X *	yacc - how to use yacc
X *
X * DESCRIPTION
X *	This cookbook describes how to use yacc.
X *
X *	You will have to add "-d" to the [yacc_flags] variable
X *	if you want %.h files generated.
X *
X *	If a y.output file is constructed, it will be moved to %.list
X *
X * RECIPES
X *	%.c %.h: %.y	applied if -d in [yacc_flags]
X *	%.c: %.y	applied if -d not in [yacc_flags]
X *
X * VARIABLES
X *	yacc_src	Yacc source files in the current directory.
X *	dot_src		Source files constructable in the current directory
X *			(unioned with existing setting, if necessary).
X *	dot_obj		Object files constructable in the current directory
X *			(unioned with existing setting, if necessary).
X *	dot_clean	Files which may be removed from the current directory
X *			in a clean target.			
X *	dot_lint_obj	Lint object files constructable in the current directory
X *			(unioned with existing setting, if necessary).
X *
X * MANIFEST: cookbook for using yacc
X */
X
X#pragma once
X
X#include "c"
X
Xif [not [defined yacc]] then
X    yacc = yacc;
Xif [not [defined yacc_flags]] then
X    yacc_flags = ;
Xyacc_src = [glob *.y];
Xcc_src = [stringset [cc_src] - [fromto %.y %.c [yacc_src]]];
Xdot_src =
X    [stringset
X	    [dot_src] [yacc_src]
X	-
X	    [fromto %.y %.c [yacc_src]] [fromto %.y %.s [yacc_src]]
X    ];
Xdot_obj = [stringset [dot_obj] [fromto %.y %.o [yacc_src]]];
Xdot_clean =
X    [stringset
X	[dot_clean]
X	[fromto %.y %.o [yacc_src]]
X	[fromto %.y %.c [yacc_src]]
X	[fromto %.y %.list [yacc_src]]
X	[fromto %.y %.ln [yacc_src]]
X	[fromto %.y %.s [yacc_src]]
X	y.tab.c y.tab.h y.output
X    ];
Xdot_lint_obj = [stringset [dot_lint_obj] [fromto %.y %.ln [yacc_src]]];
X
X%.c %.h: %.y if [in -d [yacc_flags]]
X    {
X	if [exists %.list] then
X	    rm -f %.list
X		set clearstat;
X	if [exists y.output] then
X	    rm -f y.output
X		set clearstat;
X	[yacc] [yacc_flags] %.y;
X	mv y.tab.c %.c;
X	mv y.tab.h %.h;
X	if [exists y.output] then
X	    mv y.output %.list
X		set clearstat;
X    }
X
X%.c: %.y if [not [in -d [yacc_flags]]]
X    {
X	if [exists %.list] then
X	    rm -f %.list
X		set clearstat;
X	if [exists y.output] then
X	    rm -f y.output
X		set clearstat;
X	[yacc] [yacc_flags] %.y;
X	mv y.tab.c %.c;
X	if [exists y.output] then
X	    mv y.output %.list
X		set clearstat;
X    }
END_OF_FILE
if test 2216 -ne `wc -c <'lib/yacc'`; then
    echo shar: \"'lib/yacc'\" unpacked with wrong size!
fi
# end of 'lib/yacc'
fi
if test -f 'make2cook/stmt/define.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'make2cook/stmt/define.c'\"
else
echo shar: Extracting \"'make2cook/stmt/define.c'\" \(2256 characters\)
sed "s/^X//" >'make2cook/stmt/define.c' <<'END_OF_FILE'
X/*
X *	cook - file construction tool
X *	Copyright (C) 1994 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: functions to manipulate define statements
X */
X
X#include <emit.h>
X#include <mem.h>
X#include <stmt/define.h>
X
Xtypedef struct stmt_define_ty stmt_define_ty;
Xstruct stmt_define_ty
X{
X	STMT
X	blob_ty		*first;
X	blob_list_ty	*body;
X};
X
X
Xstatic void constructor _((stmt_ty *));
X
Xstatic void
Xconstructor(that)
X	stmt_ty		*that;
X{
X	stmt_define_ty	*this;
X
X	this = (stmt_define_ty *)that;
X	this->first = 0;
X	this->body = blob_list_alloc();;
X}
X
X
Xstatic void destructor _((stmt_ty *));
X
Xstatic void
Xdestructor(that)
X	stmt_ty		*that;
X{
X	stmt_define_ty	*this;
X
X	this = (stmt_define_ty *)that;
X	if (this->first)
X		blob_free(this->first);
X	blob_list_free(this->body);
X}
X
X
Xstatic void emit _((stmt_ty *));
X
Xstatic void
Xemit(that)
X	stmt_ty		*that;
X{
X	stmt_define_ty	*this;
X	size_t		j;
X
X	this = (stmt_define_ty *)that;
X	blob_emit(this->first);
X	emit_str(" =\n");
X
X	for (j = 0; j < this->body->length; ++j)
X	{
X		emit_char('\t');
X		blob_emit(this->body->list[j]);
X		emit_str(" \"\\n\"\n");
X	}
X	emit_str("\t;\n");
X}
X
X
Xstatic stmt_method_ty method =
X{
X	sizeof(stmt_define_ty),
X	"define",
X	constructor,
X	destructor,
X	emit,
X};
X
X
Xstmt_ty *
Xstmt_define_alloc(first)
X	blob_ty	*first;
X{
X	stmt_define_ty	*result;
X
X	result = (stmt_define_ty *)stmt_alloc(&method);
X	result->first = first;
X	return (stmt_ty *)result;
X}
X
X
Xvoid
Xstmt_define_append(that, lp)
X	stmt_ty		*that;
X	blob_ty		*lp;
X{
X	stmt_define_ty	*this;
X
X	this = (stmt_define_ty *)that;
X	blob_list_append(this->body, lp);
X}
END_OF_FILE
if test 2256 -ne `wc -c <'make2cook/stmt/define.c'`; then
    echo shar: \"'make2cook/stmt/define.c'\" unpacked with wrong size!
fi
# end of 'make2cook/stmt/define.c'
fi
if test -f 'make2cook/stmt/vpath.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'make2cook/stmt/vpath.c'\"
else
echo shar: Extracting \"'make2cook/stmt/vpath.c'\" \(2440 characters\)
sed "s/^X//" >'make2cook/stmt/vpath.c' <<'END_OF_FILE'
X/*
X *	cook - file construction tool
X *	Copyright (C) 1994 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: functions to manipulate vpath statementss
X */
X
X#include <stmt/assign.h>
X#include <stmt/vpath.h>
X
X
Xstatic blob_list_ty	*vpath;
Xstatic blob_list_ty	*VPATH;
X
X
Xstatic void dismember _((blob_list_ty *, blob_list_ty *));
X
Xstatic void
Xdismember(path, rhs)
X	blob_list_ty	*path;
X	blob_list_ty	*rhs;
X{
X	size_t		j;
X
X	for (j = 0; j < rhs->length; ++j)
X	{
X		blob_ty		*bp;
X		wlist		wl;
X		size_t		k;
X
X		bp = rhs->list[j];
X		str2wl(&wl, bp->text, ":", 1);
X		for (k = 0; k < wl.wl_nwords; ++k)
X		{
X			blob_list_append
X			(
X				path,
X				blob_alloc
X				(
X					str_copy(wl.wl_word[k]),
X					bp->file_name,
X					bp->line_number
X				)
X			);
X		}
X	}
X}
X
X
Xvoid
Xstmt_vpath_remember1(rhs)
X	blob_list_ty	*rhs;
X{
X	if (!vpath)
X		vpath = blob_list_alloc();
X	dismember(vpath, rhs);
X	blob_list_free(rhs);
X}
X
X
Xvoid
Xstmt_vpath_remember2(rhs)
X	blob_list_ty	*rhs;
X{
X	if (!VPATH)
X		VPATH = blob_list_alloc();
X	dismember(VPATH, rhs);
X	blob_list_free(rhs);
X}
X
X
Xstmt_ty *
Xstmt_vpath_default()
X{
X	static string_ty *builtin;
X	blob_ty		*lhs;
X	blob_list_ty	*rhs;
X	size_t		j;
X
X	if (!vpath && !VPATH)
X		return 0;
X	if (!builtin)
X		builtin = str_from_c("builtin");
X	lhs = blob_alloc(str_from_c("search_list"), builtin, 999);
X	rhs = blob_list_alloc();
X	blob_list_append(rhs, blob_alloc(str_from_c("."), builtin, 999));
X	if (vpath)
X	{
X		for (j = 0; j < vpath->length; ++j)
X			blob_list_append(rhs, blob_copy(vpath->list[j]));
X		blob_list_free(vpath);
X		vpath = 0;
X	}
X	if (VPATH)
X	{
X		for (j = 0; j < VPATH->length; ++j)
X			blob_list_append(rhs, blob_copy(VPATH->list[j]));
X		blob_list_free(VPATH);
X		VPATH = 0;
X	}
X
X	return stmt_assign_alloc(1, lhs, stmt_assign_op_colon, rhs);
X}
END_OF_FILE
if test 2440 -ne `wc -c <'make2cook/stmt/vpath.c'`; then
    echo shar: \"'make2cook/stmt/vpath.c'\" unpacked with wrong size!
fi
# end of 'make2cook/stmt/vpath.c'
fi
if test -f 'man1/cooktime.1' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'man1/cooktime.1'\"
else
echo shar: Extracting \"'man1/cooktime.1'\" \(2194 characters\)
sed "s/^X//" >'man1/cooktime.1' <<'END_OF_FILE'
X'\" t
X.\"	cook - file construction tool
X.\"	Copyright (C) 1991, 1992, 1993, 1994 Peter Miller.
X.\"	All rights reserved.
X.\"
X.\"	This program is free software; you can redistribute it and/or modify
X.\"	it under the terms of the GNU General Public License as published by
X.\"	the Free Software Foundation; either version 2 of the License, or
X.\"	(at your option) any later version.
X.\"
X.\"	This program is distributed in the hope that it will be useful,
X.\"	but WITHOUT ANY WARRANTY; without even the implied warranty of
X.\"	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X.\"	GNU General Public License for more details.
X.\"
X.\"	You should have received a copy of the GNU General Public License
X.\"	along with this program; if not, write to the Free Software
X.\"	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X.\"
X.\" MANIFEST: manual entry for the cooktime command
X.\" 
X.TH COOKTIME 1
X.so z_name.so
X.ds n) cooktime
X.SH NAME
X\*(n) \- set file times
X.SH SYNOPSIS
X.B \*(n)
X[
X.IR option \&...
X]
X.IR filename \&...
X.br
X.B \*(n)
X.B -Help
X.br
X.B \*(n)
X.B -VERSion
X.SH DESCRIPTION
XThe
X.I \*(n)
Xprogram is used to
Xset the modified time or access time of a file.
XThis can be used to defend against unwanted
Xlogical dependencies when making "minor" changes to files.
X.PP
XIf no option is specified,
Xthe default action is as if "\fI\-Modify now\fP" was specified.
X.br
X.ne 1i
X.SH OPTIONS
XThe following options are understood.
X.TP 8n
X\fB-Access\fP \fIdate\fP
X.br
XThis option may be used to 
Xset the last-access time of the files.
XThe date is relatively free-format;
Xrember to use quotes to insulate spaces from the shell.
X.TP 8n
X\fB-Modify\fP \fIdate\fP
X.br
XThis option may be used to 
Xset the last-modify time of the files.
XThe date is relatively free-format;
Xrember to use quotes to insulate spaces from the shell.
X.TP 8n 
X.B -Report
X.br
XWhen use alone,
Xproduces a listing of access times and modify times for the named files.
XWhen used with -Access or -Modify,
Xproduces a listing of the changes made.
X.TP 8n
X.B -Help
X.br
XGive some information on how to use the
X.I \*(n)
Xcommand.
X.PP
XAny other option will generate a diagnostic error.
X.so o__rules.so
X.so z_exit.so
X.so copyright.so
END_OF_FILE
if test 2194 -ne `wc -c <'man1/cooktime.1'`; then
    echo shar: \"'man1/cooktime.1'\" unpacked with wrong size!
fi
# end of 'man1/cooktime.1'
fi
if test -f 'man1/find_libs.1' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'man1/find_libs.1'\"
else
echo shar: Extracting \"'man1/find_libs.1'\" \(2068 characters\)
sed "s/^X//" >'man1/find_libs.1' <<'END_OF_FILE'
X'\" t
X.\"	cook - file construction tool
X.\"	Copyright (C) 1991, 1992, 1993, 1994 Peter Miller.
X.\"	All rights reserved.
X.\"
X.\"	This program is free software; you can redistribute it and/or modify
X.\"	it under the terms of the GNU General Public License as published by
X.\"	the Free Software Foundation; either version 2 of the License, or
X.\"	(at your option) any later version.
X.\"
X.\"	This program is distributed in the hope that it will be useful,
X.\"	but WITHOUT ANY WARRANTY; without even the implied warranty of
X.\"	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X.\"	GNU General Public License for more details.
X.\"
X.\"	You should have received a copy of the GNU General Public License
X.\"	along with this program; if not, write to the Free Software
X.\"	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X.\"
X.\" MANIFEST: manual entry for the find_libs command
X.\" 
X.TH FIND_LIBS 1
X.so z_name.so
X.ds n) find_libs
X.SH NAME
X\*(n) \- find pathnames of libraries
X.SH SYNOPSIS
X.B \*(n)
X[
X.BI -L path
X\&...
X][
X.BI -l name
X\&...
X]
X.br
X.B \*(n)
X.B -Help
X.br
X.B \*(n)
X.B -VERSion
X.SH DESCRIPTION
XThe
X.I \*(n)
Xprogram is used to find the actual pathname of a library
Xspecified on a
X.IR cc (1)
Xcommand line.
XThis allows 
X.IR cook (1)
Xto know these dependencies.
X.br
X.ne 1i
X.SH OPTIONS
XThe following options are understood.
X.TP 8n
X.BI -L path
X.br
XSpecify a path to search for libraries on.
XIf more than one is specified,
Xthey will be scanned in the order given before the standard
X.I /usr/lib
Xand
X.I /lib
Xplaces.
XThis is like the same argument to
X.IR cc (1),
Xand the usual \*(n) option abbreviation rules do not apply.
X.TP 8n
X.BI -l name
X.br
XName a library to be searched for.
XThis is like the same argument to
X.IR cc (1),
Xand the usual \*(n) option abbreviation rules do not apply.
X.TP 8n
X.B -Help
X.br
XGive some information on how to use the
X.I \*(n)
Xcommand.
X.TP 8n
X.B -VERSion
X.br
XTell the version of the
X.I \*(n)
Xcommand currently executing.
X.PP
XAll other options will result in a diagnostic error.
X.so o__rules.so
X.so z_exit.so
X.so copyright.so
END_OF_FILE
if test 2068 -ne `wc -c <'man1/find_libs.1'`; then
    echo shar: \"'man1/find_libs.1'\" unpacked with wrong size!
fi
# end of 'man1/find_libs.1'
fi
if test -f 'test/00/t0030a.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'test/00/t0030a.sh'\"
else
echo shar: Extracting \"'test/00/t0030a.sh'\" \(2281 characters\)
sed "s/^X//" >'test/00/t0030a.sh' <<'END_OF_FILE'
X#!/bin/sh
X#
X#	cook - file construction tool
X#	Copyright (C) 1990, 1991, 1992, 1993, 1994 Peter Miller.
X#	All rights reserved.
X#
X#	This program is free software; you can redistribute it and/or modify
X#	it under the terms of the GNU General Public License as published by
X#	the Free Software Foundation; either version 2 of the License, or
X#	(at your option) any later version.
X#
X#	This program is distributed in the hope that it will be useful,
X#	but WITHOUT ANY WARRANTY; without even the implied warranty of
X#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#	GNU General Public License for more details.
X#
X#	You should have received a copy of the GNU General Public License
X#	along with this program; if not, write to the Free Software
X#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X#
X# MANIFEST: test the "-version" command line option
X#
Xtmp=/tmp/$$
XPAGER=cat
Xexport PAGER
Xumask 022
Xunset COOK
Xhere=`pwd`
Xif test $? -ne 0 ; then exit 1; fi
X
Xif test "$1" != "" ; then bin="$here/$1/bin"; else bin="$here/bin"; fi
X
Xfail()
X{
X	echo 'FAILED test of the -VERSion command line option' 1>&2
X	cd $here
X	rm -rf $tmp
X	exit 1
X}
Xpass()
X{
X	cd $here
X	rm -rf $tmp
X	exit 0
X}
Xtrap "fail" 1 2 3 15
X
Xmkdir $tmp
Xcd $tmp
X
X$bin/cook -help > /dev/null
Xif test $? -ne 0 ; then fail; fi
X
X$bin/cook -vers > /dev/null
Xif test $? -ne 0 ; then fail; fi
X
X$bin/cook -vers r | cat
Xif test $? -ne 0 ; then fail; fi
X
X$bin/cook -vers w | cat
Xif test $? -ne 0 ; then fail; fi
X
X$bin/c_incl -help > /dev/null
Xif test $? -ne 0 ; then fail; fi
X
X$bin/c_incl -vers > /dev/null
Xif test $? -ne 0 ; then fail; fi
X
X$bin/c_incl -vers r > /dev/null
Xif test $? -ne 0 ; then fail; fi
X
X$bin/c_incl -vers w > /dev/null
Xif test $? -ne 0 ; then fail; fi
X
X$bin/find_libs -help > /dev/null
Xif test $? -ne 0 ; then fail; fi
X
X$bin/find_libs -vers > /dev/null
Xif test $? -ne 0 ; then fail; fi
X
X$bin/find_libs -vers r > /dev/null
Xif test $? -ne 0 ; then fail; fi
X
X$bin/find_libs -vers w > /dev/null
Xif test $? -ne 0 ; then fail; fi
X
X$bin/cookfp -help > /dev/null
Xif test $? -ne 0 ; then fail; fi
X
X$bin/cookfp -vers > /dev/null
Xif test $? -ne 0 ; then fail; fi
X
X$bin/cookfp -vers r > /dev/null
Xif test $? -ne 0 ; then fail; fi
X
X$bin/cookfp -vers w > /dev/null
Xif test $? -ne 0 ; then fail; fi
X
X# probably OK
Xpass
END_OF_FILE
if test 2281 -ne `wc -c <'test/00/t0030a.sh'`; then
    echo shar: \"'test/00/t0030a.sh'\" unpacked with wrong size!
fi
# end of 'test/00/t0030a.sh'
fi
if test -f 'test/00/t0041a.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'test/00/t0041a.sh'\"
else
echo shar: Extracting \"'test/00/t0041a.sh'\" \(2240 characters\)
sed "s/^X//" >'test/00/t0041a.sh' <<'END_OF_FILE'
X#!/bin/sh
X#
X#	cook - file construction tool
X#	Copyright (C) 1993, 1994 Peter Miller.
X#	All rights reserved.
X#
X#	This program is free software; you can redistribute it and/or modify
X#	it under the terms of the GNU General Public License as published by
X#	the Free Software Foundation; either version 2 of the License, or
X#	(at your option) any later version.
X#
X#	This program is distributed in the hope that it will be useful,
X#	but WITHOUT ANY WARRANTY; without even the implied warranty of
X#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#	GNU General Public License for more details.
X#
X#	You should have received a copy of the GNU General Public License
X#	along with this program; if not, write to the Free Software
X#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X#
X# MANIFEST: Test the "resolve" builtin function
X#
Xwork=/tmp/$$
XPAGER=cat
Xexport PAGER
Xumask 022
Xunset COOK
Xhere=`pwd`
Xif test $? -ne 0 ; then exit 1; fi
X
Xif test "$1" != "" ; then bin="$here/$1/bin"; else bin="$here/bin"; fi
X
Xfail()
X{
X	set +x
X	echo 'FAILED test of the builtin function "resolve"' 1>&2
X	cd $here
X	rm -rf $work
X	exit 1
X}
Xpass()
X{
X	set +x
X	cd $here
X	rm -rf $work
X	exit 0
X}
Xtrap "fail" 1 2 3 15
X
Xmkdir $work
Xif test $? -ne 0 ; then exit 1; fi
Xcd $work
Xif test $? -ne 0 ; then fail; fi
X
X#
X# test cookbook
X#
Xcat > book << 'fubar'
Xsearch_list  = . bl;
X%.o: %.c
X{
X	cc -O -c [resolve %.c];
X}
X
Xtest: a.o b.o
X{
X	cc -o test [resolve a.o b.o];
X}
Xfubar
Xif test $? -ne 0 ; then fail; fi
X
X#
X# the first source file
X#
Xcat > a.c << 'fubar'
Xmain()
X{
X	b();
X	exit(0);
X}
Xfubar
Xif test $? -ne 0 ; then fail; fi
X
X#
X# the second source file
X#
Xmkdir bl
Xif test $? -ne 0 ; then fail; fi
Xcat > bl/b.c << 'fubar'
Xb()
X{
X	printf("Hello, World!\n");
X}
Xfubar
Xif test $? -ne 0 ; then fail; fi
X
X#
X# try it out
X#
Xsleep 1
X$bin/cook -book book -nl > /dev/null 2>&1
Xif test $? -ne 0 ; then fail; fi
X
X#
X# make sure works for object in search list, too
X#
Xmv b.o bl/b.o
Xif test $? -ne 0 ; then fail; fi
Xrm test
Xif test $? -ne 0 ; then fail; fi
Xsleep 1
X$bin/cook -book book -nl > /dev/null 2>&1
Xif test $? -ne 0 ; then fail; fi
X
X#
X# Only definite negatives are possible.
X# The functionality exercised by this test appears to work,
X# no other guarantees are made.
X#
Xpass
END_OF_FILE
if test 2240 -ne `wc -c <'test/00/t0041a.sh'`; then
    echo shar: \"'test/00/t0041a.sh'\" unpacked with wrong size!
fi
# end of 'test/00/t0041a.sh'
fi
if test -f 'test/00/t0042a.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'test/00/t0042a.sh'\"
else
echo shar: Extracting \"'test/00/t0042a.sh'\" \(1964 characters\)
sed "s/^X//" >'test/00/t0042a.sh' <<'END_OF_FILE'
X#!/bin/sh
X#
X#	cook - file construction tool
X#	Copyright (C) 1993, 1994 Peter Miller.
X#	All rights reserved.
X#
X#	This program is free software; you can redistribute it and/or modify
X#	it under the terms of the GNU General Public License as published by
X#	the Free Software Foundation; either version 2 of the License, or
X#	(at your option) any later version.
X#
X#	This program is distributed in the hope that it will be useful,
X#	but WITHOUT ANY WARRANTY; without even the implied warranty of
X#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#	GNU General Public License for more details.
X#
X#	You should have received a copy of the GNU General Public License
X#	along with this program; if not, write to the Free Software
X#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X#
X# MANIFEST: test the "sort_newest" builtin function
X#
Xtmp=/tmp/$$
XPAGER=cat
Xexport PAGER
Xumask 022
Xunset COOK
Xhere=`pwd`
Xif test $? -ne 0 ; then exit 1; fi
X
Xif test "$1" != "" ; then bin="$here/$1/bin"; else bin="$here/bin"; fi
X
Xfail()
X{
X	echo 'FAILED test of the builtin function "sort_newest"' 1>&2
X	cd $here
X	rm -rf $tmp
X	exit 1
X}
Xpass()
X{
X	cd $here
X	rm -rf $tmp
X	exit 0
X}
Xtrap "fail" 1 2 3 15
X
Xmkdir $tmp
Xcd $tmp
X
Xecho a > a;
Xif test $? -ne 0 ; then fail; fi
Xsleep 1;
X
Xecho b > b;
Xif test $? -ne 0 ; then fail; fi
Xsleep 1;
X
Xecho d > d;
Xif test $? -ne 0 ; then fail; fi
Xsleep 1;
X
Xecho c > c;
Xif test $? -ne 0 ; then fail; fi
Xsleep 1;
X
Xcat > Howto.cook <<foobar
Xtest:
X{
X	if [sort_newest] then fail;
X	if [not [in [catenate [sort_newest a]] a]] then fail;
X	if [not [in [catenate [sort_newest a b]] ba]] then fail;
X	if [not [in [catenate [sort_newest b a]] ba]] then fail;
X	if [not [in [catenate [sort_newest a b c]] cba]] then fail;
X	if [not [in [catenate [sort_newest c a b]] cba]] then fail;
X	if [not [in [catenate [sort_newest b c a d]] cdba]] then fail;
X}
Xfoobar
Xif test $? -ne 0 ; then fail; fi
X
X$bin/cook -nl
Xif test $? -ne 0 ; then fail; fi
X
X# probably OK
Xpass
END_OF_FILE
if test 1964 -ne `wc -c <'test/00/t0042a.sh'`; then
    echo shar: \"'test/00/t0042a.sh'\" unpacked with wrong size!
fi
# end of 'test/00/t0042a.sh'
fi
if test -f 'test/00/t0043a.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'test/00/t0043a.sh'\"
else
echo shar: Extracting \"'test/00/t0043a.sh'\" \(1848 characters\)
sed "s/^X//" >'test/00/t0043a.sh' <<'END_OF_FILE'
X#!/bin/sh
X#
X#	cook - file construction tool
X#	Copyright (C) 1993, 1994 Peter Miller.
X#	All rights reserved.
X#
X#	This program is free software; you can redistribute it and/or modify
X#	it under the terms of the GNU General Public License as published by
X#	the Free Software Foundation; either version 2 of the License, or
X#	(at your option) any later version.
X#
X#	This program is distributed in the hope that it will be useful,
X#	but WITHOUT ANY WARRANTY; without even the implied warranty of
X#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#	GNU General Public License for more details.
X#
X#	You should have received a copy of the GNU General Public License
X#	along with this program; if not, write to the Free Software
X#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X#
X# MANIFEST: Test the c_incl .. flattening
X#
Xwork=/tmp/$$
XPAGER=cat
Xexport PAGER
Xumask 022
Xunset COOK
Xhere=`pwd`
Xif test $? -ne 0 ; then exit 1; fi
X
Xif test "$1" != "" ; then bin="$here/$1/bin"; else bin="$here/bin"; fi
X
Xfail()
X{
X	set +x
X	echo 'FAILED test of the c_incl .. flattening' 1>&2
X	cd $here
X	rm -rf $work
X	exit 1
X}
Xpass()
X{
X	set +x
X	cd $here
X	rm -rf $work
X	exit 0
X}
Xtrap "fail" 1 2 3 15
X
Xmkdir $work
Xif test $? -ne 0 ; then exit 1; fi
Xcd $work
Xif test $? -ne 0 ; then fail; fi
X
Xmkdir thing
Xif test $? -ne 0 ; then fail; fi
X
Xcat > test.in << 'fubar'
X#include <../thing/eric.h>
Xfubar
Xif test $? -ne 0 ; then fail; fi
X
Xcat > thing/eric.h << 'fubar'
Xeric
Xfubar
Xif test $? -ne 0 ; then fail; fi
X
Xcat > test.ok << 'fubar'
Xthing/eric.h
Xfubar
Xif test $? -ne 0 ; then fail; fi
X
X$bin/c_incl -nc -Ithing test.in > test.out
Xif test $? -ne 0 ; then fail; fi
X
Xdiff test.ok test.out
Xif test $? -ne 0 ; then fail; fi
X
X#
X# Only definite negatives are possible.
X# The functionality exercised by this test appears to work,
X# no other guarantees are made.
X#
Xpass
END_OF_FILE
if test 1848 -ne `wc -c <'test/00/t0043a.sh'`; then
    echo shar: \"'test/00/t0043a.sh'\" unpacked with wrong size!
fi
# end of 'test/00/t0043a.sh'
fi
if test -f 'test/00/t0047a.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'test/00/t0047a.sh'\"
else
echo shar: Extracting \"'test/00/t0047a.sh'\" \(2037 characters\)
sed "s/^X//" >'test/00/t0047a.sh' <<'END_OF_FILE'
X#!/bin/sh
X#
X#	cook - file construction tool
X#	Copyright (C) 1994 Peter Miller.
X#	All rights reserved.
X#
X#	This program is free software; you can redistribute it and/or modify
X#	it under the terms of the GNU General Public License as published by
X#	the Free Software Foundation; either version 2 of the License, or
X#	(at your option) any later version.
X#
X#	This program is distributed in the hope that it will be useful,
X#	but WITHOUT ANY WARRANTY; without even the implied warranty of
X#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#	GNU General Public License for more details.
X#
X#	You should have received a copy of the GNU General Public License
X#	along with this program; if not, write to the Free Software
X#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X#
X# MANIFEST: Test the fingerprint short-circuit functionality
X#
Xwork=/tmp/$$
XPAGER=cat
Xexport PAGER
Xumask 022
Xunset COOK
Xhere=`pwd`
Xif test $? -ne 0 ; then exit 1; fi
X
Xif test "$1" != "" ; then bin="$here/$1/bin"; else bin="$here/bin"; fi
X
Xfail()
X{
X	set +x
X	echo 'FAILED test of the fingerprint short-circuit functionality' 1>&2
X	cd $here
X	rm -rf $work
X	exit 1
X}
Xpass()
X{
X	set +x
X	cd $here
X	rm -rf $work
X	exit 0
X}
Xtrap "fail" 1 2 3 15
X
Xmkdir $work
Xif test $? -ne 0 ; then exit 1; fi
Xcd $work
Xif test $? -ne 0 ; then fail; fi
X
X#
X# this test is to see of the file "bar" is correctly fingerprinted.
X# The second time the recipe is applied, it will fail.
X#
Xcat > Howto.cook << 'fubar'
Xtest: foo;
X
Xfoo: bar
X{
X	if [exists foo] then
X		fail;
X	cp bar foo;
X}
Xfubar
Xif test $? -ne 0 ; then fail; fi
X
Xecho "hello" > bar
Xif test $? -ne 0 ; then fail; fi
X
X# let the clock tick over
Xsleep 1
X
X$bin/cook -nl -fp > /dev/null 2>&1
Xif test $? -ne 0 ; then fail; fi
X
X# wait for clock to tick over
Xsleep 2
X
Xecho "hello" > bar
Xif test $? -ne 0 ; then fail; fi
X
X$bin/cook -nl -fp > /dev/null 2>&1
Xif test $? -ne 0 ; then fail; fi
X
X#
X# Only definite negatives are possible.
X# The functionality exercised by this test appears to work,
X# no other guarantees are made.
X#
Xpass
END_OF_FILE
if test 2037 -ne `wc -c <'test/00/t0047a.sh'`; then
    echo shar: \"'test/00/t0047a.sh'\" unpacked with wrong size!
fi
# end of 'test/00/t0047a.sh'
fi
if test -f 'test/00/t0049a.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'test/00/t0049a.sh'\"
else
echo shar: Extracting \"'test/00/t0049a.sh'\" \(2021 characters\)
sed "s/^X//" >'test/00/t0049a.sh' <<'END_OF_FILE'
X#!/bin/sh
X#
X#	cook - file construction tool
X#	Copyright (C) 1994 Peter Miller.
X#	All rights reserved.
X#
X#	This program is free software; you can redistribute it and/or modify
X#	it under the terms of the GNU General Public License as published by
X#	the Free Software Foundation; either version 2 of the License, or
X#	(at your option) any later version.
X#
X#	This program is distributed in the hope that it will be useful,
X#	but WITHOUT ANY WARRANTY; without even the implied warranty of
X#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#	GNU General Public License for more details.
X#
X#	You should have received a copy of the GNU General Public License
X#	along with this program; if not, write to the Free Software
X#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X#
X# MANIFEST: Test the cookfp repeat functionality
X#
Xwork=/tmp/$$
XPAGER=cat
Xexport PAGER
Xumask 022
Xunset COOK
Xhere=`pwd`
Xif test $? -ne 0 ; then exit 1; fi
X
Xif test "$1" != "" ; then bin="$here/$1/bin"; else bin="$here/bin"; fi
X
Xfail()
X{
X	set +x
X	echo 'FAILED test of the cookfp repeat functionality' 1>&2
X	cd $here
X	rm -rf $work
X	exit 1
X}
Xpass()
X{
X	set +x
X	cd $here
X	rm -rf $work
X	exit 0
X}
Xtrap \"fail\" 1 2 3 15
X
Xmkdir $work
Xif test $? -ne 0 ; then exit 1; fi
Xcd $work
Xif test $? -ne 0 ; then fail; fi
X
X#
X# create simple file to verify
X#
Xecho hi > test.in
Xif test $? -ne 0 ; then fail; fi
X
X#
X# make sure it works every which way
X#
X$bin/cookfp test.in - test.in < test.in > test.out
Xif test $? -ne 0 ; then fail; fi
X
Xcat > test.ok << 'fubar'
XJoXEhdflGxZdS89tDd5zpFx0JRJyX0k67EH0Jod7aet4hIjB.hGhon0veN0BZRfi058HZQ06U0JD	test.in
XJoXEhdflGxZdS89tDd5zpFx0JRJyX0k67EH0Jod7aet4hIjB.hGhon0veN0BZRfi058HZQ06U0JD	stdin
XJoXEhdflGxZdS89tDd5zpFx0JRJyX0k67EH0Jod7aet4hIjB.hGhon0veN0BZRfi058HZQ06U0JD	test.in
Xfubar
Xif test $? -ne 0 ; then fail; fi
X
Xdiff test.ok test.out
Xif test $? -ne 0 ; then fail; fi
X
X#
X# Only definite negatives are possible.
X# The functionality exercised by this test appears to work,
X# no other guarantees are made.
X#
Xpass
END_OF_FILE
if test 2021 -ne `wc -c <'test/00/t0049a.sh'`; then
    echo shar: \"'test/00/t0049a.sh'\" unpacked with wrong size!
fi
# end of 'test/00/t0049a.sh'
fi
if test -f 'test/00/t0051a.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'test/00/t0051a.sh'\"
else
echo shar: Extracting \"'test/00/t0051a.sh'\" \(2365 characters\)
sed "s/^X//" >'test/00/t0051a.sh' <<'END_OF_FILE'
X#!/bin/sh
X#
X#	cook - file construction tool
X#	Copyright (C) 1994 Peter Miller.
X#	All rights reserved.
X#
X#	This program is free software; you can redistribute it and/or modify
X#	it under the terms of the GNU General Public License as published by
X#	the Free Software Foundation; either version 2 of the License, or
X#	(at your option) any later version.
X#
X#	This program is distributed in the hope that it will be useful,
X#	but WITHOUT ANY WARRANTY; without even the implied warranty of
X#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#	GNU General Public License for more details.
X#
X#	You should have received a copy of the GNU General Public License
X#	along with this program; if not, write to the Free Software
X#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X#
X# MANIFEST: Test the newest/oldest mtime functionality
X#
Xwork=/tmp/$$
XPAGER=cat
Xexport PAGER
Xumask 022
Xunset COOK
Xhere=`pwd`
Xif test $? -ne 0 ; then exit 1; fi
X
Xif test "$1" != "" ; then bin="$here/$1/bin"; else bin="$here/bin"; fi
X
Xfail()
X{
X	set +x
X	echo 'FAILED test of the newest/oldest mtime functionality' 1>&2
X	cd $here
X	rm -rf $work
X	exit 1
X}
Xpass()
X{
X	set +x
X	cd $here
X	rm -rf $work
X	exit 0
X}
Xtrap \"fail\" 1 2 3 15
X
Xmkdir $work
Xif test $? -ne 0 ; then exit 1; fi
Xcd $work
Xif test $? -ne 0 ; then fail; fi
X
X#
X# create the input files
X#
Xcat > Howto.cook << 'fubar'
Xset fingerprint update;
Xtest: first second
X{
X	sleep 1
X		set silent;
X	cat first second > test;
X}
X
Xfirst: same
X{
X	if [exists first] then
X	{
X		echo this should not happen
X			set silent;
X		fail;
X	}
X	sleep 1
X		set silent;
X	cat same same > first;
X}
X
Xsecond: different
X{
X	sleep 1
X		set silent;
X	cat different different > second;
X}
X
Xsame different: leaf
X{
X	sleep 1
X		set silent;
X	echo same > same;
X	date > different;
X	cat leaf leaf >> different;
X}
Xfubar
Xif test $? -ne 0 ; then fail; fi
Xecho "boring" > leaf
Xif test $? -ne 0 ; then fail; fi
X
X#
X# let the clock tick over
X#
Xsleep 1
X
X#
X# cook everything up
X#
X$bin/cook -nl -silent
Xif test $? -ne 0 ; then fail; fi
X
X#
X# let the clock tick over
X#
Xsleep 1
X
X#
X# change the leaf-most file
X#
Xecho "ha ha" > leaf
X
X#
X# cook everything up
X#	should not hit the "fail" action
X#
X$bin/cook -nl -silent
Xif test $? -ne 0 ; then fail; fi
X
X#
X# Only definite negatives are possible.
X# The functionality exercised by this test appears to work,
X# no other guarantees are made.
X#
Xpass
END_OF_FILE
if test 2365 -ne `wc -c <'test/00/t0051a.sh'`; then
    echo shar: \"'test/00/t0051a.sh'\" unpacked with wrong size!
fi
# end of 'test/00/t0051a.sh'
fi
if test -f 'test/00/t0054a.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'test/00/t0054a.sh'\"
else
echo shar: Extracting \"'test/00/t0054a.sh'\" \(2045 characters\)
sed "s/^X//" >'test/00/t0054a.sh' <<'END_OF_FILE'
X#!/bin/sh
X#
X#	cook - file construction tool
X#	Copyright (C) 1994 Peter Miller.
X#	All rights reserved.
X#
X#	This program is free software; you can redistribute it and/or modify
X#	it under the terms of the GNU General Public License as published by
X#	the Free Software Foundation; either version 2 of the License, or
X#	(at your option) any later version.
X#
X#	This program is distributed in the hope that it will be useful,
X#	but WITHOUT ANY WARRANTY; without even the implied warranty of
X#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#	GNU General Public License for more details.
X#
X#	You should have received a copy of the GNU General Public License
X#	along with this program; if not, write to the Free Software
X#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X#
X# MANIFEST: Test the fingerprint functionality
X#
Xwork=/tmp/$$
XPAGER=cat
Xexport PAGER
Xumask 022
Xunset COOK
Xhere=`pwd`
Xif test $? -ne 0 ; then exit 1; fi
X
Xif test "$1" != "" ; then bin="$here/$1/bin"; else bin="$here/bin"; fi
X
Xfail()
X{
X	set +x
X	echo 'FAILED test of the fingerprint functionality' 1>&2
X	cd $here
X	rm -rf $work
X	exit 1
X}
Xpass()
X{
X	set +x
X	cd $here
X	rm -rf $work
X	exit 0
X}
Xtrap \"fail\" 1 2 3 15
X
Xmkdir $work
Xif test $? -ne 0 ; then exit 1; fi
Xcd $work
Xif test $? -ne 0 ; then fail; fi
X
X#
X# put your test here
X#
Xcat > Howto.cook << 'fubar'
Xset fingerprint;
Xtest: leaf {
Xif [exists [target]] then rm [target] set clearstat;
Xsleep 1 set silent; cp [need] [target];
X}
Xfubar
Xif test $? -ne 0 ; then fail; fi
X
Xecho first > leaf;
Xif test $? -ne 0 ; then fail; fi
Xsleep 1
X
X$bin/cook -nl -silent
Xif test $? -ne 0 ; then fail; fi
X
Xsleep 1
Xecho second > leaf;
Xif test $? -ne 0 ; then fail; fi
X
X$bin/cook -nl > test.out 2>&1
Xif test $? -ne 0 ; then fail; fi
X
Xcat > test.ok << 'fubar'
Xcook: rm test
Xcook: cp leaf test
Xfubar
Xif test $? -ne 0 ; then fail; fi
X
Xdiff test.ok test.out
Xif test $? -ne 0 ; then fail; fi
X
X#
X# Only definite negatives are possible.
X# The functionality exercised by this test appears to work,
X# no other guarantees are made.
X#
Xpass
END_OF_FILE
if test 2045 -ne `wc -c <'test/00/t0054a.sh'`; then
    echo shar: \"'test/00/t0054a.sh'\" unpacked with wrong size!
fi
# end of 'test/00/t0054a.sh'
fi
if test -f 'test/00/t0056a.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'test/00/t0056a.sh'\"
else
echo shar: Extracting \"'test/00/t0056a.sh'\" \(2292 characters\)
sed "s/^X//" >'test/00/t0056a.sh' <<'END_OF_FILE'
X#!/bin/sh
X#
X#	cook - file construction tool
X#	Copyright (C) 1994 Peter Miller.
X#	All rights reserved.
X#
X#	This program is free software; you can redistribute it and/or modify
X#	it under the terms of the GNU General Public License as published by
X#	the Free Software Foundation; either version 2 of the License, or
X#	(at your option) any later version.
X#
X#	This program is distributed in the hope that it will be useful,
X#	but WITHOUT ANY WARRANTY; without even the implied warranty of
X#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#	GNU General Public License for more details.
X#
X#	You should have received a copy of the GNU General Public License
X#	along with this program; if not, write to the Free Software
X#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X#
X# MANIFEST: Test the search-list functionality
X#
Xwork=/tmp/$$
XPAGER=cat
Xexport PAGER
Xumask 022
Xunset COOK
Xhere=`pwd`
Xif test $? -ne 0 ; then exit 1; fi
X
Xif test "$1" != "" ; then bin="$here/$1/bin"; else bin="$here/bin"; fi
X
Xfail()
X{
X	set +x
X	echo 'FAILED test of the search-list functionality' 1>&2
X	cd $here
X	rm -rf $work
X	exit 1
X}
Xpass()
X{
X	set +x
X	cd $here
X	rm -rf $work
X	exit 0
X}
Xtrap \"fail\" 1 2 3 15
X
Xmkdir $work
Xif test $? -ne 0 ; then exit 1; fi
Xcd $work
Xif test $? -ne 0 ; then fail; fi
X
X#
X# make sure targets are not deeper than ingredients
X#
Xcat > Howto.cook << 'fubar'
Xset fingerprint update;
Xsearch_list = . bl;
Xtest: test.c
X{
X	cc -o test test.c;
X}
Xfubar
Xif test $? -ne 0 ; then fail; fi
X
Xcat > test.c << 'fubar'
Xmain(){exit(42);}
Xfubar
Xif test $? -ne 0 ; then fail; fi
X
X$bin/cook -nl -silent
Xif test $? -ne 0 ; then fail; fi
X
X./test
Xif test $? -ne 42 ; then fail; fi
X
X#
X# move into "bl"
X#
Xmkdir bl
Xif test $? -ne 0 ; then fail; fi
X
Xmv test test.c bl
Xif test $? -ne 0 ; then fail; fi
X
X#
X# new file in front of list
X#
Xsleep 1
Xcat > test.c << 'fubar'
Xmain(){exit(0);}
Xfubar
Xif test $? -ne 0 ; then fail; fi
X
X#
X# irrelevant update in back of list
X#
Xsleep 1
Xcc -o bl/test bl/test.c
Xif test $? -ne 0 ; then fail; fi
X
X#
X# this should cook in front list
X#
X$bin/cook -nl -silent
Xif test $? -ne 0 ; then fail; fi
X
X./test
Xif test $? -ne 0 ; then fail; fi
X
X#
X# Only definite negatives are possible.
X# The functionality exercised by this test appears to work,
X# no other guarantees are made.
X#
Xpass
END_OF_FILE
if test 2292 -ne `wc -c <'test/00/t0056a.sh'`; then
    echo shar: \"'test/00/t0056a.sh'\" unpacked with wrong size!
fi
# end of 'test/00/t0056a.sh'
fi
if test -f 'test/00/t0062a.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'test/00/t0062a.sh'\"
else
echo shar: Extracting \"'test/00/t0062a.sh'\" \(1851 characters\)
sed "s/^X//" >'test/00/t0062a.sh' <<'END_OF_FILE'
X#!/bin/sh
X#
X#	cook - file construction tool
X#	Copyright (C) 1994 Peter Miller.
X#	All rights reserved.
X#
X#	This program is free software; you can redistribute it and/or modify
X#	it under the terms of the GNU General Public License as published by
X#	the Free Software Foundation; either version 2 of the License, or
X#	(at your option) any later version.
X#
X#	This program is distributed in the hope that it will be useful,
X#	but WITHOUT ANY WARRANTY; without even the implied warranty of
X#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#	GNU General Public License for more details.
X#
X#	You should have received a copy of the GNU General Public License
X#	along with this program; if not, write to the Free Software
X#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X#
X# MANIFEST: Test the builtin basename function
X#
Xwork=/tmp/$$
XPAGER=cat
Xexport PAGER
Xumask 022
Xunset COOK
Xhere=`pwd`
Xif test $? -ne 0 ; then exit 1; fi
X
Xif test "$1" != "" ; then bin="$here/$1/bin"; else bin="$here/bin"; fi
X
Xfail()
X{
X	set +x
X	echo 'FAILED test of the builtin basename function' 1>&2
X	cd $here
X	rm -rf $work
X	exit 1
X}
Xpass()
X{
X	set +x
X	cd $here
X	rm -rf $work
X	exit 0
X}
Xtrap \"fail\" 1 2 3 15
X
Xmkdir $work
Xif test $? -ne 0 ; then exit 1; fi
Xcd $work
Xif test $? -ne 0 ; then fail; fi
X
X#
X# builtin basename function
X#
Xcat > Howto.cook << 'fubar'
Xtest:
X{
X	if [not [in [basename foo.c] foo]] then
X		fail;
X	if [not [in [basename foo/bar.c] foo/bar]] then
X		fail;
X	if [not [in [basename f.o.o/bar.c] f.o.o/bar]] then
X		fail;
X	if [not [in [basename baz] baz]] then
X		fail;
X	if [not [in [basename .baz] .baz]] then
X		fail;
X}
Xfubar
Xif test $? -ne 0 ; then fail; fi
X
X$bin/cook -nl
Xif test $? -ne 0 ; then fail; fi
X
X#
X# Only definite negatives are possible.
X# The functionality exercised by this test appears to work,
X# no other guarantees are made.
X#
Xpass
END_OF_FILE
if test 1851 -ne `wc -c <'test/00/t0062a.sh'`; then
    echo shar: \"'test/00/t0062a.sh'\" unpacked with wrong size!
fi
# end of 'test/00/t0062a.sh'
fi
if test -f 'test/00/t0067a.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'test/00/t0067a.sh'\"
else
echo shar: Extracting \"'test/00/t0067a.sh'\" \(1846 characters\)
sed "s/^X//" >'test/00/t0067a.sh' <<'END_OF_FILE'
X#!/bin/sh
X#
X#	cook - file construction tool
X#	Copyright (C) 1994 Peter Miller.
X#	All rights reserved.
X#
X#	This program is free software; you can redistribute it and/or modify
X#	it under the terms of the GNU General Public License as published by
X#	the Free Software Foundation; either version 2 of the License, or
X#	(at your option) any later version.
X#
X#	This program is distributed in the hope that it will be useful,
X#	but WITHOUT ANY WARRANTY; without even the implied warranty of
X#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#	GNU General Public License for more details.
X#
X#	You should have received a copy of the GNU General Public License
X#	along with this program; if not, write to the Free Software
X#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X#
X# MANIFEST: Test the default recipe anti-looping heuristic
X#
Xwork=/tmp/$$
XPAGER=cat
Xexport PAGER
Xumask 022
Xunset COOK
Xhere=`pwd`
Xif test $? -ne 0 ; then exit 1; fi
X
Xif test "$1" != "" ; then bin="$here/$1/bin"; else bin="$here/bin"; fi
X
Xfail()
X{
X	set +x
X	echo 'FAILED test of the default recipe anti-looping heuristic' 1>&2
X	cd $here
X	rm -rf $work
X	exit 1
X}
Xpass()
X{
X	set +x
X	cd $here
X	rm -rf $work
X	exit 0
X}
Xtrap \"fail\" 1 2 3 15
X
Xmkdir $work
Xif test $? -ne 0 ; then exit 1; fi
Xcd $work
Xif test $? -ne 0 ; then fail; fi
X
X#
X# default recipe anti-looping heuristic
X#
Xcat > Howto.cook << 'fubar'
Xset silent;
X
Xtest: fred;
X
X%.c.c:
X{
X	echo This should never happen
X		set silent;
X	fail;
X}
X
X%: %.c
X{
X	cc -o % %.c;
X}
Xfubar
Xif test $? -ne 0 ; then fail; fi
X
Xcat > fred.c << 'fubar'
X#include <stdio.h>
Xmain(){printf("Hello, World\n");}
Xfubar
Xif test $? -ne 0 ; then fail; fi
X
X$bin/cook -nl
Xif test $? -ne 0 ; then fail; fi
X
X#
X# Only definite negatives are possible.
X# The functionality exercised by this test appears to work,
X# no other guarantees are made.
X#
Xpass
END_OF_FILE
if test 1846 -ne `wc -c <'test/00/t0067a.sh'`; then
    echo shar: \"'test/00/t0067a.sh'\" unpacked with wrong size!
fi
# end of 'test/00/t0067a.sh'
fi
if test -f 'test/00/t0068a.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'test/00/t0068a.sh'\"
else
echo shar: Extracting \"'test/00/t0068a.sh'\" \(2162 characters\)
sed "s/^X//" >'test/00/t0068a.sh' <<'END_OF_FILE'
X#!/bin/sh
X#
X#	cook - file construction tool
X#	Copyright (C) 1994 Peter Miller.
X#	All rights reserved.
X#
X#	This program is free software; you can redistribute it and/or modify
X#	it under the terms of the GNU General Public License as published by
X#	the Free Software Foundation; either version 2 of the License, or
X#	(at your option) any later version.
X#
X#	This program is distributed in the hope that it will be useful,
X#	but WITHOUT ANY WARRANTY; without even the implied warranty of
X#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#	GNU General Public License for more details.
X#
X#	You should have received a copy of the GNU General Public License
X#	along with this program; if not, write to the Free Software
X#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X#
X# MANIFEST: Test the make2cook include functionality
X#
Xwork=/tmp/$$
XPAGER=cat
Xexport PAGER
Xumask 022
Xunset COOK
Xhere=`pwd`
Xif test $? -ne 0 ; then exit 1; fi
X
Xif test "$1" != "" ; then bin="$here/$1/bin"; else bin="$here/bin"; fi
X
Xfail()
X{
X	set +x
X	echo 'FAILED test of the make2cook include functionality' 1>&2
X	cd $here
X	rm -rf $work
X	exit 1
X}
Xpass()
X{
X	set +x
X	cd $here
X	rm -rf $work
X	exit 0
X}
Xtrap \"fail\" 1 2 3 15
X
Xmkdir $work
Xif test $? -ne 0 ; then exit 1; fi
Xcd $work
Xif test $? -ne 0 ; then fail; fi
X
X#
X# test make2cook include
X#
Xcat > test.in << 'fubar'
Xoverride OBJ = snot
X.SUFFIXES:
X.include guano
Xinclude *.mk
X-include $(OBJ)
Xtest:;@echo OK
Xfubar
Xif test $? -ne 0 ; then fail; fi
X
Xcat > test.ok << 'fubar'
X
XOBJ = snot;
X
X#include guano
X#include-cooked [wildcard *.mk]
X#include-cooked-nowarn [wildcard [OBJ]]
Xtest:
X{
X	echo OK
X		set silent;
X}
Xfubar
Xif test $? -ne 0 ; then fail; fi
Xecho broken > broken
Xif test $? -ne 0 ; then fail; fi
X
X$bin/make2cook test.in test.out < broken
Xif test $? -ne 0 ; then fail; fi
X
Xdiff test.ok test.out
Xif test $? -ne 0 ; then fail; fi
X
X$bin/make2cook -vers > /dev/null < broken
Xif test $? -ne 0 ; then fail; fi
X
X$bin/make2cook -help > /dev/null < broken
Xif test $? -ne 0 ; then fail; fi
X
X#
X# Only definite negatives are possible.
X# The functionality exercised by this test appears to work,
X# no other guarantees are made.
X#
Xpass
END_OF_FILE
if test 2162 -ne `wc -c <'test/00/t0068a.sh'`; then
    echo shar: \"'test/00/t0068a.sh'\" unpacked with wrong size!
fi
# end of 'test/00/t0068a.sh'
fi
if test -f 'test/00/t0069a.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'test/00/t0069a.sh'\"
else
echo shar: Extracting \"'test/00/t0069a.sh'\" \(1913 characters\)
sed "s/^X//" >'test/00/t0069a.sh' <<'END_OF_FILE'
X#!/bin/sh
X#
X#	cook - file construction tool
X#	Copyright (C) 1994 Peter Miller.
X#	All rights reserved.
X#
X#	This program is free software; you can redistribute it and/or modify
X#	it under the terms of the GNU General Public License as published by
X#	the Free Software Foundation; either version 2 of the License, or
X#	(at your option) any later version.
X#
X#	This program is distributed in the hope that it will be useful,
X#	but WITHOUT ANY WARRANTY; without even the implied warranty of
X#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#	GNU General Public License for more details.
X#
X#	You should have received a copy of the GNU General Public License
X#	along with this program; if not, write to the Free Software
X#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X#
X# MANIFEST: Test the archive file functionality
X#
Xwork=/tmp/$$
XPAGER=cat
Xexport PAGER
Xumask 022
Xunset COOK
Xhere=`pwd`
Xif test $? -ne 0 ; then exit 1; fi
X
Xif test "$1" != "" ; then bin="$here/$1/bin"; else bin="$here/bin"; fi
X
Xfail()
X{
X	set +x
X	echo 'FAILED test of the archive file functionality' 1>&2
X	cd $here
X	rm -rf $work
X	exit 1
X}
Xpass()
X{
X	set +x
X	cd $here
X	rm -rf $work
X	exit 0
X}
Xtrap \"fail\" 1 2 3 15
X
Xmkdir $work
Xif test $? -ne 0 ; then exit 1; fi
Xcd $work
Xif test $? -ne 0 ; then fail; fi
X
X#
X# test the archive file functionality
X#
Xcat > Howto.cook << 'fubar'
Xset fingerprint update;
Xset silent;
X
Xtest: a(b) {}
X
X%1(%2): %2
X{
X	if [exists %1] then
X	{
X		echo This should never happen.
X			set silent;
X		fail;
X	}
X	ar rc %1 %2;
X}
X
Xb:
X{
X	echo hello > [target];
X}
Xfubar
Xif test $? -ne 0 ; then fail; fi
X
X$bin/cook -nl
Xif test $? -ne 0 ; then fail; fi
X
X#
X# will not rebuild library the second time
X# if understands library format
X#
X$bin/cook -nl
Xif test $? -ne 0 ; then fail; fi
X
X#
X# Only definite negatives are possible.
X# The functionality exercised by this test appears to work,
X# no other guarantees are made.
X#
Xpass
END_OF_FILE
if test 1913 -ne `wc -c <'test/00/t0069a.sh'`; then
    echo shar: \"'test/00/t0069a.sh'\" unpacked with wrong size!
fi
# end of 'test/00/t0069a.sh'
fi
if test -f 'test/00/t0078a.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'test/00/t0078a.sh'\"
else
echo shar: Extracting \"'test/00/t0078a.sh'\" \(1970 characters\)
sed "s/^X//" >'test/00/t0078a.sh' <<'END_OF_FILE'
X#!/bin/sh
X#
X#	cook - file construction tool
X#	Copyright (C) 1994 Peter Miller.
X#	All rights reserved.
X#
X#	This program is free software; you can redistribute it and/or modify
X#	it under the terms of the GNU General Public License as published by
X#	the Free Software Foundation; either version 2 of the License, or
X#	(at your option) any later version.
X#
X#	This program is distributed in the hope that it will be useful,
X#	but WITHOUT ANY WARRANTY; without even the implied warranty of
X#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#	GNU General Public License for more details.
X#
X#	You should have received a copy of the GNU General Public License
X#	along with this program; if not, write to the Free Software
X#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X#
X# MANIFEST: Test the strip-dot functionality
X#
Xwork=/tmp/$$
XPAGER=cat
Xexport PAGER
Xumask 022
Xunset COOK
Xhere=`pwd`
Xif test $? -ne 0 ; then exit 1; fi
X
Xif test "$1" != "" ; then bin="$here/$1/bin"; else bin="$here/bin"; fi
X
Xfail()
X{
X	set +x
X	echo 'FAILED test of the strip-dot functionality' 1>&2
X	cd $here
X	rm -rf $work
X	exit 1
X}
Xpass()
X{
X	set +x
X	cd $here
X	rm -rf $work
X	exit 0
X}
Xtrap \"fail\" 1 2 3 15
X
Xmkdir $work
Xif test $? -ne 0 ; then exit 1; fi
Xcd $work
Xif test $? -ne 0 ; then fail; fi
X
X#
X# test the no-strip-dot functionality
X#
Xcat > Howto.cook << 'fubar'
Xset nostripdot;
Xa_obj = ;
Xall : ./a;
X./% : [%_obj] { echo ok > [target]; }
Xfubar
Xif test $? -ne 0 ; then fail; fi
X$bin/cook -nl -silent
Xif test $? -ne 0 ; then fail; fi
X
X#
X# test the strip-dot functionality
X#
Xcat > b.c << 'fubar'
Xint main() { exit(0); return 0; }
Xfubar
Xif test $? -ne 0 ; then fail; fi
Xcat > Howto.cook << 'fubar'
Xset stripdot;
Xall: b;
X./%: %.c { echo ok > %; }
Xfubar
Xif test $? -ne 0 ; then fail; fi
X$bin/cook -nl -silent
Xif test $? -ne 0 ; then fail; fi
X
X#
X# Only definite negatives are possible.
X# The functionality exercised by this test appears to work,
X# no other guarantees are made.
X#
Xpass
END_OF_FILE
if test 1970 -ne `wc -c <'test/00/t0078a.sh'`; then
    echo shar: \"'test/00/t0078a.sh'\" unpacked with wrong size!
fi
# end of 'test/00/t0078a.sh'
fi
if test -f 'test/00/t0079a.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'test/00/t0079a.sh'\"
else
echo shar: Extracting \"'test/00/t0079a.sh'\" \(1954 characters\)
sed "s/^X//" >'test/00/t0079a.sh' <<'END_OF_FILE'
X#!/bin/sh
X#
X#	cook - file construction tool
X#	Copyright (C) 1994 Peter Miller.
X#	All rights reserved.
X#
X#	This program is free software; you can redistribute it and/or modify
X#	it under the terms of the GNU General Public License as published by
X#	the Free Software Foundation; either version 2 of the License, or
X#	(at your option) any later version.
X#
X#	This program is distributed in the hope that it will be useful,
X#	but WITHOUT ANY WARRANTY; without even the implied warranty of
X#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#	GNU General Public License for more details.
X#
X#	You should have received a copy of the GNU General Public License
X#	along with this program; if not, write to the Free Software
X#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X#
X# MANIFEST: Test the mtime depth functionality
X#
Xwork=/tmp/$$
XPAGER=cat
Xexport PAGER
Xumask 022
Xunset COOK
Xhere=`pwd`
Xif test $? -ne 0 ; then exit 1; fi
X
Xif test "$1" != "" ; then bin="$here/$1/bin"; else bin="$here/bin"; fi
X
Xfail()
X{
X	set +x
X	echo 'FAILED test of the mtime depth functionality' 1>&2
X	cd $here
X	rm -rf $work
X	exit 1
X}
Xpass()
X{
X	set +x
X	cd $here
X	rm -rf $work
X	exit 0
X}
Xtrap \"fail\" 1 2 3 15
X
Xmkdir $work
Xif test $? -ne 0 ; then exit 1; fi
Xcd $work
Xif test $? -ne 0 ; then fail; fi
X
X#
X# test the mtime depth functionality
X#
Xcat > Howto.cook << 'fubar'
Xd = [pathname .];
Xall: [d]/result;
X[d]/result: dep
X{
X	if [exists [target]] then
X	{
X		echo This should never happen.
X			set silent;
X		fail;
X	}
X	touch [target];
X	sleep 1;
X}
Xdep:
X{
X	if [exists [target]] then
X	{
X		echo This should never happen.
X			set silent;
X		fail;
X	}
X	touch [target];
X	sleep 1;
X}
Xfubar
Xif test $? -ne 0 ; then fail; fi
X$bin/cook -nl -silent
Xif test $? -ne 0 ; then fail; fi
X$bin/cook -nl > /dev/null 2>&1
Xif test $? -ne 0 ; then fail; fi
X
X#
X# Only definite negatives are possible.
X# The functionality exercised by this test appears to work,
X# no other guarantees are made.
X#
Xpass
END_OF_FILE
if test 1954 -ne `wc -c <'test/00/t0079a.sh'`; then
    echo shar: \"'test/00/t0079a.sh'\" unpacked with wrong size!
fi
# end of 'test/00/t0079a.sh'
fi
echo shar: End of archive 5 \(of 19\).
cp /dev/null ark5isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 19 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
