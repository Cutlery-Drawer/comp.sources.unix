Newsgroups: comp.sources.unix
From: pmiller@bmr.gov.au (Peter Miller)
Subject: v28i105: cook - a file construction tool, V1.6, Part12/19
References: <1.775008949.28543@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: pmiller@bmr.gov.au (Peter Miller)
Posting-Number: Volume 28, Issue 105
Archive-Name: cook-1.6/part12

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 12 (of 19)."
# Contents:  aux/CHANGES.1.2 common/help.c common/mprintf.c
#   common/str.c common/version.c cook/hashline.y
# Wrapped by vixie@gw.home.vix.com on Sat Jul 23 17:11:26 1994
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'aux/CHANGES.1.2' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'aux/CHANGES.1.2'\"
else
echo shar: Extracting \"'aux/CHANGES.1.2'\" \(16720 characters\)
sed "s/^X//" >'aux/CHANGES.1.2' <<'END_OF_FILE'
XChange	State		Description
X------- -------		-------------
X1	completed	New release derived from cook.1.1.
X2	completed	add the roffpp command
X3	completed	improve copyright headers
X4	completed	change tests to use test rather than []
X5	completed	add configuration for varargs
X6	completed	make os_pathname understand symbolic links
X7	being_		add the cooktime command
X	integrated
X
XIDENTIFICATION
X	Project "cook.1.2", change 1.
X
XSUMMARY
X	New release derived from cook.1.1.
X
XDESCRIPTION
X	New release derived from cook.1.1.
X
XCAUSE
X	internal_enhancement
X
XFILES
X	Type	Action	Edit	File Name
X	------- ------- ------- -----------
X	source	create	1	CHANGES.sh
X	source	create	1	COPYING
X	source	create	1	Howto.cook
X	source	create	1	Makefile.awk
X	source	create	1	Makefile.sh
X	source	create	1	c_incl/cache.c
X	source	create	1	c_incl/cache.h
X	source	create	1	c_incl/main.c
X	source	create	1	c_incl/os.c
X	source	create	1	c_incl/os.h
X	source	create	1	c_incl/sniff.c
X	source	create	1	c_incl/sniff.h
X	source	create	1	common/ansi.c
X	source	create	1	common/arglex.c
X	source	create	1	common/arglex.h
X	source	create	1	common/error.c
X	source	create	1	common/error.h
X	source	create	1	common/help.c
X	source	create	1	common/help.h
X	source	create	1	common/main.h
X	source	create	1	common/mem.c
X	source	create	1	common/mem.h
X	source	create	1	common/str.c
X	source	create	1	common/str.h
X	source	create	1	common/trace.c
X	source	create	1	common/trace.h
X	source	create	1	common/version.c
X	source	create	1	common/version.h
X	source	create	1	common/word.c
X	source	create	1	common/word.h
X	source	create	1	config
X	source	create	1	cook/builtin.c
X	source	create	1	cook/builtin.h
X	source	create	1	cook/cook.c
X	source	create	1	cook/cook.h
X	source	create	1	cook/env.c
X	source	create	1	cook/env.h
X	source	create	1	cook/expr.c
X	source	create	1	cook/expr.h
X	source	create	1	cook/glob.c
X	source	create	1	cook/glob.h
X	source	create	1	cook/hashline.y
X	source	create	1	cook/id.c
X	source	create	1	cook/id.h
X	source	create	1	cook/lex.c
X	source	create	1	cook/lex.h
X	source	create	1	cook/listing.c
X	source	create	1	cook/listing.h
X	source	create	1	cook/main.c
X	source	create	1	cook/match.c
X	source	create	1	cook/match.h
X	source	create	1	cook/option.c
X	source	create	1	cook/option.h
X	source	create	1	cook/os.c
X	source	create	1	cook/os.h
X	source	create	1	cook/parse.y
X	source	create	1	cook/stmt.c
X	source	create	1	cook/stmt.h
X	source	create	1	doc/building.man
X	source	create	1	doc/builtin
X	source	create	1	doc/cmdline
X	source	create	1	doc/conditions
X	source	create	1	doc/glossary
X	source	create	1	doc/history
X	source	create	1	doc/how
X	source	create	1	doc/intro
X	source	create	1	doc/intro.aa
X	source	create	1	doc/intro.bb
X	source	create	1	doc/language
X	source	create	1	doc/match
X	source	create	1	doc/option
X	source	create	1	doc/readme.man
X	source	create	1	doc/refman.t
X	source	create	1	doc/system
X	source	create	1	doc/variables
X	source	create	1	find_libs/main.c
X	source	create	1	find_libs/os.c
X	source	create	1	find_libs/os.h
X	source	create	1	h/float.h
X	source	create	1	h/limits.h
X	source	create	1	h/stdarg.h
X	source	create	1	h/stddef.h
X	source	create	1	h/stdlib.h
X	source	create	1	h/string.h
X	source	create	1	h/time.h
X	source	create	1	lib/as
X	source	create	1	lib/bison
X	source	create	1	lib/c
X	source	create	1	lib/gcc
X	source	create	1	lib/home
X	source	create	1	lib/lex
X	source	create	1	lib/library
X	source	create	1	lib/print
X	source	create	1	lib/program
X	source	create	1	lib/sccs
X	source	create	1	lib/text
X	source	create	1	lib/usr
X	source	create	1	lib/usr.local
X	source	create	1	lib/yacc
X	source	create	1	lib/yacc_many
X	source	create	1	man1/c_incl.1
X	source	create	1	man1/cook.1
X	source	create	1	man1/find_libs.1
X	test	create	1	test/00/t0001a.sh
X	test	create	1	test/00/t0002a.sh
X	test	create	1	test/00/t0003a.sh
X	test	create	1	test/00/t0004a.sh
X	test	create	1	test/00/t0005a.sh
X	test	create	1	test/00/t0006a.sh
X	test	create	1	test/00/t0007a.sh
X	test	create	1	test/00/t0008a.sh
X	test	create	1	test/00/t0009a.sh
X	test	create	1	test/00/t0010a.sh
X	test	create	1	test/00/t0011a.sh
X	test	create	1	test/00/t0012a.sh
X	test	create	1	test/00/t0013a.sh
X	test	create	1	test/00/t0014a.sh
X	test	create	1	test/00/t0015a.sh
X	test	create	1	test/00/t0016a.sh
X	test	create	1	test/00/t0017a.sh
X	test	create	1	test/00/t0018a.sh
X	test	create	1	test/00/t0019a.sh
X	test	create	1	test/00/t0020a.sh
X	test	create	1	test/00/t0021a.sh
X	test	create	1	test/00/t0022a.sh
X	test	create	1	test/00/t0023a.sh
X	test	create	1	test/00/t0024a.sh
X	test	create	1	test/00/t0025a.sh
X	test	create	1	test/00/t0026a.sh
X	test	create	1	test/00/t0027a.sh
X	test	create	1	test/00/t0028a.sh
X	test	create	1	test/00/t0029a.sh
X	test	create	1	test/00/t0030a.sh
X	test	create	1	test/00/t0031a.sh
X	test	create	1	test/00/t0032a.sh
X	test	create	1	test/00/t0033a.sh
X	test	create	1	test/00/t0034a.sh
X	test	create	1	test/00/t0035a.sh
X	test	create	1	test/00/t0036a.sh
X	test	create	1	test/00/t0037a.sh
X
XHISTORY
X	What		When		Who	Comment
X	------		------		-----	---------
X	new_change	Fri Jun 19	pmiller Elapsed time: 0.000 days.
X			21:29:13 1992
X	develop_begin	Fri Jun 19	pmiller Elapsed time: 0.000 days.
X			21:29:13 1992
X	develop_end	Fri Jun 19	pmiller Elapsed time: 0.000 days.
X			21:29:13 1992
X	review_pass	Fri Jun 19	pmiller Elapsed time: 0.000 days.
X			21:29:13 1992
X	integrate_begin Fri Jun 19	pmiller Elapsed time: 0.011 days.
X			21:29:13 1992
X	integrate_pass	Fri Jun 19	pmiller
X			21:34:21 1992
X
XIDENTIFICATION
X	Project "cook.1.2", build 2, change 2.
X
XSUMMARY
X	add the roffpp command
X
XDESCRIPTION
X	1. The roffpp command is like cpp, but for text.	 It takes a
X	*roff file and substitutes the .so directives.	A search path of
X	include directories may be specified.
X	2. engance the c_incl program to understand these files, so that
X	dependencies may be tracked.
X	3. imptove some of the copyright notices
X	4. remove an anachronism: HIER_CHAR
X
XCAUSE
X	internal_enhancement
X
XFILES
X	Type	Action	Edit	File Name
X	------- ------- ------- -----------
X	source	modify	2	Howto.cook
X	source	modify	2	Makefile.sh
X	source	create	1	c_incl/lang_c.c
X	source	create	1	c_incl/lang_roff.c
X	source	modify	2	c_incl/main.c
X	source	modify	2	c_incl/sniff.c
X	source	modify	2	c_incl/sniff.h
X	source	modify	2	common/ansi.c
X	source	modify	2	common/arglex.c
X	source	modify	2	common/arglex.h
X	source	modify	2	common/error.c
X	source	modify	2	common/main.h
X	source	modify	2	common/mem.h
X	source	modify	2	common/str.c
X	source	modify	2	common/word.h
X	source	modify	2	config
X	source	modify	2	cook/builtin.c
X	source	modify	2	cook/glob.c
X	source	modify	2	cook/hashline.y
X	source	modify	2	cook/listing.c
X	source	modify	2	cook/match.c
X	source	modify	2	cook/option.c
X	source	modify	2	cook/os.c
X	source	modify	2	man1/c_incl.1
X	source	create	1	man1/roffpp.1
X	source	create	1	roffpp/main.c
X	source	create	1	roffpp/preprocess.c
X	source	create	1	roffpp/preprocess.h
X	test	create	1	test/00/t0038a.sh
X	test	create	1	test/00/t0039a.sh
X
XHISTORY
X	What		When		Who	Comment
X	------		------		-----	---------
X	new_change	Fri Jun 19	pmiller Elapsed time: 0.001 days.
X			22:36:04 1992
X	develop_begin	Fri Jun 19	pmiller Elapsed time: 1.005 days.
X			22:36:19 1992
X	develop_end	Sun Jun 21	pmiller Elapsed time: 0.001 days.
X			22:38:31 1992
X	review_pass	Sun Jun 21	pmiller Elapsed time: 0.001 days.
X			22:39:01 1992
X	integrate_begin Sun Jun 21	pmiller Elapsed time: 0.036 days.
X			22:39:40 1992
X	integrate_pass	Sun Jun 21	pmiller
X			22:55:46 1992
X
XIDENTIFICATION
X	Project "cook.1.2", build 3, change 3.
X
XSUMMARY
X	improve copyright headers
X
XDESCRIPTION
X	improve copyright headers
X
XCAUSE
X	internal_enhancement
X
XFILES
X	Type	Action	Edit	File Name
X	------- ------- ------- -----------
X	source	modify	2	c_incl/os.c
X	source	modify	2	c_incl/os.h
X	source	modify	2	common/error.h
X	source	modify	2	common/mem.c
X	source	modify	2	common/str.h
X	source	modify	2	common/trace.c
X	source	modify	2	common/trace.h
X	source	modify	2	common/version.h
X	source	modify	2	common/word.c
X	source	modify	2	cook/builtin.h
X	source	modify	2	cook/cook.c
X	source	modify	2	cook/cook.h
X	source	modify	2	cook/env.c
X	source	modify	2	cook/env.h
X	source	modify	2	cook/expr.c
X	source	modify	2	cook/expr.h
X	source	modify	2	cook/glob.h
X	source	modify	3	cook/hashline.y
X	source	modify	2	cook/id.c
X	source	modify	2	cook/id.h
X	source	modify	2	cook/lex.c
X	source	modify	2	cook/lex.h
X	source	modify	3	cook/listing.c
X	source	modify	2	cook/listing.h
X	source	modify	2	cook/match.h
X	source	modify	2	cook/option.h
X	source	modify	2	cook/os.h
X	source	modify	2	cook/parse.y
X	source	modify	2	cook/stmt.c
X	source	modify	2	cook/stmt.h
X	source	modify	2	doc/building.man
X	source	modify	2	doc/builtin
X	source	modify	2	doc/cmdline
X	source	modify	2	doc/conditions
X	source	modify	2	doc/glossary
X	source	modify	2	doc/history
X	source	modify	2	doc/how
X	source	modify	2	doc/intro
X	source	modify	2	doc/intro.aa
X	source	modify	2	doc/intro.bb
X	source	modify	2	doc/language
X	source	modify	2	doc/match
X	source	modify	2	doc/option
X	source	modify	2	doc/readme.man
X	source	modify	2	doc/refman.t
X	source	modify	2	doc/system
X	source	modify	2	doc/variables
X	source	modify	2	find_libs/os.c
X	source	modify	2	find_libs/os.h
X	source	modify	2	lib/as
X	source	modify	2	lib/bison
X	source	modify	2	lib/c
X	source	modify	2	lib/gcc
X	source	modify	2	lib/home
X	source	modify	2	lib/lex
X	source	modify	2	lib/library
X	source	modify	2	lib/print
X	source	modify	2	lib/program
X	source	modify	2	lib/sccs
X	source	modify	2	lib/text
X	source	modify	2	lib/usr
X	source	modify	2	lib/usr.local
X	source	modify	2	lib/yacc
X	source	modify	2	lib/yacc_many
X
XHISTORY
X	What		When		Who	Comment
X	------		------		-----	---------
X	new_change	Sun Jun 21	pmiller Elapsed time: 0.000 days.
X			23:19:18 1992
X	develop_begin	Sun Jun 21	pmiller Elapsed time: 0.037 days.
X			23:19:28 1992
X	develop_end	Mon Jun 22	pmiller Elapsed time: 0.000 days.
X			16:06:16 1992
X	review_pass	Mon Jun 22	pmiller Elapsed time: 0.001 days.
X			16:06:29 1992
X	integrate_begin Mon Jun 22	pmiller Elapsed time: 0.017 days.
X			16:06:59 1992
X	integrate_pass	Mon Jun 22	pmiller
X			16:14:37 1992
X
XIDENTIFICATION
X	Project "cook.1.2", build 4, change 4.
X
XSUMMARY
X	change tests to use test rather than []
X
XDESCRIPTION
X	change tests to use test rather than []
X
XCAUSE
X	external_bug
X
XFILES
X	Type	Action	Edit	File Name
X	------- ------- ------- -----------
X	source	modify	3	Makefile.sh
X	test	modify	2	test/00/t0001a.sh
X	test	modify	2	test/00/t0002a.sh
X	test	modify	2	test/00/t0003a.sh
X	test	modify	2	test/00/t0004a.sh
X	test	modify	2	test/00/t0005a.sh
X	test	modify	2	test/00/t0006a.sh
X	test	modify	2	test/00/t0007a.sh
X	test	modify	2	test/00/t0008a.sh
X	test	modify	2	test/00/t0009a.sh
X	test	modify	2	test/00/t0010a.sh
X	test	modify	2	test/00/t0011a.sh
X	test	modify	2	test/00/t0012a.sh
X	test	modify	2	test/00/t0013a.sh
X	test	modify	2	test/00/t0014a.sh
X	test	modify	2	test/00/t0015a.sh
X	test	modify	2	test/00/t0016a.sh
X	test	modify	2	test/00/t0017a.sh
X	test	modify	2	test/00/t0018a.sh
X	test	modify	2	test/00/t0019a.sh
X	test	modify	2	test/00/t0020a.sh
X	test	modify	2	test/00/t0021a.sh
X	test	modify	2	test/00/t0022a.sh
X	test	modify	2	test/00/t0023a.sh
X	test	modify	2	test/00/t0024a.sh
X	test	modify	2	test/00/t0025a.sh
X	test	modify	2	test/00/t0026a.sh
X	test	modify	2	test/00/t0027a.sh
X	test	modify	2	test/00/t0028a.sh
X	test	modify	2	test/00/t0029a.sh
X	test	modify	2	test/00/t0030a.sh
X	test	modify	2	test/00/t0031a.sh
X	test	modify	2	test/00/t0032a.sh
X	test	modify	2	test/00/t0033a.sh
X	test	modify	2	test/00/t0034a.sh
X	test	modify	2	test/00/t0035a.sh
X	test	modify	2	test/00/t0036a.sh
X	test	modify	2	test/00/t0037a.sh
X	test	modify	2	test/00/t0038a.sh
X	test	modify	2	test/00/t0039a.sh
X
XHISTORY
X	What		When		Who	Comment
X	------		------		-----	---------
X	new_change	Wed Jul	 8	pmiller Elapsed time: 0.001 days.
X			23:05:23 1992
X	develop_begin	Wed Jul	 8	pmiller Elapsed time: 0.092 days.
X			23:05:37 1992
X	develop_end	Wed Jul	 8	pmiller Elapsed time: 0.002 days.
X			23:46:57 1992
X	review_pass	Wed Jul	 8	pmiller Elapsed time: 0.002 days.
X			23:47:45 1992
X	integrate_begin Wed Jul	 8	pmiller Elapsed time: 0.015 days.
X			23:48:27 1992
X	integrate_pass	Wed Jul	 8	pmiller
X			23:55:02 1992
X
XIDENTIFICATION
X	Project "cook.1.2", build 5, change 5.
X
XSUMMARY
X	add configuration for varargs
X
XDESCRIPTION
X	1. A major stumbling block is that many systems don't have stdarg.
X	Change the code to be able to use stdarg.h or varargs.h as necessary.
X	2. move common elements of aegis and fmtgen into common, as many of
X	these common elements need mods for varargs.
X	3. reflect the change to varargs in the BUILDING instructions.
X	4. other small mods so will compile with traditional cc.
X	5. enhance the capabilities of str_vformat.
X	6. fix the enums for picky ansi c compilers.
X
XCAUSE
X	internal_enhancement
X
XFILES
X	Type	Action	Edit	File Name
X	------- ------- ------- -----------
X	source	modify	3	Howto.cook
X	source	modify	4	Makefile.sh
X	source	modify	3	c_incl/sniff.c
X	source	modify	3	common/ansi.c
X	source	modify	3	common/arglex.h
X	source	modify	3	common/error.c
X	source	modify	3	common/error.h
X	source	modify	3	common/str.c
X	source	modify	3	common/str.h
X	source	modify	3	common/trace.c
X	source	create	1	conf/ConvexOS-10
X	source	create	1	conf/SunOS-4.1.2
X	source	create	1	conf/SysV-4.0
X	source	modify	3	cook/builtin.c
X	source	modify	3	cook/cook.c
X	source	modify	3	cook/expr.c
X	source	modify	3	cook/expr.h
X	source	modify	3	cook/id.c
X	source	modify	3	cook/id.h
X	source	modify	3	cook/lex.c
X	source	modify	4	cook/listing.c
X	source	modify	2	cook/main.c
X	source	modify	3	cook/option.h
X	source	modify	3	cook/parse.y
X	source	modify	3	cook/stmt.h
X	source	modify	3	doc/building.man
X	source	remove	1	h/stdarg.h
X	source	create	1	h/stdarg.h-min
X
XHISTORY
X	What		When		Who	Comment
X	------		------		-----	---------
X	new_change	Wed Jul	 8	pmiller Elapsed time: 0.000 days.
X			23:58:12 1992
X	develop_begin	Wed Jul	 8	pmiller Elapsed time: 2.792 days.
X			23:58:19 1992
X	develop_end	Sun Jul 12	pmiller Elapsed time: 0.003 days.
X			22:24:34 1992
X	review_pass	Sun Jul 12	pmiller Elapsed time: 0.002 days.
X			22:25:42 1992
X	integrate_begin Sun Jul 12	pmiller Elapsed time: 0.101 days.
X			22:26:25 1992
X	integrate_pass	Sun Jul 12	pmiller
X			23:12:02 1992
X
XIDENTIFICATION
X	Project "cook.1.2", build 7, change 6.
X
XSUMMARY
X	make os_pathname understand symbolic links
X
XDESCRIPTION
X	make os_pathname understand symbolic links
X
XCAUSE
X	internal_enhancement
X
XFILES
X	Type	Action	Edit	File Name
X	------- ------- ------- -----------
X	source	modify	5	Makefile.sh
X	source	modify	2	c_incl/cache.h
X	source	modify	3	c_incl/main.c
X	source	modify	3	c_incl/os.h
X	source	modify	4	common/error.h
X	source	modify	3	common/main.h
X	source	modify	3	common/trace.h
X	source	modify	2	conf/ConvexOS-10
X	source	modify	2	conf/SunOS-4.1.2
X	source	modify	2	conf/SysV-4.0
X	source	modify	4	cook/builtin.c
X	source	modify	3	cook/cook.h
X	source	modify	3	cook/glob.c
X	source	modify	5	cook/listing.c
X	source	modify	3	cook/main.c
X	source	modify	3	cook/os.c
X	source	modify	3	cook/os.h
X	source	modify	2	find_libs/main.c
X	source	modify	2	roffpp/main.c
X	test	modify	3	test/00/t0012a.sh
X
XHISTORY
X	What		When		Who	Comment
X	------		------		-----	---------
X	new_change	Sun Jul 12	pmiller Elapsed time: 0.000 days.
X			23:14:52 1992
X	develop_begin	Sun Jul 12	pmiller Elapsed time: 0.000 days.
X			23:14:58 1992
X	develop_end	Mon Jul 13	pmiller Elapsed time: 0.000 days.
X			12:56:43 1992
X	review_pass	Mon Jul 13	pmiller Elapsed time: 0.001 days.
X			12:56:51 1992
X	integrate_begin Mon Jul 13	pmiller Elapsed time: 0.065 days.
X			12:57:18 1992
X	integrate_fail	Mon Jul 13	pmiller The convex is a little
X			13:26:41 1992		peculiar.
X						Needs more work.
X						Elapsed time: 0.076 days.
X	develop_end	Mon Jul 13	pmiller Elapsed time: 0.001 days.
X			14:00:48 1992
X	review_pass	Mon Jul 13	pmiller Elapsed time: 0.001 days.
X			14:01:07 1992
X	integrate_begin Mon Jul 13	pmiller Elapsed time: 0.037 days.
X			14:01:35 1992
X	integrate_pass	Mon Jul 13	pmiller
X			14:18:10 1992
X
XIDENTIFICATION
X	Project "cook.1.2", build 8, change 7.
X
XSUMMARY
X	add the cooktime command
X
XDESCRIPTION
X	add the cooktime command
X
XCAUSE
X	internal_enhancement
X
XSTATE
X	being_integrated
X
XFILES
X	Type	Action	Edit	File Name
X	------- ------- ------- -----------
X	source	modify	3	Howto.cook
X	source	modify	5	Makefile.sh
X	source	modify	3	common/main.h
X	source	create		cooktime/date.y
X	source	create		cooktime/main.c
X	source	create		man1/cooktime.1
X	test	create		test/00/t0040a.sh
X
XHISTORY
X	What		When		Who	Comment
X	------		------		-----	---------
X	new_change	Mon Jul 13	pmiller Elapsed time: 0.000 days.
X			14:27:20 1992
X	develop_begin	Mon Jul 13	pmiller Elapsed time: 0.322 days.
X			14:27:30 1992
X	develop_end	Mon Jul 13	pmiller Elapsed time: 0.001 days.
X			16:52:33 1992
X	review_pass	Mon Jul 13	pmiller Elapsed time: 0.001 days.
X			16:52:51 1992
X	integrate_begin Mon Jul 13	pmiller Elapsed time: 0.645 days.
X			16:53:24 1992
END_OF_FILE
if test 16720 -ne `wc -c <'aux/CHANGES.1.2'`; then
    echo shar: \"'aux/CHANGES.1.2'\" unpacked with wrong size!
fi
# end of 'aux/CHANGES.1.2'
fi
if test -f 'common/help.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'common/help.c'\"
else
echo shar: Extracting \"'common/help.c'\" \(14995 characters\)
sed "s/^X//" >'common/help.c' <<'END_OF_FILE'
X/*
X *	cook - a program construction tool
X *	Copyright (C) 1991, 1992, 1993, 1994 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: functions to provide consistent -Help behaviour
X */
X
X#include <ctype.h>
X#include <stdio.h>
X#include <ac/string.h>
X#include <ac/stdlib.h>
X#include <ac/unistd.h>
X
X#include <arglex.h>
X#include <error.h>
X#include <help.h>
X#include <mem.h>
X#include <version-stmp.h>
X#include <s-v-arg.h>
X#include <str.h>
X#include <trace.h>
X
X
X#define PAIR(a, b) ((a) * 256 + (b))
X
X
Xstatic	FILE	*fp;
Xstatic	char	*pager;
X
X/*
X * when updating the year in copyright notices,
X * the following files must all be modified:
X *	aux/BUILDING.man
X *	aux/README.man
X *	common/help.c
X *	doc/conditions
X *	man1/copyright.so
X */
Xstatic char *cr[] =
X{
X	"\\*(n) version \\*(v)",
X	".br",
X	"Copyright (C) 1988, 1989, 1990, 1991, 1992, 1993, 1994 Peter Miller.",
X	".br",
X	"All rights reserved.",
X	"",
X	"The \\*(n) program comes with ABSOLUTELY NO WARRANTY;",
X	"for details use the '\\*(n) -VERSion Warranty' command.",
X	"The \\*(n) program is free software, and you are welcome to",
X	"redistribute it under certain conditions;",
X	"for details use the '\\*(n) -VERSion Redistribution' command.",
X};
X
Xstatic char *au[] =
X{
X	".nf",
X	"Peter Miller   UUCP      uunet!munnari!bmr.gov.au!pmiller",
X	"/\\e/\\e*          Internet  pmiller@bmr.gov.au",
X	".fi",
X};
X
Xstatic char *so_o__rules[] =
X{
X#include <../man1/o__rules.h>
X};
X
Xstatic char *so_z_exit[] =
X{
X#include <../man1/z_exit.h>
X};
X
Xstatic char *so_copyright[] =
X{
X	".SH COPYRIGHT",
X	".so cr",
X	".SH AUTHOR",
X	".so au",
X};
X
Xtypedef struct so_list_ty so_list_ty;
Xstruct so_list_ty
X{
X	char	*name;
X	char	**text;
X	int	length;
X};
X
Xstatic so_list_ty so_list[] =
X{
X	{ "o__rules.so",	so_o__rules,	SIZEOF(so_o__rules)	},
X	{ "z_exit.so",		so_z_exit,	SIZEOF(so_z_exit)	},
X	{ "z_name.so",		0,		0			},
X	{ "copyright.so",	so_copyright,	SIZEOF(so_copyright)	},
X	{ "../doc/version.so",	0,		0			},
X	{ "cr",			cr,		SIZEOF(cr),		},
X	{ "au",			au,		SIZEOF(au),		},
X};
X
X
Xstatic	int	ocol;
Xstatic	int	icol;
Xstatic	int	fill;	/* true if currently filling */
Xstatic	int	in;	/* current indent */
Xstatic	int	ll;	/* line length */
Xstatic	long	roff_line;
Xstatic	char	*roff_file;
Xstatic	int	TP_line;
X
X
Xstatic void pager_error _((void));
X
Xstatic void
Xpager_error()
X{
X	nfatal("write %s", (pager ? pager : "standard output"));
X}
X
X
Xstatic void emit _((int));
X
Xstatic void
Xemit(c)
X	int	c;
X{
X	switch (c)
X	{
X	case ' ':
X		icol++;
X		break;
X
X	case '\t':
X		icol = ((icol / 8) + 1) * 8;
X		break;
X	
X	case '\n':
X		fputc('\n', fp);
X		fflush(fp);
X		icol = 0;
X		ocol = 0;
X		break;
X
X	default:
X		if (!isprint(c))
X			break;
X		while (((ocol / 8) + 1) * 8 <= icol && ocol + 1 < icol)
X		{
X			fputc('\t', fp);
X			ocol = ((ocol / 8) + 1) * 8;
X		}
X		while (ocol < icol)
X		{
X			fputc(' ', fp);
X			++ocol;
X		}
X		fputc(c, fp);
X		++icol;
X		++ocol;
X		break;
X	}
X	if (ferror(fp))
X		pager_error();
X}
X
X
Xstatic void emit_word _((char *, long));
X
Xstatic void
Xemit_word(buf, len)
X	char	*buf;
X	long	len;
X{
X	if (len <= 0)
X		return;
X
X	/*
X	 * if this line is not yet indented, indent it
X	 */
X	if (!ocol && !icol)
X		icol = in;
X	
X	/*
X	 * if there is already something on this line 
X	 * and we are in "fill" mode
X	 * and this word would cause it to overflow
X	 * then wrap the line
X	 */
X	if (ocol && fill && icol + len >= ll)
X	{
X		emit('\n');
X		icol = in;
X	}
X	if (ocol)
X		emit(' ');
X	while (len-- > 0)
X		emit(*buf++);
X}
X
X
Xstatic void br _((void));
X
Xstatic void
Xbr()
X{
X	if (ocol)
X		emit('\n');
X}
X
X
Xstatic void sp _((void));
X
Xstatic void
Xsp()
X{
X	br();
X	emit('\n');
X}
X
X
Xstatic void interpret_line_of_words _((char *));
X
Xstatic void
Xinterpret_line_of_words(line)
X	char	*line;
X{
X	/*
X	 * if not filling,
X	 * pump the line out literrally.
X	 */
X	if (!fill)
X	{
X		if (!ocol && !icol)
X			icol = in;
X		while (*line)
X			emit(*line++);
X		emit('\n');
X		return;
X	}
X
X	/*
X	 * in fill mode, a blank line means
X	 * finish the paragraph and emit a blank line
X	 */
X	if (!*line)
X	{
X		sp();
X		return;
X	}
X
X	/*
X	 * break the line into space-separated words
X	 * and emit each individually
X	 */
X	while (*line)
X	{
X		char	*start;
X
X		while (isspace(*line))
X			++line;
X		if (!*line)
X			break;
X		start = line;
X		while (*line && !isspace(*line))
X			++line;
X		emit_word(start, line - start);
X
X		/*
X		 * extra space at end of sentences
X		 */
X		if
X		(
X			(line[-1] == '.' || line[-1] == '?')
X		&&
X			(
X				!line[0]
X			||
X				(
X					line[0] == ' '
X				&&
X					(!line[1] || line[1] == ' ')
X				)
X			)
X		)
X			emit(' ');
X	}
X}
X
X
Xstatic void roff_error _((char *, ...));
X
Xstatic void
Xroff_error(s sva_last)
X	char		*s;
X	sva_last_decl
X{
X	string_ty	*buffer;
X	va_list		ap;
X
X	sva_init(ap, s);
X	buffer = str_vformat(s, ap);
X	va_end(ap);
X
X	fatal
X	(
X		"%s: %ld: %S",
X		(roff_file ? roff_file : "(noname)"),
X		roff_line,
X		buffer
X	);
X}
X
X
Xstatic void get_name _((char **, char *));
X
Xstatic void
Xget_name(lp, name)
X	char	**lp;
X	char	*name;
X{
X	char	*line;
X
X	line = *lp;
X	if (*line == '('/*)*/)
X	{
X		++line;
X		if (*line)
X		{
X			name[0] = *line++;
X			if (*line)
X			{
X				name[1] = *line++;
X				name[2] = 0;
X			}
X			else
X				name[1] = 0;
X		}
X		else
X			name[0] = 0;
X	}
X	else if (*line)
X	{
X		name[0] = *line++;
X		name[1] = 0;
X	}
X	else
X		name[0] = 0;
X	*lp = line;
X}
X
X
Xtypedef struct string_reg_ty string_reg_ty;
Xstruct string_reg_ty
X{
X	char	*name;
X	char	*value;
X};
X
X
Xstatic	long		string_reg_count;
Xstatic	string_reg_ty	*string_reg;
X
X
X
Xstatic char *string_find _((char *));
X
Xstatic char *
Xstring_find(name)
X	char	*name;
X{
X	long	j;
X
X	for (j = 0; j < string_reg_count; ++j)
X	{
X		string_reg_ty	*srp;
X
X		srp = &string_reg[j];
X		if (!strcmp(name, srp->name))
X			return srp->value;
X	}
X	return 0;
X}
X
X
Xstatic char *numreg_find _((char *));
X
Xstatic char *
Xnumreg_find(name)
X	char	*name;
X{
X	return 0;
X}
X
X
Xstatic void roff_prepro _((char *, char *));
X
Xstatic void
Xroff_prepro(buffer, line)
X	char	*buffer;
X	char	*line;
X{
X	char	*bp;
X	char	*value;
X	char	name[4];
X
X	bp = buffer;
X	while (*line)
X	{
X		int c = *line++;
X		if (c != '\\')
X		{
X			*bp++ = c;
X			continue;
X		}
X		c = *line++;
X		if (!c)
X		{
X			roff_error("can't do escaped end-of-line");
X			break;
X		}
X		switch (c)
X		{
X		default:
X			roff_error("unknown \\%c inline directive", c);
X			break;
X
X		case '%':
X			/* word break info */
X			break;
X
X		case '*':
X			/* inline string */
X			get_name(&line, name);
X			value = string_find(name);
X			if (value)
X			{
X				while (*value)
X					*bp++ = *value++;
X			}
X			break;
X
X		case 'n':
X			/* inline number register */
X			get_name(&line, name);
X			value = numreg_find(name);
X			if (value)
X			{
X				while (*value)
X					*bp++ = *value++;
X			}
X			break;
X
X		case 'e':
X		case '\\':
X			*bp++ = '\\';
X			break;
X
X		case '-':
X			*bp++ = '-';
X			break;
X
X		case 'f':
X			/* ignore font directives */
X			get_name(&line, name);
X			break;
X
X		case '&':
X		case '|':
X			/* ignore weird space directives */
X			break;
X		}
X	}
X	*bp = 0;
X}
X
X
Xstatic void interpret_text _((char *));
X
Xstatic void
Xinterpret_text(line)
X	char	*line;
X{
X	char	buffer[1000];
X
X	roff_prepro(buffer, line);
X	interpret_line_of_words(buffer);
X	if (TP_line)
X	{
X		if (icol >= 15)
X			br();
X		else
X			icol = 15;
X		TP_line = 0;
X		in = 16;
X	}
X}
X
X
Xstatic void roff_sub _((char *, int, char **));
X
Xstatic void
Xroff_sub(buffer, argc, argv)
X	char	*buffer;
X	int	argc;
X	char	**argv;
X{
X	int	j;
X	char	*bp;
X	long	len;
X
X	bp = buffer;
X	for (j = 0; j < argc; ++j)
X	{
X		len = strlen(argv[j]);
X		if (j)
X			*bp++ = ' ';
X		memcpy(bp, argv[j], len);
X		bp += len;
X	}
X	*bp = 0;
X}
X
X
Xstatic void interpret_text_args _((int, char **));
X
Xstatic void
Xinterpret_text_args(argc, argv)
X	int	argc;
X	char	**argv;
X{
X	char	buffer[1000];
X
X	roff_sub(buffer, argc, argv);
X	interpret_text(buffer);
X}
X
X
Xstatic void concat_text_args _((int, char **));
X
Xstatic void
Xconcat_text_args(argc, argv)
X	int	argc;
X	char	**argv;
X{
X	int	j;
X	char	*bp;
X	long	len;
X	char	buffer[1000];
X
X	bp = buffer;
X	for (j = 0; j < argc; ++j)
X	{
X		len = strlen(argv[j]);
X		if ((bp - buffer) + len + 1 >= sizeof(buffer))
X			break;
X		memcpy(bp, argv[j], len);
X		bp += len;
X	}
X	*bp = 0;
X	interpret_text(buffer);
X}
X
X
Xstatic void interpret _((char **, int)); /* forward */
X
X
Xstatic void so _((int, char **));
X
Xstatic void
Xso(argc, argv)
X	int	argc;
X	char	**argv;
X{
X	so_list_ty	*sop;
X
X	if (argc != 1)
X	{
X		roff_error(".so requires one argument");
X		return;
X	}
X	for (sop = so_list; sop < ENDOF(so_list); ++sop)
X	{
X		if (!strcmp(sop->name, argv[0]))
X		{
X			interpret(sop->text, sop->length);
X			return;
X		}
X	}
X	roff_error("\".so %s\" not known", argv[0]);
X}
X
X
Xstatic void lf _((int, char **));
X
Xstatic void
Xlf(argc, argv)
X	int	argc;
X	char	**argv;
X{
X	if (roff_file)
X		mem_free(roff_file);
X	if (argc >= 1)
X		roff_line = atol(argv[0]) - 1;
X	else
X		roff_line = 0;
X	if (argc >= 2)
X		roff_file = mem_copy_string(argv[1]);
X	else
X		roff_file = 0;
X}
X
X
Xstatic void ds_guts _((char *, char *));
X
Xstatic void
Xds_guts(name, value)
X	char		*name;
X	char		*value;
X{
X	long		j;
X	string_reg_ty	*srp;
X	size_t		nbytes;
X
X	for (j = 0; j < string_reg_count; ++j)
X	{
X		srp = &string_reg[j];
X		if (!strcmp(name, srp->name))
X		{
X			mem_free(srp->value);
X			srp->value = mem_copy_string(value);
X			return;
X		}
X	}
X
X	nbytes = (string_reg_count + 1) * sizeof(string_reg_ty);
X	string_reg = mem_change_size(string_reg, nbytes);
X	srp = &string_reg[string_reg_count++];
X	srp->name = mem_copy_string(name);
X	srp->value = mem_copy_string(value);
X}
X
X
Xstatic void ds _((int, char **));
X
Xstatic void
Xds(argc, argv)
X	int	argc;
X	char	**argv;
X{
X#if 1
X	/*
X	 * ignore .ds directives
X	 * values already set appropriately
X	 */
X#else
X	char	buf1[1000];
X	char	buf2[1000];
X
X	if (!argc)
X		return;
X	roff_sub(buf1, argc - 1, argv + 1);
X	roff_prepro(buf2, buf1);
X	ds_guts(argv[0], buf2);
X#endif
X}
X
X
Xstatic void dot_in _((int, char**));
X
Xstatic void
Xdot_in(argc, argv)
X	int	argc;
X	char	**argv;
X{
X	if (argc < 1)
X		return;
X	switch (argv[0][0])
X	{
X	case '-':
X		in -= atoi(argv[0] + 1);
X		break;
X
X	case '+':
X		in += atoi(argv[0] + 1);
X		break;
X
X	default:
X		in = atoi(argv[0] + 1);
X		break;
X	}
X	if (in < 0)
X		in = 0;
X}
X
X
Xstatic void interpret _((char **, int)); /* forward */
X
X
Xstatic void interpret_control _((char *));
X
Xstatic void
Xinterpret_control(line)
X	char	*line;
X{
X	int	c1, c2;
X	int	argc;
X	char	*argv[20];
X	char	temp[1000];
X	char	*cp;
X
X	/*
X	 * find the directive name
X	 */
X	line++;
X	while (isspace(*line))
X		++line;
X	if (*line)
X		c1 = *line++;
X	else
X		c1 = ' ';
X	if (*line)
X		c2 = *line++;
X	else
X		c2 = ' ';
X
X	/*
X	 * break the line into space-separated arguments
X	 */
X	argc = 0;
X	cp = temp;
X	while (argc < SIZEOF(argv))
X	{
X		int quoting;
X
X		while (isspace(*line))
X			++line;
X		if (!*line)
X			break;
X		argv[argc++] = cp;
X		quoting = 0;
X		while (*line)
X		{
X			if (*line == '"')
X			{
X				quoting = !quoting;
X				++line;
X				continue;
X			}
X			if (!quoting && isspace(*line))
X				break;
X			*cp++ = *line++;
X		}
X		*cp++ = 0;
X		if (!*line)
X			break;
X	}
X
X	/*
X	 * now do something with it
X	 */
X	switch (PAIR(c1, c2))
X	{
X	case PAIR('n', 'e'):
X		/* ignore the space needed directive */
X		break;
X
X	case PAIR('i', 'n'):
X		dot_in(argc, argv);
X		break;
X
X	case PAIR('I', ' '):
X	case PAIR('I', 'R'):
X	case PAIR('I', 'B'):
X	case PAIR('R', ' '):
X	case PAIR('R', 'I'):
X	case PAIR('R', 'B'):
X	case PAIR('B', ' '):
X	case PAIR('B', 'I'):
X	case PAIR('B', 'R'):
X		concat_text_args(argc, argv);
X		break;
X
X	case PAIR('n', 'f'):
X		br();
X		fill = 0;
X		break;
X
X	case PAIR('f', 'i'):
X		br();
X		fill = 1;
X		break;
X
X	case PAIR('t', 'a'):
X		/* ignore tab directive */
X		break;
X
X	case PAIR('b', 'r'):
X		br();
X		break;
X
X	case PAIR('s', 'p'):
X		sp();
X		break;
X
X	case PAIR('I', 'P'):
X		sp();
X		emit(' ');
X		emit(' ');
X		break;
X
X	case PAIR('P', 'P'):
X		in = 8;
X		sp();
X		break;
X
X	case PAIR('T', 'H'):
X		break;
X
X	case PAIR('T', 'P'):
X		in = 8;
X		sp();
X		TP_line = 1;
X		break;
X
X	case PAIR('S', 'H'):
X		in = 0;
X		sp();
X		interpret_text_args(argc, argv);
X		br();
X		in = 8;
X		break;
X
X	case PAIR('S', 'S'):
X		in = 4;
X		sp();
X		interpret_text_args(argc, argv);
X		br();
X		in = 8;
X		break;
X
X	case PAIR('s', 'o'):
X		so(argc, argv);
X		break;
X
X	case PAIR('l', 'f'):
X		lf(argc, argv);
X		break;
X
X	case PAIR('R', 'S'):
X		in += 8;
X		break;
X
X	case PAIR('R', 'E'):
X		in -= 8;
X		if (in < 0)
X			in = 0;
X		break;
X
X	case PAIR('d', 's'):
X		ds(argc, argv);
X		break;
X
X	case PAIR('r', /*(*/')'):
X		cp = string_find(/*(*/"R)");
X		if (!cp)
X			cp = "";
X		if (strcmp(cp, "no") != 0)
X		{
X			static char *macro[] =
X			{
X				".PP",
X				"See also",
X				".IR \\*(n) (1)",
X				"for options common to all \\*(n) commands.",
X			};
X
X			interpret(macro, SIZEOF(macro));
X		}
X		break;
X
X	default:
X		roff_error("formatting directive \".%c%c\" unknown", c1, c2);
X		break;
X	}
X}
X
X
Xstatic void interpret _((char **, int));
X
Xstatic void
Xinterpret(text, text_len)
X	char	**text;
X	int	text_len;
X{
X	int	j;
X	long	hold_line;
X	char	*hold_file;
X
X	/*
X	 * save position
X	 */
X	trace(("interpret()\n{\n"/*}*/));
X	hold_line = roff_line;
X	hold_file = roff_file ? mem_copy_string(roff_file) : (char *)0;
X
X	/*
X	 * interpret the text
X	 */
X	for (j = 0; j < text_len; ++j)
X	{
X		char *s;
X
X		s = text[j];
X		if (*s == '.' || *s == '\'')
X			interpret_control(s);
X		else
X			interpret_text(s);
X		++roff_line;
X		if (ferror(fp))
X			pager_error();
X	}
X
X	/*
X	 * restore position
X	 */
X	if (roff_file)
X		mem_free(roff_file);
X	roff_line = hold_line;
X	roff_file = hold_file;
X	trace((/*{*/"}\n"));
X}
X
X
Xvoid
Xhelp(text, text_len, usage)
X	char	**text;
X	int	text_len;
X	void	(*usage)_((void));
X{
X	/*
X	 * collect the rest of thge command line,
X	 * if necessary
X	 */
X	trace(("help(text = %08lX, text_len = %d, usage = %08lX)\n{\n"/*}*/,
X		text, text_len, usage));
X	if (usage && arglex() != arglex_token_eoln)
X	{
X		error
X		(
X			"misplaced \"%s\" command line argument",
X			arglex_value.alv_string
X		);
X		usage();
X	}
X
X	/*
X	 * if output is to the terminal,
X	 * send the output through a paginator
X	 */
X	if (isatty(0) && isatty(1))
X	{
X		pager = getenv("PAGER");
X		if (!pager)
X			pager = "more";
X	}
X	else
X		pager = 0;
X	
X	/*
X	 * open the paginator
X	 */
X	if (pager)
X	{
X		fp = popen(pager, "w");
X		if (!fp)
X		{
X			nerror("%s", pager);
X			pager = 0;
X			fp = stdout;
X		}
X	}
X	else
X		fp = stdout;
X
X	/*
X	 * initialize the state of the interpreter
X	 */
X	ds_guts(/*(*/"n)", progname);
X	ds_guts(/*(*/"v)", version_stamp());
X	ll = 79;
X	in = 0;
X	fill = 1;
X	ocol = 0;
X	icol = 0;
X	lf(0, 0);
X	TP_line = 0;
X
X	/*
X	 * do what they asked
X	 */
X	interpret(text, text_len);
X	br();
X
X	/*
X	 * close the paginator
X	 */
X	if (pager)
X		pclose(fp);
X	trace((/*{*/"}\n"));
X}
END_OF_FILE
if test 14995 -ne `wc -c <'common/help.c'`; then
    echo shar: \"'common/help.c'\" unpacked with wrong size!
fi
# end of 'common/help.c'
fi
if test -f 'common/mprintf.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'common/mprintf.c'\"
else
echo shar: Extracting \"'common/mprintf.c'\" \(15001 characters\)
sed "s/^X//" >'common/mprintf.c' <<'END_OF_FILE'
X/*
X *	cook - file construction tool
X *	Copyright (C) 1991, 1992, 1993, 1994 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: functions to manipulate mprintfs
X */
X
X#include <errno.h>
X#include <stdio.h>
X#include <ac/stdlib.h>
X#include <ac/string.h>
X
X#include <error.h>
X#include <mprintf.h>
X#include <str.h>
X
X/*
X * size to grow memory by
X */
X#define QUANTUM 200
X
X/*
X * maximum width for numbers
X */
X#define MAX_WIDTH (QUANTUM - 1)
X
X/*
X * the buffer for storing results
X */
Xstatic size_t	tmplen;
Xstatic size_t	length;
Xstatic char	*tmp;
X
X
X/*
X * NAME
X *	bigger - grow dynamic memory buffer
X *
X * SYNOPSIS
X *	int bigger(void);
X *
X * DESCRIPTION
X *	The bigger function is used to grow the dynamic memory buffer
X *	used by vmprintf to store the formatting results.
X *	The buffer is increased by QUANTUM bytes.
X *
X * RETURNS
X *	int; zero if failed to realloc memory, non-zero if successful.
X *
X * CAVEATS
X *	The existing buffer is still valid after failure.
X */
X
Xstatic int bigger _((void));
X
Xstatic int
Xbigger()
X{
X	char	*hold;
X	size_t	nbytes;
X
X	nbytes = tmplen + QUANTUM;
X	errno = 0;
X	hold = realloc(tmp, nbytes);
X	if (!hold)
X	{
X		if (!errno)
X			errno = ENOMEM;
X		return 0;
X	}
X	tmplen = nbytes;
X	tmp = hold;
X	return 1;
X}
X
X
X/*
X * NAME
X *	build fake - construct formatting specifier string
X *
X * SYNOPSIS
X *	void build_fake(char *fake, int flag, int width, int prec, int qual,
X *		int spec);
X *
X * DESCRIPTION
X *	The build_fake function is used to construct a format
X *	specification string from the arguments presented.  This is
X *	used to guarantee exact replication of sprintf behaviour.
X *
X * ARGUMENTS
X *	fake	- buffer to store results
X *	flag	- the flag specified (zero if not)
X *	width	- the width specified (zero if not)
X *	prec	- the precision specified (zero if not)
X *	qual	- the qualifier specified (zero if not)
X *	spec	- the formatting specifier specified
X */
X
Xstatic void build_fake _((char *fake, int flag, int width, int precision,
X	int qualifier, int specifier));
X
Xstatic void
Xbuild_fake(fake, flag, width, precision, qualifier, specifier)
X	char		*fake;
X	int		flag;
X	int		width;
X	int		precision;
X	int		qualifier;
X	int		specifier;
X{
X	char		*fp;
X
X	fp = fake;
X	*fp++ = '%';
X	if (flag)
X		*fp++ = flag;
X	if (width > 0)
X	{
X		sprintf(fp, "%d", width);
X		fp += strlen(fp);
X	}
X	*fp++ = '.';
X	sprintf(fp, "%d", precision);
X	fp += strlen(fp);
X	if (qualifier)
X		*fp++ = qualifier;
X	*fp++ = specifier;
X	*fp = 0;
X}
X
X
X/*
X * NAME
X *	vmprintf - build a formatted string in dynamic memory
X *
X * SYNOPSIS
X *	char *vmprintf(char *fmt, va_list ap);
X *
X * DESCRIPTION
X *	The vmprintf function is used to build a formatted string in memory.
X *	It understands all of the ANSI standard sprintf formatting directives.
X *	Additionally, "%S" may be used to manipulate (string_ty *) strings.
X *
X * ARGUMENTS
X *	fmt	- string spefiifying formatting to perform
X *	ap	- arguments of types as indicated by the format string
X *
X * RETURNS
X *	char *; pointer to buffer containing formatted string
X *		NULL if there is an error (sets errno)
X *
X * CAVEATS
X *	The contents of the buffer pointed to will change between calls
X *	to vmprintf.  The buffer itself may move between calls to vmprintf.
X *	DO NOT hand the result of vmprintf to free().
X */
X
Xchar *
Xvmprintf(fmt, ap)
X	char		*fmt;
X	va_list		ap;
X{
X	int		width;
X	int		width_set;
X	int		prec;
X	int		prec_set;
X	int		c;
X	char		*s;
X	int		qualifier;
X	int		flag;
X	char		fake[QUANTUM - 1];
X
X	/*
X	 * Build the result string in a temporary buffer.
X	 * Grow the temporary buffer as necessary.
X	 *
X	 * It is important to only make one pass across the variable argument
X	 * list.  Behaviour is undefined for more than one pass.
X	 */
X	if (!tmplen)
X	{
X		tmplen = 500;
X		errno = 0;
X		tmp = malloc(tmplen);
X		if (!tmp)
X		{
X			if (!errno)
X				errno = ENOMEM;
X			return 0;
X		}
X	}
X
X	length = 0;
X	s = fmt;
X	while (*s)
X	{
X		c = *s++;
X		if (c != '%')
X		{
X			normal:
X			if (length >= tmplen && !bigger())
X				return 0;
X			tmp[length++] = c;
X			continue;
X		}
X		c = *s++;
X
X		/*
X		 * get optional flag
X		 */
X		switch (c)
X		{
X		case '+':
X		case '-':
X		case '#':
X		case '0':
X		case ' ':
X			flag = c;
X			c = *s++;
X			break;
X
X		default:
X			flag = 0;
X			break;
X		}
X
X		/*
X		 * get optional width
X		 */
X		width = 0;
X		width_set = 0;
X		switch (c)
X		{
X		case '*':
X			width = va_arg(ap, int);
X			if (width < 0)
X			{
X				flag = '-';
X				width = -width;
X			}
X			c = *s++;
X			width_set = 1;
X			break;
X		
X		case '0': case '1': case '2': case '3': case '4':
X		case '5': case '6': case '7': case '8': case '9':
X			for (;;)
X			{
X				width = width * 10 + c - '0';
X				c = *s++;
X				switch (c)
X				{
X				default:
X					break;
X
X				case '0': case '1': case '2': case '3':
X				case '4': case '5': case '6': case '7':
X				case '8': case '9':
X					continue;
X				}
X				break;
X			}
X			width_set = 1;
X			break;
X
X		default:
X			break;
X		}
X
X		/*
X		 * get optional precision
X		 */
X		prec = 0;
X		prec_set = 0;
X		if (c == '.')
X		{
X			c = *s++;
X			switch (c)
X			{
X			default:
X				prec_set = 1;
X				break;
X
X			case '*':
X				c = *s++;
X				prec = va_arg(ap, int);
X				if (prec < 0)
X				{
X					prec = 0;
X					break;
X				}
X				prec_set = 1;
X				break;
X
X			case '0': case '1': case '2': case '3': case '4':
X			case '5': case '6': case '7': case '8': case '9':
X				for (;;)
X				{
X					prec = prec * 10 + c - '0';
X					c = *s++;
X					switch (c)
X					{
X					default:
X						break;
X
X					case '0': case '1': case '2': case '3':
X					case '4': case '5': case '6': case '7':
X					case '8': case '9':
X						continue;
X					}
X					break;
X				}
X				prec_set = 1;
X				break;
X			}
X		}
X
X		/*
X		 * get the optional qualifier
X		 */
X		switch (c)
X		{
X		default:
X			qualifier = 0;
X			break;
X
X		case 'l':
X		case 'h':
X		case 'L':
X			qualifier = c;
X			c = *s++;
X			break;
X		}
X
X		/*
X		 * get conversion specifier
X		 */
X		switch (c)
X		{
X		default:
X			errno = EINVAL;
X			return 0;
X
X		case '%':
X			goto normal;
X
X		case 'c':
X			{
X				int	a;
X				char	num[MAX_WIDTH + 1];
X				size_t	len;
X
X				a = (unsigned char)va_arg(ap, int);
X				if (!prec_set)
X					prec = 1;
X				if (width > MAX_WIDTH)
X					width = MAX_WIDTH;
X				if (prec > MAX_WIDTH)
X					prec = MAX_WIDTH;
X				build_fake(fake, flag, width, prec, 0, c);
X				sprintf(num, fake, a);
X				len = strlen(num);
X				assert(len < QUANTUM);
X				if (length + len > tmplen && !bigger())
X					return 0;
X				memcpy(tmp + length, num, len);
X				length += len;
X			}
X			break;
X
X		case 'd':
X		case 'i':
X			{
X				long	a;
X				char	num[MAX_WIDTH + 1];
X				size_t	len;
X
X				switch (qualifier)
X				{
X				case 'l':
X					a = va_arg(ap, long);
X					break;
X
X				case 'h':
X					a = (short)va_arg(ap, int);
X					break;
X
X				default:
X					a = va_arg(ap, int);
X					break;
X				}
X				if (!prec_set)
X					prec = 1;
X				if (width > MAX_WIDTH)
X					width = MAX_WIDTH;
X				if (prec > MAX_WIDTH)
X					prec = MAX_WIDTH;
X				build_fake(fake, flag, width, prec, 'l', c);
X				sprintf(num, fake, a);
X				len = strlen(num);
X				assert(len < QUANTUM);
X				if (length + len > tmplen && !bigger())
X					return 0;
X				memcpy(tmp + length, num, len);
X				length += len;
X			}
X			break;
X
X		case 'e':
X		case 'f':
X		case 'g':
X		case 'E':
X		case 'F':
X		case 'G':
X			{
X				double	a;
X				char	num[MAX_WIDTH + 1];
X				size_t	len;
X
X				/*
X				 * Ignore "long double" for now,
X				 * traditional implementations no grok.
X				 */
X				a = va_arg(ap, double);
X				if (!prec_set)
X					prec = 6;
X				if (width > MAX_WIDTH)
X					width = MAX_WIDTH;
X				if (prec > MAX_WIDTH)
X					prec = MAX_WIDTH;
X				build_fake(fake, flag, width, prec, 0, c);
X				sprintf(num, fake, a);
X				len = strlen(num);
X				assert(len < QUANTUM);
X				if (length + len > tmplen && !bigger())
X					return 0;
X				memcpy(tmp + length, num, len);
X				length += len;
X			}
X			break;
X
X		case 'n':
X			switch (qualifier)
X			{
X			case 'l':
X				{
X					long	*a;
X
X					a = va_arg(ap, long *);
X					*a = length;
X				}
X				break;
X
X			case 'h':
X				{
X					short	*a;
X
X					a = va_arg(ap, short *);
X					*a = length;
X				}
X				break;
X
X			default:
X				{
X					int	*a;
X
X					a = va_arg(ap, int *);
X					*a = length;
X				}
X				break;
X			}
X			break;
X
X		case 'u':
X		case 'o':
X		case 'x':
X		case 'X':
X			{
X				unsigned long	a;
X				char		num[MAX_WIDTH + 1];
X				size_t		len;
X
X				switch (qualifier)
X				{
X				case 'l':
X					a = va_arg(ap, unsigned long);
X					break;
X
X				case 'h':
X					a = (unsigned short)va_arg(ap, unsigned int);
X					break;
X
X				default:
X					a = va_arg(ap, unsigned int);
X					break;
X				}
X				if (!prec_set)
X					prec = 1;
X				if (prec > MAX_WIDTH)
X					prec = MAX_WIDTH;
X				if (width > MAX_WIDTH)
X					width = MAX_WIDTH;
X				build_fake(fake, flag, width, prec, 'l', c);
X				sprintf(num, fake, a);
X				len = strlen(num);
X				assert(len < QUANTUM);
X				if (length + len > tmplen && !bigger())
X					return 0;
X				memcpy(tmp + length, num, len);
X				length += len;
X			}
X			break;
X
X		case 's':
X			{
X				char	*a;
X				size_t	len;
X
X				a = va_arg(ap, char *);
X				if (prec_set)
X				{
X					char	*ep;
X
X					ep = (char *)memchr(a, 0, prec);
X					if (ep)
X						len = ep - a;
X					else
X						len = prec;
X				}
X				else
X					len = strlen(a);
X				if (!prec_set || len < prec)
X					prec = len;
X				if (!width_set || width < prec)
X					width = prec;
X				len = width;
X				while (length + len > tmplen)
X				{
X					if (!bigger())
X						return 0;
X				}
X				if (flag != '-')
X				{
X					while (width > prec)
X					{
X						tmp[length++] = ' ';
X						width--;
X					}
X				}
X				memcpy(tmp + length, a, prec);
X				length += prec;
X				width -= prec;
X				if (flag == '-')
X				{
X					while (width > 0)
X					{
X						tmp[length++] = ' ';
X						width--;
X					}
X				}
X			}
X			break;
X
X		case 'S':
X			{
X				string_ty	*a;
X				size_t		len;
X
X				a = va_arg(ap, string_ty *);
X				len = a->str_length;
X				if (!prec_set)
X					prec = len;
X				if (len < prec)
X					prec = len;
X				if (!width_set)
X					width = prec;
X				if (width < prec)
X					width = prec;
X				len = width;
X				while (length + len > tmplen)
X				{
X					if (!bigger())
X						return 0;
X				}
X				if (flag != '-')
X				{
X					while (width > prec)
X					{
X						tmp[length++] = ' ';
X						width--;
X					}
X				}
X				memcpy(tmp + length, a->str_text, prec);
X				length += prec;
X				width -= prec;
X				if (flag == '-')
X				{
X					while (width > 0)
X					{
X						tmp[length++] = ' ';
X						width--;
X					}
X				}
X			}
X			break;
X		}
X	}
X
X	/*
X	 * append a trailing NUL
X	 */
X	if (length >= tmplen && !bigger())
X		return 0;
X	tmp[length] = 0;
X
X	/*
X	 * return the temporary string
X	 */
X	return tmp;
X}
X
X
X/*
X * NAME
X *	mprintf - build a formatted string in dynamic memory
X *
X * SYNOPSIS
X *	char *mprintf(char *fmt, ...);
X *
X * DESCRIPTION
X *	The mprintf function is used to build a formatted string in memory.
X *	It understands all of the ANSI standard sprintf formatting directives.
X *	Additionally, "%S" may be used to manipulate (string_ty *) strings.
X *
X * ARGUMENTS
X *	fmt	- string spefiifying formatting to perform
X *	...	- arguments of types as indicated by the format string
X *
X * RETURNS
X *	char *; pointer to buffer containing formatted string
X *		NULL if there is an error (sets errno)
X *
X * CAVEATS
X *	The contents of the buffer pointed to will change between calls
X *	to mprintf.  The buffer itself may move between calls to mprintf.
X *	DO NOT hand the result of mprintf to free().
X */
X
Xchar *
Xmprintf(fmt sva_last)
X	char		*fmt;
X	sva_last_decl
X{
X	char		*result;
X	va_list		ap;
X
X	sva_init(ap, fmt);
X	result = vmprintf(fmt, ap);
X	va_end(ap);
X	return result;
X}
X
X
X/*
X * NAME
X *	vmprintfe - build a formatted string in dynamic memory
X *
X * SYNOPSIS
X *	char *vmprintfe(char *fmt, va_list ap);
X *
X * DESCRIPTION
X *	The vmprintfe function is used to build a formatted string in memory.
X *	It understands all of the ANSI standard sprintf formatting directives.
X *	Additionally, "%S" may be used to manipulate (string_ty *) strings.
X *
X * ARGUMENTS
X *	fmt	- string spefiifying formatting to perform
X *	ap	- arguments of types as indicated by the format string
X *
X * RETURNS
X *	char *; pointer to buffer containing formatted string
X *
X * CAVEATS
X *	On error, prints a fatal error message and exists; does not return.
X *
X *	The contents of the buffer pointed to will change between calls
X *	to vmprintfe.  The buffer itself may move between calls to vmprintfe.
X *	DO NOT hand the result of vmprintfe to free().
X */
X
Xchar *
Xvmprintfe(fmt, ap)
X	char		*fmt;
X	va_list		ap;
X{
X	char		*result;
X
X	result = vmprintf(fmt, ap);
X	if (!result)
X		nfatal("mprintf \"%s\"", fmt);
X	return result;
X}
X
X
X/*
X * NAME
X *	mprintfe - build a formatted string in dynamic memory
X *
X * SYNOPSIS
X *	char *mprintfe(char *fmt, ...);
X *
X * DESCRIPTION
X *	The mprintfe function is used to build a formatted string in memory.
X *	It understands all of the ANSI standard sprintf formatting directives.
X *	Additionally, "%S" may be used to manipulate (string_ty *) strings.
X *
X * ARGUMENTS
X *	fmt	- string spefiifying formatting to perform
X *	...	- arguments of types as indicated by the format string
X *
X * RETURNS
X *	char *; pointer to buffer containing formatted string
X *
X * CAVEATS
X *	On error, prints a fatal error message and exists; does not return.
X *
X *	The contents of the buffer pointed to will change between calls
X *	to mprintfe.  The buffer itself may move between calls to mprintfe.
X *	DO NOT hand the result of mprintfe to free().
X */
X
Xchar *
Xmprintfe(fmt sva_last)
X	char		*fmt;
X	sva_last_decl
X{
X	char		*result;
X	va_list		ap;
X
X	sva_init(ap, fmt);
X	result = vmprintfe(fmt, ap);
X	va_end(ap);
X	return result;
X}
X
X
X/*
X * NAME
X *	vmprintfes - build a formatted string in dynamic memory
X *
X * SYNOPSIS
X *	char *vmprintfes(char *fmt, va_list ap);
X *
X * DESCRIPTION
X *	The vmprintfes function is used to build a formatted string in memory.
X *	It understands all of the ANSI standard sprintf formatting directives.
X *	Additionally, "%S" may be used to manipulate (string_ty *) strings.
X *
X * ARGUMENTS
X *	fmt	- string spefiifying formatting to perform
X *	ap	- arguments of types as indicated by the format string
X *
X * RETURNS
X *	string_ty *; string containing formatted string
X *
X * CAVEATS
X *	On error, prints a fatal error message and exists; does not return.
X *
X *	It is the resposnsibility of the caller to invoke str_free to release
X *	the results when finished with.
X */
X
Xstring_ty *
Xvmprintfes(fmt, ap)
X	char		*fmt;
X	va_list		ap;
X{
X	if (!vmprintf(fmt, ap))
X		nfatal("mprintf \"%s\"", fmt);
X	return str_n_from_c(tmp, length);
X}
END_OF_FILE
if test 15001 -ne `wc -c <'common/mprintf.c'`; then
    echo shar: \"'common/mprintf.c'\" unpacked with wrong size!
fi
# end of 'common/mprintf.c'
fi
if test -f 'common/str.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'common/str.c'\"
else
echo shar: Extracting \"'common/str.c'\" \(15261 characters\)
sed "s/^X//" >'common/str.c' <<'END_OF_FILE'
X/*
X *	cook - file construction tool
X *	Copyright (C) 1991, 1992, 1993, 1994 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: functions to manipulate shared strings
X *
X * Strings are the most heavily used resource in cook.  They are manipulated
X * inside the match functions, and hence are in the inside loop.  For this
X * reason they must be fast.
X *
X * A literal pool is maintained.  Each string has a reference count.  The
X * string stays in the literal pool for as long as it hash a positive
X * reference count.  To determine if a string is already in the literal pool,
X * linear dynamic hashing is used to guarantee an O(1) search.  That all equal
X * strings are the same item in the literal pool means that string equality is
X * a pointer test, and thus very fast.
X */
X
X#include <ctype.h>
X#include <ac/stddef.h>
X#include <stdio.h>
X#include <ac/stdlib.h>
X#include <ac/string.h>
X
X#include <error.h>
X#include <mem.h>
X#include <mprintf.h>
X#include <s-v-arg.h>
X#include <str.h>
X
X
X/*
X * maximum conversion width for numbers
X */
X#define MAX_WIDTH 509
X
Xstring_ty *str_true;
Xstring_ty *str_false;
Xstatic string_ty **hash_table;
Xstatic str_hash_ty hash_modulus;
Xstatic str_hash_ty hash_cutover;
Xstatic str_hash_ty hash_cutover_mask;
Xstatic str_hash_ty hash_cutover_split_mask;
Xstatic str_hash_ty hash_split;
Xstatic str_hash_ty hash_load;
X
X#define MAX_HASH_LEN 20
X
X
X/*
X * NAME
X *	hash_generate - hash string to number
X *
X * SYNOPSIS
X *	str_hash_ty hash_generate(char *s, size_t n);
X *
X * DESCRIPTION
X *	The hash_generate function is used to make a number from a string.
X *
X * RETURNS
X *	str_hash_ty - the magic number
X *
X * CAVEAT
X *	Only the last MAX_HASH_LEN characters are used.
X *	It is important that str_hash_ty be unsigned (int or long).
X */
X
Xstatic str_hash_ty hash_generate _((char *, size_t));
X
Xstatic str_hash_ty
Xhash_generate(s, n)
X	char		*s;
X	size_t		n;
X{
X	str_hash_ty	retval;
X
X	if (n > MAX_HASH_LEN)
X	{
X		s += n - MAX_HASH_LEN;
X		n = MAX_HASH_LEN;
X	}
X
X	retval = 0;
X	while (n > 0)
X	{
X		retval = (retval + (retval << 1)) ^ *s++;
X		--n;
X	}
X	return retval;
X}
X
X
X/*
X * NAME
X *	str_valid - test a string
X *
X * SYNOPSIS
X *	int str_valid(string_ty *s);
X *
X * DESCRIPTION
X *	The str_valid function is used to test if a pointer points to a valid
X *	string.
X *
X * RETURNS
X *	int: zero if the string is not valid, nonzero if the string is valid.
X *
X * CAVEAT
X *	This function is only available then the DEBUG symbol is #define'd.
X */
X
X#ifdef DEBUG
X
Xint
Xstr_valid(s)
X	string_ty	*s;
X{
X	return
X	(
X		s->str_references > 0
X	&&
X		strlen(s->str_text) == s->str_length
X	&&
X		s->str_hash == hash_generate(s->str_text, s->str_length)
X	);
X}
X
X#endif
X
X
X/*
X * NAME
X *	str_initialize - start up string table
X *
X * SYNOPSIS
X *	void str_initialize(void);
X *
X * DESCRIPTION
X *	The str_initialize function is used to create the hash table and
X *	initialize it to empty.
X *
X * RETURNS
X *	void
X *
X * CAVEAT
X *	This function must be called before any other defined in this file.
X */
X
Xvoid
Xstr_initialize()
X{
X	str_hash_ty	j;
X
X	hash_modulus = 1 << 8; /* MUST be a power of 2 */
X	hash_cutover = hash_modulus;
X	hash_split = hash_modulus - hash_cutover;
X	hash_cutover_mask = hash_cutover - 1;
X	hash_cutover_split_mask = (hash_cutover * 2) - 1;
X	hash_load = 0;
X	hash_table = mem_alloc(hash_modulus * sizeof(string_ty *));
X	for (j = 0; j < hash_modulus; ++j)
X		hash_table[j] = 0;
X
X	str_true = str_from_c("1");
X	str_false = str_from_c("");
X}
X
X
X/*
X * NAME
X *	split - reduce table loading
X *
X * SYNOPSIS
X *	void split(void);
X *
X * DESCRIPTION
X *	The split function is used to reduce the load factor on the hash table.
X *
X * RETURNS
X *	void
X *
X * CAVEAT
X *	A load factor of about 80% is suggested.
X */
X
Xstatic void split _((void));
X
Xstatic void
Xsplit()
X{
X	string_ty	*p;
X	string_ty	*p2;
X	str_hash_ty	index;
X
X	/*
X	 * get the list to be split across buckets 
X	 */
X	p = hash_table[hash_split];
X	hash_table[hash_split] = 0;
X
X	/*
X	 * increase the modulus by one
X	 */
X	hash_modulus++;
X	hash_table =
X		mem_change_size
X		(
X			hash_table,
X			hash_modulus * sizeof(string_ty *)
X		);
X	hash_table[hash_modulus - 1] = 0;
X	hash_split = hash_modulus - hash_cutover;
X	if (hash_split >= hash_cutover)
X	{
X		hash_cutover = hash_modulus;
X		hash_split = 0;
X		hash_cutover_mask = hash_cutover - 1;
X		hash_cutover_split_mask = (hash_cutover * 2) - 1;
X	}
X
X	/*
X	 * now redistribute the list elements
X	 */
X	while (p)
X	{
X		p2 = p;
X		p = p->str_next;
X
X		index = p2->str_hash & hash_cutover_mask;
X		if (index < hash_split)
X			index = p2->str_hash & hash_cutover_split_mask;
X		assert(index < hash_modulus);
X		p2->str_next = hash_table[index];
X		hash_table[index] = p2;
X	}
X}
X
X
X/*
X * NAME
X *	str_from_c - make string from C string
X *
X * SYNOPSIS
X *	string_ty *str_from_c(char*);
X *
X * DESCRIPTION
X *	The str_from_c function is used to make a string from a null terminated
X *	C string.
X *
X * RETURNS
X *	string_ty * - a pointer to a string in dynamic memory.  Use str_free when
X *	finished with.
X *
X * CAVEAT
X *	The contents of the structure pointed to MUST NOT be altered.
X */
X
Xstring_ty *
Xstr_from_c(s)
X	char		*s;
X{
X	return str_n_from_c(s, strlen(s));
X}
X
X
X/*
X * NAME
X *	str_n_from_c - make string
X *
X * SYNOPSIS
X *	string_ty *str_n_from_c(char *s, size_t n);
X *
X * DESCRIPTION
X *	The str_n_from_c function is used to make a string from an array of
X *	characters.  No null terminator is assumed.
X *
X * RETURNS
X *	string_ty * - a pointer to a string in dynamic memory.  Use str_free when
X *	finished with.
X *
X * CAVEAT
X *	The contents of the structure pointed to MUST NOT be altered.
X */
X
Xstring_ty *
Xstr_n_from_c(s, length)
X	char		*s;
X	size_t		length;
X{
X	str_hash_ty	hash;
X	str_hash_ty	index;
X	string_ty	*p;
X
X	hash = hash_generate(s, length);
X
X#ifdef DEBUG
X	if (!hash_table)
X		fatal("you must call str_initialize early in main()");
X#endif
X	index = hash & hash_cutover_mask;
X	if (index < hash_split)
X		index = hash & hash_cutover_split_mask;
X	assert(index < hash_modulus);
X
X	for (p = hash_table[index]; p; p = p->str_next)
X	{
X		if
X		(
X			p->str_hash == hash
X		&&
X			p->str_length == length
X		&&
X			!memcmp(p->str_text, s, length)
X		)
X		{
X			p->str_references++;
X			return p;
X		}
X	}
X
X	p = mem_alloc(sizeof(string_ty) + length);
X	p->str_hash = hash;
X	p->str_length = length;
X	p->str_references = 1;
X	p->str_next = hash_table[index];
X	hash_table[index] = p;
X	memcpy(p->str_text, s, length);
X	p->str_text[length] = 0;
X
X	hash_load++;
X	while (hash_load * 10 > hash_modulus * 8)
X		split();
X	return p;
X}
X
X
X/*
X * NAME
X *	str_copy - make a copy of a string
X *
X * SYNOPSIS
X *	string_ty *str_copy(string_ty *s);
X *
X * DESCRIPTION
X *	The str_copy function is used to make a copy of a string.
X *
X * RETURNS
X *	string_ty * - a pointer to a string in dynamic memory.  Use str_free when
X *	finished with.
X *
X * CAVEAT
X *	The contents of the structure pointed to MUST NOT be altered.
X */
X
Xstring_ty *
Xstr_copy(s)
X	string_ty	*s;
X{
X	s->str_references++;
X	return s;
X}
X
X
X/*
X * NAME
X *	str_free - release a string
X *
X * SYNOPSIS
X *	void str_free(string_ty *s);
X *
X * DESCRIPTION
X *	The str_free function is used to indicate that a string hash been
X *	finished with.
X *
X * RETURNS
X *	void
X *
X * CAVEAT
X *	This is the only way to release strings DO NOT use the free function.
X */
X
Xvoid
Xstr_free(s)
X	string_ty	*s;
X{
X	str_hash_ty	index;
X	string_ty	**spp;
X
X	assert(str_valid(s));
X	if (s->str_references > 1)
X	{
X		s->str_references--;
X		return;
X	}
X	assert(s->str_references == 1);
X
X	/*
X	 *  find the hash bucket it was in,
X	 *  and remove it
X	 */
X	index = s->str_hash & hash_cutover_mask;
X	if (index < hash_split)
X		index = s->str_hash & hash_cutover_split_mask;
X	assert(index < hash_modulus);
X	for (spp = &hash_table[index]; *spp; spp = &(*spp)->str_next)
X	{
X		if (*spp == s)
X		{
X			*spp = s->str_next;
X			free(s);
X			--hash_load;
X			return;
X		}
X	}
X	/* should never reach here! */
X	fatal("attempted to free non-existent string (bug)");
X}
X
X
X/*
X * NAME
X *	str_catenate - join two strings
X *
X * SYNOPSIS
X *	string_ty *str_catenate(string_ty *, string_ty *);
X *
X * DESCRIPTION
X *	The str_catenate function is used to concatenate two strings to form a
X *	new string.
X *
X * RETURNS
X *	string_ty * - a pointer to a string in dynamic memory.  Use str_free when
X *	finished with.
X *
X * CAVEAT
X *	The contents of the structure pointed to MUST NOT be altered.
X */
X
Xstring_ty *
Xstr_catenate(s1, s2)
X	string_ty	*s1;
X	string_ty	*s2;
X{
X	static char	*tmp;
X	static size_t	tmplen;
X	string_ty	*s;
X	size_t		length;
X
X	length = s1->str_length + s2->str_length;
X	if (tmplen < length)
X	{
X		tmplen = length;
X		tmp = mem_change_size(tmp, tmplen);
X	}
X	memcpy(tmp, s1->str_text, s1->str_length);
X	memcpy(tmp + s1->str_length, s2->str_text, s2->str_length);
X	s = str_n_from_c(tmp, length); 
X	return s;
X}
X
X
X/*
X * NAME
X *	str_cat_three - join three strings
X *
X * SYNOPSIS
X *	string_ty *str_cat_three(string_ty *, string_ty *, string_ty *);
X *
X * DESCRIPTION
X *	The str_cat_three function is used to concatenate three strings to form
X *	a new string.
X *
X * RETURNS
X *	string_ty * - a pointer to a string in dynamic memory.  Use str_free when
X *	finished with.
X *
X * CAVEAT
X *	The contents of the structure pointed to MUST NOT be altered.
X */
X
Xstring_ty *
Xstr_cat_three(s1, s2, s3)
X	string_ty	*s1;
X	string_ty	*s2;
X	string_ty	*s3;
X{
X	static char	*tmp;
X	static size_t	tmplen;
X	string_ty	*s;
X	size_t		length;
X
X	length = s1->str_length + s2->str_length + s3->str_length;
X	if (tmplen < length)
X	{
X		tmplen = length;
X		tmp = mem_change_size(tmp, tmplen);
X	}
X	memcpy(tmp, s1->str_text, s1->str_length);
X	memcpy(tmp + s1->str_length, s2->str_text, s2->str_length);
X	memcpy
X	(
X		tmp + s1->str_length + s2->str_length,
X		s3->str_text,
X		s3->str_length
X	);
X	s = str_n_from_c(tmp, length); 
X	return s;
X}
X
X
X/*
X * NAME
X *	str_equal - test equality of strings
X *
X * SYNOPSIS
X *	int str_equal(string_ty *, string_ty *);
X *
X * DESCRIPTION
X *	The str_equal function is used to test if two strings are equal.
X *
X * RETURNS
X *	int; zero if the strings are not equal, nonzero if the strings are
X *	equal.
X *
X * CAVEAT
X *	This function is implemented as a macro in strings.h
X */
X
X#ifndef str_equal
X
Xint
Xstr_equal(s1, s2)
X	string_ty	*s1;
X	string_ty	*s2;
X{
X	return (s1 == s2);
X}
X
X#endif
X
X
X/*
X * NAME
X *	str_upcase - upcase a string
X *
X * SYNOPSIS
X *	string_ty *str_upcase(string_ty *);
X *
X * DESCRIPTION
X *	The str_upcase function is used to form a string which is an upper case 
X *	form of the supplied string.
X *
X * RETURNS
X *	string_ty * - a pointer to a string in dynamic memory.  Use str_free when
X *	finished with.
X *
X * CAVEAT
X *	The contents of the structure pointed to MUST NOT be altered.
X */
X
Xstring_ty *
Xstr_upcase(s)
X	string_ty	*s;
X{
X	static char	*tmp;
X	static size_t	tmplen;
X	string_ty	*retval;
X	char		*cp1;
X	char		*cp2;
X
X	if (tmplen < s->str_length)
X	{
X		tmplen = s->str_length;
X		tmp = mem_change_size(tmp, tmplen);
X	}
X	for (cp1 = s->str_text, cp2 = tmp; *cp1; ++cp1, ++cp2)
X	{
X		int	c;
X
X		c = *cp1;
X		if (islower(c))
X			c = toupper(c);
X		*cp2 = c;
X	}
X	retval = str_n_from_c(tmp, s->str_length);
X	return retval;
X}
X
X
X/*
X * NAME
X *	str_downcase - lowercase string
X *
X * SYNOPSIS
X *	string_ty *str_downcase(string_ty *);
X *
X * DESCRIPTION
X *	The str_downcase function is used to form a string which is a lowercase
X *	form of the supplied string.
X *
X * RETURNS
X *	string_ty * - a pointer to a string in dynamic memory.  Use str_free when
X *	finished with.
X *
X * CAVEAT
X *	The contents of the structure pointed to MUST NOT be altered.
X */
X
Xstring_ty *
Xstr_downcase(s)
X	string_ty	*s;
X{
X	static char	*tmp;
X	static size_t	tmplen;
X	string_ty	*retval;
X	char		*cp1;
X	char		*cp2;
X
X	if (tmplen < s->str_length)
X	{
X		tmplen = s->str_length;
X		tmp = mem_change_size(tmp, tmplen);
X	}
X	for (cp1 = s->str_text, cp2 = tmp; *cp1; ++cp1, ++cp2)
X	{
X		int c;
X
X		c = *cp1;
X		if (isupper(c))
X			c = tolower(c);
X		*cp2 = c;
X	}
X	retval = str_n_from_c(tmp, s->str_length);
X	return retval;
X}
X
X
X/*
X * NAME
X *	str_bool - get boolean value
X *
X * SYNOPSIS
X *	int str_bool(string_ty *s);
X *
X * DESCRIPTION
X *	The str_bool function is used to determine the boolean value of the
X *	given string.  A "false" result is if the string is empty or
X *	0 or blank, and "true" otherwise.
X *
X * RETURNS
X *	int: zero to indicate a "false" result, nonzero to indicate a "true"
X *	result.
X */
X
Xint
Xstr_bool(s)
X	string_ty	*s;
X{
X	char		*cp;
X
X	cp = s->str_text;
X	while (*cp)
X	{
X		if (*cp != ' ' && *cp != '0')
X			return 1;
X		++cp;
X	}
X	return 0;
X}
X
X
X/*
X * NAME
X *	str_field - extract a field from a string
X *
X * SYNOPSIS
X *	string_ty *str_field(string_ty *, char separator, int field_number);
X *
X * DESCRIPTION
X *	The str_field functipon is used to erxtract a field from a string.
X *	Fields of the string are separated by ``separator'' characters.
X *	Fields are numbered from 0.
X *
X * RETURNS
X *	Asking for a field off the end of the string will result in a null
X *	pointer return.  The null string is considered to have one empty field.
X */
X
Xstring_ty *
Xstr_field(s, sep, fldnum)
X	string_ty	*s;
X	int		sep;
X	int		fldnum;
X{
X	char		*cp;
X	char		*ep;
X
X	cp = s->str_text;
X	while (fldnum > 0)
X	{
X		ep = strchr(cp, sep);
X		if (!ep)
X			return 0;
X		cp = ep + 1;
X		--fldnum;
X	}
X	ep = strchr(cp, sep);
X	if (ep)
X		return str_n_from_c(cp, ep - cp);
X	return str_from_c(cp);
X}
X
X
X/*
X * NAME
X *	str_format - analog of sprintf
X *
X * SYNOPSIS
X *	string_ty *str_format(char *, ...);
X *
X * DESCRIPTION
X *	The str_format function is used to create new strings
X *	using a format specification similar to printf(3).
X *	The "%S" specifier is used to mean a ``string_ty *'' string.
X *
X * RETURNS
X *	string_ty * - a pointer to a string in dynamic memory.  Use str_free when
X *	finished with.
X */
X
X
Xstring_ty *
Xstr_format(fmt sva_last)
X	char		*fmt;
X	sva_last_decl
X{
X	va_list		ap;
X	string_ty	*result;
X
X	sva_init(ap, fmt);
X	result = vmprintfes(fmt, ap);
X	va_end(ap);
X	return result;
X}
X
X
Xstring_ty *
Xstr_vformat(fmt, ap)
X	char		*fmt;
X	va_list		ap;
X{
X	return vmprintfes(fmt, ap);
X}
X
X
Xstring_ty *
Xstr_substitute(a, b, c)
X	string_ty	*a;
X	string_ty	*b;
X	string_ty	*c;
X{
X	char		*cp;
X	char		*ep;
X	static char	*buf;
X	static size_t	buf_max;
X	size_t		len;
X
X	cp = c->str_text;
X	ep = cp + c->str_length;
X	len = 0;
X	while (cp < ep)
X	{
X		if (memcmp(a->str_text, cp, a->str_length))
X		{
X			if (len >= buf_max)
X			{
X				buf_max = buf_max * 2 + 16;
X				buf = mem_change_size(buf, buf_max);
X			}
X			buf[len++] = *cp++;
X		}
X		else
X		{
X			while (len + b->str_length > buf_max)
X			{
X				buf_max = buf_max * 2 + 16;
X				buf = mem_change_size(buf, buf_max);
X			}
X			memcpy(buf + len, b->str_text, b->str_length);
X			len += b->str_length;
X			cp += a->str_length;
X		}
X	}
X	return str_n_from_c(buf, len);
X}
END_OF_FILE
if test 15261 -ne `wc -c <'common/str.c'`; then
    echo shar: \"'common/str.c'\" unpacked with wrong size!
fi
# end of 'common/str.c'
fi
if test -f 'common/version.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'common/version.c'\"
else
echo shar: Extracting \"'common/version.c'\" \(17564 characters\)
sed "s/^X//" >'common/version.c' <<'END_OF_FILE'
X/*
X *	cook - a program construction tool
X *	Copyright (C) 1991, 1992, 1993, 1994 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: functions to provide common -VERSion behaviour
X */
X
X#include <stdio.h>
X#include <ac/stdlib.h>
X
X#include <arglex.h>
X#include <error.h>
X#include <help.h>
X#include <str.h>
X#include <version.h>
X
X
Xstatic void version_copyright _((void));
X
Xstatic void
Xversion_copyright()
X{
X	static char *text[] =
X	{
X		".so cr",
X	};
X	help(text, SIZEOF(text), (void (*)_((void)))0);
X}
X
X
Xstatic void version_redistribution _((void));
X
Xstatic void
Xversion_redistribution()
X{
X	static char *text[] =
X	{
X".sp",
X"GNU GENERAL PUBLIC LICENSE",
X".br",
X"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION",
X".IP",
X"0. This License applies to any program or other work which contains",
X"a notice placed by the copyright holder saying it may be distributed",
X"under the terms of this General Public License.  The \"Program\", below,",
X"refers to any such program or work, and a \"work based on the Program\"",
X"means either the Program or any derivative work under copyright law:",
X"that is to say, a work containing the Program or a portion of it,",
X"either verbatim or with modifications and/or translated into another",
X"language.  (Hereinafter, translation is included without limitation in",
X"the term \"modification\".)  Each licensee is addressed as \"you\".",
X"",
X"Activities other than copying, distribution and modification are not",
X"covered by this License; they are outside its scope.  The act of",
X"running the Program is not restricted, and the output from the Program",
X"is covered only if its contents constitute a work based on the",
X"Program (independent of having been made by running the Program).",
X"Whether that is true depends on what the Program does.",
X".IP",
X"1. You may copy and distribute verbatim copies of the Program's",
X"source code as you receive it, in any medium, provided that you",
X"conspicuously and appropriately publish on each copy an appropriate",
X"copyright notice and disclaimer of warranty; keep intact all the",
X"notices that refer to this License and to the absence of any warranty;",
X"and give any other recipients of the Program a copy of this License",
X"along with the Program.",
X"",
X"You may charge a fee for the physical act of transferring a copy, and",
X"you may at your option offer warranty protection in exchange for a fee.",
X".IP",
X"2. You may modify your copy or copies of the Program or any portion",
X"of it, thus forming a work based on the Program, and copy and",
X"distribute such modifications or work under the terms of Section 1",
X"above, provided that you also meet all of these conditions:",
X"",
X".in +4n",
X"a) You must cause the modified files to carry prominent notices",
X"stating that you changed the files and the date of any change.",
X"",
X"b) You must cause any work that you distribute or publish, that in",
X"whole or in part contains or is derived from the Program or any",
X"part thereof, to be licensed as a whole at no charge to all third",
X"parties under the terms of this License.",
X"",
X"c) If the modified program normally reads commands interactively",
X"when run, you must cause it, when started running for such",
X"interactive use in the most ordinary way, to print or display an",
X"announcement including an appropriate copyright notice and a",
X"notice that there is no warranty (or else, saying that you provide",
X"a warranty) and that users may redistribute the program under",
X"these conditions, and telling the user how to view a copy of this",
X"License.  (Exception: if the Program itself is interactive but",
X"does not normally print such an announcement, your work based on",
X"the Program is not required to print an announcement.)",
X".in -4n",
X"",
X"These requirements apply to the modified work as a whole.  If",
X"identifiable sections of that work are not derived from the Program,",
X"and can be reasonably considered independent and separate works in",
X"themselves, then this License, and its terms, do not apply to those",
X"sections when you distribute them as separate works.  But when you",
X"distribute the same sections as part of a whole which is a work based",
X"on the Program, the distribution of the whole must be on the terms of",
X"this License, whose permissions for other licensees extend to the",
X"entire whole, and thus to each and every part regardless of who wrote it.",
X"",
X"Thus, it is not the intent of this section to claim rights or contest",
X"your rights to work written entirely by you; rather, the intent is to",
X"exercise the right to control the distribution of derivative or",
X"collective works based on the Program.",
X"",
X"In addition, mere aggregation of another work not based on the Program",
X"with the Program (or with a work based on the Program) on a volume of",
X"a storage or distribution medium does not bring the other work under",
X"the scope of this License.",
X".IP",
X"3. You may copy and distribute the Program (or a work based on it,",
X"under Section 2) in object code or executable form under the terms of",
X"Sections 1 and 2 above provided that you also do one of the following:",
X"",
X".in +4n",
X"a) Accompany it with the complete corresponding machine-readable",
X"source code, which must be distributed under the terms of Sections",
X"1 and 2 above on a medium customarily used for software interchange; or,",
X"",
X"b) Accompany it with a written offer, valid for at least three",
X"years, to give any third party, for a charge no more than your",
X"cost of physically performing source distribution, a complete",
X"machine-readable copy of the corresponding source code, to be",
X"distributed under the terms of Sections 1 and 2 above on a medium",
X"customarily used for software interchange; or,",
X"",
X"c) Accompany it with the information you received as to the offer",
X"to distribute corresponding source code.  (This alternative is",
X"allowed only for noncommercial distribution and only if you",
X"received the program in object code or executable form with such",
X"an offer, in accord with Subsection b above.)",
X".in -4n",
X"",
X"The source code for a work means the preferred form of the work for",
X"making modifications to it.  For an executable work, complete source",
X"code means all the source code for all modules it contains, plus any",
X"associated interface definition files, plus the scripts used to",
X"control compilation and installation of the executable.  However, as a",
X"special exception, the source code distributed need not include",
X"anything that is normally distributed (in either source or binary",
X"form) with the major components (compiler, kernel, and so on) of the",
X"operating system on which the executable runs, unless that component",
X"itself accompanies the executable.",
X"",
X"If distribution of executable or object code is made by offering",
X"access to copy from a designated place, then offering equivalent",
X"access to copy the source code from the same place counts as",
X"distribution of the source code, even though third parties are not",
X"compelled to copy the source along with the object code.",
X".IP",
X"4. You may not copy, modify, sublicense, or distribute the Program",
X"except as expressly provided under this License.  Any attempt",
X"otherwise to copy, modify, sublicense or distribute the Program is",
X"void, and will automatically terminate your rights under this License.",
X"However, parties who have received copies, or rights, from you under",
X"this License will not have their licenses terminated so long as such",
X"parties remain in full compliance.",
X".IP",
X"5. You are not required to accept this License, since you have not",
X"signed it.  However, nothing else grants you permission to modify or",
X"distribute the Program or its derivative works.  These actions are",
X"prohibited by law if you do not accept this License.  Therefore, by",
X"modifying or distributing the Program (or any work based on the",
X"Program), you indicate your acceptance of this License to do so, and",
X"all its terms and conditions for copying, distributing or modifying",
X"the Program or works based on it.",
X".IP",
X"6. Each time you redistribute the Program (or any work based on the",
X"Program), the recipient automatically receives a license from the",
X"original licensor to copy, distribute or modify the Program subject to",
X"these terms and conditions.  You may not impose any further",
X"restrictions on the recipients' exercise of the rights granted herein.",
X"You are not responsible for enforcing compliance by third parties to",
X"this License.",
X".IP",
X"7. If, as a consequence of a court judgment or allegation of patent",
X"infringement or for any other reason (not limited to patent issues),",
X"conditions are imposed on you (whether by court order, agreement or",
X"otherwise) that contradict the conditions of this License, they do not",
X"excuse you from the conditions of this License.  If you cannot",
X"distribute so as to satisfy simultaneously your obligations under this",
X"License and any other pertinent obligations, then as a consequence you",
X"may not distribute the Program at all.  For example, if a patent",
X"license would not permit royalty-free redistribution of the Program by",
X"all those who receive copies directly or indirectly through you, then",
X"the only way you could satisfy both it and this License would be to",
X"refrain entirely from distribution of the Program.",
X"",
X"If any portion of this section is held invalid or unenforceable under",
X"any particular circumstance, the balance of the section is intended to",
X"apply and the section as a whole is intended to apply in other",
X"circumstances.",
X"",
X"It is not the purpose of this section to induce you to infringe any",
X"patents or other property right claims or to contest validity of any",
X"such claims; this section has the sole purpose of protecting the",
X"integrity of the free software distribution system, which is",
X"implemented by public license practices.  Many people have made",
X"generous contributions to the wide range of software distributed",
X"through that system in reliance on consistent application of that",
X"system; it is up to the author/donor to decide if he or she is willing",
X"to distribute software through any other system and a licensee cannot",
X"impose that choice.",
X"",
X"This section is intended to make thoroughly clear what is believed to",
X"be a consequence of the rest of this License.",
X".IP",
X"8. If the distribution and/or use of the Program is restricted in",
X"certain countries either by patents or by copyrighted interfaces, the",
X"original copyright holder who places the Program under this License",
X"may add an explicit geographical distribution limitation excluding",
X"those countries, so that distribution is permitted only in or among",
X"countries not thus excluded.  In such case, this License incorporates",
X"the limitation as if written in the body of this License.",
X".IP",
X"9. The Free Software Foundation may publish revised and/or new versions",
X"of the General Public License from time to time.  Such new versions will",
X"be similar in spirit to the present version, but may differ in detail to",
X"address new problems or concerns.",
X"",
X"Each version is given a distinguishing version number.  If the Program",
X"specifies a version number of this License which applies to it and \"any",
X"later version\", you have the option of following the terms and conditions",
X"either of that version or of any later version published by the Free",
X"Software Foundation.  If the Program does not specify a version number of",
X"this License, you may choose any version ever published by the Free Software",
X"Foundation.",
X".IP",
X"10. If you wish to incorporate parts of the Program into other free",
X"programs whose distribution conditions are different, write to the author",
X"to ask for permission.  For software which is copyrighted by the Free",
X"Software Foundation, write to the Free Software Foundation; we sometimes",
X"make exceptions for this.  Our decision will be guided by the two goals",
X"of preserving the free status of all derivatives of our free software and",
X"of promoting the sharing and reuse of software generally.",
X	};
X	help(text, SIZEOF(text), (void (*)_((void)))0);
X}
X
X
Xstatic void version_warranty _((void));
X
Xstatic void
Xversion_warranty()
X{
X	static char *text[] =
X	{
X".sp",
X"NO WARRANTY",
X".IP",
X"11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY",
X"FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN",
X"OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES",
X"PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED",
X"OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF",
X"MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS",
X"TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE",
X"PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,",
X"REPAIR OR CORRECTION.",
X".IP",
X"12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING",
X"WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR",
X"REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,",
X"INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING",
X"OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED",
X"TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY",
X"YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER",
X"PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE",
X"POSSIBILITY OF SUCH DAMAGES.",
X	};
X
X	help(text, SIZEOF(text), (void (*)_((void)))0);
X}
X
X
Xstatic void version_usage _((void));
X
Xstatic void
Xversion_usage()
X{
X	fprintf(stderr, "usage: %s -VERSion [ <info-name> ]\n", progname);
X	fprintf(stderr, "       %s -VERSion -Help\n", progname);
X	exit(1);
X}
X
X
Xtypedef struct table_ty table_ty;
Xstruct table_ty
X{
X	char	*name;
X	void	(*func)_((void));
X};
X
X
Xstatic table_ty table[] =
X{
X	{ "Copyright",		version_copyright,	},
X	{ "Redistribution",	version_redistribution,	},
X	{ "Warranty",		version_warranty,	},
X};
X
X
Xstatic void version_main _((void));
X
Xstatic void
Xversion_main()
X{
X	void	(*func)_((void));
X
X	/* trace(("version_main()\n{\n"/ *}* /)); */
X	if (arglex_token == arglex_token_string)
X	{
X		int		nhit;
X		table_ty	*tp;
X		string_ty	*s1;
X		string_ty	*s2;
X		table_ty	*hit[SIZEOF(table)];
X		int		j;
X
X		nhit = 0;
X		for (tp = table; tp < ENDOF(table); ++tp)
X		{
X			if (arglex_compare(tp->name, arglex_value.alv_string))
X				hit[nhit++] = tp;
X		}
X		switch (nhit)
X		{
X		case 0:
X			fatal
X			(
X				"version information name \"%s\" unknown",
X				arglex_value.alv_string
X			);
X	
X		case 1:
X			break;
X	
X		default:
X			s1 = str_from_c(hit[0]->name);
X			for (j = 1; j < nhit; ++j)
X			{
X				s2 = str_format("%S, %s", s1, hit[j]->name);
X				str_free(s1);
X				s1 = s2;
X			}
X			fatal("version information name \"%s\" ambiguous (%s)", arglex_value.alv_string, s1->str_text);
X		}
X		arglex();
X		func = hit[0]->func;
X	}
X	else
X		func = version_copyright;
X	if (arglex_token != arglex_token_eoln)
X	{
X		error
X		(
X			"misplaced \"%s\" command line argument",
X			arglex_value.alv_string
X		);
X		version_usage();
X	}
X
X	func();
X	/* trace((/ *{* /"}\n")); */
X}
X
X
Xstatic void version_help _((void));
X
Xstatic void
Xversion_help()
X{
X	static char *text[] = 
X	{
X"NAME",
X"	%s -VERSion - give version information",
X"",
X"SYNOPSIS",
X"	%s -VERSion [ <info-name> ]",
X"	%s -VERSion -Help",
X"",
X"DESCRIPTION",
X"	The %s -VERSion command is used to give version",
X"	information and conditions of use.",
X"",
X"	There are a number of possible info-names, as follow",
X"	(abbreviations as for command line options):",
X"",
X"	Copyright",
X"		The copyright notice for the %s program.  Version",
X"		information will also be printed.",
X"		This is the default.",
X"",
X"	Redistribution",
X"		Print the conditions of use and redistribution.",
X"",
X"	Warranty",
X"		Print the limited warranty.",
X"",
X"OPTIONS",
X"	The following options are understood:",
X"",
X"	-Help",
X"		This option may be used to obtain more",
X"		information about how to use the %s program.",
X"",
X"	All options are case insensitive.  Options may be",
X"	abbreviated; the abbreviation is the upper case letters.",
X"	Options and other command line arguments may be mixed",
X"	arbitrarily on the command line.",
X"",
X"ERRORS",
X"	It is an error if the info-name given is unknown.",
X"",
X"EXIT STATUS",
X"	The %s command will exit with a status of 1 on any",
X"	error.	The %s command will only exit with a status of",
X"	0 if there are no errors.",
X"",
X"COPYRIGHT",
X"	%C",
X"",
X"AUTHOR",
X"	%A",
X	};
X
X	help(text, SIZEOF(text), version_usage);
X}
X
X
Xvoid
Xversion()
X{
X	/* trace(("version()\n{\n"/ *}* /)); */
X	switch (arglex())
X	{
X	default:
X		version_main();
X		break;
X
X	case arglex_token_help:
X		version_help();
X		break;
X	}
X	/* trace((/ *{* /"}\n")); */
X}
END_OF_FILE
if test 17564 -ne `wc -c <'common/version.c'`; then
    echo shar: \"'common/version.c'\" unpacked with wrong size!
fi
# end of 'common/version.c'
fi
if test -f 'cook/hashline.y' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'cook/hashline.y'\"
else
echo shar: Extracting \"'cook/hashline.y'\" \(15201 characters\)
sed "s/^X//" >'cook/hashline.y' <<'END_OF_FILE'
X/*
X *	cook - file construction tool
X *	Copyright (C) 1991, 1992, 1993, 1994 Peter Miller.
X *	All rights reserved.
X *
X *	This program is free software; you can redistribute it and/or modify
X *	it under the terms of the GNU General Public License as published by
X *	the Free Software Foundation; either version 2 of the License, or
X *	(at your option) any later version.
X *
X *	This program is distributed in the hope that it will be useful,
X *	but WITHOUT ANY WARRANTY; without even the implied warranty of
X *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *	GNU General Public License for more details.
X *
X *	You should have received a copy of the GNU General Public License
X *	along with this program; if not, write to the Free Software
X *	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X *
X * MANIFEST: functions to parse #directive lines in cookbooks
X #
X * The hashline.y and parse.y parsers share the same lexer.
X * This means using the classic sed hack for yacc output.
X * Note that the expression grammars must be as similar as possible
X * in the two grammars.
X *
X * The state table in the condition frames is very simple:
X *	state 0: before #if
X *	state 1: after #if (and variants)
X *	state 2: after #elif
X *	state 3: after #else
X *	state 0: after #endif
X */
X
X%{
X
X#include <stdio.h>
X#include <ac/stddef.h>
X#include <ac/string.h>
X#include <ac/time.h>
X#include <ac/stdlib.h>
X
X#include <cook.h>
X#include <error.h>
X#include <expr.h>
X#include <hashline.h>
X#include <lex.h>
X#include <mem.h>
X#include <option.h>
X#include <os.h>
X#include <trace.h>
X#include <word.h>
X
X
Xstatic wlist done_once;
X
X
Xtypedef struct cond cond;
Xstruct cond
X{
X	int	pass;
X	int	state;
X	cond	*next;
X};
X
Xstatic	cond	*stack;
Xstatic	cond	*cond_free_list;
X
X#ifdef DEBUG
X#define YYDEBUG 1
X#define printf trace_where(__FILE__, __LINE__), lex_trace
Xextern int yydebug;
X#endif
X
X
X#define yyerror lex_error
X
X
X/*
X * NAME
X *	open_include - open an include file
X *
X * SYNOPSIS
X *	void open_include(string_ty *filename);
X *
X * DESCRIPTION
X *	The open_include function is used to search for a given file name in
X *	the include path and lex_open it when found.
X *
X * RETURNS
X *	void
X */
X
Xstatic void open_include_once _((string_ty *));
X
Xstatic void
Xopen_include_once(filename)
X	string_ty	*filename;
X{
X	if (!wl_member(&done_once, filename))
X		lex_open_include(filename);
X}
X
X
Xvoid
Xhashline_reset()
X{
X	wl_free(&done_once);
X}
X
X
Xstatic void open_include _((string_ty *, int));
X
Xstatic void
Xopen_include(filename, local)
X	string_ty	*filename;
X	int		local;
X{
X	int		j;
X	string_ty	*path;
X
X	trace(("open_include(filename = %08lX, local = %d) entry",
X		filename, local));
X	trace_string(filename->str_text);
X	if (filename->str_text[0] != '/')
X	{
X		if (local)
X		{
X			string_ty	*s;
X
X			s = lex_cur_file();
X			if (strchr(s->str_text, '/'))
X			{
X				s = os_dirname(s);
X				if (!s)
X				{
X					bomb:
X					yyerror("unable to construct include file name");
X					goto ret;
X				}
X				path = str_format("%S/%S", s, filename);
X				str_free(s);
X			}
X			else
X				path = str_copy(filename);
X			switch (os_exists(path))
X			{
X			case -1:
X				str_free(path);
X				goto bomb;
X
X			case 1:
X				open_include_once(path);
X				str_free(path);
X				goto ret;
X			}
X			str_free(path);
X		}
X		for (j = 0; j < option.o_search_path.wl_nwords; ++j)
X		{
X			path = str_format("%S/%S", option.o_search_path.wl_word[j], filename);
X			switch (os_exists(path))
X			{
X			case -1:
X				str_free(path);
X				goto bomb;
X
X			case 1:
X				open_include_once(path);
X				str_free(path);
X				goto ret;
X			}
X			str_free(path);
X		}
X	}
X	open_include_once(filename);
X	ret:
X	trace((/*{*/"}\n"));
X}
X
X
X/*
X * NAME
X *	hashline - the # control line processor
X *
X * SYNOPSIS
X *	void hashline(void);
X *
X * DESCRIPTION
X *	The hashline function is used to process # control lines.
X *
X * RETURNS
X *	void
X */
X
Xvoid
Xhashline()
X{
X	int yyparse _((void)); /* forward */
X
X	trace(("hashline()\n{\n"/*}*/));
X#if YYDEBUG
X	yydebug = trace_pretest_;
X#endif
X	yyparse();
X	trace((/*{*/"}\n"));
X}
X
X
X/*
X * NAME
X *	cond_alloc - allocate a condition structure
X *
X * SYNOPSIS
X *	cond *cond_alloc(void);
X *
X * DESCRIPTION
X *	The cond_alloc function is used to allocate a condition structure
X *	from dynamic memory.
X *
X * RETURNS
X *	cond * - pointer to condition structure.
X *
X * CAVEAT
X *	A free list is maintained to avoid malloc overheads.
X */
X
Xstatic cond *cond_alloc _((void));
X
Xstatic cond *
Xcond_alloc()
X{
X	cond		*c;
X
X	if (cond_free_list)
X	{
X		c = cond_free_list;
X		cond_free_list = c->next;
X	}
X	else
X		c = (cond *)mem_alloc(sizeof(cond));
X	return c;
X}
X
X
X/*
X * NAME
X *	cond_free - free condition structure
X *
X * SYNOPSIS
X *	void cond_free(cond*);
X *
X * DESCRIPTION
X *	The cond_free function is used to indicate that a condition structure
X *	is finished with.
X *
X * RETURNS
X *	void
X *
X * CAVEAT
X *	A free list is maintained to avoid malloc overheads.
X */
X
Xstatic void cond_free _((cond *));
X
Xstatic void
Xcond_free(c)
X	cond		*c;
X{
X	c->next = cond_free_list;
X	cond_free_list = c;
X}
X 
X
X/*
X * NAME
X *	hash_include - process #include directive
X *
X * SYNOPSIS
X *	void hash_include(expr *filename);
X *
X * DESCRIPTION
X *	The hash_include function is used to process #include directives.
X *
X * RETURNS
X *	void
X */
X
Xstatic void hash_include _((expr *));
X
Xstatic void
Xhash_include(ep)
X	expr		*ep;
X{
X	wlist		result;
X	string_ty	*s;
X
X	if (stack && !stack->pass)
X		return;
X	wl_zero(&result);
X	if (expr_eval(&result, ep))
X	{
X		wl_free(&result);
X		hashline_error("include file name evaluation failed");
X		return;
X	}
X	switch (result.wl_nwords)
X	{
X	case 0:
X		yyerror("expression produces no file name to include");
X		break;
X
X	case 1:
X		s = result.wl_word[0];
X		if
X		(
X			s->str_length > 2
X		&&
X			s->str_text[0] == '<'
X		&&
X			s->str_text[s->str_length - 1] == '>'
X		)
X		{
X			s = str_n_from_c(s->str_text + 1, s->str_length - 2);
X			open_include(s, 0);
X			str_free(s);
X		}
X		else
X		{
X			if (s->str_length)
X				open_include(s, 1);
X			else
X				yyerror("expression produces null file name to include");
X		}
X		break;
X
X	default:
X		yyerror("expression produces more than one file name to include");
X		break;
X	}
X	wl_free(&result);
X}
X 
X
X/*
X * NAME
X *	hash_include - process #include-cooked directive
X *
X * SYNOPSIS
X *	void hash_include_cooked(elist *filename);
X *
X * DESCRIPTION
X *	The hash_include_cooked function is used to
X *	process #include-cooked directives.
X *
X * RETURNS
X *	void
X */
X
Xstatic void hash_include_cooked _((elist *, int));
X
Xstatic void
Xhash_include_cooked(elp, warn)
X	elist		*elp;
X	int		warn;
X{
X	wlist		result;
X	string_ty	*s;
X	long		j;
X	wlist		actual;
X	long		nerr;
X
X	/*
X	 * if conditional is false, don't do
X	 */
X	if (stack && !stack->pass)
X		return;
X
X	/*
X	 * turn the expressions into words
X	 */
X	wl_zero(&result);
X	for (j = 0; j < elp->el_nexprs; ++j)
X	{
X		if (expr_eval(&result, elp->el_expr[j]))
X		{
X			wl_free(&result);
X			hashline_error("include file name evaluation failed");
X			return;
X		}
X	}
X
X	/*
X	 * make sure we like the words they used
X	 */
X	nerr = 0;
X	for (j = 0; j < result.wl_nwords; ++j)
X	{
X		s = result.wl_word[j];
X		if
X		(
X			s->str_length > 2
X		&&
X			s->str_text[0] == '<'
X		&&
X			s->str_text[s->str_length - 1] == '>'
X		)
X		{
X			yyerror("may not use angle brackets with #include-cooked");
X			++nerr;
X		}
X		else if (!s->str_length)
X		{
X			yyerror("expression produces null file name to include");
X			++nerr;
X		}
X	}
X	if (nerr)
X	{
X		wl_free(&result);
X		return;
X	}
X
X	/*
X	 * append to the auto-cook list
X	 *
X	 * If any of the auto-cook list are out-of-date,
X	 * they are recooked, and then cook starts over.
X	 */
X	cook_auto(&result);
X
X	/*
X	 * resolve the words into paths
X	 */
X	wl_zero(&actual);
X	cook_mtime_resolve(&actual, &result, 0);
X	wl_free(&result);
X
X	/*
X	 * include the resolved paths,
X	 * warning if they do not exist
X	 * (they will later, hopefully)
X	 */
X	for (j = 0; j < actual.wl_nwords; ++j)
X	{
X		s = actual.wl_word[j];
X		if (os_exists(s))
X			open_include_once(s);
X		else if (warn)
X		{
X			lex_warning
X			(
X				"include cooked \"%s\": file not found",
X				s->str_text
X			);
X		}
X	}
X	wl_free(&actual);
X}
X
X
X/*
X * NAME
X *	hash_if - process #if directive
X *
X * SYNOPSIS
X *	void hash_if(expr *);
X *
X * DESCRIPTION
X *	The hash_if function is used to process #if directives.
X *
X * RETURNS
X *	void
X */
X
Xstatic void hash_if _((expr *));
X
Xstatic void
Xhash_if(ep)
X	expr		*ep;
X{
X	cond		*c;
X
X	trace(("hash_if(ep = %08lX)\n{\n"/*}*/, ep));
X	c = cond_alloc();
X	c->next = stack;
X	if (stack && !stack->pass)
X	{
X		c->pass = 0;
X		c->state = 1;
X		lex_passing(0);
X	}
X	else
X	{
X		switch (expr_eval_condition(ep))
X		{
X		case -1:
X			yyerror("condition evaluation failed");
X			/* fall through... */
X
X		case 0:
X			c->pass = 0;
X			c->state = 2;
X			lex_passing(0);
X			break;
X
X		default:
X			c->pass = 1;
X			c->state = 1;
X			lex_passing(1);
X			break;
X		}
X	}
X	stack = c;
X	trace((/*{*/"}\n"));
X}
X
X
X/*
X * NAME
X *	hash_ifdef - process #ifdef directive
X *
X * SYNOPSIS
X *	void hash_ifdef(expr*);
X *
X * DESCRIPTION
X *	The hash_ifdef function is used to process #ifdef directives.
X *
X * RETURNS
X *	void
X */
X
Xstatic void hash_ifdef _((expr *));
X
Xstatic void
Xhash_ifdef(ep)
X	expr		*ep;
X{
X	expr		*e1;
X	expr		*e2;
X
X	trace(("hash_ifdef(ep = %08lX)\n{\n"/*}*/, ep));
X	e1 = expr_alloc();
X	e1->e_op = OP_WORD;
X	e1->e_word = str_from_c("defined");
X	e2 = expr_alloc();
X	e2->e_op = OP_FUNC;
X	el_append(&e2->e_list, e1);
X	el_append(&e2->e_list, ep);
X	expr_free(e1);
X	hash_if(e2);
X	expr_free(e2);
X	trace((/*{*/"}\n"));
X}
X
X
X/*
X * NAME
X *	hash_ifndef - process #ifndef directives
X *
X * SYNOPSIS
X *	void hash_ifndef(expr *);
X *
X * DESCRIPTION
X *	The hash_ifndef function is used to process #ifndef directives.
X *
X * RETURNS
X *	void
X */
X
Xstatic void hash_ifndef _((expr *));
X
Xstatic void
Xhash_ifndef(ep)
X	expr		*ep;
X{
X	expr		*e1;
X	expr		*e2;
X	expr		*e3;
X
X	trace(("hash_ifndef(ep = %08lX)\n{\n"/*}*/, ep));
X	e1 = expr_alloc();
X	e1->e_op = OP_WORD;
X	e1->e_word = str_from_c("defined");
X	e2 = expr_alloc();
X	e2->e_op = OP_FUNC;
X	el_append(&e2->e_list, e1);
X	el_append(&e2->e_list, ep);
X	expr_free(e1);
X
X	e1 = expr_alloc();
X	e1->e_op = OP_WORD;
X	e1->e_word = str_from_c("not");
X	e3 = expr_alloc();
X	e3->e_op = OP_FUNC;
X	el_append(&e3->e_list, e1);
X	el_append(&e3->e_list, e2);
X	expr_free(e1);
X	expr_free(e2);
X
X	hash_if(e3);
X	expr_free(e3);
X	trace((/*{*/"}\n"));
X}
X
X
X/*
X * NAME
X *	hash_elif - process #elif directive
X *
X * SYNOPSIS
X *	void hash_elif(expr*);
X *
X * DESCRIPTION
X *	The hash_elif function is used to provess #elif directives.
X *
X * RETURNS
X *	void
X */
X
Xstatic void hash_elif _((expr *));
X
Xstatic void
Xhash_elif(ep)
X	expr		*ep;
X{
X	trace(("hash_elif(ep = %08lX)\n{\n"/*}*/, ep));
X	if (!stack)
X		yyerror("#elif without matching #if");
X	else
X	{
X		switch (stack->state)
X		{
X		case 1:
X			stack->pass = 0;
X			stack->state = 1;
X			lex_passing(0);
X			break;
X
X		case 2:
X			switch (expr_eval_condition(ep))
X			{
X			case -1:
X				yyerror("condition evaluation failed");
X				/* fall through... */
X
X			case 0:
X				stack->pass = 0;
X				stack->state = 2;
X				lex_passing(0);
X				break;
X
X			default:
X				stack->pass = 1;
X				stack->state = 1;
X				lex_passing(1);
X				break;
X			}
X			break;
X
X		case 3:
X			stack->pass = 0;
X			stack->state = 3;
X			yyerror("#elif after #else");
X			lex_passing(0);
X			break;
X		}
X	}
X	trace((/*{*/"}\n"));
X}
X
X
X/*
X * NAME
X *	hash_else - process #else directive
X *
X * SYNOPSIS
X *	void hash_else(void);
X *
X * DESCRIPTION
X *	The hash_else function is used to process #else directives.
X *
X * RETURNS
X *	void
X */
X
Xstatic void hash_else _((void));
X
Xstatic void
Xhash_else()
X{
X	trace(("hash_else()\n{\n"/*}*/));
X	if (!stack)
X		yyerror("#else without matching #if");
X	else
X	{
X		switch (stack->state)
X		{
X		case 1:
X			stack->pass = 0;
X			stack->state = 3;
X			lex_passing(0);
X			break;
X
X		case 2:
X			stack->pass = 1;
X			stack->state = 3;
X			lex_passing(1);
X			break;
X
X		case 3:
X			stack->pass = 0;
X			stack->state = 3;
X			yyerror("#else after #else");
X			lex_passing(0);
X			break;
X		}
X	}
X	trace((/*{*/"}\n"));
X}
X
X
X/*
X * NAME
X *	hash_endif - process #endif directive
X *
X * SYNOPSIS
X *	void hash_endif(void);
X *
X * DESCRIPTION
X *	The hash_endif function is used to process #endif directives.
X *
X * RETURNS
X *	void
X */
X
Xstatic void hash_endif _((void));
X
Xstatic void
Xhash_endif()
X{
X	trace(("hash_endif()\n{\n"/*}*/));
X	if (!stack)
X		yyerror("#endif without matching #if");
X	else
X	{
X		cond	*c;
X
X		c = stack;
X		stack = c->next;
X		cond_free(c);
X		lex_passing(stack ? stack->pass : 1);
X	}
X	trace((/*{*/"}\n"));
X}
X
X
X/*
X * NAME
X *	hash_pragma - process #pragma directive
X *
X * SYNOPSIS
X *	void hash_pragma(elist *elp);
X *
X * DESCRIPTION
X *	The hash_pragma function is used to process #pragma directives.
X *
X * RETURNS
X *	void
X */
X
Xstatic void hash_pragma _((elist *));
X
Xstatic void
Xhash_pragma(elp)
X	elist		*elp;
X{
X	static string_ty	*once;
X
X	trace(("hash_if(elp = %08lX)\n{\n"/*}*/, elp));
X	if (stack && !stack->pass)
X		goto ret;
X
X	/*
X	 * see if it was "#pragma once"
X	 */
X	if (!once)
X		once = str_from_c("once");
X	if
X	(
X		elp->el_nexprs == 1
X	&&
X		elp->el_expr[0]->e_op == OP_WORD
X	&&
X		str_equal(elp->el_expr[0]->e_word, once)
X	)
X	{
X		wl_append_unique(&done_once, lex_cur_file());
X		goto ret;
X	}
X
X	/*
X	 * add more pragma's here
X	 */
X
X	ret:
X	trace((/*{*/"}\n"));
X}
X
X%}
X
X/*
X * this list must be IDENTICAL to the list in parse.y
X */
X%token	CATENATE
X%token	COLON
X%token	DATA
X%token	DATAEND
X%token	ELSE
X%token	EQUALS
X%token	FAIL
X%token	IF
X%token	LBRACE
X%token	LBRAK
X%token	LOOP
X%token	LOOPSTOP
X%token	RBRACE
X%token	RBRAK
X%token	SEMICOLON
X%token	SET
X%token	THEN
X%token	UNSETENV
X%token	WORD
X
X/*
X * this list must not appear in parse.y
X */
X%token	HASH_ELIF
X%token	HASH_ELSE
X%token	HASH_ENDIF
X%token	HASH_IF
X%token	HASH_IFDEF
X%token	HASH_IFNDEF
X%token	HASH_INCLUDE
X%token	HASH_INCLUDE_COOKED
X%token	HASH_INCLUDE_COOKED2
X%token	HASH_PRAGMA
X
X%left	CATENATE
X%right	ELSE
X
X%union
X{
X	expr		*lv_expr;
X	elist		lv_elist;
X	string_ty	*lv_word;
X}
X
X%type	<lv_elist>	elist
X%type	<lv_word>	WORD
X%type	<lv_expr>	expr
X
X%%
X
X/*
X * note that the grammar accepts a single line.
X * this means that 0 (end-of-input) must be sent on end-of-line.
X */
X
Xhashline
X	: HASH_INCLUDE expr
X		{
X			hash_include($2);
X			expr_free($2);
X		}
X	| HASH_INCLUDE_COOKED elist
X		{
X			hash_include_cooked(&$2, 1);
X			el_free(&$2);
X		}
X	| HASH_INCLUDE_COOKED2 elist
X		{
X			hash_include_cooked(&$2, 0);
X			el_free(&$2);
X		}
X	| HASH_IF expr
X		{
X			hash_if($2);
X			expr_free($2);
X		}
X	| HASH_IFDEF expr
X		{
X			hash_ifdef($2);
X			expr_free($2);
X		}
X	| HASH_IFNDEF expr
X		{
X			hash_ifndef($2);
X			expr_free($2);
X		}
X	| HASH_ELIF expr 
X		{
X			hash_elif($2);
X			expr_free($2);
X		}
X	| HASH_ELSE 
X		{
X			hash_else();
X		}
X	| HASH_ENDIF 
X		{
X			hash_endif();
X		}
X	| HASH_PRAGMA elist 
X		{
X			hash_pragma(&$2);
X			el_free(&$2);
X		}
X	| error 
X	;
X
X/*
X * this expression form is the same as in parse.y
X * except that the lbrak processing is not necessary.
X */
X
Xexpr
X	: WORD
X		{
X			$$ = expr_alloc();
X			$$->e_op = OP_WORD;
X			$$->e_word = $1;
X			$1 = 0;
X		}
X	| LBRAK elist RBRAK
X		{
X			$$ = expr_alloc();
X			$$->e_op = OP_FUNC;
X			$$->e_list = $2;
X		}
X	| expr CATENATE expr
X		{
X			$$ = expr_alloc();
X			$$->e_op = OP_CAT;
X			$$->e_left = $1;
X			$$->e_right = $3;
X		}
X	;
X
Xelist
X	: expr
X		{
X			el_zero(&$$);
X			el_append(&$$, $1);
X			expr_free($1);
X		}
X	| elist expr
X		{
X			$$ = $1;
X			el_append(&$$, $2);
X			expr_free($2);
X		}
X	;
END_OF_FILE
if test 15201 -ne `wc -c <'cook/hashline.y'`; then
    echo shar: \"'cook/hashline.y'\" unpacked with wrong size!
fi
# end of 'cook/hashline.y'
fi
echo shar: End of archive 12 \(of 19\).
cp /dev/null ark12isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 19 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
