Newsgroups: comp.sources.unix
From: mark@acpub.duke.edu (Mark Livingston)
Subject: v28i043: xtree - an ls-like tool, similar to DOS's vtree, Part01/01
Message-id: <1.770288029.8320@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: mark@acpub.duke.edu (Mark Livingston)
Posting-Number: Volume 28, Issue 43
Archive-Name: xtree/part01

I wrote this as a utility program, though there are similar but more
sophisticated programs.  xtree displays a graphical tree of your directory
structure, from the current directory down.  The documentation is brief, and
is at the top of the file xtree.c.

Mark

#! /bin/sh
# This is a shell archive.  Remove anything before the previous line, then
# unpack it by saving it into a file and typing "sh file".  To overwrite
# existing files, type "sh file -c".  You can also feed this as standard input
# via unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#               "End of archive."
# Contents: README Makefile xtree.c table.c xtree.h sample.output
if test -f 'README' -a "${1}" != "-c" ; then
    echo shar: Will not clobber existing file \"'README'\"
else
    echo shar: Extracting \"'README'\"
    sed "s/^X//" >'README' <<'END_OF_FILE'
Xxtree - graphical directory tree
X
XThis utility provides a simple graphical tree of your directory structure,
Xusing xterm escape sequences to access alternate character sets for generating
Xthe tree characters.  The graphics are not terribly impressive, so if you want
Xto strip out the characters and replace them, you probably don't need to be
Xusing an xterm for your terminal set-up.
X
XI modeled the program after two things: first is DOS's vtree program (and
Xother similar programs) that generate a graphical directory tree.  The second
Xis the Unix utility ls, from which I copied several of the options.
X
XI don't know if anyone will find this useful, but I wrote it to play around
Xwith the directory functions, and this is what I ended up with.  I have
Xactually found it useful for searching for files that are buried within a
Xdeep directory structure for a large project, so maybe it does have merits
Xother than cuteness.
X
XI have run this program on:  DECstations 2100, 3100, and 5000
X                             Sun Sparcstations
X                             IBM RS/6000
X
XUsage
X        xtree [options] <dir-list>
X
X        options:
X                  -a | -A   list "hidden" files as well, like 'ls -A,'
X                            . and .. are never listed in subdirectories, but
X                            they are legal in <dir-list>.
X
X                  -F        use the trailers to indicate file type, identical
X                            to ls (/ directory, * executable, @ symbolic link,
X                            = socket)
X
X                  -L        follow symbolic links as if they were hard
X
X                  -d [n]    limit the depth of traversal to n, 1 by default
X                            I must say that 'xtree -d' with no n is NOT
X                            interesting, but then again neither is 'ls -d'
X
X                  -e        interpret all following arguments as <dir-list>,
X                            for directories that begin with '-'
X
X        <dir-list>:
X                  the directory list can be empty, and '.' (current directory)
X                  is the default.  Directories other than subdirectories of
X                  the current directory can be given.
X
XBugs
X     None that are known.
X
X     The only thing is that the escape sequences are specific to xterm,
X     supposedly, which limits the program's usefulness.  They could easily be
X     removed, however.
X
X     They also mean that the output of this program is only useful for viewing
X     on screen, and only by programs that will interpret the escape sequences.
X     Shells, more, and cat with no options are all fine.
X
X     If you care to see the actual characters, or read through the source
X     code, use 'cat -v' or emacs or vi.
X
XMark Livingston
XDuke University '93
Xmark@acpub.duke.edu
X
END_OF_FILE
fi
if test -f 'Makefile' -a "${1}" != "-c" ; then
    echo shar: Will not clobber existing file \"'Makefile'\"
else
    echo shar: Extracting \"'Makefile'\"
    sed "s/^X//" > 'Makefile' << 'END_OF_FILE'
X# Makefile for xtree, Mark Livingston
X
XCC = cc
XCFLAGS = -g
XRM = /bin/rm
XRMFLAGS = -f
XOBJS = xtree.o table.o
XHDRS = xtree.h
XTESTDIR = Test
X
Xall : xtree
X
Xxtree: $(OBJS) $(HDRS)
X	$(CC) $(CFLAGS) $(OBJS) -o xtree
X	cp xtree $(TESTDIR)
X
X.c.o: $(HDRS)
X	$(CC) $(CFLAGS) -c $<
X
Xclean:
X	$(RM) $(RMFLAGS) *.o *~
X
END_OF_FILE
fi
if test -f 'xtree.c' -a "${1}" != "-c" ; then
    echo shar: Will not clobber existing file \"'xtree.c'\"
else
    echo shar: Extracting \"'xtree.c'\"
    sed "s/^X//" > 'xtree.c' << 'END_OF_FILE'
X/******************************************************************************
X *
X *  xtree - a graphical tree of your directories
X *
X *  Mark Livingston  -  mark@acpub.duke.edu -  Aug '92
X *
X *  USAGE
X *         xtree [ <dirname>+ ]
X *
X *  DESCRIPTION
X *         Gives a graphical tree of the given directory, with the default
X *         being the current directory.  Uses xterm escape codes to generate
X *         the tree characters.
X *
X *  OPTIONS
X *         I have tried to make them as similar to Unix's 'ls' as possible
X *
X *         -[aA]  -  show hidden ("dot") files, but it never shows . or ..
X *                   unless they are explicity given on the command line
X *
X *         -F     -  place a trailing '/' after directories, '@' after links,
X *                   '=' after sockets, and '*' after executables
X *
X *         -L     -  follow symbolic links as if they were hard links, by
X *                   default, it simply lists the link, a la ls
X *
X *         -d [n] -  instead of traverse down the directory structure as far
X *                   as it goes or until ABSMAX_DEPTH is reached, traverse
X *                   for n levels, or 1 if n is not given - however, I must
X *                   n = 1 is NOT real interesting.  Then again, neither is
X *                   'ls -d'
X *
X *         -e     -  interpret all following arguments as directory names
X *  NOTES
X *         so far works on Sun4, RS6000, DEC
X *
X *  BUGS
X *         - using xterm escape codes is neither pretty nor reliable
X *         - messes up the tree when the last thing in a given dir is
X *             a subdir
X *
X *****************************************************************************/
X
X#include <stdio.h>
X#include <dirent.h>
X#include <sys/types.h>
X#include <sys/stat.h>
X#include <errno.h>
X#include "xtree.h"
X
X#define INTERPRET(errno, fname) \
X  switch( (errno) ) \
X    { \
X      case EACCES: \
X        fprintf(stderr, "%s: %s: permission denied\n", Progname, (fname)); \
X        break; \
X      case ENOENT: \
X        fprintf(stderr, "%s: %s: no such file or directory\n", \
X                Progname, (fname)); \
X        break; \
X      case ENOTDIR: \
X        fprintf(stderr, "%s: %s: not a directory\n", Progname, (fname)); \
X        break; \
X    }
X                                       
Xint max_depth = MAX_DEPTH;
Xint islast[ABSMAX_DEPTH];
Xchar *Progname;
X
X#ifdef PROTOTYPE
Xvoid usage(void)
X#else
Xvoid usage()
X#endif /* PROTOTYPE */
X{
X    fprintf(stderr, "Usage: %s -[aAFL] [-d [depth]] [-e] [<dir-name>+]\n",
X            Progname);
X    exit(-1);
X}
X
X#ifdef PROTOTYPE
Xvoid xtree(char *name, int depth, int flags)
X#else
Xvoid xtree(name, depth, flags)
Xchar *name;
Xint depth, flags;
X#endif /* PROTOTYPE */
X{
X    int i, err, go_up;
X    char *last, *next, *c;
X    struct stat filestat;
X    DIR *mydir;
X    struct dirent *mydirent;
X
X    /* we know this won't fail, tested above */
X    mydir = opendir(name);
X
X    /*
X     *  read in all directory entries, add all names
X     *  that will be shown to the name table
X     */
X    while((mydirent = readdir(mydir)) != NULL)
X      if(strcmp(mydirent->d_name, ".") && strcmp(mydirent->d_name, ".."))
X        if(*mydirent->d_name != '.' || flags & SHOWALL)
X          addname(mydirent->d_name, depth);
X
X    if(closedir(mydir))
X      fprintf(stderr, "%s: couldn't close directory %s\n", Progname, name);
X
X    /* now change to this directory so that stat can use just the name */
X    if(chdir(name))
X      {
X        INTERPRET(errno, name)
X        return;
X      }
X
X    last = getname(depth);
X    while((next = getname(depth)) != NULL)
X      {
X        err = FALSE;
X        if(flags & GETLINK)
X          {
X            if(stat(last, &filestat))
X              {
X                INTERPRET(errno, name)
X                  err = TRUE;
X              }
X          }
X        else
X          if(lstat(last, &filestat))
X            {
X              INTERPRET(errno, name)
X              err = TRUE;
X            }
X
X        if(!err)
X          {
X            for(i = 0; i < depth - 1; i++)
X              printf("(0%c(B       ", (islast[i]) ? ' ' : 'x');
X            printf("(0%c(B       %s", 'x', last);
X
X            if(flags & TRAILER)
X              {
X                if(S_ISLNK(filestat.st_mode))
X                  printf("@");
X                else if(S_ISDIR(filestat.st_mode))
X                  printf("/");
X                else if(S_ISSOCK(filestat.st_mode))
X                  printf("=");
X                else if(filestat.st_mode & S_IXUSR)
X                  printf("*");
X              }
X
X            printf("\n");
X
X            if(S_ISDIR(filestat.st_mode) && depth < max_depth - 1)
X              xtree(last, depth + 1, flags);
X          }
X        free(last);
X        last = (char *) malloc(strlen(next) + 1);
X        strcpy(last, next);
X      }
X
X    err = FALSE;
X    if(last != NULL)
X      {
X        if(flags & GETLINK)
X          {
X            if(stat(last, &filestat))
X              {
X                INTERPRET(errno, name)
X                err = TRUE;
X              }
X          }
X        else
X          if(lstat(last, &filestat))
X            {
X              INTERPRET(errno, name)
X              err = TRUE;
X            }
X
X        if(!err)
X          {
X            for (i = 0; i < depth - 1; i++)
X              printf("(0%c(B       ", (islast[i]) ? ' ' : 'x');
X            printf("(0%c(B       ", 'm');
X            printf("%s", last);
X
X            if(flags & TRAILER)
X              {
X                if(S_ISLNK(filestat.st_mode))
X                  printf("@");
X                else if(S_ISDIR(filestat.st_mode))
X                  printf("/");
X                else if(S_ISSOCK(filestat.st_mode))
X                  printf("=");
X                else if(filestat.st_mode & S_IXUSR)
X                  printf("*");
X              }
X
X            printf("\n");
X
X            if(S_ISDIR(filestat.st_mode) && depth < max_depth - 1)
X	      {
X		islast[depth - 1] = TRUE;
X		xtree(last, depth + 1, flags);
X		islast[depth - 1] = FALSE;
X	      }
X          }
X      }
X    else
X      { /* valid directory, but it is empty */
X        for(i = 0; i < depth - 1; i++)
X          printf("(0%c(B       ", (islast[i]) ? ' ' : 'x');
X        printf("(0%c(B\n", 'm');
X      }
X
X    /* count how many subdirectories - needed for 'xtree dir/subdir dir2' */
X    for(go_up = 1, c = name; *c; c++)
X      if(*c == '/')
X        go_up++;
X
X    for(i = 0; i < go_up; i++)
X      if(chdir(".."))
X        {
X          fprintf(stderr, "%s: cannot move back up directory tree from %s\n",
X                  Progname, name);
X          exit(-1);
X        }
X
X    return;
X}
X
X#ifdef PROTOTYPE
Xvoid main(int argc, char *argv[])
X#else    
Xvoid main(argc, argv)
Xint argc;
Xchar *argv[];
X#endif /* PROTOTYPE */
X{
X    int i, index, done, flags = 0;
X    char *next, *c, *cwdname, *shortname, *s;
X    struct stat filestat;
X
X    Progname = (char *) malloc(strlen(argv[0] + 1));
X    strcpy(Progname, argv[0]);
X    for(i = 0; i < ABSMAX_DEPTH; i++) islast[i] = 0;
X
X    /* process command-line options */
X    for(done = FALSE, index = 1;
X        index < argc && *argv[index] == '-' && !done;
X        index++)
X      for(c = argv[index] + 1; *c; c++)
X        switch(*c)
X          {
X            case 'a':
X            case 'A':
X              flags |= SHOWALL;
X              break;
X
X            case 'F':
X              flags |= TRAILER;
X              break;
X
X            case 'L':
X              flags |= GETLINK;
X              break;
X
X            case 'd':
X              if(strcmp(argv[index], "-d")) /* can't give in combo */
X                {
X                  fprintf(stderr, "%s: can't give -d ", Progname);
X                  fprintf(stderr, "option in a group\n");
X                  usage();
X                }
X
X              if((index == argc - 1) || !isdigit(*argv[index + 1]))
X                max_depth = 1;
X              else
X                {
X                  index++;
X                  max_depth = atoi(argv[index]);
X                  if(max_depth > ABSMAX_DEPTH)
X                    {
X                      fprintf(stderr, "%s: cannot exceed depth of %d\n",
X                              Progname, ABSMAX_DEPTH);
X                      max_depth = ABSMAX_DEPTH;
X                    }
X                } /* else: isdigit(*argv[index]) */
X
X              break;
X
X            case 'e':
X              if(strcmp(argv[index], "-e")) /* can't give in combo */
X                {
X                  fprintf(stderr, "%s, can't give -e option ", Progname);
X                  fprintf(stderr, "in a group\n");
X                  usage();
X                }
X              done = TRUE;
X              break;
X
X            default :
X              fprintf(stderr, "%s: unknown option '-%c'\n", Progname, *c);
X              usage();
X              break;
X          } /* end switch */
X
X    init();
X    /* getcwd returns the full pathname, but we only want the local name */
X    cwdname = (char *) malloc(256);
X    cwdname = getcwd(cwdname, 256);
X    shortname = (char *) malloc(strlen(cwdname) + 1);
X    for(c = cwdname, s = shortname; *c; c++, s++)
X      {
X	if(*c == '/')
X	  {
X	    c++;
X	    s = shortname;  /* start over */
X	  }
X	*s = *c;
X      }
X    *s = '\0'; /* make it NULL-terminated */
X
X    if(!strcmp(shortname, "")) /* at root */
X      strcpy(shortname, "/");
X
X    if(index == argc)
X      {
X        printf("%s\n", shortname);
X        xtree(".", 1, flags);
X      }
X    else
X      {
X        for(i = index; i < argc; i++)
X          {
X            if(stat(argv[i], &filestat))
X              INTERPRET(errno, argv[i])
X            else
X              {
X                if(S_ISDIR(filestat.st_mode))
X                  addname(argv[i], 0);
X                else
X                  fprintf(stderr, "%s: %s not a directory\n",
X                          argv[0], argv[i]);
X              }
X          }
X    
X        while((next = getname(0)) != NULL)
X          {
X            printf("%s", next);
X            if(stat(next, &filestat))
X              INTERPRET(errno, next)
X            else
X              if(flags & TRAILER)
X                {
X                  if(S_ISLNK(filestat.st_mode))
X                    printf("@");
X                  else if(S_ISDIR(filestat.st_mode))
X                    printf("/");
X                  else if(S_ISSOCK(filestat.st_mode))
X                    printf("=");
X                  else if(filestat.st_mode & S_IXUSR)
X                    printf("*");
X                }
X
X            printf("\n");
X            xtree(next, 1, flags);
X	    if(chdir(cwdname))
X	      {
X		fprintf(stderr, "%s: Unable to return to initial directory\n",
X			Progname);
X		exit(-1);
X	      }
X          }
X      }
X    free(cwdname);
X    free(shortname);
X
X    exit(0);
X}
END_OF_FILE
fi
if test -f 'table.c' -a "${1}" != "-c" ; then
    echo shar: Will not clobber existing file \"'table.c'\"
else
    echo shar: Extracting \"'table.c'\"
    sed "s/^X//" > 'table.c' << 'END_OF_FILE'
X/******************************************************************************
X *
X * table.c - manipulation routines for the name table
X *
X *   init    - initialize table
X *   addname - put name in table at depth
X *   getname - get next name at depth
X *
X *****************************************************************************/
X
X#include <stdio.h>
X#include "xtree.h"
X
Xtypedef struct table_entry {
X  char *name;
X  struct table_entry *next;
X} NTent;
X
XNTent *name_tbl[ABSMAX_DEPTH][256];
Xint index[ABSMAX_DEPTH];
Xextern int max_depth;
X
X/* initialize name table */
X#ifdef PROTOTYPE
Xvoid init(void)
X#else
Xvoid init()
X#endif /* PROTOTYPE */
X{
X    int i, j;
X
X    for(i = 0; i < max_depth; i++)
X      {
X        for(j = 0; j < 256; j++)
X          name_tbl[i][j] = NULL;
X        index[i] = 0;
X      }
X
X    return;
X}
X
X/* add 'name' to the name table at depth 'depth' */
X#ifdef PROTOTYPE
Xvoid addname(char *name, int depth)
X#else
Xvoid addname(name, depth)
Xchar *name;
Xint depth;
X#endif /* PROTOTYPE */
X{
X    int slot, done;
X    NTent *new, *cur, *last;
X
X    /* can only go so far */
X    if(depth >= max_depth)
X      return;
X
X    /* build the new node */
X    new = (NTent *) malloc(sizeof(NTent));
X    new->name = (char *) malloc(strlen(name) + 1);
X    strcpy(new->name, name);
X
X    /* go to the table slot to start looking */
X    slot = (int) *name;
X    last = name_tbl[depth][slot];
X
X    if(last == NULL)
X      {
X        new->next = NULL;
X        name_tbl[depth][slot] = new;
X      }
X    else
X      { /*
X         *  pass over all nodes with names that are alphabetically less then
X         *  the new name
X         */
X	if(strcmp(last->name, name) > 0)
X	  { /* goes before first node in bucket */
X	    new->next = last;
X	    name_tbl[depth][slot] = new;
X	  }
X	else
X	  {
X	    for(cur = last->next, done = FALSE; cur != NULL && !done;
X		cur = cur->next, last = last->next)
X	      if(strcmp(cur->name, new->name) > 0) /* lexically g.t. */
X		done = TRUE;
X	    /* we now want to put new between last and cur */
X	    new->next = last->next;
X	    last->next = new;
X	  }
X      }
X}
X
X#ifdef PROTOTYPE
Xchar *getname(int depth)
X#else
Xchar *getname(depth)
Xint depth;
X#endif /* PROTOTYPE */
X{
X    char *ret;
X    NTent *n;
X
X    /* can only go so far */
X    if(depth >= max_depth)
X      return NULL;
X
X    /* find slot with nodes */
X    for(n = name_tbl[depth][index[depth]]; n == NULL && index[depth] < 256; )
X      {
X        index[depth]++;
X        n = name_tbl[depth][index[depth]];
X      }
X
X    if(n == NULL)  /* nothing at this depth */
X      {
X        index[depth] = 0; /* performance loss if getname() is called many */
X        return NULL;      /* after exhausting at a given depth */
X      }
X
X    /* get string */
X    ret = (char *) malloc(strlen(n->name) + 1);
X    strcpy(ret, n->name);
X
X    /* delete node */
X    name_tbl[depth][index[depth]] = n->next;
X    free(n->name);
X    free(n);
X
X    return(ret);
X}
END_OF_FILE
fi
if test -f 'xtree.h' -a "${1}" != "-c" ; then
    echo shar: Will not clobber existing file \"'xtree.h'\"
else
    echo shar: Extracting \"'xtree.h'\"
    sed "s/^X//" > 'xtree.h' << 'END_OF_FILE'
X/******************************************************************************
X *
X *  xtree.h
X *
X * some global definitions/prototypes
X *
X *****************************************************************************/
X
X#define MAX_DEPTH 9   /* default value for maximum depth to traverse */
X#define ABSMAX_DEPTH 20   /* size of the name table */ 
X
X/* I would not suggest changing anything below this line */
X
X/* function prototypes */
X#ifdef __STDC__
X#define PROTOTYPE
Xvoid init(void);
Xvoid addname(char *name, int depth);
Xchar *getname(int depth);
Xvoid usage(void);
Xvoid xtree(char *name, int depth, int flags);
Xvoid main(int argc, char *argv[]);
Xextern char *getcwd(char *buf, int size);
X#else
Xvoid init();
Xvoid addname();
Xchar *getname();
Xvoid usage();
Xvoid xtree();
Xvoid main();
Xextern char *getcwd();
X#endif /* __STDC__ */
X
X/* make sure we have a boolean TRUE and FALSE */
X#ifndef FALSE
X#define FALSE 0
X#endif
X#ifndef TRUE
X#define TRUE  !FALSE
X#endif
X
X/* the DEC doesn't seem to have these defined */
X#ifndef _IFMT
X#define _IFMT  0170000         /* type of file; sync with _S_IFMT */
X#endif
X#ifndef S_ISLNK
X#define _IFLNK         0120000         /* symbolic link */
X#define S_ISLNK(m)      (((m)&_IFMT) == _IFLNK)
X#endif
X#ifndef S_ISSOCK
X#define _IFSOCK        0140000         /* socket */
X#define S_ISSOCK(m)     (((m)&_IFMT) == _IFSOCK)
X#endif
X
X/* constants for 'flags' argument to xtree */
X#define SHOWALL 0x01  /* show "dot" files - but never . or .., a la 'ls -A'  */
X#define TRAILER 0x02  /* use dir/ link@ socket= exec* trailers, a la 'ls -F' */
X#define GETLINK 0x04  /* follow over symbolic links as if hard, a la 'ls -L' */
X#define ISLAST  0x08  /* this is the last thing in dir - needed for a subdir */
END_OF_FILE
fi
if test -f 'sample.output' -a "${1}" != "-c" ; then
    echo shar: Will not clobber existing file \"'sample.output'\"
else
    echo shar: Extracting \"'sample.output'\"
    sed "s/^X//" > 'sample.output' << 'END_OF_FILE'
XXtree
X(0x(B       Makefile
X(0x(B       Test/
X(0x(B       (0x(B       atest/
X(0x(B       (0x(B       (0x(B       junk1
X(0x(B       (0x(B       (0m(B       junk2
X(0x(B       (0x(B       btest/
X(0x(B       (0x(B       (0m(B
X(0x(B       (0x(B       ctest/
X(0x(B       (0x(B       (0m(B
X(0x(B       (0x(B       file1
X(0x(B       (0x(B       file2
X(0x(B       (0x(B       link2.ctest@
X(0x(B       (0x(B       link2.file1@
X(0x(B       (0x(B       ztest/
X(0x(B       (0x(B       (0m(B       zztest/
X(0x(B       (0x(B       (0 (B       (0m(B
X(0x(B       (0m(B       zzfile
X(0x(B       Test2/
X(0x(B       (0m(B
X(0x(B       sample.output
X(0x(B       table.c
X(0x(B       xtree.c
X(0x(B       xtree.h
X(0m(B       zzztest/
X(0 (B       (0m(B       file
END_OF_FILE
fi
echo shar: End of archive.
exit 0
