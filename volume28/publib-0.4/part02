Newsgroups: comp.sources.unix
From: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Subject: v28i185: publib-0.4 - framework for library of public, reusable "C" functions, Part02/04
References: <1.785201056.13832@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Posting-Number: Volume 28, Issue 185
Archive-Name: publib-0.4/part02

#!/bin/sh
# This is part 02 of a multipart archive.
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
# ============= publib/INSTALL ==============
if test ! -d 'publib'; then
  echo 'x - creating directory publib'
  mkdir 'publib'
fi
if test -f 'publib/INSTALL' && test X"$1" != X"-c"; then
  echo 'x - skipping publib/INSTALL (file already exists)'
else
  echo 'x - extracting publib/INSTALL (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'publib/INSTALL' &&
X   This is a generic INSTALL file for utilities distributions.
If this package does not come with, e.g., installable documentation or
data files, please ignore the references to them below.
X
X   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation, and
creates the Makefile(s) (one in each subdirectory of the source
directory).  In some packages it creates a C header file containing
system-dependent definitions.  It also creates a file `config.status'
that you can run in the future to recreate the current configuration.
X
To compile this package:
X
1.  Configure the package for your system.
X
X   Normally, you just `cd' to the directory containing the package's
source code and type `./configure'.  If you're using `csh' on an old
version of System V, you might need to type `sh configure' instead to
prevent `csh' from trying to execute `configure' itself.
X
X   Running `configure' takes awhile.  While it is running, it
prints some messages that tell what it is doing.  If you don't want to
see any messages, run `configure' with its standard output redirected
to `/dev/null'; for example, `./configure >/dev/null'.
X
X   To compile the package in a different directory from the one
containing the source code, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.  If
for some reason `configure' is not in the source code directory that
you are configuring, then it will report that it can't find the source
code.  In that case, run `configure' with the option `--srcdir=DIR',
where DIR is the directory that contains the source code.
X
X   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.  Alternately, you can do so by consistently
giving a value for the `prefix' variable when you run `make', e.g.,
X     make prefix=/usr/gnu
X     make prefix=/usr/gnu install
X
X   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH' or set the `make'
variable `exec_prefix' to PATH, the package will use PATH as the prefix
for installing programs and libraries.  Data files and documentation
will still use the regular prefix.  Normally, all files are installed
using the same prefix.
X
X   Some packages pay attention to `--with-PACKAGE' options to
`configure', where PACKAGE is something like `gnu-as' or `x' (for the
XX Window System).  They may also pay attention to `--enable-FEATURE'
options, where FEATURE indicates an optional part of the package.  The
README should mention any `--with-' and `--enable-' options that the
package recognizes.
X
X   `configure' also recognizes the following options:
X
`--help'
X     Print a summary of the options to `configure', and exit.
X
`--quiet'
`--silent'
X     Do not print messages saying which checks are being made.
X
`--verbose'
X     Print the results of the checks.
X
`--version'
X     Print the version of Autoconf used to generate the `configure'
X     script, and exit.
X
`--x-includes=DIR'
X     X include files are in DIR.
X
`--x-libraries=DIR'
X     X library files are in DIR.
X
X   `configure' also accepts and ignores some other options.
X
X   On systems that require unusual options for compilation or linking
that the package's `configure' script does not know about, you can give
`configure' initial values for variables by setting them in the
environment.  In Bourne-compatible shells, you can do that on the
command line like this:
X
X     CC='gcc -traditional' LIBS=-lposix ./configure
X
On systems that have the `env' program, you can do it like this:
X
X     env CC='gcc -traditional' LIBS=-lposix ./configure
X
X   Here are the `make' variables that you might want to override with
environment variables when running `configure'.
X
X   For these variables, any value given in the environment overrides the
value that `configure' would choose:
X
X - Variable: CC
X     C compiler program.  The default is `cc'.
X
X - Variable: INSTALL
X     Program to use to install files.  The default is `install' if you
X     have it, `cp' otherwise.
X
X   For these variables, any value given in the environment is added to
the value that `configure' chooses:
X
X - Variable: DEFS
X     Configuration options, in the form `-Dfoo -Dbar...'.  Do not use
X     this variable in packages that create a configuration header file.
X
X - Variable: LIBS
X     Libraries to link with, in the form `-lfoo -lbar...'.
X
X   If you need to do unusual things to compile the package, we encourage
you to figure out how `configure' could check whether to do them, and
mail diffs or instructions to the address given in the README so we
can include them in the next release.
X
2.  Type `make' to compile the package.  If you want, you can override
the `make' variables CFLAGS and LDFLAGS like this:
X
X	make CFLAGS=-O2 LDFLAGS=-s
X
3.  If the package comes with self-tests and you want to run them,
type `make check'.  If you're not sure whether there are any, try it;
if `make' responds with something like
X	make: *** No way to make target `check'.  Stop.
then the package does not come with self-tests.
X
4.  Type `make install' to install programs, data files, and
documentation.
X
5.  You can remove the program binaries and object files from the
source directory by typing `make clean'.  To also remove the
Makefile(s), the header file containing system-dependent definitions
(if the package uses one), and `config.status' (all the files that
`configure' created), type `make distclean'.
X
X   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need it if you want to regenerate
`configure' using a newer version of `autoconf'.
SHAR_EOF
  $shar_touch -am 1010185394 'publib/INSTALL' &&
  chmod 0600 'publib/INSTALL' ||
  echo 'restore of publib/INSTALL failed'
  shar_count="`wc -c < 'publib/INSTALL'`"
  test 6061 -eq "$shar_count" ||
    echo "publib/INSTALL: original size 6061, current size $shar_count"
fi
# ============= publib/LIST ==============
if test -f 'publib/LIST' && test X"$1" != X"-c"; then
  echo 'x - skipping publib/LIST (file already exists)'
else
  echo 'x - extracting publib/LIST (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'publib/LIST' &&
LIST, a list of Publib modules
Lars Wirzenius, lars.wirzenius@helsinki.fi
"@(#)publib-framework:LIST,v 1.4 1994/10/10 16:52:08 wirzeniu Exp"
X
NOTE: This list does not pretend to be complete, but I'd like it to
be.  If you develop new modules, or know of such, please inform me.
X
The port and errormsg modules are part of the framework, since they
are supposed to be heavily used by all other modules.  The Template
pseudo-module is also part of it, so that it will be easier to develop
new modules.
X
For each module, I try to have a short description, name and contact
information for the maintainer.  This information may well be out of
date.
X
At the moment, all the existing modules I know of are mine.
X
alloc	Memory allocation routines, including error checking frontends
X	for standard allocation functions.
X
bitarr	An array of bits.
X
cmp	Comparison functions for qsort, bsearch, et al.
X
expr	Evaluate simple arithmetic expressions given as strings.
X
files	File and I/O routines.
X
fname	Filename manipulation (mostly for Unix).
X
iset	A set of long integers.
X
log	Print log messages to several files.
X
sbuf	Simple editor buffer routines
X
stack	A generic stack of things.
X
strutil	String and memory block utilities
SHAR_EOF
  $shar_touch -am 1010185294 'publib/LIST' &&
  chmod 0600 'publib/LIST' ||
  echo 'restore of publib/LIST failed'
  shar_count="`wc -c < 'publib/LIST'`"
  test 1216 -eq "$shar_count" ||
    echo "publib/LIST: original size 1216, current size $shar_count"
fi
# ============= publib/Makefile.in ==============
if test -f 'publib/Makefile.in' && test X"$1" != X"-c"; then
  echo 'x - skipping publib/Makefile.in (file already exists)'
else
  echo 'x - extracting publib/Makefile.in (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'publib/Makefile.in' &&
# This is the master makefile for Publib.  See the Publib README for
# more information before trying to configure this file.
#
# "@(#)publib-framework:Makefile.in,v 1.5 1994/07/13 00:37:57 liw Exp"
X
include Rules.mk
X
# Define the directory where the library modules are (as opposed to the
# framework modules).  It is conceivable that one would not want to
# have the modules below the framework directory (e.g., in order to
# use several framework versions concurrently).
modules = modules
X
# List of all modules subdirectories.
subs = fwmodules/* $(modules)/*
X
# Command to run make recursively in all the module subdirectories.
recurse = \
test "x$$target" = "x" && target="$@"; \
for i in $(subs); \
do \
X    if test -f "$$i/Makefile"; \
X    then \
X	(cd $$i && $(MAKE) $$target srcdir="$(srcdir)") || exit; \
X    fi; \
done
X
all: headers publib.3
X	$(recurse)
X
tests: all
X	$(recurse)
X
install: 
X	target=pre-install; $(recurse)
X	$(recurse)
X	$(INSTALL_DATA) $(libnamebase) $(libdir)/$(libnamebase)
X	$(INSTALL_DATA) publib.3 $(man3dir)/publib.$(man3ext)
X	test -d $(incdir)/publib || mkdir $(incdir)/publib
X	$(INSTALL_DATA) include/publib.h $(incdir)
X	for i in include/publib/*.h; do \
X		$(INSTALL_DATA) $$i $(incdir)/publib; done
X	target=post-install; $(recurse)
X
clean:
X	$(recurse)
X	rm -rf include $(libnamebase)
X
realclean: clean
X	$(recurse)
X	rm -f Makefile Rules.mk configure config.status publib.3
X
# Headers are copied to ./include while the library is being built,
# and are installed from there to their final location.  This allows
# the modules to depend on each other, and also makes it easier to
# create a header for the whole library, <publib.h>.  The headers for
# each module go into include/publib/.
X
headers: 
X	@echo copying headers to build-time include directory
X	@test -d include || mkdir include
X	@test -d include/publib || mkdir include/publib
X	@rm -f include/.need-update
X	@test -f include/publib.h && newer="-newer include/publib.h"; \
X	 find fwmodules/. $(modules)/. \
X		-name '*.h' \
X		$$newer \
X		-exec cp '{}' include/publib ';' \
X		-exec touch include/.need-update ';' ;
X	@cd include; if test -f .need-update; then \
X		rm .need-update; \
X		echo building publib.h; \
X		(echo "#ifndef __publib_h"; \
X		echo "#define __publib_h"; \
X		find publib -name '*.h' -print|sed 's/^/#include </;s/$$/>/'; \
X		echo "#endif") > publib.h; \
X	else \
X		echo no need to build publib.h; \
X	fi
X
# Insert the current list of modules to the man page
publib.3: publib.3.in
X	sed "s/MODULELIST/` \
X		find $(subs) -name '*.3' -exec basename '{}' .3 ';' \
X		| uniq | sed -e 's/^/, /' -e 's/$$/(3)/' \
X		| tr -d '\12'`/" publib.3.in > publib.3
X
# The following rules update configure and Makefile
Makefile: Makefile.in Rules.mk.in config.status
X	$(SHELL) config.status		# builds Rules.mk too!
config.status: configure
X	$(SHELL) $(srcdir)/configure -no-create
configure: configure.in
X	cd $(srcdir); autoconf 
SHAR_EOF
  $shar_touch -am 0713033794 'publib/Makefile.in' &&
  chmod 0600 'publib/Makefile.in' ||
  echo 'restore of publib/Makefile.in failed'
  shar_count="`wc -c < 'publib/Makefile.in'`"
  test 2910 -eq "$shar_count" ||
    echo "publib/Makefile.in: original size 2910, current size $shar_count"
fi
# ============= publib/README ==============
if test -f 'publib/README' && test X"$1" != X"-c"; then
  echo 'x - skipping publib/README (file already exists)'
else
  echo 'x - extracting publib/README (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'publib/README' &&
README for the Publib framework
Lars Wirzenius
"@(#)publib-framework:README,v 1.8 1994/10/10 16:52:46 wirzeniu Exp"
X
This is the README for Publib, version 0.4.  This is an ALPHA version, released
only as a savage attempt at corrupting your data.
X
X
Blurb
-----
X
See the file called Blurb for a quick overview of Publib, including
instructions for getting it.
X
X
Unpacking The Sources
---------------------
X
Unpacking the framework distribution creates a directory publib, and
puts the framework sources in there.  The default place to unpack the
modules is into the publib/modules directory.  However, you can also
unpack them elsewhere, and either make publib/modules be a symbolic link
to that directory, or set the makefile macro `modules' in
publib/Makefile.in to point at that directory.  Note, however, that
publib/modules or its replacement directory will contain subdirectories,
one per module.  Each subdirectory within publib/modules that contains a
file called Makefile is assumed to be module directory.  (That is, if
publib/modules/foo/Makefile exists, then publib/modules/foo contains a
module that will be built and installed.  This check allows there to be
additional files and subdirectories within the modules directory,
especially CVS directories.)
X
If you have the .tar.gz version of the sources, use the following
command to unpack the sources of the framework:
X
X	gzip -dc publib-xxx.tar.gz | tar xf -
X
(replace publib-xxx.tar.gz with the pathname of the actual file with
the framework sources).  To unpack the modules, do:
X
X	mkdir publib/modules
X	cd publib/modules
X
and then:
X
X	gzip -dc module-xxx.tar.gz | tar xf -
X
(replace module-xxx.tar.gz with the pathname of the actual file with the
module sources).  This last command needs to be repeated once for
every module that you wish to install (you don't have to install
modules you don't need).
X
Version 0.3 of the author's module collection is distributed as one
X.tar.gz file that contains all his (publically distributable) modules.
X
X
Building The Library
--------------------
X
You need to run a configuration script before running make (there
won't even exist a Makefile before that).  In directory publib, give
the following command:
X
X	./configure
X
Please look at and, if necessary, modify, the Makefile and Rules.mk that
are output by configure.  Hopefully, you don't need to touch them.  If
you do, please communicate any problems you had to fix to the author, so
that they can be fixed in future releases.
X
After that, 'make' or `make all' builds everything, `make install'
installs everything, `make clean' gets rid of files built by make, and
`make realclean' gets rid of everything that can be built by make
(assuming you have the right tools; note, however, that the configure
command is also removed, and that you will need to have GNU autoconf
to rebuild it).
X
Hence, the typical commands to build and install the library are
X
X	./configure
X	edit Makefile Rules.mk
X	make all
X	make install
X
You may wish to give configure some options to specify where things
should be installed.  See the file publib/INSTALL for more information.
It is a generic instruction file for software packages that use GNU
autoconf; some of the instructions are not be relevant for Publib.
Particularly, Publib doesn't (yet) support compilation from another
directory.  No --with- options are supported.
X
If you need to run configure many times before getting everything just
right, and you need to modify Makefile or Rules.mk after running
configure, you may want to modify things in Makefile.in and Rules.mk.in
so that you do not need to re-do the edits all the time.
X
X
Tools Required
--------------
X
For unpacking the sources, the tools depend on how your copy has been
packaged.  The variables are compression program (compress or gzip)
and shell archives versus tar files.  All but gzip are standard on
Unix systems; you can find gzip on a number of anonymous ftp sites,
e.g., in prep.ai.mit.edu: pub/gnu/gzip-1.2.4.tar.gz (use the newest
version).
X
For building and installing the library, no special software is
needed.  The build process uses standard Unix tools (C compiler, make,
cp, rm, mkdir, find, uniq, sed, true, and so on).
X
For developing the library, you may need GNU autoconf, which is used to
generate the automatic configuration script (publib/configure).
Autoconf in turn needs GNU m4 (normal m4 is not sufficient).  Both can
be found on prep.ai.mit.edu, in the directory pub/gnu.  You probably
only need to generate configure if you change configure.in, and you
probably don't need to do that.
X
X
Available Modules
-----------------
X
See the file publib/LIST for a list of some modules.  This list
doesn't pretend to be complete; it lists those modules that the
maintainer of the framework was aware of (and, naturally, includes
many of his own modules).
X
X
Writing and Distributing New Modules
------------------------------------
X
Publib is all about reusing code, so we would be delighted if you would
write more modules, or to enhance existing ones.  See below for some
notes about how the Publib framework works.  When you are ready to
distribute, mail Lars Wirzenius at lars.wirzenius@helsinki.fi for more
information about the preferred way to distribute it via Publib.  Or, if
you prefer, just distribute it and tell people where they can get the
framework so they can build it.  If you have enhanced an existing
module, please contact its maintainer (should be mentioned in the
documentation for the module).
X
Publib is intended to have very low overhead for developing and
distributing new modules.  One of the results is that there is no
central quality assurance group (although we would be delighted to
try out new modules, or new versions, within time constraints).  We
hope that the easier publication will result in more modules to be
written, and that the ease of making new versions will give enough 
quality.  (It works for Linux, it should work for us!)
X
X
How The Publib Build Mechanism Works
------------------------------------
X
The framework sources are in directory referred to here as the base
directory, publib/ in filenames, or $(srcdir), if an absolute name is
required.  This directory contains the following files (at least)
relevant to the build process:
X
X	configure	automatic configuration script
X	configure.in	autoconf generates `configure' from this
X	Generic.mk	generic makefile for modules
X	Makefile	toplevel makefile
X	Makefile.in	configure generates Makefile from this
X	Rules.mk	shared stuff for all makefiles
X	Rules.mk.in	configure creates Rules.mk from this
X	publib.3	man page for Publib
X	publib.3.in	the Publib man page (publib.3) is generated
X			from this by Makefile
X	include/	build-time include directory; Makefile copies
X			the modules' headers here
X	fwmodules/	subdirectory with the modules that are part
X			of the framework (errormsg and port)
X	modules/	subdirectory with the modules of the library
X			(might be symlink; see macro modules in Makefile);
X			this is created by the person unpacking the module
X			 source code
X	Template/	some template files for use with a new module
X
First, publib/configure is run (the current working directory
should be publib).  This automatically creates publib/Makefile
and publib/Rules.
X
The build process is as follows.
X
X	1. All Publib headers are copied into publib/include/publib.
X	   This makes it easy for modules to use each others' header
X	   files, without having enourmous -I options for the compiler.
X
X	2. A publib/include/publib.h header is built.  It
X	   automatically includes all other Publib headers.  This is
X	   a convenience for the user (only publib.h needs to be
X	   included).
X
X	3. The Publib man page is built.  (The list of all modules
X	   that are to be built is automatically inserted.)
X
X	4. All modules are built.  The publib/Makefile automatically
X	   invokes the makefile in each module.  The modules'
X	   makefiles are responsible for adding any object files into
X	   the library file ($(libname) within the modules' makefiles,
X	   after $(srcdir)/Rules has been included).
X
Requirements For Modules
------------------------
X
The framework sources contain two modules that are put into
publib/fwmodules.
X
X	errormsg	error message printing
X	port		stuff for portability
X
A new module is placed into the build framework by putting its
sources into a subdirectory below publib/modules and making
sure it adheres to the following conventions.
X
X	1. Its Makefile includes $(srcdir)/Rules
X
X	2. Its Makefile supports the following targets
X
X		all		build library modules
X		tests		build (and optionally run) test programs
X		install		install everything that is to be installed
X		preinstall	things to do just before `install'
X		postinstall	things to do just after `install'
X		clean		remove most files built by make
X		realclean	remove everything that can be rebuilt
X
X	3. It refers to all Publib headers, including its own, with
X
X		#include "publib/foo.h"
X
X	4. All headers can safely be included multiple times, and do
X	   not require other Publib headers to be included first.  The
X	   simplest way to ensure this is to make the header look like
X
X	   	#ifndef __publib_foo_h
X	   	#define __publib_foo_h
X
X	   	/* the actual header contents come here */
X
X	   	#endif
X
X	   Additionally, if there is a need to reference other modules'
X	   headers in the header itself, an include is done:
X
X	   	#include <publib/bar.h>
X
X	   Note <>, not "", for delimiting the filename in this case.
X
The $(srcdir)/Generic.mk makefile can be used by most modules, by
including it into the module's makefile.  It provides all the
necessary things a module's makefile needs to, and allows the actual
makefile for the module be very simple.  See instructions at the
comment at the top of it for instructions.  Unless the module needs to
do something complicated during the build, Generic.mk should be quite
enough.
X
The __publib_error macro in fwmodules/errormsg/errormsg.h should be used
to report errors.  It will do nothing, print an error message, exit the
program, or abort the program (or a combination of these), based on the
user's preferences.  This makes it easy to generate a debugging version
of the library that helps identify the problem.  Usage is like this:
X
X	p = malloc(n);
X	if (p == NULL)
X		__publib_error("malloc failed");
X	return p;
X
The error message includes the name of the source file, the line
number in the source file, and the string argument.
X
The module's makefile should use $(INSTALL_MAN) for installing
man pages.  It will either be a BSD compatible install(1) program,
or the publib/install.sh script, which is 
X
X
Postcards
---------
X
If you like Publib (the framework or any of my modules), and want to
make me happy, send me a postcard to
X
X	Lars Wirzenius
X	Hernesaarenkatu 15 A 2
X	00150 Helsinki
X	Finland
X
Please don't send letter bombs (but money, computers or small furry
creatures from Alpha Centauri are fine).  You can also send e-mail,
but I prefer post cards.
X
X
Acknowledgements and history
----------------------------
X
The Publib effort started from an article posted to gnu.misc.discuss,
comp.sources.d, and comp.software-eng at the end of February, 1992, by
Steve Nuchia.  He then created the mailing list which has been used for
communication, library@sccsi.com.  Several people were active in the
discussion at the beginning.  Lars Wirzenius built a few prototypes for
the framework, based on the discussions on the list.  Paul Sander
and Greg Woods especially gave valuable comments on them.
X
The first version released outside of the list was 0.2, posted on
February 19 to alt.sources by Lars Wirzenius.
X
The list has been rather dead since the end of 1993.
X
The second version was 0.3, posted to alt.sources and put on
the ftp sites on July 16, 1994.
X
The third version was 0.4, not posted to alt.sources, only put on
the ftp sites on October 10, 1994.
SHAR_EOF
  $shar_touch -am 1010185294 'publib/README' &&
  chmod 0600 'publib/README' ||
  echo 'restore of publib/README failed'
  shar_count="`wc -c < 'publib/README'`"
  test 11855 -eq "$shar_count" ||
    echo "publib/README: original size 11855, current size $shar_count"
fi
# ============= publib/Rules.mk.in ==============
if test -f 'publib/Rules.mk.in' && test X"$1" != X"-c"; then
  echo 'x - skipping publib/Rules.mk.in (file already exists)'
else
  echo 'x - extracting publib/Rules.mk.in (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'publib/Rules.mk.in' &&
### This file is included by all makefiles ###
X
### Start of system configuration section. ###
X
srcdir = @srcdir@
VPATH = @srcdir@
X
CC = @CC@
X
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
X
# The following is the command used to install man pages.  On some
# systems, it might have to run things through nroff, col and a
# compression program.  On most systems, installing them the same
# data files are installed is just as good.  See also below about
# the macros that define man page suffix and directories.
INSTALL_MAN = $(INSTALL_DATA)
X
ARADD = ar rc
RANLIB = @RANLIB@
X
DEFS = @DEFS@
LIBS = @LIBS@
X
# Functions that should be included in the portability module
PORTOBJS = @LIBOBJS@
X
# C compiler options to set warning level
WARNCFLAGS = @WARNCFLAGS@
X
CFLAGS = -I$(srcdir)/include -D__publib__ $(WARNCFLAGS) $(DEFS)
LDFLAGS = 
X
prefix = /usr/local
exec_prefix = $(prefix)
X
bindir = $(exec_prefix)/bin
incdir = $(prefix)/include
libdir = $(prefix)/lib
mandir = $(prefix)/man
man1dir = $(mandir)/man1
man1ext = 1
man3dir = $(mandir)/man3
man3ext = 3
X
### End of system configuration section. ###
X
### You probably don't need to touch anything below this.
### It is just stuff that needs to be shared by all makefiles;
### for GNU make, it would be automatically inherited, but various
### stupid makes don't do that (nah, that would be too easy).
X
libnamebase = libpub.a
libname = $(srcdir)/$(libnamebase)
SHAR_EOF
  $shar_touch -am 0802025594 'publib/Rules.mk.in' &&
  chmod 0600 'publib/Rules.mk.in' ||
  echo 'restore of publib/Rules.mk.in failed'
  shar_count="`wc -c < 'publib/Rules.mk.in'`"
  test 1449 -eq "$shar_count" ||
    echo "publib/Rules.mk.in: original size 1449, current size $shar_count"
fi
# ============= publib/configure.in ==============
if test -f 'publib/configure.in' && test X"$1" != X"-c"; then
  echo 'x - skipping publib/configure.in (file already exists)'
else
  echo 'x - extracting publib/configure.in (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'publib/configure.in' &&
dnl Process this file with autoconf to produce a configure script
dnl This file is part of publib
dnl "@(#)publib-framework:configure.in,v 1.3 1994/08/28 18:15:42 liw Exp"
AC_INIT(publib.3.in)
changequote(,)dnl
srcdir="`cd $srcdir; pwd`"
changequote([,])dnl
AC_SUBST(WARNCFLAGS)
AC_PROG_CC
changequote(,)dnl
case $GCC in 1)WARNCFLAGS='-O -ansi -pedantic -Wall'; export WARNCFLAGS ;; esac
changequote([,])dnl
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_REPLACE_FUNCS(strdup strerror)
AC_OUTPUT(Makefile Rules.mk)
SHAR_EOF
  $shar_touch -am 0828211594 'publib/configure.in' &&
  chmod 0600 'publib/configure.in' ||
  echo 'restore of publib/configure.in failed'
  shar_count="`wc -c < 'publib/configure.in'`"
  test 502 -eq "$shar_count" ||
    echo "publib/configure.in: original size 502, current size $shar_count"
fi
: || echo 'restore of publib/install.sh failed'
echo 'End of part 2, continue with part 3'
exit 0
