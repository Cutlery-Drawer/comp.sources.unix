Newsgroups: comp.sources.unix
From: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Subject: v28i186: publib-0.4 - framework for library of public, reusable "C" functions, Part03/04
References: <1.785201056.13832@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Posting-Number: Volume 28, Issue 186
Archive-Name: publib-0.4/part03

#!/bin/sh
# This is part 03 of a multipart archive.
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
# ============= publib/install.sh ==============
if test ! -d 'publib'; then
  echo 'x - creating directory publib'
  mkdir 'publib'
fi
if test -f 'publib/install.sh' && test X"$1" != X"-c"; then
  echo 'x - skipping publib/install.sh (file already exists)'
else
  echo 'x - extracting publib/install.sh (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'publib/install.sh' &&
#!/bin/sh
X
#
# install - install a program, script, or datafile
# This comes from X11R5; it is not part of GNU.
#
# XXConsortium: install.sh,v 1.2 89/12/18 14:47:22 jim Exp X
#
# This script is compatible with the BSD install script, but was written
# from scratch.
#
X
X
# set DOITPROG to echo to test this script
X
# Don't use :- since 4.3BSD and earlier shells don't like it.
doit="${DOITPROG-}"
X
X
# put in absolute paths if you don't have them in your path; or use env. vars.
X
mvprog="${MVPROG-mv}"
cpprog="${CPPROG-cp}"
chmodprog="${CHMODPROG-chmod}"
chownprog="${CHOWNPROG-chown}"
chgrpprog="${CHGRPPROG-chgrp}"
stripprog="${STRIPPROG-strip}"
rmprog="${RMPROG-rm}"
X
instcmd="$mvprog"
chmodcmd=""
chowncmd=""
chgrpcmd=""
stripcmd=""
rmcmd="$rmprog -f"
mvcmd="$mvprog"
src=""
dst=""
X
while [ x"$1" != x ]; do
X    case $1 in
X	-c) instcmd="$cpprog"
X	    shift
X	    continue;;
X
X	-m) chmodcmd="$chmodprog $2"
X	    shift
X	    shift
X	    continue;;
X
X	-o) chowncmd="$chownprog $2"
X	    shift
X	    shift
X	    continue;;
X
X	-g) chgrpcmd="$chgrpprog $2"
X	    shift
X	    shift
X	    continue;;
X
X	-s) stripcmd="$stripprog"
X	    shift
X	    continue;;
X
X	*)  if [ x"$src" = x ]
X	    then
X		src=$1
X	    else
X		dst=$1
X	    fi
X	    shift
X	    continue;;
X    esac
done
X
if [ x"$src" = x ]
then
X	echo "install:  no input file specified"
X	exit 1
fi
X
if [ x"$dst" = x ]
then
X	echo "install:  no destination specified"
X	exit 1
fi
X
X
# If destination is a directory, append the input filename; if your system
# does not like double slashes in filenames, you may need to add some logic
X
if [ -d $dst ]
then
X	dst="$dst"/`basename $src`
fi
X
# Make a temp file name in the proper directory.
X
dstdir=`dirname $dst`
dsttmp=$dstdir/#inst.$$#
X
# Move or copy the file name to the temp name
X
$doit $instcmd $src $dsttmp
X
# and set any options; do chmod last to preserve setuid bits
X
if [ x"$chowncmd" != x ]; then $doit $chowncmd $dsttmp; fi
if [ x"$chgrpcmd" != x ]; then $doit $chgrpcmd $dsttmp; fi
if [ x"$stripcmd" != x ]; then $doit $stripcmd $dsttmp; fi
if [ x"$chmodcmd" != x ]; then $doit $chmodcmd $dsttmp; fi
X
# Now rename the file to the real destination.
X
$doit $rmcmd $dst
$doit $mvcmd $dsttmp $dst
X
X
Xexit 0
SHAR_EOF
  $shar_touch -am 0713020094 'publib/install.sh' &&
  chmod 0700 'publib/install.sh' ||
  echo 'restore of publib/install.sh failed'
  shar_count="`wc -c < 'publib/install.sh'`"
  test 2186 -eq "$shar_count" ||
    echo "publib/install.sh: original size 2186, current size $shar_count"
fi
# ============= publib/publib.3.in ==============
if test -f 'publib/publib.3.in' && test X"$1" != X"-c"; then
  echo 'x - skipping publib/publib.3.in (file already exists)'
else
  echo 'x - extracting publib/publib.3.in (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'publib/publib.3.in' &&
X.\" This is part of publib (big surprise :)
X.\" "@(#)publib-framework:publib.3.in,v 1.2 1994/06/24 13:14:50 liw Exp"
X.\"
X.TH PUBLIB 3
X.SH NAME
publib \- introduction to publib
X.\".SH SYNOPSIS
X.\"#include <publib.h>
X.\".br
X.\"lots of useful functions
X.SH "DESCRIPTION"
\fIpublib\fR is both a library of C functions that are useful in many
of programs, and a framework for building such a library from
components (called modules) provided by separate people.
It is an extension to the
Standard C library (as defined by the ISO/ANSI C standard 9899-1990).  To
use the functions in publib, #include <publib.h>
and link with
the libpub.a library (adding -lpub at the end of the link command
should work, if the library has been installed properly).  See the
source code and/or man page for each module for copyright restrictions
(which may be different for different modules).
X.PP
The publib framework is distributed separately from the library
modules.  The framework as such only contains the \fIerrormsg\fR
module (see \fIerrormsg(3)\fR).  
X.\" The below is a complete lie at the moment...
Some of currently available modules are:
X.sp 1
X.in +5
X.nf
string and memory area manipulation
X.\" memory allocation
X.\" generic data structures
I/O
X.\" configuration files
comparison functions for qsort, bsearch, and others
expression evaluation
X.\" dates and times
X.in -5
X.sp 1
X.fi
More to be expected in future releases.
X.SS "Error handling"
Unless the documentation for the function specifies otherwise, the
default action when a library function notices an error is to abort
whatever it was doing and return an error indication.  It is possible
to change this behaviour with \fI__set_liberror(3)\fR; see its man
page for more information.
X.SS "Portability functions"
Publib contains a component with implementations of some standard or
common library functions that are not available everywhere.  Some of
these are specified by the ISO C standard (a.k.a. ANSI C), or by
POSIX, others are just common.  As of this writing, included functions
are
X.sp 1
X.in +5
X.nf
X	strdup
X	strerror
X.in -5
X.sp 1
X.fi
Short manual pages are also included.  These functions are
automatically installed as part of publib, because some of the publib
library functions use them.  You can, of course, also use them in your
own programs, or when porting programs to your system.
X.SH "SEE ALSO"
intro(3)MODULELIST
X.PP
The above Publib man pages are probably installed at the moment; contact your
system administrator for more information.
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0624161494 'publib/publib.3.in' &&
  chmod 0600 'publib/publib.3.in' ||
  echo 'restore of publib/publib.3.in failed'
  shar_count="`wc -c < 'publib/publib.3.in'`"
  test 2558 -eq "$shar_count" ||
    echo "publib/publib.3.in: original size 2558, current size $shar_count"
fi
# ============= publib/fwmodules/errormsg/Makefile ==============
if test ! -d 'publib/fwmodules'; then
  echo 'x - creating directory publib/fwmodules'
  mkdir 'publib/fwmodules'
fi
if test ! -d 'publib/fwmodules/errormsg'; then
  echo 'x - creating directory publib/fwmodules/errormsg'
  mkdir 'publib/fwmodules/errormsg'
fi
if test -f 'publib/fwmodules/errormsg/Makefile' && test X"$1" != X"-c"; then
  echo 'x - skipping publib/fwmodules/errormsg/Makefile (file already exists)'
else
  echo 'x - extracting publib/fwmodules/errormsg/Makefile (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'publib/fwmodules/errormsg/Makefile' &&
objs = errormsg.o
include $(srcdir)/Generic.mk
X
$(objs): errormsg.h
SHAR_EOF
  $shar_touch -am 1120175693 'publib/fwmodules/errormsg/Makefile' &&
  chmod 0600 'publib/fwmodules/errormsg/Makefile' ||
  echo 'restore of publib/fwmodules/errormsg/Makefile failed'
  shar_count="`wc -c < 'publib/fwmodules/errormsg/Makefile'`"
  test 68 -eq "$shar_count" ||
    echo "publib/fwmodules/errormsg/Makefile: original size 68, current size $shar_count"
fi
# ============= publib/fwmodules/errormsg/__set_liberror.3 ==============
if test -f 'publib/fwmodules/errormsg/__set_liberror.3' && test X"$1" != X"-c"; then
  echo 'x - skipping publib/fwmodules/errormsg/__set_liberror.3 (file already exists)'
else
  echo 'x - extracting publib/fwmodules/errormsg/__set_liberror.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'publib/fwmodules/errormsg/__set_liberror.3' &&
X.\" Part of publib
X.\" "@(#)publib-errormsg:__set_liberror.3,v 1.1.1.1 1993/11/20 15:56:36 liw Exp"
X.\"
X.TH __set_liberror 3
X.SH NAME
__set_liberror \- modify error handling for publib
X.SH SYNOPSIS
#include <publib.h>
X.sp 1
X.br
void __set_liberror(enum __liberror);
X.SH "DESCRIPTION"
Unless the documentation for the function specifies otherwise, the
default action when a library function notices an error is to abort
whatever it was doing and return an error indication.  It is possible
to change this behaviour with \fI__set_liberror(3)\fR.  The argument
should be a bitwise OR of the following values:
X.sp 1
X.nf
X	__abort_on_error
X	__exit_on_error
X	__complain_on_error
X.in +5
X.in -5
X.sp 1
Note that \fI__abort_on_error\fR and \fI__exit_on_error\fR are
mutually exclusive, only use one.
X.SH "SEE ALSO"
publib(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 1120175693 'publib/fwmodules/errormsg/__set_liberror.3' &&
  chmod 0600 'publib/fwmodules/errormsg/__set_liberror.3' ||
  echo 'restore of publib/fwmodules/errormsg/__set_liberror.3 failed'
  shar_count="`wc -c < 'publib/fwmodules/errormsg/__set_liberror.3'`"
  test 869 -eq "$shar_count" ||
    echo "publib/fwmodules/errormsg/__set_liberror.3: original size 869, current size $shar_count"
fi
# ============= publib/fwmodules/errormsg/errormsg.3 ==============
if test -f 'publib/fwmodules/errormsg/errormsg.3' && test X"$1" != X"-c"; then
  echo 'x - skipping publib/fwmodules/errormsg/errormsg.3 (file already exists)'
else
  echo 'x - extracting publib/fwmodules/errormsg/errormsg.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'publib/fwmodules/errormsg/errormsg.3' &&
X.\" Part of publib
X.\" "@(#)publib-errormsg:errormsg.3,v 1.1.1.1 1993/11/20 15:56:36 liw Exp"
X.\"
X.TH ERRORMSG 3
X.SH NAME
errormsg, set_progname, get_progname \- printing error messages
X.SH SYNOPSIS
#include <errormsg.h>
X.sp 1
X.nf
void \fIerrormsg\fR(int exitp, int eno, const char *fmt, ...);
void \fIset_progname\fR(const char *argv0, const char *def);
const char *\fIget_progname\fR(void);
X.SH "DESCRIPTION"
The \fIerrormsg\fR function is used for printing error messages.  It
is a like a combination of fprintf(3) and perror(3), in that it makes
it easy to add arbitrary, printf-like formatted text to the output,
and makes it easy to include the system's error message (the error
string corresponding to the eno parameter).  Unlike perror, this
function does not get the error code directly from errno, thus making
it easier to do something else that might set it before printing out
the error message.  \fIerrormsg\fR also adds the name of the program
to the output, if known.
X.PP
The first argument to \fIerrormsg\fR should be 0 (don't exit program),
1 (exit program with \fIexit(EXIT_FAILURE)\fR) or 2 (with
\fIabort()\fR).  The second one should be 0 (don't print system error
message), positive (print error message corresponding to the error
code), or -1 (print the error message corresponding to \fIerrno\fR).
X.PP
The \fIset_progname\fR function sets the program name.  You need to
call this function with at least one non-NULL parameter to get the
program names included in the output.  If either argument is non-NULL,
it should point at strings that have static duration, i.e. they exist
until the program terminates (or at least until the last error message
has been printed); this is so that it is not necessary to create a
copy of the name.  (Either or both arguments can also be NULL.)
X.PP
If the first argument is non-NULL, that is used as the name, otherwise
the seconds argument is used.  If both are NULL, no program name is
included in the output.  The reason for having two arguments is so
that the caller doesn't have to do the test, and can just call
X.sp 1
X.ti +5
X     \fIset_progname(argv[0], "default_name");\fR
X.sp 1
(it is valid for argv[0] to be NULL, under ISO C).
X.PP
The \fIget_progname\fR function returns a pointer to the current name
of the program, as set by \fIset_progname\fR.  If \fIget_progname\fR
returns NULL, then no name has been set and none is included in the
output.  This function is included for completeness, it is not really
expected to be useful.
X.SH "SEE ALSO"
publib(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 1120175693 'publib/fwmodules/errormsg/errormsg.3' &&
  chmod 0600 'publib/fwmodules/errormsg/errormsg.3' ||
  echo 'restore of publib/fwmodules/errormsg/errormsg.3 failed'
  shar_count="`wc -c < 'publib/fwmodules/errormsg/errormsg.3'`"
  test 2581 -eq "$shar_count" ||
    echo "publib/fwmodules/errormsg/errormsg.3: original size 2581, current size $shar_count"
fi
# ============= publib/fwmodules/errormsg/errormsg.c ==============
if test -f 'publib/fwmodules/errormsg/errormsg.c' && test X"$1" != X"-c"; then
  echo 'x - skipping publib/fwmodules/errormsg/errormsg.c (file already exists)'
else
  echo 'x - extracting publib/fwmodules/errormsg/errormsg.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'publib/fwmodules/errormsg/errormsg.c' &&
/*
X * errormsg.c -- print error message and optionally die
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-errormsg:errormsg.c,v 1.2 1994/02/03 17:40:25 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include <errno.h>
#include "publib/errormsg.h"
X
static const char *progname = NULL;
X
enum __liberror __liberror = __exit_on_error;
X
void __set_liberror(enum __liberror i) {
X	__liberror = i;
}
X
X
/* 
X * Set program name; this is automatically included in the error messages.
X * Both arguments should point at strings that have static duration, i.e.
X * they exist until the program terminates (or at least until the last error
X * message has been printed); this is so that it is not necessary to create
X * a copy of the name.  (The arguments can also be NULL.)
X *
X * If the first argument is non-NULL, that is used, otherwise the seconds
X * argument is used.  If both are NULL, no program name is included in the
X * output.  The reason for having two arguments is so that the caller
X * doesn't have to do the test, and can just call 
X *	set_progname(argv[0], "default_name");
X * (it is valid for argv[0] to be NULL, under ISO C).
X */
void set_progname(const char *argv0, const char *def) {
X	progname = (argv0 != NULL) ? argv0 : def;
}
X
X
/*
X * Return program name set by set_progname, or an empty string if not set.
X */
const char *get_progname(void) {
X	return progname != NULL ? progname : "";
}
X
X
/*
X * Print error message; if exitp is 1, exit, if 2, abort, after printing
X * the message.  If eno is positive, print error corresponding strerror
X * message; if eno is -1, use current value of errno.
X */
void errormsg(int do_after, int eno, const char *fmt, ...) {
X	va_list args;
X	size_t len;
X	int print_newline, print_progname;
X
X	if (eno == -1)		/* this must be done before anything else */
X		eno = errno;
X
X	assert(do_after == 0 || do_after == 1 || do_after == 2);
X	assert(eno >= -1);	/* there is no known maximum value for errno */
X	assert(fmt != NULL);
X		
X	fflush(NULL);		/* output all pending output */
X
X	print_progname = (progname != NULL) && (*progname != '\0');
X
X	if (print_progname)
X		fprintf(stderr, "%s: ", progname);
X
X	va_start(args, fmt);
X	vfprintf(stderr, fmt, args);
X	va_end(args);
X
X	len = strlen(fmt);
X	print_newline = (len > 0) && (fmt[len-1] == '\n');
X
X	if (eno != 0) {
X		if (print_newline) {
X			if (print_progname)
X				fprintf(stderr, "%s: ", progname);
X			fprintf(stderr, "Possible explanation: ");
X		} else {
X			fprintf(stderr, ": ");
X		}
X		fprintf(stderr, "%s\n", strerror(eno));
X	} else {
X		if (!print_newline)
X			fprintf(stderr, "\n"); /* make sure newline ends msg */
X	}
X
X	fflush(stderr);
X
X	switch (do_after) {
X	case 1:
X		exit(EXIT_FAILURE);
X	case 2:
X		abort();
X	}
}
SHAR_EOF
  $shar_touch -am 0203194094 'publib/fwmodules/errormsg/errormsg.c' &&
  chmod 0600 'publib/fwmodules/errormsg/errormsg.c' ||
  echo 'restore of publib/fwmodules/errormsg/errormsg.c failed'
  shar_count="`wc -c < 'publib/fwmodules/errormsg/errormsg.c'`"
  test 2779 -eq "$shar_count" ||
    echo "publib/fwmodules/errormsg/errormsg.c: original size 2779, current size $shar_count"
fi
# ============= publib/fwmodules/errormsg/errormsg.h ==============
if test -f 'publib/fwmodules/errormsg/errormsg.h' && test X"$1" != X"-c"; then
  echo 'x - skipping publib/fwmodules/errormsg/errormsg.h (file already exists)'
else
  echo 'x - extracting publib/fwmodules/errormsg/errormsg.h (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'publib/fwmodules/errormsg/errormsg.h' &&
/*
X * errormsg.h -- declarations for error message printing
X *
X * Part of publib
X * "@(#)publib-errormsg:errormsg.h,v 1.1.1.1 1993/11/20 15:56:36 liw Exp"
X */
X
#ifndef __publib_errormsg_h
#define __publib_errormsg_h
X
/*
X * The following are meant for user programs.
X */
void set_progname(const char *__argv0, const char *__default);
const char *get_progname(void);
void errormsg(int __exitp, int __errno, const char *_fmt, ...);
X
X
/*
X * The rest is meant for internal use by the publib library.
X */
X
enum __liberror {
X	__exit_on_error = 0x01,
X	__abort_on_error = 0x02,
X	__complain_on_error = 0x04
};
extern enum __liberror __liberror;
X
void __set_liberror(enum __liberror);
X
X
#define __publib_error(msg) \
X	((__liberror & __complain_on_error) \
X	 && (errormsg(__liberror & (__abort_on_error | __exit_on_error), -1, \
X		      "error inside publib library function: %s:%ld: %s",  \
X		      __FILE__, (int)__LINE__, (msg)), 0))
X
#endif
SHAR_EOF
  $shar_touch -am 1120175693 'publib/fwmodules/errormsg/errormsg.h' &&
  chmod 0600 'publib/fwmodules/errormsg/errormsg.h' ||
  echo 'restore of publib/fwmodules/errormsg/errormsg.h failed'
  shar_count="`wc -c < 'publib/fwmodules/errormsg/errormsg.h'`"
  test 933 -eq "$shar_count" ||
    echo "publib/fwmodules/errormsg/errormsg.h: original size 933, current size $shar_count"
fi
# ============= publib/fwmodules/port/Makefile ==============
if test ! -d 'publib/fwmodules/port'; then
  echo 'x - creating directory publib/fwmodules/port'
  mkdir 'publib/fwmodules/port'
fi
if test -f 'publib/fwmodules/port/Makefile' && test X"$1" != X"-c"; then
  echo 'x - skipping publib/fwmodules/port/Makefile (file already exists)'
else
  echo 'x - extracting publib/fwmodules/port/Makefile (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'publib/fwmodules/port/Makefile' &&
include $(srcdir)/Rules.mk
X
objs = $(PORTOBJS)
X
all: $(libname) $(testprogs)
X	@true
$(libname): $(objs)
X	$(ARADD) $(libname) $(objs)
X	$(RANLIB) $(libname)
X
tests: $(testprogs)
X	@true
X
clean realclean distclean:
X	rm -f *.o
X
pre-install post-install:
X	@true
install:
X	@for i in *.3; do \
X		if test -f $$i; then \
X		echo "installing $$i"; \
X		$(INSTALL_DATA) $$i $(man3dir)/`basename $$i .3`.$(man3ext); \
X		fi; \
X	done
SHAR_EOF
  $shar_touch -am 1120175693 'publib/fwmodules/port/Makefile' &&
  chmod 0600 'publib/fwmodules/port/Makefile' ||
  echo 'restore of publib/fwmodules/port/Makefile failed'
  shar_count="`wc -c < 'publib/fwmodules/port/Makefile'`"
  test 417 -eq "$shar_count" ||
    echo "publib/fwmodules/port/Makefile: original size 417, current size $shar_count"
fi
# ============= publib/fwmodules/port/port.h ==============
if test -f 'publib/fwmodules/port/port.h' && test X"$1" != X"-c"; then
  echo 'x - skipping publib/fwmodules/port/port.h (file already exists)'
else
  echo 'x - extracting publib/fwmodules/port/port.h (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'publib/fwmodules/port/port.h' &&
/*
X * port.h -- header for portability fixes
X *
X * Part of publib.
X * "@(#)publib-port:port.h,v 1.2 1994/02/03 17:41:21 liw Exp"
X */
X
#ifndef __publib_port_h
#define __publib_port_h
X
#ifndef EXIT_SUCCESS
#define EXIT_SUCCESS	0
#endif
X
#ifndef EXIT_FAILURE
#define EXIT_FAILURE	1   /* a reasonable value but might need adjusting */
#endif
X
char *strdup(const char *);
char *strerror(int);
X
#endif
SHAR_EOF
  $shar_touch -am 0203194194 'publib/fwmodules/port/port.h' &&
  chmod 0600 'publib/fwmodules/port/port.h' ||
  echo 'restore of publib/fwmodules/port/port.h failed'
  shar_count="`wc -c < 'publib/fwmodules/port/port.h'`"
  test 396 -eq "$shar_count" ||
    echo "publib/fwmodules/port/port.h: original size 396, current size $shar_count"
fi
# ============= publib/fwmodules/port/strdup.c ==============
if test -f 'publib/fwmodules/port/strdup.c' && test X"$1" != X"-c"; then
  echo 'x - skipping publib/fwmodules/port/strdup.c (file already exists)'
else
  echo 'x - extracting publib/fwmodules/port/strdup.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'publib/fwmodules/port/strdup.c' &&
/*
X * strdup.c -- duplicate string
X *
X * Part of publib.
X * "@(#)publib-port:strdup.c,v 1.2 1994/02/03 17:43:18 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include <string.h>
X
char *strdup(const char *s) {
X	size_t n;
X	char *p;
X
X	assert(s != NULL);
X
X	n = strlen(s) + 1;
X	p = malloc(n);
X	if (p != NULL)
X		memcpy(p, s, n);
X	return p;
}
SHAR_EOF
  $shar_touch -am 0203194394 'publib/fwmodules/port/strdup.c' &&
  chmod 0600 'publib/fwmodules/port/strdup.c' ||
  echo 'restore of publib/fwmodules/port/strdup.c failed'
  shar_count="`wc -c < 'publib/fwmodules/port/strdup.c'`"
  test 344 -eq "$shar_count" ||
    echo "publib/fwmodules/port/strdup.c: original size 344, current size $shar_count"
fi
# ============= publib/fwmodules/port/strerror.c ==============
if test -f 'publib/fwmodules/port/strerror.c' && test X"$1" != X"-c"; then
  echo 'x - skipping publib/fwmodules/port/strerror.c (file already exists)'
else
  echo 'x - extracting publib/fwmodules/port/strerror.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'publib/fwmodules/port/strerror.c' &&
/*
X * strerror.c -- return pointer to error message corresponding to error code
X *
X * Part of publib.
X * "@(#)publib-port:strerror.c,v 1.2 1994/02/03 17:43:00 liw Exp"
X */
X
extern char *sys_errlist[];
extern int sys_nerr;
X
char *strerror(int errno) {
X	char buf[] = "error number 1234567890123456789012345678901234567890";
X	if (errno < 0 || errno >= sys_nerr) {
X		sprintf(buf, "error number %d", errno);
X		return (char *) "invalid error number";
X	}
X	return sys_errlist[errno];
}
SHAR_EOF
  $shar_touch -am 0203194394 'publib/fwmodules/port/strerror.c' &&
  chmod 0600 'publib/fwmodules/port/strerror.c' ||
  echo 'restore of publib/fwmodules/port/strerror.c failed'
  shar_count="`wc -c < 'publib/fwmodules/port/strerror.c'`"
  test 478 -eq "$shar_count" ||
    echo "publib/fwmodules/port/strerror.c: original size 478, current size $shar_count"
fi
: || echo 'restore of publib/configure failed'
echo 'End of part 3, continue with part 4'
exit 0
