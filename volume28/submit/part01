Newsgroups: comp.sources.unix
From: bdrysdal@laurel.ocs.mq.edu.au (Brad Drysdale)
Subject: v28i156: submit - electronic submission tool for classwork, Part01/01
Message-id: <1.784075479.10149@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: bdrysdal@laurel.ocs.mq.edu.au (Brad Drysdale)
Posting-Number: Volume 28, Issue 156
Archive-Name: submit/part01

	Here is the promised C source for my electronic file submission
	program.  Included is the C source, man page and an installation
	guide.  Mail me if you have any problems.

		bdrysdal@laurel.ocs.mq.edu.au (Brad Drysdale)

[ I wrote the Makefile and renamed the installation guide to README.  --vix ]

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  README MANIFEST Makefile submit.1 submit.c
# Wrapped by vixie@gw.home.vix.com on Sat Nov  5 14:41:59 1994
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 1 (of 1)."'
if test -f 'README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'README'\"
else
  echo shar: Extracting \"'README'\" \(1459 characters\)
  sed "s/^X//" >'README' <<'END_OF_FILE'
X1/ Change the submissions directory to suit your environment.
X
X2/ Create a course directory in the base submission directory
X   specified in 1/.
X
X       eg:  /home/teaching/submissions/comp325
X
X       in general:
X            /(   base submission dir   )/( course name )
X
X3/ The spool and log directories will then need to be created. The
X   program will assume that they exist. So your final directory
X   structure will look something like this:
X
X         /base_submission_dir/course_name/spool
X   and   /base_submission_dir/course_name/log
X
X4/ You will then need to compile:
X 	gcc -O -o submit submit.c
X   and install the binary in an appropriate directory.
X   The program needs to run as root so something like the following
X   install script will do the job.
X
X
X		cp submit /usr/local/bin/submit
X		chown root.teaching /usr/local/bin/submit
X		chmod 6711 /usr/local/bin/submit
X		ls -lg /usr/local/bin/submit
X
X5/ When a submission occurs, the submitted files are copied to the
X   appropriate spool directory and their permissions are changed to
X   ownership of the person who owns the directory above the parent
X   submission directory.  ie: course coordinator, or whatever.
X
X6/ Try submitting a few files and make sure that all the permissions
X   are set correctly. Make any required modifications to the source
X   and mail the following addresses if anything goes wrong, or if
X   you have any questions:
X
X   	Brad.Drysdale@mq.edu.au
X	George.Chong@mq.edu.au
X
END_OF_FILE
  if test 1459 -ne `wc -c <'README'`; then
    echo shar: \"'README'\" unpacked with wrong size!
  fi
  # end of 'README'
fi
if test -f 'MANIFEST' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MANIFEST'\"
else
  echo shar: Extracting \"'MANIFEST'\" \(263 characters\)
  sed "s/^X//" >'MANIFEST' <<'END_OF_FILE'
X   File Name		Archive #	Description
X----------------------------------------------------------
XREADME                     1	
XMANIFEST                   1	This shipping list
XMakefile                   1	
Xsubmit.1                   1	
Xsubmit.c                   1	
END_OF_FILE
  if test 263 -ne `wc -c <'MANIFEST'`; then
    echo shar: \"'MANIFEST'\" unpacked with wrong size!
  fi
  # end of 'MANIFEST'
fi
if test -f 'Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Makefile'\"
else
  echo shar: Extracting \"'Makefile'\" \(111 characters\)
  sed "s/^X//" >'Makefile' <<'END_OF_FILE'
Xall: submit
X
Xsubmit: submit.c
X	cc -O -o submit submit.c
X
Xinstall: all
X	install -c submit /usr/local/bin/submit
END_OF_FILE
  if test 111 -ne `wc -c <'Makefile'`; then
    echo shar: \"'Makefile'\" unpacked with wrong size!
  fi
  # end of 'Makefile'
fi
if test -f 'submit.1' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'submit.1'\"
else
  echo shar: Extracting \"'submit.1'\" \(2697 characters\)
  sed "s/^X//" >'submit.1' <<'END_OF_FILE'
X.TH submit 1 "20/07/94"
X.SH NAME
Xsubmit \-
X.I Electronic Unix File Submission Engine
X.SH SYNOPSIS
Xsubmit course_name  [-]file  [-]file2  ...  [-]fileN
X.br
Xsubmit course_name \\?
X.br
Xsubmit course_name \\--
X.SH DESCRIPTION
X.I Submit
Xis an electronic file submission engine which will submit files to a spool
Xdirectory ready for marking.
X.PP
XThe submission method outlined in the synopsis above executes by copying
Xfiles from your current working directory to the submissions directory
Xfor the course "course_name". 
X.PP
XFiles can be preceeded with the "-" sign if you wish to remove
X(unsubmit) files from the submissions spool directory.
X.PP
XFor each file that has been specified, a message is displayed to
Xindicate that it has been successfully submitted. At the same
Xtime, the action is logged into a log-file via the S.E.L.E.
X(Submission Event Logging Engine) function.
X.PP
XThis log-file is appended to every time a transaction takes place
Xvia a call to the submit program, and is used for monitoring time
Xand date of file submissions and for bug-detection.
X.PP
XFiles in the submissions directory will only be overwritten if the user
Xsubmits another file with the same name. 
X.PP
XThe users submission spool directory can be pruned (ie: all submissions
Xremoved) via the "\--" or the "-rm" option called after the course_name.
XThe "-rm" and the "\--" both perform the same task, "-rm" was included
Xsimply to mimic basic UNIX file commands and seemed logical. The "\--"
Xwas a personal favourite of mine so it stays...  :-)
X.PP
X.I Caution:
XThis operation will irreversibly remove all files previously submitted.
X.PP
XYou can see which files have already been submitted by passing either
Xthe "\?" (for DOS heads) or the "-ls" (for UNIX fans) parameters. The 
Xreason why both parameters work is the same as the above.
X.PP
XAn error message is issued if the course specified does not exist or
Xfiles wishing to be submitted/unsubmitted are not found.
X.PP
XEach student that submits an assignment has a subdirectory created to hold
Xhis files, in the course directory specified, this is called the students
X"submission spool directory".
X.br
X.PP
X.I Examples:
X.PP
X.EX
X.nf
X$ \fBsubmit comp225 quest1.cpp quest2.cpp -oldquest.cpp\fP
X
Xhomer (Homer J. Simpson) at Tue Jul 19 15:50:48 1994 submitted quest1.cpp
Xhomer (Homer J. Simpson) at Tue Jul 19 15:50:48 1994 submitted quest2.cpp
Xhomer (Homer J. Simpson) at Tue Jul 19 15:50:49 1994 removed oldquest.cpp
X
X$ \fBsubmit course \\?\fP
X
X 	Here are the files submitted to date for course comp225:
X
X  		  	    quest1.cpp
X    			    quest2.cpp
X.fi
X.SC
X.SH AUTHORS
XBrad Drysdale   			  George Kar-Tung Chong
X.br
XBrad.Drysdale@mq.edu.au	       Kar-Tung.Chong@mq.edu.au
X
END_OF_FILE
  if test 2697 -ne `wc -c <'submit.1'`; then
    echo shar: \"'submit.1'\" unpacked with wrong size!
  fi
  # end of 'submit.1'
fi
if test -f 'submit.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'submit.c'\"
else
  echo shar: Extracting \"'submit.c'\" \(17031 characters\)
  sed "s/^X//" >'submit.c' <<'END_OF_FILE'
X/* ------------------------------- */
X/*         Submit v1.0             */
X/* ------------------------------- */
X/* (c) 1994  Brad Drysdale         */
X/*           George Kar-Tung Chong */
X/* ------------------------------- */
X/* Date of Origin:  07-07-94       */
X/* Last Update:     13-07-94       */
X/* ------------------------------- */
X
X/* Include libraries */
X#include <sys/types.h>
X#include <sys/stat.h>          /* Existence checking for files, */
X#include <sys/dir.h>           /*  and directories. */
X#include <stdio.h>             /* Standard I/O library functions */
X#include <pwd.h>               /* Has handy functions to get UID, GID */
X#include <string.h>            /* String manipulation functions */
X
X#define MASK 0700              /* Mask out permissions */
X
X/* Define which destination directories are to be used */
X
Xchar *base  = "/home/teaching/submissions/";
X/* Modify the line above to suit your enviorment. */
X
Xchar *spool = "/spool";                        /* Spooling destination */
X/* These two directories need to be created by you */
Xchar *log   = "/log";                          /* Logfile destination  */
Xchar directory[BUFSIZ];                /* Set-up directory name string */
Xchar logname[BUFSIZ]; 
Xchar lbuf[BUFSIZ];
Xchar command[BUFSIZ] = "";
Xchar logpath[BUFSIZ] = "";
Xchar *cp;
Xchar *ctime();
X
Xstruct passwd *pwd;     /* Get password file entry structure */
Xstruct stat statp, statcourse, statfile;
X
Xu_short new_mode;
Xtime_t timed;
X
X
X/* ------------------------ Usage ---------------------------- */
X
Xvoid Usage( void )
X/* Show command line parameters and general usage of program */
X{
X   fprintf( stderr, "\t+---------------------------------------------------------+\n" );
X   fprintf( stderr, "\t|                                                         |\n" );
X   fprintf( stderr, "\t|  Submit v1.0  * Brad Drysdale, George Kar-Tung Chong *  |\n" );
X   fprintf( stderr, "\t|  =====================================================  |\n" );
X   fprintf( stderr, "\t|                                                         |\n" );
X   fprintf( stderr, "\t+------------------------ Usage --------------------------+\n\n" );
X   fprintf( stderr, "        Submit files:  " );
X   fprintf( stderr, " submit course [-]file1  [-]file2 ...  [-]fileN\n" );
X/*   fprintf( stderr, "\t    (the '-' prefix causes that file to be unsubmitted)\n\n" ); */
X   fprintf( stderr, "     Clean directory:  " );
X   fprintf( stderr, " submit course -rm    (Removes all submissions)\n" );
X   fprintf( stderr, "    Show submissions:  " );
X   fprintf( stderr, " submit course -ls    (Show all files submitted)\n\n" );
X   fprintf( stderr, "\t\t     Read the man page:\t man submit\n\n" );
X}
X
X
X/* ---------------------- Display_Sub ------------------------ */
X
Xvoid Display_Sub( char *name, char *coursename )
X/* Show all previously submitted files by the user */
X{
X   DIR *dirp;
X   struct direct *dp;
X   char lbuf[BUFSIZ];
X   int count = 0;
X   
X   printf( "\n\tHere are the files submitted to date for course %s:\n\n", coursename );
X   if( (dirp = opendir( name )) != NULL )
X   {
X      while( (dp = readdir( dirp )) != NULL )
X      {   
X         if( (strcmp( dp->d_name, "HEADER") != 0 ) && ( isdir( dp->d_name) != 1 ) )
X         {
X            strcpy( lbuf, name );
X            strcat( lbuf, "/" );
X            strcat( lbuf, dp->d_name );
X            if( isdir( lbuf ) == 0 )
X            { 
X               count++;
X               printf( "\t\t\t     %s\n", dp->d_name );
X            }
X            else
X               Display_Sub( lbuf, coursename );
X         }
X      }
X   }
X   if( count == 0 )
X      printf( "\t\t\tNo files submitted\n\n" );  
X}
X
X
X/* ------------------------ isdir ---------------------------- */
X
Xint isdir( char *file )
X{
X   struct stat sbuf;
X   
X   if( stat( file, &sbuf ) == 0 )
X   {
X      if( sbuf.st_mode & 040000 )
X         return(1);
X      else
X         return(0);
X   }
X   else
X      return(-1);
X}
X 
X  
X/* ---------------------- Log Action ------------------------- */
X
Xvoid Log_Action( char action[15], char file[20] )
X{
X   FILE *logfile = (FILE *)0;
X   time_t time();  
X
X   if( (logfile = fopen( logname, "a" )) != NULL )
X   {
X      timed = time( (time_t *) 0 );
X      fprintf( logfile, "%s %s %s at %s", pwd->pw_name, action, file, ctime( &timed ) );
X      (void)fflush( logfile );
X      (void)fclose( logfile );
X   }
X   else
X   {
X      fprintf( stderr, "%s\n", logname );
X      exit(0);  
X   }
X}
X
X
X/* ------------------------ ErrorH --------------------------- */
X
Xvoid ErrorH( char *DirName, char DirType[15] )
X{
X   if( stat( DirName, &statp ) < 0 ) 
X   {
X      if( mkdir( DirName, 0770 ) != 0 )
X      {
X         printf( "Internal Error, failed to make the %s directory.\n", DirType );
X         exit(0);
X      }
X      if( chown( DirName, statcourse.st_uid, statcourse.st_gid) != 0 )
X      {
X         printf( "Internal Error, failed to change ownership of the %s directory.\n", DirType );
X         exit(0);
X      }
X      if( chmod( DirName, 0770 ) != 0 )
X      {
X         printf( "Internal Error, failed to set permissions on course %s directory.\n", DirType );
X         exit(0);
X      }  
X   }
X
X}
X
X
X/* ---------------------- Remove_File ------------------------ */
X
Xint Remove_File( char *File )
X{
X   if( isdir( File ) == 1 )
X      return(0);
X   return( unlink( File ));
X}
X
X
X/* ---------------------- Copy_File -------------------------- */
X
Xvoid Copy_File( char *dest, char *file, uid_t uid, gid_t gid )
X{
X   char command[256];
X   time_t  timed;
X   time_t  time(); 
X   FILE    *fd, *source, *destination;  
X   char    thing;
X   
X   source = fopen( file, "r" );
X   if( source == NULL )
X   {
X      printf( "Could not submit file %s as it is not readable.\n", file );
X      return;
X   }
X   destination = fopen( dest, "w" );
X   if( destination == NULL )
X   {
X      printf( "Internal Error, could not create the file %s.\n", dest );
X      return;
X   };
X   
X   while(( thing = fgetc( source ) ) != EOF )
X      if( fputc( thing, destination ) != thing )   
X         printf( "Internal Error, an error occurred when attempting to submit %s.\n", file );
X   fclose( source );
X   fclose( destination );
X   
X   if( chown( dest, uid, gid ) != 0 )
X   {
X      perror( "chmod-command" );
X      exit(0);
X   }
X   if( chmod( dest, new_mode ) != 0 )
X      perror( "chmod-command" );
X
X   timed = time(( time_t *)0 );
X   cp = ctime( &timed );
X   cp[ strlen( cp ) - 1 ] = '\0'; 
X
X   if(( fd = fopen( logname, "a" )) != NULL )
X   {
X      fprintf( fd, "%s Submitted   %s at %s\n", pwd->pw_name, file, cp );
X      (void)fclose( fd );
X   }
X   else
X      printf( "failed to open %s", logname ); 
X
X   chown( logname, uid, gid );
X   chmod( logname, 0440 );    
X   fprintf( stderr, "%s (%s) at %s submitted %s", pwd->pw_name, pwd->pw_gecos, cp, file );
X}
X
X
X/* ------------------ Determine_Protection ------------------- */
X
Xvoid Determine_Protection( char *file )
X{
X   struct stat sbuf;
X   
X   if( stat( file, &sbuf ) == 0 )
X   {
X      new_mode = sbuf.st_mode & MASK;
X      new_mode |= ( new_mode >> 3 );
X   }
X   else
X   {
X      printf( "Can't read file %s, or it does not exist.\n", file );
X      exit(1);
X   }
X}
X
X
X/* --------------------- Author_Info ------------------------- */
X
Xvoid Author_Info( void )
X{
X   fprintf( stderr, "\n\t\t   Hidden Project Detail Screen\n" );
X   fprintf( stderr, "\t\t   ============================\n\n" );
X   fprintf( stderr, " This program was written in C by Brad Drysdale and George Kar-Tung Chong.\n" );
X   fprintf( stderr, "Some basic features from the original 'submit' program were kept and\n" );
X   fprintf( stderr, "enhanced in this version to maintain compatibility with the old version.\n" );
X   fprintf( stderr, "\n The actual file submission engine was completely rewritten to allow for\n\n" );
X   fprintf( stderr, "\t(1) Multiple file submission without overwriting;\n" );
X   fprintf( stderr, "\t(2) Full Unsubmission capabilities of multiple files from\n" );
X   fprintf( stderr, "\t    the command line;\n" );
X   fprintf( stderr, "\t(3) Submission Directory 'pruning' which cleans all previously\n" );
X   fprintf( stderr, "\t    submitted files;\n" );
X   fprintf( stderr, "\t(4) Submission Event Logging Engine (S.E.L.E.) which logs all\n" );
X   fprintf( stderr, "\t    activities and queries to the submit directory for easy bug and\n" );
X   fprintf( stderr, "\t    problem detection.\n\n" );
X   fprintf( stderr, " If you have any questions regarding the use or design of this submit\n" );
X   fprintf( stderr, "program; then please mail the following aliases:\n\n" );
X   fprintf( stderr, "\tBrad.Drysdale@mq.edu.au \t Kar-Tung.Chong@mq.edu.au\n\n" );
X   fprintf( stderr, "Note: This prgram info screen is an undocumented function, which is known\n" );
X   fprintf( stderr, "      by only a select few. If it wasn't me or George that told you about\n" );
X   fprintf( stderr, "      this function, then you must be a clever person indeed !!!!!\n\n\n\n" );
X   fprintf( stderr, "Brad says: '...yeah right...Marge, I dunno if it's the beer talking or not,\n" );
X   fprintf( stderr, "           but you've got a butt that just won't quit..I'm havxgy a greaaassct\n" );
X   fprintf( stderr, "           teiyme hdsukj....FIVE BUCKS !!!  get outta here...'\n\n\n" );
X   fprintf( stderr, "George says: '*hehe* she's a babe, SCHWING !! *grin* *purr*'\n\n" );
X   fprintf( stderr, "\tYo George, you get the feeling we are being watched?\n\n" );
X}
X
X
X/* ----------------------- Certify --------------------------- */
X
Xint Certify( void )
X{
X   char Answer[2];
X   printf( "\t Are you sure you want to delete all submissions? (y/n): " );
X   scanf( "%s", Answer );
X   printf( "\n\n" );
X   if( (strcmp(Answer, "y") == NULL) || (strcmp(Answer, "Y") == NULL) )
X      return 1;
X   else
X   {
X      printf( "\t\t\t   No files removed\n\n" );
X      exit(0);
X   }
X}
X   
X/* ------------------------- Main ---------------------------- */
X
Xvoid main( int argc, char **argv )
X{
X   /* Define a few global variables */
X   FILE   *fd = (FILE *)0;
X   time_t time();
X   DIR    *dirp;
X   struct direct *dp;
X   int count;
X   int DoIt = 0;
X   char RName[80];
X
X   /* Show author info */
X   if( (argc == 2) && (strcmp(argv[1], "#@#") == NULL) )
X   {
X      Author_Info();
X      exit(0);
X   }
X
X   if( argc < 3 )        /* Not enough parameters supplied */
X   {
X      Usage();           /* Show general usage */
X      exit(0);           /* Clean exit         */
X   }
X
X   pwd = getpwuid( getuid() );  /* Get user identity */
X   
X   strcpy( directory, base );       /* Define directory to be the base dir */
X   strcat( directory, argv[1] );    /* Append the course-name directory    */
X   
X   if( stat(directory, &statcourse) < 0 )  /* Does course exist */
X   {
X      fprintf( stderr, "\nSorry, but the course %s does not exist.\n\n", argv[1]);
X      exit(0);        /* Clean exit */
X   }
X   
X   strcpy( logname, directory );    /* Define log directory */
X   strcat( logname, log );          /* Append the log directory name */
X   strcat( logname, "/" );
X   strcat( logname, pwd->pw_name );
X
X   /* Check to see if logfile exists, if not then create it. */
X   if( stat( logname, &statfile ) != 0 )
X   {
X      if( (fd = fopen( logname, "w" ) ) != NULL )
X      {
X         timed = time( (time_t *) 0 );
X         fprintf( fd, "==================================================================\n" );
X         fprintf( fd, "Submission LogFile for %s (%s)\nCreated at %s", pwd->pw_name,
X                  pwd->pw_gecos,ctime( &timed ));
X         fprintf( fd, "==================================================================\n\n" );
X         (void)fflush( fd );
X         (void)fclose( fd );
X         Log_Action( "Action Logging", "Started" );
X      }
X      else
X      {
X         fprintf( stderr, "%s\n", logname );
X         exit(0);
X      }
X   } 
X
X   /* If spool directory does not exist then create it and change ownership
X      to the course coordinator who owns the directory above. */
X      
X   strcat( directory, spool );      /* Append the spool directory */
X   ErrorH( directory, "spool" );     /* Check for errors */
X   
X   strcat( directory, "/" );            /* Append the trailing slash */
X   strcat( directory, pwd->pw_name);    /* Append user name          */
X
X   /* Show files submitted by the user */
X   if( (argc == 3) && (((strcmp( argv[2], "-ls") == NULL)|| (argv[2][0] == '?'))) ) 
X   {
X      Display_Sub( directory, argv[1] );
X      Log_Action( "Queried", "Submitted Files" );
X      exit(0);
X   }
X
X   
X   /* Submit a file */
X   fprintf( stderr, "\t+---------------------------------------------------------+\n" );
X   fprintf( stderr, "\t|                                                         |\n" );
X   fprintf( stderr, "\t|  Submit v1.0  * Brad Drysdale, George Kar-Tung Chong *  |\n" );
X   fprintf( stderr, "\t|  =====================================================  |\n" );
X   fprintf( stderr, "\t|                                                         |\n" );
X   fprintf( stderr, "\t+---------------------------------------------------------+\n\n" );
X
X   printf( "\t    Transaction request by %s for course %s.\n\n", pwd->pw_name, argv[1] );
X
X   if( ((strcmp(argv[2], "-rm") == NULL) || (strcmp(argv[2], "--") == NULL)) )
X     DoIt = Certify();
X
X   if( (dirp = opendir( directory )) != NULL )
X   {
X      while( (dp = readdir( dirp )) != NULL )
X      {
X         if( isdir( dp->d_name ) != 1 )
X         {
X            strcpy( lbuf, directory );
X            strcat( lbuf, "/" );
X            strcat( lbuf, dp->d_name ); 
X            if((strcmp(argv[2], "--") == NULL) || (strcmp(argv[2], "-rm") == NULL) && (argc == 3))
X            {
X               if(( strcmp( dp->d_name, "HEADER" ) != NULL ) && (DoIt == 1) )
X               { 
X                  if( Remove_File( lbuf ) != 0 )
X                     perror( dp->d_name );
X                  else
X                  {
X                     printf( "Removing %s from submissions directory.\n", dp->d_name );
X                     Log_Action( "Unsubmitted", dp->d_name );
X                  }      
X               }
X            } 
X         }
X      }
X      if( (strcmp( argv[2], "--" ) == NULL) || (strcmp( argv[2], "-rm" ) == NULL ) )
X      {
X         Log_Action( "Cleaned", "All Submissions" );
X         exit(0);
X      }
X   }
X   else
X      ErrorH( directory, "submissions" );
X
X   for( count = 2; count < argc; count ++ )
X   {
X      if( argv[count][0] == '-' )
X      {
X         strcpy( argv[count], argv[count] + 1 );
X         strcpy( lbuf, directory );
X         strcat( lbuf, "/" );
X         strcat( lbuf, argv[count]);
X         if( Remove_File( lbuf ) != 0 )
X            perror( argv[count] );
X         else
X         {
X            timed = time( (time_t *) 0 );
X            cp = ctime ( &timed );
X            cp[ strlen( cp ) - 1 ] = '\0';
X            printf( "%s (%s) at %s removed %s\n", pwd->pw_name, pwd->pw_gecos, cp, argv[count] );
X            Log_Action( "Unsubmitted", argv[count] );
X         }
X      }
X      else
X      {   
X      char *pi;
X      if( isdir( argv[count] ) == 1 )
X      {
X         fprintf( stderr, "\"%s\" is a directory and will not be copied\n", argv[count] );
X         continue;
X      }
X      strcpy( lbuf, directory );
X      strcat( lbuf, "/" );
X      if( (pi = strrchr( argv[count], '/' )) != NULL )
X         pi++;
X      else
X         pi = argv[count];
X      strcat( lbuf, pi );
X      Determine_Protection( argv[count] );
X      if( stat( argv[count], &statfile ) < 0 )
X      {
X         printf("The file %s does not exist.\n", argv[count] );
X         continue;
X      }
X      else
X         if( statfile.st_uid != pwd->pw_uid )
X         {
X            printf( "You don't own the file %s, you are not allowed to submit it as your work.\n", argv[count] );
X            Log_Action( "Attempted an", "Illegal Submission" );
X            continue;
X         }
X      Copy_File( lbuf, argv[count], statcourse.st_uid, statcourse.st_gid );
X      printf( "\n" );
X 
X      }
X   }
X
X
X
X/*   (void)sprintf( command, "%s/ident", directory ); */
X   strcpy( command, directory );
X   strcat( command, "/HEADER" );
X/*   Remove_File( command );  */
X
X   if( stat( command, &statfile) != 0 )
X   {
X   printf( "\nEnter your real name: " );
X   gets( RName );
X   printf( "\n\n" );
X
X   if( (fd = fopen( command, "w" )) == NULL )
X   {
X      fprintf( stderr, "%s\n", command );
X      exit(0);
X   }
X   fprintf( fd, "#######################################################\n" );
X   fprintf( fd, "##                                                   ##\n" );
X   fprintf( fd, "##  Real Name     : %s\n", RName );
X   fprintf( fd, "##  Student ID    : %s\n", pwd->pw_name );
X   timed = time( (time_t *) 0 );
X   fprintf( fd, "##  Created At    : %s", ctime( &timed ) );
X   fprintf( fd, "##                                                   ##\n" );
X   fprintf( fd, "#######################################################\n" );
X   (void)fflush( fd );
X   (void)fclose( fd );
X
X   if( chown( command, statcourse.st_uid, statcourse.st_gid ) != 0 )
X      perror( "chown-ident" );
X   if( chmod( command, 0440 ) != 0 )
X      perror( "chmod-ident" );
X   printf( "\n" );
X   }   
X}
X
END_OF_FILE
  if test 17031 -ne `wc -c <'submit.c'`; then
    echo shar: \"'submit.c'\" unpacked with wrong size!
  fi
  # end of 'submit.c'
fi
echo shar: End of archive 1 \(of 1\).
cp /dev/null ark1isdone
MISSING=""
for I in 1 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have the archive.
    rm -f ark[1-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
