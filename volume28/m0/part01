Newsgroups: comp.sources.unix
From: tschudin@cui.unige.ch (Christian Tschudin)
Subject: v28i051: m0 - a messenger execution environment, Part01/12
Message-id: <1.770917478.19277@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: tschudin@cui.unige.ch (Christian Tschudin)
Posting-Number: Volume 28, Issue 51
Archive-Name: m0/part01

	M0 (M-Zero) is a new high-level programming language and
	execution environment similar to PostScript that is designed
	for the messenger-based provision of computer communication
	services. (Messengers are protocol-unspecific instruction
	sequences that `replace' the protocol-specific messages on
	which ordinary computer communication protocols are based).

	In a first place this experimental package contains a complete
	M0 interpreter. There is also a 30-page report on M0 (see the
	file M0.ps) that provides a brief introduction to the concept
	of messenger-based computer communications and which contains
	the manual of the M0 language and format definition. Some
	small examples of M0 messengers are also included and discussed.

	Keywords: M0 programming language, computer communications,
	communication by messengers, protocol implementation, protocol
	interpretation.

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 1 (of 12)."
# Contents:  Makefile README TODO.doc c_con.c c_file.c c_proto.h
#   chksum.h copyrght.h error.h frag_0.m0 fragment.m0 hdr.h l_compat.c
#   l_strbuf.c l_time.c m0strip.1 makefile.dos makefile.osf
#   makefile.so4 makefile.so5 makefile.ult makefile.unx neigh_ex.m0
#   neighbor.m0 o_array.c o_attr.c o_string.c proc.h startup.m0
#   strbuf.h
# Wrapped by tschudin@cuisunf on Mon Jun  6 13:26:00 1994
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Makefile'\"
else
echo shar: Extracting \"'Makefile'\" \(783 characters\)
sed "s/^X//" >'Makefile' <<'END_OF_FILE'
X# Makefile for M0
X# christian tschudin, may 1994
X
X# possible values for "OS":
X#	so4		for SunOS 4.1.3
X#	so5		for SunOS 5.1 (aka Solaris 2.1)
X#	ult		for DEC Ultrix v4.3
X#	osf		for DEC OSF/1 v1.3
X#	dos		for MS/DOS >5.x
X#
XOS=so4
X
X
X# default paths where binaries, M0 files and man pages
X# should be installed and/or can be found:
X
X# be explicit for MS/DOS:
X#CWD=\\\\cft\\\\msgr\\\\src
X# so4
XCWD=$(PWD)
X# so5 and osf:
X#CWD=/user/u2/tschudin/msgr/src
X# ult:
X#CWD=/guru/tschudin/m0
X
XM0DEFBINPATH=$(CWD)
XM0DEFLIBPATH=$(CWD)
XM0DEFMANPATH=$(CWD)
X
X
X# add -DDEBUG for enabling tracing information
XCOPT= -DDEBUG
X
X# -------------------------------------------------------------------------
X# here we go ...
X
Xinclude makefile.$(OS)
X
Xall: exefiles
X
Xinclude makefile.all
X
Xexefiles: $(EXEFILES)
X
X# eof
END_OF_FILE
if test 783 -ne `wc -c <'Makefile'`; then
    echo shar: \"'Makefile'\" unpacked with wrong size!
fi
# end of 'Makefile'
fi
if test -f 'README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'README'\"
else
echo shar: Extracting \"'README'\" \(4073 characters\)
sed "s/^X//" >'README' <<'END_OF_FILE'
X# README for M0 version 0.11, may 1994
X
X
X		  Welcome to the world of messengers and to
X		M0 - the first messenger execution environment!
X
X
XSee the file `FILES.doc' for an overview of the files in this directory.
X
XSee the file `LICENSE' for the GNU General Public License
X
X
X				What is M0?
X
X	M0 (M-Zero) is a new high-level programming language and
X	execution environment similar to PostScript that is designed
X	for the messenger-based provision of computer communication
X	services. (Messengers are protocol-unspecific instruction
X	sequences that `replace' the protocol-specific messages on
X	which ordinary computer communication protocols are based).
X
X	In a first place this experimental package contains a complete
X	M0 interpreter. There is also a 30-page report on M0 (see the
X	file M0.ps) that provides a brief introduction to the concept
X	of messenger-based computer communications and which contains
X	the manual of the M0 language and format definition. Some
X	small examples of M0 messengers are also included and discussed.
X
X	Keywords: M0 programming language, computer communications,
X	communication by messengers, protocol implementation, protocol
X	interpretation.
X
X------------------------------------------------------------------------------
X
XYou need an ANSI compliant C-compiler in order to compile the present
XC-sources. The package has been compiled in the following environments:
X
X
X	Operating System	Compilers		Supported M0 Channels
X							console	udp/ip	ether
X	---------------------	----------------	------- ------- ------
X	SunOS 4.1.3		gcc 2.5.8, acc		x	x	x
X	Solaris 2.1		SPARCworks		x
X	Ultrix 4.3		c89			x	x
X	OSF/1 1.3		gcc 2.5.8		x	x
X	MS/DOS 5.0		TurboC++ 1.0		x
X
XIn other words: this package is currently not very useful for the MS/DOS and
XSolaris environment, although one can play around with the stand-alone
XM0 interpreter (the console program m0c).
X
X------------------------------------------------------------------------------
X
XHow to compile this package:
X
Xa) Modify the main `Makefile':
X	- change the OS variable to fit your operating system
X	- change the M0DEFBINPATH to point to the final location
X	  of the M0 binaries (m0, m0c, m0uc and m0strip)
X	- change the M0DEFLIBPATH to point to the final location
X	  of the M0 startup files (startup.m0, cons_ini.m0, longdict.m0)
X	- change the M0DEFMANPATH to point to the final location
X	  of the M0 man pages (m0.1, m0c.1, m0uc.1, m0strip.1)
X	- or if you do not want to install the package, let them all point
X	  to the same place where you compile and change the CWD variable.
X
Xb) Verify the chosen compiler and the compiler options
X	- for this, you have to look into the platform specific
X	  makefiles (makefile.so4, makefile.osf etc)
X
Xc) Note for MS/DOS: you need a `make.exe' that supports the `include'
X	command (e.g. the port of GNU-make). If you do not have
X	such a make, replace the two `include' lines in `Makefile'
X	with the complete content of the indicated files.
X
Xd) Start make
X	- and hope that Murphy isn't looking ...
X
Xe) Check the compilation by starting the local console program `m0c':
X	a `M0>' prompt should appear on your terminal screen.
X	Use `quit' to terminate the console.
X
Xf) For UNIX platforms with ethernet access: the m0 and m0c program must
X   execute the channel initialisation code under the root account,
X   otherwise ethernet channels will not be available. Thus, these
X   programs should be owned by root and have the setuid bit set
X   (the root privileges are dropped before any file access is made).
X   If the program cannot open the ethernet device, it simply skips this
X   channel interface but continues normal operation.
X
X------------------------------------------------------------------------------
X
XThe latest version of M0 can be found via anonymous FTP:
X	host:       cui.unige.ch (129.194.70.1)
X	directory:  /pub/m0
X
XPlease report bugs, problems, comments and modifications to
X
X	Christian F. Tschudin
X	Centre Universitaire d'Informatique
X	University of Geneva
X	24, rue du General Dufour
X	CH - 1211 Geneva 4, Switzerland
X
X	<tschudin@cui.unige.ch>
X
X# eof
END_OF_FILE
if test 4073 -ne `wc -c <'README'`; then
    echo shar: \"'README'\" unpacked with wrong size!
fi
# end of 'README'
fi
if test -f 'TODO.doc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'TODO.doc'\"
else
echo shar: Extracting \"'TODO.doc'\" \(1465 characters\)
sed "s/^X//" >'TODO.doc' <<'END_OF_FILE'
X# TODO.doc
X# things to do or review (May 1994)
X
Xglobaldict
X	prevent messengers from removing the rw attributes from
X	the global dictionary _
X
Xerror handling
X	review the problem of stack overflows
X
Xl_compat
X	automatic hostid generation for MSDOS?
X
Xl_compat, std.h (randomize)
X	include the host id and other local information for setting the seed
X
Xm0.c with DEBUG
X	add option to toggle dumping of aborted processes when compiled
X
Xmessenger packaging program
X	create m0tomsgr.c for adding and computing the M0 header fields.
X
Xmessenger vector program
X	create m0v.c for sending a messenger via UDP, NIT etc
X
Xtimeout mechanism ( next_timeout() )
X	check for integer overflow (microseconds!)
X
Xreadme.doc
X	Explain how to add new channels to the C-sources,
X	and in the C-sources: find a more generic way to initialize channels
X
XAdd a DLPI channel for Solaris
X
XAdd a packet driver channel for MS/DOS
X
Xcons_ini.m0 and m0c/m0uc
X	add explicit signal of end-of-download for iterating over
X	several download files
X
Xcyclic datastructures
X	M0 implements a reference counter for each data object. This
X	helps in freeing memory and avoids garbage collection runs.
X	However, this does not work correctly for cyclic data structure,
X	where special memory sweeps are (would be) nevertheless necessary.
X
Xc_nit, c_udp:
X	Implement a gather-write strategy for sending a messenger
X	(exploit the fragments). But in most cases the msgr string
X	is allocated in one piece. (result of _ctm)
X
X# eof
END_OF_FILE
if test 1465 -ne `wc -c <'TODO.doc'`; then
    echo shar: \"'TODO.doc'\" unpacked with wrong size!
fi
# end of 'TODO.doc'
fi
if test -f 'c_con.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'c_con.c'\"
else
echo shar: Extracting \"'c_con.c'\" \(2415 characters\)
sed "s/^X//" >'c_con.c' <<'END_OF_FILE'
X/*
X	c_con.c
X*/
X/*  Copyright (c) 1994 Christian F. Tschudin. All rights reserved.
X
X    Distributed under the terms of the GNU General Public License
X    version 2 of june 1991 as published by the Free Software
X    Foundation, Inc.
X
X		     This file is part of M0.
X
XM0 is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY.  No author or distributor accepts responsibility to anyone for
Xthe consequences of using it or for whether it serves any particular
Xpurpose or works at all, unless he says so in writing.  Refer to the GNU
XGeneral Public License for full details. 
X
XEveryone is granted permission to copy, modify and redistribute M0, but
Xonly under the conditions described in the GNU General Public License. 
XA copy of this license is supposed to have been given to you along with
XM0 so you can know your rights and responsibilities.  It should be in a
Xfile named LICENSE.  Among other things, the copyright notice and this
Xnotice must be preserved on all copies.  */
X
X#include "c_proto.h"
X
X
X#ifdef CHANNEL_CONSOLE
X
Xint msgr_was_empty = 0;
Xeindex console_addr;
Xeindex console_name;
Xstatic byteptr k_queue, k_vect;
X
Xstatic void
Xline2msgr(int fd, eindex *m, eindex *o)
X{
X#define LINESIZE	256
X	byte line[LINESIZE];
X	int cnt;
X
X	cnt = read(0, line, LINESIZE);
X	if (cnt > 0) {
X		uint msgrlen;
X		byteptr s =  make_msgr(k_queue,
X					k_vect, strlen((char*)k_vect),
X					cnt>1?(byteptr)line:0, cnt-1,
X					&msgrlen);
X
X		TRACE(3, printf("console line2msgr, %d bytes\n", cnt))
X
X		*m = str_import(0, s, msgrlen, msgrlen);
X		*o = null_val;
X		increfp(gaddr(null_val));
X	} else
X		*m = 0;
X}
X
X
Xint
Xconsole_init(byteptr keyboard_queue, byteptr keyboard_vect)
X{
X	k_queue = keyboard_queue;
X	k_vect = keyboard_vect;
X
X	console_name = name_add((byteptr)"console", 7, A_EXECUTABLE);
X	add_incoming(0, line2msgr, console_name, 0); /* stdin */
X
X	console_addr = new_array(0, 1);
X
X	return 0;
X}
X
X
Xstatic void
Xconsole_submit(mproc p, void *data, eindex m)
X{
X	eindex key = (eindex) data;
X	uint len = elen(p,m);
X
X	TRACE(3, printf("console submit %d bytes\n", len))
X
X	if (len) {
X		byteptr s = malloc(len);
X		str_export(p, s, m, 0, len);
X		write(1, s, len);
X		free((char*)s);
X	} else
X		msgr_was_empty = 1;
X	dict_undef(0, channeldict, key);
X	return;
X}
X
X
Xeindex
Xadd_console_channel()
X{
X	eindex key;
X	byte bits[8];
X
X	random64(bits);
X	key = key_add(bits);
X	new_channel(key, (void*)key, console_submit);
X
X	return key;
X}
X#endif
END_OF_FILE
if test 2415 -ne `wc -c <'c_con.c'`; then
    echo shar: \"'c_con.c'\" unpacked with wrong size!
fi
# end of 'c_con.c'
fi
if test -f 'c_file.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'c_file.c'\"
else
echo shar: Extracting \"'c_file.c'\" \(1893 characters\)
sed "s/^X//" >'c_file.c' <<'END_OF_FILE'
X/*
X	c_file.c
X*/
X/*  Copyright (c) 1994 Christian F. Tschudin. All rights reserved.
X
X    Distributed under the terms of the GNU General Public License
X    version 2 of june 1991 as published by the Free Software
X    Foundation, Inc.
X
X		     This file is part of M0.
X
XM0 is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY.  No author or distributor accepts responsibility to anyone for
Xthe consequences of using it or for whether it serves any particular
Xpurpose or works at all, unless he says so in writing.  Refer to the GNU
XGeneral Public License for full details. 
X
XEveryone is granted permission to copy, modify and redistribute M0, but
Xonly under the conditions described in the GNU General Public License. 
XA copy of this license is supposed to have been given to you along with
XM0 so you can know your rights and responsibilities.  It should be in a
Xfile named LICENSE.  Among other things, the copyright notice and this
Xnotice must be preserved on all copies.  */
X
X#include "c_proto.h"
X
X
X#ifdef CHANNEL_FILE
X
Xstatic void
Xfile_submit(mproc p, void *data, eindex m)
X{
X	uint len = elen(p,m);
X	char *fn = unique_filename("sbmt");
X	FILE *f = fopen(fn, "w+b");
X
X	if (!f) {
X		fprintf(stderr, "  ## writing to file <%s> failed\n");
X		return;
X	}
X	for (i = 0; i < len; i++)
X		fputc(str_get(p, m, i), f);
X	fclose(f);
X	TRACE(3, printf("file submit %s %s\n", fn, (char *) data))
X	return;
X}
X
Xeindex
Xadd_file_channel(uint i)
X{
X	/* installs under key `i' a file channel.
X	   Note: the key is NOT removed after having used
X	   the channel. Instead, each submit creates a new
X	   file with an unique file name! */
X	byte s[8], t[20];
X	eindex key;
X
X	memset(s,0,8);
X	memcpy(s+4,&i,4);
X
X	sprintf((char*)t, "%d", (int) i);
X	key = key_add(s);
X
X	if (dict_get(0, channeldict, key) != 0)
X		return 0;
X
X	new_channel(key, strdup(t), file_submit);
X
X	return key;
X}
X
X#endif /* CHANNEL_FILE */
END_OF_FILE
if test 1893 -ne `wc -c <'c_file.c'`; then
    echo shar: \"'c_file.c'\" unpacked with wrong size!
fi
# end of 'c_file.c'
fi
if test -f 'c_proto.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'c_proto.h'\"
else
echo shar: Extracting \"'c_proto.h'\" \(2559 characters\)
sed "s/^X//" >'c_proto.h' <<'END_OF_FILE'
X/*
X	c_proto.h
X*/
X/*  Copyright (c) 1994 Christian F. Tschudin. All rights reserved.
X
X    Distributed under the terms of the GNU General Public License
X    version 2 of june 1991 as published by the Free Software
X    Foundation, Inc.
X
X		     This file is part of M0.
X
XM0 is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY.  No author or distributor accepts responsibility to anyone for
Xthe consequences of using it or for whether it serves any particular
Xpurpose or works at all, unless he says so in writing.  Refer to the GNU
XGeneral Public License for full details. 
X
XEveryone is granted permission to copy, modify and redistribute M0, but
Xonly under the conditions described in the GNU General Public License. 
XA copy of this license is supposed to have been given to you along with
XM0 so you can know your rights and responsibilities.  It should be in a
Xfile named LICENSE.  Among other things, the copyright notice and this
Xnotice must be preserved on all copies.  */
X
X#ifndef C_PROTO_H
X#define C_PROTO_H
X
X#include "l_proto.h"
X
X
X#ifdef CHANNEL_CONSOLE	/* c_con.c */
Xextern int	msgr_was_empty;
Xextern eindex	console_addr;
Xextern eindex	console_name;
Xextern int	console_init(byteptr keyboard_queue, byteptr keyboard_vect);
Xextern eindex	add_console_channel();
X#endif
X
X
X#ifdef CHANNEL_FILE /* c_file.c */
Xextern eindex	file_addr;
Xextern int	file_init();
Xextern eindex	add_file_channel(uint i);
X#endif
X
X
X#ifdef CHANNEL_NIT /* c_nit.c */
Xtypedef byte	eth[6];
Xextern eindex	nit_addr;	/* array with the local ethernet addresses */
Xextern eindex	nit_name;
Xextern char**	get_eth_devices();
Xextern int	nit_init(char **devs, int proto); /* names of devices to open */
Xextern void	nit_recv(int fd, eindex *msgr, eindex *src);
Xextern int	nit_send(sint chan, byteptr dest, byteptr packet, uint len);
X#define ETHERNET_TYPE	(0x0ffff &(('M'<<8) | '0'))	/* 0x4d30 */
Xextern eindex	add_nit_channel(sint chan_no, byteptr dest);
X#endif
X
X
X#ifdef CHANNEL_UDP /* c_udp.c */
Xextern int	udp_listen(uint host, int port);
Xextern eindex	udp_addr;	/* array with the local udp addresses */
Xextern eindex	udp_name;
Xextern uint*	get_ip_addresses();
Xextern int	udp_init(uint *ip, int port);
Xextern void	udp_recv(int s, eindex *msgr, eindex *src);
Xextern int	udp_send(int s, uint host, int port,
X					byteptr packet, int len);
Xextern char* iptoa(uint host);		/* unsigned int to a.b.c.d format */
X#define UDP_SERVERPORT	(0x0ffff &(('M'<<8) | '0'))	/* 0x4d30 */
Xextern eindex	add_udp_channel(sint chan, uint desthost, ushort port);
X#endif /* CHANNEL_UDP */
X
X
X#endif
END_OF_FILE
if test 2559 -ne `wc -c <'c_proto.h'`; then
    echo shar: \"'c_proto.h'\" unpacked with wrong size!
fi
# end of 'c_proto.h'
fi
if test -f 'chksum.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'chksum.h'\"
else
echo shar: Extracting \"'chksum.h'\" \(1105 characters\)
sed "s/^X//" >'chksum.h' <<'END_OF_FILE'
X/*
X	chksum.h
X*/
X/*  Copyright (c) 1994 Christian F. Tschudin. All rights reserved.
X
X    Distributed under the terms of the GNU General Public License
X    version 2 of june 1991 as published by the Free Software
X    Foundation, Inc.
X
X		     This file is part of M0.
X
XM0 is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY.  No author or distributor accepts responsibility to anyone for
Xthe consequences of using it or for whether it serves any particular
Xpurpose or works at all, unless he says so in writing.  Refer to the GNU
XGeneral Public License for full details. 
X
XEveryone is granted permission to copy, modify and redistribute M0, but
Xonly under the conditions described in the GNU General Public License. 
XA copy of this license is supposed to have been given to you along with
XM0 so you can know your rights and responsibilities.  It should be in a
Xfile named LICENSE.  Among other things, the copyright notice and this
Xnotice must be preserved on all copies.  */
X
X#ifndef CHKSUM_H
X#define CHKSUM_H
X
X#include "std.h"
X
Xextern ushort crc_ccitt(byteptr s, uint len);
X
X#endif
END_OF_FILE
if test 1105 -ne `wc -c <'chksum.h'`; then
    echo shar: \"'chksum.h'\" unpacked with wrong size!
fi
# end of 'chksum.h'
fi
if test -f 'copyrght.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'copyrght.h'\"
else
echo shar: Extracting \"'copyrght.h'\" \(1083 characters\)
sed "s/^X//" >'copyrght.h' <<'END_OF_FILE'
X/*
X	copyrght.h
X*/
X/*  Copyright (c) 1994 Christian F. Tschudin. All rights reserved.
X
X    Distributed under the terms of the GNU General Public License
X    version 2 of june 1991 as published by the Free Software
X    Foundation, Inc.
X
X		     This file is part of M0.
X
XM0 is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY.  No author or distributor accepts responsibility to anyone for
Xthe consequences of using it or for whether it serves any particular
Xpurpose or works at all, unless he says so in writing.  Refer to the GNU
XGeneral Public License for full details. 
X
XEveryone is granted permission to copy, modify and redistribute M0, but
Xonly under the conditions described in the GNU General Public License. 
XA copy of this license is supposed to have been given to you along with
XM0 so you can know your rights and responsibilities.  It should be in a
Xfile named LICENSE.  Among other things, the copyright notice and this
Xnotice must be preserved on all copies.  */
X
X#define COPYRIGHT "Copyright (c) 1994 Christian F. Tschudin. All rights reserved."
END_OF_FILE
if test 1083 -ne `wc -c <'copyrght.h'`; then
    echo shar: \"'copyrght.h'\" unpacked with wrong size!
fi
# end of 'copyrght.h'
fi
if test -f 'error.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'error.h'\"
else
echo shar: Extracting \"'error.h'\" \(1679 characters\)
sed "s/^X//" >'error.h' <<'END_OF_FILE'
X/*
X	error.h
X*/
X/*  Copyright (c) 1994 Christian F. Tschudin. All rights reserved.
X
X    Distributed under the terms of the GNU General Public License
X    version 2 of june 1991 as published by the Free Software
X    Foundation, Inc.
X
X		     This file is part of M0.
X
XM0 is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY.  No author or distributor accepts responsibility to anyone for
Xthe consequences of using it or for whether it serves any particular
Xpurpose or works at all, unless he says so in writing.  Refer to the GNU
XGeneral Public License for full details. 
X
XEveryone is granted permission to copy, modify and redistribute M0, but
Xonly under the conditions described in the GNU General Public License. 
XA copy of this license is supposed to have been given to you along with
XM0 so you can know your rights and responsibilities.  It should be in a
Xfile named LICENSE.  Among other things, the copyright notice and this
Xnotice must be preserved on all copies.  */
X
X#ifndef ERROR_H
X#define ERROR_H
X
X#include "std.h"
X
Xenum {
X	ERR_STACK_UNDERFLOW,
X	ERR_OSTACK_OVERFLOW,
X	ERR_DSTACK_OVERFLOW,
X	ERR_ESTACK_OVERFLOW,
X
X	ERR_TYPE_CHECK,
X	ERR_RANGE_CHECK,
X	ERR_ACCESS_CHECK,
X	ERR_DIVISION_BY_ZERO,
X
X	ERR_NOT_IN_LOOP,
X	ERR_NOT_IN_HALTED,
X	ERR_NO_MARK_FOUND,
X
X	ERR_DICT_FULL,
X	ERR_INVALID_CHANNEL,
X	ERR_UNDEFINED,
X
X	ERR_SYNTAX,
X	ERR_NOT_IMPLEMENTED,
X	ERR_IMPLEMENTATION_LIMIT,
X
X	ERR_CIRCULAR_DATA,
X
X	LAST_ERROR,
X
X	OK,
X
X	ERR_IN_INIT,
X	ERR_INVALID_FILE_NAME,
X	ERR_WHILE_READING_FILE,
X
X	ERR_MALLOC_FAILED,
X	ERR_OUT_OF_LOCALS,
X
X	ERR_SHORT_MSGR,
X	ERR_MSGR_CRC,
X	ERR_MSGR_WRONG_VERSION,
X
X	ERR_NO_PROCESS,
X	YIELD_CPU,
X	ABORT,
X	IDLE
X};
X
Xtypedef int retcode;
X
X#endif
END_OF_FILE
if test 1679 -ne `wc -c <'error.h'`; then
    echo shar: \"'error.h'\" unpacked with wrong size!
fi
# end of 'error.h'
fi
if test -f 'frag_0.m0' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'frag_0.m0'\"
else
echo shar: Extracting \"'frag_0.m0'\" \(189 characters\)
sed "s/^X//" >'frag_0.m0' <<'END_OF_FILE'
X# frag_0.m0
X# included by fragment.m0
X
X_,K{
X  _,G
X  X1IX1+_dat:
X  0I0 1I0G1+ :
X  0I0G2I={
X    0I1GX
X    [2 2I`2-]G {+}L
X    _ori X $
X    _,U
X  }{}?
X}{
X  _,3I1+A:
X  _,G 0I0 1: 1I1+ _dat:
X}?
END_OF_FILE
if test 189 -ne `wc -c <'frag_0.m0'`; then
    echo shar: \"'frag_0.m0'\" unpacked with wrong size!
fi
# end of 'frag_0.m0'
fi
if test -f 'fragment.m0' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'fragment.m0'\"
else
echo shar: Extracting \"'fragment.m0'\" \(1332 characters\)
sed "s/^X//" >'fragment.m0' <<'END_OF_FILE'
X# fragment.m0
X
X# fragmentation procedure (cuts a messenger into messenger fragments)
X# usage: string int  fragment  array_of_strings
X#               int is the maximum length a fragment can have
X
X# Note: this is a toy example because it assumes a reliable submission
X# channel (with en exactly-once transfer semantics, although messenger
X# fragments are allowed to arrive out of order).
X# A real fragmentation logic should be able to cope with fragment
X# loss and duplification.
X# Another limitation is that it can fail if more than 999 fragments
X# must be created.
X
X
X. 'fragment {
X  D ( .X'mX: .X'sX:
X  s`m>{
X    .'a
X#includestring frag_0.m0
X    :
X    . 'm m a`- 30- :	# header: 20, 2xinteger: 7, padding: 3
X    . 'n s` m+1- m / :
X    . 't n _cte " "+ :
X    . 'k ; :
X    [ n {
X        [k t3I_cte+a+ s[0m s`>{s`}{m}?]G .'s s[4I`s`1I-]G: ]_ctm XP
X      }L
X    ]
X  }{[s]}? )
X} :
X
X
X'printF { P	# define the test procedure only if the console is defined.
X		# This test creates many fragments and submits them localy.
X		# They reassemble themselves - the recreated final messenger
X		# prints a hello msg on the console.
X  .'test_fragment{
X    [;
X     "null0{}_cha'consoleG'_keyG!\"\x0aori=\"_ori _cte+\" (it worked!)\x0a\"+ $"
X     120S ]_ctm 150 fragment
X     {['console 0 null] X $} L
X  }:
X  "file `fragment.m0' loaded\x0a" print
X}{}?
END_OF_FILE
if test 1332 -ne `wc -c <'fragment.m0'`; then
    echo shar: \"'fragment.m0'\" unpacked with wrong size!
fi
# end of 'fragment.m0'
fi
if test -f 'hdr.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'hdr.h'\"
else
echo shar: Extracting \"'hdr.h'\" \(1162 characters\)
sed "s/^X//" >'hdr.h' <<'END_OF_FILE'
X/*
X	hdr.h
X*/
X/*  Copyright (c) 1994 Christian F. Tschudin. All rights reserved.
X
X    Distributed under the terms of the GNU General Public License
X    version 2 of june 1991 as published by the Free Software
X    Foundation, Inc.
X
X		     This file is part of M0.
X
XM0 is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY.  No author or distributor accepts responsibility to anyone for
Xthe consequences of using it or for whether it serves any particular
Xpurpose or works at all, unless he says so in writing.  Refer to the GNU
XGeneral Public License for full details. 
X
XEveryone is granted permission to copy, modify and redistribute M0, but
Xonly under the conditions described in the GNU General Public License. 
XA copy of this license is supposed to have been given to you along with
XM0 so you can know your rights and responsibilities.  It should be in a
Xfile named LICENSE.  Among other things, the copyright notice and this
Xnotice must be preserved on all copies.  */
X
X#ifndef HDR_H
X#define HDR_H
X
X#include "std.h"
X
Xstruct header_s {
X	ushort crc;
X	byte version;
X	byte flags;
X	byte queue[8];
X	uint32 codelen;
X	uint32 datalen;
X};
X
X#endif
END_OF_FILE
if test 1162 -ne `wc -c <'hdr.h'`; then
    echo shar: \"'hdr.h'\" unpacked with wrong size!
fi
# end of 'hdr.h'
fi
if test -f 'l_compat.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'l_compat.c'\"
else
echo shar: Extracting \"'l_compat.c'\" \(2335 characters\)
sed "s/^X//" >'l_compat.c' <<'END_OF_FILE'
X/*
X	l_compat.c
X*/
X/*  Copyright (c) 1994 Christian F. Tschudin. All rights reserved.
X
X    Distributed under the terms of the GNU General Public License
X    version 2 of june 1991 as published by the Free Software
X    Foundation, Inc.
X
X		     This file is part of M0.
X
XM0 is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY.  No author or distributor accepts responsibility to anyone for
Xthe consequences of using it or for whether it serves any particular
Xpurpose or works at all, unless he says so in writing.  Refer to the GNU
XGeneral Public License for full details. 
X
XEveryone is granted permission to copy, modify and redistribute M0, but
Xonly under the conditions described in the GNU General Public License. 
XA copy of this license is supposed to have been given to you along with
XM0 so you can know your rights and responsibilities.  It should be in a
Xfile named LICENSE.  Among other things, the copyright notice and this
Xnotice must be preserved on all copies.  */
X
X#include "l_proto.h"
X
X
X/* fillin_hostid	-------------------------------------------------- */
X
Xvoid
Xfillin_hostid(byteptr s)
X{
X#ifdef __MSDOS__
X	memcpy((char*)s, " MS/DOS ", 8);
X#else
X  #include <sys/utsname.h>
X	struct utsname uts;
X	byteptr p = (byteptr) &uts;
X	int i;
X
X	memset((char*)p, 0, sizeof(uts));
X	uname(&uts);
X	memset((char*)s, 0, 8);
X	for (i = 0; i < sizeof(uts); i++)
X		s[i%8] ^= *p++;
X#endif
X}
X
X
X/* get_utc	---------------------------------------------------------- */
X
X#include <time.h>
X
Xvoid
Xget_utc(uint *sec, uint *usec)
X{
X#ifdef SUNOS5
X	struct timespec t;
X	clock_gettime(CLOCK_REALTIME, &t);
X	*sec = t.tv_sec;
X	*usec = t.tv_nsec / 1000;
X#else /* !SUNOS5 */
X# include <sys/timeb.h>
X	struct timeb t;
X	ftime(&t);
X	*sec = t.time;
X	*usec = 1000L * t.millitm;
X#endif /* !SUNOS5 */
X}
X
X
X/* random	---------------------------------------------------------- */
X
X#ifdef SUNOS5
Xlong
Xrandom()
X{
X	uint r = 0;
X	int i;
X
X	for (i = 0; i < 5; i++)
X		r ^= lrand48() << (7*i);
X	return (long) r;
X}
X
Xvoid
Xsrandom(long t)
X{
X	srand48(t);
X}
X#endif /* SUNOS5 *.
X
X
X#ifdef unix
Xvoid
Xrandomize()
X{
X	srandom(time(NULL));
X}
X#endif /* unix */
X
X
X/* strdup	---------------------------------------------------------- */
X
X#ifdef __ultrix
Xbyteptr
Xstrdup(byteptr s)
X{
X	return (byteptr)strcpy(malloc(strlen((char *)s)+1), (char *)s);
X}
X#endif /* __ultrix */
END_OF_FILE
if test 2335 -ne `wc -c <'l_compat.c'`; then
    echo shar: \"'l_compat.c'\" unpacked with wrong size!
fi
# end of 'l_compat.c'
fi
if test -f 'l_strbuf.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'l_strbuf.c'\"
else
echo shar: Extracting \"'l_strbuf.c'\" \(1733 characters\)
sed "s/^X//" >'l_strbuf.c' <<'END_OF_FILE'
X/*
X	l_strbuf.c
X*/
X/*  Copyright (c) 1994 Christian F. Tschudin. All rights reserved.
X
X    Distributed under the terms of the GNU General Public License
X    version 2 of june 1991 as published by the Free Software
X    Foundation, Inc.
X
X		     This file is part of M0.
X
XM0 is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY.  No author or distributor accepts responsibility to anyone for
Xthe consequences of using it or for whether it serves any particular
Xpurpose or works at all, unless he says so in writing.  Refer to the GNU
XGeneral Public License for full details. 
X
XEveryone is granted permission to copy, modify and redistribute M0, but
Xonly under the conditions described in the GNU General Public License. 
XA copy of this license is supposed to have been given to you along with
XM0 so you can know your rights and responsibilities.  It should be in a
Xfile named LICENSE.  Among other things, the copyright notice and this
Xnotice must be preserved on all copies.  */
X
X#include "strbuf.h"
X
Xretcode
Xbuf_add(struct buf_s *bp, byteptr s, uint len)
X{
X#define SLICE	128
X	byte c;
X
X	while (bp->len+len > bp->alen) {
X		if (bp->alen == 0)
X			bp->buf = malloc(SLICE);
X		else
X			bp->buf = (byteptr) realloc((char*)(bp->buf),
X							bp->alen+SLICE);
X		if (!bp->buf)
X			return ERR_MALLOC_FAILED;
X		bp->alen += SLICE;
X	}
X	memcpy((char*)(bp->buf + bp->len), (char*)s, len);
X	bp->len += len;
X	c = s[len-1];
X	if (isupper(c))
X		bp->last_char = UPPER;
X	else if (islower(c) || c == '_')
X		bp->last_char = LOWER;
X	else if (isdigit(c))
X		bp->last_char = DIGIT;
X	else
X		bp->last_char = PUNCT;
X
X	return OK;
X}
X
X
Xvoid
Xbuf_free(struct buf_s *bp)
X{
X	if (bp->alen)
X		free((char*)(bp->buf));
X	memset(bp, 0, sizeof(struct buf_s));
X}
END_OF_FILE
if test 1733 -ne `wc -c <'l_strbuf.c'`; then
    echo shar: \"'l_strbuf.c'\" unpacked with wrong size!
fi
# end of 'l_strbuf.c'
fi
if test -f 'l_time.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'l_time.c'\"
else
echo shar: Extracting \"'l_time.c'\" \(2603 characters\)
sed "s/^X//" >'l_time.c' <<'END_OF_FILE'
X/*
X	l_time.c
X*/
X/*  Copyright (c) 1994 Christian F. Tschudin. All rights reserved.
X
X    Distributed under the terms of the GNU General Public License
X    version 2 of june 1991 as published by the Free Software
X    Foundation, Inc.
X
X		     This file is part of M0.
X
XM0 is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY.  No author or distributor accepts responsibility to anyone for
Xthe consequences of using it or for whether it serves any particular
Xpurpose or works at all, unless he says so in writing.  Refer to the GNU
XGeneral Public License for full details. 
X
XEveryone is granted permission to copy, modify and redistribute M0, but
Xonly under the conditions described in the GNU General Public License. 
XA copy of this license is supposed to have been given to you along with
XM0 so you can know your rights and responsibilities.  It should be in a
Xfile named LICENSE.  Among other things, the copyright notice and this
Xnotice must be preserved on all copies.  */
X
X
X#include "l_proto.h"
X
X
Xeindex
Xtime_now(mproc p)
X{
X	eindex ei = new_element(p, T_TIME);
X	eptr ep = eaddr(p,ei);
X
X	get_utc(&(ep->V.tim.sec), &(ep->V.tim.usec));
X
X	return ei;
X}
X
X
Xeindex
Xtime_addint(mproc p, eindex t, sint delta)
X{
X	eindex ei = new_element(p, T_TIME);
X	eptr ep, tp, ip;
X	sint usec;
X
X	tp = eaddr(p,t);
X	ep = eaddr(p,ei);
X
X	ep->V.tim.sec = tp->V.tim.sec + delta/1000000;
X	if (delta < 0)
X		usec = -( (-delta) % 1000000L );
X	else
X		usec = delta % 1000000L;
X	ep->V.tim.usec = tp->V.tim.usec + usec;
X	if (ep->V.tim.usec < 0) {
X		ep->V.tim.sec--;
X		ep->V.tim.usec += 1000000L;
X	} else if (ep->V.tim.usec > 1000000L) {
X		ep->V.tim.sec++;
X		ep->V.tim.usec -= 1000000L;
X	}
X	return ei;
X}
X
X
Xeindex
Xtime_diff(mproc p, eindex t1, eindex t2)
X{
X	eindex ei;
X	eptr ep, p1, p2;
X
X	ei = new_element(p, T_INT);
X	ep = eaddr(p,ei);
X	p1 = eaddr(p,t1);
X	p2 = eaddr(p,t2);
X
X	ep->V.i = 1000000L * (p1->V.tim.sec - p2->V.tim.sec)
X					+ p1->V.tim.usec - p2->V.tim.usec;
X	return ei;
X}
X
X
Xint
Xtime_eq(struct time_s *t1, struct time_s *t2)
X{
X	return (t1->sec != t2->sec
X		|| t1->usec != t2->usec) ? 0 : 1;
X}
X
X
Xint
Xtime_gt(struct time_s *t1, struct time_s *t2)
X{
X	sint d;
X
X	d = t1->sec - t2->sec;
X
X	if (d > 0)
X		return 1;
X	if (d < 0)
X		return 0;
X	return (t1->usec > t2->usec) ? 1 : 0;
X}
X
X
Xlong
Xnext_timeout()
X{
X	eindex to;
X	eptr ep;
X	uint sec, usec;
X
X	if (!time_queue)
X		return -1;
X	to = time_queue->timeout;
X	ep = eaddr(time_queue, to);
X
X	get_utc(&sec, &usec);
X
X	if (ep->V.tim.sec < sec ||
X	    (ep->V.tim.sec == sec && ep->V.tim.usec <= usec))
X		return 0;
X
X	return ep->V.tim.usec - usec + 1000000L*(ep->V.tim.sec - sec);
X}
END_OF_FILE
if test 2603 -ne `wc -c <'l_time.c'`; then
    echo shar: \"'l_time.c'\" unpacked with wrong size!
fi
# end of 'l_time.c'
fi
if test -f 'm0strip.1' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'m0strip.1'\"
else
echo shar: Extracting \"'m0strip.1'\" \(2452 characters\)
sed "s/^X//" >'m0strip.1' <<'END_OF_FILE'
X.TH M0STRIP 1
X.SH NAME
Xm0strip \- remove white spaces and comments from M0 source code
X.SH SYNOPSIS
X.B m0strip
X[
X.I -o <file>
X] [
X.I -I <includepath>
X]
X.SH DESCRIPTION
XM0strip is a preprocessor that compacts ASCII-based M0 code by removing
Xwhite spaces and comments. It also handles some simple inclusion
Xdirectives. The output is an arbitrary long sequence of ASCII
Xcharacters not containing any control characters (e.g. newline) and
Xhaving only the minimal number of space characters.
X.I M0strip
Xalso does some limited syntax checking: mainly quote and backslash
Xcharacters must be used in a balanced way (ASCII strings as well as
Xhex-strings must be terminated on the same line).
X.PP
XComments are introduced by the number sign (#) and extend to the end of
Xthe line. A number sign starting a comment may not be immediately
Xfollowed by an integer. Best is to use a number sign followed by a
Xspace or newline character in order to introduce a comment line.
X.PP
XThere are two directives which enable the inclusion of other files. These
Xdirectives are also introduced by a number sign which MUST be in the
Xfirst column of a line. Any data following the argument on the same line
Xis discarded. The directives are:
X.IP #include filename
XThe given file is inserted into the stream of M0 commands. The
Xincluded file is also stripped.
X.IP #includestring filename
XThis directive behaves like the previous 
X.I #include
Xwith the exception that the file's content is included as an M0 string:
Xcritical characters (like double quote and backslash) are correctly
Xescaped. The
X.I #includestring
Xdirective is useful for parts of M0 programs that have to be available
Xas strings, but that one would like to write down in the ordinary way
X(with comments etc).
X.PP
XBoth directives can be nested arbitrarily.
X.PP
XThe
X.I -I
Xoption is used by
X.I m0strip
Xfor finding files referenced by the two
X.I #include
Xdirectives. Default is the current directory.
X.PP
XDefault is to write the resulting M0 code to the standard output. The
X.I -o
Xoption permits to name an output file.
X.SH FILES
X.IP M0.ps
XPostScript document describing the messenger approach and containing the
Xcomplete M0 language manual with examples.
X.SH SEE ALSO
Xm0(1), m0c(1), m0uc(1)
X.SH BUGS
XIt would be nice to differentiate the location of include files with the
X.I cpp
X-like "abc" and <abc> notation.
X.PP
XOnly one
X.I -I
Xoption is remembered.
X.SH AUTHOR
XChristian F. Tschudin, <tschudin@cui.unige.ch>, May 1994
END_OF_FILE
if test 2452 -ne `wc -c <'m0strip.1'`; then
    echo shar: \"'m0strip.1'\" unpacked with wrong size!
fi
# end of 'm0strip.1'
fi
if test -f 'makefile.dos' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'makefile.dos'\"
else
echo shar: Extracting \"'makefile.dos'\" \(276 characters\)
sed "s/^X//" >'makefile.dos' <<'END_OF_FILE'
X# makefile.dos
X
X# setup for TurboC++ 1.00
X
XCC=	tcc
XCFLAGS=	-Ic:/tc/include -ml -d -K -G $(COPT)
XLFLAGS=	-Lc:/tc/lib -ea.out -ml
XE=	.exe
XO=	obj
XL=	lib
XRANLIBCMD=	@echo
XLIBCMD=		tlib
XLIBFLAGS=	+-
XEXEFILES=	m0c$(E) m0strip$(E)
XSYSLIBS=
X
XMV=mv
X# or ``move'' for MS/DOS >5.x
X
X#eof
END_OF_FILE
if test 276 -ne `wc -c <'makefile.dos'`; then
    echo shar: \"'makefile.dos'\" unpacked with wrong size!
fi
# end of 'makefile.dos'
fi
if test -f 'makefile.osf' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'makefile.osf'\"
else
echo shar: Extracting \"'makefile.osf'\" \(151 characters\)
sed "s/^X//" >'makefile.osf' <<'END_OF_FILE'
X# makefile.osf
X
Xinclude makefile.unx
X
XCC=	gcc
XCFLAGS= -g $(COPT)
XRANLIBCMD= ranlib
XSYSLIBS= -lbsd
XEXEFILES=	m0strip$(E) m0$(E) m0c$(E) m0uc$(E)
X
X# eof
END_OF_FILE
if test 151 -ne `wc -c <'makefile.osf'`; then
    echo shar: \"'makefile.osf'\" unpacked with wrong size!
fi
# end of 'makefile.osf'
fi
if test -f 'makefile.so4' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'makefile.so4'\"
else
echo shar: Extracting \"'makefile.so4'\" \(154 characters\)
sed "s/^X//" >'makefile.so4' <<'END_OF_FILE'
X# makefile.so4
X
Xinclude makefile.unx
X
XCC=	gcc
XCFLAGS=	-g $(COPT) -DSUNOS4
XRANLIBCMD= ranlib
XSYSLIBS=
XEXEFILES=	m0strip$(E) m0$(E) m0c$(E) m0uc$(E)
X
X# eof
END_OF_FILE
if test 154 -ne `wc -c <'makefile.so4'`; then
    echo shar: \"'makefile.so4'\" unpacked with wrong size!
fi
# end of 'makefile.so4'
fi
if test -f 'makefile.so5' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'makefile.so5'\"
else
echo shar: Extracting \"'makefile.so5'\" \(150 characters\)
sed "s/^X//" >'makefile.so5' <<'END_OF_FILE'
X# makefile.so5
X
Xinclude makefile.unx
X
XCC=		cc
XCFLAGS=		-g $(COPT) -Xa -DSUNOS5
XRANLIBCMD=	echo
XSYSLIBS=	-lposix4
XEXEFILES=	m0strip$(E) m0c$(E)
X
X# eof
END_OF_FILE
if test 150 -ne `wc -c <'makefile.so5'`; then
    echo shar: \"'makefile.so5'\" unpacked with wrong size!
fi
# end of 'makefile.so5'
fi
if test -f 'makefile.ult' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'makefile.ult'\"
else
echo shar: Extracting \"'makefile.ult'\" \(145 characters\)
sed "s/^X//" >'makefile.ult' <<'END_OF_FILE'
X# makefile.ult
X
Xinclude makefile.unx
X
XCC=	c89
XCFLAGS= -g $(COPT)
XRANLIBCMD= ranlib
XSYSLIBS=
XEXEFILES=	m0strip$(E) m0$(E) m0c$(E) m0uc$(E)
X
X# eof
END_OF_FILE
if test 145 -ne `wc -c <'makefile.ult'`; then
    echo shar: \"'makefile.ult'\" unpacked with wrong size!
fi
# end of 'makefile.ult'
fi
if test -f 'makefile.unx' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'makefile.unx'\"
else
echo shar: Extracting \"'makefile.unx'\" \(75 characters\)
sed "s/^X//" >'makefile.unx' <<'END_OF_FILE'
X# makefile.unx
X
XE=
XO=	o
XL=	a
XLIBCMD=	ar r
XLFLAGS=	-g
XLIBFLAGS=
XMV=mv
X
X#eof
END_OF_FILE
if test 75 -ne `wc -c <'makefile.unx'`; then
    echo shar: \"'makefile.unx'\" unpacked with wrong size!
fi
# end of 'makefile.unx'
fi
if test -f 'neigh_ex.m0' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'neigh_ex.m0'\"
else
echo shar: Extracting \"'neigh_ex.m0'\" \(1682 characters\)
sed "s/^X//" >'neigh_ex.m0' <<'END_OF_FILE'
X# neigh_ex.m0
X
X#  Copyright (c) 1994 Christian F. Tschudin. All rights reserved.
X#
X#    Distributed under the terms of the GNU General Public License
X#    version 2 of june 1991 as published by the Free Software
X#    Foundation, Inc.
X#
X#		     This file is part of M0.
X#
X# M0 is distributed in the hope that it will be useful, but WITHOUT ANY
X# WARRANTY.  No author or distributor accepts responsibility to anyone for
X# the consequences of using it or for whether it serves any particular
X# purpose or works at all, unless he says so in writing.  Refer to the GNU
X# General Public License for full details. 
X#
X# Everyone is granted permission to copy, modify and redistribute M0, but
X# only under the conditions described in the GNU General Public License. 
X# A copy of this license is supposed to have been given to you along with
X# M0 so you can know your rights and responsibilities.  It should be in a
X# file named LICENSE.  Among other things, the copyright notice and this
X# notice must be preserved on all copies.
X
X# neighbor exploration messenger, included by neighbor.m0
X
X
X_dat!           # recreate (a) the procedure for finding the back channel
X                # and (b) the array of known host identifiers
X0 X {           # push a `found' flag, and loop over the array
X  _hid=         # compare the host id
X  {P1J}{}?      # if equal then toggle the flag and jump out of the loop
X} L
X{}{ [,          # if hostid not found then start building an update messenger
X  "_,G(._dat _ctk1:"  # this code is explained in the M0 report
X  _hid _cts     # convert the hostid key into a string for the data field
X  ] _ctm X!X $  # convert all this to a messenger and send it back
X}?
END_OF_FILE
if test 1682 -ne `wc -c <'neigh_ex.m0'`; then
    echo shar: \"'neigh_ex.m0'\" unpacked with wrong size!
fi
# end of 'neigh_ex.m0'
fi
if test -f 'neighbor.m0' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'neighbor.m0'\"
else
echo shar: Extracting \"'neighbor.m0'\" \(2781 characters\)
sed "s/^X//" >'neighbor.m0' <<'END_OF_FILE'
X
X# neighbor.m0
X
X#  Copyright (c) 1994 Christian F. Tschudin. All rights reserved.
X#
X#    Distributed under the terms of the GNU General Public License
X#    version 2 of june 1991 as published by the Free Software
X#    Foundation, Inc.
X#
X#		     This file is part of M0.
X#
X# M0 is distributed in the hope that it will be useful, but WITHOUT ANY
X# WARRANTY.  No author or distributor accepts responsibility to anyone for
X# the consequences of using it or for whether it serves any particular
X# purpose or works at all, unless he says so in writing.  Refer to the GNU
X# General Public License for full details. 
X#
X# Everyone is granted permission to copy, modify and redistribute M0, but
X# only under the conditions described in the GNU General Public License. 
X# A copy of this license is supposed to have been given to you along with
X# M0 so you can know your rights and responsibilities.  It should be in a
X# file named LICENSE.  Among other things, the copyright notice and this
X# notice must be preserved on all copies.
X
X# neighbor discovery messenger
X
X# to test it:
X# start the console with       % m0c  neighbor.m0
X# invoke the test procedure    M0> eth_neighbors
X# look at the result           M(1)> ptop
X
X. 'neighbors {  # usage: brcast_proc back_proc  neighbors  array
X  ; _ 1I D :    # get a random key, link in globaldict a new dict to it
X  3 { P         # send three times the discover messenger
X    2I!         # get the broadcast channel
X    [2I         # use the random key for the process queue field
X# fill in here the string of the discovery messenger:
X#includestring neigh_ex.m0
X    5I _cte     # get an external representation of the back procedure
X    [ _ 7I G    # create an array with all known host ids
X    {P}L ] _cte # and convert it to an external representation
X    +           # concat back procedure and array with hostids
X    ] _ctm $    # assemble the discover messenger and broadcast it!
X    333333      # sleep for 1/3 second
X    ;0I1QX1IXEP0Q # sleep (see the code in the M0 report)
X  } L
X  [ _ 2I G      # build again the array of found hosts
X  {P}L ]
X  X _ X U       # undefine the session dictionary
X  XPXP          # pop the two initial arguments and return the array
X} :             # put the procedure's definition in the current dictionary
X
X
X# call this procedure to test the exploration messenger via ethernet:
X
X.'eth_neighbors {
X  {\ffffffffffff\ 0 {}      # the three args for creating a local channel
X   _cha 'ether G '_key G !}
X  { _ori2G _ori1G {}        # same for remote host, but we obtain the
X   _cha _ori0G G '_key G !} # address of the source from the _ori field
X  neighbors                 # the main procedure call
X} :
X
X
X'printF { P	# print a message only if the console is defined
X  "file `neighbor.m0' loaded\x0a" print
X}{}?
END_OF_FILE
if test 2781 -ne `wc -c <'neighbor.m0'`; then
    echo shar: \"'neighbor.m0'\" unpacked with wrong size!
fi
# end of 'neighbor.m0'
fi
if test -f 'o_array.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'o_array.c'\"
else
echo shar: Extracting \"'o_array.c'\" \(2649 characters\)
sed "s/^X//" >'o_array.c' <<'END_OF_FILE'
X/*
X	o_array.c
X*/
X/*  Copyright (c) 1994 Christian F. Tschudin. All rights reserved.
X
X    Distributed under the terms of the GNU General Public License
X    version 2 of june 1991 as published by the Free Software
X    Foundation, Inc.
X
X		     This file is part of M0.
X
XM0 is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY.  No author or distributor accepts responsibility to anyone for
Xthe consequences of using it or for whether it serves any particular
Xpurpose or works at all, unless he says so in writing.  Refer to the GNU
XGeneral Public License for full details. 
X
XEveryone is granted permission to copy, modify and redistribute M0, but
Xonly under the conditions described in the GNU General Public License. 
XA copy of this license is supposed to have been given to you along with
XM0 so you can know your rights and responsibilities.  It should be in a
Xfile named LICENSE.  Among other things, the copyright notice and this
Xnotice must be preserved on all copies.  */
X
X#include "l_proto.h"
X#include "o_proto.h"
X
Xstatic void
Xbind_array(mproc p, eindex ei)
X{
X	uint len, i;
X
X	if (!(eattr(p,ei) & A_WRITE))
X		return;
X	len = elen(p, ei);
X	for (i = 0; i < len; i++) {
X		eindex e = array_get(p, ei, i);
X		eptr ep = eaddr(current, e);
X		if (eptype(ep) == T_NAME && (epattr(ep) & A_EXECUTABLE)) {
X			eindex o;
X			if (dict_load(p, e, &o) == OK &&
X				etype(p,o) == T_PROC) {
X				array_put(p, ei, i, o);
X				incref(p, o);
X			}
X		} else if (eptype(ep) == T_ARRAY && (epattr(ep) & A_EXECUTABLE))
X			bind_array(p, e);
X	}
X}
X
X
Xretcode
Xo_array()
X{
X	uint len;
X
X	load_1_arg(ei, ep);
X
X	if (eptype(ep) != T_INT)
X		return ERR_TYPE_CHECK;
X	if (ep->V.i < 0)
X		return ERR_RANGE_CHECK;
X	ei = new_array(current, ep->V.i);
X	if (!ei)
X		return ERR_IMPLEMENTATION_LIMIT;
X	decref(current, current->os[current->osp-1]);
X	current->os[current->osp-1] = ei;
X	return OK;
X}
X
X
Xretcode
Xo_bind()
X{
X	load_1_arg(ei, ep);
X
X	if (eptype(ep) != T_ARRAY || !(epattr(ep) & A_EXECUTABLE))
X		return ERR_TYPE_CHECK;
X	bind_array(current, ei);
X	return OK;
X}
X
X
Xretcode
Xo_makearray()
X{
X	eindex ei, *ea, *ip;
X	eptr ep;
X	ushort i, j;
X
X	for (i=current->osp, ip=current->os+i-1; i > 0; i--, ip--)
X		if (*ip == mark)
X			break;
X	if (i==0)
X		return ERR_NO_MARK_FOUND;
X
X	decref(current, mark);
X	*ip = new_array(current, current->osp - i);
X	ep = eaddr(current,*ip);
X	ea = ep->V.arr.a;
X	for (j=current->osp-i, ip++; j > 0; j--)
X		*ea++ = *ip++;
X	erefcnt(current,null_val) -= current->osp - i;
X
X	current->osp = i;
X	return OK;	
X}
X
Xretcode
Xo_mark()
X{
X	if( current->osp >= MAXOSTACK)
X		return ERR_OSTACK_OVERFLOW;
X	current->os[current->osp++] = mark;
X	incref(current, mark);
X	return OK;
X}
END_OF_FILE
if test 2649 -ne `wc -c <'o_array.c'`; then
    echo shar: \"'o_array.c'\" unpacked with wrong size!
fi
# end of 'o_array.c'
fi
if test -f 'o_attr.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'o_attr.c'\"
else
echo shar: Extracting \"'o_attr.c'\" \(1675 characters\)
sed "s/^X//" >'o_attr.c' <<'END_OF_FILE'
X/*
X	o_attr.c
X*/
X/*  Copyright (c) 1994 Christian F. Tschudin. All rights reserved.
X
X    Distributed under the terms of the GNU General Public License
X    version 2 of june 1991 as published by the Free Software
X    Foundation, Inc.
X
X		     This file is part of M0.
X
XM0 is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY.  No author or distributor accepts responsibility to anyone for
Xthe consequences of using it or for whether it serves any particular
Xpurpose or works at all, unless he says so in writing.  Refer to the GNU
XGeneral Public License for full details. 
X
XEveryone is granted permission to copy, modify and redistribute M0, but
Xonly under the conditions described in the GNU General Public License. 
XA copy of this license is supposed to have been given to you along with
XM0 so you can know your rights and responsibilities.  It should be in a
Xfile named LICENSE.  Among other things, the copyright notice and this
Xnotice must be preserved on all copies.  */
X
X#include <time.h>
X#include <stdlib.h>
X
X#include "l_proto.h"
X#include "o_proto.h"
X
Xretcode
Xo_getattr()
X{
X	int mask;
X
X	load_1_arg(ei, ep);
X
X	mask = epattr(ep) & A_ALL;
X	decrefp(current, ei, ep);
X	ei = current->os[current->osp-1] = new_element(current, T_INT);
X	eaddr(current, ei)->V.i = mask;
X
X	return OK;
X}
X
X
Xretcode
Xo_setattr()
X{
X	int mask;
X
X	load_2_args(oi, mi, op, mp);
X
X	if (eptype(mp) != T_INT)
X		return ERR_TYPE_CHECK;
X	mask = mp->V.i;
X	if (mask < 0 || mask > A_ALL)
X		return ERR_RANGE_CHECK;
X
X	if (!(epattr(op) & A_WRITE))
X		return ERR_ACCESS_CHECK;
X
X	epattr(op) &= mask | ~A_ALL;
X
X	decrefp(current, mi, mp);
X	decrefp(current, oi, op);
X	current->osp -= 2;
X
X	return OK;
X}
END_OF_FILE
if test 1675 -ne `wc -c <'o_attr.c'`; then
    echo shar: \"'o_attr.c'\" unpacked with wrong size!
fi
# end of 'o_attr.c'
fi
if test -f 'o_string.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'o_string.c'\"
else
echo shar: Extracting \"'o_string.c'\" \(1348 characters\)
sed "s/^X//" >'o_string.c' <<'END_OF_FILE'
X/*
X	o_string.c
X*/
X/*  Copyright (c) 1994 Christian F. Tschudin. All rights reserved.
X
X    Distributed under the terms of the GNU General Public License
X    version 2 of june 1991 as published by the Free Software
X    Foundation, Inc.
X
X		     This file is part of M0.
X
XM0 is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY.  No author or distributor accepts responsibility to anyone for
Xthe consequences of using it or for whether it serves any particular
Xpurpose or works at all, unless he says so in writing.  Refer to the GNU
XGeneral Public License for full details. 
X
XEveryone is granted permission to copy, modify and redistribute M0, but
Xonly under the conditions described in the GNU General Public License. 
XA copy of this license is supposed to have been given to you along with
XM0 so you can know your rights and responsibilities.  It should be in a
Xfile named LICENSE.  Among other things, the copyright notice and this
Xnotice must be preserved on all copies.  */
X
X#include "l_proto.h"
X#include "o_proto.h"
X
X
Xretcode
Xo_string()
X{
X	eindex s;
X
X	load_1_arg(ei, ep);
X
X	if (eptype(ep) != T_INT)
X		return ERR_TYPE_CHECK;
X	if (ep->V.i < 0)
X		return ERR_RANGE_CHECK;
X	s = new_string(current, ep->V.i);
X	if (!s)
X		return ERR_IMPLEMENTATION_LIMIT;
X	decrefp(current, ei, ep);
X	current->os[current->osp-1] = s;
X	return OK;
X}
END_OF_FILE
if test 1348 -ne `wc -c <'o_string.c'`; then
    echo shar: \"'o_string.c'\" unpacked with wrong size!
fi
# end of 'o_string.c'
fi
if test -f 'proc.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'proc.h'\"
else
echo shar: Extracting \"'proc.h'\" \(1468 characters\)
sed "s/^X//" >'proc.h' <<'END_OF_FILE'
X/*
X	proc.h
X*/
X/*  Copyright (c) 1994 Christian F. Tschudin. All rights reserved.
X
X    Distributed under the terms of the GNU General Public License
X    version 2 of june 1991 as published by the Free Software
X    Foundation, Inc.
X
X		     This file is part of M0.
X
XM0 is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY.  No author or distributor accepts responsibility to anyone for
Xthe consequences of using it or for whether it serves any particular
Xpurpose or works at all, unless he says so in writing.  Refer to the GNU
XGeneral Public License for full details. 
X
XEveryone is granted permission to copy, modify and redistribute M0, but
Xonly under the conditions described in the GNU General Public License. 
XA copy of this license is supposed to have been given to you along with
XM0 so you can know your rights and responsibilities.  It should be in a
Xfile named LICENSE.  Among other things, the copyright notice and this
Xnotice must be preserved on all copies.  */
X
X#ifndef PROC_H
X#define PROC_H
X
X#include "error.h"
X#include "element.h"
X
X#define MAXOSTACK	300
X#define MAXDSTACK	16
X#define MAXESTACK	100
X
Xstruct mproc_s {
X	ushort pid;
X	struct element_s local[MAXLOCALS];
X	sshort os[MAXOSTACK];
X	sshort ds[MAXDSTACK];
X	sshort es[MAXESTACK];
X	ushort osp, dsp, esp;
X	byte state;
X	eindex err_element;
X	retcode last_error;
X	mproc next, last, qtail, timelink;
X	eindex qkey, timeout;
X};
X
Xenum {
X	S_RUNNING, S_BLOCKED, S_TERMINATED
X};
X
X
X#endif
X
X
X
END_OF_FILE
if test 1468 -ne `wc -c <'proc.h'`; then
    echo shar: \"'proc.h'\" unpacked with wrong size!
fi
# end of 'proc.h'
fi
if test -f 'startup.m0' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'startup.m0'\"
else
echo shar: Extracting \"'startup.m0'\" \(1799 characters\)
sed "s/^X//" >'startup.m0' <<'END_OF_FILE'
X# startup.m0
X
X#  Copyright (c) 1994 Christian F. Tschudin. All rights reserved.
X#
X#    Distributed under the terms of the GNU General Public License
X#    version 2 of june 1991 as published by the Free Software
X#    Foundation, Inc.
X#
X#		     This file is part of M0.
X#
X# M0 is distributed in the hope that it will be useful, but WITHOUT ANY
X# WARRANTY.  No author or distributor accepts responsibility to anyone for
X# the consequences of using it or for whether it serves any particular
X# purpose or works at all, unless he says so in writing.  Refer to the GNU
X# General Public License for full details. 
X#
X# Everyone is granted permission to copy, modify and redistribute M0, but
X# only under the conditions described in the GNU General Public License. 
X# A copy of this license is supposed to have been given to you along with
X# M0 so you can know your rights and responsibilities.  It should be in a
X# file named LICENSE.  Among other things, the copyright notice and this
X# notice must be preserved on all copies.
X
X# the M0 interpreter startup code
X# christian tschudin, may 1994
X
X
X# pop the local (user) dictionary
X)
X
X#define official entries _sys, _ (globaldict), _ver and _pid
X. '_sys . :
X. '_ D :
X. '_ver 1 :
X. '_pid ; :
X
X. '_cpy "(c) 1994, Christian F. Tschudin" :
X
X. '_err .'ZG :
X
X
X# include the longword definitions:
X. 'longdict D :
X  longdict (
X#include longdict.m0
X  )
X
X
X# define the access rights:
X.'_r	1:
X.'_rw	3:
X.'_rx	5:
X.'_w	2:
X.'_wx	6:
X.'_rwx	7:
X.'_x	4:
X.'_nac	0:
X
X
X# set the access attributes for various dictionaries, arrays and strings
X[
X  _adr {XP0IY'string={}{P}?}L	# remove write only from composite objects
X  _adr
X  _cha {XP}L			# to do: treat the descrpitive strings
X  _cha
X  _cpy
X  _ena
X  longdict
X  _tna
X  .
X] {_rx W} L
X
X# globaldict is not executable:
X_ _rw W
X
X# eof
END_OF_FILE
if test 1799 -ne `wc -c <'startup.m0'`; then
    echo shar: \"'startup.m0'\" unpacked with wrong size!
fi
# end of 'startup.m0'
fi
if test -f 'strbuf.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'strbuf.h'\"
else
echo shar: Extracting \"'strbuf.h'\" \(1311 characters\)
sed "s/^X//" >'strbuf.h' <<'END_OF_FILE'
X/*
X	strbuf.h
X*/
X/*  Copyright (c) 1994 Christian F. Tschudin. All rights reserved.
X
X    Distributed under the terms of the GNU General Public License
X    version 2 of june 1991 as published by the Free Software
X    Foundation, Inc.
X
X		     This file is part of M0.
X
XM0 is distributed in the hope that it will be useful, but WITHOUT ANY
XWARRANTY.  No author or distributor accepts responsibility to anyone for
Xthe consequences of using it or for whether it serves any particular
Xpurpose or works at all, unless he says so in writing.  Refer to the GNU
XGeneral Public License for full details. 
X
XEveryone is granted permission to copy, modify and redistribute M0, but
Xonly under the conditions described in the GNU General Public License. 
XA copy of this license is supposed to have been given to you along with
XM0 so you can know your rights and responsibilities.  It should be in a
Xfile named LICENSE.  Among other things, the copyright notice and this
Xnotice must be preserved on all copies.  */
X
X#ifndef STRBUF_H
X#define STRBUF_H
X
X#include "element.h"
X#include "error.h"
X
Xstruct buf_s {
X	byteptr buf;
X	uint alen, len;
X	int last_char;
X};
X
Xenum {PUNCT, LOWER, UPPER, DIGIT}; /* used in last_char */
X
Xextern retcode	buf_add(struct buf_s *bp, byteptr s, uint len);
Xextern void	buf_free(struct buf_s *bp);
X
X#endif
END_OF_FILE
if test 1311 -ne `wc -c <'strbuf.h'`; then
    echo shar: \"'strbuf.h'\" unpacked with wrong size!
fi
# end of 'strbuf.h'
fi
echo shar: End of archive 1 \(of 12\).
cp /dev/null ark1isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 12 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
