Newsgroups: comp.sources.unix
From: tschudin@cui.unige.ch (Christian Tschudin)
Subject: v28i057: m0 - a messenger execution environment, Part07/12
References: <1.770917478.19277@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: tschudin@cui.unige.ch (Christian Tschudin)
Posting-Number: Volume 28, Issue 57
Archive-Name: m0/part07

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 7 (of 12)."
# Contents:  MANUAL.doc
# Wrapped by tschudin@cuisunf on Mon Jun  6 13:26:02 1994
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'MANUAL.doc' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MANUAL.doc'\"
else
echo shar: Extracting \"'MANUAL.doc'\" \(31617 characters\)
sed "s/^X//" >'MANUAL.doc' <<'END_OF_FILE'
X# MANUAL.doc
X# DO NOT EDIT BY HAND!
X# This file was automatically generated by the myf2doc filter.
X
X#  Copyright (c) 1994 Christian F. Tschudin. All rights reserved.
X#
X#    Distributed under the terms of the GNU General Public License
X#    version 2 of june 1991 as published by the Free Software
X#    Foundation, Inc.
X#
X#		     This file is part of M0.
X#
X# M0 is distributed in the hope that it will be useful, but WITHOUT ANY
X# WARRANTY.  No author or distributor accepts responsibility to anyone for
X# the consequences of using it or for whether it serves any particular
X# purpose or works at all, unless he says so in writing.  Refer to the GNU
X# General Public License for full details. 
X#
X# Everyone is granted permission to copy, modify and redistribute M0, but
X# only under the conditions described in the GNU General Public License. 
X# A copy of this license is supposed to have been given to you along with
X# M0 so you can know your rights and responsibilities.  It should be in a
X# file named LICENSE.  Among other things, the copyright notice and this
X# notice must be preserved on all copies.
X
X
X			The M0 language manual, May 1994
X		   Copyright (c) 1994 Christian F. Tschudin
X
X
X!	exec
X	                           any  !  any
X
X	`Executes' arbitrary values. In case of literals this means that the
X	value is simply re-put on the operand stack. Executing an
X	`executable' value transfers this value from the operand stack to the
X	execution stack: procedures instantiate a procedure call while names
X	with the executable bit set are looked up etc.
X
X
X$	submit
X	                    key string  $  --
X	                   null string  $  --
X	                    any string  $  --
X
X	The submit is one of the central messenger--related operators: it
X	permits to start new messenger processes either remotely or locally.
X	The key argument indicates through which channel the messenger packet
X	should be sent. The string parameter contains the data to be sent out
X	(see the _ctm operator for creating a messenger string). The null
X	value (instead of a channel key) requests a local submit.
X
X	Channel keys for submitting a messenger to a remote platform must be
X	obtained by machine specific operators (see the channeldict (_cha)
X	which depend on the machine's network interfaces. Any other value
X	than a key results in a local submission where a new concurrent
X	process is created in the same messenger platform. Usually a null
X	value is used to specify this case. However, arbitrary values (except
X	keys) can be used: the forked process will find this value again
X	under the _ori name that usually gives indications about the
X	messenger's origin.
X
X	Note that most of the keys used for submitting are good for one
X	single use only. They have to be regenerated before a subsequent
X	submit becomes possible. Submitting to an unspecific key (not created
X	this way) is a null operation.
X
X	Submitting a messenger string larger than the channel's maximum
X	transfer unit size (see the _cha dictionary) results in truncating
X	the messenger. In case the truncation occurs in the code part, the
X	messenger never arrives at the other platform.
X
X
X%	mod
X	                   int_1 int_2  %  int
X
X	Computes the modulo of int_1 with regard to int_2 which must have a
X	positive value. The result is always equal or greater than 0.
X
X
X&	and
X	                   int_1 int_2  &  int
X	                   key_1 key_2  &  key
X
X	Performs a bit-wise and operation on the bits of the two arguments.
X
X
X`	length
X	                         array  `  int
X	                          dict  `  int
X	                        string  `  int
X
X	For an array, the length operator (`, also called grave accent)
X	returns the number of elements the array contains.
X
X	For strings, this is the number of bytes the string is made of.
X
X	For a dictionary argument, this operator returns the number of
X	defined entries.
X
X
X(	begin
X	                          dict  (  --
X
X	Pushes the given dictionary onto the dictionary stack. All subsequent
X	references to names will first refer to names defined in the newly
X	pushed dictionary.
X
X
X)	end
X	                            --  )  --
X
X	Pops off the dictionary at the top of the dictionary stack. The
X	system dictionary (_sys) at the bottom cannot be removed.
X
X
X*	mul
X	                   int_1 int_2  *  int
X
X	Computes the product of the two given integer values. No overflow
X	check is made.
X
X
X+	add
X	                   int_1 int_2  +  int
X	               array_1 array_2  +  array
X	             string_1 string_2  +  string
X	                      time int  +  time
X	                      int time  +  time
X
X	For integers, the + operator computes the sum of the two integer
X	values. No overflow check is made.
X
X	For arrays, this returns a newly allocated array containing the
X	concatenation of the two array arguments.
X
X	For strings, this returns the concatenation of the two input
X	arguments. Note that parts of the new string may or may not continue
X	to refer to the old strings (thus changing a byte in the resulting
X	string may become manifest in one of the original string fragments).
X
X	The + operator also accepts an int and time value, computing a new
X	time value which differs by int micro-seconds from the initial time
X	value.
X
X
X,	currentqueue
X	                            --  ,  key
X	                            --  ,  null
X
X	If the current process is executing in a process queue, then a key
X	referring to this queue is returned. Otherwise a null value is pushed
X	on the operand stack.
X
X
X-	sub
X	                       int int  -  int
X	                      time int  -  time
X	                     time time  -  int
X
X	Computes the difference of the two given integer values. No overflow
X	check is made.
X
X	The - operator can also be used for values of type time. It returns
X	the difference between the input values measured in micro-seconds. No
X	overflow check is made.
X
X
X.	currentdict
X	                            --  .  dict
X
X	Returns on the operand stack the dictionary which is at the top of
X	the dictionary stack. The dictionary stack, however, is not modified.
X
X
X/	div
X	                   int_1 int_2  /  int
X
X	Computes the quotient int_1/int_2 of the two integer values. Note
X	that the fraction part is dismissed.
X
X
X:	put
X	                 array int any  :  --
X	            string int_1 int_2  :  --
X	                  dict any any  :  --
X	       string_1 array string_2  :  --
X	       array_1 array_2 array_3  :  --
X
X	The put operator is used to alter elements of composite objects. The
X	first of the three arguments is the composite object itself. The
X	second argument is an index or key into the object. The third
X	argument is the new value to be placed into the object.
X
X	For arrays and strings, an integer value is used as an index giving
X	the position (starting from 0) where the new value has to be put. For
X	dictionaries, the second argument is used as an entry--key (e.g.
X	name, int, key value) that is to be associated with the new value.
X
X	For arrays and strings it is possible to replace the second index
X	argument by a two-element array representing a range. This range
X	array must contain an integer offset and a length value. Furthermore
X	must the third argument be of equal type as the composite object. If
X	the range is smaller than the length of the third argument, only a
X	part of the third argument will be put into the object. For a range
X	greater than the third argument, the content of the third argument
X	will be repeatededly inserted into the object. This can be used to
X	initialize an array or a string.
X
X	Note 1: In case the array or dictionary are global values and the
X	third argument is not, only a copy of the third argument is put into
X	the global object. This guarantees that a composite global object
X	only contains global objects. Beware thus of the following code:
X                                  _ 'a_name D ( . :
X	This leaves on the dictionary stack another dictionary than the one
X	that was inserted into globaldict!
X
X
X
X;	randomkey
X	                            --  ;  key
X
X	Generates a new random 64-bit key. No guarantee is given that this
X	key is not already in use. However, a clash of keys is not very
X	probable (chance of 1/(2^64) ~ 5.4E-20).
X
X
X<	lt
X	                   int_1 int_2  <  int
X	             string_1 string_2  <  int
X	                 time_1 time_2  <  int
X
X	Compares the content of the given arguments and returns 1 if the
X	value of argument_1 is less than the one of argument_2, 0 otherwise.
X	Strings are lexicographically compared based on the integer values of
X	their bytes.
X
X
X=	eq
X	                       any any  =  int
X
X	For simple types (integer, mark, name, null, time and key), the =
X	operator returns 1 if both arguments have the same value and 0
X	otherwise. Composite values (array, dictionary and string), however,
X	are equal only if the arguments reference the same composite object.
X
X
X>	gt
X	                   int_1 int_2  >  int
X	             string_1 string_2  >  int
X	                 time_1 time_2  >  int
X
X	Compares the content of the given arguments. This operator returns 1
X	if the value of argument_1 is greater than the one of argument_2, and
X	0 otherwise. Strings are lexicographically compared based on the
X	(unsigned) values of their bytes.
X
X
X?	ifelse
X	               int any_1 any_2  ?  --
X
X	Based on the integer value, the first or the second of the two
X	arguments is executed: for non-zero values, any_1 is chosen. Usually,
X	the any_x arguments are procedures.
X
X	Note that this operator could be rewritten as
X                               [ 3 1 R ] X 0 = 0 = G !
X
X
X@	utc
X	                            --  @  time
X
X	Returns the system's universal time (UTC). Depending on the
X	resolution of the system's clock and the system's performance, two
X	consecutive calls may return the same time.
X
X
X[	mark
X	                            --  [  mark
X
X	Pushes a mark value on the operand stack.
X
X
X]	
X	          mark any_1 ... any_n  ]  ar
X
X	Scans the operand stack downwards until a mark value is found. All
X	elements between the top of the operand stack and the mark are
X	removed from the stack and put into a new array. The mark is also
X	removed.
X
X
X^	xor
X	                       int int  ^  int
X	                       key key  ^  key
X
X	Performs a bit-wise xor operation on the bits of the two arguments.
X
X
X|	or
X	                       int int  |  int
X	                       key key  |  key
X
X	Performs a bit-wise or operation on the bits of the two arguments.
X
X
X~	not
X	                           int  ~  int
X	                           key  ~  key
X
X	Performs a bit-wise not operation on the bits of the argument.
X
X	If you want to do a logical not use the sequence
X                                         0 =
X
X
XA	array
X	                           int  A  array
X
X	Creates a (local) array of the given length. Initially, all elements
X	are set to null.
X
X
XB	bind
X	                          proc  B  proc
X
X	Recursively scans the given procedure and replaces all names which
X	can be resolved to operators or procedures by their associated value.
X	The bind is only done for procedures which have the write attribute
X	set.
X
X	The effect of this operator depends on the configuration of the
X	dictionary stack. Binding a procedure is useful if one wants to avoid
X	a redefinition of critical operators used in the given procedure.
X
X
XC	copy
X	                           any  C  any
X
X	This operator replaces operand values of any type by a physical copy.
X	In case of simple types (int, time etc) this is not very useful.
X	However, composite objects, which reside in virtual memory, are
X	replaced by a reference to a new composite object of the same size
X	and containing the same elements. Note that the elements themselves
X	are not physically copied, and thus remain shared. Thus, undefining
X	an entry in a dictionary's copy does not undefine the entry in the
X	original dictionary. However, if an element of an array is a string
X	and the content of this string is changed, then this change is also
X	visible in the copy of the array.
X
X	This operator should be used only when the index (I) operator is
X	insufficient: The advantage of the index operator is that it copies
X	the references of composite objects, which is much more memory
X	efficient than a physical copy.
X
X
XD	dict
X	                            --  D  dict
X
X	Creates a new (local) dictionary.
X
X
XE	enter
X	                           key  E  --
X	                       key int  E  int
X	                      key time  E  int
X
X	The first form of the E operator lets the process unconditionally
X	enter the given queue. If the queue is stopped, or if another process
X	is already executing at the queue's head, the calling process will be
X	blocked. The process resumes execution just after the E operator only
X	when it gets to the head of the process queue.
X
X	The second and third form of the E operator permit to conditionally
X	enter a process queue. If, after the given time, the process is
X	stilled blocked, the process is removed from the queue. A non-zero
X	value is then returned to signal that a time--out occurred (otherwise
X	a 0 value is pushed on the operand stack). The time--out value is
X	given in either relative (int micro-seconds from now) or absolute
X	(time) form.
X
X
XF	find
X	                           any  F  dict 1
X	                           any  F  0
X
X	Scans the dictionary stack downwards in order to find a dictionary in
X	which the given operand is the key of an entry. On success, the found
X	dictionary is pushed and 1 is returned. 0 is returned if no suitable
X	dictionary is found.
X
X
XG	get
X	                     array int  G  any
X	                    string int  G  int
X	                      dict any  G  any
X	               array_1 array_2  G  any
X	                  string array  G  int
X
X	Extracts from the given composite object the desired element(s). For
X	array and strings the integer index must be between 0 and the
X	composite's object size minus 1. For dictionary objects, an entry
X	corresponding to the given second argument must exist.
X
X	As with the put (:) operator for arrays and string objects, the index
X	can be a range. The range array contains an offset and length value
X	which specify which part of the object should be extracted. Note that
X	the whole range must fall inside the object.
X
X
XH	halted
X	                           any  H  int
X
X	Creates a `halted context' and executes the given value. If during
X	execution a halt (Z) is encountered, 1 is returned. Otherwise, 0 is
X	returned.
X
X
XI	index
X	             any_n ... any_0 n  I  any_n ... any_0 any_n
X
X	Pushes the n-th element (counted from the top) of the operand stack.
X	The top element is thus easily duplicated by the code
X                                         0 I
X
X
XJ	exit
X	                            --  J  --
X
X	Jumps out of (terminates) the innermost loop context created by the L
X	operator.
X
X
XK	known
X	                      dict any  K  int
X
X	Checks if the dictionary contains an entry which is indexed by the
X	second argument. If this applies, 1 is returned, 0 for an undefined
X	entry.
X
X
XL	loop
X	                    array proc  L  --
X	                   string proc  L  --
X	                     dict proc  L  --
X	                      int proc  L  --
X
X	For an array or string argument the loop procedure (or any other
X	executable type) is executed once for each element: the element is
X	pushed on the operand stack before the procedure is executed.
X
X	For a dictionary argument, the loop procedure is executed once for
X	each defined entry, first pushing on the operand stack the entry's
X	`key' and then the associated value.
X
X	The integer loop requires an integer value greater or equal to 0 to
X	give the number of times the loop procedure should be executed.
X	Before each invocation of the procedure, the current counter value
X	(starting from 0) is pushed on the operand stack.
X
X	By giving a negative integer argument, the loop becomes an infinite
X	loop: no counter value is pushed, but the procedure is executed over
X	and over until a J (jump out of loop) instruction is executed.
X
X
XM	checksum
X
X	Not implemented yet.
X
X
X
X
X
X
X
X
XN	neg
X	                           int  N  int
X
X	Changes the sign of the integer value.
X
X
XO	count
X	                           int  O  int
X
X	Returns information about the system's stacks. The integer argument
X	for the O operator can be:
X	   0 | count elements on the operand stack down to mark
X	   1 | return the size of the operand stack
X	   2 | return the size of the dictionary stack
X	   3 | return the size of the execution stack
X
X
XP	pop
X	                           any  P  --
X
X	Drops the top element of the operand stack.
X
X
XQ	queuestate
X	                       key int  Q  --
X
X	The Q operator is used to stop and start a given queue: a non-zero
X	value stops the queue, thus inhibits queued processes to proceed at
X	the queue's head. Note that this does not affect a process already
X	executing in the queue's head position. By using the Q operator with
X	a 0 value, the queue is unblocked, letting queued processes advance
X	at the queue's head.
X
X
XR	roll
X	       any_(n-1) ... any_0 n j  R  any_((j-1) mod n) ... any_0 any_n ... any_(j mod n)
X
X	Cycles the topmost n operands by j positions towards the operand
X	stack's top.
X
X
XS	string
X	                           int  S  string
X
X	Creates a new (local) string with the given length. All bytes are
X	initialized to 0.
X
X
XT	getattribute
X	                           any  T  int
X
X	(test-attribute) Returns the operand's attribute (see the W operator
X	for more details).
X
X
XU	undefine
X	                      dict any  U  --
X
X	Removes from a dictionary the entry that is indexed by the any
X	operand. The entry must exist.
X
X
XV	leave
X	                            --  V  --
X
X	Removes the process from the current queue it is executing in.
X	Depending on the state of the queue (see the Q operator), other
X	processes waiting in the queue may become active.
X
X	If the process is currently not in a process queue, this operator has
X	no effect.
X
X
XW	setattribute
X	                       any int  T  int
X
X	(write-attribute) Applies a mask to attribute bits of the any
X	argument. This only makes sense for composite objects. Note that
X	attribute bits can only be removed (set to 0) but cannot be reset.
X	Once the write attribute has been removed, all object's attribute
X	bits become immutable.
X
X	The integer value must be within the range from 0 to 7. Bit 0
X	contains the read attribute, bit 1 the write attribute and bit 2
X	codes for the execute right.
X
X
XX	exch
X	                   any_1 any_2  X  any_2 any_1
X
X	Exchanges the two top--most elements of the operand stack.
X
X
XY	type
X	                           any  Y  name
X
X	Returns a name which stands for the given object's type. Possible
X	names are:
X                 array dict int key mark name null oper string time
X
X
XZ	halt
X	                            --  Z  --
X
X	Terminates the inner--most `halted-context' created by the H
X	operator. If no such context exists, the process exits immediately.
X
X
X_	globaldict
X	                            --  _  dict
X
X	The special global dictionary is defined in the system dictionary and
X	is known under the name _ (underscore). This dictionary can be
X	written to and read from by all processes in a M0 platform. Messenger
X	processes thus can exchange data values via this dictionary. Note
X	that the global dictionary cannot be browsed with the loop operator
X	because the exec attribute bit is not set.
X
X
X_adr	addrdict
X	                            --  _adr  dict
X
X	The _adr dictionary contains the various network addresses under
X	which the M0 platform may be reached. Entries are indexed by names of
X	a data transport mean (common names are ether or udpip ). Each name
X	is associated to an array which holds one or several alternative
X	addresses. For ether, for example, this is an array of 6-byte
X	strings.
X
X	Note that some addresses have local significance only, thus may be
X	useful only to machines on the same network segment etc.
X
X
X_cha	channeldict
X	                            --  _cha  dict
X
X	The channeldict contains a dictionary for each channel family.
X	Popular channels are for example ether or udpip. The dictionaries
X	associated to these names contain information about the way these
X	channels must be used. Currently there are six fields defined:
X	 _aut | name indicating the authorization method used (_no or _car)
X	 _des | (human readable) ascii string describing the channel family
X	 _key | the main procedure used to create a new submission key
X	 _mtu | integer with the maximum transfer unit length in bytes
X	 _tar | name or null indicating if the target expects M0 (_mzr) or plain ascii (_asc)
X	 _typ | integer, defines the access protocol type this messenger channel
X
X	The _key procedure expects three arguments. The first argument is a
X	channel specific destination address (string for ether etc.). The
X	second argument is an integer value that is an index into one of the
X	arrays of the _adr dictionary. It selects the outgoing address to use
X	(because the platform may have multiple interfaces). The last and
X	third (top-most) operand is a callback procedure that is invoked in
X	case the M0 platform wishes to check the process' authorization. Such
X	a check is not necessarily done for each channel access.
X
X	A _no authorization method means that no checks are ever made. The
X	_key procedure nevertheless expects a callback procedure. The _car
X	(challenge and response) method means that the callback procedure is
X	called by the M0 platform after having pushed a challenge value on
X	the operand stack. It is the duty of the procedure to replace it with
X	the appropriate response.
X
X	The customary two challenges are the names login and passwd which
X	should be replaced by strings holding the corresponding values. The
X	called authorization procedure is free in the way how it provides
X	this information: It can even send away a request messenger and wait
X	for a reply in order to get the right password. In some environments
X	it may be possible that the passwd challenge is issued two times,
X	usually requiring two different answers.
X
X	No error is generated in case of an unsuccessful authorization.
X	However, the key returned in this case by the _key procedure is a
X	random key that, when used, simply drops the submitted messenger.
X
X	Some channels impose a limit on the size of messengers it is capable
X	to submit. The _mtu field gives the maximum transfer unit size in
X	bytes. Submitting larger strings results in either truncated
X	messengers or no submission at all. The value 0 indicates that there
X	is no size limit.
X
X	The _tar entry gives a hint about the data format that is expected at
X	the other end of the channel. Most channels, of course, expect a
X	messenger in the M0 format (_mzr ). The console channel, however,
X	handles plain ascii (_asc) data that is written without prior
X	modifications to the stdout device. Null for this field means that we
X	don't know for sure (e.g., in case of UDP channels with arbitrary
X	port numbers).
X
X	Only the value 1 is currently defined for the _typ field. It means
X	that the channel offers a connectionless datagram service and that a
X	channel key can be used only one time. In the future there may be
X	channels which have other access protocols and transfer semantics.
X
X
X_cod	code
X	                            --  _cod  string
X
X	Each process has in its local dictionary a _cod entry: it is
X	associated with the messenger's code string, that is, the program
X	which is currently being executed by this process.
X
X
X_cpy	copyright
X	                            --  _cpy  string
X
X	The _cpy entry is defined in the system dictionary and contains a
X	string that identifies (in human readable form) the copyright holder
X	of the executing M0 platform.
X
X
X_cta	toarray
X	                           int  _cta  array
X	                          time  _cta  array
X
X	(convert-to-array) Converts either an integer or time value to an
X	array of integers. In the case of an integer value this is a
X	decomposition into the integer's bits (the least significant bit is
X	placed in position 0). A time value is broken down into year, month,
X	day, hour, minutes, seconds and micro-seconds (the year part (which
X	includes the centuries) is placed in position 6, January has value 0,
X	the first day of a month has also the value 0).
X
X
X_cte	toextern
X	                         array  _cte  string
X	                           int  _cte  string
X	                           key  _cte  string
X	                          mark  _cte  string
X	                          name  _cte  string
X	                          proc  _cte  string
X	                        string  _cte  string
X	                          time  _cte  string
X
X	(convert-to-extern) Creates an external ascii representation of the
X	input value: when the resulting string is executed, a copy of the
X	given input data value is created. This conversion is useful for
X	transferring arbitrary keys, procedures as well as strings with non-
X	ascii characters.
X
X	Note that the current implementation does not support the dict and
X	oper type and that in case of arrays there may not be circular
X	references (i.e. an array containing a reference to the array).
X
X
X_cti	tointeger
X	                         array  _cti  int
X	                          time  _cti  int
X
X	(convert-to-integer) This conversion operator turns an array of 0 and
X	1 integer values into an integer. Element at position 0 becomes the
X	least significant bit. For a time operand, this conversion extracts
X	the number of seconds since the date of 1970-01-01.
X
X
X_ctk	tokey
X	                        string  _cti  key
X
X	(convert-to-key) Transforms an 8-byte string into the corresponding
X	key value.
X
X
X_ctl	toliteral
X	                         array  _ctl  array
X	                           key  _ctl  key
X	                          name  _ctl  name
X
X	(convert-to-literal) Removes the executable bit: procedures become
X	ordinary arrays, executable names become literals.
X
X
X_ctm	tomsgr
X	           [key string string]  _ctm  string
X	             [key string null]  _ctm  string
X
X	(convert-to-messenger) Takes an array with three fields and turns it
X	into a messenger packet, returned inside a string. The first element
X	must be a key that designates the queue in which the messenger has to
X	be put on reception. The second element contains the messenger's
X	code. The third element is used to fill in the messenger's data field
X	and may be null.
X
X
X_ctn	toname
X	                        string  _ctn  name
X
X	(convert-to-name) Allows a program to turn arbitrary byte sequences
X	into a name.
X
X
X_cts	tostring
X	                           key  _cts  string
X	                          name  _cts  string
X	                          time  _cts  string
X
X	(convert-to-string) Names and keys can be turned into their defining
X	bytes sequence by this operator. For a time value, the _cts operator
X	returns a 24-byte ascii representation of the given argument. Note
X	that the micro-second part of a time value is not shown.
X
X
X_ctt	totime
X	                           int  _ctt  time
X
X	(convert-to-time) The positive integer value is interpreted as number
X	of seconds that elapsed since 1970-01-01 00:00 {\sc utc} (coordinated
X	universal time). The resulting time's micro-second part is set to 0.
X
X
X_ctx	toexec
X	                         array  _ctx  array
X	                           key  _ctl  key
X	                          name  _ctx  name
X
X	(convert-to-executable) Sets the executable bit: arrays become
X	procedures, literal names become executable.
X
X
X_dat	data
X	                            --  _dat  string
X	                            --  _dat  null
X
X	Each process has a _dat entry defined in its local dictionary: it is
X	associated with the messenger's data string, or, if the data field
X	was empty, with a null value.
X
X
X_ena	
X	                            --  _ena  array
X
X	(error-names) Returns an array with the names of all possible errors.
X
X
X_err	
X
X	(error-handler-procedure) When an error is encountered during the
X	executions of a messenger's code, the error object and the error's
X	name are pushed onto the operand stack. Then, the procedure
X	associated to the _err key is called. The default procedure defined
X	in _sys simply calls Z, the halt operator.
X
X
X_hid	hostid
X	                            --  _hid  key
X
X	Returns the host's identifier where this M0 platform is executing.
X
X
X_loc	localdict
X	                            --  _loc  dict
X
X	This entry is defined in the process' local dictionary. Before a
X	messenger's code is executed, a new dictionary is pushed on the
X	dictionary stack and becomes the process' local dictionary.
X
X
X--	longdict
X	                            --  longdict  dict
X
X	longdict is a dictionary that contains for (almost) all M0 commands
X	an equivalent definition using a long (and more mnemonic) identifier.
X	The identifiers are composed of lowercase letters only.
X
X	In order to use the long command form, the longdict dictionary must
X	be on the dictionary stack. This can be achieved by the following
X	sequence of (short) commands:
X                                  . ) longdict ( (
X	The effect of this piece of code consists in inserting into the
X	dictionary stack the {\code longdict} dictionary just below the
X	messenger's local dictionary.
X
X
X_mgr	msgr
X	                            --  _mgr  string
X
X	Each process has a _mgr entry defined in its local dictionary: it is
X	associated with a string containing the complete messenger (including
X	header etc) as it was received.
X
X
X_nac	
X
X	(no-access) Associated with the integer value 0.
X
X
X_ori	origin
X	                            --  _ori  array
X	                            --  _ori  any
X
X	The _ori field is defined in the local dictionary of each process: it
X	gives some hints via which channel this messenger arrived at this
X	platform. The convention for an ordinary reception from an
X	neighboring host is that an array with three elements is returned:
X
X	channel (a name), interface (an int) and source address (channel
X	specific).
X
X	These elements can be used and are necessary for creating a new
X	channel back to the sender (see the _cha dictionary.
X
X	For locally submitted processes the value associated to the _ori name
X	is arbitrary: it is the submitting process which provides this value
X	when invoking the $ operator.
X
X
X_pid	platformid
X	                            --  _pid  key
X
X	Returns a key that identifies the running instance of the
X	M0-platform. Several platforms may return the same host identifier
X	(_hid ), but will have different platform identifiers.
X
X
X_r	
X
X	(read-only) Associated with the integer value 1.
X
X
X_rw	
X
X	(read-write-access) Associated with the integer value 3.
X
X
X_rwx	
X
X	(read-write-execute-access) Associated with the integer value 7.
X
X
X_rx	
X
X	(read-execute-access) Associated with the integer value 5.
X
X
X_stk	
X	                           int  _mgr  array
X
X	Returns the selected stack in form of a read-only array. The
X	permitted integer arguments are:
X	   1 | operand stack
X	   2 | dictionary stack
X	   3 | execution stack
X
X
X_sys	systemdict
X	                            --  _sys  dict
X
X	Returns the global system dictionary. This dictionary is read-only
X	for all processes.
X
X
X_tna	
X	                            --  _tna  array
X
X	(type-names) Returns an array with the names of all M0 types.
X
X
X_ver	version
X	                            --  _ver  int
X
X	Yields the language version implemented by the executing M0
X	interpreter. The values are increasing and have started with 1.
X
X
X_w	
X
X	(write-only) Associated with the integer value 2.
X
X
X_wx	
X
X	(write-execute-access) Associated with the integer value 6.
X
X
X_x	
X
X	(execute-only) Associated with the integer value 4.
X
X
X
X
X# eof
END_OF_FILE
if test 31617 -ne `wc -c <'MANUAL.doc'`; then
    echo shar: \"'MANUAL.doc'\" unpacked with wrong size!
fi
# end of 'MANUAL.doc'
fi
echo shar: End of archive 7 \(of 12\).
cp /dev/null ark7isdone
MISSING=""
for I in 1 2 3 4 5 6 7 8 9 10 11 12 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 12 archives.
    rm -f ark[1-9]isdone ark[1-9][0-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
