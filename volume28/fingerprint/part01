Newsgroups: comp.sources.unix
From: djb@silverton.berkeley.edu (D. J. Bernstein)
Subject: v28i038: fingerprint - a uniform interface to MD5, snefru, et al, V0.75, Part01/01
Message-id: <1.769396895.27888@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: djb@silverton.berkeley.edu (D. J. Bernstein)
Posting-Number: Volume 28, Issue 38
Archive-Name: fingerprint/part01

	Do you want a powerful, uniform interface to MD5, a standard CRC-32,
	Snefru-8, and a combined universal fingerprint, in highly efficient
	library form or as easy-to-use programs? That's what this package
	provides. The code is freely reusable so you can distribute it along
	with your own applications. Have fun.

# This is a shell archive.  Save it in a file, remove anything before
# this line, and then unpack it by entering "sh file".  Note, it may
# create directories; files and directories will be owned by you and
# have default permissions.
#
# This archive contains:
#
#	BLURB
#	README
#	FORMLETTER
#	FILES
#	OBJECTS
#	BINARIES
#	LIBRARIES
#	Makefile
#	fprintfile.3
#	fprintfile.h
#	fprintfile.c
#	fprintfmt.c
#	crc32file.3
#	crc32file.h
#	crc32file.c
#	md5file.3
#	md5file.h
#	md5file.c
#	snefrufile.3
#	snefrufile.h
#	snefrufile.c
#	snefru512.3
#	snefru512.h
#	snefru512.c
#	snefru.1
#	snefru.c
#	md5.1
#	md5.c
#	cksum.1
#	cksum.c
#	fptocksum.c
#	fptomd5.c
#	fptosnefru.c
#	fingerprint.1
#	fingerprint.c
#	summain.1
#	summain.c
#	getopt.3
#	getopt.h
#	getopt.c
#	subgetopt.3
#	subgetopt.h
#	subgetopt.c
#	TIMINGS
#	fingerprint.tests
#	md5.tests
#	snefru.tests
#	cksum.tests
#
echo x - BLURB
sed 's/^X//' >BLURB << 'END-of-BLURB'
Xfingerprint 0.75: the universal hash/checksum package
X940205
XDaniel J. Bernstein, djb@silverton.berkeley.edu
X
XDo you want a powerful, uniform interface to MD5, a standard CRC-32,
XSnefru-8, and a combined universal fingerprint, in highly efficient
Xlibrary form or as easy-to-use programs? That's what this package
Xprovides. The code is freely reusable so you can distribute it along
Xwith your own applications. Have fun.
X
XThe main addition in this release is a standard -lfprint installation.
END-of-BLURB
echo x - README
sed 's/^X//' >README << 'END-of-README'
XThis is the fingerprint 0.75 package, gamma.
X940205
XDaniel J. Bernstein, djb@silverton.berkeley.edu.
X
XThe fingerprint program produces a base-64-sanely-encoded fingerprint of
Xits input. I imagine this fingerprint as something universal and
Xpermanent, which people will use forever. If the fingerprint is ever
Xbroken, I'd rather make an entirely new version than try to extend this
Xone.
X
XA fingerprint is 76 characters long. What does it contain? Here's a list:
X
X1. A Snefru-8 (version 2.5, 8 passes, 512->256) hash.
X   (Code derived from the Xerox Secure Hash Function.)
X2. An MD5 hash, as per RFC 1321.
X   (Code derived from the RSADSI MD5 Message-Digest Algorithm.)
X3. A CRC checksum, as in the new cksum utility.
X4. Length modulo 2^40.
X
XThe output format is not expected to be compatible with anything.
XHowever, I have helper utilities which take a fingerprint and produce 
Xthe purported output of Merkle's snefru program (fptosnefru), the 
Xpurported output of RSADSI's mddriver -x (fptomd5), or the purported 
Xoutput of the POSIX cksum program (fptocksum).
X
XAlso included: (1) a clone of the snefru program, with some extra 
Xfeatures; (2) a cksum implementation; (3) an md5 driver; (4) libraries
Xwith a uniform interface for calculating these hashes; (5) some 
Xdocumentation.
X
XTo compile: make. This will build the seven executables. It'll also try
Xto use ar+ranlib to make libfprint.a. (On an Alpha, use cc -Dlong=int.
XOn an SGI, use cc -cckr -DRANLIB=echo.)
X
XTo try a few simple tests: make test.
X
XTo see how fast the various hash functions can handle a megabyte of data
Xon your machine: make speedtest.
X
XTo install: as root, make install. This copies the executables, library,
Xinclude files, and documentation to various spots inside /usr/local.
X
XI've written this because I want to set up a global database which maps
Xfingerprints to network locations. Thanks to the tripwire authors for
Xunknowingly giving this project a push, and thanks of course to the
Xhash function designers and implementors.
X
XThanks to the alpha and gamma testers for their comments and criticism:
X
X  Eric Backus <ericb@lsid.hp.com>
X  Alan Barrett <barrett@daisy.ee.und.ac.za>
X  Paul Haahr <haahr@mv.us.adobe.com>
X  Mark C. Henderson <mch@wimsey.bc.ca>
X  Stephan Neuhaus <neuhaus@informatik.uni-kl.de>
X  Danny Padwa <padwad@gs.com>
X  Eric Rescorla <ekr@eitech.com>
X  Icarus Sparry <I.Sparry@ss1.bath.ac.uk>
X
X  Mike J. Bell <mikeb@gl.umbc.edu>
X  Calvin Clark <ckclark@mit.edu>
X  Warren Lavallee <warren@marcam.com>
X  Jay Lessert <jayl@lattice.com>
X  Greg Onufer <greg.onufer@eng.sun.com>
X  Geoff Scully <gws@xenitec.xenitec.on.ca>
X  Karl Vogel <vogelke@c-17igp.wpafb.af.mil>
X  Tom Watson <tsw@cipher.apple.com>
X
X940202: switched to new getopt/subgetopt
X931108: summain had -f and -F switched; fixed
X
XContinuing worries: I still have to make sure I'm giving all appropriate
Xcredit here. Also, I haven't tested *_addn properly. I'm not too happy
Xwith the man pages, which were to a large extent mechanically produced;
XI'd appreciate any suggestions for improvement.
X
Xecho hi | fingerprint:
XJoXEhdflGxZdS89tDd5zpFx0JRJyX0k67EH0Jod7aet4hIjB.hGhon0veN0BZRfi058HZQ06U0JD	
END-of-README
echo x - FORMLETTER
sed 's/^X//' >FORMLETTER << 'END-of-FORMLETTER'
XTo: djb@silverton.berkeley.edu (Dan Bernstein)
XFrom: 
XDate: 
XSubject: fingerprint 0.75 FORMLETTER
X
XPackage: fingerprint 0.75, gamma, 940205 release
XObtained from (e.g., uunet.uu.net): 
XObtained by (e.g., ftp): 
X
X1. Machine architecture (e.g., Sun 4/280): 
X2. Operating system (e.g., SunOS 4.1): 
X3. OS vendor (e.g., Sun): 
X4. Does fingerprint work on your machine so far (yes/no)?
X5. What's CC in your Makefile?
X   CC=
X
X6. Describe any problems you've had with fingerprint.
X
X
X
X7. If you've timed the programs (make speedtest), how fast were they?
X
X
X
X8. Any further questions, comments, or suggestions?
X
X
X
XYour name:
END-of-FORMLETTER
echo x - FILES
sed 's/^X//' >FILES << 'END-of-FILES'
XBLURB
XREADME
XFORMLETTER
XFILES
XOBJECTS
XBINARIES
XLIBRARIES
XMakefile
Xfprintfile.3
Xfprintfile.h
Xfprintfile.c
Xfprintfmt.c
Xcrc32file.3
Xcrc32file.h
Xcrc32file.c
Xmd5file.3
Xmd5file.h
Xmd5file.c
Xsnefrufile.3
Xsnefrufile.h
Xsnefrufile.c
Xsnefru512.3
Xsnefru512.h
Xsnefru512.c
Xsnefru.1
Xsnefru.c
Xmd5.1
Xmd5.c
Xcksum.1
Xcksum.c
Xfptocksum.c
Xfptomd5.c
Xfptosnefru.c
Xfingerprint.1
Xfingerprint.c
Xsummain.1
Xsummain.c
Xgetopt.3
Xgetopt.h
Xgetopt.c
Xsubgetopt.3
Xsubgetopt.h
Xsubgetopt.c
XTIMINGS
Xfingerprint.tests
Xmd5.tests
Xsnefru.tests
Xcksum.tests
END-of-FILES
echo x - OBJECTS
sed 's/^X//' >OBJECTS << 'END-of-OBJECTS'
Xcksum.o
Xcrc32file.o
Xfingerprint.o
Xfprintfile.o
Xfprintfmt.o
Xfptocksum.o
Xfptomd5.o
Xfptosnefru.o
Xgetopt.o
Xmd5.o
Xmd5file.o
Xsnefru.o
Xsnefru512.o
Xsnefrufile.o
Xsubgetopt.o
Xsummain.o
Xspeedtest.1M
END-of-OBJECTS
echo x - BINARIES
sed 's/^X//' >BINARIES << 'END-of-BINARIES'
Xcksum
Xfingerprint
Xfptocksum
Xfptomd5
Xfptosnefru
Xmd5
Xsnefru
END-of-BINARIES
echo x - LIBRARIES
sed 's/^X//' >LIBRARIES << 'END-of-LIBRARIES'
Xlibfprint.a
END-of-LIBRARIES
echo x - Makefile
sed 's/^X//' >Makefile << 'END-of-Makefile'
XCC=cc -O
XAR=ar cr
XRANLIB=ranlib
XCP=cp
XCHMODBIN=chmod 755
XCHMODLIB=chmod 644
XCHMODMAN=chmod 644
XCHMODINC=chmod 644
XLOCAL=/usr/local
XLOCALBIN=$(LOCAL)/bin
XLOCALLIB=$(LOCAL)/lib
XLOCALMAN1=$(LOCAL)/man/man1
XLOCALMAN3=$(LOCAL)/man/man3
XLOCALINC=$(LOCAL)/include
XTIME=time
XCOMPRESS=compress
X
Xall: fingerprint fptocksum fptosnefru fptomd5 snefru md5 cksum libfprint.a
X
Xinstall: all
X	$(CHMODBIN) `cat BINARIES`
X	-$(CP) `cat BINARIES` $(LOCALBIN)
X	$(CHMODLIB) `cat LIBRARIES`
X	-$(CP) `cat LIBRARIES` $(LOCALLIB)
X	$(CHMODMAN) fingerprint.1 cksum.1 md5.1 snefru.1 summain.1
X	-$(CP) fingerprint.1 cksum.1 md5.1 snefru.1 summain.1 $(LOCALMAN1)
X	$(CHMODMAN) fprintfile.3 crc32file.3 md5file.3 snefrufile.3 snefru512.3
X	-$(CP) fprintfile.3 crc32file.3 md5file.3 snefrufile.3 snefru512.3 $(LOCALMAN3)
X	$(CHMODINC) fprintfile.h crc32file.h md5file.h snefrufile.h snefru512.h
X	-$(CP) fprintfile.h crc32file.h md5file.h snefrufile.h snefru512.h $(LOCALINC)
X
Xlibfprint.a: fprintfmt.o fprintfile.o crc32file.o md5file.o snefrufile.o snefru512.o
X	$(AR) libfprint.a fprintfmt.o fprintfile.o crc32file.o md5file.o snefrufile.o snefru512.o
X	$(RANLIB) libfprint.a
X
Xsnefru: snefru.o snefrufile.o snefru512.o summain.o getopt.o subgetopt.o
X	$(CC) -o snefru snefru.o snefrufile.o snefru512.o summain.o getopt.o subgetopt.o
X
Xcksum: cksum.o crc32file.o summain.o getopt.o subgetopt.o
X	$(CC) -o cksum cksum.o crc32file.o summain.o getopt.o subgetopt.o
X
Xmd5: md5.o md5file.o summain.o getopt.o subgetopt.o
X	$(CC) -o md5 md5.o md5file.o summain.o getopt.o subgetopt.o
X
Xfptosnefru: fptosnefru.o fprintfmt.o
X	$(CC) -o fptosnefru fptosnefru.o fprintfmt.o
X
Xfptomd5: fptomd5.o fprintfmt.o
X	$(CC) -o fptomd5 fptomd5.o fprintfmt.o
X
Xfptocksum: fptocksum.o fprintfmt.o
X	$(CC) -o fptocksum fptocksum.o fprintfmt.o
X
Xfingerprint: fingerprint.o crc32file.o md5file.o snefrufile.o \
Xsnefru512.o fprintfile.o fprintfmt.o getopt.o subgetopt.o summain.o
X	$(CC) -o fingerprint fingerprint.o crc32file.o md5file.o \
X	snefrufile.o snefru512.o fprintfile.o fprintfmt.o getopt.o subgetopt.o summain.o
X
Xfptosnefru.o: fptosnefru.c
X	$(CC) -c fptosnefru.c
X
Xfptomd5.o: fptomd5.c
X	$(CC) -c fptomd5.c
X
Xfptocksum.o: fptocksum.c
X	$(CC) -c fptocksum.c
X
Xcksum.o: cksum.c crc32file.h
X	$(CC) -c cksum.c
X
Xmd5.o: md5.c md5file.h
X	$(CC) -c md5.c
X
Xsnefru.o: snefru.c snefrufile.h
X	$(CC) -c snefru.c
X
Xfprintfmt.o: fprintfmt.c fprintfile.h
X	$(CC) -c fprintfmt.c
X
Xfprintfile.o: fprintfile.c fprintfile.h
X	$(CC) -c fprintfile.c
X
Xcrc32file.o: crc32file.c crc32file.h
X	$(CC) -c crc32file.c
X
Xmd5file.o: md5file.c md5file.h
X	$(CC) -c md5file.c
X
Xsnefrufile.o: snefrufile.c snefrufile.h snefru512.h
X	@echo You should get a warning for snefrufile.c.
X	@echo This is my reminder that the code there is not portable.
X	$(CC) -c snefrufile.c
X
Xsnefru512.o: snefru512.c snefru512.h
X	$(CC) -c snefru512.c
X
Xfingerprint.o: fingerprint.c crc32file.h md5file.h snefrufile.h \
Xfprintfile.h getopt.h subgetopt.h
X	$(CC) -c fingerprint.c
X
Xsummain.o: summain.c getopt.h subgetopt.h
X	$(CC) -c summain.c
X
Xgetopt.o: getopt.c getopt.h subgetopt.h
X	$(CC) -c getopt.c
X
Xsubgetopt.o: subgetopt.c subgetopt.h
X	$(CC) -c subgetopt.c
X
Xtest:
X	@echo 'Trying canned tests... No output (other than seven ./commands) if successful.'
X	./fingerprint -c < fingerprint.tests
X	./snefru -c < snefru.tests
X	./md5 -c < md5.tests
X	./cksum -c < cksum.tests
X	./fptosnefru < fingerprint.tests | cmp - snefru.tests
X	./fptomd5 < fingerprint.tests | cmp - md5.tests
X	./fptocksum < fingerprint.tests | cmp - cksum.tests
X
Xshar:
X	shar `cat FILES` > fingerprint.shar
X	chmod 400 fingerprint.shar
X
Xclean: OBJECTS BINARIES LIBRARIES
X	rm -f `cat OBJECTS BINARIES LIBRARIES`
X
Xspeedtest.1M:
X	@echo 'Making a one-megabyte file for speed tests...'
X	cat `cat FILES` > speedtest.tmp
X	dd bs=8k count=8 < speedtest.tmp > speedtest.64k
X	cat speedtest.64k speedtest.64k speedtest.64k speedtest.64k > speedtest.256k
X	cat speedtest.256k speedtest.256k speedtest.256k speedtest.256k > speedtest.1M
X	rm -f speedtest.tmp speedtest.64k speedtest.256k
X
Xspeedtest: speedtest.1M fingerprint snefru md5 cksum
X	@echo 'Trying speed tests...'
X	$(TIME) ./fingerprint < speedtest.1M > /dev/null
X	$(TIME) ./snefru < speedtest.1M > /dev/null
X	$(TIME) ./md5 < speedtest.1M > /dev/null
X	$(TIME) ./cksum < speedtest.1M > /dev/null
X	$(TIME) $(COMPRESS) < speedtest.1M > /dev/null
END-of-Makefile
echo x - fprintfile.3
sed 's/^X//' >fprintfile.3 << 'END-of-fprintfile.3'
X.TH fingerprintfile 3
X.SH NAME
Xfingerprintfile \- compute the fingerprint of a stream
X.SH SYNTAX
X.B #include <fprintfile.h>
X
Xvoid \fBfingerprintfile_clear(\fIf\fB)\fR;
X.br
Xvoid \fBfingerprintfile_addn(\fIm,b,len\fB)\fR;
X.br
Xvoid \fBfingerprintfile_add(\fIf\fB,\fIc\fB)\fR;
X.br
Xvoid \fBfingerprintfile_hash(\fIf\fB,\fIh\fB)\fR;
X
Xunsigned int \fBfingerprintfile_fmt(\fIs\fB,\fIh\fB)\fR;
X.br
Xunsigned int \fBfingerprintfile_scan(\fIs\fB,\fIh\fB)\fR;
X
Xfingerprintfile *\fIf\fP;
X.br
Xunsigned char \fIc\fP;
X.br
Xunsigned char \fIh\fP[FINGERPRINTFILE_HASHLEN];
X.br
Xunsigned char *\fIb\fP;
X.br
Xint \fIlen\fR;
X
Xchar *\fIs\fP;
X.SH DESCRIPTION
X.B fingerprintfile
Xcomputes the fingerprint
Xof a stream of unsigned characters.
X
XNobody knows how to create two files with the same fingerprint.
X
X.I f
Xpoints to an fingerprintfile structure,
Xwhich accumulates the fingerprint as
Xdata is fed in.
XBefore feeding in any data you must
Xcall
X.B fingerprintfile_clear(\fIf\fB)\fR.
XThen, for each unsigned character
X.I c
Xfrom the stream,
Xcall
X.B fingerprintfile_add(\fIf\fB,\fIc\fB)\fR.
X
XTo process an array
X.I b
Xof
X.I len
Xunsigned characters,
Xcall
X.B fingerprintfile_addn(\fIm\fB,\fIb\fB,\fIlen\fB)\fR.
XThis is faster than calling
X.B fingerprintfile_add
Xon each character in turn.
X
X.B fingerprintfile_hash(\fIf\fB,\fIh\fB)\fR
Xplaces the resulting fingerprint into
X.I h\fP,
Xan array of bytes of
Xlength FINGERPRINTFILE_HASHLEN.
XYou may not use
X.I f
Xafter that without
Xagain calling
X.B fingerprintfile_clear(\fIf\fB)\fR.
X
XFINGERPRINTFILE_HASHLEN equals 57.
X
X.B fingerprintfile_fmt(\fIs\fB,\fIh\fB)\fR
Xplaces a readable version of the hash
X.I h
Xinto the character array
X.I s\fP.
XIt returns the number of characters written.
XIf
X.I s
Xis zero,
X.B fingerprintfile_fmt
Xwill not write anything,
Xbut it will return the number of characters it would have written.
X
X.B fingerprintfile_scan(\fIs\fB,\fIh\fB)\fR
Xattempts to decipher a readable hash
Xappearing in the character array
X.I s\fP.
XIf it fails it returns 0.
XIf it succeeds it places the hash
Xinto
X.I h\fP,
Xand returns the number of characters read
Xfrom
X.I s\fP.
X
XThe readable version of a hash
Xtakes up exactly 76 characters.
X.SH VERSION
Xfingerprintfile 0.95, 8 July 1993.
X.SH DEFINITION
XThe fingerprint contains four pieces of information:
Xthe result of
X.B snefrufile\fR,
Xwhich
X(through
X.B snefru512\fR)
Xcomputes the Snefru-8 function
Xwith code derived from the Xerox Secure Hash Function;
Xthe result of
X.B md5file\fR,
Xwhich computes the
XRSADSI MD5 Message-Digest Algorithm;
Xthe result of
X.B crc32file\fR,
Xwhich computes a standard CRC-32;
Xand the number of bytes of the stream, modulo terabytes.
X.SH AUTHOR
XPlaced into the public domain by Daniel J. Bernstein.
XNote that the libraries used by
X.B fingerprintfile
Xare not public-domain.
X.SH "SEE ALSO"
Xfingerprint(1),
Xcrc32file(3),
Xmd5file(3),
Xsnefrufile(3)
END-of-fprintfile.3
echo x - fprintfile.h
sed 's/^X//' >fprintfile.h << 'END-of-fprintfile.h'
X#ifndef FINGERPRINTFILE_H
X#define FINGERPRINTFILE_H
X
X#include "snefrufile.h"
X#include "md5file.h"
X#include "crc32file.h"
X
Xtypedef struct
X {
X  snefrufile s;
X  md5file m;
X  crc32file c;
X  unsigned char len[5];
X }
Xfingerprintfile;
X
X#define FINGERPRINTFILE_HASHLEN 57
X
Xextern void fingerprintfile_clear();
Xextern void fingerprintfile_add();
Xextern void fingerprintfile_addn();
Xextern void fingerprintfile_hash();
Xextern unsigned int fingerprintfile_fmt();
Xextern unsigned int fingerprintfile_scan();
X
X#endif
END-of-fprintfile.h
echo x - fprintfile.c
sed 's/^X//' >fprintfile.c << 'END-of-fprintfile.c'
X/* fprintfile.c, fprintfmt.c, fprintfile.h: fingerprint library
XDaniel J. Bernstein, brnstnd@nyu.edu.
XDepends on snefrufile.h, md5file.h, crc32file.h.
XNo environment requirements.
X930708: fprintfile 0.95. Public domain.
X930708: Added fingerprintfile_addn.
X930622: Split off fprintfmt.c.
X930601: Baseline, fprintfile 0.8. Public domain.
XNo known patent problems.
X
XDocumentation in fprintfile.3.
X*/
X
X#include "fprintfile.h"
X
Xvoid fingerprintfile_clear(f)
Xfingerprintfile *f;
X{
X snefrufile_clear(&f->s);
X md5file_clear(&f->m);
X crc32file_clear(&f->c);
X f->len[0] = f->len[1] = f->len[2] = f->len[3] = f->len[4] = 0;
X}
X
Xvoid fingerprintfile_addn(f,s,n)
Xfingerprintfile *f;
Xunsigned char *s;
Xint n;
X{
X unsigned char newlen;
X
X snefrufile_addn(&f->s,s,n);
X md5file_addn(&f->m,s,n);
X crc32file_addn(&f->c,s,n);
X while (n >= 256)
X  {
X   if(!++f->len[1])if(!++f->len[2])if(!++f->len[3])++f->len[4];
X   n -= 256;
X  }
X newlen = n;
X if ((f->len[0] += newlen) < newlen)
X   if(!++f->len[1])if(!++f->len[2])if(!++f->len[3])++f->len[4];
X}
X
Xvoid fingerprintfile_add(f,c)
Xfingerprintfile *f;
Xunsigned char c;
X{
X snefrufile_add(&f->s,c);
X md5file_add(&f->m,c);
X crc32file_add(&f->c,c);
X if(!++f->len[0])if(!++f->len[1])if(!++f->len[2])if(!++f->len[3])++f->len[4];
X}
X
Xvoid fingerprintfile_hash(f,h)
Xfingerprintfile *f;
Xunsigned char h[57];
X{
X snefrufile_hash(&f->s,h);
X md5file_hash(&f->m,h + 32);
X crc32file_hash(&f->c,h + 48);
X h[52] = f->len[0]; h[53] = f->len[1]; h[54] = f->len[2];
X h[55] = f->len[3]; h[56] = f->len[4];
X}
END-of-fprintfile.c
echo x - fprintfmt.c
sed 's/^X//' >fprintfmt.c << 'END-of-fprintfmt.c'
X/* fprintfile.c, fprintfmt.c, fprintfile.h: fingerprint library
XDaniel J. Bernstein, brnstnd@nyu.edu.
XDepends on snefrufile.h, md5file.h, crc32file.h.
XNo environment requirements.
X930708: fprintfile 0.95. Public domain.
X930708: Changed slash to colon in base64sane.
X930622: Split off fprintfmt.c.
X930601: Baseline, fprintfile 0.8. Public domain.
XNo known patent problems.
X
XDocumentation in fprintfile.3.
X*/
X
X#include "fprintfile.h"
X
Xstatic char base64sane[]
X= "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:.";
X
Xunsigned int fingerprintfile_fmt(s,h)
Xchar *s;
Xunsigned char *h;
X{
X if (s)
X  {
X   int i;
X   unsigned long x;
X
X   for (i = 0;i < 19;++i)
X    {
X     x = h[3 * i] + 256 * (h[3 * i + 1] + 256 * (long) h[3 * i + 2]);
X     s[(12 * i) % 76] = base64sane[x & 63]; x /= 64;
X     s[(12 * i + 41) % 76] = base64sane[x & 63]; x /= 64;
X     s[(12 * i + 6) % 76] = base64sane[x & 63]; x /= 64;
X     s[(12 * i + 47) % 76] = base64sane[x & 63];
X    }
X  }
X return 76;
X}
X
Xstatic int unbase64(c)
Xchar c;
X{
X int i;
X
X /* XXX: efficiency? */
X
X for (i = 0;i < 64;++i)
X   if (base64sane[i] == c)
X     return i;
X return -1;
X}
X
Xunsigned int fingerprintfile_scan(s,h)
Xchar *s;
Xunsigned char h[57];
X{
X int i;
X unsigned long x;
X
X for (i = 0;i < 76;++i)
X   if (unbase64(s[i]) == -1) /* XXX: great, calling it twice! */
X     return 0;
X for (i = 0;i < 19;++i)
X  {
X   x = unbase64(s[(12 * i + 47) % 76]); x *= 64;
X   x += unbase64(s[(12 * i + 6) % 76]); x *= 64;
X   x += unbase64(s[(12 * i + 41) % 76]); x *= 64;
X   x += unbase64(s[(12 * i) % 76]);
X   h[3 * i] = x & 255; x = x / 256;
X   h[3 * i + 1] = x & 255; x = x / 256;
X   h[3 * i + 2] = x;
X  }
X return 76;
X}
END-of-fprintfmt.c
echo x - crc32file.3
sed 's/^X//' >crc32file.3 << 'END-of-crc32file.3'
X.TH crc32file 3
X.SH NAME
Xcrc32file \- apply the standard CRC-32 hash function to a stream
X.SH SYNTAX
X.B #include <crc32file.h>
X
Xvoid \fBcrc32file_clear(\fIm\fB)\fR;
X.br
Xvoid \fBcrc32file_add(\fIm,c\fB)\fR;
X.br
Xvoid \fBcrc32file_addn(\fIm,b,len\fB)\fR;
X.br
Xvoid \fBcrc32file_hash(\fIm,h\fB)\fR;
X
Xcrc32file *\fIm\fP;
X.br
Xunsigned char \fIc\fP;
X.br
Xunsigned char \fIh\fP[CRC32FILE_HASHLEN];
X.br
Xunsigned char *\fIb\fP;
X.br
Xint \fIlen\fR;
X.SH DESCRIPTION
X.B crc32file
Xapplies the standard CRC-32 hash function
Xto a stream of unsigned characters.
X
X.I m
Xpoints to an crc32file structure,
Xwhich accumulates the hash as
Xdata is fed in.
XBefore feeding in any data you must
Xcall
X.B crc32file_clear(\fIm\fB)\fR.
XThen, for each unsigned character
X.I c
Xfrom the stream,
Xcall
X.B crc32file_add(\fIm\fB,\fIc\fB)\fR.
X
XTo process an array
X.I b
Xof
X.I len
Xunsigned characters,
Xcall
X.B crc32file_addn(\fIm\fB,\fIb\fB,\fIlen\fB)\fR.
XThis is faster than calling
X.B crc32file_add
Xon each character in turn.
X
X.B crc32file_hash(\fIm\fB,\fIh\fB)\fR
Xplaces the resulting hash into
X.I h\fP,
Xan array of bytes of
Xlength CRC32FILE_HASHLEN.
XYou may not use
X.I m
Xafter that without
Xagain calling
X.B crc32file_clear(\fIm\fB)\fR.
X
XCRC32FILE_HASHLEN equals 4.
X.SH COMPATIBILITY
XThe
X.B crc32file
Xlibrary was designed for compatibility with
XBSD 4.4
X.B cksum\fR.
X.SH DEFINITION
XSee the POSIX specification for
X.B cksum\fR.
X.SH VERSION
Xcrc32file 0.95, 8 July 1993.
X.SH AUTHOR
XInterface by Daniel J. Bernstein
Xto code written by Gary S. Brown.
X.SH "SEE ALSO"
Xcksum(1)
END-of-crc32file.3
echo x - crc32file.h
sed 's/^X//' >crc32file.h << 'END-of-crc32file.h'
X#ifndef CRC32FILE_H
X#define CRC32FILE_H
X
Xtypedef struct { unsigned long c; unsigned char len[8]; } crc32file;
X
X#define CRC32FILE_HASHLEN 4
X
Xextern void crc32file_clear();
Xextern void crc32file_add();
Xextern void crc32file_addn();
Xextern void crc32file_hash();
X
X#endif
END-of-crc32file.h
echo x - crc32file.c
sed 's/^X//' >crc32file.c << 'END-of-crc32file.c'
X/* a few improvements by DJB 930708 */
X/* nonreverse table included by DJB 930622 */
X/* interface mods by DJB 930529 */
X  /*  COPYRIGHT (C) 1986 Gary S. Brown.  You may use this program, or       */
X  /*  code or tables extracted from it, as desired without restriction.     */
X  /*  X^32+X^26+X^23+X^22+X^16+X^12+X^11+X^10+X^8+X^7+X^5+X^4+X^2+X^1+X^0   */
X  /*      polynomial $edb88320                                              */
X
X#include "crc32file.h"
X
Xstatic unsigned long crc_32_tab[] = {
X	0x0,
X	0x04c11db7, 0x09823b6e, 0x0d4326d9, 0x130476dc, 0x17c56b6b,
X	0x1a864db2, 0x1e475005, 0x2608edb8, 0x22c9f00f, 0x2f8ad6d6,
X	0x2b4bcb61, 0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd,
X	0x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9, 0x5f15adac,
X	0x5bd4b01b, 0x569796c2, 0x52568b75, 0x6a1936c8, 0x6ed82b7f,
X	0x639b0da6, 0x675a1011, 0x791d4014, 0x7ddc5da3, 0x709f7b7a,
X	0x745e66cd, 0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039,
X	0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5, 0xbe2b5b58,
X	0xbaea46ef, 0xb7a96036, 0xb3687d81, 0xad2f2d84, 0xa9ee3033,
X	0xa4ad16ea, 0xa06c0b5d, 0xd4326d90, 0xd0f37027, 0xddb056fe,
X	0xd9714b49, 0xc7361b4c, 0xc3f706fb, 0xceb42022, 0xca753d95,
X	0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1, 0xe13ef6f4,
X	0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d, 0x34867077, 0x30476dc0,
X	0x3d044b19, 0x39c556ae, 0x278206ab, 0x23431b1c, 0x2e003dc5,
X	0x2ac12072, 0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16,
X	0x018aeb13, 0x054bf6a4, 0x0808d07d, 0x0cc9cdca, 0x7897ab07,
X	0x7c56b6b0, 0x71159069, 0x75d48dde, 0x6b93dddb, 0x6f52c06c,
X	0x6211e6b5, 0x66d0fb02, 0x5e9f46bf, 0x5a5e5b08, 0x571d7dd1,
X	0x53dc6066, 0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba,
X	0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e, 0xbfa1b04b,
X	0xbb60adfc, 0xb6238b25, 0xb2e29692, 0x8aad2b2f, 0x8e6c3698,
X	0x832f1041, 0x87ee0df6, 0x99a95df3, 0x9d684044, 0x902b669d,
X	0x94ea7b2a, 0xe0b41de7, 0xe4750050, 0xe9362689, 0xedf73b3e,
X	0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2, 0xc6bcf05f,
X	0xc27dede8, 0xcf3ecb31, 0xcbffd686, 0xd5b88683, 0xd1799b34,
X	0xdc3abded, 0xd8fba05a, 0x690ce0ee, 0x6dcdfd59, 0x608edb80,
X	0x644fc637, 0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb,
X	0x4f040d56, 0x4bc510e1, 0x46863638, 0x42472b8f, 0x5c007b8a,
X	0x58c1663d, 0x558240e4, 0x51435d53, 0x251d3b9e, 0x21dc2629,
X	0x2c9f00f0, 0x285e1d47, 0x36194d42, 0x32d850f5, 0x3f9b762c,
X	0x3b5a6b9b, 0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff,
X	0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623, 0xf12f560e,
X	0xf5ee4bb9, 0xf8ad6d60, 0xfc6c70d7, 0xe22b20d2, 0xe6ea3d65,
X	0xeba91bbc, 0xef68060b, 0xd727bbb6, 0xd3e6a601, 0xdea580d8,
X	0xda649d6f, 0xc423cd6a, 0xc0e2d0dd, 0xcda1f604, 0xc960ebb3,
X	0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7, 0xae3afba2,
X	0xaafbe615, 0xa7b8c0cc, 0xa379dd7b, 0x9b3660c6, 0x9ff77d71,
X	0x92b45ba8, 0x9675461f, 0x8832161a, 0x8cf30bad, 0x81b02d74,
X	0x857130c3, 0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640,
X	0x4e8ee645, 0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c, 0x7b827d21,
X	0x7f436096, 0x7200464f, 0x76c15bf8, 0x68860bfd, 0x6c47164a,
X	0x61043093, 0x65c52d24, 0x119b4be9, 0x155a565e, 0x18197087,
X	0x1cd86d30, 0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,
X	0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088, 0x2497d08d,
X	0x2056cd3a, 0x2d15ebe3, 0x29d4f654, 0xc5a92679, 0xc1683bce,
X	0xcc2b1d17, 0xc8ea00a0, 0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb,
X	0xdbee767c, 0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18,
X	0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4, 0x89b8fd09,
X	0x8d79e0be, 0x803ac667, 0x84fbdbd0, 0x9abc8bd5, 0x9e7d9662,
X	0x933eb0bb, 0x97ffad0c, 0xafb010b1, 0xab710d06, 0xa6322bdf,
X	0xa2f33668, 0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4
X};
X
Xvoid crc32file_clear(c)
Xcrc32file *c;
X{
X c->c = 0;
X c->len[0] = c->len[1] = c->len[2] = c->len[3] =
X c->len[4] = c->len[5] = c->len[6] = c->len[7] = 0;
X}
X
Xvoid crc32file_addn(c,s,n)
Xcrc32file *c;
Xregister unsigned char *s;
Xint n;
X{
X register unsigned long x;
X unsigned char newc;
X register int i;
X
X i = n;
X while (i >= 256)
X  {
X   if (!++c->len[1]) if (!++c->len[2]) if (!++c->len[3])
X   if (!++c->len[4]) if (!++c->len[5]) if (!++c->len[6]) if (!++c->len[7])
X     ;
X   i -= 256;
X  }
X newc = i;
X if ((c->len[0] += newc) < newc)
X   if (!++c->len[1]) if (!++c->len[2]) if (!++c->len[3])
X   if (!++c->len[4]) if (!++c->len[5]) if (!++c->len[6]) if (!++c->len[7])
X     ;
X 
X i = n;
X x = c->c;
X while (i--)
X   x = crc_32_tab[(int) ((x >> 24) ^ *s++) & 0xff] ^ (x << 8);
X c->c = x;
X}
X
Xvoid crc32file_add(c,ch)
Xcrc32file *c;
Xunsigned char ch;
X{
X register unsigned long x;
X
X x = c->c;
X c->c = crc_32_tab[(int) ((x >> 24) ^ ch) & 0xff] ^ (x << 8);
X if (!++c->len[0]) if (!++c->len[1]) if (!++c->len[2]) if (!++c->len[3])
X if (!++c->len[4]) if (!++c->len[5]) if (!++c->len[6]) if (!++c->len[7])
X   ;
X}
X
Xvoid crc32file_hash(c,h)
Xcrc32file *c;
Xunsigned char *h;
X{
X register unsigned long x;
X unsigned char len[8];
X int i;
X
X for (i = 0;i < 8;++i) len[i] = c->len[i];
X for (i = 7;i >= 0;--i) if (len[i]) break;
X crc32file_addn(c,len,i + 1);
X
X x = ~c->c;
X h[0] = x & 255; x /= 256;
X h[1] = x & 255; x /= 256;
X h[2] = x & 255; x /= 256;
X h[3] = x & 255;
X}
END-of-crc32file.c
echo x - md5file.3
sed 's/^X//' >md5file.3 << 'END-of-md5file.3'
X.TH md5file 3
X.SH NAME
Xmd5file \- apply the RSADSI MD5 Message-Digest Algorithm to a stream
X.SH SYNTAX
X.B #include <md5file.h>
X
Xvoid \fBmd5file_clear(\fIm\fB)\fR;
X.br
Xvoid \fBmd5file_add(\fIm,c\fB)\fR;
X.br
Xvoid \fBmd5file_addn(\fIm,b,len\fB)\fR;
X.br
Xvoid \fBmd5file_hash(\fIm,h\fB)\fR;
X
Xmd5file *\fIm\fP;
X.br
Xunsigned char \fIc\fP;
X.br
Xunsigned char \fIh\fP[MD5FILE_HASHLEN];
X.br
Xunsigned char *\fIb\fP;
X.br
Xint \fIlen\fR;
X.SH DESCRIPTION
X.B md5file
Xapplies the MD5 hash function
Xto a stream of unsigned characters.
X
X.I m
Xpoints to an md5file structure,
Xwhich accumulates the hash as
Xdata is fed in.
XBefore feeding in any data you must
Xcall
X.B md5file_clear(\fIm\fB)\fR.
XThen, for each unsigned character
X.I c
Xfrom the stream,
Xcall
X.B md5file_add(\fIm\fB,\fIc\fB)\fR.
X
XTo process an array
X.I b
Xof
X.I len
Xunsigned characters,
Xcall
X.B md5file_addn(\fIm\fB,\fIb\fB,\fIlen\fB)\fR.
XThis is faster than calling
X.B md5file_add
Xon each character in turn.
X
X.B md5file_hash(\fIm\fB,\fIh\fB)\fR
Xplaces the resulting hash into
X.I h\fP,
Xan array of bytes of
Xlength MD5FILE_HASHLEN.
XYou may not use
X.I m
Xafter that without
Xagain calling
X.B md5file_clear(\fIm\fB)\fR.
X
XMD5FILE_HASHLEN equals 16.
X.SH COMPATIBILITY
XExcept for minor interface differences
Xthis should be completely compatible
Xwith Rivest's MD5 library.
X.SH DEFINITION
XSee RFC 1321.
X.SH VERSION
Xmd5file 0.95, 8 July 1993.
X.SH AUTHOR
XDerived from the RSA Data Security Incorporated
XMD5 Message-Digest Function,
Xdesigned by Ron Rivest.
XThis adaptation created by Daniel J. Bernstein.
X.SH "SEE ALSO"
Xmddriver(1)
END-of-md5file.3
echo x - md5file.h
sed 's/^X//' >md5file.h << 'END-of-md5file.h'
X#ifndef MD5FILE_H
X#define MD5FILE_H
X
Xtypedef unsigned long md5file_word;
X
Xtypedef struct md5file
X {
X  md5file_word state[4];
X  md5file_word count[2];
X  unsigned char buffer[64];
X }
Xmd5file;
X
X#define MD5FILE_HASHLEN 16
X
Xextern void md5file_clear();
Xextern void md5file_add();
Xextern void md5file_addn();
Xextern void md5file_hash();
X
X#endif
END-of-md5file.h
echo x - md5file.c
sed 's/^X//' >md5file.c << 'END-of-md5file.c'
X/* derived from RSADSI MD5 Message-Digest Algorithm */
X
X/* Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
Xrights reserved.
X
XLicense to copy and use this software is granted provided that it
Xis identified as the "RSA Data Security, Inc. MD5 Message-Digest
XAlgorithm" in all material mentioning or referencing this software
Xor this function.
X
XLicense is also granted to make and use derivative works provided
Xthat such works are identified as "derived from the RSA Data
XSecurity, Inc. MD5 Message-Digest Algorithm" in all material
Xmentioning or referencing the derived work.
X
XRSA Data Security, Inc. makes no representations concerning either
Xthe merchantability of this software or the suitability of this
Xsoftware for any particular purpose. It is provided "as is"
Xwithout express or implied warranty of any kind.
X
XThese notices must be retained in any copies of any part of this
Xdocumentation and/or software.
X */
X
X#include "md5file.h"
X
Xtypedef unsigned char *POINTER;
X
X/* Constants for MD5Transform routine.
X */
X
X#define S11 7
X#define S12 12
X#define S13 17
X#define S14 22
X#define S21 5
X#define S22 9
X#define S23 14
X#define S24 20
X#define S31 4
X#define S32 11
X#define S33 16
X#define S34 23
X#define S41 6
X#define S42 10
X#define S43 15
X#define S44 21
X
Xstatic void MD5Transform ();
Xstatic void Encode ();
Xstatic void Decode ();
Xstatic void MD5_memcpy ();
Xstatic void MD5_memset ();
X
Xstatic unsigned char PADDING[64] = {
X  0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
X  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
X  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
X};
X
X/* F, G, H and I are basic MD5 functions.
X */
X#define F(x, y, z) (((x) & (y)) | ((~x) & (z)))
X#define G(x, y, z) (((x) & (z)) | ((y) & (~z)))
X#define H(x, y, z) ((x) ^ (y) ^ (z))
X#define I(x, y, z) ((y) ^ ((x) | (~z)))
X
X/* ROTATE_LEFT rotates x left n bits.
X */
X#define ROTATE_LEFT(x, n) (((x) << (n)) | ((x) >> (32-(n))))
X
X/* FF, GG, HH, and II transformations for rounds 1, 2, 3, and 4.
XRotation is separate from addition to prevent recomputation.
X */
X#define FF(a, b, c, d, x, s, ac) { \
X (a) += F ((b), (c), (d)) + (x) + (md5file_word)(ac); \
X (a) = ROTATE_LEFT ((a), (s)); \
X (a) += (b); \
X  }
X#define GG(a, b, c, d, x, s, ac) { \
X (a) += G ((b), (c), (d)) + (x) + (md5file_word)(ac); \
X (a) = ROTATE_LEFT ((a), (s)); \
X (a) += (b); \
X  }
X#define HH(a, b, c, d, x, s, ac) { \
X (a) += H ((b), (c), (d)) + (x) + (md5file_word)(ac); \
X (a) = ROTATE_LEFT ((a), (s)); \
X (a) += (b); \
X  }
X#define II(a, b, c, d, x, s, ac) { \
X (a) += I ((b), (c), (d)) + (x) + (md5file_word)(ac); \
X (a) = ROTATE_LEFT ((a), (s)); \
X (a) += (b); \
X  }
X
X/* MD5 initialization. Begins an MD5 operation, writing a new context.
X */
Xvoid md5file_clear (context)
Xmd5file *context;
X{
X  context->count[0] = context->count[1] = 0;
X  /* Load magic initialization constants.  */
X  context->state[0] = 0x67452301;
X  context->state[1] = 0xefcdab89;
X  context->state[2] = 0x98badcfe;
X  context->state[3] = 0x10325476;
X}
X
X/* MD5 block update operation. Continues an MD5 message-digest
X  operation, processing another message block, and updating the
X  context.
X */
Xvoid md5file_addn (context, input, inputLen)
Xmd5file *context;
Xunsigned char *input;                                /* input block */
Xint inputLen;                     /* length of input block */
X{
X  unsigned int i, index, partLen;
X
X  /* Compute number of bytes mod 64 */
X  index = (unsigned int)((context->count[0] >> 3) & 0x3F);
X
X  /* Update number of bits */
X  if ((context->count[0] += ((md5file_word)inputLen << 3))
X   < ((md5file_word)inputLen << 3))
X context->count[1]++;
X  context->count[1] += ((md5file_word)inputLen >> 29);
X
X  partLen = 64 - index;
X
X  /* Transform as many times as possible.
X*/
X  if (inputLen >= partLen) {
X MD5_memcpy
X   ((POINTER)&context->buffer[index], (POINTER)input, partLen);
X MD5Transform (context->state, context->buffer);
X
X for (i = partLen; i + 63 < inputLen; i += 64)
X   MD5Transform (context->state, &input[i]);
X
X index = 0;
X  }
X  else
X i = 0;
X
X  /* Buffer remaining input */
X  MD5_memcpy
X ((POINTER)&context->buffer[index], (POINTER)&input[i],
X  inputLen-i);
X}
X
Xvoid md5file_add(context,c)
Xmd5file *context;
Xunsigned char c;
X{
X md5file_addn(context,&c,1);
X}
X
X/* MD5 finalization. Ends an MD5 message-digest operation, writing
X  the message digest and zeroizing the context.
X */
Xvoid md5file_hash (context,digest)
Xmd5file *context;
Xunsigned char digest[16];                         /* message digest */
X{
X  unsigned char bits[8];
X  unsigned int index, padLen;
X
X  /* Save number of bits */
X  Encode (bits, context->count, 8);
X
X  /* Pad out to 56 mod 64.  */
X  index = (unsigned int)((context->count[0] >> 3) & 0x3f);
X  padLen = (index < 56) ? (56 - index) : (120 - index);
X  md5file_addn (context, PADDING, padLen);
X
X  /* Append length (before padding) */
X  md5file_addn (context, bits, 8);
X  /* Store state in digest */
X  Encode (digest, context->state, 16);
X
X  /* Zeroize sensitive information.  */
X  MD5_memset ((POINTER)context, 0, sizeof (*context));
X}
X
X/* MD5 basic transformation. Transforms state based on block.
X */
Xstatic void MD5Transform (state, block)
Xmd5file_word state[4];
Xunsigned char block[64];
X{
X  md5file_word a = state[0], b = state[1], c = state[2], d = state[3], x[16];
X
X  Decode (x, block, 64);
X
X  /* Round 1 */
X  FF (a, b, c, d, x[ 0], S11, 0xd76aa478); /* 1 */
X  FF (d, a, b, c, x[ 1], S12, 0xe8c7b756); /* 2 */
X  FF (c, d, a, b, x[ 2], S13, 0x242070db); /* 3 */
X  FF (b, c, d, a, x[ 3], S14, 0xc1bdceee); /* 4 */
X  FF (a, b, c, d, x[ 4], S11, 0xf57c0faf); /* 5 */
X  FF (d, a, b, c, x[ 5], S12, 0x4787c62a); /* 6 */
X  FF (c, d, a, b, x[ 6], S13, 0xa8304613); /* 7 */
X  FF (b, c, d, a, x[ 7], S14, 0xfd469501); /* 8 */
X  FF (a, b, c, d, x[ 8], S11, 0x698098d8); /* 9 */
X  FF (d, a, b, c, x[ 9], S12, 0x8b44f7af); /* 10 */
X  FF (c, d, a, b, x[10], S13, 0xffff5bb1); /* 11 */
X  FF (b, c, d, a, x[11], S14, 0x895cd7be); /* 12 */
X  FF (a, b, c, d, x[12], S11, 0x6b901122); /* 13 */
X  FF (d, a, b, c, x[13], S12, 0xfd987193); /* 14 */
X  FF (c, d, a, b, x[14], S13, 0xa679438e); /* 15 */
X  FF (b, c, d, a, x[15], S14, 0x49b40821); /* 16 */
X
X /* Round 2 */
X  GG (a, b, c, d, x[ 1], S21, 0xf61e2562); /* 17 */
X  GG (d, a, b, c, x[ 6], S22, 0xc040b340); /* 18 */
X  GG (c, d, a, b, x[11], S23, 0x265e5a51); /* 19 */
X  GG (b, c, d, a, x[ 0], S24, 0xe9b6c7aa); /* 20 */
X  GG (a, b, c, d, x[ 5], S21, 0xd62f105d); /* 21 */
X  GG (d, a, b, c, x[10], S22,  0x2441453); /* 22 */
X  GG (c, d, a, b, x[15], S23, 0xd8a1e681); /* 23 */
X  GG (b, c, d, a, x[ 4], S24, 0xe7d3fbc8); /* 24 */
X  GG (a, b, c, d, x[ 9], S21, 0x21e1cde6); /* 25 */
X  GG (d, a, b, c, x[14], S22, 0xc33707d6); /* 26 */
X  GG (c, d, a, b, x[ 3], S23, 0xf4d50d87); /* 27 */
X  GG (b, c, d, a, x[ 8], S24, 0x455a14ed); /* 28 */
X  GG (a, b, c, d, x[13], S21, 0xa9e3e905); /* 29 */
X  GG (d, a, b, c, x[ 2], S22, 0xfcefa3f8); /* 30 */
X  GG (c, d, a, b, x[ 7], S23, 0x676f02d9); /* 31 */
X  GG (b, c, d, a, x[12], S24, 0x8d2a4c8a); /* 32 */
X
X  /* Round 3 */
X  HH (a, b, c, d, x[ 5], S31, 0xfffa3942); /* 33 */
X  HH (d, a, b, c, x[ 8], S32, 0x8771f681); /* 34 */
X  HH (c, d, a, b, x[11], S33, 0x6d9d6122); /* 35 */
X  HH (b, c, d, a, x[14], S34, 0xfde5380c); /* 36 */
X  HH (a, b, c, d, x[ 1], S31, 0xa4beea44); /* 37 */
X  HH (d, a, b, c, x[ 4], S32, 0x4bdecfa9); /* 38 */
X  HH (c, d, a, b, x[ 7], S33, 0xf6bb4b60); /* 39 */
X  HH (b, c, d, a, x[10], S34, 0xbebfbc70); /* 40 */
X  HH (a, b, c, d, x[13], S31, 0x289b7ec6); /* 41 */
X  HH (d, a, b, c, x[ 0], S32, 0xeaa127fa); /* 42 */
X  HH (c, d, a, b, x[ 3], S33, 0xd4ef3085); /* 43 */
X  HH (b, c, d, a, x[ 6], S34,  0x4881d05); /* 44 */
X  HH (a, b, c, d, x[ 9], S31, 0xd9d4d039); /* 45 */
X  HH (d, a, b, c, x[12], S32, 0xe6db99e5); /* 46 */
X  HH (c, d, a, b, x[15], S33, 0x1fa27cf8); /* 47 */
X  HH (b, c, d, a, x[ 2], S34, 0xc4ac5665); /* 48 */
X
X  /* Round 4 */
X  II (a, b, c, d, x[ 0], S41, 0xf4292244); /* 49 */
X  II (d, a, b, c, x[ 7], S42, 0x432aff97); /* 50 */
X  II (c, d, a, b, x[14], S43, 0xab9423a7); /* 51 */
X  II (b, c, d, a, x[ 5], S44, 0xfc93a039); /* 52 */
X  II (a, b, c, d, x[12], S41, 0x655b59c3); /* 53 */
X  II (d, a, b, c, x[ 3], S42, 0x8f0ccc92); /* 54 */
X  II (c, d, a, b, x[10], S43, 0xffeff47d); /* 55 */
X  II (b, c, d, a, x[ 1], S44, 0x85845dd1); /* 56 */
X  II (a, b, c, d, x[ 8], S41, 0x6fa87e4f); /* 57 */
X  II (d, a, b, c, x[15], S42, 0xfe2ce6e0); /* 58 */
X  II (c, d, a, b, x[ 6], S43, 0xa3014314); /* 59 */
X  II (b, c, d, a, x[13], S44, 0x4e0811a1); /* 60 */
X  II (a, b, c, d, x[ 4], S41, 0xf7537e82); /* 61 */
X  II (d, a, b, c, x[11], S42, 0xbd3af235); /* 62 */
X  II (c, d, a, b, x[ 2], S43, 0x2ad7d2bb); /* 63 */
X  II (b, c, d, a, x[ 9], S44, 0xeb86d391); /* 64 */
X
X  state[0] += a;
X  state[1] += b;
X  state[2] += c;
X  state[3] += d;
X
X  /* Zeroize sensitive information.
X*/
X  MD5_memset ((POINTER)x, 0, sizeof (x));
X}
X
X/* Encodes input (md5file_word) into output (unsigned char). Assumes len is
X  a multiple of 4.
X */
Xstatic void Encode (output, input, len)
Xunsigned char *output;
Xmd5file_word *input;
Xunsigned int len;
X{
X  unsigned int i, j;
X
X  for (i = 0, j = 0; j < len; i++, j += 4) {
X output[j] = (unsigned char)(input[i] & 0xff);
X output[j+1] = (unsigned char)((input[i] >> 8) & 0xff);
X output[j+2] = (unsigned char)((input[i] >> 16) & 0xff);
X output[j+3] = (unsigned char)((input[i] >> 24) & 0xff);
X  }
X}
X
X/* Decodes input (unsigned char) into output (md5file_word). Assumes len is
X  a multiple of 4.
X */
Xstatic void Decode (output, input, len)
Xmd5file_word *output;
Xunsigned char *input;
Xunsigned int len;
X{
X  unsigned int i, j;
X
X  for (i = 0, j = 0; j < len; i++, j += 4)
X output[i] = ((md5file_word)input[j]) | (((md5file_word)input[j+1]) << 8) |
X   (((md5file_word)input[j+2]) << 16) | (((md5file_word)input[j+3]) << 24);
X}
X
X/* Note: Replace "for loop" with standard memcpy if possible.
X */
X
Xstatic void MD5_memcpy (output, input, len)
XPOINTER output;
XPOINTER input;
Xunsigned int len;
X{
X  unsigned int i;
X
X  for (i = 0; i < len; i++)
X output[i] = input[i];
X}
X
X/* Note: Replace "for loop" with standard memset if possible.
X */
Xstatic void MD5_memset (output, value, len)
XPOINTER output;
Xint value;
Xunsigned int len;
X{
X  unsigned int i;
X
X  for (i = 0; i < len; i++)
X ((char *)output)[i] = (char)value;
X}
END-of-md5file.c
echo x - snefrufile.3
sed 's/^X//' >snefrufile.3 << 'END-of-snefrufile.3'
X.TH snefrufile 3
X.SH NAME
Xsnefrufile \- apply the Xerox Secure Hash Function to a stream
X.SH SYNTAX
X.B #include <snefrufile.h>
X
Xvoid \fBsnefrufile_clear(\fIs\fB)\fR;
X.br
Xvoid \fBsnefrufile_add(\fIs,c\fB)\fR;
X.br
Xvoid \fBsnefrufile_addn(\fIm,b,len\fB)\fR;
X.br
Xvoid \fBsnefrufile_hash(\fIs,h\fB)\fR;
X
Xsnefrufile *\fIs\fP;
X.br
Xunsigned char \fIc\fP;
X.br
Xunsigned char \fIh\fP[SNEFRUFILE_HASHLEN];
X.br
Xunsigned char *\fIb\fP;
X.br
Xint \fIlen\fR;
X.SH DESCRIPTION
X.B snefrufile
Xprovides a standard way to apply
XMerkle's
XSnefru-8 hash function
Xto a stream of unsigned characters.
X
X.I s
Xpoints to a snefrufile structure,
Xwhich accumulates the hash as
Xdata is fed in.
XBefore feeding in any data you must
Xcall
X.B snefrufile_clear(\fIs\fB)\fR.
XThen, for each unsigned character
X.I c
Xfrom the stream,
Xcall
X.B snefrufile_add(\fIs\fB,\fIc\fB)\fR.
X
XTo process an array
X.I b
Xof
X.I len
Xunsigned characters,
Xcall
X.B snefrufile_addn(\fIm\fB,\fIb\fB,\fIlen\fB)\fR.
XThis is faster than calling
X.B snefrufile_add
Xon each character in turn.
X
X.B snefrufile_hash(\fIs\fB,\fIh\fB)\fR
Xplaces the resulting hash into
X.I h\fP,
Xan array of bytes of
Xlength SNEFRUFILE_HASHLEN.
XYou may not use
X.I s
Xafter that without
Xagain calling
X.B snefrufile_clear(\fIs\fB)\fR.
X
XSNEFRUFILE_HASHLEN equals 32.
X.SH COMPATIBILITY
XThe
X.B snefrufile
Xlibrary
Xwas designed for compatibility
Xwith Merkle's original
X.B snefru
Xutility.
X.SH VERSION
Xsnefrufile 0.95, 8 July 1993.
X.SH AUTHOR
XPlaced into the public domain by Daniel J. Bernstein.
X.B snefrufile
Xis simply a wrapper around
X.B snefru512\fR,
Xwhich is derived from the Xerox Secure Hash Function.
X.SH "SEE ALSO"
Xsnefru(1),
Xsnefru512(3)
END-of-snefrufile.3
echo x - snefrufile.h
sed 's/^X//' >snefrufile.h << 'END-of-snefrufile.h'
X#ifndef SNEFRUFILE_H
X#define SNEFRUFILE_H
X
Xtypedef struct snefrufile
X {
X  unsigned char c[64];
X  int n;
X  unsigned char len[8];
X }
Xsnefrufile;
X
X#define SNEFRUFILE_HASHLEN 32
X
Xextern void snefrufile_clear();
Xextern void snefrufile_add();
Xextern void snefrufile_addn();
Xextern void snefrufile_hash();
X
X#endif
END-of-snefrufile.h
echo x - snefrufile.c
sed 's/^X//' >snefrufile.c << 'END-of-snefrufile.c'
X/* snefrufile.c, snefrufile.h: Snefru stream hashing library
XDaniel J. Bernstein, brnstnd@nyu.edu.
XDepends on snefru512.h.
XNo environment requirements.
X931126: Changed m, l, wm, wl, tr, ctr to use unions. Tnx CC.
X930708: snefrufile 0.95. Public domain.
X930708: Added snefrufile_addn.
X930708: Moved wm, wl, ctr out to static globals.
X930601: Baseline, snefrufile 0.8. Public domain.
XNo known patent problems.
X
XDocumentation in snefrufile.3.
X*/
X
X#include "snefru512.h"
X#include "snefrufile.h"
X
Xvoid snefrufile_clear(s)
Xsnefrufile *s;
X{
X int i;
X
X snefru512_setup(); /* XXX: called multiple times unnecessarily */
X
X for (i = 0;i < 64;++i) s->c[i] = 0;
X for (i = 0;i < 8;++i) s->len[i] = 0;
X s->n = 32;
X}
X
Xstatic snefru512_word tr[16] =
X/* backwards, for compatibility with Merkle's implementation */
X {
X  66051, 67438087, 134810123, 202182159, 269554195, 336926231,
X  404298267, 471670303, 539042339, 606414375, 673786411, 741158447,
X  808530483, 875902519, 943274555, 1010646591
X } ;
Xstatic unsigned char *ctr = &tr[0];
X
Xstatic union
X {
X  unsigned char ul[64];
X  snefru512_word uwl[16];
X }
Xunion1;
X#define l (union1.ul)
X#define wl (union1.uwl)
X
Xstatic union
X {
X  unsigned char um[32];
X  snefru512_word uwm[8];
X }
Xunion2;
X#define m (union2.um)
X#define wm (union2.uwm)
X
Xvoid snefrufile_addn(s,t,len)
Xsnefrufile *s;
Xregister unsigned char *t;
Xint len;
X{
X register int n;
X register int i;
X unsigned char newlen;
X
X i = len;
X while (i >= 32)
X  {
X   if (!++s->len[1]) if (!++s->len[2]) if (!++s->len[3]) if (!++s->len[4])
X   if (!++s->len[5]) if (!++s->len[6]) if (!++s->len[7]) ; /* too bad */
X   i -= 32;
X  }
X newlen = i << 3;
X if ((s->len[0] += newlen) < newlen)
X   if (!++s->len[1]) if (!++s->len[2]) if (!++s->len[3]) if (!++s->len[4])
X   if (!++s->len[5]) if (!++s->len[6]) if (!++s->len[7]) ; /* too bad */
X n = s->n;
X while (len--)
X  {
X   s->c[n++] = *t++;
X   if (n == 64)
X    {
X     for (i = 0;i < 64;++i) l[ctr[i]] = s->c[i];
X     snefru512(wm,wl,8);
X     for (i = 0;i < 32;++i) s->c[i] = m[ctr[i]];
X     n = 32;
X    }
X  }
X s->n = n;
X}
X
Xvoid snefrufile_add(s,c)
Xsnefrufile *s;
Xunsigned char c;
X{
X int n;
X register int i;
X
X n = s->n;
X s->c[n++] = c;
X if (!(s->len[0] += 8))
X   if (!++s->len[1]) if (!++s->len[2]) if (!++s->len[3]) if (!++s->len[4])
X   if (!++s->len[5]) if (!++s->len[6]) if (!++s->len[7]) ; /* too bad */
X if (n == 64)
X  {
X   for (i = 0;i < 64;++i) l[ctr[i]] = s->c[i];
X   snefru512(wm,wl,8);
X   for (i = 0;i < 32;++i) s->c[i] = m[ctr[i]];
X   n = 32;
X  }
X s->n = n;
X}
X
Xvoid snefrufile_hash(s,h)
Xsnefrufile *s;
Xunsigned char *h;
X{
X int len[8];
X int i;
X
X for (i = 0;i < 8;++i) len[i] = s->len[i];
X while (s->n != 32) snefrufile_add(s,(unsigned char) 0);
X while (s->n != 56) snefrufile_add(s,(unsigned char) 0);
X for (i = 0;i < 8;++i) snefrufile_add(s,len[7 - i]);
X for (i = 0;i < 32;++i) h[i] = s->c[i];
X}
END-of-snefrufile.c
echo x - snefru512.3
sed 's/^X//' >snefru512.3 << 'END-of-snefru512.3'
X.TH snefru512 3
X.SH NAME
Xsnefru512 \- apply the Xerox Secure Hash Function to a 512-bit block
X.SH SYNTAX
X.B #include <snefru512.h>
X
Xvoid \fBsnefru512_setup()\fR;
X
Xvoid \fBsnefru512(\fIout\fB,\fIin\fB,\fIlev\fB)\fR;
X
Xsnefru512_word \fIout\fP[8];
X.br
Xsnefru512_word \fIin\fP[16];
X.br
Xint \fIlev\fP;
X.SH DESCRIPTION
X.B snefru512
Xis derived from the Xerox Secure Hash Function.
XIt hashes a 512-bit block
X.I in
Xinto a 256-bit block
X.I out\fP.
XThe hash function is cryptographically strong.
X
XTo hash
X.I in
Xinto
X.I out\fP,
Xcall
X.B snefru512(\fIout\fB,\fIin\fB,\fIlev\fB)\fR.
X.I out
Xand
X.I in
Xare arrays of
X8 and 16
Xsnefru512_words respectively.
Xsnefru512_word
Xis a 32-bit unsigned integer type.
X
X.I lev
Xis the Snefru security level,
Xany number from 2 through 8.
XSnefru-2 is fast but insecure.
XSnefru-4 might not be safe against
Xattacks by powerful future computers.
XSnefru-8 is very strong and not too slow for most applications.
X
XBefore calling
X.B snefru512
Xyou must call
X.B snefru512_setup()\fR.
XYou may call
X.B snefru512_setup()
Xany number of times.
X
XThe
XSnefru algorithm
Xwas designed by Ralph C. Merkle.
XIt is named after a Pharaoh of ancient Egypt.
XMerkle is offering a large cash reward to anyone who
Xcan break Snefru-4.
X.SH DEFINITION
XSee Ralph C. Merkle,
X.I A Fast Software One-Way Hash Function\fP.
X.SH VERSION
Xsnefru512 1.0, 1 June 1993.
X.SH AUTHOR
XThis code is essentially the same as
XMerkle's reference Snefru 2.0 implementation,
Xas modified by Rich Salz,
Xtogether with the Snefru 2.5 S boxes.
XThis adaptation was created by Daniel J. Bernstein.
X.SH "SEE ALSO"
Xsnefrufile(3)
END-of-snefru512.3
echo x - snefru512.h
sed 's/^X//' >snefru512.h << 'END-of-snefru512.h'
X#ifndef SNEFRU512_H
X#define SNEFRU512_H
X
Xtypedef unsigned long snefru512_word;
X
Xextern snefru512_word snefru512_sboxes[16][256];
Xextern snefru512_word snefru512_rotated[4][16][256];
X
Xextern void snefru512_setup();
Xextern void snefru512();
X
X#endif
END-of-snefru512.h
echo x - snefru512.c
sed 's/^X//' >snefru512.c << 'END-of-snefru512.c'
X/* snefru512.c, snefru512.h: Snefru 512-bit hashing library
XInterface by Daniel J. Bernstein <djb@silverton.berkeley.edu>.
XNo dependencies.
XRequires 32-bit words.
X930622: Replaced static boxes with extern boxes.
X930601: Baseline, snefru512 1.0. Subject to Xerox copyright, see below.
XNo known patent problems.
X
XDesign and original code by Ralph Merkle <merkle@parc.xerox.com>;
Xcomp.sources.unix edition by Rich Salz <rsalz@osf.org>.
X
XDocumentation in snefru512.3.
X
XOriginal Xerox copyright:
X
X    Copyright (c) Xerox Corporation 1989.  All rights reserved.
X
X    License to copy and use this software is granted provided that it
X    is identified as the 'Xerox Secure Hash Function' in all material
X    mentioning or referencing this software or this hash function.
X
X    License is also granted to make and use derivative works provided
X    that such works are identified as 'derived from the Xerox Secure
X    Hash Function' in all material mentioning or referencing the
X    derived work.
X
X    Xerox Corporation makes no representations concerning either the
X    merchantability of this software or the suitability of this
X    software for any particular purpose.  It is provided "as is"
X    without express or implied warranty of any kind.
X
X    These notices must be retained in any copies of any part of this
X    software.
X
XBased on Merkle's reference implementation, version 2.0, 31 July 1989.
XSnefru 2.0's 8 standard S boxes replaced with Snefru 2.5's 16.
X*/
X
X#include "snefru512.h"
X
X#define OUTPUTBLOCKSIZE	8
X#define SBOXCOUNT 16
Xtypedef snefru512_word SBOX[256];
X
XSBOX snefru512_sboxes[SBOXCOUNT] = {
X {  /* Start of S Box 0  */
X
X0x64f9001bL,0xfeddcdf6L,0x7c8ff1e2L,0x11d71514L,0x8b8c18d3L,
X0xdddf881eL,0x6eab5056L,0x88ced8e1L,0x49148959L,0x69c56fd5L,
X0xb7994f03L,0x0fbcee3eL,0x3c264940L,0x21557e58L,0xe14b3fc2L,
X0x2e5cf591L,0xdceff8ceL,0x092a1648L,0xbe812936L,0xff7b0c6aL,
X0xd5251037L,0xafa448f1L,0x7dafc95aL,0x1ea69c3fL,0xa417abe7L,
X0x5890e423L,0xb0cb70c0L,0xc85025f7L,0x244d97e3L,0x1ff3595fL,
X0xc4ec6396L,0x59181e17L,0xe635b477L,0x354e7dbfL,0x796f7753L,
X0x66eb52ccL,0x77c3f995L,0x32e3a927L,0x80ccaed6L,0x4e2be89dL,
X0x375bbd28L,0xad1a3d05L,0x2b1b42b3L,0x16c44c71L,0x4d54bfa8L,
X0xe57ddc7aL,0xec6d8144L,0x5a71046bL,0xd8229650L,0x87fc8f24L,
X0xcbc60e09L,0xb6390366L,0xd9f76092L,0xd393a70bL,0x1d31a08aL,
X0x9cd971c9L,0x5c1ef445L,0x86fab694L,0xfdb44165L,0x8eaafcbeL,
X0x4bcac6ebL,0xfb7a94e5L,0x5789d04eL,0xfa13cf35L,0x236b8da9L,
X0x4133f000L,0x6224261cL,0xf412f23bL,0xe75e56a4L,0x30022116L,
X0xbaf17f1fL,0xd09872f9L,0xc1a3699cL,0xf1e802aaL,0x0dd145dcL,
X0x4fdce093L,0x8d8412f0L,0x6cd0f376L,0x3de6b73dL,0x84ba737fL,
X0xb43a30f2L,0x44569f69L,0x00e4eacaL,0xb58de3b0L,0x959113c8L,
X0xd62efee9L,0x90861f83L,0xced69874L,0x2f793ceeL,0xe8571c30L,
X0x483665d1L,0xab07b031L,0x914c844fL,0x15bf3be8L,0x2c3f2a9aL,
X0x9eb95fd4L,0x92e7472dL,0x2297cc5bL,0xee5f2782L,0x5377b562L,
X0xdb8ebbcfL,0xf961deddL,0xc59b5c60L,0x1bd3910dL,0x26d206adL,
X0xb28514d8L,0x5ecf6b52L,0x7fea78bbL,0x504879acL,0xed34a884L,
X0x36e51d3cL,0x1753741dL,0x8c47caedL,0x9d0a40efL,0x3145e221L,
X0xda27eb70L,0xdf730ba3L,0x183c8789L,0x739ac0a6L,0x9a58dfc6L,
X0x54b134c1L,0xac3e242eL,0xcc493902L,0x7b2dda99L,0x8f15bc01L,
X0x29fd38c7L,0x27d5318fL,0x604aaff5L,0xf29c6818L,0xc38aa2ecL,
X0x1019d4c3L,0xa8fb936eL,0x20ed7b39L,0x0b686119L,0x89a0906fL,
X0x1cc7829eL,0x9952ef4bL,0x850e9e8cL,0xcd063a90L,0x67002f8eL,
X0xcfac8cb7L,0xeaa24b11L,0x988b4e6cL,0x46f066dfL,0xca7eec08L,
X0xc7bba664L,0x831d17bdL,0x63f575e6L,0x9764350eL,0x47870d42L,
X0x026ca4a2L,0x8167d587L,0x61b6adabL,0xaa6564d2L,0x70da237bL,
X0x25e1c74aL,0xa1c901a0L,0x0eb0a5daL,0x7670f741L,0x51c05aeaL,
X0x933dfa32L,0x0759ff1aL,0x56010ab8L,0x5fdecb78L,0x3f32edf8L,
X0xaebedbb9L,0x39f8326dL,0xd20858c5L,0x9b638be4L,0xa572c80aL,
X0x28e0a19fL,0x432099fcL,0x3a37c3cdL,0xbf95c585L,0xb392c12aL,
X0x6aa707d7L,0x52f66a61L,0x12d483b1L,0x96435b5eL,0x3e75802bL,
X0x3ba52b33L,0xa99f51a5L,0xbda1e157L,0x78c2e70cL,0xfcae7ce0L,
X0xd1602267L,0x2affac4dL,0x4a510947L,0x0ab2b83aL,0x7a04e579L,
X0x340dfd80L,0xb916e922L,0xe29d5e9bL,0xf5624af4L,0x4ca9d9afL,
X0x6bbd2cfeL,0xe3b7f620L,0xc2746e07L,0x5b42b9b6L,0xa06919bcL,
X0xf0f2c40fL,0x72217ab5L,0x14c19df3L,0xf3802daeL,0xe094beb4L,
X0xa2101affL,0x0529575dL,0x55cdb27cL,0xa33bddb2L,0x6528b37dL,
X0x740c05dbL,0xe96a62c4L,0x40782846L,0x6d30d706L,0xbbf48e2cL,
X0xbce2d3deL,0x049e37faL,0x01b5e634L,0x2d886d8dL,0x7e5a2e7eL,
X0xd7412013L,0x06e90f97L,0xe45d3ebaL,0xb8ad3386L,0x13051b25L,
X0x0c035354L,0x71c89b75L,0xc638fbd0L,0x197f11a1L,0xef0f08fbL,
X0xf8448651L,0x38409563L,0x452f4443L,0x5d464d55L,0x03d8764cL,
X0xb1b8d638L,0xa70bba2fL,0x94b3d210L,0xeb6692a7L,0xd409c2d9L,
X0x68838526L,0xa6db8a15L,0x751f6c98L,0xde769a88L,0xc9ee4668L,
X0x1a82a373L,0x0896aa49L,0x42233681L,0xf62c55cbL,0x9f1c5404L,
X0xf74fb15cL,0xc06e4312L,0x6ffe5d72L,0x8aa8678bL,0x337cd129L,
X0x8211cefdL
X    /* End   of S Box 0  */  },
X
X
X {  /* Start of S Box 1  */
X
X0x074a1d09L,0x52a10e5aL,0x9275a3f8L,0x4b82506cL,0x37df7e1bL,
X0x4c78b3c5L,0xcefab1daL,0xf472267eL,0xb63045f6L,0xd66a1fc0L,
X0x400298e3L,0x27e60c94L,0x87d2f1b8L,0xdf9e56ccL,0x45cd1803L,
X0x1d35e098L,0xcce7c736L,0x03483bf1L,0x1f7307d7L,0xc6e8f948L,
X0xe613c111L,0x3955c6ffL,0x1170ed7cL,0x8e95da41L,0x99c31bf4L,
X0xa4da8021L,0x7b5f94fbL,0xdd0da51fL,0x6562aa77L,0x556bcb23L,
X0xdb1bacc6L,0x798040b9L,0xbfe5378fL,0x731d55e6L,0xdaa5bfeeL,
X0x389bbc60L,0x1b33fba4L,0x9c567204L,0x36c26c68L,0x77ee9d69L,
X0x8aeb3e88L,0x2d50b5ceL,0x9579e790L,0x42b13cfcL,0x33fbd32bL,
X0xee0503a7L,0xb5862824L,0x15e41eadL,0xc8412ef7L,0x9d441275L,
X0x2fcec582L,0x5ff483b7L,0x8f3931dfL,0x2e5d2a7bL,0x49467bf9L,
X0x0653dea9L,0x2684ce35L,0x7e655e5cL,0xf12771d8L,0xbb15cc67L,
X0xab097ca1L,0x983dcf52L,0x10ddf026L,0x21267f57L,0x2c58f6b4L,
X0x31043265L,0x0bab8c01L,0xd5492099L,0xacaae619L,0x944ce54aL,
X0xf2d13d39L,0xadd3fc32L,0xcda08a40L,0xe2b0d451L,0x9efe08aeL,
X0xb9d50fd2L,0xea5cd7fdL,0xc9a749ddL,0x13ea2253L,0x832debaaL,
X0x24be640fL,0xe03e926aL,0x29e01cdeL,0x8bf59f18L,0x0f9d00b6L,
X0xe1238b46L,0x1e7d8e34L,0x93619adbL,0x76b32f9fL,0xbd972cecL,
X0xe31fa976L,0xa68fbb10L,0xfb3ba49dL,0x8587c41dL,0xa5add1d0L,
X0xf3cf84bfL,0xd4e11150L,0xd9ffa6bcL,0xc3f6018cL,0xaef10572L,
X0x74a64b2fL,0xe7dc9559L,0x2aae35d5L,0x5b6f587fL,0xa9e353feL,
X0xca4fb674L,0x04ba24a8L,0xe5c6875fL,0xdcbc6266L,0x6bc5c03fL,
X0x661eef02L,0xed740babL,0x058e34e4L,0xb7e946cfL,0x88698125L,
X0x72ec48edL,0xb11073a3L,0xa13485ebL,0xa2a2429cL,0xfa407547L,
X0x50b76713L,0x5418c37dL,0x96192da5L,0x170bb04bL,0x518a021eL,
X0xb0ac13d1L,0x0963fa2aL,0x4a6e10e1L,0x58472bdcL,0xf7f8d962L,
X0x979139eaL,0x8d856538L,0xc0997042L,0x48324d7aL,0x447623cbL,
X0x8cbbe364L,0x6e0c6b0eL,0xd36d63b0L,0x3f244c84L,0x3542c971L,
X0x2b228dc1L,0xcb0325bbL,0xf8c0d6e9L,0xde11066bL,0xa8649327L,
X0xfc31f83eL,0x7dd80406L,0xf916dd61L,0xd89f79d3L,0x615144c2L,
X0xebb45d31L,0x28002958L,0x56890a37L,0xf05b3808L,0x123ae844L,
X0x86839e16L,0x914b0d83L,0xc506b43cL,0xcf3cba5eL,0x7c60f5c9L,
X0x22deb2a0L,0x5d9c2715L,0xc77ba0efL,0x4f45360bL,0xc1017d8bL,
X0xe45adc29L,0xa759909bL,0x412cd293L,0xd7d796b1L,0x00c8ff30L,
X0x23a34a80L,0x4ec15c91L,0x714e78b5L,0x47b9e42eL,0x78f3ea4dL,
X0x7f078f5bL,0x346c593aL,0xa3a87a1aL,0x9bcbfe12L,0x3d439963L,
X0xb2ef6d8eL,0xb8d46028L,0x6c2fd5caL,0x62675256L,0x01f2a2f3L,
X0xbc96ae0aL,0x709a8920L,0xb4146e87L,0x6308b9e2L,0x64bda7baL,
X0xafed6892L,0x6037f2a2L,0xf52969e0L,0x0adb43a6L,0x82811400L,
X0x90d0bdf0L,0x19c9549eL,0x203f6a73L,0x1accaf4fL,0x89714e6dL,
X0x164d4705L,0x67665f07L,0xec206170L,0x0c2182b2L,0xa02b9c81L,
X0x53289722L,0xf6a97686L,0x140e4179L,0x9f778849L,0x9a88e15dL,
X0x25cadb54L,0xd157f36fL,0x32a421c3L,0xb368e98aL,0x5a92cd0dL,
X0x757aa8d4L,0xc20ac278L,0x08b551c7L,0x849491e8L,0x4dc75ad6L,
X0x697c33beL,0xbaf0ca33L,0x46125b4eL,0x59d677b3L,0x30d9c8f2L,
X0xd0af860cL,0x1c7fd0faL,0xfe0ff72cL,0x5c8d6f43L,0x57fdec3bL,
X0x6ab6ad97L,0xd22adf89L,0x18171785L,0x02bfe22dL,0x6db80917L,
X0x80b216afL,0xe85e4f9aL,0x7a1c306eL,0x6fc49bf5L,0x3af7a11cL,
X0x81e215e7L,0x68363fcdL,0x3e9357c8L,0xef52fd55L,0x3b8bab4cL,
X0x3c8cf495L,0xbefceebdL,0xfd25b714L,0xc498d83dL,0x0d2e1a8dL,
X0xe9f966acL,0x0e387445L,0x435419e5L,0x5e7ebec4L,0xaa90b8d9L,
X0xff1a3a96L
X    /* End   of S Box 1  */  },
X
X
X {  /* Start of S Box 2  */
X
X0x4a8fe4e3L,0xf27d99cdL,0xd04a40caL,0xcb5ff194L,0x3668275aL,
X0xff4816beL,0xa78b394cL,0x4c6be9dbL,0x4eec38d2L,0x4296ec80L,
X0xcdce96f8L,0x888c2f38L,0xe75508f5L,0x7b916414L,0x060aa14aL,
X0xa214f327L,0xbe608dafL,0x1ebbdec2L,0x61f98ce9L,0xe92156feL,
X0x4f22d7a3L,0x3f76a8d9L,0x559a4b33L,0x38ad2959L,0xf3f17e9eL,
X0x85e1ba91L,0xe5eba6fbL,0x73dcd48cL,0xf5c3ff78L,0x481b6058L,
X0x8a3297f7L,0x8f1f3bf4L,0x93785ab2L,0x477a4a5bL,0x6334eb5dL,
X0x6d251b2eL,0x74a9102dL,0x07e38ffaL,0x915c9c62L,0xccc275eaL,
X0x6be273ecL,0x3ebddd70L,0xd895796cL,0xdc54a91bL,0xc9afdf81L,
X0x23633f73L,0x275119b4L,0xb19f6b67L,0x50756e22L,0x2bb152e2L,
X0x76ea46a2L,0xa353e232L,0x2f596ad6L,0x0b1edb0bL,0x02d3d9a4L,
X0x78b47843L,0x64893e90L,0x40f0caadL,0xf68d3ad7L,0x46fd1707L,
X0x1c9c67efL,0xb5e086deL,0x96ee6ca6L,0x9aa34774L,0x1ba4f48aL,
X0x8d01abfdL,0x183ee1f6L,0x5ff8aa7aL,0x17e4faaeL,0x303983b0L,
X0x6c08668bL,0xd4ac4382L,0xe6c5849fL,0x92fefb53L,0xc1cac4ceL,
X0x43501388L,0x441118cfL,0xec4fb308L,0x53a08e86L,0x9e0fe0c5L,
X0xf91c1525L,0xac45be05L,0xd7987cb5L,0x49ba1487L,0x57938940L,
X0xd5877648L,0xa958727fL,0x58dfe3c3L,0xf436cf77L,0x399e4d11L,
X0xf0a5bfa9L,0xef61a33bL,0xa64cac60L,0x04a8d0baL,0x030dd572L,
X0xb83d320fL,0xcab23045L,0xe366f2f0L,0x815d008dL,0xc897a43aL,
X0x1d352df3L,0xb9cc571dL,0x8bf38744L,0x72209092L,0xeba124ebL,
X0xfb99ce5eL,0x3bb94293L,0x28da549cL,0xaab8a228L,0xa4197785L,
X0x33c70296L,0x25f6259bL,0x5c85da21L,0xdf15bdeeL,0x15b7c7e8L,
X0xe2abef75L,0xfcc19bc1L,0x417ff868L,0x14884434L,0x62825179L,
X0xc6d5c11cL,0x0e4705dcL,0x22700de0L,0xd3d2af18L,0x9be822a0L,
X0x35b669f1L,0xc42bb55cL,0x0a801252L,0x115bf0fcL,0x3cd7d856L,
X0xb43f5f9dL,0xc2306516L,0xa1231c47L,0xf149207eL,0x5209a795L,
X0x34b3ccd8L,0x67aefe54L,0x2c83924eL,0x6662cbacL,0x5eedd161L,
X0x84e681aaL,0x5d57d26bL,0xfa465cc4L,0x7e3ac3a8L,0xbf7c0cc6L,
X0xe18a9aa1L,0xc32f0a6fL,0xb22cc00dL,0x3d280369L,0x994e554fL,
X0x68f480d3L,0xadcff5e6L,0x3a8eb265L,0x83269831L,0xbd568a09L,
X0x4bc8ae6aL,0x69f56d2bL,0x0f17eac8L,0x772eb6c7L,0x9f41343cL,
X0xab1d0742L,0x826a6f50L,0xfea2097cL,0x1912c283L,0xce185899L,
X0xe4444839L,0x2d8635d5L,0x65d0b1ffL,0x865a7f17L,0x326d9fb1L,
X0x59e52820L,0x0090ade1L,0x753c7149L,0x9ddd8b98L,0xa5a691daL,
X0x0d0382bbL,0x8904c930L,0x086cb000L,0x6e69d3bdL,0x24d4e7a7L,
X0x05244fd0L,0x101a5e0cL,0x6a947dcbL,0xe840f77bL,0x7d0c5003L,
X0x7c370f1fL,0x805245edL,0xe05e3d3fL,0x7906880eL,0xbabfcd35L,
X0x1a7ec697L,0x8c052324L,0x0c6ec8dfL,0xd129a589L,0xc7a75b02L,
X0x12d81de7L,0xd9be2a66L,0x1f4263abL,0xde73fdb6L,0x2a00680aL,
X0x56649e36L,0x3133ed55L,0x90fa0bf2L,0x2910a02aL,0x949d9d46L,
X0xa0d1dcddL,0xcfc9b7d4L,0xd2677be5L,0x95cb36b3L,0x13cd9410L,
X0xdbf73313L,0xb7c6e8c0L,0xf781414bL,0x510b016dL,0xb0de1157L,
X0xd6b0f62cL,0xbb074eccL,0x7f1395b7L,0xee792cf9L,0xea6fd63eL,
X0x5bd6938eL,0xaf02fc64L,0xdab57ab8L,0x8edb3784L,0x8716318fL,
X0x164d1a01L,0x26f26141L,0xb372e6b9L,0xf8fc2b06L,0x7ac00e04L,
X0x3727b89aL,0x97e9bca5L,0x9c2a742fL,0xbc3b1f7dL,0x7165b471L,
X0x609b4c29L,0x20925351L,0x5ae72112L,0x454be5d1L,0xc0ffb95fL,
X0xdd0ef919L,0x6f2d70c9L,0x0974c5bfL,0x98aa6263L,0x01d91e4dL,
X0x2184bb6eL,0x70c43c1eL,0x4d435915L,0xae7b8523L,0xb6fb06bcL,
X0x5431ee76L,0xfdbc5d26L,0xed77493dL,0xc5712ee4L,0xa8380437L,
X0x2eef261aL
X    /* End   of S Box 2  */  },
X
X
X {  /* Start of S Box 3  */
X
X0x5a79392bL,0xb8af32c2L,0x41f7720aL,0x833a61ecL,0x13dfedacL,
X0xc4990bc4L,0xdc0f54bcL,0xfedd5e88L,0x80da1881L,0x4dea1afdL,
X0xfd402cc6L,0xae67cc7aL,0xc5238525L,0x8ea01254L,0xb56b9bd5L,
X0x862fbd6dL,0xac8575d3L,0x6fba3714L,0xda7ebf46L,0x59cd5238L,
X0x8ac9dbfeL,0x353729fcL,0xe497d7f2L,0xc3ab84e0L,0xf05a114bL,
X0x7b887a75L,0xedc603ddL,0x5e6fe680L,0x2c84b399L,0x884eb1daL,
X0x1cb8c8bfL,0xaa51098aL,0xc862231cL,0x8bac2221L,0x21b387e5L,
X0x208a430dL,0x2a3f0f8bL,0xa5ff9cd2L,0x6012a2eaL,0x147a9ee7L,
X0xf62a501dL,0xb4b2e51aL,0x3ef3484cL,0xc0253c59L,0x2b82b536L,
X0x0aa9696bL,0xbe0c109bL,0xc70b7929L,0xce3e8a19L,0x2f66950eL,
X0x459f1c2cL,0xe68fb93dL,0xa3c3ff3eL,0x62b45c62L,0x300991cbL,
X0x01914c57L,0x7f7bc06aL,0x182831f5L,0xe7b74bcaL,0xfa50f6d0L,
X0x523caa61L,0xe3a7cf05L,0xe9e41311L,0x280a21d1L,0x6a4297e1L,
X0xf24dc67eL,0xfc3189e6L,0xb72bf34fL,0x4b1e67afL,0x543402ceL,
X0x79a59867L,0x0648e02aL,0x00a3ac17L,0xc6208d35L,0x6e7f5f76L,
X0xa45bb4beL,0xf168fa63L,0x3f4125f3L,0xf311406fL,0x02706565L,
X0xbfe58022L,0x0cfcfdd9L,0x0735a7f7L,0x8f049092L,0xd98edc27L,
X0xf5c5d55cL,0xe0f201dbL,0x0dcafc9aL,0x7727fb79L,0xaf43abf4L,
X0x26e938c1L,0x401b26a6L,0x900720faL,0x2752d97bL,0xcff1d1b3L,
X0xa9d9e424L,0x42db99abL,0x6cf8be5fL,0xe82cebe3L,0x3afb733bL,
X0x6b734eb6L,0x1036414aL,0x975f667cL,0x049d6377L,0xba587c60L,
X0xb1d10483L,0xde1aefccL,0x1129d055L,0x72051e91L,0x6946d623L,
X0xf9e86ea7L,0x48768c00L,0xb0166c93L,0x9956bbf0L,0x1f1f6d84L,
X0xfb15e18eL,0x033b495dL,0x56e3362eL,0x4f44c53cL,0x747cba51L,
X0x89d37872L,0x5d9c331bL,0xd2ef9fa8L,0x254917f8L,0x1b106f47L,
X0x37d75553L,0xb3f053b0L,0x7dccd8efL,0xd30eb802L,0x5889f42dL,
X0x610206d7L,0x1a7d34a1L,0x92d87dd8L,0xe5f4a315L,0xd1cf0e71L,
X0xb22dfe45L,0xb901e8ebL,0x0fc0ce5eL,0x2efa60c9L,0x2de74290L,
X0x36d0c906L,0x381c70e4L,0x4c6da5b5L,0x3d81a682L,0x7e381f34L,
X0x396c4f52L,0x95ad5901L,0x1db50c5aL,0x29982e9eL,0x1557689fL,
X0x3471ee42L,0xd7e2f7c0L,0x8795a1e2L,0xbc324d8dL,0xe224c3c8L,
X0x12837e39L,0xcdee3d74L,0x7ad2143fL,0x0e13d40cL,0x78bd4a68L,
X0xa2eb194dL,0xdb9451f9L,0x859b71dcL,0x5c4f5b89L,0xca14a8a4L,
X0xef92f003L,0x16741d98L,0x33aa4444L,0x9e967fbbL,0x092e3020L,
X0xd86a35b8L,0x8cc17b10L,0xe1bf08aeL,0x55693fc5L,0x7680ad13L,
X0x1e6546e8L,0x23b6e7b9L,0xee77a4b2L,0x08ed0533L,0x44fd2895L,
X0xb6393b69L,0x05d6cacfL,0x9819b209L,0xecbbb72fL,0x9a75779cL,
X0xeaec0749L,0x94a65aeeL,0xbdf52dc3L,0xd6a25d04L,0x82008e4eL,
X0xa6de160fL,0x9b036afbL,0x228b3a66L,0x5fb10a70L,0xcc338b58L,
X0x5378a9dfL,0xc908bca9L,0x4959e25bL,0x46909a97L,0x66ae8f6eL,
X0xdd0683e9L,0x65f994b4L,0x6426cda5L,0xc24b8840L,0x32539da0L,
X0x63175650L,0xd0c815ffL,0x50cbc41eL,0xf7c774a3L,0x31b0c231L,
X0x8d0d8116L,0x24bef16cL,0xd555d256L,0xdf47ea8cL,0x6d21eccdL,
X0xa887a012L,0x84542aedL,0xa7b9c1bdL,0x914c1bb1L,0xa0d5b67dL,
X0x438ce937L,0x7030f873L,0x71f6b0c7L,0x574576baL,0xf8bc4541L,
X0x9c61d348L,0x1960579dL,0x17c4daadL,0x96a4cb0bL,0xc193f2f6L,
X0x756eafa2L,0x7c1d2f94L,0xf4fe2b43L,0xcb86e33aL,0xebd4c728L,
X0x9d18ae64L,0x9fe13e30L,0x3ce0f5deL,0xaba1f985L,0xaddc2718L,
X0x68ce6278L,0xd45e241fL,0xa15c82b7L,0x3b2293d4L,0x739edd32L,
X0x674a6bf1L,0x5b5d587fL,0x4772deaaL,0x4a63968fL,0x0be68686L,
X0x513d6426L,0x939a4787L,0xbba89296L,0x4ec20007L,0x818d0d08L,
X0xff64dfd6L
X    /* End   of S Box 3  */  },
X
X
X {  /* Start of S Box 4  */
X
X0xcb2297cbL,0xdb48a144L,0xa16cbe4bL,0xbbea1d6cL,0x5af6b6b7L,
X0x8a8110b6L,0xf9236ef9L,0xc98f83e6L,0x0f9c65b8L,0x252d4a89L,
X0xa497f068L,0xa5d7ed2dL,0x94c22845L,0x9da1c8c4L,0xe27c2e2eL,
X0x6e8ba2b4L,0xc3dd17fbL,0x498cd482L,0x0dfe6a9fL,0xb0705829L,
X0x9a1e6dc1L,0xf829717cL,0x07bb8e3aL,0xda3c0b02L,0x1af82fc7L,
X0x73b70955L,0x7a04379cL,0x5ee20a28L,0x83712ae5L,0xf4c47c6dL,
X0xdf72ba56L,0xd794858dL,0x8c0cf709L,0x18f0f390L,0xb6c69b35L,
X0xbf2f01dbL,0x2fa74dcaL,0xd0cd9127L,0xbde66cecL,0x3deebd46L,
X0x57c88fc3L,0xcee1406fL,0x0066385aL,0xf3c3444fL,0x3a79d5d5L,
X0x75751eb9L,0x3e7f8185L,0x521c2605L,0xe1aaab6eL,0x38ebb80fL,
X0xbee7e904L,0x61cb9647L,0xea54904eL,0x05ae00e4L,0x2d7ac65fL,
X0x087751a1L,0xdcd82915L,0x0921ee16L,0xdd86d33bL,0xd6bd491aL,
X0x40fbadf0L,0x4232cbd2L,0x33808d10L,0x39098c42L,0x193f3199L,
X0x0bc1e47aL,0x4a82b149L,0x02b65a8aL,0x104cdc8eL,0x24a8f52cL,
X0x685c6077L,0xc79f95c9L,0x1d11fe50L,0xc08dafcdL,0x7b1a9a03L,
X0x1c1f11d8L,0x84250e7fL,0x979db248L,0xebdc0501L,0xb9553395L,
X0xe3c05ea8L,0xb1e51c4cL,0x13b0e681L,0x3b407766L,0x36db3087L,
X0xee17c9fcL,0x6c53ecf2L,0xadccc58fL,0xc427660bL,0xefd5867dL,
X0x9b6d54a5L,0x6ff1aeffL,0x8e787952L,0x9e2bffe0L,0x8761d034L,
X0xe00bdbadL,0xae99a8d3L,0xcc03f6e2L,0xfd0ed807L,0x0e508ae3L,
X0xb74182abL,0x4349245dL,0xd120a465L,0xb246a641L,0xaf3b7ab0L,
X0x2a6488bbL,0x4b3a0d1fL,0xe7c7e58cL,0x3faff2ebL,0x90445ffdL,
X0xcf38c393L,0x995d07e7L,0xf24f1b36L,0x356f6891L,0x6d6ebcbeL,
X0x8da9e262L,0x50fd520eL,0x5bca9e1eL,0x37472cf3L,0x69075057L,
X0x7ec5fdedL,0x0cab892aL,0xfb2412baL,0x1728debfL,0xa000a988L,
X0xd843ce79L,0x042e20ddL,0x4fe8f853L,0x56659c3cL,0x2739d119L,
X0xa78a6120L,0x80960375L,0x70420611L,0x85e09f78L,0xabd17e96L,
X0x1b513eafL,0x1e01eb63L,0x26ad2133L,0xa890c094L,0x7613cf60L,
X0x817e781bL,0xa39113d7L,0xe957fa58L,0x4131b99eL,0x28b1efdaL,
X0x66acfba7L,0xff68944aL,0x77a44fd1L,0x7f331522L,0x59ffb3faL,
X0xa6df935bL,0xfa12d9dfL,0xc6bf6f3fL,0x89520cf6L,0x659edd6aL,
X0x544da739L,0x8b052538L,0x7c30ea21L,0xc2345525L,0x15927fb2L,
X0x144a436bL,0xba107b8bL,0x1219ac97L,0x06730432L,0x31831ab3L,
X0xc55a5c24L,0xaa0fcd3eL,0xe5606be8L,0x5c88f19bL,0x4c0841eeL,
X0x1fe37267L,0x11f9c4f4L,0x9f1b9daeL,0x864e76d0L,0xe637c731L,
X0xd97d23a6L,0x32f53d5cL,0xb8161980L,0x93fa0f84L,0xcaef0870L,
X0x8874487eL,0x98f2cc73L,0x645fb5c6L,0xcd853659L,0x2062470dL,
X0x16ede8e9L,0x6b06dab5L,0x78b43900L,0xfc95b786L,0x5d8e7de1L,
X0x465b5954L,0xfe7ba014L,0xf7d23f7bL,0x92bc8b18L,0x03593592L,
X0x55cef4f7L,0x74b27317L,0x79de1fc2L,0xc8a0bfbdL,0x229398ccL,
X0x62a602ceL,0xbcb94661L,0x5336d206L,0xd2a375feL,0x6a6ab483L,
X0x4702a5a4L,0xa2e9d73dL,0x23a2e0f1L,0x9189140aL,0x581d18dcL,
X0xb39a922bL,0x82356212L,0xd5f432a9L,0xd356c2a3L,0x5f765b4dL,
X0x450afcc8L,0x4415e137L,0xe8ecdfbcL,0xed0de3eaL,0x60d42b13L,
X0xf13df971L,0x71fc5da2L,0xc1455340L,0xf087742fL,0xf55e5751L,
X0x67b3c1f8L,0xac6b8774L,0x7dcfaaacL,0x95983bc0L,0x489bb0b1L,
X0x2c184223L,0x964b6726L,0x2bd3271cL,0x72266472L,0xded64530L,
X0x0a2aa343L,0xd4f716a0L,0xb4dad6d9L,0x2184345eL,0x512c990cL,
X0x29d92d08L,0x2ebe709aL,0x01144c69L,0x34584b9dL,0xe4634ed6L,
X0xecc963cfL,0x3c6984aaL,0x4ed056efL,0x9ca56976L,0x8f3e80d4L,
X0xb5bae7c5L,0x30b5caf5L,0x63f33a64L,0xa9e4bbdeL,0xf6b82298L,
X0x4d673c1dL
X    /* End   of S Box 4  */  },
X
X
X {  /* Start of S Box 5  */
X
X0x4b4f1121L,0xba183081L,0xc784f41fL,0xd17d0bacL,0x083d2267L,
X0x37b1361eL,0x3581ad05L,0xfda2f6bcL,0x1e892cddL,0xb56d3c3aL,
X0x32140e46L,0x138d8aabL,0xe14773d4L,0x5b0e71dfL,0x5d1fe055L,
X0x3fb991d3L,0xf1f46c71L,0xa325988cL,0x10f66e80L,0xb1006348L,
X0x726a9f60L,0x3b67f8baL,0x4e114ef4L,0x05c52115L,0x4c5ca11cL,
X0x99e1efd8L,0x471b83b3L,0xcbf7e524L,0x43ad82f5L,0x690ca93bL,
X0xfaa61bb2L,0x12a832b5L,0xb734f943L,0xbd22aea7L,0x88fec626L,
X0x5e80c3e7L,0xbe3eaf5eL,0x44617652L,0xa5724475L,0xbb3b9695L,
X0x7f3fee8fL,0x964e7debL,0x518c052dL,0x2a0bbc2bL,0xc2175f5cL,
X0x9a7b3889L,0xa70d8d0cL,0xeaccdd29L,0xcccd6658L,0x34bb25e6L,
X0xb8391090L,0xf651356fL,0x52987c9eL,0x0c16c1cdL,0x8e372d3cL,
X0x2fc6ebbdL,0x6e5da3e3L,0xb0e27239L,0x5f685738L,0x45411786L,
X0x067f65f8L,0x61778b40L,0x81ab2e65L,0x14c8f0f9L,0xa6b7b4ceL,
X0x4036eaecL,0xbf62b00aL,0xecfd5e02L,0x045449a6L,0xb20afd28L,
X0x2166d273L,0x0d13a863L,0x89508756L,0xd51a7530L,0x2d653f7aL,
X0x3cdbdbc3L,0x80c9df4fL,0x3d5812d9L,0x53fbb1f3L,0xc0f185c0L,
X0x7a3c3d7eL,0x68646410L,0x857607a0L,0x1d12622eL,0x97f33466L,
X0xdb4c9917L,0x6469607cL,0x566e043dL,0x79ef1edbL,0x2c05898dL,
X0xc9578e25L,0xcd380101L,0x46e04377L,0x7d1cc7a9L,0x6552b837L,
X0x20192608L,0xb97500c5L,0xed296b44L,0x368648b4L,0x62995cd5L,
X0x82731400L,0xf9aebd8bL,0x3844c0c7L,0x7c2de794L,0x33a1a770L,
X0x8ae528c2L,0x5a2be812L,0x1f8f4a07L,0x2b5ed7caL,0x937eb564L,
X0x6fda7e11L,0xe49b5d6cL,0xb4b3244eL,0x18aa53a4L,0x3a061334L,
X0x4d6067a3L,0x83ba5868L,0x9bdf4dfeL,0x7449f261L,0x709f8450L,
X0xcad133cbL,0xde941c3fL,0xf52ae484L,0x781d77edL,0x7e4395f0L,
X0xae103b59L,0x922331bbL,0x42ce50c8L,0xe6f08153L,0xe7d941d0L,
X0x5028ed6bL,0xb3d2c49bL,0xad4d9c3eL,0xd201fb6eL,0xa45bd5beL,
X0xffcb7f4bL,0x579d7806L,0xf821bb5bL,0x59d592adL,0xd0be0c31L,
X0xd4e3b676L,0x0107165aL,0x0fe939d2L,0x49bcaafdL,0x55ffcfe5L,
X0x2ec1f783L,0xf39a09a5L,0x3eb42772L,0x19b55a5dL,0x024a0679L,
X0x8c83b3f7L,0x8642ba1dL,0xacacd9eaL,0x87d352c4L,0x60931f45L,
X0xa05f97d7L,0x1cecd42cL,0xe2fcc87bL,0xb60f94e2L,0x67a34b0bL,
X0xfcdd40c9L,0x0b150a27L,0xd3ee9e04L,0x582e29e9L,0x4ac22b41L,
X0x6ac4e1b8L,0xbccaa51aL,0x237af30eL,0xebc3b709L,0xc4a59d19L,
X0x284bc98aL,0xe9d41a93L,0x6bfa2018L,0x73b2d651L,0x11f9a2faL,
X0xce09bff1L,0x41a470aaL,0x25888f22L,0x77e754e8L,0xf7330d8eL,
X0x158eab16L,0xc5d68842L,0xc685a6f6L,0xe5b82fdeL,0x09ea3a96L,
X0x6dde1536L,0x4fa919daL,0x26c0be9fL,0x9eed6f69L,0xf05555f2L,
X0xe06fc285L,0x9cd76d23L,0xaf452a92L,0xefc74cb7L,0x9d6b4732L,
X0x8be408eeL,0x22401d0dL,0xee6c459dL,0x7587cb82L,0xe8746862L,
X0x5cbdde87L,0x98794278L,0x31afb94dL,0xc11e0f2fL,0x30e8fc2aL,
X0xcf3261efL,0x1a3023e1L,0xaa2f86cfL,0xf202e24aL,0x8d08dcffL,
X0x764837c6L,0xa26374ccL,0x9f7c3e88L,0x949cc57dL,0xdd26a07fL,
X0xc39efab0L,0xc8f879a1L,0xdce67bb9L,0xf4b0a435L,0x912c9ae0L,
X0xd85603e4L,0x953a9bbfL,0xfb8290d6L,0x0aebcd5fL,0x16206a9aL,
X0x6c787a14L,0xd9a0f16aL,0x29bf4f74L,0x8f8bce91L,0x0e5a9354L,
X0xab038cb1L,0x1b8ad11bL,0xe327ff49L,0x0053da20L,0x90cf51dcL,
X0xda92fe6dL,0x0390ca47L,0xa8958097L,0xa9dc5bafL,0x3931e3c1L,
X0x840446b6L,0x63d069fbL,0xd7460299L,0x7124ecd1L,0x0791e613L,
X0x485918fcL,0xd635d04cL,0xdf96ac33L,0x66f2d303L,0x247056aeL,
X0xa1a7b2a8L,0x27d8cc9cL,0x17b6e998L,0x7bf5590fL,0xfe97f557L,
X0x5471d8a2L
X    /* End   of S Box 5  */  },
X
X
X {  /* Start of S Box 6  */
X
X0x83a327a1L,0x9f379f51L,0x40a7d007L,0x11307423L,0x224587c1L,
X0xac27d63bL,0x3b7e64eaL,0x2e1cbfa6L,0x09996000L,0x03bc0e2cL,
X0xd4c4478aL,0x4542e0abL,0xfeda26d4L,0xc1d10fcbL,0x8252f596L,
X0x4494eb5cL,0xa362f314L,0xf5ba81fdL,0x75c3a376L,0x4ca214caL,
X0xe164deddL,0x5088fa97L,0x4b0930e0L,0x2fcfb7e8L,0x33a6f4b2L,
X0xc7e94211L,0x2d66c774L,0x43be8baeL,0xc663d445L,0x908eb130L,
X0xf4e3be15L,0x63b9d566L,0x529396b5L,0x1e1be743L,0x4d5ff63fL,
X0x985e4a83L,0x71ab9df7L,0xc516c6f5L,0x85c19ab4L,0x1f4daee4L,
X0xf2973431L,0xb713dc5eL,0x3f2e159aL,0xc824da16L,0x06bf376aL,
X0xb2fe23ecL,0xe39b1c22L,0xf1eecb5fL,0x08e82d52L,0x565686c2L,
X0xab0aea93L,0xfd47219fL,0xebdbabd7L,0x2404a185L,0x8c7312b9L,
X0xa8f2d828L,0x0c8902daL,0x65b42b63L,0xc0bbef62L,0x4e3e4cefL,
X0x788f8018L,0xee1ebab7L,0x93928f9dL,0x683d2903L,0xd3b60689L,
X0xafcb0ddcL,0x88a4c47aL,0xf6dd9c3dL,0x7ea5fca0L,0x8a6d7244L,
X0xbe11f120L,0x04ff91b8L,0x8d2dc8c0L,0x27f97fdbL,0x7f9e1f47L,
X0x1734f0c7L,0x26f3ed8eL,0x0df8f2bfL,0xb0833d9eL,0xe420a4e5L,
X0xa423cae6L,0x95616772L,0x9ae6c049L,0x075941f2L,0xd8e12812L,
X0x000f6f4fL,0x3c0d6b05L,0x6cef921cL,0xb82bc264L,0x396cb008L,
X0x5d608a6fL,0x6d7782c8L,0x186550aaL,0x6b6fec09L,0x28e70b13L,
X0x57ce5688L,0xecd3af84L,0x23335a95L,0x91f40cd2L,0x7b6a3b26L,
X0xbd32b3b6L,0x3754a6fbL,0x8ed088f0L,0xf867e87cL,0x20851746L,
X0x6410f9c6L,0x35380442L,0xc2ca10a7L,0x1adea27fL,0x76bddd79L,
X0x92742cf4L,0x0e98f7eeL,0x164e931dL,0xb9c835b3L,0x69060a99L,
X0xb44c531eL,0xfa7b66feL,0xc98a5b53L,0x7d95aae9L,0x302f467bL,
X0x74b811deL,0xf3866abdL,0xb5b3d32dL,0xfc3157a4L,0xd251fe19L,
X0x0b5d8eacL,0xda71ffd5L,0x47ea05a3L,0x05c6a9e1L,0xca0ee958L,
X0x9939034dL,0x25dc5edfL,0x79083cb1L,0x86768450L,0xcf757d6dL,
X0x5972b6bcL,0xa78d59c9L,0xc4ad8d41L,0x2a362ad3L,0xd1179991L,
X0x601407ffL,0xdcf50917L,0x587069d0L,0xe0821ed6L,0xdbb59427L,
X0x73911a4bL,0x7c904fc3L,0x844afb92L,0x6f8c955dL,0xe8c0c5bbL,
X0xb67ab987L,0xa529d96cL,0xf91f7181L,0x618b1b06L,0xe718bb0cL,
X0x8bd7615bL,0xd5a93a59L,0x54aef81bL,0x772136e3L,0xce44fd9cL,
X0x10cda57eL,0x87d66e0bL,0x3d798967L,0x1b2c1804L,0x3edfbd68L,
X0x15f6e62bL,0xef68b854L,0x3896db35L,0x12b7b5e2L,0xcb489029L,
X0x9e4f98a5L,0x62eb77a8L,0x217c24a2L,0x964152f6L,0x49b2080aL,
X0x53d23ee7L,0x48fb6d69L,0x1903d190L,0x9449e494L,0xbf6e7886L,
X0xfb356cfaL,0x3a261365L,0x424bc1ebL,0xa1192570L,0x019ca782L,
X0x9d3f7e0eL,0x9c127575L,0xedf02039L,0xad57bcceL,0x5c153277L,
X0x81a84540L,0xbcaa7356L,0xccd59b60L,0xa62a629bL,0xa25ccd10L,
X0x2b5b65cfL,0x1c535832L,0x55fd4e3aL,0x31d9790dL,0xf06bc37dL,
X0x4afc1d71L,0xaeed5533L,0xba461634L,0xbb694b78L,0x5f3a5c73L,
X0x6a3c764aL,0x8fb0cca9L,0xf725684cL,0x4fe5382fL,0x1d0163afL,
X0x5aa07a8fL,0xe205a8edL,0xc30bad38L,0xff22cf1fL,0x72432e2eL,
X0x32c2518bL,0x3487ce4eL,0x7ae0ac02L,0x709fa098L,0x0a3b395aL,
X0x5b4043f8L,0xa9e48c36L,0x149a8521L,0xd07dee6bL,0x46acd2f3L,
X0x8958dffcL,0xb3a1223cL,0xb11d31c4L,0xcd7f4d3eL,0x0f28e3adL,
X0xe5b100beL,0xaac54824L,0xe9c9d7baL,0x9bd47001L,0x80f149b0L,
X0x66022f0fL,0x020c4048L,0x6efa192aL,0x67073f8dL,0x13ec7bf9L,
X0x3655011aL,0xe6afe157L,0xd9845f6eL,0xdecc4425L,0x511ae2ccL,
X0xdf81b4d8L,0xd7809e55L,0xd6d883d9L,0x2cc7978cL,0x5e787cc5L,
X0xdd0033d1L,0xa050c937L,0x97f75dcdL,0x299de580L,0x41e2b261L,
X0xea5a54f1L
X    /* End   of S Box 6  */  },
X
X
X {  /* Start of S Box 7  */
X
X0x7e672590L,0xbea513bbL,0x2c906fe6L,0x86029c2bL,0x55dc4f74L,
X0x0553398eL,0x63e09647L,0xcafd0babL,0x264c37dfL,0x8272210fL,
X0x67afa669L,0x12d98a5fL,0x8cab23c4L,0x75c68bd1L,0xc3370470L,
X0x33f37f4eL,0x283992ffL,0xe73a3a67L,0x1032f283L,0xf5ad9fc2L,
X0x963f0c5dL,0x664fbc45L,0x202ba41cL,0xc7c02d80L,0x54731e84L,
X0x8a1085f5L,0x601d80fbL,0x2f968e55L,0x35e96812L,0xe45a8f78L,
X0xbd7de662L,0x3b6e6eadL,0x8097c5efL,0x070b6781L,0xb1e508f3L,
X0x24e4fae3L,0xb81a7805L,0xec0fc918L,0x43c8774bL,0x9b2512a9L,
X0x2b05ad04L,0x32c2536fL,0xedf236e0L,0x8bc4b0cfL,0xbaceb837L,
X0x4535b289L,0x0d0e94c3L,0xa5a371d0L,0xad695a58L,0x39e3437dL,
X0x9186bffcL,0x21038c3bL,0x0aa9dff9L,0x5d1f06ceL,0x62def8a4L,
X0xf740a2b4L,0xa2575868L,0x682683c1L,0xdbb30facL,0x61fe1928L,
X0x468a6511L,0xc61cd5f4L,0xe54d9800L,0x6b98d7f7L,0x8418b6a5L,
X0x5f09a5d2L,0x90b4e80bL,0x49b2c852L,0x69f11c77L,0x17412b7eL,
X0x7f6fc0edL,0x56838dccL,0x6e9546a2L,0xd0758619L,0x087b9b9aL,
X0xd231a01dL,0xaf46d415L,0x097060fdL,0xd920f657L,0x882d3f9fL,
X0x3ae7c3c9L,0xe8a00d9bL,0x4fe67ebeL,0x2ef80eb2L,0xc1916b0cL,
X0xf4dffea0L,0xb97eb3ebL,0xfdff84ddL,0xff8b14f1L,0xe96b0572L,
X0xf64b508cL,0xae220a6eL,0x4423ae5aL,0xc2bece5eL,0xde27567cL,
X0xfc935c63L,0x47075573L,0xe65b27f0L,0xe121fd22L,0xf2668753L,
X0x2debf5d7L,0x8347e08dL,0xac5eda03L,0x2a7cebe9L,0x3fe8d92eL,
X0x23542fe4L,0x1fa7bd50L,0xcf9b4102L,0x9d0dba39L,0x9cb8902aL,
X0xa7249d8bL,0x0f6d667aL,0x5ebfa9ecL,0x6a594df2L,0x79600938L,
X0x023b7591L,0xea2c79c8L,0xc99d07eaL,0x64cb5ee1L,0x1a9cab3dL,
X0x76db9527L,0xc08e012fL,0x3dfb481aL,0x872f22e7L,0x2948d15cL,
X0xa4782c79L,0x6f50d232L,0x78f0728aL,0x5a87aab1L,0xc4e2c19cL,
X0xee767387L,0x1b2a1864L,0x7b8d10d3L,0xd1713161L,0x0eeac456L,
X0xd8799e06L,0xb645b548L,0x4043cb65L,0xa874fb29L,0x4b12d030L,
X0x7d687413L,0x18ef9a1fL,0xd7631d4cL,0x5829c7daL,0xcdfa30faL,
X0xc5084bb0L,0x92cd20e2L,0xd4c16940L,0x03283ec0L,0xa917813fL,
X0x9a587d01L,0x70041f8fL,0xdc6ab1dcL,0xddaee3d5L,0x31829742L,
X0x198c022dL,0x1c9eafcbL,0x5bbc6c49L,0xd3d3293aL,0x16d50007L,
X0x04bb8820L,0x3c5c2a41L,0x37ee7af8L,0x8eb04025L,0x9313ecbaL,
X0xbffc4799L,0x8955a744L,0xef85d633L,0x504499a7L,0xa6ca6a86L,
X0xbb3d3297L,0xb34a8236L,0x6dccbe4fL,0x06143394L,0xce19fc7bL,
X0xccc3c6c6L,0xe36254aeL,0x77b7eda1L,0xa133dd9eL,0xebf9356aL,
X0x513ccf88L,0xe2a1b417L,0x972ee5bdL,0x853824cdL,0x5752f4eeL,
X0x6c1142e8L,0x3ea4f309L,0xb2b5934aL,0xdfd628aaL,0x59acea3eL,
X0xa01eb92cL,0x389964bcL,0xda305dd4L,0x019a59b7L,0x11d2ca93L,
X0xfaa6d3b9L,0x4e772ecaL,0x72651776L,0xfb4e5b0eL,0xa38f91a8L,
X0x1d0663b5L,0x30f4f192L,0xb50051b6L,0xb716ccb3L,0x4abd1b59L,
X0x146c5f26L,0xf134e2deL,0x00f67c6cL,0xb0e1b795L,0x98aa4ec7L,
X0x0cc73b34L,0x654276a3L,0x8d1ba871L,0x740a5216L,0xe0d01a23L,
X0x9ed161d6L,0x9f36a324L,0x993ebb7fL,0xfeb9491bL,0x365ddcdbL,
X0x810cffc5L,0x71ec0382L,0x2249e7bfL,0x48817046L,0xf3a24a5bL,
X0x4288e4d9L,0x0bf5c243L,0x257fe151L,0x95b64c0dL,0x4164f066L,
X0xaaf7db08L,0x73b1119dL,0x8f9f7bb8L,0xd6844596L,0xf07a34a6L,
X0x53943d0aL,0xf9dd166dL,0x7a8957afL,0xf8ba3ce5L,0x27c9621eL,
X0x5cdae910L,0xc8518998L,0x941538feL,0x136115d8L,0xaba8443cL,
X0x4d01f931L,0x34edf760L,0xb45f266bL,0xd5d4de14L,0x52d8ac35L,
X0x15cfd885L,0xcbc5cd21L,0x4cd76d4dL,0x7c80ef54L,0xbc92ee75L,
X0x1e56a1f6L
X    /* End   of S Box 7  */  },
X
X
X {  /* Start of S Box 8  */
X
X0xbaa20b6cL,0x9ffbad26L,0xe1f7d738L,0x794aec8dL,0xc9e9cf3cL,
X0x8a9a7846L,0xc57c4685L,0xb9a92fedL,0x29cb141fL,0x52f9ddb7L,
X0xf68ba6bcL,0x19ccc020L,0x4f584aaaL,0x3bf6a596L,0x003b7cf7L,
X0x54f0ce9aL,0xa7ec4303L,0x46cf0077L,0x78d33aa1L,0x215247d9L,
X0x74bcdf91L,0x08381d30L,0xdac43e40L,0x64872531L,0x0beffe5fL,
X0xb317f457L,0xaebb12daL,0xd5d0d67bL,0x7d75c6b4L,0x42a6d241L,
X0x1502d0a9L,0x3fd97fffL,0xc6c3ed28L,0x81868d0aL,0x92628bc5L,
X0x86679544L,0xfd1867afL,0x5ca3ea61L,0x568d5578L,0x4a2d71f4L,
X0x43c9d549L,0x8d95de2bL,0x6e5c74a0L,0x9120ffc7L,0x0d05d14aL,
X0xa93049d3L,0xbfa80e17L,0xf4096810L,0x043f5ef5L,0xa673b4f1L,
X0x6d780298L,0xa4847783L,0x5ee726fbL,0x9934c281L,0x220a588cL,
X0x384e240fL,0x933d5c69L,0x39e5ef47L,0x26e8b8f3L,0x4c1c6212L,
X0x8040f75dL,0x074b7093L,0x6625a8d7L,0x36298945L,0x76285088L,
X0x651d37c3L,0x24f5274dL,0xdbca3dabL,0x186b7ee1L,0xd80f8182L,
X0x14210c89L,0x943a3075L,0x4e6e11c4L,0x4d7e6badL,0xf05064c8L,
X0x025dcd97L,0x4bc10302L,0x7cede572L,0x8f90a970L,0xab88eebaL,
X0xb5998029L,0x5124d839L,0xb0eeb6a3L,0x89ddabdcL,0xe8074d76L,
X0xa1465223L,0x32518cf2L,0x9d39d4ebL,0xc0d84524L,0xe35e6ea8L,
X0x7abf3804L,0x113e2348L,0x9ae6069dL,0xb4dfdabbL,0xa8c5313fL,
X0x23ea3f79L,0x530e36a2L,0xa5fd228bL,0x95d1d350L,0x2b14cc09L,
X0x40042956L,0x879d05ccL,0x2064b9caL,0xacaca40eL,0xb29c846eL,
X0x9676c9e3L,0x752b7b8aL,0x7be2bcc2L,0x6bd58f5eL,0xd48f4c32L,
X0x606835e4L,0x9cd7c364L,0x2c269b7aL,0x3a0d079cL,0x73b683feL,
X0x45374f1eL,0x10afa242L,0x577f8666L,0xddaa10f6L,0xf34f561cL,
X0x3d355d6bL,0xe47048aeL,0xaa13c492L,0x050344fdL,0x2aab5151L,
X0xf5b26ae5L,0xed919a59L,0x5ac67900L,0xf1cde380L,0x0c79a11bL,
X0x351533fcL,0xcd4d8e36L,0x1f856005L,0x690b9fddL,0xe736dccfL,
X0x1d47bf6aL,0x7f66c72aL,0x85f21b7fL,0x983cbdb6L,0x01ebbebfL,
X0x035f3b99L,0xeb111f34L,0x28cefdc6L,0x5bfc9ecdL,0xf22eacb0L,
X0x9e41cbb2L,0xe0f8327cL,0x82e3e26fL,0xfc43fc86L,0xd0ba66dfL,
X0x489ef2a7L,0xd9e0c81dL,0x68690d52L,0xcc451367L,0xc2232e16L,
X0xe95a7335L,0x0fdae19bL,0xff5b962cL,0x97596527L,0xc46db333L,
X0x3ed4c562L,0xc14c9d9eL,0x5d6faa21L,0x638e940dL,0xf9316d58L,
X0x47b3b0eaL,0x30ffcad2L,0xce1bba7dL,0x1e6108e6L,0x2e1ea33dL,
X0x507bf05bL,0xfafef94bL,0xd17de8e2L,0x5598b214L,0x1663f813L,
X0x17d25a2dL,0xeefa5ff9L,0x582f4e37L,0x12128773L,0xfef17ab8L,
X0x06005322L,0xbb32bbc9L,0x8c898508L,0x592c15f0L,0xd38a4054L,
X0x4957b7d6L,0xd2b891dbL,0x37bd2d3eL,0x34ad20cbL,0x622288e9L,
X0x2dc7345aL,0xafb416c0L,0x1cf459b1L,0xdc7739faL,0x0a711a25L,
X0x13e18a0cL,0x5f72af4cL,0x6ac8db11L,0xbe53c18eL,0x1aa569b9L,
X0xef551ea4L,0xa02a429fL,0xbd16e790L,0x7eb9171aL,0x77d693d8L,
X0x8e06993aL,0x9bde7560L,0xe5801987L,0xc37a09beL,0xb8db76acL,
X0xe2087294L,0x6c81616dL,0xb7f30fe7L,0xbc9b82bdL,0xfba4e4d4L,
X0xc7b1012fL,0xa20c043bL,0xde9febd0L,0x2f9297ceL,0xe610aef8L,
X0x70b06f19L,0xc86ae00bL,0x0e01988fL,0x41192ae0L,0x448c1cb5L,
X0xadbe92eeL,0x7293a007L,0x1b54b5b3L,0xd61f63d1L,0xeae40a74L,
X0x61a72b55L,0xec83a7d5L,0x88942806L,0x90a07da5L,0xd7424b95L,
X0x67745b4eL,0xa31a1853L,0xca6021efL,0xdfb56c4fL,0xcbc2d915L,
X0x3c48e918L,0x8bae3c63L,0x6f659c71L,0xf8b754c1L,0x2782f3deL,
X0xf796f168L,0x71492c84L,0x33c0f5a6L,0x3144f6ecL,0x25dc412eL,
X0xb16c5743L,0x83a1fa7eL,0x0997b101L,0xb627e6e8L,0xcf33905cL,
X0x8456fb65L
X    /* End   of S Box 8  */  },
X
X
X {  /* Start of S Box 9  */
X
X0xb29bea74L,0xc35da605L,0x305c1ca3L,0xd2e9f5bcL,0x6fd5bff4L,
X0xff347703L,0xfc45b163L,0xf498e068L,0xb71229fcL,0x81acc3fbL,
X0x78538a8bL,0x984ecf81L,0xa5da47a4L,0x8f259eefL,0x6475dc65L,
X0x081865b9L,0x49e14a3cL,0x19e66079L,0xd382e91bL,0x5b109794L,
X0x3f9f81e1L,0x4470a388L,0x41601abeL,0xaaf9f407L,0x8e175ef6L,
X0xed842297L,0x893a4271L,0x1790839aL,0xd566a99eL,0x6b417deeL,
X0x75c90d23L,0x715edb31L,0x723553f7L,0x9afb50c9L,0xfbc5f600L,
X0xcd3b6a4eL,0x97ed0fbaL,0x29689aecL,0x63135c8eL,0xf0e26c7eL,
X0x0692ae7fL,0xdbb208ffL,0x2ede3e9bL,0x6a65bebdL,0xd40867e9L,
X0xc954afc5L,0x73b08201L,0x7ffdf809L,0x1195c24fL,0x1ca5adcaL,
X0x74bd6d1fL,0xb393c455L,0xcadfd3faL,0x99f13011L,0x0ebca813L,
X0x60e791b8L,0x6597ac7aL,0x18a7e46bL,0x09cb49d3L,0x0b27df6dL,
X0xcfe52f87L,0xcef66837L,0xe6328035L,0xfa87c592L,0x37baff93L,
X0xd71fcc99L,0xdcab205cL,0x4d7a5638L,0x48012510L,0x62797558L,
X0xb6cf1fe5L,0xbc311834L,0x9c2373acL,0x14ec6175L,0xa439cbdfL,
X0x54afb0eaL,0xd686960bL,0xfdd0d47bL,0x7b063902L,0x8b78bac3L,
X0x26c6a4d5L,0x5c0055b6L,0x2376102eL,0x0411783eL,0x2aa3f1cdL,
X0x51fc6ea8L,0x701ce243L,0x9b2a0abbL,0x0ad93733L,0x6e80d03dL,
X0xaf6295d1L,0xf629896fL,0xa30b0648L,0x463d8dd4L,0x963f84cbL,
X0x01ff94f8L,0x8d7fefdcL,0x553611c0L,0xa97c1719L,0xb96af759L,
X0xe0e3c95eL,0x0528335bL,0x21fe5925L,0x821a5245L,0x807238b1L,
X0x67f23db5L,0xea6b4eabL,0x0da6f985L,0xab1bc85aL,0xef8c90e4L,
X0x4526230eL,0x38eb8b1cL,0x1b91cd91L,0x9fce5f0cL,0xf72cc72bL,
X0xc64f2617L,0xdaf7857dL,0x7d373cf1L,0x28eaedd7L,0x203887d0L,
X0xc49a155fL,0xa251b3b0L,0xf2d47ae3L,0x3d9ef267L,0x4a94ab2fL,
X0x7755a222L,0x0205e329L,0xc28fa7a7L,0xaec1fe51L,0x270f164cL,
X0x8c6d01bfL,0x53b5bc98L,0xc09d3febL,0x834986ccL,0x4309a12cL,
X0x578b2a96L,0x3bb74b86L,0x69561b4aL,0x037e32f3L,0xde335b08L,
X0xc5156be0L,0xe7ef09adL,0x93b834c7L,0xa7719352L,0x59302821L,
X0xe3529d26L,0xf961da76L,0xcb142c44L,0xa0f3b98dL,0x76502457L,
X0x945a414bL,0x078eeb12L,0xdff8de69L,0xeb6c8c2dL,0xbda90c4dL,
X0xe9c44d16L,0x168dfd66L,0xad64763bL,0xa65fd764L,0x95a29c06L,
X0x32d7713fL,0x40f0b277L,0x224af08fL,0x004cb5e8L,0x92574814L,
X0x8877d827L,0x3e5b2d04L,0x68c2d5f2L,0x86966273L,0x1d433adaL,
X0x8774988aL,0x3c0e0bfeL,0xddad581dL,0x2fd654edL,0x0f4769fdL,
X0xc181ee9dL,0x5fd88f61L,0x341dbb3aL,0x528543f9L,0xd92235cfL,
X0x1ea82eb4L,0xb5cd790fL,0x91d24f1eL,0xa869e6c2L,0x61f474d2L,
X0xcc205addL,0x0c7bfba9L,0xbf2b0489L,0xb02d72d8L,0x2b46ece6L,
X0xe4dcd90aL,0xb8a11440L,0xee8a63b7L,0x854dd1a1L,0xd1e00583L,
X0x42b40e24L,0x9e8964deL,0xb4b35d78L,0xbec76f6eL,0x24b9c620L,
X0xd8d399a6L,0x5adb2190L,0x2db12730L,0x3a5866afL,0x58c8fadbL,
X0x5d8844e7L,0x8a4bf380L,0x15a01d70L,0x79f5c028L,0x66be3b8cL,
X0xf3e42b53L,0x56990039L,0x2c0c3182L,0x5e16407cL,0xecc04515L,
X0x6c440284L,0x4cb6701aL,0x13bfc142L,0x9d039f6aL,0x4f6e92c8L,
X0xa1407c62L,0x8483a095L,0xc70ae1c4L,0xe20213a2L,0xbacafc41L,
X0x4ecc12b3L,0x4bee3646L,0x1fe807aeL,0x25217f9cL,0x35dde5f5L,
X0x7a7dd6ceL,0xf89cce50L,0xac07b718L,0x7e73d2c6L,0xe563e76cL,
X0x123ca536L,0x3948ca56L,0x9019dd49L,0x10aa88d9L,0xc82451e2L,
X0x473eb6d6L,0x506fe854L,0xe8bb03a5L,0x332f4c32L,0xfe1e1e72L,
X0xb1ae572aL,0x7c0d7bc1L,0xe1c37eb2L,0xf542aa60L,0xf1a48ea0L,
X0xd067b89fL,0xbbfa195dL,0x1a049b0dL,0x315946aaL,0x36d1b447L,
X0x6d2ebdf0L
X    /* End   of S Box 9  */  },
X
X
X {  /* Start of S Box 10  */
X
X0x0d188a6dL,0x12cea0dbL,0x7e63740eL,0x6a444821L,0x253d234fL,
X0x6ffc6597L,0x94a6bdefL,0x33ee1b2fL,0x0a6c00c0L,0x3aa336b1L,
X0x5af55d17L,0x265fb3dcL,0x0e89cf4dL,0x0786b008L,0xc80055b8L,
X0x6b17c3ceL,0x72b05a74L,0xd21a8d78L,0xa6b70840L,0xfe8eae77L,
X0xed69565cL,0x55e1bcf4L,0x585c2f60L,0xe06f1a62L,0xad67c0cdL,
X0x7712af88L,0x9cc26acaL,0x1888053dL,0x37eb853eL,0x9215abd7L,
X0xde30adfcL,0x1f1038e6L,0x70c51c8aL,0x8d586c26L,0xf72bdd90L,
X0x4dc3ce15L,0x68eaeefaL,0xd0e9c8b9L,0x200f9c44L,0xddd141baL,
X0x024bf1d3L,0x0f64c9d4L,0xc421e9e9L,0x9d11c14cL,0x9a0dd9e4L,
X0x5f92ec19L,0x1b980df0L,0x1dcc4542L,0xb8fe8c56L,0x0c9c9167L,
X0x4e81eb49L,0xca368f27L,0xe3603b37L,0xea08acccL,0xac516992L,
X0xc34f513bL,0x804d100dL,0x6edca4c4L,0xfc912939L,0x29d219b0L,
X0x278aaa3cL,0x4868da7dL,0x54e890b7L,0xb46d735aL,0x514589aaL,
X0xd6c630afL,0x4980dfe8L,0xbe3ccc55L,0x59d41202L,0x650c078bL,
X0xaf3a9e7bL,0x3ed9827aL,0x9e79fc6eL,0xaadbfbaeL,0xc5f7d803L,
X0x3daf7f50L,0x67b4f465L,0x73406e11L,0x39313f8cL,0x8a6e6686L,
X0xd8075f1fL,0xd3cbfed1L,0x69c7e49cL,0x930581e0L,0xe4b1a5a8L,
X0xbbc45472L,0x09ddbf58L,0xc91d687eL,0xbdbffda5L,0x88c08735L,
X0xe9e36bf9L,0xdb5ea9b6L,0x95559404L,0x08f432fbL,0xe24ea281L,
X0x64663579L,0x000b8010L,0x7914e7d5L,0x32fd0473L,0xd1a7f0a4L,
X0x445ab98eL,0xec72993fL,0xa29a4d32L,0xb77306d8L,0xc7c97cf6L,
X0x7b6ab645L,0xf5ef7adfL,0xfb2e15f7L,0xe747f757L,0x5e944354L,
X0x234a2669L,0x47e46359L,0x9b9d11a9L,0x40762cedL,0x56f1de98L,
X0x11334668L,0x890a9a70L,0x1a296113L,0xb3bd4af5L,0x163b7548L,
X0xd51b4f84L,0xb99b2abcL,0x3cc1dc30L,0xa9f0b56cL,0x812272b2L,
X0x0b233a5fL,0xb650dbf2L,0xf1a0771bL,0x36562b76L,0xdc037b0fL,
X0x104c97ffL,0xc2ec98d2L,0x90596f22L,0x28b6620bL,0xdf42b212L,
X0xfdbc4243L,0xf3fb175eL,0x4a2d8b00L,0xe8f3869bL,0x30d69bc3L,
X0x853714c8L,0xa7751d2eL,0x31e56deaL,0xd4840b0cL,0x9685d783L,
X0x068c9333L,0x8fba032cL,0x76d7bb47L,0x6d0ee22bL,0xb546794bL,
X0xd971b894L,0x8b09d253L,0xa0ad5761L,0xee77ba06L,0x46359f31L,
X0x577cc7ecL,0x52825efdL,0xa4beed95L,0x9825c52aL,0xeb48029aL,
X0xbaae59f8L,0xcf490ee1L,0xbc990164L,0x8ca49dfeL,0x4f38a6e7L,
X0x2ba98389L,0x8228f538L,0x199f64acL,0x01a1cac5L,0xa8b51641L,
X0x5ce72d01L,0x8e5df26bL,0x60f28e1eL,0xcd5be125L,0xe5b376bfL,
X0x1c8d3116L,0x7132cbb3L,0xcb7ae320L,0xc0fa5366L,0xd7653e34L,
X0x971c88c2L,0xc62c7dd0L,0x34d0a3daL,0x868f6709L,0x7ae6fa8fL,
X0x22bbd523L,0x66cd3d5bL,0x1ef9288dL,0xf9cf58c1L,0x5b784e80L,
X0x7439a191L,0xae134c36L,0x9116c463L,0x2e9e1396L,0xf8611f3aL,
X0x2d2f3307L,0x247f37ddL,0xc1e2ff9dL,0x43c821e5L,0x05ed5cabL,
X0xef74e80aL,0x4cca6028L,0xf0ac3cbdL,0x5d874b29L,0x6c62f6a6L,
X0x4b2a2ef3L,0xb1aa2087L,0x62a5d0a3L,0x0327221cL,0xb096b4c6L,
X0x417ec693L,0xaba840d6L,0x789725ebL,0xf4b9e02dL,0xe6e00975L,
X0xcc04961aL,0x63f624bbL,0x7fa21ecbL,0x2c01ea7fL,0xb2415005L,
X0x2a8bbeb5L,0x83b2b14eL,0xa383d1a7L,0x5352f96aL,0x043ecdadL,
X0xce1918a1L,0xfa6be6c9L,0x50def36fL,0xf6b80ce2L,0x4543ef7cL,
X0x9953d651L,0xf257955dL,0x87244914L,0xda1e0a24L,0xffda4785L,
X0x14d327a2L,0x3b93c29fL,0x840684b4L,0x61ab71a0L,0x9f7b784aL,
X0x2fd570cfL,0x15955bdeL,0x38f8d471L,0x3534a718L,0x133fb71dL,
X0x3fd80f52L,0x4290a8beL,0x75ff44c7L,0xa554e546L,0xe1023499L,
X0xbf2652e3L,0x7d20399eL,0xa1df7e82L,0x177092eeL,0x217dd3f1L,
X0x7c1ff8d9L
X    /* End   of S Box 10  */  },
X
X
X {  /* Start of S Box 11  */
X
X0x12113f2eL,0xbfbd0785L,0xf11793fbL,0xa5bff566L,0x83c7b0e5L,
X0x72fb316bL,0x75526a9aL,0x41e0e612L,0x7156ba09L,0x53ce7deeL,
X0x0aa26881L,0xa43e0d7dL,0x3da73ca3L,0x182761edL,0xbd5077ffL,
X0x56db4aa0L,0xe792711cL,0xf0a4eb1dL,0x7f878237L,0xec65c4e8L,
X0x08dc8d43L,0x0f8ce142L,0x8258abdaL,0xf4154e16L,0x49dec2fdL,
X0xcd8d5705L,0x6c2c3a0fL,0x5c12bb88L,0xeff3cdb6L,0x2c89ed8cL,
X0x7beba967L,0x2a142157L,0xc6d0836fL,0xb4f97e96L,0x6931e969L,
X0x514e6c7cL,0xa7792600L,0x0bbbf780L,0x59671bbdL,0x0707b676L,
X0x37482d93L,0x80af1479L,0x3805a60dL,0xe1f4cac1L,0x580b3074L,
X0x30b8d6ceL,0x05a304beL,0xd176626dL,0xebca97f3L,0xbb201f11L,
X0x6a1afe23L,0xffaa86e4L,0x62b4da49L,0x1b6629f5L,0xf5d9e092L,
X0xf37f3dd1L,0x619bd45bL,0xa6ec8e4fL,0x29c80939L,0x0c7c0c34L,
X0x9cfe6e48L,0xe65fd3acL,0x73613b65L,0xb3c669f9L,0xbe2e8a9eL,
X0x286f9678L,0x5797fd13L,0x99805d75L,0xcfb641c5L,0xa91074baL,
X0x6343af47L,0x6403cb46L,0x8894c8dbL,0x2663034cL,0x3c40dc5eL,
X0x00995231L,0x96789aa2L,0x2efde4b9L,0x7dc195e1L,0x547dadd5L,
X0x06a8ea04L,0xf2347a63L,0x5e0dc6f7L,0x8462dfc2L,0x1e6b2c3cL,
X0x9bd275b3L,0x91d419e2L,0xbcefd17eL,0xb9003924L,0xd07e7320L,
X0xdef0495cL,0xc36ad00eL,0x1785b1abL,0x92e20bcfL,0xb139f0e9L,
X0x675bb9a1L,0xaecfa4afL,0x132376cbL,0xe84589d3L,0x79a05456L,
X0xa2f860bcL,0x1ae4f8b5L,0x20df4db4L,0xa1e1428bL,0x3bf60a1aL,
X0x27ff7bf1L,0xcb44c0e7L,0xf7f587c4L,0x1f3b9b21L,0x94368f01L,
X0x856e23a4L,0x6f93de3fL,0x773f5bbfL,0x8b22056eL,0xdf41f654L,
X0xb8246ff4L,0x8d57bff2L,0xd57167eaL,0xc5699f22L,0x40734ba7L,
X0x5d5c2772L,0x033020a8L,0xe30a7c4dL,0xadc40fd6L,0x76353441L,
X0x5aa5229bL,0x81516590L,0xda49f14eL,0x4fa672a5L,0x4d9fac5fL,
X0x154be230L,0x8a7a5cc0L,0xce3d2f84L,0xcca15514L,0x5221360cL,
X0xaf0fb81eL,0x5bdd5873L,0xf6825f8fL,0x1113d228L,0x70ad996cL,
X0x93320051L,0x60471c53L,0xe9ba567bL,0x3a462ae3L,0x5f55e72dL,
X0x1d3c5ad7L,0xdcfc45ecL,0x34d812efL,0xfa96ee1bL,0x369d1ef8L,
X0xc9b1a189L,0x7c1d3555L,0x50845edcL,0x4bb31877L,0x8764a060L,
X0x8c9a9415L,0x230e1a3aL,0xb05e9133L,0x242b9e03L,0xa3b99db7L,
X0xc2d7fb0aL,0x3333849dL,0xd27278d4L,0xb5d3efa6L,0x78ac28adL,
X0xc7b2c135L,0x0926ecf0L,0xc1374c91L,0x74f16d98L,0x2274084aL,
X0x3f6d9cfaL,0x7ac0a383L,0xb73aff1fL,0x3909a23dL,0x9f1653aeL,
X0x4e2f3e71L,0xca5ab22aL,0xe01e3858L,0x90c5a7ebL,0x3e4a17dfL,
X0xaa987fb0L,0x488bbd62L,0xb625062bL,0x2d776bb8L,0x43b5fc08L,
X0x1490d532L,0xd6d12495L,0x44e89845L,0x2fe60118L,0x9d9ef950L,
X0xac38133eL,0xd3864329L,0x017b255aL,0xfdc2dd26L,0x256851e6L,
X0x318e7086L,0x2bfa4861L,0x89eac706L,0xee5940c6L,0x68c3bc2fL,
X0xe260334bL,0x98da90bbL,0xf818f270L,0x4706d897L,0x212d3799L,
X0x4cf7e5d0L,0xd9c9649fL,0xa85db5cdL,0x35e90e82L,0x6b881152L,
X0xab1c02c7L,0x46752b02L,0x664f598eL,0x45ab2e64L,0xc4cdb4b2L,
X0xba42107fL,0xea2a808aL,0x971bf3deL,0x4a54a836L,0x4253aeccL,
X0x1029be68L,0x6dcc9225L,0xe4bca56aL,0xc0ae50b1L,0x7e011d94L,
X0xe59c162cL,0xd8e5c340L,0xd470fa0bL,0xb2be79ddL,0xd783889cL,
X0x1cede8f6L,0x8f4c817aL,0xddb785c9L,0x860232d8L,0x198aaad9L,
X0xa0814738L,0x3219cffcL,0x169546d2L,0xfc0cb759L,0x55911510L,
X0x04d5cec3L,0xed08cc3bL,0x0d6cf427L,0xc8e38ccaL,0x0eeee3feL,
X0x9ee7d7c8L,0xf9f24fa9L,0xdb04b35dL,0x9ab0c9e0L,0x651f4417L,
X0x028f8b07L,0x6e28d9aaL,0xfba96319L,0x8ed66687L,0xfecbc58dL,
X0x954ddb44L
X    /* End   of S Box 11  */  },
X
X
X {  /* Start of S Box 12  */
X
X0x7b0bdffeL,0x865d16b1L,0x49a058c0L,0x97abaa3fL,0xcaacc75dL,
X0xaba6c17dL,0xf8746f92L,0x6f48aeedL,0x8841d4b5L,0xf36a146aL,
X0x73c390abL,0xe6fb558fL,0x87b1019eL,0x26970252L,0x246377b2L,
X0xcbf676aeL,0xf923db06L,0xf7389116L,0x14c81a90L,0x83114eb4L,
X0x8b137559L,0x95a86a7aL,0xd5b8da8cL,0xc4df780eL,0x5a9cb3e2L,
X0xe44d4062L,0xe8dc8ef6L,0x9d180845L,0x817ad18bL,0xc286c85bL,
X0x251f20deL,0xee6d5933L,0xf6edef81L,0xd4d16c1eL,0xc94a0c32L,
X0x8437fd22L,0x3271ee43L,0x42572aeeL,0x5f91962aL,0x1c522d98L,
X0x59b23f0cL,0xd86b8804L,0x08c63531L,0x2c0d7a40L,0xb97c4729L,
X0x04964df9L,0x13c74a17L,0x5878362fL,0x4c808cd6L,0x092cb1e0L,
X0x6df02885L,0xa0c2105eL,0x8aba9e68L,0x64e03057L,0xe5d61325L,
X0x0e43a628L,0x16dbd62bL,0x2733d90bL,0x3ae57283L,0xc0c1052cL,
X0x4b6fb620L,0x37513953L,0xfc898bb3L,0x471b179fL,0xdf6e66b8L,
X0xd32142f5L,0x9b30fafcL,0x4ed92549L,0x105c6d99L,0x4acd69ffL,
X0x2b1a27d3L,0x6bfcc067L,0x6301a278L,0xad36e6f2L,0xef3ff64eL,
X0x56b3cadbL,0x0184bb61L,0x17beb9fdL,0xfaec6109L,0xa2e1ffa1L,
X0x2fd224f8L,0x238f5be6L,0x8f8570cfL,0xaeb5f25aL,0x4f1d3e64L,
X0x4377eb24L,0x1fa45346L,0xb2056386L,0x52095e76L,0xbb7b5adcL,
X0x3514e472L,0xdde81e6eL,0x7acea9c4L,0xac15cc48L,0x71c97d93L,
X0x767f941cL,0x911052a2L,0xffea09bfL,0xfe3ddcf0L,0x15ebf3aaL,
X0x9235b8bcL,0x75408615L,0x9a723437L,0xe1a1bd38L,0x33541b7eL,
X0x1bdd6856L,0xb307e13eL,0x90814bb0L,0x51d7217bL,0x0bb92219L,
X0x689f4500L,0xc568b01fL,0x5df3d2d7L,0x3c0ecd0dL,0x2a0244c8L,
X0x852574e8L,0xe72f23a9L,0x8e26ed02L,0x2d92cbddL,0xdabc0458L,
X0xcdf5feb6L,0x9e4e8dccL,0xf4f1e344L,0x0d8c436dL,0x4427603bL,
X0xbdd37fdaL,0x80505f26L,0x8c7d2b8eL,0xb73273c5L,0x397362eaL,
X0x618a3811L,0x608bfb88L,0x06f7d714L,0x212e4677L,0x28efceadL,
X0x076c0371L,0x36a3a4d9L,0x5487b455L,0x3429a365L,0x65d467acL,
X0x78ee7eebL,0x99bf12b7L,0x4d129896L,0x772a5601L,0xcce284c7L,
X0x2ed85c21L,0xd099e8a4L,0xa179158aL,0x6ac0ab1aL,0x299a4807L,
X0xbe67a58dL,0xdc19544aL,0xb8949b54L,0x8d315779L,0xb6f849c1L,
X0x53c5ac34L,0x66de92a5L,0xf195dd13L,0x318d3a73L,0x301ec542L,
X0x0cc40da6L,0xf253ade4L,0x467ee566L,0xea5585ecL,0x3baf19bbL,
X0x7de9f480L,0x79006e7cL,0xa9b7a197L,0xa44bd8f1L,0xfb2ba739L,
X0xec342fd4L,0xed4fd32dL,0x3d1789baL,0x400f5d7fL,0xc798f594L,
X0x4506a847L,0x034c0a95L,0xe2162c9dL,0x55a9cfd0L,0x692d832eL,
X0xcf9db2caL,0x5e2287e9L,0xd2610ef3L,0x1ae7ecc2L,0x48399ca0L,
X0xa7e4269bL,0x6ee3a0afL,0x7065bfe1L,0xa6ffe708L,0x2256804cL,
X0x7476e21bL,0x41b0796cL,0x7c243b05L,0x000a950fL,0x1858416bL,
X0xf5a53c89L,0xe9fef823L,0x3f443275L,0xe0cbf091L,0x0af27b84L,
X0x3ebb0f27L,0x1de6f7f4L,0xc31c29f7L,0xb166de3dL,0x12932ec3L,
X0x9c0c0674L,0x5cda81b9L,0xd1bd9d12L,0xaffd7c82L,0x8962bca7L,
X0xa342c4a8L,0x62457151L,0x82089f03L,0xeb49c670L,0x5b5f6530L,
X0x7e28bad2L,0x20880ba3L,0xf0faafcdL,0xce82b56fL,0x0275335cL,
X0xc18e8afbL,0xde601d69L,0xba9b820aL,0xc8a2be4fL,0xd7cac335L,
X0xd9a73741L,0x115e974dL,0x7f5ac21dL,0x383bf9c6L,0xbcaeb75fL,
X0xfd0350ceL,0xb5d06b87L,0x9820e03cL,0x72d5f163L,0xe3644fc9L,
X0xa5464c4bL,0x57048fcbL,0x9690c9dfL,0xdbf9eafaL,0xbff4649aL,
X0x053c00e3L,0xb4b61136L,0x67593dd1L,0x503ee960L,0x9fb4993aL,
X0x19831810L,0xc670d518L,0xb05b51d8L,0x0f3a1ce5L,0x6caa1f9cL,
X0xaacc31beL,0x949ed050L,0x1ead07e7L,0xa8479abdL,0xd6cffcd5L,
X0x936993efL
X    /* End   of S Box 12  */  },
X
X
X {  /* Start of S Box 13  */
X
X0x472e91cbL,0x5444b5b6L,0x62be5861L,0x1be102c7L,0x63e4b31eL,
X0xe81f71b7L,0x9e2317c9L,0x39a408aeL,0x518024f4L,0x1731c66fL,
X0x68cbc918L,0x71fb0c9eL,0xd03b7fddL,0x7d6222ebL,0x9057eda3L,
X0x1a34a407L,0x8cc2253dL,0xb6f6979dL,0x835675dcL,0xf319be9fL,
X0xbe1cd743L,0x4d32fee4L,0x77e7d887L,0x37e9ebfdL,0x15f851e8L,
X0x23dc3706L,0x19d78385L,0xbd506933L,0xa13ad4a6L,0x913f1a0eL,
X0xdde560b9L,0x9a5f0996L,0xa65a0435L,0x48d34c4dL,0xe90839a7L,
X0x8abba54eL,0x6fd13ce1L,0xc7eebd3cL,0x0e297602L,0x58b9bbb4L,
X0xef7901e6L,0x64a28a62L,0xa509875aL,0xf8834442L,0x2702c709L,
X0x07353f31L,0x3b39f665L,0xf5b18b49L,0x4010ae37L,0x784de00bL,
X0x7a1121e9L,0xde918ed3L,0xc8529dcdL,0x816a5d05L,0x02ed8298L,
X0x04e3dd84L,0xfd2bc3e2L,0xaf167089L,0x96af367eL,0xa4da6232L,
X0x18ff7325L,0x05f9a9f1L,0x4fefb9f9L,0xcd94eaa5L,0xbfaa5069L,
X0xa0b8c077L,0x60d86f57L,0xfe71c813L,0x29ebd2c8L,0x4ca86538L,
X0x6bf1a030L,0xa237b88aL,0xaa8af41dL,0xe1f7b6ecL,0xe214d953L,
X0x33057879L,0x49caa736L,0xfa45cff3L,0xc063b411L,0xba7e27d0L,
X0x31533819L,0x2a004ac1L,0x210efc3fL,0x2646885eL,0x66727dcfL,
X0x9d7fbf54L,0xa8dd0ea8L,0x3447caceL,0x3f0c14dbL,0xb8382aacL,
X0x4ace3539L,0x0a518d51L,0x95178981L,0x35aee2caL,0x73f0f7e3L,
X0x94281140L,0x59d0e523L,0xd292cb88L,0x565d1b27L,0x7ec8fbafL,
X0x069af08dL,0xc127fd24L,0x0bc77b10L,0x5f03e7efL,0x453e99baL,
X0xeed9ff7fL,0x87b55215L,0x7915ab4cL,0xd389a358L,0x5e75ce6dL,
X0x28d655c0L,0xdad26c73L,0x2e2510ffL,0x9fa7eeccL,0x1d0629c3L,
X0xdc9c9c46L,0x2d67ecd7L,0xe75e94bdL,0x3d649e2aL,0x6c413a2bL,
X0x706f0d7cL,0xdfb0127bL,0x4e366b55L,0x2c825650L,0x24205720L,
X0xb5c998f7L,0x3e95462cL,0x756e5c72L,0x3259488fL,0x11e8771aL,
X0xa7c0a617L,0x577663e5L,0x089b6401L,0x8eab1941L,0xae55ef8cL,
X0x3aac5460L,0xd4e6262fL,0x5d979a47L,0xb19823b0L,0x7f8d6a0cL,
X0xffa08683L,0x0170cd0fL,0x858cd5d8L,0x53961c90L,0xc4c61556L,
X0x41f2f226L,0xcfcd062dL,0xf24c03b8L,0xea81df5bL,0x7be2fa52L,
X0xb361f98bL,0xc2901316L,0x55ba4bbcL,0x93b234a9L,0x0fbc6603L,
X0x80a96822L,0x6d60491fL,0x22bd00f8L,0xbcad5aadL,0x52f3f13bL,
X0x42fd2b28L,0xb41dd01cL,0xc52c93bfL,0xfc663094L,0x8f58d100L,
X0x43fecc08L,0xc6331e5dL,0xe6480f66L,0xca847204L,0x4bdf1da0L,
X0x30cc2efbL,0x13e02deaL,0xfb49ac45L,0xf9d4434fL,0xf47c5b9cL,
X0x148879c2L,0x039fc234L,0xa3db9bfcL,0xd1a1dc5cL,0x763d7cd4L,
X0xed6d2f93L,0xab13af6eL,0x1e8e054aL,0xd68f4f9aL,0xc30484b3L,
X0xd7d50afaL,0x6930855fL,0xcc07db95L,0xce746db1L,0x744e967dL,
X0xf16cf575L,0x8643e8b5L,0xf0eae38eL,0xe52de1d1L,0x6587dae0L,
X0x0c4b8121L,0x1c7ac567L,0xac0db20aL,0x36c3a812L,0x5b1a4514L,
X0xa9a3f868L,0xb9263baaL,0xcb3ce9d2L,0xe44fb1a4L,0x9221bc82L,
X0xb29390feL,0x6ab41863L,0x974a3e2eL,0x89f531c5L,0x255ca13eL,
X0x8b65d348L,0xec248f78L,0xd8fc16f0L,0x50ecdeeeL,0x09010792L,
X0x3c7d1fb2L,0xeba5426bL,0x847b417aL,0x468b40d9L,0x8dc4e680L,
X0x7cc1f391L,0x2f1eb086L,0x6e5baa6aL,0xe0b395daL,0xe31b2cf6L,
X0xd9690b0dL,0x729ec464L,0x38403ddeL,0x610b80a2L,0x5cf433abL,
X0xb0785fc4L,0xd512e4c6L,0xbbb7d699L,0x5a86591bL,0x10cf5376L,
X0x12bf9f4bL,0x980fbaa1L,0x992a4e70L,0x20fa7ae7L,0xf7996ebbL,
X0xc918a2beL,0x82de74f2L,0xad54209bL,0xf66b4d74L,0x1fc5b771L,
X0x169d9229L,0x887761dfL,0x00b667d5L,0xdb425e59L,0xb72f2844L,
X0x9b0ac1f5L,0x9c737e3aL,0x2b85476cL,0x6722add6L,0x44a63297L,
X0x0d688cedL
X    /* End   of S Box 13  */  },
X
X
X {  /* Start of S Box 14  */
X
X0xabc59484L,0x4107778aL,0x8ad94c6fL,0xfe83df90L,0x0f64053fL,
X0xd1292e9dL,0xc5744356L,0x8dd1abb4L,0x4c4e7667L,0xfb4a7fc1L,
X0x74f402cbL,0x70f06afdL,0xa82286f2L,0x918dd076L,0x7a97c5ceL,
X0x48f7bde3L,0x6a04d11dL,0xac243ef7L,0x33ac10caL,0x2f7a341eL,
X0x5f75157aL,0xf4773381L,0x591c870eL,0x78df8cc8L,0x22f3adb0L,
X0x251a5993L,0x09fbef66L,0x796942a8L,0x97541d2eL,0x2373daa9L,
X0x1bd2f142L,0xb57e8eb2L,0xe1a5bfdbL,0x7d0efa92L,0xb3442c94L,
X0xd2cb6447L,0x386ac97eL,0x66d61805L,0xbdada15eL,0x11bc1aa7L,
X0x14e9f6eaL,0xe533a0c0L,0xf935ee0aL,0x8fee8a04L,0x810d6d85L,
X0x7c68b6d6L,0x4edc9aa2L,0x956e897dL,0xed87581aL,0x264be9d7L,
X0xff4ddb29L,0x823857c2L,0xe005a9a0L,0xf1cc2450L,0x6f9951e1L,
X0xaade2310L,0xe70c75f5L,0x83e1a31fL,0x4f7dde8eL,0xf723b563L,
X0x368e0928L,0x86362b71L,0x21e8982dL,0xdfb3f92bL,0x44676352L,
X0x99efba31L,0x2eab4e1cL,0xfc6ca5e7L,0x0ebe5d4eL,0xa0717d0cL,
X0xb64f8199L,0x946b31a1L,0x5656cbc6L,0xcffec3efL,0x622766c9L,
X0xfa211e35L,0x52f98b89L,0x6d01674bL,0x4978a802L,0xf651f701L,
X0x15b0d43dL,0xd6ff4683L,0x3463855fL,0x672ba29cL,0xbc128312L,
X0x4626a70dL,0xc8927a5aL,0xb8481cf9L,0x1c962262L,0xa21196baL,
X0xbaba5ee9L,0x5bb162d0L,0x69943bd1L,0x0c47e35cL,0x8cc9619aL,
X0xe284d948L,0x271bf264L,0xc27fb398L,0x4bc70897L,0x60cf202cL,
X0x7f42d6aaL,0xa5a13506L,0x5d3e8860L,0xcea63d3cL,0x63bf0a8fL,
X0xf02e9efaL,0xb17b0674L,0xb072b1d3L,0x06e5723bL,0x3737e436L,
X0x24aa49c7L,0x0ded0d18L,0xdb256b14L,0x58b27877L,0xecb49f54L,
X0x6c40256aL,0x6ea92ffbL,0x3906aa4cL,0xc9866fd5L,0x4549323eL,
X0xa7b85fabL,0x1918cc27L,0x7308d7b5L,0x1e16c7adL,0x71850b37L,
X0x3095fd78L,0xa63b70e6L,0xd880e2aeL,0x3e282769L,0xa39ba6bcL,
X0x98700fa3L,0xf34c53e8L,0x288af426L,0xb99d930fL,0xf5b99df1L,
X0xe9d0c8cfL,0x5ac8405dL,0x50e7217bL,0x511fbbbeL,0x2ca2e639L,
X0xc020301bL,0x356dbc00L,0x8e43ddb9L,0x4d327b4aL,0xf20ff3edL,
X0x1dbb29bdL,0x43d44779L,0xa1b68f70L,0x6114455bL,0xe63d280bL,
X0x6bf6ff65L,0x10fc39e5L,0x3dae126eL,0xc1d7cf11L,0xcb60b795L,
X0x1789d5b3L,0x9bca36b7L,0x08306075L,0x84615608L,0x8b3a0186L,
X0xe88fbecdL,0x7ba47c4dL,0x2de44dacL,0x653fe58dL,0xcca0b968L,
X0xd7fa0e72L,0x93901780L,0x1f2c26ccL,0xae595b6bL,0xa9ecea9bL,
X0xe3dbf8c4L,0x319cc130L,0x12981196L,0x01a3a4deL,0x32c454b6L,
X0x755bd817L,0x3cd871e4L,0xa48bb8daL,0x02fdec09L,0xfd2dc2e2L,
X0x9e578088L,0x9a9f916dL,0x4065fe6cL,0x1853999eL,0xc7793f23L,
X0xdc1016bbL,0x969355ffL,0x7ef292f6L,0xcdce4adcL,0x05e24416L,
X0x85c16c46L,0xd441d37fL,0x57bd6855L,0x8746f54fL,0x9ca773dfL,
X0x770bae22L,0x54828413L,0xb75e4b19L,0x04c35c03L,0xbf7cca07L,
X0x2955c4ddL,0x721db041L,0xb2394f33L,0x03f51387L,0x89b73c9fL,
X0x0b1737f3L,0x07e69024L,0x9231d245L,0x76193861L,0x88159c15L,
X0xdeb552d9L,0xd9767e40L,0x20c6c0c3L,0x4281977cL,0xf8afe1e0L,
X0xd32a0751L,0x3fc27432L,0xddf1dcc5L,0x68581f34L,0x3bcd5025L,
X0x0091b2eeL,0x4aeb6944L,0x1602e743L,0xea09eb58L,0xef0a2a8bL,
X0x641e03a5L,0xeb50e021L,0x5c8ccef8L,0x802ff0b8L,0xd5e3edfeL,
X0xc4dd1b49L,0x5334cd2aL,0x13f82d2fL,0x47450c20L,0x55dafbd2L,
X0xbec0c6f4L,0xb45d7959L,0x3ad36e8cL,0x0aa8ac57L,0x1a3c8d73L,
X0xe45aafb1L,0x9f664838L,0xc6880053L,0xd0039bbfL,0xee5f19ebL,
X0xca0041d8L,0xbbea3aafL,0xda628291L,0x9d5c95d4L,0xadd504a6L,
X0xc39ab482L,0x5e9e14a4L,0x2be065f0L,0x2a13fc3aL,0x9052e8ecL,
X0xaf6f5afcL
X    /* End   of S Box 14  */  },
X
X
X {  /* Start of S Box 15  */
X
X0x519aa8b5L,0xbb303da9L,0xe00e2b10L,0xdfa6c1dbL,0x2e6b952eL,
X0xee10dc23L,0x37936d09L,0x1fc42e92L,0x39b25a9fL,0x13ff89f4L,
X0xc8f53feaL,0x18500bc7L,0x95a0379dL,0x98f751c2L,0x2289c42fL,
X0xa21e4098L,0x6f391f41L,0xf27e7e58L,0x0d0df887L,0x4b79d540L,
X0x8e8409aaL,0x71fe46f8L,0x688a9b29L,0x3f08b548L,0x84abe03aL,
X0x5e91b6c1L,0xfde4c2aeL,0x251d0e72L,0x92d4fee5L,0xf9371967L,
X0x9175108fL,0xe6e81835L,0x8c8cb8eeL,0xb55a67b3L,0xcef138ccL,
X0x8b256268L,0x00d815f5L,0xe8810812L,0x77826189L,0xea73267dL,
X0x19b90f8dL,0x45c33bb4L,0x82477056L,0xe1770075L,0x09467aa6L,
X0xa7c6f54aL,0x79768742L,0x61b86bcaL,0xd6644a44L,0xe33f0171L,
X0xc229fbcdL,0x41b08febL,0xd1903e30L,0x65ec9080L,0x563d6fbdL,
X0xf56da488L,0xebf64cd8L,0x4934426bL,0x7c8592fcL,0x6aca8cf2L,
X0x1cea111bL,0x3a57ee7aL,0xace11c0dL,0x9942d85eL,0xc4613407L,
X0xfa8e643bL,0x327fc701L,0x4ca9be82L,0x3352526dL,0x2c047f63L,
X0xf3a8f7ddL,0x1a4a98a8L,0x762ed4d1L,0x27c75008L,0xbdf497c0L,
X0x7a7b84dfL,0x315c28abL,0x801f93e3L,0xf19b0ca1L,0x8f14e46aL,
X0xe48ba333L,0x9605e625L,0xf03ecb60L,0x60385f2dL,0x902845baL,
X0x7f96d66fL,0x24bff05cL,0x2820730bL,0x947133cbL,0xd444828aL,
X0xb343f6f1L,0x0bef4705L,0x8da574f9L,0x01e25d6cL,0x1732793eL,
X0x4f0f7b27L,0x364b7117L,0xb2d1da77L,0xa6c5f1e9L,0x574ca5b1L,
X0x386a3076L,0xad6894d6L,0x1156d7faL,0xa48d1d9aL,0x4794c0afL,
X0x150c0aa0L,0x26d348acL,0x29fdeabeL,0xa5dede53L,0x81671e8eL,
X0x594ee3bfL,0xa96c56e6L,0x3426a726L,0xc5976579L,0xbc22e5e4L,
X0xc1006319L,0xdaafdd2aL,0xa1a1aa83L,0x3badd0e7L,0xc3b14981L,
X0xd770b155L,0xccd7c693L,0x42e944c5L,0x03e0064fL,0xca95b4efL,
X0x3dee81c3L,0xfbbcd98cL,0x1e07e15bL,0x667ce949L,0xe7d6773fL,
X0x21b6124bL,0x6b2a6ef7L,0xd3278a9cL,0x9a988304L,0x75d2ae9bL,
X0xfe49e2ffL,0x9bc24f46L,0x74cc2cf6L,0xa3139f36L,0x6c9ef35aL,
X0x9fc1dffeL,0x9e5facdcL,0xaadc8bbbL,0x5abdbc5fL,0x44b3b390L,
X0xf754efa7L,0x5fe3bdb7L,0x4e59c886L,0x06a4c984L,0xa0338878L,
X0xcd513cd7L,0x63ebd27eL,0x8aba80adL,0x50da144eL,0x5d9f4e97L,
X0x025b751cL,0x2d580200L,0xb6c05837L,0x580aa15dL,0x54022a6eL,
X0xb41a5415L,0x4863fab6L,0xb0b79957L,0x46d0d159L,0xdc2b8650L,
X0x20a7bb0cL,0x4a032974L,0xec8636a2L,0x8548f24cL,0xf6a2bf16L,
X0x1088f4b0L,0x0c2f3a94L,0x525dc396L,0x14065785L,0x2b4dca52L,
X0x08aeed39L,0xabedfc99L,0xb1dbcf18L,0x87f85bbcL,0xae3aff61L,
X0x433ccd70L,0x5b23cc64L,0x7b453213L,0x5355c545L,0x9318ec0aL,
X0x78692d31L,0x0a21693dL,0xd5666814L,0x05fb59d9L,0xc71985b2L,
X0x2abb8e0eL,0xcf6e6c91L,0xd9cfe7c6L,0xefe7132cL,0x9711ab28L,
X0x3ce52732L,0x12d516d2L,0x7209a0d0L,0xd278d306L,0x70fa4b7bL,
X0x1d407dd3L,0xdb0beba4L,0xbfd97621L,0xa8be21e1L,0x1b6f1b66L,
X0x30650ddaL,0xba7ddbb9L,0x7df953fbL,0x9d1c3902L,0xedf0e8d5L,
X0xb8741ae0L,0x0f240565L,0x62cd438bL,0xc616a924L,0xaf7a96a3L,
X0x35365538L,0xe583af4dL,0x73415eb8L,0x23176a47L,0xfc9ccee8L,
X0x7efc9de2L,0x695e03cfL,0xf8ce66d4L,0x88b4781dL,0x67dd9c03L,
X0x3e8f9e73L,0xc0c95c51L,0xbe314d22L,0x55aa0795L,0xcb1bb011L,
X0xe980fdc8L,0x9c62b7ceL,0xde2d239eL,0x042cadf3L,0xffdf04deL,
X0x5ce6a60fL,0xd8c831edL,0xb7b5b9ecL,0xb9cbf962L,0xe253b254L,
X0x0735ba1fL,0x16ac917fL,0xdd607c2bL,0x64a335c4L,0x40159a7cL,
X0x869222f0L,0x6ef21769L,0x839d20a5L,0xd03b24c9L,0xf412601eL,
X0x6d72a243L,0x0e018dfdL,0x89f3721aL,0xc94f4134L,0x2f992f20L,
X0x4d87253cL
X    /* End   of S Box 15  */  }
X};
X
X/* Note that the 32-bit word specified by snefru512_rotated[i][j][k]
X * is rotated right by i*8 bits. */
XSBOX snefru512_rotated[4][SBOXCOUNT];
X
Xstatic int havesetuphash = 0;
X
Xvoid snefru512_setup()
X{
X register int index;
X register int rotation;
X register int i;
X
X if (havesetuphash)
X   return;
X for (index = 0; index < SBOXCOUNT; index++)
X   for (rotation = 0; rotation < 4; rotation++)
X     for (i = 0; i < 256; i++)
X       snefru512_rotated[rotation][index][i] =
X         (snefru512_sboxes[index][i] >> (rotation * 8)) |
X         (snefru512_sboxes[index][i] << (32 - rotation * 8));
X havesetuphash = 1;
X}
X
X/*
X**  This routine is a specialized version of HashN.  It is optimized for
X**  speed, and assumes that the input is always 16 words long:  it hashes
X**  512 bits, hence its name.  You need not try to figure out this routine
X**  unless you wish to figure out a fast implementation of Snefru.
X*/
Xvoid snefru512(output,input,level)
Xsnefru512_word output[OUTPUTBLOCKSIZE];
Xsnefru512_word input[];
Xint level;
X{
X register snefru512_word        Z;
X register snefru512_word        *SBox0;
X register snefru512_word        *SBox1;
X register snefru512_word    B00, B01, B02, B03;
X register snefru512_word    B04, B05, B06, B07;
X register snefru512_word    B08, B09, B10, B11;
X register snefru512_word    B12, B13, B14, B15;
X int index;
X
X /* Initialize the block to be encrypted from the input.  In theory
X  * block<i> should be kept in register.  Not all compilers can do
X  * this, even when there are enough registers -- this will degrade
X  * performance significantly. */
X B00 = input[0];
X B01 = input[1];
X B02 = input[2];
X B03 = input[3];
X B04 = input[4];
X B05 = input[5];
X B06 = input[6];
X B07 = input[7];
X B08 = input[8];
X B09 = input[9];
X B10 = input[10];
X B11 = input[11];
X B12 = input[12];
X B13 = input[13];
X B14 = input[14];
X B15 = input[15];
X
X for (index = 0; index < 2 * level; index += 2) {
X   /* set up the base address for the two S-box pointers.  */
X   SBox0 = snefru512_rotated[0][index];
X   SBox1 = SBox0 + 256;
X
X   /* In the following unrolled code, the basic 'assembly language'
X    * block that is repeated is:
X    *    1    temp1 = shift(block<i>, shiftConstant)
X    *    2    temp2 = temp1 & 0x3FC
X    *    3    temp3 = S-box<0 or 1> + temp2
X    *    4    temp4 = *temp3
X    *    5    block<i-1> ^= temp4
X    *    6    block<i+1> ^= temp4
X    * STEP 1:  Simply shift the i'th 32-bit block to bring the 8-bit
X    * byte into the right position.  Note that we will also build-in a
X    * left-shift by two bits at this stage, to eliminate the left shift
X    * required later because we are indexing into an array of four-byte
X    * table entries.
X    * 
X    * STEP 1:  Mask off the desired eight bits.  Note that 0x3FC is
X    * simply 0xFF << 2.
X    * 
X    * STEP 1:  Use a normal integer add to compute the actual address
X    * of the S-box entry.  Note that one of two pointers is used, as
X    * appropriate.  Temp3 then holds the actual byte address of the
X    * desired S-box entry.
X    * 
X    * STEP 1:  Load the four-byte S-box entry.
X    * 
X    * STEPS 5 and 6:  XOR the loaded S-box entry with both the
X    * previous and the next 32-bit entries in the 'block' array.
X    * 
X    * Typical optimizing comilers might fail to put all the block<i>
X    * variables into registers. This can result in significant
X    * performance degradation. Also, most compilers will use a separate
X    * left-shift-by-2 after masking off the needed 8 bits, but the
X    * performance degradation caused by this oversight should be modest.
X    *
X    * Note added by DJB 5/15/91: Yeah, but Sbox* absolutely _have_
X    * to be in register variables! I've reorganized the declarations
X    * appropriately.
X    */
X   Z = SBox0[B00 & 0xFF]; B01 ^= Z; B15 ^= Z;
X   Z = SBox0[B01 & 0xFF]; B02 ^= Z; B00 ^= Z;
X   Z = SBox1[B02 & 0xFF]; B03 ^= Z; B01 ^= Z;
X   Z = SBox1[B03 & 0xFF]; B04 ^= Z; B02 ^= Z;
X   Z = SBox0[B04 & 0xFF]; B05 ^= Z; B03 ^= Z;
X   Z = SBox0[B05 & 0xFF]; B06 ^= Z; B04 ^= Z;
X   Z = SBox1[B06 & 0xFF]; B07 ^= Z; B05 ^= Z;
X   Z = SBox1[B07 & 0xFF]; B08 ^= Z; B06 ^= Z;
X   Z = SBox0[B08 & 0xFF]; B09 ^= Z; B07 ^= Z;
X   Z = SBox0[B09 & 0xFF]; B10 ^= Z; B08 ^= Z;
X   Z = SBox1[B10 & 0xFF]; B11 ^= Z; B09 ^= Z;
X   Z = SBox1[B11 & 0xFF]; B12 ^= Z; B10 ^= Z;
X   Z = SBox0[B12 & 0xFF]; B13 ^= Z; B11 ^= Z;
X   Z = SBox0[B13 & 0xFF]; B14 ^= Z; B12 ^= Z;
X   Z = SBox1[B14 & 0xFF]; B15 ^= Z; B13 ^= Z;
X   Z = SBox1[B15 & 0xFF]; B00 ^= Z; B14 ^= Z;
X
X   /* SBox0 = snefru512_rotated[2][index];  */
X   SBox0 += 2 * SBOXCOUNT * 256;
X   SBox1 = SBox0 + 256;
X
X   Z = SBox0[(B00 >> 16) & 0xFF]; B01 ^= Z; B15 ^= Z;
X   Z = SBox0[(B01 >> 16) & 0xFF]; B02 ^= Z; B00 ^= Z;
X   Z = SBox1[(B02 >> 16) & 0xFF]; B03 ^= Z; B01 ^= Z;
X   Z = SBox1[(B03 >> 16) & 0xFF]; B04 ^= Z; B02 ^= Z;
X   Z = SBox0[(B04 >> 16) & 0xFF]; B05 ^= Z; B03 ^= Z;
X   Z = SBox0[(B05 >> 16) & 0xFF]; B06 ^= Z; B04 ^= Z;
X   Z = SBox1[(B06 >> 16) & 0xFF]; B07 ^= Z; B05 ^= Z;
X   Z = SBox1[(B07 >> 16) & 0xFF]; B08 ^= Z; B06 ^= Z;
X   Z = SBox0[(B08 >> 16) & 0xFF]; B09 ^= Z; B07 ^= Z;
X   Z = SBox0[(B09 >> 16) & 0xFF]; B10 ^= Z; B08 ^= Z;
X   Z = SBox1[(B10 >> 16) & 0xFF]; B11 ^= Z; B09 ^= Z;
X   Z = SBox1[(B11 >> 16) & 0xFF]; B12 ^= Z; B10 ^= Z;
X   Z = SBox0[(B12 >> 16) & 0xFF]; B13 ^= Z; B11 ^= Z;
X   Z = SBox0[(B13 >> 16) & 0xFF]; B14 ^= Z; B12 ^= Z;
X   Z = SBox1[(B14 >> 16) & 0xFF]; B15 ^= Z; B13 ^= Z;
X   Z = SBox1[(B15 >> 16) & 0xFF]; B00 ^= Z; B14 ^= Z;
X
X
X   /* SBox0 = snefru512_rotated[1][index];  */
X   SBox0 -= SBOXCOUNT * 256;
X   SBox1 = SBox0 + 256;
X
X   Z = SBox0[B00 >> 24]; B01 ^= Z; B15 ^= Z;
X   Z = SBox0[B01 >> 24]; B02 ^= Z; B00 ^= Z;
X   Z = SBox1[B02 >> 24]; B03 ^= Z; B01 ^= Z;
X   Z = SBox1[B03 >> 24]; B04 ^= Z; B02 ^= Z;
X   Z = SBox0[B04 >> 24]; B05 ^= Z; B03 ^= Z;
X   Z = SBox0[B05 >> 24]; B06 ^= Z; B04 ^= Z;
X   Z = SBox1[B06 >> 24]; B07 ^= Z; B05 ^= Z;
X   Z = SBox1[B07 >> 24]; B08 ^= Z; B06 ^= Z;
X   Z = SBox0[B08 >> 24]; B09 ^= Z; B07 ^= Z;
X   Z = SBox0[B09 >> 24]; B10 ^= Z; B08 ^= Z;
X   Z = SBox1[B10 >> 24]; B11 ^= Z; B09 ^= Z;
X   Z = SBox1[B11 >> 24]; B12 ^= Z; B10 ^= Z;
X   Z = SBox0[B12 >> 24]; B13 ^= Z; B11 ^= Z;
X   Z = SBox0[B13 >> 24]; B14 ^= Z; B12 ^= Z;
X   Z = SBox1[B14 >> 24]; B15 ^= Z; B13 ^= Z;
X   Z = SBox1[B15 >> 24]; B00 ^= Z; B14 ^= Z;
X
X
X   /* SBox0 = snefru512_rotated[3][index];  */
X   SBox0 += 2 * SBOXCOUNT * 256;
X   SBox1 = SBox0 + 256;
X
X   Z = SBox0[(B00 >> 8) & 0xFF]; B01 ^= Z; B15 ^= Z;
X   Z = SBox0[(B01 >> 8) & 0xFF]; B02 ^= Z; B00 ^= Z;
X   Z = SBox1[(B02 >> 8) & 0xFF]; B03 ^= Z; B01 ^= Z;
X   Z = SBox1[(B03 >> 8) & 0xFF]; B04 ^= Z; B02 ^= Z;
X   Z = SBox0[(B04 >> 8) & 0xFF]; B05 ^= Z; B03 ^= Z;
X   Z = SBox0[(B05 >> 8) & 0xFF]; B06 ^= Z; B04 ^= Z;
X   Z = SBox1[(B06 >> 8) & 0xFF]; B07 ^= Z; B05 ^= Z;
X   Z = SBox1[(B07 >> 8) & 0xFF]; B08 ^= Z; B06 ^= Z;
X   Z = SBox0[(B08 >> 8) & 0xFF]; B09 ^= Z; B07 ^= Z;
X   Z = SBox0[(B09 >> 8) & 0xFF]; B10 ^= Z; B08 ^= Z;
X   Z = SBox1[(B10 >> 8) & 0xFF]; B11 ^= Z; B09 ^= Z;
X   Z = SBox1[(B11 >> 8) & 0xFF]; B12 ^= Z; B10 ^= Z;
X   Z = SBox0[(B12 >> 8) & 0xFF]; B13 ^= Z; B11 ^= Z;
X   Z = SBox0[(B13 >> 8) & 0xFF]; B14 ^= Z; B12 ^= Z;
X   Z = SBox1[(B14 >> 8) & 0xFF]; B15 ^= Z; B13 ^= Z;
X   Z = SBox1[(B15 >> 8) & 0xFF]; B00 ^= Z; B14 ^= Z;
X }
X
X output[0] = input[0] ^ B15;
X output[1] = input[1] ^ B14;
X output[2] = input[2] ^ B13;
X output[3] = input[3] ^ B12;
X output[4] = input[4] ^ B11;
X output[5] = input[5] ^ B10;
X output[6] = input[6] ^ B09;
X output[7] = input[7] ^ B08;
X}
END-of-snefru512.c
echo x - snefru.1
sed 's/^X//' >snefru.1 << 'END-of-snefru.1'
X.TH snefru 1
X.SH NAME
Xsnefru \- the Xerox Secure Hash Function, version 2.5a
X.SH SYNTAX
X.B snefru
X.SH DESCRIPTION
X.B snefru
Xcalculates a cryptographically strong one-way hash of its input.
X
X.B snefru
Xconforms to the
X.I summain
Xinterface.
XSee
X.B summain(1)
Xfor a description of
X.B snefru\fP's
Xoptions.
X.SH COMPATIBILITY
XThis is a clone of
XRalph Merkle's
X.B snefru
Xprogram.
XIf you find two inputs which produce the same output,
Xplease
Xverify first that
XMerkle's version produces the same output,
Xand then contact
Xhim at
Xmerkle@parc.xerox.com.
X.SH VERSION
Xsnefru 1.2, 7 July 1993.
X.SH AUTHOR
XMost of the work is done in
Xthe
X.B snefrufile
Xand
X.B snefru512
Xlibraries,
Xwhich are
Xderived from the Xerox Secure Hash Function
Xas implemented by Merkle.
XWrapper code
Xplaced into the public domain by Daniel J. Bernstein.
X.SH "SEE ALSO"
Xsummain(1),
Xsnefrufile(3),
Xsnefru512(3)
END-of-snefru.1
echo x - snefru.c
sed 's/^X//' >snefru.c << 'END-of-snefru.c'
X#include <stdio.h>
X#include "snefrufile.h"
X
Xstatic unsigned char h[SNEFRUFILE_HASHLEN];
Xstatic unsigned char input[1024];
X
Xvoid sum(fi,out)
XFILE *fi;
Xchar *out;
X{
X snefrufile s;
X int i;
X char *x;
X
X snefrufile_clear(&s);
X while (i = fread(input,1,sizeof(input),fi))
X   snefrufile_addn(&s,input,i);
X snefrufile_hash(&s,h);
X
X x = out;
X for (i = 0;i < SNEFRUFILE_HASHLEN;++i)
X  {
X   if (!(i & 3))
X     *x++ = ' ';
X   sprintf(x,"%02x",(int) h[i]);
X   x += strlen(x);
X  }
X *x = 0;
X}
END-of-snefru.c
echo x - md5.1
sed 's/^X//' >md5.1 << 'END-of-md5.1'
X.TH md5 1
X.SH NAME
Xmd5 \- the RSADSI MD5 Message-Digest Algorithm
X.SH SYNTAX
X.B md5
X.SH DESCRIPTION
X.B md5
Xcalculates a cryptographically strong one-way hash of its input.
X
X.B md5
Xconforms to the
X.I summain
Xinterface.
XSee
X.B summain(1)
Xfor a description of
X.B md5\fP's
Xoptions.
X.SH VERSION
Xmd5 1.0, 7 July 1993.
X.SH AUTHOR
XMost of the work is done in
Xthe
X.B md5file
Xlibrary,
Xwhich is derived from the
XRSADSI MD5 Message-Digest Algorithm
Xdesigned by
XRon Rivest.
XWrapper code
Xplaced into the public domain by Daniel J. Bernstein.
X.SH "SEE ALSO"
Xsummain(1),
Xmd5file(3)
END-of-md5.1
echo x - md5.c
sed 's/^X//' >md5.c << 'END-of-md5.c'
X#include <stdio.h>
X#include "md5file.h"
X
Xstatic unsigned char h[MD5FILE_HASHLEN];
Xstatic unsigned char input[1024];
X
Xvoid sum(fi,out)
XFILE *fi;
Xchar *out;
X{
X md5file s;
X int i;
X char *x;
X
X md5file_clear(&s);
X while (i = fread(input,1,sizeof(input),fi))
X   md5file_addn(&s,input,i);
X md5file_hash(&s,h);
X
X x = out;
X for (i = 0;i < MD5FILE_HASHLEN;++i)
X  {
X   sprintf(x,"%02x",(int) h[i]);
X   x += strlen(x);
X  }
X *x = 0;
X}
END-of-md5.c
echo x - cksum.1
sed 's/^X//' >cksum.1 << 'END-of-cksum.1'
X.TH cksum 1
X.SH NAME
Xcksum \- calculate a CRC-32 of the input
X.SH SYNTAX
X.B cksum
X.SH DESCRIPTION
X.B cksum
Xcalculates a CRC-32 checksum of its input.
X
X.B cksum
Xconforms to the
X.I summain
Xinterface.
XSee
X.B summain(1)
Xfor a description of
X.B cksum\fP's
Xoptions.
X.SH COMPATIBILITY
XThis program is intended to
Xbe backwards compatible with
Xthe POSIX
X.B cksum
Xprogram.
X.SH VERSION
Xcksum 1.0, 13 July 1993.
X.SH AUTHOR
XMost of the work is done in
Xthe
X.B crc32file
Xlibrary,
Xwhich is
Xprimarily code written by
XGary S. Brown.
XWrapper code
Xplaced into the public domain by Daniel J. Bernstein.
X.SH "SEE ALSO"
Xsummain(1),
Xcrc32file(3)
END-of-cksum.1
echo x - cksum.c
sed 's/^X//' >cksum.c << 'END-of-cksum.c'
X#include <stdio.h>
X#include "crc32file.h"
X
Xstatic unsigned char h[CRC32FILE_HASHLEN];
Xstatic unsigned char input[1024];
X
Xvoid sum(fi,out)
XFILE *fi;
Xchar *out;
X{
X crc32file s;
X int i;
X long len;
X
X crc32file_clear(&s);
X len = 0;
X while (i = fread(input,1,sizeof(input),fi))
X  {
X   crc32file_addn(&s,input,i);
X   len += i;
X  }
X crc32file_hash(&s,h);
X
X sprintf(out,"%10lu %8lu"
X   ,h[0] + 256 * (h[1] + 256 * (h[2] + 256 * (unsigned long) h[3]))
X   ,len
X   );
X}
END-of-cksum.c
echo x - fptocksum.c
sed 's/^X//' >fptocksum.c << 'END-of-fptocksum.c'
X#include <stdio.h>
X#include "fprintfile.h"
X
Xchar line[200];
Xunsigned char h[57];
X
Xmain()
X{
X int i;
X
X while (fgets(line,sizeof(line),stdin))
X  {
X   if (!(i = fingerprintfile_scan(line,h)))
X     printf("bad fingerprint\n");
X   else
X     printf("%10lu %8lu%s"
X       ,h[48] + 256 * (h[49] + 256 * (h[50] + 256 * (unsigned long) h[51]))
X       ,h[52] + 256 * (h[53] + 256 * (h[54] +
X          256 * (h[55] + 256 * (unsigned long) h[56])))
X       ,line + i
X       );
X  }
X exit(0);
X}
END-of-fptocksum.c
echo x - fptomd5.c
sed 's/^X//' >fptomd5.c << 'END-of-fptomd5.c'
X#include <stdio.h>
X#include "fprintfile.h"
X
Xchar line[200];
Xunsigned char h[57];
X
Xmain()
X{
X int i;
X int len;
X
X while (fgets(line,sizeof(line),stdin))
X  {
X   if (!(len = fingerprintfile_scan(line,h)))
X     printf("bad fingerprint\n");
X   else
X    {
X     for (i = 32;i < 48;++i) printf("%02x",(int) h[i]);
X     printf("%s",line + len);
X    }
X  }
X exit(0);
X}
END-of-fptomd5.c
echo x - fptosnefru.c
sed 's/^X//' >fptosnefru.c << 'END-of-fptosnefru.c'
X#include <stdio.h>
X#include "fprintfile.h"
X
Xchar line[200];
Xunsigned char h[57];
X
Xmain()
X{
X int i;
X int len;
X
X while (fgets(line,sizeof(line),stdin))
X  {
X   if (!(len = fingerprintfile_scan(line,h)))
X     printf("bad fingerprint\n");
X   else
X    {
X     for(i=0;i<32;++i){if(!(i&3))printf(" "); printf("%02x",(int) h[i]);}
X     printf("%s",line + len);
X    }
X  }
X exit(0);
X}
END-of-fptosnefru.c
echo x - fingerprint.1
sed 's/^X//' >fingerprint.1 << 'END-of-fingerprint.1'
X.TH fingerprint 1
X.SH NAME
Xfingerprint \- the universal fingerprint program
X.SH SYNTAX
X.B fingerprint
X.SH DESCRIPTION
X.B fingerprint
Xcalculates a cryptographically strong one-way hash of its input.
X
X.B fingerprint
Xconforms to the
X.I summain
Xinterface.
XSee
X.B summain(1)
Xfor a description of
X.B fingerprint\fP's
Xoptions.
X.SH VERSION
Xfingerprint 1.0, 7 July 1993.
X.SH "SEE ALSO"
Xsummain(1)
END-of-fingerprint.1
echo x - fingerprint.c
sed 's/^X//' >fingerprint.c << 'END-of-fingerprint.c'
X#include <stdio.h>
X#include "fprintfile.h"
X
Xstatic unsigned char h[FINGERPRINTFILE_HASHLEN];
Xstatic unsigned char input[1024];
X
Xvoid sum(fi,out)
XFILE *fi;
Xchar *out;
X{
X fingerprintfile f;
X int i;
X
X fingerprintfile_clear(&f);
X while (i = fread(input,1,sizeof(input),fi))
X   fingerprintfile_addn(&f,input,i);
X fingerprintfile_hash(&f,h);
X
X out[fingerprintfile_fmt(out,h)] = 0;
X}
END-of-fingerprint.c
echo x - summain.1
sed 's/^X//' >summain.1 << 'END-of-summain.1'
X.TH summain 1
X.SH NAME
Xsummain \- generic checksum program interface
X.SH SYNTAX
X.I summain
X[
X.B \-cgfFiIbB\fP
X] [
X\fIfile ...\fP
X]
X.SH DESCRIPTION
X.I summain
Xis a generic interface for programs which compute checksums.
XThere is no actual
X.B summain
Xprogram.
XInstead, several other programs,
Xsuch as
X.B cksum
Xand
X.B fingerprint\fP,
Xall conform to
Xthe
X.I summain
Xinterface.
X
X.I summain
Xcomputes checksums for some number of files.
XNormally it takes the filenames as arguments,
Xopens the files in binary mode,
Xcomputes their checksums,
Xand prints the checksums (with filenames) on standard output.
X
XA checksum never contains the characters tab, newline, or null.
XOther features of a checksum depend on the particular program.
X
X.I summain
Xfollows the
X.B getopt
Xstandard.
XIts options are summarized here.
X.TP
X.B \-b
XOpen files in binary mode (default).
X.TP
X.B \-B
XOpen files in text mode.
X.TP
X.B \-i
XRead filenames from input, and ignore any filename arguments.
X.TP
X.B \-I
XUse arguments as filenames (default).
XIf no arguments are given,
X.I summain
Xreads the standard input as a file.
XOtherwise it ignores
Xthe input.
X.TP
X.B \-f
XWhen the
X.B \-i
Xoption is in effect,
Xread input lines with the
Xsame format as the usual output
Xof
X.I summain\fP.
XIn other words, look for the first tab on each input line,
Xand use the filename following that tab.
X.TP
X.B \-F
XWhen the
X.B \-i
Xoption is in effect,
Xread filenames as entire input lines (default).
X.TP
X.B \-g
XGenerate checksums (default).
X.I summain
Xwill print each checksum, followed by a tab and the
Xname of the file,
Xas a separate line on standard output.
XThe checksum of the standard input is printed with a tab
Xbut no filename.
X.TP
X.B \-c
XCheck checksums.
XThis option forces
X.B \-fi\fP.
X.I summain
Xwill read any number of input lines,
Xeach containing a purported checksum, a tab, and a filename.
X.I summain
Xwill open each file, compute its checksum, and compare the
Xchecksum to the purported checksum.
X.SH "EXIT VALUE"
X0 normally.
X1 for usage messages.
X2 if a file could not be opened for reading.
X3 with option
X.B \-c
Xif any checksums failed to match.
X(Exit value 3 overrides exit value 2.)
X.SH BUGS
XNone known.
X.SH VERSION
Xsummain version 0.9, 13 July 1993.
X.SH AUTHOR
XPlaced into the public domain by Daniel J. Bernstein.
X.SH "SEE ALSO"
X.B cksum(1)\fP,
X.B fingerprint(1)\fP,
X.B md5(1)\fP,
X.B snefru(1)\fP
END-of-summain.1
echo x - summain.c
sed 's/^X//' >summain.c << 'END-of-summain.c'
X#include <stdio.h>
X#include <errno.h>
Xextern int errno;
X#include "getopt.h"
X
X#define TAB '	' /*XXX*/
X
Xint flagcheck = 0;
Xint flagin = 0;
Xint flaghin = 0;
Xint flagbinary = 1;
X
Xint flagallmatch = 1;
Xint flagreaderr = 0;
X
Xchar *oldhash; /* defined for the duration of doit, if flagcheck */
X
Xvoid doit(fi,fn)
XFILE *fi;
Xchar *fn;
X{
X static char out[100];
X
X sum(fi,out);
X
X if (flagcheck)
X  {
X   if (strcmp(oldhash,out))
X    {
X     fprintf(stderr,"%s: warning: %s hash does not match\n"
X       ,optprogname,fn);
X     flagallmatch = 0;
X    }
X  }
X else
X  {
X   fputs(out,stdout);
X   putchar(TAB);
X   puts(fn);
X  }
X}
X
Xvoid handle(x)
Xchar *x;
X{
X FILE *fi;
X
X fi = fopen(x,flagbinary ? "rb" : "r");
X if (!fi)
X  {
X   int errnobak;
X   errnobak = errno;
X   fprintf(stderr,"%s: warning: cannot open %s for "
X     ,optprogname,x);
X   errno = errnobak;
X   perror("reading");
X   flagreaderr = 1;
X  }
X else
X  {
X   doit(fi,x);
X   fclose(fi);
X  }
X}
X
Xchar line[1000];
X
Xmain(argc,argv)
Xint argc;
Xchar **argv;
X{
X int opt;
X
X while ((opt = getopt(argc,argv,"cgfFiIbB")) != opteof)
X   switch(opt)
X    {
X     case 'c': flagcheck = 1; break;
X     case 'g': flagcheck = 0; break;
X     case 'f': flaghin = 1; break;
X     case 'F': flaghin = 0; break;
X     case 'i': flagin = 1; break;
X     case 'I': flagin = 0; break;
X     case 'b': flagbinary = 1; break;
X     case 'B': flagbinary = 0; break;
X     case '?': default: exit(1);
X    }
X argc -= optind;
X argv += optind;
X
X if (flagcheck)
X   flagin = flaghin = 1;
X
X if (flagin)
X   while (fgets(line,sizeof(line),stdin))
X    {
X     char *x;
X     int len;
X     x = line;
X     if (flaghin)
X      {
X       while (*x && (*x != '\n') && (*x != TAB)) ++x;
X       if (*x == TAB) *x++ = 0;
X      }
X     if (!*x) continue; /*XXX*/
X     len = strlen(x);
X     if (x[len - 1] == '\n') x[len - 1] = 0;
X     if (!*x) continue; /*XXX*/
X     if (flagcheck)
X       oldhash = line;
X     handle(x);
X    }
X else
X   if (*argv)
X     while (*argv)
X      {
X       handle(*argv);
X       ++argv;
X      }
X   else
X     doit(stdin,""); /*XXX*/
X
X if (!flagallmatch)
X   exit(3);
X if (flagreaderr)
X   exit(2);
X exit(0);
X}
END-of-summain.c
echo x - getopt.3
sed 's/^X//' >getopt.3 << 'END-of-getopt.3'
X.TH getopt 3
X.SH NAME
Xgetopt \- get option character from command line
X.SH SYNTAX
X.B #include <getopt.h>
X
Xchar *\fBoptarg\fP;
X.br
Xint \fBoptind\fP;
X.br
Xint \fBoptpos\fP;
X.br
Xint \fBopteof\fP;
X.br
Xint \fBoptproblem\fP;
X.br
Xchar *\fBoptprogname\fP;
X.br
Xint \fBopterr\fP;
X
Xint \fBgetopt(\fP\fIargc,argv,opts\fR\fB)\fP;
X
Xint \fIargc\fR;
X.br
Xchar **\fIargv\fR;
X.br
Xchar *\fIopts\fR;
X.SH DESCRIPTION
XThis is a clone version of
Xthe standard
X.B getopt
Xlibrary,
Xbuilt on top of
X.BR subgetopt(3) .
X
XSee
X.B subgetopt(3)
Xfor a detailed description of
X.B getopt
Xprocessing.
XThe main difference between
X.B getopt
Xand
X.B subgetopt
Xis that
X.B getopt
Xprints error messages
Xin case of problems.
XTo turn off these error messages, set
X.B opterr
X(default nonzero)
Xto zero.
X
XThis clone version of
X.B getopt
Xalso provides an
X.B optprogname
Xvariable.
XThere are two uses for this variable:
X
X(1)
XBy default
X.B optprogname
Xis null.
XWhen
X.B getopt
Xsees this,
Xit
Xattempts to initialize
X.B optprogname
Xfrom
X.IR argv\fB[0] ,
Xstripping the directory name.
XThe calling program can use
X.B optprogname
Xafter calling
X.B getopt
Xat least once.
XThis is appropriate if the name of the program should be
Xdetermined from its command line.
X
X(2)
X.B getopt
Xprints
X.B optprogname
Xat the beginning
Xof any error messages.
XSo the calling program can,
Xbefore calling
X.BR getopt ,
Xinitialize
X.B optprogname
Xas desired.
XThis is appropriate if the name of the program should not be
Xdetermined from its command line.
X.SH "COMPATIBILITY"
XOld versions of
X.B getopt
Xdo not include
X.BR opterr .
X.BR optpos ,
X.BR opteof ,
X.BR optproblem ,
Xand
X.B optprogname
Xare specific to this clone version of
X.BR getopt .
X
XMany features of this clone version of
X.B getopt
Xare poorly defined, if available at all,
Xin most versions of
X.BR getopt .
XFor example, the standard
X.B getopt
Xinterface does not define
X.B optind
Xuntil the end of the option list.
XAnd
X.B optarg
Xis not defined
Xunless
X.B getopt
Xhas just returned
Xan option which takes an argument.
XIn this clone version,
X.B optind
Xand
X.B optpos
Xalways indicate the next character to be read,
Xand
X.B optarg
Xis null whenever
Xthe current option does not take an argument.
XSee
X.B subgetopt(3)
Xfor precise definitions of the parsing procedure.
X
XWhen it reaches the end of the option list,
Xthis version of
X.B getopt
Xalways returns
X.BR opteof ,
Xwhich is the same as
X.BR subgetoptdone ,
Xwhich is initialized to
X.BR SUBGETOPTDONE ,
Xwhich is defined as \-1.
XThe standard behavior is to return
XEOF
Xfrom
X.B stdio(3).
XThis is incompatible
Xon any weird machine where
XEOF is different from \-1.
XThe calling program could set
X.B opteof
Xto EOF to imitate the standard behavior.
X
XLike most versions of
X.BR getopt ,
Xthis clone version allows, but does not demand, that
Xoption arguments be
Xseparated from the option by whitespace, i.e., be
Xin the next command-line argument.
X
XSome versions of
X.B getopt
Xprovide an
X.B optopt
Xvariable.
X.B optopt
Xis incompatible across systems:
Xfor example,
XGNU
X.B getopt
Xuses it the same way that this clone version uses
X.BR optproblem ,
Xwhile
XBSD
X.B getopt
Xuses it to
Xindicate the last option character returned by
X.BR getopt .
XThis clone version does not provide
X.BR optopt .
XThe use of
X.B optopt
Xis strongly discouraged.
X
XSome versions of
X.B getopt
Xdo not recognize a double hyphen as the end of arguments.
XThis version allows a double hyphen, or in fact any argument beginning
Xwith two hyphens.
X
XA lone hyphen is always recognized as the end of arguments.
XSome versions of
X.B getopt
Xallow lone hyphens as options.
XThis practice is wrong and is strongly discouraged.
X.SH "SYNTAX NOTE"
X.B getopt
Xis actually a macro abbreviation for
X.BR getoptmine .
XThe external
X.B opterr
Xand
X.B optprogname
Xvariables
Xare macros for
X.B getopterr
Xand
X.BR getoptprogname .
XAll the other
X.B opt
Xvariables are macros
Xfor
X.BR subgetopt .
XThese macros are defined in
X.BR <getopt.h> ,
Xunless
X.B GETOPTNOSHORT
Xis defined.
XFurther macros are defined in
X.BR <subgetopt.h> ,
Xwhich is included by
X.BR <getopt.h> ,
Xunless
X.B SUBGETOPTNOSHORT
Xis defined.
X.SH VERSION
Xgetopt version 1.9, 931129.
X.SH AUTHOR
XPlaced into the public domain by Daniel J. Bernstein.
END-of-getopt.3
echo x - getopt.h
sed 's/^X//' >getopt.h << 'END-of-getopt.h'
X#ifndef GETOPT_H
X#define GETOPT_H
X
X#ifndef GETOPTNOSHORT
X#define getopt getoptmine
X#define optarg subgetoptarg
X#define optind subgetoptind
X#define optpos subgetoptpos
X#define opterr getopterr
X#define optproblem subgetoptproblem
X#define optprogname getoptprogname
X#define opteof subgetoptdone
X#endif
X
X#include "subgetopt.h"
X
Xextern int getoptmine();
Xextern int getopterr;
Xextern char *getoptprogname;
X
X#endif
END-of-getopt.h
echo x - getopt.c
sed 's/^X//' >getopt.c << 'END-of-getopt.c'
X/* getopt.c, getopt.h: (yet another) improved getopt clone, outer layer
XDaniel J. Bernstein, djb@silverton.berkeley.edu.
XDepends on subgetopt.h.
XRequires stdio.
X931129: Rewrote in terms of subgetopt.
XNo known patent problems.
X
XDocumentation in getopt.3.
X*/
X
X#include <stdio.h>
X#define GETOPTNOSHORT
X#include "getopt.h"
X#define SUBGETOPTNOSHORT
X#include "subgetopt.h"
X
X#define getopt getoptmine
X#define optind subgetoptind
X#define opterr getopterr
X#define optproblem subgetoptproblem
X#define optprogname getoptprogname
X
Xint opterr = 1;
Xchar *optprogname = 0;
X
Xint getopt(argc,argv,opts)
Xint argc;
Xchar **argv;
Xchar *opts;
X{
X int c;
X char *s;
X
X if (!optprogname)
X  {
X   optprogname = *argv;
X   if (!optprogname) /* oh boy */
X     optprogname = ""; /*XXX*/
X   for (s = optprogname;*s;++s)
X     if (*s == '/')
X       optprogname = s + 1;
X  }
X c = subgetopt(argc,argv,opts);
X if (opterr)
X   if (c == '?')
X     if (argv[optind] && (optind < argc))
X       fprintf(stderr,"%s: illegal option -- %c\n",optprogname,optproblem);
X     else
X       fprintf(stderr,"%s: option requires an argument -- %c\n"
X         ,optprogname,optproblem);
X return c;
X}
END-of-getopt.c
echo x - subgetopt.3
sed 's/^X//' >subgetopt.3 << 'END-of-subgetopt.3'
X.TH subgetopt 3
X.SH NAME
Xsubgetopt \- get option character from command line
X.SH SYNTAX
X.B #include <subgetopt.h>
X
Xchar *\fBsgoptarg\fP;
X.br
Xint \fBsgoptind\fP;
X.br
Xint \fBsgoptpos\fP;
X.br
Xint \fBsgoptdone\fP;
X.br
Xint \fBsgoptproblem\fP;
X
Xint \fBsgopt(\fP\fIargc,argv,opts\fR\fB)\fP;
X
Xint \fIargc\fR;
X.br
Xchar **\fIargv\fR;
X.br
Xchar *\fIopts\fR;
X.SH DESCRIPTION
X.B sgopt
Xreturns the next valid command-line option character
Xfrom
X.IR argv .
X
XValid option characters are listed in the
X.I opts
Xstring.
X.I opts
Xmay be empty.
XA character in
X.I opts
Xmay be followed by a colon,
Xin which case it
Xtakes an
X.I option argument\fR.
XAvoid using the characters ?, :, and \- as option characters.
X
XBelow
X.I option argument
Xis abbreviated
Xas
X.I optarg
Xand
X.I command-line argument
Xis abbreviated as
X.IR cmdarg .
X
XOptions are listed in cmdargs which begin with
Xa minus sign.
XSeveral options which do not take optargs may be combined
Xinto one cmdarg.
X
XAn option which takes an optarg may be handled in two ways.
XIf it appears at the very end of a cmdarg,
Xthen the entire next cmdarg is the optarg.
XBut if there are any characters in the cmdarg
Xafter the option character,
Xthen those characters form the optarg.
XThe optarg is returned in
X.BR sgoptarg .
XNext time
X.B sgopt
Xlooks at the cmdarg which follows the optarg.
X
XIf a cmdarg does not begin with a hyphen,
Xor if it is a lone hyphen not followed by any characters,
Xor if it begins with two hyphens,
Xthen it terminates option processing,
Xand
X.B sgopt
Xreturns an appropriate code.
XIf there are two hyphens,
X.B sgopt
Xwill advance attention to the next cmdarg,
Xso it can be called again to read further options.
X.SH "PROPER USAGE"
X.B sgoptproblem
Xshould be used only when
X.B sgopt
Xreturns ?.
X.B sgoptind
Xand
X.B sgoptpos
Xare defined all the time.
X.B sgoptarg
Xis defined all the time;
Xit is null unless
X.B sgopt
Xhas just returned an option with optarg.
X
X.B sgopt
Xis typically used as follows.
X
X.EX
X#include <subgetopt.h>
X
Xmain(argc,argv) int argc; char **argv; { int opt;
X
Xwhile ((opt = sgopt(argc,argv,"a:s")) != sgoptdone)
X.br
X  switch(opt) {
X.br
X    case 'a':
X.br
X      printf("opt a with optarg %s\\n",sgoptarg); break;
X.br
X    case 's':
X.br
X      printf("opt s with no optarg\\n"); break;
X.br
X    case '?':
X.br
X      if (argv[sgoptind] && (sgoptind < argc))
X.br
X        printf("illegal opt %c\\n",sgoptproblem);
X.br
X      else
X.br
X        printf("missing arg, opt %c\\n",sgoptproblem);
X.br
X      exit(1);
X.br
X  }
X
Xargv += sgoptind;
X.br
Xwhile (*argv) printf("argument %s\\n",*argv++);
X.br
Xexit(0);
X.br
X}
X.EE
X
XThe end of the command line is
Xmarked by either
X.IR argc ,
Xor a null pointer in
X.IR argv ,
Xwhichever comes first.
XNormally
Xthese two markers coincide,
Xso it is redundant
Xto test for
Xboth
X.I argv\fB[sgoptind]
Xand
X.B sgoptind < \fIargc\fR.
XThe above code shows both tests as an illustration.
X
X.B Multiple option sets:
XOne useful technique is to call
X.B sgopt
Xwith a primary
X.I opts
Xuntil it returns EOF,
Xthen call
X.B sgopt
Xwith a secondary
X.I opts
Xuntil it returns EOF.
XThe user can provide primary options, then a double hyphen,
Xand then secondary options.
XNo special handling is needed if some or all of the options are
Xomitted.
XThe same technique can be used for any number of option sets
Xin series.
X
X.B Multiple command lines:
XBefore parsing a new
X.BR argv ,
Xmake sure to
Xset
X.B sgoptind
Xand
X.B sgoptpos
Xback to
X1 and 0.
X.SH "PARSING STAGES"
X.B sgopt
Xkeeps track of its position in
X.I argv
Xwith
X.B sgoptind
Xand
X.BR sgoptpos ,
Xwhich are initialized to 1 and 0.
XIt looks at
X.I argv\fB[sgoptind][sgoptpos]
Xand following characters.
X
X.B sgopt
Xindicates
Xthat no more options are available by
Xreturning
X.BR sgoptdone ,
Xwhich is initialized to
X.BR SUBGETOPTDONE ,
Xwhich is defined as \-1.
X
X.B sgopt
Xbegins by setting
X.B optarg
Xto null.
X
X.B Ending conditions:
XIf
X.I argv
Xis null, or
X.B sgoptind
Xis larger than
X.IR argc ,
Xor the current cmdarg
X.I argv\fB[sgoptind]
Xis null,
Xthen
X.B sgopt
Xreturns
X.BR optdone .
X
X.B Stage one:
XIf the current character
Xis zero,
X.B sgopt
Xmoves to the beginning of the next cmdarg.
XIt then checks the ending conditions again.
X
X.B Stage two:
XIf
Xthe current position is the begining of the cmdarg,
X.B sgopt
Xchecks whether
Xthe current character
Xis a minus sign.
XIf not it returns
X.BR optdone .
XIt then
Xmoves
Xto the next character.
XIf that character is zero,
X.B sgopt
Xmoves
Xback to the beginning of the cmdarg,
Xand returns
X.BR sgoptdone .
XIf the character is a minus sign,
X.B sgopt
Xmoves to the beginning of the next cmdarg,
Xand returns
X.BR sgoptdone .
X
X.B Stage three:
X.B sgopt
Xrecords the current character,
X.IR c ,
Xand moves to the next character.
XThere are three possibilities:
X(1)
X.I c
Xis an option character without optarg in
X.IR opts ,
Xor
X(2)
X.I c
Xis an option character with optarg in
X.IR opts ,
Xor
X(3)
X.I c
Xdoes not appear in
X.IR opts .
X
X(1)
XIf
X.I c
Xappears as an option character without optarg in
X.IR opts ,
X.B sgopt
Xreturns
X.IR c .
X
X(2)
XIf
X.I c
Xappears as an option character with optarg in
X.IR opts ,
X.B sgopt
Xsets
X.B sgoptarg
Xto the current position,
Xand moves to the next cmdarg.
XIf
X.B sgoptarg
Xis nonempty,
X.B sgopt
Xreturns
X.IR c .
X
XThen
X.B sgopt
Xsets
X.B sgoptarg
Xto
Xthe current cmdarg.
XIf
Xthe current cmdarg is null,
Xor past
X.IR argc ,
X.B sgopt
Xsets
X.B sgoptproblem
Xto
X.I c
Xand returns ?.
XOtherwise
X.B sgopt
Xmoves to the next
Xargument
Xand returns
X.IR c .
X
X(2)
XIf
X.I c
Xdoes not appear in
X.IR opts ,
X.B sgopt
Xsets
X.B sgoptproblem
Xto
X.I c
Xand returns ?.
X.SH "SYNTAX NOTE"
X.B sgopt
Xis actually a macro abbreviation for
X.BR subgetopt .
XThe external
X.B sg
Xvariables are also macros
Xfor
X.BR subget .
XThese macros are defined in
X.BR <subgetopt.h> ,
Xunless
X.B SUBGETOPTNOSHORT
Xis defined
Xwhen
X.B <subgetopt.h>
Xis included.
X.SH VERSION
Xsubgetopt version 0.9, 931129.
X.SH AUTHOR
XPlaced into the public domain by Daniel J. Bernstein.
END-of-subgetopt.3
echo x - subgetopt.h
sed 's/^X//' >subgetopt.h << 'END-of-subgetopt.h'
X#ifndef SUBGETOPT_H
X#define SUBGETOPT_H
X
X#ifndef SUBGETOPTNOSHORT
X#define sgopt subgetopt
X#define sgoptarg subgetoptarg
X#define sgoptind subgetoptind
X#define sgoptpos subgetoptpos
X#define sgoptproblem subgetoptproblem
X#define sgoptprogname subgetoptprogname
X#define sgoptdone subgetoptdone
X#endif
X
X#define SUBGETOPTDONE -1
X
Xextern int subgetopt();
Xextern char *subgetoptarg;
Xextern int subgetoptind;
Xextern int subgetoptpos;
Xextern int subgetoptproblem;
Xextern char *subgetoptprogname;
Xextern int subgetoptdone;
X
X#endif
END-of-subgetopt.h
echo x - subgetopt.c
sed 's/^X//' >subgetopt.c << 'END-of-subgetopt.c'
X/* subgetopt.c, subgetopt.h: (yet another) improved getopt clone, inner layer
XDaniel J. Bernstein, djb@silverton.berkeley.edu.
XNo dependencies.
XNo system requirements.
X931129: Adapted from getopt.c.
XNo known patent problems.
X
XDocumentation in subgetopt.3.
X*/
X
X#define SUBGETOPTNOSHORT
X#include "subgetopt.h"
X
X#define sgopt subgetopt
X#define optind subgetoptind
X#define optpos subgetoptpos
X#define optarg subgetoptarg
X#define optproblem subgetoptproblem
X#define optdone subgetoptdone
X
Xint optind = 1;
Xint optpos = 0;
Xchar *optarg = 0;
Xint optproblem = 0;
Xint optdone = SUBGETOPTDONE;
X
Xint sgopt(argc,argv,opts)
Xint argc;
Xchar **argv;
Xchar *opts;
X{
X int c;
X char *s;
X
X optarg = 0;
X if (!argv || (optind >= argc) || !argv[optind])
X   return optdone;
X if (optpos && !argv[optind][optpos])
X  {
X   ++optind;
X   optpos = 0;
X   if ((optind >= argc) || !argv[optind])
X     return optdone;
X  }
X if (!optpos)
X  {
X   if (argv[optind][0] != '-')
X     return optdone;
X   ++optpos;
X   c = argv[optind][1];
X   if ((c == '-') || (c == 0))
X    {
X     /* XXX: this behavior of "-" is stupid */
X     if (c)
X       ++optind;
X     optpos = 0;
X     return optdone;
X    }
X   /* otherwise c is reassigned below */
X  }
X c = argv[optind][optpos];
X ++optpos;
X s = opts;
X while (*s)
X  {
X   if (c == *s)
X    {
X     if (s[1] == ':')
X      {
X       optarg = argv[optind] + optpos;
X       ++optind;
X       optpos = 0;
X       if (!*optarg)
X        {
X         optarg = argv[optind];
X         if ((optind >= argc) || !optarg) /* argument past end */
X          {
X           optproblem = c;
X           return '?';
X          }
X	 ++optind;
X        }
X      }
X     return c;
X    }
X   ++s;
X   if (*s == ':')
X     ++s;
X  }
X optproblem = c;
X return '?';
X}
END-of-subgetopt.c
echo x - TIMINGS
sed 's/^X//' >TIMINGS << 'END-of-TIMINGS'
XK/sec timings are based on a few trials. Megabyte timings are based on
Xone trial. More accurate timings would be nice, but I figure that a
Xhaphazard collection of rough timings is better than nothing at all.
X
XSPARC, Sun 4, SunOS 4.1.3, cc -O4
Xfingerprint: 127K/sec
Xsnefru: 139K/sec
Xmd5: 2304K/sec
Xcksum: 3585K/sec
Xcompress: 190K/sec
X
XSPARC, Sun 4, SunOS 4.1.3, gcc -O
Xfingerprint: 138K/sec
Xsnefru: 150K/sec
Xmd5: 2300K/sec
Xcksum: 4600K/sec
Xcompress: 190K/sec
X
XSPARC, Sun 4, SunOS 4.1.1, cc -O4
Xfingerprint: 95K/sec
Xsnefru: 115K/sec
Xmd5: 913K/sec
Xcksum: 1644K/sec
Xcompress: 153K/sec
X
XSPARC Classic/SPARC IPX, Solaris 2.1, gcc (2.5.4), 32M memory (tnx CC)
Xfingerprint: 7.97u 1.61s
Xsnefru: 6.08u 1.20s
Xmd5: 0.99u 0.68s
Xcksum: 0.47u 0.70s
Xcompress: 5.38u 1.35s
X
XSS10 Model 30, SunOS 4.1.3 (tnx JL)
Xfingerprint: 8.5u 0.0s
Xsnefru: 7.7u 0.0s
Xmd5: 0.5u 0.0s
Xcksum: 0.3u 0.0s
Xcompress: 3.5u 0.1s
X
XSGI, ?, cc -O2 -cckr
Xfingerprint: 157K/sec
Xsnefru: 188K/sec
Xmd5: 1309K/sec
Xcksum: 2216K/sec
Xcompress: 139.4K/sec
X
XNeXT, ?, cc -O
Xfingerprint: 60.5K/sec
Xsnefru: 72.3K/sec
Xmd5: 528K/sec
Xcksum: 1300K/sec
Xcompress: 130K/sec
X
XNeXT, NeXT Mach 3.1, gcc (2.5.4), 24M memory (tnx CC)
Xfingerprint: 16.49u 0.80s
Xsnefru: 14.17u 0.47s
Xmd5: 1.54u 0.32s
Xcksum: 0.79u 0.39s
Xcompress: 6.01u 0.45s
X
XMIPS, DECstation 5000, Ultrix 4.2A (47), cc -O2
Xfingerprint: 121K/sec
Xsnefru: 148K/sec
Xmd5: 1128K/sec
Xcksum: 1812K/sec
Xcompress: 157K/sec
X
XMIPS, DECstation 5000, Ultrix 4.2A (47), gcc -O
Xfingerprint: 110K/sec
Xsnefru: 144K/sec
Xmd5: 927K/sec
Xcksum: 2098K/sec
Xcompress: 157K/sec
X
XMIPS, DECstation 5000/25, Ultrix 4.2A, gcc (2.5.4), 40M memory (tnx CC)
Xfingerprint: 10.12u 0.43s
Xsnefru: 8.24u 0.50s
Xmd5: 1.22u 0.34s
Xcksum: 0.54u 0.37s
Xcompress: 7.80u 0.63s
X
XVAXstation 3100, BSD 4.3, gcc (2.5.4), 8M memory (tnx CC)
Xfingerprint: 48.52u 1.74s
Xsnefru: 41.6u 1.15s
Xmd5: 4.70u 0.84s
Xcksum: 3.21u 0.95s
Xcompress: 18.10u 2.54s
X
XIntel 386/40, BSDI 1.0, cc -O, 64k (?) cache
Xfingerprint: 38.9K/sec
Xsnefru: 51.6K/sec
Xmd5: 323.7K/sec
Xcksum: 589.7K/sec
Xcompress: 104.5K/sec
X
XIntel 486/??, Linux 0.99.13, gcc (2.5.4), 16M memory (tnx CC)
Xfingerprint: 20.66u 0.49s
Xsnefru: 18.22u 0.40s
Xmd5: 1.57u 0.32s
Xcksum: 1.05u 0.27s
Xcompress: 7.37u 0.45s
X
XIntel 486/66DX2, SCO Open Server 3.0, cc -O (Microsoft C 6.0), EISA (tnx GS)
Xfingerprint: 90K/sec
Xsnefru: 101K/sec
Xmd5: 666K/sec
Xcksum: 1234K/sec
Xcompress: 204K/sec
X
XIBM RS/6000 320H, AIX 3.2, gcc (2.5.4), 16M memory (tnx CC)
Xfingerprint: 10.80u 0.15s
Xsnefru: 9.19u 0.09s
Xmd5: 1.00u 0.07s
Xcksum: 0.63u 0.08s
Xcompress: 4.64u 0.10s
X
XPyramid MIServer 4/2T, OSx 5.1a, cc (tnx KV)
Xfingerprint: 38.1K/sec
Xsnefru: 49.2K/sec
Xmd5: 357K/sec
Xcksum: 526K/sec
Xcompress: 84K/sec
X
XHP9000/735, HP-UX 9.01, cc -O (tnx WL)
Xfingerprint: 660K/sec
Xsnefru: 830K/sec
Xmd5: 3300K/sec
Xcksum: 10000K/sec
Xcompress: 1000K/sec
X
Xvangogh (HP?), cc -O
Xfingerprint: 61.6K/sec
Xsnefru: 72.5K/sec
Xmd5: 580K/sec
Xcksum: 1200K/sec
Xcompress: 99.5K/sec
END-of-TIMINGS
echo x - fingerprint.tests
sed 's/^X//' >fingerprint.tests << 'END-of-fingerprint.tests'
X9hX04ha9c7F23oV5wWEtGIVWUt:pH07srkl0QOfGsxbensg6BNEd:g8VQIDhn:QZ00VtVu05Kipu	snefru512.c
END-of-fingerprint.tests
echo x - md5.tests
sed 's/^X//' >md5.tests << 'END-of-md5.tests'
X16344b673995a9049736209bf7ab5779	snefru512.c
END-of-md5.tests
echo x - snefru.tests
sed 's/^X//' >snefru.tests << 'END-of-snefru.tests'
X 49a81803 84463870 1474b424 25867457 9773aebc 3b4c9ce7 aaef779b f400d781	snefru512.c
END-of-snefru.tests
echo x - cksum.tests
sed 's/^X//' >cksum.tests << 'END-of-cksum.tests'
X3188261980    60030	snefru512.c
END-of-cksum.tests
exit

