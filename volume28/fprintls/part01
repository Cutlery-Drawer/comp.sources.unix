Newsgroups: comp.sources.unix
From: djb@silverton.berkeley.edu (D. J. Bernstein)
Subject: v28i039: fprintls - a fingerprinting version of ls, V0.75, Part01/01
Message-id: <1.769396967.27949@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: djb@silverton.berkeley.edu (D. J. Bernstein)
Posting-Number: Volume 28, Issue 39
Archive-Name: fprintls/part01

	This package lets you build fprintls, a version of ls which
	fingerprints files if you give it the -X option, under most BSD-ish
	systems.

# This is a shell archive.  Save it in a file, remove anything before
# this line, and then unpack it by entering "sh file".  Note, it may
# create directories; files and directories will be owned by you and
# have default permissions.
#
# This archive contains:
#
#	README
#	FILES
#	bsdls.fprint
#	bsdls.patch
#	patls.fprint
#
echo x - README
sed 's/^X//' >README << 'END-of-README'
Xfprintls 0.75, gamma.
X940205
XDaniel J. Bernstein, djb@silverton.berkeley.edu.
X
XThis package lets you build fprintls, a version of ls which fingerprints
Xfiles if you give it the -X option, under most BSD-ish systems.
X
XThis package is not self-contained: you will need to find a copy of my
Xfingerprint package, which should be available anywhere this is, and the
XBSD Net-1 ls, which I picked up from pub/BSD/net1/src/ucb/ls.tar.Z on
Xgatekeeper.dec.com.
X
XBasically, you'll compile fingerprint, patch the Net-1 ls with patches
Xincluded here, and compile ls. I'd like to distribute the patched ls,
Xbut I can't do so legally without permission from the Cal Regents.
X
XI changed ls in several ways. Most important, of course, are the
Xfingerprinting patches. I also fixed an s_names free()ing bug which 
Xcould cause crashes. I added various ifndef S_ and UT_ definitions and
Xremoved dependency on /lib/libc.a and the extra BSD struct stat fields.
XAnd I made the code a bit more old-fashioned for portability: <dirent.h>
Xbecame <sys/dir.h>, strerror became sys_errlist, mode_t became unsigned
Xshort.
X
XIf I had started from a different ls, perhaps less patching would have
Xbeen necessary, but I figure this ls has the best chance of working the
Xway you expect. I've tested the result under BSD/386 1.0, SunOS 4.1.1,
Xand NeXT Mach 2.1.
X
XAnyway, here's what you do:
X
X1. Grab, unpack, compile, test, and install the fingerprint package.
X
X2. Grab the Net-1 ls, ls.tar.Z. (To check you have the right version,
Xfingerprint -c < bsdls.fprint.)
X
X3. Unpack the Net-1 ls: e.g., uncompress ls.tar; tar -xvf ls.tar.
X
X4. Apply bsdls.patch to ls: e.g., patch < bsdls.patch. (To check you
Xhave ended up with the right version, fingerprint -c < patls.fprint.)
X
X5. Compile: just make. (If you've gotten to this step but didn't install
Xthe fingerprint library and include files back in step 1, you'll have to
Xuse the -L and -I options of cc to tell it where the files are.)
X
X6. Try, for example, ./ls -lX. Note that it would take quite a while to
Xgenerate checksums for a large directory tree. If you install this
Xversion of ls anywhere, call it fprintls.
END-of-README
echo x - FILES
sed 's/^X//' >FILES << 'END-of-FILES'
XREADME
XFILES
Xbsdls.fprint
Xbsdls.patch
Xpatls.fprint
END-of-FILES
echo x - bsdls.fprint
sed 's/^X//' >bsdls.fprint << 'END-of-bsdls.fprint'
XuQUB1llchC5NbXgchOfE:hFdiut0O0PNSJW0NQo.tg.d2mlMwgeq:rH0RRdwyqtG0sIthK0VR2Vf	ls.tar.Z
END-of-bsdls.fprint
echo x - bsdls.patch
sed 's/^X//' >bsdls.patch << 'END-of-bsdls.patch'
X*** Makefile.old	Fri Feb  4 15:17:25 1994
X--- Makefile	Sat Feb  5 19:24:30 1994
X***************
X*** 18,24 ****
X  #
X  
X  CFLAGS=	-O
X- LIBC=	/lib/libc.a
X  SRCS=	cmp.c ls.c print.c util.c
X  OBJS=	cmp.o ls.o print.o util.o
X  MAN=	ls.0
X--- 18,23 ----
X***************
X*** 25,32 ****
X  
X  all: ls
X  
X! ls: ${LIBC} ${OBJS}
X! 	${CC} -o $@ ${CFLAGS} ${OBJS}
X  
X  clean:
X  	rm -f ${OBJS} core ls
X--- 24,31 ----
X  
X  all: ls
X  
X! ls: ${OBJS}
X! 	${CC} -o $@ ${CFLAGS} ${OBJS} -lfprint
X  
X  clean:
X  	rm -f ${OBJS} core ls
X*** ls.c.old	Fri Feb  4 15:13:44 1994
X--- ls.c	Fri Feb  4 15:14:47 1994
X***************
X*** 31,43 ****
X  #include <sys/param.h>
X  #include <sys/stat.h>
X  #include <sys/ioctl.h>
X! #include <dirent.h>
X  #include <strings.h>
X  #include <errno.h>
X  #include <stdio.h>
X  #include "ls.h"
X  
X! int lstat(), strlen();
X  char *emalloc();
X  
X  int (*lengthfcn)() = strlen;
X--- 31,43 ----
X  #include <sys/param.h>
X  #include <sys/stat.h>
X  #include <sys/ioctl.h>
X! #include <sys/dir.h>
X  #include <strings.h>
X  #include <errno.h>
X  #include <stdio.h>
X  #include "ls.h"
X  
X! int lstat();
X  char *emalloc();
X  
X  int (*lengthfcn)() = strlen;
X***************
X*** 47,52 ****
X--- 47,53 ----
X  int termwidth = 80;		/* default terminal width */
X  
X  /* flags */
X+ int f_fingerprint;
X  int f_accesstime;		/* use time of last access */
X  int f_column;			/* columnated format */
X  int f_group;			/* show group ownership of a file */
X***************
X*** 78,87 ****
X  	struct winsize win;
X  	int ch;
X  	char *p, *getenv();
X! 	int acccmp(), bcopy(), modcmp(), namecmp(), prcopy(), printcol();
X  	int printlong(), printscol(), revacccmp(), revmodcmp(), revnamecmp();
X  	int revstatcmp(), statcmp();
X  
X  	/* terminal defaults to -Cq, non-terminal defaults to -1 */
X  	if (isatty(1)) {
X  		f_nonprint = 1;
X--- 79,90 ----
X  	struct winsize win;
X  	int ch;
X  	char *p, *getenv();
X! 	int acccmp(), modcmp(), namecmp(), prcopy(), printcol();
X  	int printlong(), printscol(), revacccmp(), revmodcmp(), revnamecmp();
X  	int revstatcmp(), statcmp();
X  
X+ 	f_fingerprint = 0;
X+ 
X  	/* terminal defaults to -Cq, non-terminal defaults to -1 */
X  	if (isatty(1)) {
X  		f_nonprint = 1;
X***************
X*** 99,105 ****
X  	if (!getuid())
X  		f_listdot = 1;
X  
X! 	while ((ch = getopt(argc, argv, "1ACFLRacdfgilqrstu")) != EOF) {
X  		switch (ch) {
X  		/*
X  		 * -1, -C and -l all override each other
X--- 102,108 ----
X  	if (!getuid())
X  		f_listdot = 1;
X  
X! 	while ((ch = getopt(argc, argv, "1ACFLRacdfgilqrstuX")) != EOF) {
X  		switch (ch) {
X  		/*
X  		 * -1, -C and -l all override each other
X***************
X*** 117,122 ****
X--- 120,128 ----
X  			f_longform = 1;
X  			f_column = f_singlecol = 0;
X  			break;
X+ 		case 'X':
X+ 			f_fingerprint = 1;
X+ 			break;
X  		/* -c and -u override each other */
X  		case 'c':
X  			f_statustime = 1;
X***************
X*** 333,340 ****
X  	}
X  	/* display regular files */
X  	if (regcnt) {
X! 		rstats[0].lstat.st_btotal = blocks;
X! 		rstats[0].lstat.st_maxlen = maxlen;
X  		displaydir(rstats, regcnt);
X  		f_newline = f_dirname = 1;
X  	}
X--- 339,346 ----
X  	}
X  	/* display regular files */
X  	if (regcnt) {
X! 		rstats[0].st_btotal = blocks;
X! 		rstats[0].st_maxlen = maxlen;
X  		displaydir(rstats, regcnt);
X  		f_newline = f_dirname = 1;
X  	}
X***************
X*** 372,382 ****
X  	if (num > 1 && !f_specialdir) {
X  		u_long save1, save2;
X  
X! 		save1 = stats[0].lstat.st_btotal;
X! 		save2 = stats[0].lstat.st_maxlen;
X  		qsort((char *)stats, num, sizeof(LS), sortfcn);
X! 		stats[0].lstat.st_btotal = save1;
X! 		stats[0].lstat.st_maxlen = save2;
X  	}
X  
X  	printfcn(stats, num);
X--- 378,388 ----
X  	if (num > 1 && !f_specialdir) {
X  		u_long save1, save2;
X  
X! 		save1 = stats[0].st_btotal;
X! 		save2 = stats[0].st_maxlen;
X  		qsort((char *)stats, num, sizeof(LS), sortfcn);
X! 		stats[0].st_btotal = save1;
X! 		stats[0].st_maxlen = save2;
X  	}
X  
X  	printfcn(stats, num);
X***************
X*** 433,439 ****
X  	register DIR *dirp;
X  	register int cnt, maxentry, maxlen;
X  	register char *p, *names;
X! 	struct dirent *dp;
X  	u_long blocks;
X  	LS *stats;
X  
X--- 439,445 ----
X  	register DIR *dirp;
X  	register int cnt, maxentry, maxlen;
X  	register char *p, *names;
X! 	struct direct *dp;
X  	u_long blocks;
X  	LS *stats;
X  
X***************
X*** 446,451 ****
X--- 452,458 ----
X  	maxentry = DEFNUM;
X  	stats = (LS *)emalloc((u_int)DEFNUM * sizeof(LS));
X  	names = emalloc((u_int)lp->lstat.st_size);
X+ 	*s_names = names;
X  
X  	if (!(dirp = opendir(f_specialdir ? lp->name : "."))) {
X  		(void)fprintf(stderr, "ls: %s: %s\n", lp->name,
X***************
X*** 504,512 ****
X  		++cnt;
X  	}
X  	*s_stats = stats;
X! 	*s_names = names;
X! 	stats[0].lstat.st_btotal = blocks;
X! 	stats[0].lstat.st_maxlen = maxlen;
X  	closedir(dirp);
X  	return(cnt);
X  }
X--- 511,518 ----
X  		++cnt;
X  	}
X  	*s_stats = stats;
X! 	stats[0].st_btotal = blocks;
X! 	stats[0].st_maxlen = maxlen;
X  	closedir(dirp);
X  	return(cnt);
X  }
X*** ls.h.old	Fri Feb  4 15:13:46 1994
X--- ls.h	Fri Feb  4 15:15:44 1994
X***************
X*** 20,29 ****
X--- 20,33 ----
X   *	@(#)ls.h	5.7 (Berkeley) 6/27/89
X   */
X  
X+ extern char *sys_errlist[];
X+ #define strerror(i) sys_errlist[i]
X+ 
X  typedef struct _lsstruct {
X  	char *name;			/* file name */
X  	int len;			/* file name length */
X  	struct stat lstat;		/* lstat(2) for file */
X+ 	u_long st_btotal; u_long st_maxlen;
X  } LS;
X  
X  /*
X***************
X*** 32,42 ****
X   * If there's ever a type larger than u_long, fix this.  Any calls to qsort
X   * must save and restore the values.
X   */
X- #define	st_btotal	st_flags
X- #define	st_maxlen	st_gen
X  
X  extern int errno;
X  
X  extern int f_accesstime;	/* use time of last access */
X  extern int f_group;		/* show group ownership of a file */
X  extern int f_inode;		/* print inode */
X--- 36,45 ----
X   * If there's ever a type larger than u_long, fix this.  Any calls to qsort
X   * must save and restore the values.
X   */
X  
X  extern int errno;
X  
X+ extern int f_fingerprint;
X  extern int f_accesstime;	/* use time of last access */
X  extern int f_group;		/* show group ownership of a file */
X  extern int f_inode;		/* print inode */
X***************
X*** 46,48 ****
X--- 49,97 ----
X  extern int f_statustime;	/* use time of last mode change */
X  extern int f_total;		/* if precede with "total" line */
X  extern int f_type;		/* add type character for non-regular files */
X+ 
X+ #ifndef S_IRUSR
X+ #define S_IRUSR 0400
X+ #endif
X+ #ifndef S_IWUSR
X+ #define S_IWUSR 0200
X+ #endif
X+ #ifndef S_IXUSR
X+ #define S_IXUSR 0100
X+ #endif
X+ #ifndef S_IRGRP
X+ #define S_IRGRP 040
X+ #endif
X+ #ifndef S_IWGRP
X+ #define S_IWGRP 020
X+ #endif
X+ #ifndef S_IXGRP
X+ #define S_IXGRP 010
X+ #endif
X+ #ifndef S_IROTH
X+ #define S_IROTH 04
X+ #endif
X+ #ifndef S_IWOTH
X+ #define S_IWOTH 02
X+ #endif
X+ #ifndef S_IXOTH
X+ #define S_IXOTH 01
X+ #endif
X+ #ifndef S_ISDIR
X+ #define S_ISDIR(m) (((m)&0170000) == 040000)
X+ #endif
X+ #ifndef S_ISREG
X+ #define S_ISREG(m) (((m)&0170000) == 0100000)
X+ #endif
X+ #ifndef S_ISCHR
X+ #define S_ISCHR(m) (((m)&0170000) == 020000)
X+ #endif
X+ #ifndef S_ISBLK
X+ #define S_ISBLK(m) (((m)&0170000) == 060000)
X+ #endif
X+ #ifndef S_ISLNK
X+ #define S_ISLNK(m) (((m)&0170000) == 0120000)
X+ #endif
X+ #ifndef UT_NAMESIZE
X+ #define UT_NAMESIZE 8
X+ #endif
X*** print.c.old	Fri Feb  4 15:13:49 1994
X--- print.c	Fri Feb  4 15:14:48 1994
X***************
X*** 41,52 ****
X  	}
X  }
X  
X  printlong(stats, num)
X  	LS *stats;
X  	register int num;
X  {
X  	if (f_total)
X! 		(void)printf("total %lu\n", stats[0].lstat.st_btotal);
X  	for (; num--; ++stats) {
X  		if (f_inode)
X  			(void)printf("%6lu ", stats->lstat.st_ino);
X--- 41,78 ----
X  	}
X  }
X  
X+ #include "fprintfile.h"
X+ 
X+ void printfingerprint(fn)
X+ char *fn;
X+ {
X+  FILE *fi;
X+  fingerprintfile f;
X+  int i;
X+  static unsigned char out[77];
X+  static unsigned char h[FINGERPRINTFILE_HASHLEN];
X+  static unsigned char input[1024];
X+ 
X+  fi = fopen(fn,"rb");
X+  if (fi)
X+   {
X+    fingerprintfile_clear(&f);
X+    while (i = fread(input,1,sizeof(input),fi))
X+      fingerprintfile_addn(&f,input,i);
X+    fclose(fi);
X+    fingerprintfile_hash(&f,h);
X+    out[fingerprintfile_fmt(out,h)] = 0;
X+    fputs(out,stdout);
X+   }
X+  putchar('\t');
X+ }
X+ 
X  printlong(stats, num)
X  	LS *stats;
X  	register int num;
X  {
X  	if (f_total)
X! 		(void)printf("total %lu\n", stats[0].st_btotal);
X  	for (; num--; ++stats) {
X  		if (f_inode)
X  			(void)printf("%6lu ", stats->lstat.st_ino);
X***************
X*** 53,58 ****
X--- 79,89 ----
X  		if (f_size)
X  			(void)printf("%4ld ", stats->lstat.st_blocks);
X  		printperms(stats->lstat.st_mode);
X+ 		if (f_fingerprint)
X+ 			if (S_ISREG(stats->lstat.st_mode))
X+ 				printfingerprint(stats->name);
X+ 			else
X+ 				(void)printf("	");
X  		(void)printf("%3d ", stats->lstat.st_nlink);
X  		printowner(stats->lstat.st_uid);
X  		if (f_group)
X***************
X*** 88,94 ****
X  	register int base, chcnt, cnt, col, colwidth;
X  	int endcol, numcols, numrows, row;
X  
X! 	colwidth = stats[0].lstat.st_maxlen;
X  	if (f_inode)
X  		colwidth += 6;
X  	if (f_size)
X--- 119,125 ----
X  	register int base, chcnt, cnt, col, colwidth;
X  	int endcol, numcols, numrows, row;
X  
X! 	colwidth = stats[0].st_maxlen;
X  	if (f_inode)
X  		colwidth += 6;
X  	if (f_size)
X***************
X*** 103,109 ****
X  		++numrows;
X  
X  	if (f_size && f_total)
X! 		(void)printf("total %lu\n", stats[0].lstat.st_btotal);
X  	for (row = 0; row < numrows; ++row) {
X  		endcol = colwidth;
X  		for (base = row, chcnt = col = 0; col < numcols; ++col) {
X--- 134,140 ----
X  		++numrows;
X  
X  	if (f_size && f_total)
X! 		(void)printf("total %lu\n", stats[0].st_btotal);
X  	for (row = 0; row < numrows; ++row) {
X  		endcol = colwidth;
X  		for (base = row, chcnt = col = 0; col < numcols; ++col) {
X***************
X*** 199,205 ****
X  	for (i = 4; i < 11; ++i)
X  		(void)putchar(longstring[i]);
X  
X! #define	SIXMONTHS	((DAYSPERNYEAR / 2) * SECSPERDAY)
X  	if (ftime + SIXMONTHS > time((time_t *)NULL))
X  		for (i = 11; i < 16; ++i)
X  			(void)putchar(longstring[i]);
X--- 230,236 ----
X  	for (i = 4; i < 11; ++i)
X  		(void)putchar(longstring[i]);
X  
X! #define	SIXMONTHS	15724800
X  	if (ftime + SIXMONTHS > time((time_t *)NULL))
X  		for (i = 11; i < 16; ++i)
X  			(void)putchar(longstring[i]);
X***************
X*** 215,221 ****
X   * do the permissions printing, passed the mode
X   */
X  printperms(mode)
X! 	mode_t mode;
X  {
X  	 /* print type */
X  	switch (mode & S_IFMT) {
X--- 246,252 ----
X   * do the permissions printing, passed the mode
X   */
X  printperms(mode)
X! 	unsigned short mode;
X  {
X  	 /* print type */
X  	switch (mode & S_IFMT) {
X***************
X*** 318,324 ****
X  }
X  
X  printtype(mode)
X! 	mode_t mode;
X  {
X  	switch(mode & S_IFMT) {
X  	case S_IFDIR:
X--- 349,355 ----
X  }
X  
X  printtype(mode)
X! 	unsigned short mode;
X  {
X  	switch(mode & S_IFMT) {
X  	case S_IFDIR:
X***************
X*** 342,348 ****
X  	char *name;
X  {
X  	int lnklen;
X! 	char path[MAXPATHLEN + 1], *strerror();
X  
X  	if ((lnklen = readlink(name, path, MAXPATHLEN)) == -1) {
X  		(void)fprintf(stderr, "\nls: %s: %s\n", name, strerror(errno));
X--- 373,379 ----
X  	char *name;
X  {
X  	int lnklen;
X! 	char path[MAXPATHLEN + 1];
X  
X  	if ((lnklen = readlink(name, path, MAXPATHLEN)) == -1) {
X  		(void)fprintf(stderr, "\nls: %s: %s\n", name, strerror(errno));
END-of-bsdls.patch
echo x - patls.fprint
sed 's/^X//' >patls.fprint << 'END-of-patls.fprint'
XAQ9AuZQnXTXu3Wwclhu4apt1iJ9d30uWfZa046hAYcc:CMe2qhZ99lIILtieHCtW0.0X1h0qKCNI	Makefile
XxKxGTndYrbKstP:.mpYArHI1JJ3Bn0TTEvK0MITFndNhteu:pwzjwRRL23FvmWHa0vfymD0GQalC	cmp.c
XcXjgm.l3Oj.zhg6WxOykIkgbT2h560di9.y0nJHCmpFwTbO.u7OhNJ4cknr8dPTk0zmDW70EBTSj	ls.c
XKKiLsiaV3QHEkTuL7IScg2B27Zae40MvpZy0IZfH7A5LT9sxS1kwX0znk8KBN8zN0VDmOt0HzSqI	ls.h
X2fx2TSxbEvNufcXziJQGNRO7ysq:R0rzxq108IwraC42aZeZ85DV4SwXH:Zty6Pm0AZtDx0nHXxU	print.c
Xe6hJgLHOoa0E8sC1bsOo66h1uHjo50C4VZN0sM3S2uaEy6XBy0EzoVWCkWv80BrE0uCQPz0RoTVE	util.c
END-of-patls.fprint
exit

