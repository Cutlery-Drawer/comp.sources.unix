Newsgroups: comp.sources.unix
From: denio@scubed.scubed.com (Dennis O'Neill)
Subject: v28i146: fullpath-1.1.0 - reformat "ls -lR" output to a more useful form, Part01/01
Message-id: <1.783850143.27184@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: denio@scubed.scubed.com (Dennis O'Neill)
Posting-Number: Volume 28, Issue 146
Archive-Name: fullpath-1.1.0/part01

#! /bin/sh
# This is a shell archive, meaning:
# 1. Remove everything above the #! /bin/sh line.
# 2. Save the resulting text in a file.
# 3. Execute the file with /bin/sh (not csh) to create the files:
#	fullpath-1.1.0
# This archive created: Wed Nov  2 12:49:59 1994
export PATH; PATH=/bin:$PATH
if test ! -d 'fullpath-1.1.0'
then
	mkdir 'fullpath-1.1.0'
fi
cd 'fullpath-1.1.0'
if test -f 'Readme'
then
	echo shar: will not over-write existing file "'Readme'"
else
cat << \SHAR_EOF > 'Readme'


                       Fullpath 1.1.0 - 1994 November 02
                       =================================


+-------------+
| Description |
+-------------+

"fullpath" is used to reformat the output of "ls -lR" so that each
filename has a path prepended.  That is, it takes output of "ls -lR"
that looks like

    /home/denio/fullpath-1.1.0:
    -rw-r--r--  1 denio        5945 Jun 23 11:08 fullpath.c

and reformats it as

    1992/06/23         5945  /home/denio/fullpath-1.1.0/fullpath.c

Options allow UNIX System V "ls -lR" output and "ls -lR" output not
containing userid or groupid information to be used as input;
monitoring the progress of the application; and displaying usage
options.

Release 1.1.0 contains bug fixes and some minor functionality upgrades
over release 1.0.

Please address comments to Dennis O'Neill (denio@s3reston.scubed.com).



The source code is copyrighted; however, I grant everyone the right
to compile and use this application.

I originally wrote "fullpath" to help me look for particular files in
the "ls-lR" listings from the UUNET archive.

This program was written on a Sun SPARCstation under SunOS 4.1.2.



+-----------------------------+
| Changes since version 1.0.0 |
+-----------------------------+

Added the following options and features:

  -sysv   allows "fullpath" to process output of SysV "ls -lR".  Usage
          is "fullpath -sysv ...".  That is, the input line can look like
              /home/denio/fullpath-1.1.0:
              -rw-r--r--   1 denio  mygrp  5945 Jun 23 11:08 fullpath.c
          Alternatively, the user can use the SysV "ls -oR" output.

  -grpid  is identical to the -sysv option.

  -nouid  allows "fullpath" to process a reported form of "ls -lR"
          output that does not contain userid, groupid, or number-of-links
          information, i.e.,
              /home/denio/fullpath-1.1.0:
              -rw-r--r--   5945 Jun 23 11:08 fullpath.c

  -p      writes a progress-monitor message to stderr while "fullpath"
          is running.

  -u      shows usage of "fullpath".

  -h      shows usage of "fullpath".

Bugs fixed: 
  o  fixed problem with the treatment of empty directories
  o  fixed problem in specifying the year of recent files

Release 1.1.0 is distributed as a complete package (rather than as
a set of patches) since it's so small.



+---------------+
| Usage example |
+---------------+

Usage is:

    [prompt] ls -lR | fullpath > ls-lR.fullpath

For example, suppose one has the Uunet ls-lR file and wishes to discover
the various versions of the "elm" mail handler that are available.  One
would execute the command sequence

    [prompt] fullpath < ls-lR | grep elm | sort

and get the following output lines (among others):

    1986/11/30  27208  usenet/comp.sources.unix/volume6/elm/part01.Z
    1986/11/30  25203  usenet/comp.sources.unix/volume7/elm_update/part1.Z
    1987/03/08  28320  usenet/comp.sources.unix/volume9/elm2/part01.Z
    1989/04/12  24552  usenet/comp.sources.unix/volume18/elm2.2/part01.Z
    1990/06/07  25355  usenet/comp.sources.unix/volume22/elm2.3/part01.Z
    1991/03/05  13212  usenet/comp.sources.unix/volume24/elm2.3patches/part01.Z

The user can see that the most recent version is elm2.3, and that it can
be recovered from usenet/comp.sources.unix/volume22.  One can also see that
a set of patches for elm2.3 can be found in
usenet/comp.sources.unix/volume24/elm2.3.patches.



+---------------------+
| Building "fullpath" |
+---------------------+

In "Makefile", modify the following macros to suit your needs:
  o  BIN_DESTINATION is directory into which the executable is to be copied
  o  MAN_DESTINATION is directory into which the manual page is to be copied
  o  MAN_SUFFIX is the suffix to apply to the manual page (e.g., l [el])
  o  CC is your C compiler
  o  CFLAGS contains flags to control your C compiler

"make" or "make all" builds "fullpath".

"make install" installs "fullpath" and "fullpath.man" in designated places.

"make clean" cleans the source directory.

"make uninstall" removes "fullpath" and "fullpath.man" from the designated
places.
SHAR_EOF
fi # end of overwriting check
if test -f 'fullpath.man'
then
	echo shar: will not over-write existing file "'fullpath.man'"
else
cat << \SHAR_EOF > 'fullpath.man'
.\" ----- Title for manual page -----------------------------------------------
.TH FULLPATH L "02 November 1994"
.\"
.\" ----- Name of routine, short description ----------------------------------
.SH NAME
fullpath \- reorder output of "ls -lR" to prepend paths to filenames
.\"
.\" ----- Short synopsis, including options and arguments ---------------------
.SH SYNOPSIS
.nf
\fBfullpath\fR [options] < input > output
.fi
.\"
.\" ----- Brief narrative description of what the command does ----------------
.SH DESCRIPTION
\fBfullpath\fR accepts as input the output of the UNIX command \fBls -lR\fR,
reformats it into three columns containing file creation date, size of
file, and path to the filename (relative to the topmost directory contained
in the output of \fBls -lR\fR).  Heads of directories and symbollic links
are not included in the output of \fBfullpath\fR.

One use of this program is to filter the \fBls-lR\fR file containing
an archive site's list of contents.

For example, given an \fBls -lR\fR output (here, \fBls -lFR was used
to emphasize that certain files are executables and others are roots
of directories),

.nf
     [prompt] ls -lFR
     total 35
     -rw-r--r--  1 denio         335 Jun 23 10:41 Makefile
     -rwxr-xr-x  1 denio       24576 Jun 23 10:52 fullpath*
     -rw-r--r--  1 denio        5945 Jun 23 11:08 fullpath.c
     -rw-r--r--  1 denio        1265 Jun 23 11:06 fullpath.man
     drwxr-xr-x  2 denio         512 Jun 23 09:09 testdir/
     drwxr-xr-x  2 denio         512 Jun 23 09:09 testdir2/
     
     testdir:
     total 3
     -rw-r--r--  1 denio           6 Jun 23 09:09 hellofile
     -rw-r--r--  1 denio          38 Jun 23 09:09 nonident1
     -rw-r--r--  1 denio          38 Jun 23 09:09 nonident2
     
     testdir2:
     total 1
     -rw-r--r--  1 denio           6 Jun 23 09:09 hellofile
.fi

\fBfullpath\fR reformats the output to

.nf
     [prompt] ls -lFR | fullpath
     1992/06/23          335  Makefile
     1992/06/23        24576  fullpath [executable]
     1992/06/23         5945  fullpath.c
     1992/06/23         1265  fullpath.man
     1992/06/23            6  testdir/hellofile
     1992/06/23           38  testdir/nonident1
     1992/06/23           38  testdir/nonident2
     1992/06/23            6  testdir2/hellofile
.fi
.\"
.\" ----- Other relevant commands, files, and manuals -------------------------
.SH OPTIONS
.TP 12
.B \-p
Show progress (line count) as \fBfullpath\fR processes the input file.
.TP
.B \-u
Show usage note (same as \-h).
.TP
.B \-h
Show usage note (same as \-u).
.TP
.B \-sysv
Process input containing a groupid in addition to userid and number of links,
e.g.,
.br
.nf
     testdir:
     total 3
     -rw-r--r--  1 denio  mygrp   6 Jun 23 09:09 hellofile
     -rw-r--r--  1 denio  mygrp  38 Jun 23 09:09 nonident1
.fi
.br
This form is typical of output of the System V version of \fBls -lR\fR.
.TP
.B \-grpid
Identical to the "\-sysv" option.
.TP
.B \-nouid
Process input that doesn't contain userid, groupid, or number of links, e.g.,
.br
.nf
     testdir:
     total 3
     -rw-r--r--   6 Jun 23 09:09 hellofile
     -rw-r--r--  38 Jun 23 09:09 nonident1
.fi
.\"
.\" ----- Other relevant commands, files, and manuals -------------------------
.SH "SEE ALSO"
\fBls (1)\fR
.\"
.\" ----- Known deficiencies in the command -----------------------------------
.\" .SH BUGS
.\"
.\" ----- Author --------------------------------------------------------------
.SH AUTHOR
Dennis O'Neill
SHAR_EOF
fi # end of overwriting check
if test -f 'Makefile'
then
	echo shar: will not over-write existing file "'Makefile'"
else
cat << \SHAR_EOF > 'Makefile'
#=============================================================================#
# Makefile for:  fullpath                                                     #
#=============================================================================#

# Give values to the following:
# CC is your C compiler
# CFLAGS are the flags you like to use with your C compiler
# BIN_DESTINATION is directory into which the executable is to be copied
# MAN_DESTINATION is directory into which the manual page is to be copied
# MAN_SUFFIX is the suffix to apply to the manual page (e.g., l [el])

CC              = gcc
CFLAGS          = -g -O
BIN_DESTINATION = /usr/local/bin
MAN_DESTINATION = /usr/local/man/manl
MAN_SUFFIX      = l

#==== end of user-alterable section ===========================================

OBJECTS = fullpath.o

all: fullpath

fullpath: $(OBJECTS)
	$(CC) -o $@ $(OBJECTS) $(CFLAGS)

install:
	cp fullpath $(BIN_DESTINATION)
	cp fullpath.man $(MAN_DESTINATION)/fullpath.$(MAN_SUFFIX)

uninstall:
	rm $(BIN_DESTINATION)/fullpath
	rm $(MAN_DESTINATION)/fullpath.$(MAN_SUFFIX)

clean: 
	rm *.o fullpath
SHAR_EOF
fi # end of overwriting check
if test -f 'fullpath.c'
then
	echo shar: will not over-write existing file "'fullpath.c'"
else
cat << \SHAR_EOF > 'fullpath.c'
/*===========================================================================*/
/* fullpath 1.1.0 - reformat output of "ls -lR" to contain full file path    */
/*===========================================================================*/
/* 

Default "ls -lR" output used as input to this application:
fullpath-1.0.1:
total 15
-rw-r--r--  1 denio	   1032 May 20 11:16 Makefile
-rw-r--r--  1 denio	   2423 May 20 11:16 Readme

Switches:
-sysv:  use UNIX System V-style "ls -lR" output
-grpid: use UNIX System V-style "ls -lR" output, i.e.,
        fullpath-1.0.1:
        total 30
        -rw-r--r--   1 denio    geop        1032 May 20 11:16 Makefile
        -rw-r--r--   1 denio    geop        2423 May 20 11:16 Readme

-nouid: use output of "ls -lR" with no userid and no number of links, i.e.,
        0overview:
        -rw-rw-r--  160368  Jul 25 05:26 hierarchy
        -rw-rw-r--  6824749 Jul 25 05:39 ls-lR
        -rw-rw-r--  1919861 Jul 25 05:39 ls-lR.Z
        -rw-rw-r--  161358  Jul 24 08:52 new-files

-p:     shows progress

-u:     shows usage
-h:     shows usage

*/



#include <stdio.h>								/* for i/o operations */
#include <string.h>								/* for string functions */
#include <time.h>								/* for time functions */
#include <limits.h>								/* for max path length */
#include <stdlib.h>								/* for ascii/integer conv. */

#define MAXPATHLEN _POSIX_PATH_MAX				/* max path length */
#define MAXLEN 255								/* max line length */

#ifndef TRUE
#	define FALSE 0
#	define TRUE !FALSE
#endif

#define PROGRESS_GRANULARITY 100			/* report progress every _ lines */

/*-----------------*/
/* Release history */
/*-----------------*/
static char release_number[] = "fullpath 1.1.0 Wed Nov 02 10:14:36 EST 1994";
/*
    "1.0.0 Tue Jun 23 11:07:26 EDT 1992"; original release
    "1.0.1 Thu Jun 25 16:38:26 EDT 1992"; chgd MAXLEN 80->256
    "1.0.2 Tue Sep 07 14:54:47 EDT 1993"; fixed year problem
    "1.0.3 Tue Apr 14 10:23:38 EST 1994"; removed stderr output
    "1.0.4 Fri May 20 10:23:38 EST 1994"; fixed empty dir problem
    "1.0.5 Fri May 20 10:23:38 EST 1994"; added -v, -u|h, -p, -sysv, -nouid
    "1.1.0 Wed Nov 02 10:14:36 EST 1994"; ANSI C version; minor cleanup
*/

static char copyright[] =
	"Copyright 1992, 1993, 1994 Dennis O'Neill.";



/*===========================================================================*/
/* fullpath main routine                                                     */
/*===========================================================================*/

main (int argc, char **argv)
/* Input arguments: */
/* argc = number of command-line arguments */
/* argv = command line arguments */
{
	char line[MAXLEN + 1];						/* input line */
	char key[MAXLEN + 1];						/* for finding "total" lines */
	char dirname[MAXPATHLEN + 1];				/* directory name */
	char permissions[MAXLEN];					/* ls -lR permissions field */
	char owner[MAXLEN];							/* ls -lR owner field */
	char size[MAXLEN];							/* ls -lR size field */
	char month[MAXLEN];							/* ls -lR month field */
	char day[MAXLEN];							/* ls -lR day field */
	char year[MAXLEN];							/* ls -lR year field */
	char filename[MAXLEN];						/* file name */
	char outline[MAXLEN];						/* line for output */
	int  length;								/* result of "strlen" */
	int i;										/* counter */
	char executable[12 + 1 + 3];				/* executable marking */
	char *result;								/* result of scanf */
	int sizeof_directory;						/* directory size */
	int input_line_counter;						/* # of input lines */
	int output_line_counter;					/* # of output lines */

	/* time variables */
	time_t tnow;								/* time */
	struct tm *tmnow;							/* local time */
	int month_num;								/* file month as number */
	int day_num;								/* file day as number */
	int year_num;								/* file year as number */
	int this_year;								/* this year */

	/* Operation control switches */
	int progress_switch;						/* progress-message switch */
	int sysv_switch;							/* System V switch */
	int nouid_switch;							/* No-user-id switch */
	int bad_argument;							/* bad argument switch */

	/* subprocedures used */
	void usage (int argc, char **argv);
	void show_version (void);

	/* initial directory name is "." */
	strcpy (dirname, ".");

/*                 +---------------------------------------+                 */
/*-----------------|    process command line arguments     |-----------------*/
/*                 +---------------------------------------+                 */

	/* This section was quick to write but is very crude */

	bad_argument = FALSE;
	progress_switch = FALSE;
	sysv_switch = FALSE;
	nouid_switch = FALSE;
	for (i = 1; i < argc; i++)
	{
		/* show usage, then terminate */
		if (strcmp (argv[i], "-u") == 0)
		{
			usage (argc, argv);
		}
		else if (strcmp (argv[i], "-h") == 0)
		{
			usage (argc, argv);
		}

		/* show version, then terminate */
		else if (strcmp (argv[i], "-v") == 0)
		{
			show_version ();
			return (0);
		}

		/* parse command line for operation-control switches */
		else if (strcmp (argv[i], "-p") == 0)
		{
			progress_switch = TRUE;
		}
		else if (strcmp (argv[i], "-sysv") == 0)
		{
			sysv_switch = TRUE;
		}
		else if (strcmp (argv[i], "-grpid") == 0)
		{
			sysv_switch = TRUE;
		}
		else if (strcmp (argv[i], "-nouid") == 0)
		{
			nouid_switch = TRUE;
		}

		/* extraneous argument found */
		else
		{
			fprintf (stderr, "Warning [fullpath]:\n");
			fprintf (stderr, "\tExtraneous argument %s encountered.\n",
				argv[i]);
			fprintf (stderr,
				"\tThis argument will be ignored; execution continuing.\n");
		}
	}

	/* check for mutually-exclusive control switches */
	if (sysv_switch && nouid_switch)
	{
		fprintf (stderr, "Fatal error [fullpath]:\n");
		fprintf (stderr,
			"-tBoth System V (-sysv) and No-user-id (-nouid) were specified.\n");
		fprintf (stderr,
			"\tThese switches are mutually exclusive.  Please try again.\n");
		fprintf (stderr,
			"\tExecution terminating.\n");
	}

	/* report switch settings */
	printf ("%s\n", release_number);
	printf ("Control switch settings were:\n");

	if (progress_switch) 
	{
		printf ("\tProgress switch (-p) specified.\n");
	}
	else
	{
		printf ("\tProgress switch (-p) not specified\n");
	}

	if (sysv_switch) 
	{
		printf ("\tSystem V switch (-sysv or -grpid) specified.\n");
	}
	else
	{
		printf ("\tSystem V switch (-sysv or -grpid) not specified\n");
	}

	if (nouid_switch) 
	{
		printf ("\tNouid switch (-nouid) specified.\n");
	}
	else
	{
		printf ("\tNouid switch (-nouid) not specified\n");
	}

/*                 +---------------------------------------+                 */
/*-----------------|  read and process each "ls -lR" line  |-----------------*/
/*                 +---------------------------------------+                 */

	input_line_counter  = 0;
	output_line_counter = 0;

	sizeof_directory = 0;
	while ((result = gets (line)) != (char *) NULL)
	{
		input_line_counter++;

		/* throw away "total" lines, protect against empty directories */
		sscanf (line, "%s", key);
		if (strcmp (key, "total") == 0)
		{
			/* get size of the directory, used to protect against empties */
			sscanf (line, "%*s %d", &sizeof_directory);

			/* reset key so this test doesn't happen accidentally */
			sprintf (key, "");

			continue;
		}

		/* if dir is empty, simulate an empty line so we'll find next dir */
		if (sizeof_directory == 0)
		{
			sprintf (line, "");
		}

/*                 +---------------------------------------+                 */
/*-----------------|        recover directory name         |-----------------*/
/*                 +---------------------------------------+                 */

		/* blank line means the next line is the name of a new directory */
		/* so recover the directory name */
		if (strlen (line) == 0)
		{
			/* some ls-lRs contain several blank lines between sections. */
			/* read 0 to many blank lines */
			while
			(
				(strlen (line) == 0) &&
				((result = gets (line)) != (char *) NULL)
			)
			{
				/* do nothing */
				;
			}

			/* first line past a section of blank lines is the directory name */
			/* strip the ":" from the end of the directory name produced
			/* by ls-lR, remember the directory name */
			for (i = strlen (line); i >= 0; i--)
			{
				if (line[i] == ':')
				{
					line[i] = 0;
					break;
				}
			}

			strcpy (dirname, line);
		}

/*                 +---------------------------------------+                 */
/*-----------------|   process ordinary "ls -lR" lines     |-----------------*/
/*                 +---------------------------------------+                 */

		/* other lines are filenames */
		else
		{
			/* parse the "ls -lR" line */
			if (sysv_switch  == FALSE)
			{
				/* process BSD version of ls -lR, SysV ls -oR or SysV ls -lGR */
				if (nouid_switch == FALSE)
				{
					sscanf (line, "%s %*s %s %s %s %s %s %s",
						permissions, owner, size, month, day, year, filename);
				}
				else /* if (nouid_switch == TRUE) */
				{
					sscanf (line, "%s %s %s %s %s %s %s",
						permissions, size, month, day, year, filename);
				}
			}
			else if (sysv_switch == TRUE)
			{
				/* process SysV version of ls -lR */
				if (nouid_switch == FALSE)
				{
					sscanf (line, "%s %*s %s %*s %s %s %s %s %s",
						permissions, owner, size, month, day, year, filename);
				}
				else /* if (nouid_switch == TRUE) */
				{
					sscanf (line, "%s %s %*s %s %s %s %s %s",
						permissions, size, month, day, year, filename);
				}
			}

			/* some lines contain directory name or symbollic links; ignore */
			if ((permissions[0] == 'd') ||
				(permissions[0] == 'l'))
			{
				continue;
			}

/*                 +---------------------------------------+                 */
/*-----------------|        process filename lines         |-----------------*/
/*                 +---------------------------------------+                 */

			/* all other lines are filenames */
			else
			{
				output_line_counter++;

				/* convert file's month string to a number */
				if      (strcmp (month, "Jan") == 0) month_num = 1;
				else if (strcmp (month, "Feb") == 0) month_num = 2;
				else if (strcmp (month, "Mar") == 0) month_num = 3;
				else if (strcmp (month, "Apr") == 0) month_num = 4;
				else if (strcmp (month, "May") == 0) month_num = 5;
				else if (strcmp (month, "Jun") == 0) month_num = 6;
				else if (strcmp (month, "Jul") == 0) month_num = 7;
				else if (strcmp (month, "Aug") == 0) month_num = 8;
				else if (strcmp (month, "Sep") == 0) month_num = 9;
				else if (strcmp (month, "Oct") == 0) month_num = 10;
				else if (strcmp (month, "Nov") == 0) month_num = 11;
				else if (strcmp (month, "Dec") == 0) month_num = 12;

				/* convert string "day" to an integer */
				day_num = atoi (day);

				/* check the file's supposed year; if the "year" contains *
				/* a colon, the file was last modified in the last six months */
				/* and needs to be assigned to a year */
				/*if (strchr (year, ':') != NULL)*/
				this_year = 0;
				for (i = 0; i < strlen (year); i++)
				{
					/* if colon found, string is not a year */
					if (year[i] == ':')
					{
						/* get today's date and current time */
						time (&tnow);
						tmnow = localtime (&tnow);

						/* if month is greater than current month, */
						/* file is from last year */
						/*****************************************/
						/**        DANGER WILL ROBINSON         **/
						/** only good until turn of the century **/
						/*****************************************/
						if (month_num > (tmnow->tm_mon + 1))
						{
							year_num = 1900 + tmnow->tm_year - 1;
						}

						/* if month is the same or less, it's this year */
						else
						{
							year_num = 1900 + tmnow->tm_year;
						}

						this_year = 1;
						break;
					}
				}

				if (this_year != 1)
				{
					year_num = atoi (year);
				}

				/* mark executables */
				if ((permissions[3] == 'x') ||
					(permissions[6] == 'x') ||
					(permissions[9] == 'x'))
				{
					sprintf (executable, "[executable]");

					/* executables may have a * appended; remove if present */
					length = strlen (filename);
					if (filename[length - 1] == '*')
					{
						filename[length - 1] = 0;
					}
				}

				else
				{
					sprintf (executable, "");
				}

/*                 +---------------------------------------+                 */
/*-----------------|           print the result            |-----------------*/
/*                 +---------------------------------------+                 */

				if (strcmp (dirname, ".") == 0)
				{
					printf ("%4d/%02d/%02d   %10s  %s %s\n",
						year_num, month_num, day_num,
						size, filename, executable);
				}

				else
				{
					printf ("%4d/%02d/%02d   %10s  %s/%s %s\n",
						year_num, month_num, day_num,
						size, dirname, filename, executable);
				}

				if (progress_switch == TRUE)
				{
					if
					(
						((input_line_counter % PROGRESS_GRANULARITY) == 0) ||
						(input_line_counter == 1)
					)
					{
						fprintf (stderr,
							"\rfullpath progress:  input lines = %d, output lines = %d",
							input_line_counter, output_line_counter);
					}
				}
			}
		}
	}

/*                 +---------------------------------------+                 */
/*-----------------|                all done               |-----------------*/
/*                 +---------------------------------------+                 */

	if (progress_switch == TRUE)
	{
		fprintf (stderr,
			"\rfullpath progress:  input lines = %d, output lines = %d\n",
			input_line_counter, output_line_counter);
	}

	return (0);
}



/*===========================================================================*/
/* fullpath show_version - show the version that's being run                 */
/*===========================================================================*/

void show_version (void)
/* no arguments */
{
	fprintf (stderr, "%s\n", release_number);
	return;
}



/*===========================================================================*/
/* fullpath usage - show fullpath's options                                  */
/*===========================================================================*/

void usage (int argc, char **argv)
/* Input arguments: */
/* argc = number of command-line arguments */
/* argv = command line arguments */
{
	void show_version ();

	show_version ();
	fprintf (stderr,
		"Usage:    fullpath [options] < infile > outfile\n");
	fprintf (stderr,
		"Options:  -p     = show progress (number of input and output lines)\n");
	fprintf (stderr,
		"\t-sysV  = process System V-style ls-lR output\n");
	fprintf (stderr,
		"\t-grpid = process ls-lR output containing group id\n");
	fprintf (stderr,
		"\t-nouid = process ls-lR output without userids or # of links\n");
	fprintf (stderr,
		"\t-v     = show version number\n");
	fprintf (stderr,
		"\t-u     = show usage\n");

	fprintf (stderr, "Input is the output of \"ls -lR\".\n");
	fprintf (stderr,
		"Output is a listing of date, size, fully-qualified-pathname.\n");

	exit (0);
}
SHAR_EOF
fi # end of overwriting check
cd ..
#	End of shell archive
exit 0
