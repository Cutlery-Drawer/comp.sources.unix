Newsgroups: comp.sources.unix
From: joeshmoe@world.std.com (Joe Shmoe)
Subject: v28i209: sect - extract a section of lines from a file or stdin, Part01/01
Message-id: <1.789025717.28046@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: joeshmoe@world.std.com (Joe Shmoe)
Posting-Number: Volume 28, Issue 209
Archive-Name: sect/part01

#!/bin/sh
# This is a shell archive (produced by shar 3.50)
# To extract the files from this archive, save it to a file, remove
# everything above the "!/bin/sh" line above, and type "sh file_name".
#
# made 01/01/1995 05:52 UTC by joeshmoe@world
# Source directory /home/foyer/joeshmoe/src/sect-1.0
#
# existing files will NOT be overwritten unless -c is specified
# This format requires very little intelligence at unshar time.
# "if test", "echo", "true", and "sed" may be needed.
#
# This shar contains:
# length  mode       name
# ------ ---------- ------------------------------------------
#    855 -rw------- Makefile
#    565 -rw------- README
#   2174 -rw------- sect.1
#   4643 -rw------- sect.c
#
# ============= Makefile ==============
if test -f 'Makefile' -a X"$1" != X"-c"; then
	echo 'x - skipping Makefile (File already exists)'
else
echo 'x - extracting Makefile (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'Makefile' &&
X################
X# sect Makefile
X#
X# Last Modified: 01/01/1995
X
X
X
X#
X# You may have to change the following lines to suit your system
X#
X
XBINDIR = /usr/local/bin#  Directory to place the compiled binary
XMANDIR = /usr/local/man#  Directory to place the man page.
X
XCOMPILER = gcc#           If gcc is not available, un-comment the next line.
X#COMPILER = cc#           and re-comment the line above this one.
X
XBINPERMISSIONS = 755#     Executable permissions: 755 = -rwxr-xr-x
XMANPERMISSIONS = 644#     Man Page permissions:   644 = -rw-r--r--
X
X
X
X#
X# You should not have to change the following lines, unless you want a
X# drastically different installation.
X#
X
X
Xdefault: sect sect.man
X
Xsect:
X	$(COMPILER) -o $(BINDIR)/sect ./sect.c 
X	chmod $(BINPERMISSIONS) $(BINDIR)/sect
X
Xsect.man:
X	cp ./sect.1 $(MANDIR)/man1/
X	chmod $(MANPERMISSIONS) $(MANDIR)/man1/sect.1
SHAR_EOF
true || echo 'restore of Makefile failed'
fi
# ============= README ==============
if test -f 'README' -a X"$1" != X"-c"; then
	echo 'x - skipping README (File already exists)'
else
echo 'x - extracting README (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'README' &&
Xsect is a utility to cut a section out of a file (or the stdin).
X
XTo install:
X
X	1) edit 'Makefile' to suit your systems configuration
X
X	2) type 'make'
X
XIf you want to contact the author, send email to joeshmoe@world.std.com.
XAlso, future updates of this program will be available via WWW from:
X	http://www.misty.com/people/joeshmoe/
Xand via FTP from:
X	ftp.std.com
Xin the directory:
X	/pub/joeshmoe/sect
X
XYou are free to modify 'sect' in anyway you see fit.  All I ask is that you
Xsend me a copy of the modified version of the code.
X
X		Peace,
X		 Jascha Franklin-Hodge
SHAR_EOF
true || echo 'restore of README failed'
fi
# ============= sect.1 ==============
if test -f 'sect.1' -a X"$1" != X"-c"; then
	echo 'x - skipping sect.1 (File already exists)'
else
echo 'x - extracting sect.1 (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'sect.1' &&
X.TH SECT 1
X.SH NAME
Xsect \- extract a section of lines from a file or stdin
X.SH SYNOPSIS
Xsect [
X.B \-\fIq\fP
X] [
X.B \-\fIv\fP
X]
X.B \-\fIs\fPN
X.B \-\fIe\fPN|\-\fIl\fPN
X[
X.I filename
X]
X.SH DESCRIPTION
X.B \fIsect\fP
Xis a utility to cut a section out of a file or the standard input. It is the
Xequivalent of running the following UNIX command\-line:
X.RS
X.sp 1
X.B cat \fIfilename\fP
X| tail 
X.B \fIstart_line\fP
X| head
X.B -\fI num_lines\fP
X.RE
X.LP
X.B \fIsect\fP
Xoffers more flexability than the above UNIX command\-line.  The following
Xare valid options for
X.B \fIsect\fP:
X.SH OPTIONS
X.TP
X.B \fIfilename\fP
XFile to read from; If no file is specified, then
X.B \fIsect\fP
Xreads from the standard input.  Using a file name of - also forces
X.B \fIsect\fP
Xto read from stdin.
X.TP
X.B \-\fIs\fPN
XStarting-line;
X.B \fIN\fP
Xis the line number to begin at.  This must be set to at least 1.
X.TP
X.B \-\fIe\fPN
XEnding-line;
X.B \fIN\fP
Xis the line number to stop at (inclusive).  This must be set to a number 
Xgreater than the
X.B \fIstarting-line\fP.
XThis option takes precedence over the
X.B \-\fIl\fP
Xoption.
X.TP
X.B \-\fIl\fPN
XNumber-of-lines;
X.B \fIN\fP
Xis the number of lines to cut.  This option causes
X.B \fIsect\fP
Xto return all lines from the
X.B \fIstarting-line\fP
Xto
X.B \fIstarting-line\fP + \fInumber-of-lines\fP.
XThis option is ignored if a
X.B \-\fIe\fP
Xoption is specified
X.TP
X.B \-\fIq\fP
XQuiet-mode; Disables all error messages.  When used, this should be the first
Xitem on the command line. (optional)
X.TP
X.B \-\fIv\fP
XInverse; Shows all lines EXCEPT those specified by the other options. (optional)
X.SH "EXAMPLES"
XEach of the following will produce the same results:
X.LP
X.RS
Xsect -s2 -l4 sample.txt
X.RE
X.LP
X.RS
Xcat sample.txt | sect -s2 -e5
X.RE
X.LP
X.RS
Xcat sample.txt | sect -s2 -e5 -
X.RE
X.SH "SEE ALSO"
X.BR tail(1),
X.BR head(1),
X.BR cat(1)
X.SH "AUTHOR"
XJascha Franklin-Hodge (joeshmoe@world.std.com)
X.SH "OTHER NOTES"
XIf the
X.B \fIstarting-line\fP
Xspecified is higher than the total number of lines in the file, nothing is
Xdisplayed.
X.LP
XIf the
X.B \fIending-line\fP
Xspecified is higher than the total number of lines in the file, the entire
Xremainder of the file is displayed.
SHAR_EOF
true || echo 'restore of sect.1 failed'
fi
# ============= sect.c ==============
if test -f 'sect.c' -a X"$1" != X"-c"; then
	echo 'x - skipping sect.c (File already exists)'
else
echo 'x - extracting sect.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'sect.c' &&
X/*************************************************/
X/* NAME: sect                                    */
X/*                                               */
X/* AUTHOR: Jascha Franklin-Hodge                 */
X/*         joeshmoe@world.std.com                */
X/*                                               */
X/* PURPOSE: To take a group of lines             */
X/*          out of a file (or stdin)             */
X/*          and print them to stdout             */
X/*                                               */
X/* USAGE: sect [-q] [-v] -s# [-e# | -l#] [file]  */
X/*                                               */
X/*  -s#   start at line #                        */
X/*  -e#   end at line # (superceeds -l#)         */
X/*  -l#   take # lines                           */
X/*  -v    takes all lines EXCEPT those           */
X/*        specified                              */
X/*  -q    supress error messages                 */
X/*                                               */
X/* LAST MODIFIED: 01/01/95                       */
X/*************************************************/
X
X#define TRUE -1
X#define FALSE 0
X
X#include <stdlib.h>
X#include <stdio.h>
X
XFILE *input_file;     /*-* File to read from                              *-*/
X
Xchar *program_name;   /*-* the name of the program. (Usually 'sect')      *-*/
Xint start_line=0;     /*-* Line to start cutting at                       *-*/
Xint end_line=0;       /*-* Line to end cutting at                         *-*/
Xint from_stdin=FALSE; /*-* Is data from stdin rather then a file?         *-*/
Xint invert=FALSE;     /*-* Invert selection?                              *-*/
Xint quiet=FALSE;      /*-* Supress error messages                         *-*/
Xint current_line=1;   /*-* Counter: Keeps track of the current line       *-*/
Xint current_char=0;   /*-* Holds the value for the character being read   *-*/
X
Xmain (int argc, char *argv[]) {
X
X  program_name = argv[0]; /*-* store program name for later use *-*/
X
X/****** Process Command-Line options ******/
Xwhile ( (argc > 1) && (argv[1][0] == '-') && (argv[1][1] != NULL) ) {
X  switch (argv[1][1]) {  
X
X    case 'q':
X      quiet=TRUE;
X      break;
X
X    case 'v':   /*-* Invert Option                 *-*/
X      invert = TRUE;
X      break;
X
X    case 's':   /*-* Start line                    *-*/
X      start_line = atoi (&argv[1][2]);
X      if ( start_line < 1 ) {
X	if (quiet == FALSE) {
X	  printf ("ERROR: starting line must be greater than 0.\n");
X	}
X	usage();
X      }
X      break;
X
X    case 'e':  /*-* End Line                       *-*/
X      end_line = atoi (&argv[1][2]);
X      if ( end_line < start_line ) {
X	if (quiet == FALSE) {
X	  printf ("ERROR: end line must come after start line.\n");
X	}
X	usage();
X      }       
X      break;
X
X    case 'l':
X      if ( end_line == 0 ) {
X	end_line = (start_line + atoi (&argv[1][2]) ) - 1;
X	if ( end_line < 1 ) {
X	  if (quiet == FALSE) {
X	    printf ("ERROR: number of lines must be greater than 0.\n");
X	  }
X	  usage();
X	} 
X      }
X      break;
X
X    default:    /*-* Invalid Option                *-*/
X      if (quiet == FALSE) printf ("Illegal option -- %c\n",argv[1][1]);
X      usage (); /*-* Explain correct usage of sect *-*/
X  }
Xargc--;
Xargv++;
X}
X
X/****** Check to make sure all required parameters were specified     ******/
Xif ( (start_line < 1) || (end_line < 1 ) ) usage ();
X
X/****** Determine if input should be read from a file or from stdin.  ******/
X/****** If needed, open a file handle (input_file).                   ******/
Xif ( (argc > 1) && (strcmp ("-",argv[1]) ) ) {
X  input_file = fopen (argv[1], "r");
X  from_stdin = FALSE;
X  if ( input_file == NULL ) {
X    if (quiet == FALSE) printf ("ERROR: Cannot open input file (%s)\n",argv[1]);
X    usage ();
X  }
X} else {
X  from_stdin = TRUE;
X}
X
X/****** Main Loop                                                     ******/
Xwhile (1) {
X  current_char = input_next_char ();     /*-* Input char *-*/
X  if ( current_char == EOF ) break;
X  if ( invert == TRUE) {          /*-* Determine if char should be printed *-*/
X    if ( (current_line > end_line) || (current_line < start_line) ) print_char();
X  } else {
X    if ( (current_line <= end_line) && (current_line >= start_line) ) print_char();
X  }
X  if ( current_char == '\n' ) current_line++;  /*-* Increment line counter *-*/
X}
X
Xreturn (0);
X}
X
Xint print_char () {
X      printf ("%c",current_char);
X}
X
Xint input_next_char() {
X  if ( from_stdin == TRUE ) {
X    return (getchar());
X  } else {
X    return (fgetc(input_file));
X  }
X}
X
Xint usage () {
X  if (quiet == FALSE) {
X    printf ("Usage: %s [-q] [-v] -s# [-e# | -l#] [file]\n", program_name);
X  }
X  exit(1);
X}
X  
SHAR_EOF
true || echo 'restore of sect.c failed'
fi
exit 0
