Newsgroups: comp.sources.unix
From: marion@cs.tu-berlin.de (Klaus Rennecke)
Subject: v28i084: getnfswd-1.12 - a replacement for the getwd(2) system call, V1.12, Part01/02
Message-id: <1.773911886.10250@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: marion@cs.tu-berlin.de (Klaus Rennecke)
Posting-Number: Volume 28, Issue 84
Archive-Name: getnfswd-1.12/part01

This is the getnfswd, a replacement for the getwd(2) system call.

Getnfswd and nfspwd are free software, see COPYING for details.

The getnfswd function tries to replace all directories in a path
which are automounted and thus are eligible to be dynamically unmounted.
For all `normal' directories, getnfswd behaves as getwd(2).

The intention is to remove the possibility of having automounter mount points
in generated shell or configure scripts. This would be a great benefit,
since those scripts will generally fail if the automounter decided to
unmount the directory after the script has been generated. References
through the automounter mount points are not detected by the automounter.

There is a small program `nfspwd' for demonstration and command line usage. 
It takes no arguments and prints the current directory as given by getnfswd
on the standard output or an error message, if it failed. Usage is similar
to the system pwd command.

Please be aware that the searching performed by getnfswd is quite
complex, consuming a fair amount of cpu and system resources. Thus I think
it is _not_ appropriate for being used in a shell prompt function. The
situation becomes much worse when the getmntent emulation is used (this
is true for ULTRIX 4.2), since the mount(8) program output is interpreted.

Author:  Klaus Rennecke
         Louisenstr. 26
	 01099 Dresden
	 FRG

email:   marion@cs.tu-berlin.de

Have fun!

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 1 (of 2)."
# Contents:  MANIFEST Makefile.in README configure.in gethostname.c
#   getmntent.c getmntent.h getnfswd.c install.sh nfspwd.c scandir.c
#   scandir.h version.c.in
# Wrapped by marion@morgen on Mon Jul 11 07:11:09 1994
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'MANIFEST' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MANIFEST'\"
else
echo shar: Extracting \"'MANIFEST'\" \(949 characters\)
sed "s/^X//" >'MANIFEST' <<'END_OF_FILE'
X   File Name		Archive #	Description
X-----------------------------------------------------------
X COPYING                    2	Copying conditions
X MANIFEST                   1	This file
X Makefile.in                1	Source for Makefile
X README                     1	Read this for instructions
X configure                  2	Configure script, run with /bin/sh
X configure.in               1	Source for configure script
X gethostname.c              1	Replacement for BSD gethostname
X getmntent.c                1	Replacement for getmntent(3)
X getmntent.h                1	Header file for getmntent.c
X getnfswd.c                 1	Source for getnfswd()
X install.sh                 1	Shell script for installing files
X nfspwd.c                   1	Test program, works as pwd(1)
X scandir.c                  1	Replacement for BSD scandir(3)
X scandir.h                  1	Header file for scandir.c
X version.c.in               1	Print version string for nfspwd
END_OF_FILE
if test 949 -ne `wc -c <'MANIFEST'`; then
    echo shar: \"'MANIFEST'\" unpacked with wrong size!
fi
# end of 'MANIFEST'
fi
if test -f 'Makefile.in' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Makefile.in'\"
else
echo shar: Extracting \"'Makefile.in'\" \(4230 characters\)
sed "s/^X//" >'Makefile.in' <<'END_OF_FILE'
X#   $Id: Makefile.in,v 1.6 1994/07/11 05:10:53 marion Exp $
X#   Makefile for nfspwd
X#   Jun 93 by marion@cs.tu-berlin.de
X#
X#   Copyright (C) 1993, 1994 Klaus Rennecke
X#
X#   This program is free software; you can redistribute it and/or modify
X#   it under the terms of the GNU General Public License as published by
X#   the Free Software Foundation; either version 2 of the License, or
X#   (at your option) any later version.
X#
X#   This program is distributed in the hope that it will be useful,
X#   but WITHOUT ANY WARRANTY; without even the implied warranty of
X#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X#   GNU General Public License for more details.
X#
X#   You should have received a copy of the GNU General Public License
X#   along with this program; if not, write to the Free Software
X#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X#
X#
X# $Log: Makefile.in,v $
X# Revision 1.6  1994/07/11  05:10:53  marion
X# Wrong shar file name used
X#
X# Revision 1.5  1994/07/11  04:54:44  marion
X# Added installation instructions to README
X# Separated the version string to version.c
X#
X# Revision 1.4  1994/06/01  00:34:14  marion
X# Fixed shar generation.
X#
X# Revision 1.3  1994/05/31  23:56:47  marion
X# Put getnfswd and companions into libgetnfswd.a.
X# Added --version option to nfspwd.
X# Added check to set $MAKE variable.
X# Check for getwd system call.
X# More ANSIfying done.
X# Supply path name for mount program in getmntent.c.
X# Ported to sinix and DEC alpha. sinix is a special nuisance.
X#
X# Revision 1.2  1994/05/30  18:36:38  marion
X# Added more header file dependent configuration.
X# Tar make target added.
X#
X# Revision 1.1  1994/05/30  16:54:53  marion
X# Put under autoconf control.
X# Ported to ULTRIX 4.[23].
X# Added getmntent emulation for ULTRIX.
X# ANSIfied the sources.
X#
X# Log from old Makefile, pre autoconf version.
X# Revision 1.4  1994/01/10  15:14:36  marion
X# Port to solaris.
X#
X# Revision 1.3  1993/06/29  07:59:19  marion
X# New mechanism for auto.home mounted filesystems - now robust against
X#   file system soft link names differing from last source path name
X#   component. This is a bit slower and does a lot of stat'ing, but it
X#   is far more correct.
X#
X# Revision 1.2  1993/06/29  06:07:26  marion
X# Put under GGPL.
X#
X#
X
X
Xsrcdir	= @srcdir@
XVPATH	= @srcdir@
X
XCC	= @CC@
X
XINSTALL = @INSTALL@
XINSTALL_PROGRAM = @INSTALL_PROGRAM@
XINSTALL_DATA = @INSTALL_DATA@
X
Xprefix = /usr/local
Xexec_prefix = $(prefix)
Xbinprefix =
Xmanprefix =
X
Xbindir = $(exec_prefix)/bin
Xlibdir = $(exec_prefix)/lib
Xmandir = $(prefix)/man/man1
Xmanext = 1
X
XSRCS	= getnfswd.c nfspwd.c getmntent.c gethostname.c scandir.c
XHDRS	= getmntent.h scandir.h
XDOCS	= README COPYING MANIFEST
XDEFS	= @DEFS@
XLIBS	= libgetnfswd.a
XOBJS	= nfspwd.o version.o
XPROGS	= nfspwd
XDIST	= $(SRCS) $(HDRS) $(DOCS) \
X	  configure configure.in Makefile.in install.sh
X
XCFLAGS = -g # -O -Wall
XLDFLAGS = -g
X
XTAR	= /usr/gnu/bin/tar
XTAROPT	= z
XTAREXT	= .tar.gz
X
XAR	= ar
XRANLIB	= @RANLIB@
X
X
XVERSION	= @VERSION@
XSHELL	= /bin/sh
X@SET_MAKE@
X
Xall: $(PROGS) $(LIBS)
X
X.c.o:
X	$(CC) -c $(CPPFLAGS) $(DEFS) -I$(srcdir) $(CFLAGS) $<
X
Xinstall: all
X	$(INSTALL_PROGRAM) nfspwd $(bindir)/$(binprefix)nfspwd
X	$(INSTALL_DATA) libgetnfswd.a $(libdir)/libgetnfswd.a
X	$(RANLIB) $(libdir)/libgetnfswd.a
X
Xuninstall:
X	cd $(bindir); rm -f $(binprefix)nfspwd
X	-rm -f $(libdir)/getnfswd.o
X
Xcheck:
X	@echo No tests are supplied.
X
Xnfspwd: $(OBJS) $(LIBS)
X	$(CC) $(LDFLAGS) -o $@ $(OBJS) $(LIBS)
X
Xlibgetnfswd.a: getnfswd.o @LIBOBJS@
X	$(AR) cr $@ getnfswd.o @LIBOBJS@
X	$(RANLIB) $@
X
XMakefile: Makefile.in config.status;
X	$(SHELL) config.status
Xversion.c: version.c.in config.status;
X	$(SHELL) config.status
Xconfig.status: configure
X	$(SHELL) config.status --recheck
Xconfigure: configure.in
X	cd $(srcdir); autoconf
X
Xshar: $(DIST)
X	cd $(srcdir); makekit -m -ngetnfswd-$(VERSION).part \
X		-t'See file README for instructions.'
X
Xtar: $(DIST)
X	mkdir getnfswd-$(VERSION)
X	ln $(DIST:%=$(srcdir)/%) getnfswd-$(VERSION)
X	$(TAR) $(TAROPT)chf getnfswd-$(VERSION)$(TAREXT) getnfswd-$(VERSION)
X	rm -rf getnfswd-$(VERSION)
X
XTAGS: $(SRCS)
X	etags $(SRCS)
X
Xclean:
X	rm -f $(PROGS) *.o core
X
Xmostlyclean: clean
X
Xdistclean: clean
X	rm -f Makefile config.status
X
Xrealclean: distclean
X	rm -f TAGS
END_OF_FILE
if test 4230 -ne `wc -c <'Makefile.in'`; then
    echo shar: \"'Makefile.in'\" unpacked with wrong size!
fi
# end of 'Makefile.in'
fi
if test -f 'README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'README'\"
else
echo shar: Extracting \"'README'\" \(3411 characters\)
sed "s/^X//" >'README' <<'END_OF_FILE'
XThis is the getnfswd, a replacement for the getwd(2) system call.
X
XGetnfswd and nfspwd are free software, see COPYING for details.
X
XMotivation
X----------
X
XThe getnfswd function tries to replace all directories in a path
Xwhich are automounted and thus are eligible to be dynamically unmounted.
XFor all `normal' directories, getnfswd behaves as getwd(2).
X
XThe intention is to remove the possibility of having automounter mount points
Xin generated shell or configure scripts. This would be a great benefit,
Xsince those scripts will generally fail if the automounter decided to
Xunmount the directory after the script has been generated. References
Xthrough the automounter mount points are not detected by the automounter.
X
XThere is a small program `nfspwd' for demonstration and command line usage. 
XIt takes no arguments and prints the current directory as given by getnfswd
Xon the standard output or an error message, if it failed. Usage is similar
Xto the system pwd command.
X
XPlease be aware that the searching performed by getnfswd is quite
Xcomplex, consuming a fair amount of cpu and system resources. Thus I think
Xit is _not_ appropriate for being used in a shell prompt function. The
Xsituation becomes much worse when the getmntent emulation is used (this
Xis true for ULTRIX 4.2), since the mount(8) program output is interpreted.
X
XInstallation
X------------
X
XUsually, you should only need to run './configure', then 'make'. Configure
Xis a bourne shell script, generated with GNU autoconf. You may have to type
X'sh configure' on some systems which do not recognize the '#!/bin/sh'
Xdirective for shell scripts. Use './configure --help' to get a list of
Xavailable options.
X
XIf this fails (for example if you have no working bourne shell), you will
Xhave to replace the values in Makefile.in and version.c.in by hand. See below
Xfor an explanation how to do this.
X
XOnce configure has created the necessary files, type 'make' to compile the
Xlibrary and the test program. If this succeeds, both may be installed with
X'make install'.
X
XConfiguration by hand
X---------------------
X
XThe files 'Makefile' and 'version.c' are generated from the respective .in
Xfiles by the shell script 'configure'. All occurrences of @<name>@ in these
Xfiles are replaced with a value determined by configure. You may have a
Xlook at the configure script to guess these values, but since it is neither
Xshort nor trivial, here is a list of used names and their meanings:
X
X    CC			The C compiler
X    DEFS		The C preprocessor defines to use
X    INSTALL		The install program (don't use SYSV install!)
X    INSTALL_PROGRAM	How to install a program
X    INSTALL_DATA	How to install data
X    LIBOBJS		Additional object files for the library
X    RANLIB		The ranlib program, or '@:' if none needed
X    SET_MAKE		A variable assignment much like 'MAKE=make'
X    srcdir		The directory where the sources reside
X    VERSION		The version of the nfspwd program
X
XThe @DEFS@ are of the form '-DNAME=1' to control several preprocessor
Xconditionals in the sources. You will have to look at the sources and guess
Xthe right values. @VERSION@ is assigned literally in configure.in.
X@LIBOBJS@ mentions all replacement object files from gethostname.o,
Xgetmntent.o and scandir.o which are needed for the target system to be
Xincluded in libgetnfswd.a.
X
X
XAuthor:  Klaus Rennecke
X         Louisenstr. 26
X	 01099 Dresden
X	 FRG
X
Xemail:   marion@cs.tu-berlin.de
X
XHave fun!
END_OF_FILE
if test 3411 -ne `wc -c <'README'`; then
    echo shar: \"'README'\" unpacked with wrong size!
fi
# end of 'README'
fi
if test -f 'configure.in' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'configure.in'\"
else
echo shar: Extracting \"'configure.in'\" \(481 characters\)
sed "s/^X//" >'configure.in' <<'END_OF_FILE'
Xdnl Process this file with autoconf to produce a configure script.
XAC_INIT(getnfswd.c)
XAC_REVISION($Revision: 1.4 $)dnl
XVERSION=1.12
XAC_SUBST(VERSION)dnl
XAC_PROG_CC
XAC_ISC_POSIX
XAC_PROG_CPP
XAC_PROG_INSTALL
XAC_PROG_RANLIB
XAC_SET_MAKE
X
XAC_AIX
XAC_MINIX
XAC_CONST
X
XAC_DYNIX_SEQ
XAC_IRIX_SUN
X
XAC_STDC_HEADERS
XAC_HAVE_HEADERS(unistd.h string.h memory.h mntent.h sys/mnttab.h)
XAC_HAVE_FUNCS(getwd)
XAC_DIR_HEADER
XAC_REPLACE_FUNCS(gethostname scandir getmntent)
XAC_OUTPUT(Makefile version.c)
END_OF_FILE
if test 481 -ne `wc -c <'configure.in'`; then
    echo shar: \"'configure.in'\" unpacked with wrong size!
fi
# end of 'configure.in'
fi
if test -f 'gethostname.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'gethostname.c'\"
else
echo shar: Extracting \"'gethostname.c'\" \(2181 characters\)
sed "s/^X//" >'gethostname.c' <<'END_OF_FILE'
X/*
X    $Id: gethostname.c,v 1.3 1994/05/31 23:56:54 marion Exp $
X    gethostname.c - sys5 substitute for gethostname(2).
X    Feb 93 by marion@cs.tu-berlin.de
X
X    Copyright (C) 1993, 1994 Klaus Rennecke
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
X*/
X
X/* $Log: gethostname.c,v $
X * Revision 1.3  1994/05/31  23:56:54  marion
X * Put getnfswd and companions into libgetnfswd.a.
X * Added --version option to nfspwd.
X * Added check to set $MAKE variable.
X * Check for getwd system call.
X * More ANSIfying done.
X * Supply path name for mount program in getmntent.c.
X * Ported to sinix and DEC alpha. sinix is a special nuisance.
X *
X * Revision 1.2  1994/05/30  18:36:41  marion
X * Added more header file dependent configuration.
X * Tar make target added.
X *
X * Revision 1.1  1994/01/10  15:14:39  marion
X * Port to solaris.
X *
X */
X
X#if STDC_HEADERS || HAVE_STRING_H
X#include <string.h>
X/* An ANSI string.h and pre-ANSI memory.h might conflict.  */
X#if !STDC_HEADERS && HAVE_MEMORY_H
X#include <memory.h>
X#endif /* not STDC_HEADERS and HAVE_MEMORY_H */
X#else /* not STDC_HEADERS and not HAVE_STRING_H */
X#include <strings.h>
X/* memory.h and strings.h conflict on some systems.  */
X#endif /* not STDC_HEADERS and not HAVE_STRING_H */
X
X
X#include <sys/utsname.h>
X
Xint
X#if defined(__STDC__)
Xgethostname (char *name, int namelen)
X#else
Xgethostname (name, namelen)
Xchar	*name;
Xint	namelen;
X#endif
X{
X    struct utsname utsbuf;
X
X    if (uname (&utsbuf) == -1)
X	return -1;
X    strncpy (name, utsbuf.nodename, namelen);
X
X    return 0;
X}
END_OF_FILE
if test 2181 -ne `wc -c <'gethostname.c'`; then
    echo shar: \"'gethostname.c'\" unpacked with wrong size!
fi
# end of 'gethostname.c'
fi
if test -f 'getmntent.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'getmntent.c'\"
else
echo shar: Extracting \"'getmntent.c'\" \(3275 characters\)
sed "s/^X//" >'getmntent.c' <<'END_OF_FILE'
X/*
X    $Id: getmntent.c,v 1.2 1994/05/31 23:56:57 marion Exp $
X    getmntent.c - replacement for (set end get)^mntent.
X    May 94 by marion@cs.tu-berlin.de
X
X    Copyright (C) 1994 Klaus Rennecke
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X*/
X
X/* $Log: getmntent.c,v $
X * Revision 1.2  1994/05/31  23:56:57  marion
X * Put getnfswd and companions into libgetnfswd.a.
X * Added --version option to nfspwd.
X * Added check to set $MAKE variable.
X * Check for getwd system call.
X * More ANSIfying done.
X * Supply path name for mount program in getmntent.c.
X * Ported to sinix and DEC alpha. sinix is a special nuisance.
X *
X * Revision 1.1  1994/05/30  16:55:06  marion
X * Put under autoconf control.
X * Ported to ULTRIX 4.[23].
X * Added getmntent emulation for ULTRIX.
X * ANSIfied the sources.
X *
X */
X
X#include <stdio.h>
X
X#if HAVE_STRING_H
X#include <string.h>
X#else
X#include <strings.h>
X#endif
X
X#include <sys/param.h>
X
X#include "getmntent.h"
X
X/*
X * This is defined only for specific system types, since the output of
X * mount(8) is quite system dependend. It might be quite easy to port, though.
X */
X#if defined(__ultrix) || defined(__alpha)
X
X#if !defined(MOUNT_PROG)
X#if defined(__ultrix)
X#define MOUNT_PROG	"/bin/mount"
X#else
X#if defined(__alpha)
X#define MOUNT_PROG	"/usr/sbin/mount"
X#endif
X#endif
X#endif
X
XFILE *
Xsetmntent ()
X{
X    return popen (MOUNT_PROG, "r");	/* call mount(8) */
X}
X
X
Xstruct mntent *
X#if defined(__STDC__)
Xgetmntent(FILE *fp)
X#else /* __STDC__ */
Xgetmntent(fp)
XFILE	*fp;
X#endif /* __STDC__ */
X{
X    static mntent ent;			/* beware - static return value */
X    static char inbuf[MAXPATHLEN*2+40];	/* Two pathnames, type and options */
X    char *fill;				/* to parse filler words in output */
X    
X    if (!fgets (inbuf, sizeof (inbuf), fp))
X    	return 0;
X    
X    /*
X     * Parse mount(8) output:
X     *
X     * /dev/rz3a on / type ufs
X     * vogon:/export/dec on /tmp_amd/vogon/export/dec type nfs (rw,hard,ping=6000,timeo=10,retrans=5,intr,nosuid)
X     *	...
X     */
X     
X    if (!(ent.mnt_fsname = strtok (inbuf, " \t")))
X    	return 0;
X    if (!(fill = strtok ((char *)0, " \t")) || strcmp (fill, "on"))
X    	return 0;
X    if (!(ent.mnt_dir = strtok ((char *)0, " \t")))
X    	return 0;
X    if (!(fill = strtok ((char *)0, " \t")) || strcmp (fill, "type"))
X    	return 0;
X    if (!(ent.mnt_type = strtok ((char *)0, " \t\n")))
X    	return 0;
X	
X    ent.mnt_opts = strtok ((char *)0, "\n"); /* optional */
X    
X    return &ent;
X}
X
X
Xint
X#if defined(__STDC__)
Xendmntent (FILE *fp)
X#else /* __STDC__ */
Xendmntent (fp)
XFILE	*fp;
X#endif /* __STDC__ */
X{
X    return pclose (fp);
X}
X
X
X#endif /* __ultrix */
END_OF_FILE
if test 3275 -ne `wc -c <'getmntent.c'`; then
    echo shar: \"'getmntent.c'\" unpacked with wrong size!
fi
# end of 'getmntent.c'
fi
if test -f 'getmntent.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'getmntent.h'\"
else
echo shar: Extracting \"'getmntent.h'\" \(1494 characters\)
sed "s/^X//" >'getmntent.h' <<'END_OF_FILE'
X/*
X    $Id: getmntent.h,v 1.1 1994/05/30 16:55:09 marion Exp $
X    getmntent.h
X    May 94 by marion@cs.tu-berlin.de
X
X    Copyright (C) 1994 Klaus Rennecke
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X*/
X
X/* $Log: getmntent.h,v $
X * Revision 1.1  1994/05/30  16:55:09  marion
X * Put under autoconf control.
X * Ported to ULTRIX 4.[23].
X * Added getmntent emulation for ULTRIX.
X * ANSIfied the sources.
X *
X */
X
X#ifndef _getmntent_h
X#define _getmntent_h
X
X#define MNTENT_NO_STAT
X
X#if defined(__STDC__)
Xextern FILE *setmntent ();
Xextern struct mntent *getmntent(FILE *fp);
Xextern int endmntent (FILE *fp);
X#endif
X
Xtypedef struct mntent mntent;
Xstruct mntent {
X    char  *mnt_fsname;  /* name */
X    char  *mnt_dir;     /* mount point */
X    char  *mnt_type;    /* type */
X    char  *mnt_opts;    /* options */
X};
X
X#endif /* _getmntent_h */
END_OF_FILE
if test 1494 -ne `wc -c <'getmntent.h'`; then
    echo shar: \"'getmntent.h'\" unpacked with wrong size!
fi
# end of 'getmntent.h'
fi
if test -f 'getnfswd.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'getnfswd.c'\"
else
echo shar: Extracting \"'getnfswd.c'\" \(12590 characters\)
sed "s/^X//" >'getnfswd.c' <<'END_OF_FILE'
X/*
X    $Id: getnfswd.c,v 1.11 1994/05/31 23:57:00 marion Exp $
X    getnfswd.c - derive the nfs soft link path from unix getwd and
X		 mount table entries from automounter.
X    Feb 93 by marion@cs.tu-berlin.de
X
X    Copyright (C) 1993, 1994 Klaus Rennecke
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
X*/
X
X/* $Log: getnfswd.c,v $
X * Revision 1.11  1994/05/31  23:57:00  marion
X * Put getnfswd and companions into libgetnfswd.a.
X * Added --version option to nfspwd.
X * Added check to set $MAKE variable.
X * Check for getwd system call.
X * More ANSIfying done.
X * Supply path name for mount program in getmntent.c.
X * Ported to sinix and DEC alpha. sinix is a special nuisance.
X *
X * Revision 1.10  1994/05/30  18:36:42  marion
X * Added more header file dependent configuration.
X * Tar make target added.
X *
X * Revision 1.9  1994/05/30  16:55:13  marion
X * Put under autoconf control.
X * Ported to ULTRIX 4.[23].
X * Added getmntent emulation for ULTRIX.
X * ANSIfied the sources.
X *
X * Revision 1.8  1994/02/06  11:30:02  marion
X * Sigh - forgot ';'
X *
X * Revision 1.7  1994/02/06  11:27:18  marion
X * Added support for the BSD amd subdir option.
X *
X * Revision 1.6  1994/01/10  15:14:42  marion
X * Port to solaris.
X *
X * Revision 1.5  1993/06/29  08:44:05  marion
X * Fixed ugly memory leak in findlink.
X *
X * Revision 1.4  1993/06/29  07:59:21  marion
X * New mechanism for auto.home mounted filesystems - now robust against
X *   file system soft link names differing from last source path name
X *   component. This is a bit slower and does a lot of stat'ing, but it
X *   is far more correct.
X *
X * Revision 1.3  1993/06/29  06:07:28  marion
X * Put under GGPL.
X *
X * Revision 1.2  1993/02/21  19:07:18  marion
X * changed getnfswd to use /etc/mtab. This is a quite nice algorithm.
X * *pose*
X *
X */
X
X#include <stdio.h>
X
X#if defined(sinix) && !defined(__GNUC__)
X/* The sinix c compiler uses a crude include path, which breaks the
X   header file tests of configure. I was greatly tempted to neglect
X   portability to this system, so expect this to vanish any time. */
X#include <sys/mnttab.h>
X#include <sys/mntent.h>
X#define MOUNTED MNTTAB
X#define setmntent(n,m)  fopen((n),(m))
X#define endmntent(n)    fclose((n))
X#define mnt_fsname      mnt_special
X#define mnt_dir         mnt_mountp
X#define mntent          mnttab
X#else
X#if HAVE_MNTENT_H && !HAVE_SYS_MNTTAB_H
X#include <mntent.h>
X#else /* HAVE_MNTENT_H */
X#if defined(HAVE_SYS_MNTTAB_H)
X#include <sys/mnttab.h>
X/* #include <sys/mntent.h> probably obsolete solaris quirk */
X#define MOUNTED MNTTAB
X#define setmntent(n,m)	fopen((n),(m))
X#else /* SYS_MNTTAB */
X#include "getmntent.h"
X#endif /* SYS_MNTTAB */
X#endif /* HAVE_MNTENT_H */
X#endif /* sinix destaster */
X
X#include <netdb.h>
X#include <unistd.h>
X
X#include <malloc.h>
X#include <string.h>
X
X#include <sys/param.h>
X#include <sys/types.h>
X
X#include <sys/stat.h>
X#include "scandir.h"
X
Xextern int gethostname();
X
Xstatic char hostname[MAXHOSTNAMELEN] = ""; /* local host name */
X
Xstatic char **automounted = 0;		/* automounter directory cache */
Xstatic char **mountpaths = 0;		/* mount point list cache */
X
Xstatic char *rcsid =
X	"@(#) $Id: getnfswd.c,v 1.11 1994/05/31 23:57:00 marion Exp $";
X
X    /* read_mtab - Read in /etc/mtab. Store the information in 'automounted'
X		   'mountpaths' and the modified time in 'mtabtime'. On next
X		   call, if /etc/mtab was not changed, we needn't read in the
X		   table again.
X
X	Input:	'name' is usually the local host name, to filter entries for
X		locally mounted or automounter entries.
X
X	Output:	0 if the table could not be read or memory allocation failed,
X		else 1.
X    */
X
Xstatic int
X#if defined(__STDC__)
Xread_mtab (const char *name)
X#else /* __STDC__ */
Xread_mtab (name)
Xchar *name;
X#endif /* __STDC__ */
X{
X    FILE	*mtab;			/* open mnttab */
X#ifdef HAVE_SYS_MNTTAB_H
X
X    /* This is *&^@$@ annoying !!! stop this stupidity of sys5 */
X#define mntent mnttab
X#define mnt_type mnt_fstype
X#define mnt_dir mnt_mountp
X#define mnt_fsname mnt_special
X#define mnt_opts mnt_mntopts
X
X    struct mntent mntbuf;		/* buffer for getmntent information */
X#endif
X    struct mntent *mnt;			/* getmntent information */
X    int		nauto;			/* counter for automounted */
X    int		nmounted;		/* counter for mountpaths */
X    
X#if !defined(MNTENT_NO_STAT)
X    static time_t mtabmtime = 0;
X    struct stat	st;			/* for mtime check */
X
X    /* check if /etc/mtab changed */
X    if (stat (MOUNTED, &st)) {
X    	return 0;			/* failed stat */
X    } else if (mtabmtime == st.st_mtime) {
X    	return 1;			/* mtab not modified */
X    }
X    
X    mtabmtime = st.st_mtime;		/* remember mtime */
X    
X    /* open /etc/mtab */
X    if (!(mtab = setmntent (MOUNTED, "r"))) {
X	return 0;
X    }
X#else /* MNTENT_NO_STAT */
X    /* open /etc/mtab */
X    if (!(mtab = setmntent ())) {
X	return 0;
X    }
X#endif /* MNTENT_NO_STAT */
X    
X    /* free old entries in automounted */
X    if (automounted) {
X    	char **p;
X	
X	for (p = automounted; *p; p++)
X	    free (*p);
X	free (automounted);
X	automounted = 0;
X    }
X    
X    /* free old entries in mountpaths */
X    if (mountpaths) {
X    	char **p;
X	
X	for (p = mountpaths; *p; p++)
X	    free (*p);
X	free (mountpaths);
X	mountpaths = 0;
X    }
X    
X    /* search mtab for entries */
X    nauto = 0;
X    nmounted = 0;
X#ifndef HAVE_SYS_MNTTAB_H
X    while ((mnt = getmntent (mtab)))
X#else
X    mnt = &mntbuf;
X    while (!getmntent (mtab, mnt))
X#endif
X    {
X    	char *p;
X	
X	if ((p = strchr (mnt->mnt_fsname, ':'))) {
X	    if (!strncmp (mnt->mnt_fsname, name, p - mnt->mnt_fsname)) {
X	    	if (!automounted) {
X		    automounted = (char **)malloc (2 * sizeof (char**));
X		} else {
X		    automounted = (char **)realloc (automounted,
X			(nauto+2) * sizeof (char**));
X		}
X		automounted[nauto] = malloc (strlen (mnt->mnt_dir)+1);
X		strcpy (automounted[nauto], mnt->mnt_dir);
X		nauto++;
X		automounted[nauto] = 0;
X	    } else {
X	    	if (!mountpaths) {
X		    mountpaths = (char **)malloc (2 * sizeof (char**));
X		} else {
X		    mountpaths = (char **)realloc (mountpaths,
X			(nmounted+2) * sizeof (char**));
X		}
X		mountpaths[nmounted] = malloc (strlen (mnt->mnt_dir)+1);
X		strcpy (mountpaths[nmounted], mnt->mnt_dir);
X		nmounted++;
X		mountpaths[nmounted] = 0;
X	    }
X	}
X    }
X    
X#if !defined(__svr4__) || !defined(sun) /* !solaris */
X    endmntent (mtab);
X#endif
X    return 1;
X}
X
X/* findlink - find a link in prefix `stat'ing to match, prefix is storage */
Xstatic char *
X#if defined(__STDC__)
Xfindlink (char * prefix, struct stat * match)
X#else /* __STDC__ */
Xfindlink (prefix, match)
Xchar		*prefix;
Xstruct stat	*match;
X#endif /* __STDC__ */
X{
X    static struct dirent **namelist = 0;/* 1-entry directory cache */
X    static int		n_namelist;	/* entries in directory */
X    static struct stat	oldhome;	/* old stat result of /home */
X    struct stat		sthome;		/* stat result in /home */
X    char		*suffix;	/* suffix part pointer */
X    int			i;		/* loop counter */
X
X    suffix = prefix + strlen (prefix);
X
X    /* check if exists */
X    if (stat (prefix, &sthome)) {
X	/* does not exist */
X	return 0;
X    }
X
X    /* check if it matches the cache entry */
X    if (!namelist ||
X	sthome.st_dev != oldhome.st_dev ||
X	sthome.st_ino != oldhome.st_ino ||
X	sthome.st_mtime != oldhome.st_mtime) {
X
X	/* mismatch - re-read directory */
X	if (namelist) {
X	    for (i = 0; i < n_namelist; i++) {
X		if (namelist[i]) {
X		    free (namelist[i]);
X		}
X	    }
X	    free (namelist);
X	    namelist = 0;
X	}
X
X	n_namelist = scandir (prefix, &namelist, (int (*)())0, (int (*)())0);
X
X	if (n_namelist < 3) {
X	    /* only . and .. are not enough */
X	    return 0;
X	}
X
X	oldhome = sthome;
X    }
X
X    *suffix = '/';
X
X    /* loop through the entries */
X    for (i = 0; i < n_namelist; i++) {
X
X	/* check if exists */
X	strcpy (suffix+1, namelist[i]->d_name);
X
X	if (stat (prefix, &sthome)) {
X	    /* does not exist */
X	    continue;
X	}
X
X	/* compare the stat results */
X	if (sthome.st_dev == match->st_dev &&
X	    sthome.st_ino == match->st_ino) {
X
X	    /* prefix now contains the full path name of the link */
X	    return prefix;
X	}
X    }
X
X    /* not found - recover the prefix */
X    *suffix = 0;
X    return 0;
X}
X
X    /* getnfswd - A replacement for getwd(3) which tries to recover the
X		  original path name where the automounter linked the file
X		  system.
X
X	Output:	The current directory, either as the result of getwd, or
X		edited for automouned file systems if the link in the
X		automounter directory is found and matched.
X    */
X
Xchar *
X#if defined(__STDC__)
Xgetnfswd (char path[MAXPATHLEN])
X#else /* __STDC__ */
Xgetnfswd (path)
Xchar path[MAXPATHLEN];
X#endif /* __STDC__ */
X{
X#if HAVE_GETWD
X    extern char *getwd ();		/* the original */
X#else
X    extern char *getcwd ();		/* the original */
X#define getwd(p)	getcwd(p,MAXPATHLEN)
X#endif
X    char	home[MAXPATHLEN];	/* path name in local directory */
X    struct stat	sthome;			/* stat result in local directory */
X    struct stat	stnfs;			/* stat result nfs mounted */
X    char	**homes;		/* scan through automounter list */
X    char	*ret;			/* return value */
X
X    if ((ret = getwd (path))) {
X	/* get local hostname */
X    	if (!hostname[0] && gethostname (hostname, sizeof (hostname))) {
X	    return 0;
X	}
X	
X	/* read in entries from /etc/mtab, if modified */
X	if (!read_mtab (hostname)) {
X	    return 0;
X	}
X	
X	/* loop through automounter directories */
X	for (homes = automounted; homes && *homes; homes++) {
X	    char *cont;
X	    char **mount;		/* scan through mount points */
X
X	    /* copy automounter path */
X	    strcpy (home, *homes);
X	    cont = home + strlen (home); /* end of home path */
X	    
X	    /* loop through nfs mount points */
X	    for (mount = mountpaths; mount && *mount; mount++) {
X		char *link;
X		int len;
X		
X		/* is path mounted at mount ? */
X		len = strlen (*mount);
X		if (strncmp (*mount, path, len) ||
X		    (path[len] != '/' && path[len] != 0)) {
X		    continue;
X		}
X
X		/* check for existence of mount point */
X		if (stat (*mount, &stnfs)) {
X		    continue;
X		}
X
X		if ((link = strchr (*mount+1, '/')) &&
X		    !strncmp (link, home, strlen (home))) {
X		    if (!stat (link, &sthome) &&
X			sthome.st_dev == stnfs.st_dev &&
X			sthome.st_ino == stnfs.st_ino) {
X			/* append the rest to home */
X			strcat (home, path+(link-*mount)+strlen(home));
X			/* copy to return buffer */
X			strcpy (path, home);
X			return ret;
X		    }
X		}
X
X		/* find possible link name in auto.home mounted fashion */
X		if (findlink (home, &stnfs)) {
X		    /* from auto.home: append name to mount link */
X		    strcat (home, path+len);
X		    /* copy to return buffer */
X		    strcpy (path, home);
X		    return ret;
X		}
X
X		/* next possibility: from auto.direct */
X
X		/* check if exists */
X		if (stat (home, &sthome)) {
X		    /* does not exist */
X    	    	    continue;
X		}
X
X		/* compare the stat results */
X		if (sthome.st_dev == stnfs.st_dev &&
X		    sthome.st_ino == stnfs.st_ino) {
X		    /* append the rest to home */
X		    strcat (home, path+len);
X		    /* copy to return buffer */
X		    strcpy (path, home);
X		    return ret;
X		}
X
X		/* next possibility: amd subdir option */
X		if (path[len] == '/' && path[len+1] &&
X		    (link = strchr (path+len+1, '/'))) {
X		    /* append next path component and /.. to home */
X		    strncpy (cont, path+len, (link-path)-len);
X		    cont[(link-path)-len] = 0;
X		    strcat (cont, "/..");
X
X		    /* check if link and subdir exists */
X		    if (!stat (home, &sthome) &&
X			sthome.st_dev == stnfs.st_dev &&
X			sthome.st_ino == stnfs.st_ino) {
X
X			/* append the rest to home */
X			strcpy (cont+(link-path)-len, link);
X			/* copy to return buffer */
X			strcpy (path, home);
X			    return ret;
X
X		    } else {
X			/* repair home path */
X			*cont = 0;
X		    }
X		}
X		
X		/*
X		 * We may think it would be wise to break here, because
X		 * we already know that the path was mounted at mount and
X		 * is unlikely to be mounted elsewhere. But you _may_ mount
X		 * a nfs file system below the mount point of another.
X		 */
X	    }
X	}
X    }
X	
X    return ret;
X    
X    (void)*rcsid;
X}
END_OF_FILE
if test 12590 -ne `wc -c <'getnfswd.c'`; then
    echo shar: \"'getnfswd.c'\" unpacked with wrong size!
fi
# end of 'getnfswd.c'
fi
if test -f 'install.sh' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'install.sh'\"
else
echo shar: Extracting \"'install.sh'\" \(2186 characters\)
sed "s/^X//" >'install.sh' <<'END_OF_FILE'
X#!/bin/sh
X
X#
X# install - install a program, script, or datafile
X# This comes from X11R5; it is not part of GNU.
X#
X# $XConsortium: install.sh,v 1.2 89/12/18 14:47:22 jim Exp $
X#
X# This script is compatible with the BSD install script, but was written
X# from scratch.
X#
X
X
X# set DOITPROG to echo to test this script
X
X# Don't use :- since 4.3BSD and earlier shells don't like it.
Xdoit="${DOITPROG-}"
X
X
X# put in absolute paths if you don't have them in your path; or use env. vars.
X
Xmvprog="${MVPROG-mv}"
Xcpprog="${CPPROG-cp}"
Xchmodprog="${CHMODPROG-chmod}"
Xchownprog="${CHOWNPROG-chown}"
Xchgrpprog="${CHGRPPROG-chgrp}"
Xstripprog="${STRIPPROG-strip}"
Xrmprog="${RMPROG-rm}"
X
Xinstcmd="$mvprog"
Xchmodcmd=""
Xchowncmd=""
Xchgrpcmd=""
Xstripcmd=""
Xrmcmd="$rmprog -f"
Xmvcmd="$mvprog"
Xsrc=""
Xdst=""
X
Xwhile [ x"$1" != x ]; do
X    case $1 in
X	-c) instcmd="$cpprog"
X	    shift
X	    continue;;
X
X	-m) chmodcmd="$chmodprog $2"
X	    shift
X	    shift
X	    continue;;
X
X	-o) chowncmd="$chownprog $2"
X	    shift
X	    shift
X	    continue;;
X
X	-g) chgrpcmd="$chgrpprog $2"
X	    shift
X	    shift
X	    continue;;
X
X	-s) stripcmd="$stripprog"
X	    shift
X	    continue;;
X
X	*)  if [ x"$src" = x ]
X	    then
X		src=$1
X	    else
X		dst=$1
X	    fi
X	    shift
X	    continue;;
X    esac
Xdone
X
Xif [ x"$src" = x ]
Xthen
X	echo "install:  no input file specified"
X	exit 1
Xfi
X
Xif [ x"$dst" = x ]
Xthen
X	echo "install:  no destination specified"
X	exit 1
Xfi
X
X
X# If destination is a directory, append the input filename; if your system
X# does not like double slashes in filenames, you may need to add some logic
X
Xif [ -d $dst ]
Xthen
X	dst="$dst"/`basename $src`
Xfi
X
X# Make a temp file name in the proper directory.
X
Xdstdir=`dirname $dst`
Xdsttmp=$dstdir/#inst.$$#
X
X# Move or copy the file name to the temp name
X
X$doit $instcmd $src $dsttmp
X
X# and set any options; do chmod last to preserve setuid bits
X
Xif [ x"$chowncmd" != x ]; then $doit $chowncmd $dsttmp; fi
Xif [ x"$chgrpcmd" != x ]; then $doit $chgrpcmd $dsttmp; fi
Xif [ x"$stripcmd" != x ]; then $doit $stripcmd $dsttmp; fi
Xif [ x"$chmodcmd" != x ]; then $doit $chmodcmd $dsttmp; fi
X
X# Now rename the file to the real destination.
X
X$doit $rmcmd $dst
X$doit $mvcmd $dsttmp $dst
X
X
Xexit 0
END_OF_FILE
if test 2186 -ne `wc -c <'install.sh'`; then
    echo shar: \"'install.sh'\" unpacked with wrong size!
fi
chmod +x 'install.sh'
# end of 'install.sh'
fi
if test -f 'nfspwd.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'nfspwd.c'\"
else
echo shar: Extracting \"'nfspwd.c'\" \(2579 characters\)
sed "s/^X//" >'nfspwd.c' <<'END_OF_FILE'
X/*
X    $Id: nfspwd.c,v 1.6 1994/07/11 04:54:51 marion Exp $
X    nfspwd.c - show getnfswd result.
X    Jun 93 by marion@cs.tu-berlin.de
X
X    Copyright (C) 1993, 1994 Klaus Rennecke
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
X*/
X
X/* $Log: nfspwd.c,v $
X * Revision 1.6  1994/07/11  04:54:51  marion
X * Added installation instructions to README
X * Separated the version string to version.c
X *
X * Revision 1.5  1994/05/31  23:57:03  marion
X * Put getnfswd and companions into libgetnfswd.a.
X * Added --version option to nfspwd.
X * Added check to set $MAKE variable.
X * Check for getwd system call.
X * More ANSIfying done.
X * Supply path name for mount program in getmntent.c.
X * Ported to sinix and DEC alpha. sinix is a special nuisance.
X *
X * Revision 1.4  1994/05/30  18:36:44  marion
X * Added more header file dependent configuration.
X * Tar make target added.
X *
X * Revision 1.3  1994/05/30  16:55:18  marion
X * Put under autoconf control.
X * Ported to ULTRIX 4.[23].
X * Added getmntent emulation for ULTRIX.
X * ANSIfied the sources.
X *
X * Revision 1.2  1993/06/29  06:07:29  marion
X * Put under GGPL.
X *
X */
X
X#include <stdio.h>
X#include <errno.h>
X#include <sys/param.h>
X
Xextern int getnfswd ();
Xextern void version ();
Xstatic int usage ();
X
Xint
X#if defined(__STDC__)
Xmain (int argc, char **argv)
X#else
Xmain (argc, argv)
Xint	argc;
Xchar	**argv;
X#endif
X{
X    char path[MAXPATHLEN];
X
X    if (argc != 1)
X      {
X	if (argc == 2)
X	  {
X	    if (!strcmp (argv[1], "--version"))
X	      {
X		version ();
X		return 0;
X	      }
X	    else
X	      return usage ();
X	  }
X	else
X	  return usage ();
X      }
X
X    if (getnfswd (path))
X      {
X	printf ("%s\n", path);
X      }
X    else
X      {
X	extern int errno;
X	int save_errno = errno;
X
X	fprintf (stderr, "getnfswd: ");
X	errno = save_errno;
X	perror (path);
X	return 1;
X      }
X
X    return 0;
X}
X
Xstatic int
Xusage ()
X{
X    fputs ("nfspwd usage: nfspwd [--version]\n", stderr);
X    return 1;
X}
END_OF_FILE
if test 2579 -ne `wc -c <'nfspwd.c'`; then
    echo shar: \"'nfspwd.c'\" unpacked with wrong size!
fi
# end of 'nfspwd.c'
fi
if test -f 'scandir.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'scandir.c'\"
else
echo shar: Extracting \"'scandir.c'\" \(3017 characters\)
sed "s/^X//" >'scandir.c' <<'END_OF_FILE'
X/*
X    $Id: scandir.c,v 1.4 1994/05/31 23:57:05 marion Exp $
X    scandir.c - sys5 substitute for scandir.
X    Feb 93 by marion@cs.tu-berlin.de
X
X    Copyright (C) 1993, 1994 Klaus Rennecke
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
X*/
X
X/* $Log: scandir.c,v $
X * Revision 1.4  1994/05/31  23:57:05  marion
X * Put getnfswd and companions into libgetnfswd.a.
X * Added --version option to nfspwd.
X * Added check to set $MAKE variable.
X * Check for getwd system call.
X * More ANSIfying done.
X * Supply path name for mount program in getmntent.c.
X * Ported to sinix and DEC alpha. sinix is a special nuisance.
X *
X * Revision 1.3  1994/05/30  18:36:46  marion
X * Added more header file dependent configuration.
X * Tar make target added.
X *
X * Revision 1.2  1994/05/30  16:55:21  marion
X * Put under autoconf control.
X * Ported to ULTRIX 4.[23].
X * Added getmntent emulation for ULTRIX.
X * ANSIfied the sources.
X *
X * Revision 1.1  1994/01/10  15:14:44  marion
X * Port to solaris.
X *
X */
X
X#if STDC_HEADERS
X#include <stdlib.h>
X#endif
X
X#if STDC_HEADERS || HAVE_STRING_H
X#include <string.h>
X/* An ANSI string.h and pre-ANSI memory.h might conflict.  */
X#if !STDC_HEADERS && HAVE_MEMORY_H
X#include <memory.h>
X#endif /* not STDC_HEADERS and HAVE_MEMORY_H */
X#else /* not STDC_HEADERS and not HAVE_STRING_H */
X#include <strings.h>
X/* memory.h and strings.h conflict on some systems.  */
X#endif /* not STDC_HEADERS and not HAVE_STRING_H */
X
X#include "scandir.h"
X
Xint
X#if defined(__STDC__)
Xscandir (const char *path, struct dirent ***namelist,
X	 int (*select)(), int (*compare)())
X#else /* __STDC__ */
Xscandir (path, namelist, select, compare)
Xchar		*path;
Xstruct dirent	***namelist;
Xint		(*select)();
Xint		(*compare)();
X#endif /* __STDC__ */
X{
X    struct dirent	*entry;
X    struct dirent	**newlist;
X    int			n_entry = 0;
X    DIR			*dir;
X
X    if (!(dir = opendir (path))) {
X	return -1;
X    }
X
X    if (!(newlist = (struct dirent **)malloc (sizeof (*newlist)))) {
X	return -1;
X    }
X
X    while ((entry = readdir (dir))) {
X	if (!select || (*select)(entry)) {
X	    n_entry++;
X	    newlist = (struct dirent **)
X	    	realloc (newlist, (n_entry + 1) * sizeof (*newlist));
X	    newlist[n_entry-1] = entry;
X	}
X    }
X    newlist[n_entry] = 0;
X
X    if (compare) {
X	qsort (newlist, (size_t)n_entry, sizeof (*newlist), compare);
X    }
X
X    *namelist = newlist;
X    return n_entry;
X}
END_OF_FILE
if test 3017 -ne `wc -c <'scandir.c'`; then
    echo shar: \"'scandir.c'\" unpacked with wrong size!
fi
# end of 'scandir.c'
fi
if test -f 'scandir.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'scandir.h'\"
else
echo shar: Extracting \"'scandir.h'\" \(2160 characters\)
sed "s/^X//" >'scandir.h' <<'END_OF_FILE'
X/*
X    $Id: scandir.h,v 1.2 1994/05/31 23:57:08 marion Exp $
X    scandir.h - declare direct/dirent and scandir
X    May 94 by marion@cs.tu-berlin.de
X
X    Copyright (C) 1994 Klaus Rennecke
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X*/
X
X/* $Log: scandir.h,v $
X * Revision 1.2  1994/05/31  23:57:08  marion
X * Put getnfswd and companions into libgetnfswd.a.
X * Added --version option to nfspwd.
X * Added check to set $MAKE variable.
X * Check for getwd system call.
X * More ANSIfying done.
X * Supply path name for mount program in getmntent.c.
X * Ported to sinix and DEC alpha. sinix is a special nuisance.
X *
X * Revision 1.1  1994/05/30  16:57:27  marion
X * Incorporated dir header files code from autoconf documentation.
X *
X */
X
X#ifndef _scandir_h
X#define _scandir_h
X
X#ifdef HAVE_UNISTD_H
X#include <sys/types.h>
X#include <unistd.h>
X#endif
X
X/* unistd.h defines _POSIX_VERSION on POSIX.1 systems.  */
X#if defined(DIRENT) || defined(_POSIX_VERSION)
X#include <dirent.h>
X#define NLENGTH(dirent) (strlen((dirent)->d_name))
X#else /* not (DIRENT or _POSIX_VERSION) */
X#define dirent direct
X#define NLENGTH(dirent) ((dirent)->d_namlen)
X#ifdef SYSNDIR
X#include <sys/ndir.h>
X#endif /* SYSNDIR */
X#ifdef SYSDIR
X#include <sys/dir.h>
X#endif /* SYSDIR */
X#ifdef NDIR
X#include <ndir.h>
X#endif /* NDIR */
X#endif /* not (DIRENT or _POSIX_VERSION) */
X
X#if defined(__STDC__)
Xextern int scandir (const char *path, struct dirent ***namelist,
X	            int (*select)(), int (*compare)());
X#endif
X
X#endif /* _scandir_h */
END_OF_FILE
if test 2160 -ne `wc -c <'scandir.h'`; then
    echo shar: \"'scandir.h'\" unpacked with wrong size!
fi
# end of 'scandir.h'
fi
if test -f 'version.c.in' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'version.c.in'\"
else
echo shar: Extracting \"'version.c.in'\" \(1448 characters\)
sed "s/^X//" >'version.c.in' <<'END_OF_FILE'
X/*
X    $Id: version.c.in,v 1.1 1994/07/11 04:54:53 marion Exp $
X    version.c - print nfspwd version information
X    Jun 93 by marion@cs.tu-berlin.de
X
X    Copyright (C) 1994 Klaus Rennecke
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
X*/
X
X/* $Log: version.c.in,v $
X# Revision 1.1  1994/07/11  04:54:53  marion
X# Added installation instructions to README
X# Separated the version string to version.c
X#
X */
X
X#include <stdio.h>
X#include <errno.h>
X#include <sys/param.h>
X
Xextern int getnfswd ();
Xstatic int usage ();
X
Xstatic char version_text[] =
X"nfspwd version @VERSION@, Copyright 1993, 1994 Klaus Rennecke\n\
Xnfspwd is free software and comes with ABSOLUTELY NO WARRANTY; see file\n\
XCOPYING which is distributed with this program.\n";
X
Xvoid
Xversion ()
X{
X  fputs (version_text, stdout);
X}
END_OF_FILE
if test 1448 -ne `wc -c <'version.c.in'`; then
    echo shar: \"'version.c.in'\" unpacked with wrong size!
fi
# end of 'version.c.in'
fi
echo shar: End of archive 1 \(of 2\).
cp /dev/null ark1isdone
MISSING=""
for I in 1 2 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked both archives.
    echo "See file README for instructions."
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
