Newsgroups: comp.sources.unix
From: markh@vanbc.wimsey.com (Mark C. Henderson)
Subject: v28i138: hostid-sun-1.3.1 - change hostid on a Sun, V1.3.1, Part03/03
References: <1.783419175.2365@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: markh@vanbc.wimsey.com (Mark C. Henderson)
Posting-Number: Volume 28, Issue 138
Archive-Name: hostid-sun-1.3.1/part03

#!/bin/sh
# This is part 03 of a multipart archive
# ============= hid-1.3.1/sidump.c ==============
if test ! -d 'hid-1.3.1'; then
    echo 'x - creating directory hid-1.3.1'
    mkdir 'hid-1.3.1'
fi
if test -f 'hid-1.3.1/sidump.c' -a X"$1" != X"-c"; then
	echo 'x - skipping hid-1.3.1/sidump.c (File already exists)'
else
echo 'x - extracting hid-1.3.1/sidump.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hid-1.3.1/sidump.c' &&
/* modify hostid reported by gethostid and sysinfo for Solaris 2.3 and 1.1
X   dynamically linked binaries 
Placed in the public domain by the author 
Mark Henderson - markh@wimsey.bc.ca - 18 July 1994
X
This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose. You use
this program at your own risk. The author disclaims responsibility for
any damages that might result from the use of this program, even
if they result from negligence on the part of the author.
X
Also, please don't use this program to steal software. The intended
use is for emergency situations where an application has to be moved from
one computer to another (e.g. in the event of a hardware malfunction)
and licence keys cannot be obtained quickly from the vendor. Many
vendors will not supply licence keys outside of business hours.
X
New feature to be included in version 1.0 of the package: 18 July 1994
the environment variable HID can be set to the desired hostid in hex.
(no leading 0x, a-f lower case)
X
In retrospect, I should have written this in perl.
X
Instructions:
X
Solaris 1.x
1. compile this program
X    cc -o sidump sidump.c
2. run it with the desired hostid as the first parameter and save the output
X    in a file with the extension .c 
X    ./sidump b0b1fb0b >foo.c
3. make foo.o from foo.c
X      gcc -fpic -c foo.c
X      ld foo.o  -assert pure-text -o foo.so
X   OR
X      cc -PIC -c foo.c
X      ld foo.o -assert pure-text -o foo.so
4. export LD_PRELOAD=$PWD/foo.so      (ksh)
X   setenv LD_PRELOAD $PWD/foo.so      (csh)
5. run the desired program
X
here's a sample session
feral> cc -o sidump sidump.c
feral> ./sidump b0b1fb0b >foo.c
feral> cc -PIC -c foo.c
feral> ld -assert pure-text foo.o -o foo.so
feral> export LD_PRELOAD=$PWD/foo.so
feral> lmhostid
feral> lmhostid - Copyright (C) 1989, 1991 Highland Software, Inc.
The FLEXlm host ID of this machine is "b0b1fb0b"
feral> export HID=72000000
feral> lmhostid
lmhostid - Copyright (C) 1989, 1991 Highland Software, Inc.
The FLEXlm host ID of this machine is "72000000"
X
--------------
Solaris 2.x
X
1. compile this program
X    gcc -DSOLARIS2 -o sidump sidump.c
2. run it with the desired hostid as the first parameter and save the output
X    in a file with the extension .c 
X    ./sidump b0b1fb0b >foo.c
3. make foo.o from foo.c
X      gcc -fpic -c foo.c
X      ld foo.o  -G -o foo.so
4. export LD_PRELOAD=$PWD/foo.so      (ksh)
X   setenv LD_PRELOAD $PWD/foo.so      (csh)
5. run the desired program
X
here's a sample session:
X
ratatosk> gcc -o sidump sidump.c
ratatosk> ./sidump b0b1fb0b >foo.c
ratatosk> gcc -fpic -c foo.c
ratatosk> ld foo.o  -G -o foo.so
ratatosk> export LD_PRELOAD=$PWD/foo.so
ratatosk> hostid
b0b1fb0b
ratatosk> lmhostid
lmhostid - Copyright (C) 1989, 1991 Highland Software, Inc.
The FLEXlm host ID of this machine is "b0b1fb0b"
ratatosk> export HID=72000000
ratatosk> lmhostid
lmhostid - Copyright (C) 1989, 1991 Highland Software, Inc.
The FLEXlm host ID of this machine is "72000000"
X
X
*/
X
X
#include <stdio.h>
#ifdef SOLARIS2
#include <sys/systeminfo.h>
int commands[] = {SI_HW_SERIAL, SI_SYSNAME,SI_HOSTNAME,
X SI_RELEASE,SI_VERSION,SI_MACHINE,SI_ARCHITECTURE,SI_HW_PROVIDER,
X SI_SRPC_DOMAIN};
#endif
X
#define NCOMMANDS (sizeof(commands)/sizeof(int))
X
main(argc,argv)
int argc;
char *argv[];
{
X    int i,j;
X    char buf[1024];
X    unsigned int hostid;
X    if (argc != 2) {
X        fprintf(stderr, "usage: %s hostid\n", argv[0]);
X        exit(1);
X    }
X    sscanf(argv[1], "%x", &hostid);
X    printf("#include <string.h>\n");
X    printf("#include <stdlib.h>\n");
X    printf("extern char **environ;\n");
X    printf("unsigned int xyzzy_ghid()\n");
X    printf("{\n");
X    printf("    int i,j,c; char **s; char *e;\n");
X    printf("    unsigned int hid;\n");
X    printf("    hid = 0;\n");
X    printf("    s = environ;\n");
X    printf("    for (; *s; s++) {\n");
X    printf("        e = *s;\n");
X    printf("        if (*e++ == \'H\' \n");
X    printf("            && (*e++ == \'I\')\n");
X    printf("            && (*e++ == \'D\')\n");
X    printf("            && (*e++ == \'=\'))  {\n");
X    printf("                for (j=28; (*e) && j>=0; j -=4 ) {\n");
X    printf("                    c = (-1);\n");
X    printf("                    if (*e >= \'0\' && *e <= \'9\') \n");
X    printf("                        c = *e - \'0\';\n");
X    printf("                    if (*e >= \'a\' && *e <= \'f\') \n");
X    printf("                        c = *e - \'a\' + 10;\n");
X    printf("                    e++;\n");
X    printf("                    if (c == (-1))\n");
X    printf("                        break;\n");
X    printf("                    hid = hid | (c << j);\n");
X    printf("                }\n");
X    printf("            return hid;\n");
X    printf("        }\n");
X    printf("    }\n");
X    printf("    return 0;\n");
X    printf("}\n");
X    printf("gethostid() { \n");
X    printf("unsigned x;\n");
X    printf("if (x=xyzzy_ghid()) \n");
X    printf("{return x; }");
X    printf("else return 0x%08x; }\n", hostid);
#ifdef SOLARIS2
X    printf("long sysinfo(command,buf,count)\nint command;\nchar *buf;\n");
X    printf("long count;\n{\nchar *c = buf; int i; unsigned int x,y;\n");
X    printf("switch(command) { \n");
X    printf("case %u:\n", commands[0]);
X    sprintf(buf,"%u",hostid);  /* should this be %010u ??? */
X    printf("if (!(x = xyzzy_ghid())) {\n");
X    for (j=0; j < strlen(buf); j++)
X        printf("if (c < (buf + count)) *c++ = '%c';\n", buf[j]);
X    printf("if (c < (buf + count)) *c++ = 0;\n");
X    printf("buf[count-1] = 0;\n");
X    printf("}\n");
X    printf("else {\n");
X    printf("y = 1000000000;\n");
X    printf("for (i=0; (i<10) && (i<count); i++) {\n");
X    printf("buf[i] = (x/y) + '0'; x -= (x/y) * y;");
X    printf("y/=10; }\n");
X    printf("if (count < 11) buf[count - 1] = 0 ; else buf[10] = 0;}\n");
X    printf("break;\n");
X    for (i=1; i< NCOMMANDS; i++) {
X        sysinfo(commands[i], buf,1024);
X        printf("case %u:\n", commands[i]);
X        for (j=0; j < strlen(buf); j++)
X            printf("if (c < (buf + count)) *c++ = '%c';\n", buf[j]);
X        printf("if (c < (buf + count)) *c++ = 0;\n");
X        printf("buf[count-1] = 0;\n");
X        printf("break;\n");
X    }
X    printf("default: \nreturn(-1); \n}\n");
X    printf("return(strlen(buf) + 1);}\n");
#endif
}
SHAR_EOF
chmod 0600 hid-1.3.1/sidump.c ||
echo 'restore of hid-1.3.1/sidump.c failed'
Wc_c="`wc -c < 'hid-1.3.1/sidump.c'`"
test 6378 -eq "$Wc_c" ||
	echo 'hid-1.3.1/sidump.c: original size 6378, current size' "$Wc_c"
fi
# ============= hid-1.3.1/sidump_old.c ==============
if test -f 'hid-1.3.1/sidump_old.c' -a X"$1" != X"-c"; then
	echo 'x - skipping hid-1.3.1/sidump_old.c (File already exists)'
else
echo 'x - extracting hid-1.3.1/sidump_old.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hid-1.3.1/sidump_old.c' &&
/* modify hostid reported by gethostid and sysinfo for Solaris 2.3 
X   dynamically linked binaries 
Basically a simpler version of sidump.c - this one doesn't have hooks for
X   the HID environment variable. 
Placed in the public domain by the author 
Mark Henderson - markh@wimsey.bc.ca - 8 July 1994
X
This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose. You use
this program at your own risk. The author disclaims responsibility for
any damages that might result from the use of this program, even
if they result from negligence on the part of the author.
X
Also, please don't use this program to steal software. The intended
use is for emergency situations where an application has to be moved from
one computer to another (e.g. in the event of a hardware malfunction)
and licence keys cannot be obtained quickly from the vendor. Many
vendors will not supply licence keys outside of business hours.
X
Instructions:
1. compile this program
X    gcc -o sidump sidump_old.c
2. run it with the desired hostid as the first parameter and save the output
X    in a file with the extension .c 
X    ./sidump b0b1fb0b >foo.c
3. make foo.o from foo.c
X      gcc -fpic -c foo.c
X      ld foo.o  -G -o foo.so
4. export LD_PRELOAD=$PWD/foo.so      (ksh)
X   setenv LD_PRELOAD $PWD/foo.so      (csh)
5. run the desired program
X
(Note: it actually seems enough to do the following in 3/4:
gcc -c foo.c
export LD_PRELOAD=$PWD/foo.o
)
X
here's a sample session:
X
ratatosk> gcc -o sidump sidump_old.c
ratatosk> ./sidump b0b1fb0b >foo.c
ratatosk> gcc -fpic -c foo.c
ratatosk> ld foo.o  -G -o foo.so
ratatosk> export LD_PRELOAD=$PWD/foo.so
ratatosk> hostid
b0b1fb0b
ratatosk> lmhostid
lmhostid - Copyright (C) 1989, 1991 Highland Software, Inc.
The FLEXlm host ID of this machine is "b0b1fb0b"
X
You could wrap this in a script for convenience (q.v. newhostid)
X       Solaris 1.1)
X
*/
X
X
#include <stdio.h>
#include <sys/systeminfo.h>
int commands[] = {SI_HW_SERIAL, SI_SYSNAME,SI_HOSTNAME,
X SI_RELEASE,SI_VERSION,SI_MACHINE,SI_ARCHITECTURE,SI_HW_PROVIDER,
X SI_SRPC_DOMAIN};
X
#define NCOMMANDS (sizeof(commands)/sizeof(int))
X
main(argc,argv)
int argc;
char *argv[];
{
X    int i,j;
X    char buf[1024];
X    unsigned int hostid;
X    if (argc != 2) {
X        fprintf(stderr, "usage: %s hostid\n", argv[0]);
X        exit(1);
X    }
X    sscanf(argv[1], "%x", &hostid);
X    printf("#include <string.h>\n");
X    printf("gethostid() { return 0x%08x; }\n", hostid);
X    printf("long sysinfo(command,buf,count)\nint command;\nchar *buf;\n");
X    printf("long count;\n{\nchar *c = buf;\n");
X    printf("switch(command) { \n");
X    printf("case %u:\n", commands[0]);
X    sprintf(buf,"%u",hostid);
X    for (j=0; j < strlen(buf); j++)
X        printf("if (c < (buf + count)) *c++ = '%c';\n", buf[j]);
X    printf("if (c < (buf + count)) *c++ = 0;\n");
X    printf("buf[count-1] = 0;\n");
X    printf("break;\n");
X    for (i=1; i< NCOMMANDS; i++) {
X        sysinfo(commands[i], buf,1024);
X        printf("case %u:\n", commands[i]);
X        for (j=0; j < strlen(buf); j++)
X            printf("if (c < (buf + count)) *c++ = '%c';\n", buf[j]);
X        printf("if (c < (buf + count)) *c++ = 0;\n");
X        printf("buf[count-1] = 0;\n");
X        printf("break;\n");
X    }
X    printf("default: \nreturn(-1); \n}\n");
X    printf("return(strlen(buf) + 1);}\n");
}
SHAR_EOF
chmod 0600 hid-1.3.1/sidump_old.c ||
echo 'restore of hid-1.3.1/sidump_old.c failed'
Wc_c="`wc -c < 'hid-1.3.1/sidump_old.c'`"
test 3434 -eq "$Wc_c" ||
	echo 'hid-1.3.1/sidump_old.c: original size 3434, current size' "$Wc_c"
fi
# ============= hid-1.3.1/hostid-by-egid-solaris2/sid.c ==============
if test ! -d 'hid-1.3.1/hostid-by-egid-solaris2'; then
    echo 'x - creating directory hid-1.3.1/hostid-by-egid-solaris2'
    mkdir 'hid-1.3.1/hostid-by-egid-solaris2'
fi
if test -f 'hid-1.3.1/hostid-by-egid-solaris2/sid.c' -a X"$1" != X"-c"; then
	echo 'x - skipping hid-1.3.1/hostid-by-egid-solaris2/sid.c (File already exists)'
else
echo 'x - extracting hid-1.3.1/hostid-by-egid-solaris2/sid.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hid-1.3.1/hostid-by-egid-solaris2/sid.c' &&
/*
This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose. You use
this program at your own risk. The author disclaims responsibility for
any damages that might result from the use of this program, even
if they result from negligence on the part of the author.
X
Also, please don't use this program to steal software. The intended
use is for emergency situations where an application has to be moved from
one computer to another (e.g. in the event of a hardware malfunction)
and licence keys cannot be obtained quickly from the vendor. Many
vendors will not supply licence keys outside of business hours.
*/
X
#include <stdio.h>
#include <sys/syscall.h>
#include <errno.h>
#include "sethostid.h"
X
main(argc, argv)
int argc;
char *argv[];
{
X  unsigned hostid;
X  int n;
X
X  if (argc<3) {
X    fprintf(stderr, "%s <n> <hostid>\n", argv[0]);
X    exit(1);
X  }
X  n=atoi(argv[1]);
X  hostid=strtoul(argv[2], NULL, 16);
X  if (syscall(SYS_sethostid, n, hostid)==-1) {
X    perror(argv[0]);
X    exit(1);
X  }
}  
X
SHAR_EOF
chmod 0600 hid-1.3.1/hostid-by-egid-solaris2/sid.c ||
echo 'restore of hid-1.3.1/hostid-by-egid-solaris2/sid.c failed'
Wc_c="`wc -c < 'hid-1.3.1/hostid-by-egid-solaris2/sid.c'`"
test 1121 -eq "$Wc_c" ||
	echo 'hid-1.3.1/hostid-by-egid-solaris2/sid.c: original size 1121, current size' "$Wc_c"
fi
# ============= hid-1.3.1/hostid-by-egid-solaris2/sethostid.c ==============
if test -f 'hid-1.3.1/hostid-by-egid-solaris2/sethostid.c' -a X"$1" != X"-c"; then
	echo 'x - skipping hid-1.3.1/hostid-by-egid-solaris2/sethostid.c (File already exists)'
else
echo 'x - extracting hid-1.3.1/hostid-by-egid-solaris2/sethostid.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hid-1.3.1/hostid-by-egid-solaris2/sethostid.c' &&
/*
This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose. You use
this program at your own risk. The author disclaims responsibility for
any damages that might result from the use of this program, even
if they result from negligence on the part of the author.
X
Also, please don't use this program to steal software. The intended
use is for emergency situations where an application has to be moved from
one computer to another (e.g. in the event of a hardware malfunction)
and licence keys cannot be obtained quickly from the vendor. Many
vendors will not supply licence keys outside of business hours.
X
before you install this modify /etc/name_to_sysnum to bind sethostid to 
an _unused_ system call number
X
As far as I can determine the details of how to load system calls in
Solaris 2.3 are undocumented. I've done this by poking around in the
header files in sys and the man pages, and extrapolating from what 
I know about how loadable device drivers work and how the procedure 
works in Solaris 1.1
X
Mark Henderson <markh@wimsey.bc.ca>
14 Aug 1994
*/
X
#include <sys/param.h>
#include <sys/syscall.h>
#include <sys/systm.h>
#include <sys/user.h>
#include <sys/modctl.h>
#include <sys/cred.h>
#include <sys/systeminfo.h>
X
#define NHOSTID 10
X
static char serials[NHOSTID][16];
char xyzzy_rbuf[16];
X
int sethostid();
X
struct sysent sethostid_sysent = {2,0,sethostid,0};
X
extern struct mod_ops mod_syscallops;
X
static struct modlsys modlsys = {
&mod_syscallops,
"kern_hostid v1.02", 
&sethostid_sysent,
};
X
extern systeminfo();
X
static struct modlinkage modlinkage = {
X    MODREV_1, /* magic number */
X    &modlsys, 
X    0
};
X
struct as2 {int command; char *buf; long count;};
int new_systeminfo(struct as2 *uap, rval_t *foo)
{
X    int ret,i,bsize;
X    gid_t gid;
X    cred_t *creds = CRED();
X    systeminfo(uap,foo);
X    ret = foo->r_val1;
X    if (uap->command == SI_HW_SERIAL) {
X        gid = creds->cr_gid;
X        bsize = (uap->count > 16) ? 16 : uap->count; /* min(16,count)*/
X        if (gid >= 900 && gid < 900+NHOSTID) {
X            if (serials[gid - 900][0]) {
X                for (i=0;i < bsize - 1;i++)
X                    xyzzy_rbuf[i]  = serials[gid-900][i];
X                xyzzy_rbuf[bsize - 1] = 0;
X                ret = strlen(xyzzy_rbuf) + 1;
X                if (copyout(xyzzy_rbuf,uap->buf,ret) < 0)
X                    return EFAULT;
X            }
X        }
X        for (gid = 900; gid < 900+NHOSTID; gid++) {
X            if (groupmember(gid, creds)) {
X                if (serials[gid - 900][0]) {
X                    for (i=0;i< bsize - 1;i++)
X                        xyzzy_rbuf[i]  = serials[gid-900][i];
X                    xyzzy_rbuf[bsize - 1] = 0;
X                    ret = strlen(xyzzy_rbuf) + 1;
X                    if (copyout(xyzzy_rbuf,uap->buf,ret) < 0)
X                        return EFAULT;
X                    break;
X                }
X            }
X        }
X    }
X    foo->r_val1 = ret;
X    return 0;
}
X
struct as {int n; unsigned int hostid;};
X
sethostid(struct as *uap, rval_t *foo)
{
X    cred_t *creds = CRED();
X    if (!suser(creds)) {
X        return EACCES;
X    }
X
X    if ((uap->n >= NHOSTID )||(uap->n < 0)) {  
X        return EINVAL;
X    }
X    numtos( (unsigned long)uap->hostid, &serials[uap->n][0]);
X    foo->r_val1 = uap->hostid;
X    return 0;
}
X
_init(void)
{
X    int i,status;
X    status = mod_install(&modlinkage);
X    if (!status) {
X        sysent[SYS_systeminfo].sy_narg = 3;
X        sysent[SYS_systeminfo].sy_call = new_systeminfo;
X        for (i=0; i < NHOSTID; i++) 
X            serials[i][0] = 0;
X    }
X    return status;
}
_fini(void)
{
X    int status;
X    status = mod_remove(&modlinkage);
X    if (!status) {
X        sysent[SYS_systeminfo].sy_narg = 3;
X        sysent[SYS_systeminfo].sy_call = systeminfo;
X    }
X    return status;
}
X
_info(struct modinfo *modinfop)
{
X    return (mod_info(&modlinkage, modinfop));
}
SHAR_EOF
chmod 0600 hid-1.3.1/hostid-by-egid-solaris2/sethostid.c ||
echo 'restore of hid-1.3.1/hostid-by-egid-solaris2/sethostid.c failed'
Wc_c="`wc -c < 'hid-1.3.1/hostid-by-egid-solaris2/sethostid.c'`"
test 3998 -eq "$Wc_c" ||
	echo 'hid-1.3.1/hostid-by-egid-solaris2/sethostid.c: original size 3998, current size' "$Wc_c"
fi
# ============= hid-1.3.1/hostid-by-egid-solaris2/makefile ==============
if test -f 'hid-1.3.1/hostid-by-egid-solaris2/makefile' -a X"$1" != X"-c"; then
	echo 'x - skipping hid-1.3.1/hostid-by-egid-solaris2/makefile (File already exists)'
else
echo 'x - extracting hid-1.3.1/hostid-by-egid-solaris2/makefile (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hid-1.3.1/hostid-by-egid-solaris2/makefile' &&
CFLAGS = -D_KERNEL 
ASFLAGS = -P
CC = /opt/SUNWspro/bin/cc
X
load: sethostid
X	/usr/sbin/modload ./sethostid
X
sethostid: sethostid.o
X	ld -r -o sethostid sethostid.o
X
sid: sid.c
X	grep sethostid /etc/name_to_sysnum | sed 's/^/#define SYS_/' >sethostid.h
X	$(CC) -o sid -I. sid.c
X
install: sethostid sid
X	/usr/sbin/install -f /kernel/sys -m 0755 -u root -g sys ./sethostid
X	/usr/sbin/install -f /usr/local/bin -m 0755 -u root -g sys ./sid
X
clean:
X	rm -f core *.o sid sethostid sethostid.h
SHAR_EOF
chmod 0600 hid-1.3.1/hostid-by-egid-solaris2/makefile ||
echo 'restore of hid-1.3.1/hostid-by-egid-solaris2/makefile failed'
Wc_c="`wc -c < 'hid-1.3.1/hostid-by-egid-solaris2/makefile'`"
test 483 -eq "$Wc_c" ||
	echo 'hid-1.3.1/hostid-by-egid-solaris2/makefile: original size 483, current size' "$Wc_c"
fi
# ============= hid-1.3.1/hostid-by-egid-solaris2/README ==============
if test -f 'hid-1.3.1/hostid-by-egid-solaris2/README' -a X"$1" != X"-c"; then
	echo 'x - skipping hid-1.3.1/hostid-by-egid-solaris2/README (File already exists)'
else
echo 'x - extracting hid-1.3.1/hostid-by-egid-solaris2/README (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hid-1.3.1/hostid-by-egid-solaris2/README' &&
Instructions:
X
You need to do everything below as root.
X
1. Add an entry to /etc/name_to_sysnum for the sethostid system call.
For instance, I use the following line.
sethostid       177
X
Do not put any leading whitespace on the line in /etc/name_to_sysnum.
X
The important thing is to pick an unused syscall number. There
is also a limit on the number you can pick, which is determined
by the size of the sysent table. To find out what the limit is
you can use adb
X
adb -k /dev/ksyms /dev/mem
sysentsize/D
^D        #  i.e. control-D
X
You should be able to pick any unused syscall number between 1 and the
number output by adb above minus 1. Alternatively just use an unused
number which is less than the largest number which occurs in
/etc/name_to_sysnum
X
2. Look at the makefile and check that the location of the C compiler is
right for your system. You do NOT want to get /usr/ucb/cc. gcc should
be OK.
X
3. Type
make load
X
This should load the sethostid call. 
X
4. Type 
make sid
X
This makes the program that allows you to modify the hostid for
a particular group.
X
e.g. Now you can modify the hostid for group 900 to be 23000000 by typing
./sid 0 23000000
X
6. You can unload the system call as follows.
X
Type
/usr/sbin/modinfo
X
X You'll get output which includes a line which looks something like
76 fc42d000   621 177   1  sethostid (kern_hostid v1.0)
X
To remove the module type
/usr/sbin/modunload -i 76
Replace 76 by the first number in the line output by modinfo.
X
7. If you like you can install sid and sethostid by typing
make install
X
If you do this, when you reboot, the sethostid module will be
automatically loaded when sethostid is called (i.e. when you run sid).
X
see ../run for a small utility for use with this.
SHAR_EOF
chmod 0600 hid-1.3.1/hostid-by-egid-solaris2/README ||
echo 'restore of hid-1.3.1/hostid-by-egid-solaris2/README failed'
Wc_c="`wc -c < 'hid-1.3.1/hostid-by-egid-solaris2/README'`"
test 1730 -eq "$Wc_c" ||
	echo 'hid-1.3.1/hostid-by-egid-solaris2/README: original size 1730, current size' "$Wc_c"
fi
# ============= hid-1.3.1/run/makefile ==============
if test ! -d 'hid-1.3.1/run'; then
    echo 'x - creating directory hid-1.3.1/run'
    mkdir 'hid-1.3.1/run'
fi
if test -f 'hid-1.3.1/run/makefile' -a X"$1" != X"-c"; then
	echo 'x - skipping hid-1.3.1/run/makefile (File already exists)'
else
echo 'x - extracting hid-1.3.1/run/makefile (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hid-1.3.1/run/makefile' &&
run: run.c
X	$(CC) -o run run.c
X	chmod 4755 run
install: run
X	cp run /usr/local/bin
X	chmod 4755 /usr/local/bin/run
clean:
X	rm -f *.o core run
SHAR_EOF
chmod 0600 hid-1.3.1/run/makefile ||
echo 'restore of hid-1.3.1/run/makefile failed'
Wc_c="`wc -c < 'hid-1.3.1/run/makefile'`"
test 141 -eq "$Wc_c" ||
	echo 'hid-1.3.1/run/makefile: original size 141, current size' "$Wc_c"
fi
# ============= hid-1.3.1/run/run.c ==============
if test -f 'hid-1.3.1/run/run.c' -a X"$1" != X"-c"; then
	echo 'x - skipping hid-1.3.1/run/run.c (File already exists)'
else
echo 'x - extracting hid-1.3.1/run/run.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hid-1.3.1/run/run.c' &&
/* 
X * run a program with a group from the range 900,...,909 added to the
X *   group list
X * Mark Henderson <markh@wimsey.bc.ca>
X * 11 Aug 1994 
X * e.g.
X *  run 0 hostid
X * executes hostid with group 900 added to the group list
X *
X * must be installed setuid root. I recommend 4755 or 4711 for the
X *  permissions
X */
X
X
#include <unistd.h>
#include <limits.h>
#include <stdio.h>
#include <sys/types.h>
X
#define GID_T int 
X  /* should be gid_t for Solaris 2, but it really doesn't matter */
X
GID_T grouplist[NGROUPS_MAX];
#define NHOSTID 10
main(argc,argv)
int argc;
char *argv[];
{
X    int i,j;
X
X    if (argc < 3) {
X        fprintf(stderr, "usage: run <int> command\n");
X        exit(1);
X    }
X    
X    i = getgroups(NGROUPS_MAX, grouplist);
#ifdef DEBUG
X    for (j=0; j< i ; j++)
X        fprintf(stderr, "%d\n", grouplist[j]);
#endif
X    grouplist[i] = (GID_T)(atoi(argv[1]) + 900);
X    if (grouplist[i] < 900 || grouplist[i] >= NHOSTID + 900) {
X        fprintf(stderr, "usage: run <int> command\n<int> is out of range\n");
X        exit(1);
X    }
X
X    if (i >= NGROUPS_MAX) {
X        fprintf(stderr, "already in NGROUPS_MAX groups\n");
X        exit(1);
X    }
X    i = setgroups(i+1, grouplist);
X    if (i < 0) {
X        fprintf(stderr, "setgroups failed\n");
X        exit(1);
X    }
X    seteuid(getuid());
X    execvp(argv[2], argv+2);
}
SHAR_EOF
chmod 0600 hid-1.3.1/run/run.c ||
echo 'restore of hid-1.3.1/run/run.c failed'
Wc_c="`wc -c < 'hid-1.3.1/run/run.c'`"
test 1336 -eq "$Wc_c" ||
	echo 'hid-1.3.1/run/run.c: original size 1336, current size' "$Wc_c"
fi
# ============= hid-1.3.1/run/README ==============
if test -f 'hid-1.3.1/run/README' -a X"$1" != X"-c"; then
	echo 'x - skipping hid-1.3.1/run/README (File already exists)'
else
echo 'x - extracting hid-1.3.1/run/README (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hid-1.3.1/run/README' &&
run.c is a small program to run a program with any group in the
range 900,...,909 added to the group list.
X
You might want to install it in /usr/local/bin setuid root. Anyway,
that's what the install program does. I'm not an expert on writing
"safe" setuid programs, so please check this out carefully before you
install it. (General good instructios for any setuid root program!)
X
An example of its use (with the solaris 2 hostid-by-egid module) is
as follows:
X
(edit /etc/name_to_sysnum as described in the documentation for 
X hostid-by-egid-solaris2)
X
ratatosk# cd hostid-by-egid-solaris2
ratatosk# make load
/opt/SUNWspro/bin/cc -D_KERNEL  -c  sethostid.c
ld -r -o sethostid sethostid.o
/usr/sbin/modload ./sethostid
ratatosk# make sid
grep sethostid /etc/name_to_sysnum | sed 's/^/#define SYS_/' ratatosk#sethostid.h
/opt/SUNWspro/bin/cc -o sid -I. sid.c
ratatosk# ./sid 0 24000000
ratatosk# ./sid 1 25000000
ratatosk# cd ../run
ratatosk# make
cc -o run run.c
chmod 4755 run
ratatosk# hostid
80512f45
ratatosk# ./run 0 hostid
24000000
ratatosk# ./run 1 hostid
25000000
ratatosk# ./run 2 hostid
80512f45
ratatosk# ./run 0 lmhostid
lmhostid - Copyright (C) 1989, 1991 Highland Software, Inc.
The FLEXlm host ID of this machine is "24000000"
ratatosk# ./run 0 lmhostid
lmhostid - Copyright (C) 1989, 1991 Highland Software, Inc.
The FLEXlm host ID of this machine is "25000000"
ratstosk# ./run 0 csh
ratatosk# hostid
24000000
ratatosk# lmhostid
lmhostid - Copyright (C) 1989, 1991 Highland Software, Inc.
The FLEXlm host ID of this machine is "24000000"
ratatosk# modinfo
...
X 78 fc6a50a0   a62 277   1  sethostid (kern_hostid v1.02)
...
ratatosk# modunload -i 78
ratatosk# hostid
80512f45
ratatosk# ./run 0 hostid
80512f45
SHAR_EOF
chmod 0600 hid-1.3.1/run/README ||
echo 'restore of hid-1.3.1/run/README failed'
Wc_c="`wc -c < 'hid-1.3.1/run/README'`"
test 1726 -eq "$Wc_c" ||
	echo 'hid-1.3.1/run/README: original size 1726, current size' "$Wc_c"
fi
# ============= hid-1.3.1/sethostid-simple-4.1/README ==============
if test ! -d 'hid-1.3.1/sethostid-simple-4.1'; then
    echo 'x - creating directory hid-1.3.1/sethostid-simple-4.1'
    mkdir 'hid-1.3.1/sethostid-simple-4.1'
fi
if test -f 'hid-1.3.1/sethostid-simple-4.1/README' -a X"$1" != X"-c"; then
	echo 'x - skipping hid-1.3.1/sethostid-simple-4.1/README (File already exists)'
else
echo 'x - extracting hid-1.3.1/sethostid-simple-4.1/README (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hid-1.3.1/sethostid-simple-4.1/README' &&
This is based, in part, upon an anonymous contribution. I've improved
it by making it loadable, so one does not have to build a new kernel.
You'll find the original contribution in ../hostid-by-egid
X
This will probably only work on versions of Sun OS later than 4.1.
X
I've tried it on both a Sun 3 and Sun 4.
X
to use this:
make load
make sethostid
./sethostid 72000000
X
All numbers are in hex. Do NOT put in the leading 0x.
X
You can remove the sethostid call by using modunload. You can check
whether or not it is currently installed with modstat.
X
N.B. sethostid.exec must be executable. Depending upon where you got
the distribution you might have to chmod +x it.
X
Calling sethostid with the hostid of 0 will restore the hostid to the
default.
X
e.g.
./sethostid 0
X
SHAR_EOF
chmod 0600 hid-1.3.1/sethostid-simple-4.1/README ||
echo 'restore of hid-1.3.1/sethostid-simple-4.1/README failed'
Wc_c="`wc -c < 'hid-1.3.1/sethostid-simple-4.1/README'`"
test 767 -eq "$Wc_c" ||
	echo 'hid-1.3.1/sethostid-simple-4.1/README: original size 767, current size' "$Wc_c"
fi
# ============= hid-1.3.1/sethostid-simple-4.1/kern_hostid.c ==============
if test -f 'hid-1.3.1/sethostid-simple-4.1/kern_hostid.c' -a X"$1" != X"-c"; then
	echo 'x - skipping hid-1.3.1/sethostid-simple-4.1/kern_hostid.c (File already exists)'
else
echo 'x - extracting hid-1.3.1/sethostid-simple-4.1/kern_hostid.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hid-1.3.1/sethostid-simple-4.1/kern_hostid.c' &&
/*
This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose. You use
this program at your own risk. The author disclaims responsibility for
any damages that might result from the use of this program, even
if they result from negligence on the part of the author.
X
Also, please don't use this program to steal software. The intended
use is for emergency situations where an application has to be moved from
one computer to another (e.g. in the event of a hardware malfunction)
and licence keys cannot be obtained quickly from the vendor. Many
vendors will not supply licence keys outside of business hours.
*/
X
#include <sys/param.h>
#include <sys/syscall.h>
#include <sys/systm.h>
#include <sys/user.h>
#include <sun/vddrv.h>
X
static unsigned hostid = 0;
X
int sethostid();
X
static struct sysent sethostid_sysent = { 1, sethostid } ;
X
static struct vdlsys vd = {
X  VDMAGIC_SYS, /* magic number */
X  "sethostid", /* name */
X  0, /* syscall number (filled in automagically) */
X  &sethostid_sysent /* description of syscall */
};
X
X
Gethostid()
{
X    gethostid();
X
X    if (hostid)  
X    u.u_r.r_val1 = hostid;
X    u.u_error = 0;
X    return;
}
X
sethostid(uap)
X    register struct a {
X        unsigned hostid;
X    } *uap;
{
X    if (!suser()) {
X        u.u_error = EACCES;
X        return;
X    }
X
X    hostid = uap->hostid;
X
X    u.u_r.r_val1 = hostid;
X    u.u_error = 0;
X    return;
}
X
X
sethostidinit(function_code, vdp, vdi, vds)
unsigned int function_code;
struct vddrv *vdp;
addr_t vdi;
struct vdstat *vds;
{
X  switch (function_code) {
X  case VDLOAD:
X    vdp->vdd_vdtab = (struct vdlinkage *)&vd;
X    sysent[SYS_gethostid].sy_narg = 2;
X    sysent[SYS_gethostid].sy_call = Gethostid;
X    return 0;
X  case VDUNLOAD:
X    sysent[SYS_gethostid].sy_narg = 2;
X    sysent[SYS_gethostid].sy_call = gethostid;
X    return 0;
X  case VDSTAT:
X    return 0;
X  default:
X    return EIO;
X  }
}
X
SHAR_EOF
chmod 0600 hid-1.3.1/sethostid-simple-4.1/kern_hostid.c ||
echo 'restore of hid-1.3.1/sethostid-simple-4.1/kern_hostid.c failed'
Wc_c="`wc -c < 'hid-1.3.1/sethostid-simple-4.1/kern_hostid.c'`"
test 1992 -eq "$Wc_c" ||
	echo 'hid-1.3.1/sethostid-simple-4.1/kern_hostid.c: original size 1992, current size' "$Wc_c"
fi
# ============= hid-1.3.1/sethostid-simple-4.1/makefile ==============
if test -f 'hid-1.3.1/sethostid-simple-4.1/makefile' -a X"$1" != X"-c"; then
	echo 'x - skipping hid-1.3.1/sethostid-simple-4.1/makefile (File already exists)'
else
echo 'x - extracting hid-1.3.1/sethostid-simple-4.1/makefile (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hid-1.3.1/sethostid-simple-4.1/makefile' &&
CFLAGS = -DKERNEL
ASFLAGS = -P
X
load: kern_hostid.o
X	chmod +x sethostid.exec
X	/usr/etc/modload kern_hostid.o -v -entry _sethostidinit -exec sethostid.exec
X
sethostid: sethostid.o sethostid.h
X	cc -o sethostid -I. sethostid.c
X
clean:
X	rm -f core *.o sethostid kern_hostid sethostid.h
SHAR_EOF
chmod 0600 hid-1.3.1/sethostid-simple-4.1/makefile ||
echo 'restore of hid-1.3.1/sethostid-simple-4.1/makefile failed'
Wc_c="`wc -c < 'hid-1.3.1/sethostid-simple-4.1/makefile'`"
test 282 -eq "$Wc_c" ||
	echo 'hid-1.3.1/sethostid-simple-4.1/makefile: original size 282, current size' "$Wc_c"
fi
# ============= hid-1.3.1/sethostid-simple-4.1/sethostid.c ==============
if test -f 'hid-1.3.1/sethostid-simple-4.1/sethostid.c' -a X"$1" != X"-c"; then
	echo 'x - skipping hid-1.3.1/sethostid-simple-4.1/sethostid.c (File already exists)'
else
echo 'x - extracting hid-1.3.1/sethostid-simple-4.1/sethostid.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hid-1.3.1/sethostid-simple-4.1/sethostid.c' &&
/*
This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose. You use
this program at your own risk. The author disclaims responsibility for
any damages that might result from the use of this program, even
if they result from negligence on the part of the author.
X
Also, please don't use this program to steal software. The intended
use is for emergency situations where an application has to be moved from
one computer to another (e.g. in the event of a hardware malfunction)
and licence keys cannot be obtained quickly from the vendor. Many
vendors will not supply licence keys outside of business hours.
*/
X
#include <stdio.h>
#include <sys/syscall.h>
#include <errno.h>
#include "sethostid.h"
X
main(argc, argv)
int argc;
char *argv[];
{
X  unsigned hostid;
X
X  if (argc<2) {
X    fprintf(stderr, "%s <hostid>\n", argv[0]);
X    exit(1);
X  }
X  sscanf(argv[1], "%x", &hostid);
X  if (syscall(SYS_sethostid, hostid)==-1) {
X    perror(argv[0]);
X    exit(1);
X  }
}  
X
SHAR_EOF
chmod 0600 hid-1.3.1/sethostid-simple-4.1/sethostid.c ||
echo 'restore of hid-1.3.1/sethostid-simple-4.1/sethostid.c failed'
Wc_c="`wc -c < 'hid-1.3.1/sethostid-simple-4.1/sethostid.c'`"
test 1083 -eq "$Wc_c" ||
	echo 'hid-1.3.1/sethostid-simple-4.1/sethostid.c: original size 1083, current size' "$Wc_c"
fi
# ============= hid-1.3.1/sethostid-simple-4.1/sethostid.exec ==============
if test -f 'hid-1.3.1/sethostid-simple-4.1/sethostid.exec' -a X"$1" != X"-c"; then
	echo 'x - skipping hid-1.3.1/sethostid-simple-4.1/sethostid.exec (File already exists)'
else
echo 'x - extracting hid-1.3.1/sethostid-simple-4.1/sethostid.exec (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hid-1.3.1/sethostid-simple-4.1/sethostid.exec' &&
#!/bin/csh -f
echo "#define SYS_sethostid $3" > sethostid.h
SHAR_EOF
chmod 0700 hid-1.3.1/sethostid-simple-4.1/sethostid.exec ||
echo 'restore of hid-1.3.1/sethostid-simple-4.1/sethostid.exec failed'
Wc_c="`wc -c < 'hid-1.3.1/sethostid-simple-4.1/sethostid.exec'`"
test 60 -eq "$Wc_c" ||
	echo 'hid-1.3.1/sethostid-simple-4.1/sethostid.exec: original size 60, current size' "$Wc_c"
fi
# ============= hid-1.3.1/changelog ==============
if test -f 'hid-1.3.1/changelog' -a X"$1" != X"-c"; then
	echo 'x - skipping hid-1.3.1/changelog (File already exists)'
else
echo 'x - extracting hid-1.3.1/changelog (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hid-1.3.1/changelog' &&
0.8.6
-Added file called INSTRUCTIONS which contains documentation. You can
X now probably use the stuff now without looking at the comments in the C
X code.
X
0.8.7
-minor change to nvram.info
-minor fix to hostid-by-egid/sethostid. Passing bad parameters
X could have caused problems.
-changed name of distribution.
-unless some serious problems come up, 0.8.7 will be the last public release
X before version 1.0
X
1.0
-changed sidump.c so that the hostid can also be set be an environment
X variable (for dynamically linked executables, SUN OS 4.1, 5.3)
-cosmetic changes to documentation
X
1.1
- hostid-by-egid now available as a loadable module. Sun OS 4.1 only.
X  can load and unload via modload
X
1.2
- obvious bug fix to chenet.c
- hostid-by-egid now available as a loadable module for both Solaris
X  2.3 and 1.1.  Can load and unload via modload.
X
1.2b
- 1.2 and 1.2a had a nasty bug in the sethostid module for Solaris 2.3.
X  If the module failed to load, the sysent table was often left in a bad
X  state which would lead to a kernel panic pretty soon.
- added Makefile lines to install sid in /usr/local/bin and sethostid
X  in /kernel/sys (if one does "make install"). I'm actually beginning
X  to appreciate Solaris 2.x; automatically loading system calls into the
X  kernel on the fly when they are called is pretty cool.
X
1.2c
- bug in some of the user sethostid programs (not the kernel modules)
X  would not allow hostid > 0x7fffffff because of signed vs unsigned
X  problems. On solaris 2.3 changes strtol to strtoul. On Solaris 1.1
X  changed strtol to appropriate sscanf calls. The sscanf calls are not
X  tolerant of a leading 0x as are strtol and strtoul, but this doesn't
X  really both me.
X
1.3
- minor changes to documentation
X
1.3.1
- added information about sun 3/80 to nvram.info
SHAR_EOF
chmod 0600 hid-1.3.1/changelog ||
echo 'restore of hid-1.3.1/changelog failed'
Wc_c="`wc -c < 'hid-1.3.1/changelog'`"
test 1792 -eq "$Wc_c" ||
	echo 'hid-1.3.1/changelog: original size 1792, current size' "$Wc_c"
fi
# ============= hid-1.3.1/sethostid-simple-5.3/README ==============
if test ! -d 'hid-1.3.1/sethostid-simple-5.3'; then
    echo 'x - creating directory hid-1.3.1/sethostid-simple-5.3'
    mkdir 'hid-1.3.1/sethostid-simple-5.3'
fi
if test -f 'hid-1.3.1/sethostid-simple-5.3/README' -a X"$1" != X"-c"; then
	echo 'x - skipping hid-1.3.1/sethostid-simple-5.3/README (File already exists)'
else
echo 'x - extracting hid-1.3.1/sethostid-simple-5.3/README (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hid-1.3.1/sethostid-simple-5.3/README' &&
Instructions:
X
You need to do everything below as root.
X
1. Add an entry to /etc/name_to_sysnum for the sethostid system call.
For instance, I use the following line.
sethostid		177
X
Do not put any leading whitespace on the line in /etc/name_to_sysnum.
X
The important thing is to pick an unused syscall number. There
is also a limit on the number you can pick, which is determined
by the size of the sysent table. To find out what the limit is
you can use adb
X
adb -k /dev/ksyms /dev/mem
sysentsize/D
^D        #  i.e. control-D
X
You should be able to pick any unused syscall number between 1 and the
number output by adb above minus 1. Alternatively just use an unused
number which is less than the largest number which occurs in
/etc/name_to_sysnum
X
2. Look at the makefile and check that the location of the C compiler is
right for your system. You do NOT want to get /usr/ucb/cc. gcc should
be OK.
X
3. Type
make load
X
This should load the sethostid call. 
X
4. Type 
make sid
X
This makes the program that allows you to modify the hostid for
a particular group.
X
e.g. Now you can modify the hostid to be 23000000 by typing
./sid 23000000
X
6. You can unload the system call as follows.
X
Type
/usr/sbin/modinfo
X
X You'll get output which includes a line which looks something like
76 fc42d000   621 177   1  sethostid (kern_hostid v1.0)
X
To remove the module type
/usr/sbin/modunload -i 76
Replace 76 by the first number in the line output by modinfo.
X
7. If you like you can install sid and sethostid by typing
make install
X
If you do this, when you reboot, the sethostid module will be
automatically loaded when sethostid is called (i.e. when you run sid).
X
setting the hostid to 0 will restore the default.
SHAR_EOF
chmod 0600 hid-1.3.1/sethostid-simple-5.3/README ||
echo 'restore of hid-1.3.1/sethostid-simple-5.3/README failed'
Wc_c="`wc -c < 'hid-1.3.1/sethostid-simple-5.3/README'`"
test 1709 -eq "$Wc_c" ||
	echo 'hid-1.3.1/sethostid-simple-5.3/README: original size 1709, current size' "$Wc_c"
fi
# ============= hid-1.3.1/sethostid-simple-5.3/makefile ==============
if test -f 'hid-1.3.1/sethostid-simple-5.3/makefile' -a X"$1" != X"-c"; then
	echo 'x - skipping hid-1.3.1/sethostid-simple-5.3/makefile (File already exists)'
else
echo 'x - extracting hid-1.3.1/sethostid-simple-5.3/makefile (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hid-1.3.1/sethostid-simple-5.3/makefile' &&
CFLAGS = -D_KERNEL 
ASFLAGS = -P
CC = /opt/SUNWspro/bin/cc
X
load: sethostid
X	/usr/sbin/modload ./sethostid
X
sethostid: sethostid.o
X	ld -r -o sethostid sethostid.o
X
sid: sid.c
X	grep sethostid /etc/name_to_sysnum | sed 's/^/#define SYS_/' >sethostid.h
X	$(CC) -o sid -I. sid.c
X
install: sethostid sid
X	/usr/sbin/install -f /kernel/sys -m 0755 -u root -g sys ./sethostid
X	/usr/sbin/install -f /usr/local/bin -m 0755 -u root -g sys ./sid
X
clean:
X	rm -f core *.o sid sethostid sethostid.h
SHAR_EOF
chmod 0600 hid-1.3.1/sethostid-simple-5.3/makefile ||
echo 'restore of hid-1.3.1/sethostid-simple-5.3/makefile failed'
Wc_c="`wc -c < 'hid-1.3.1/sethostid-simple-5.3/makefile'`"
test 483 -eq "$Wc_c" ||
	echo 'hid-1.3.1/sethostid-simple-5.3/makefile: original size 483, current size' "$Wc_c"
fi
# ============= hid-1.3.1/sethostid-simple-5.3/sethostid.c ==============
if test -f 'hid-1.3.1/sethostid-simple-5.3/sethostid.c' -a X"$1" != X"-c"; then
	echo 'x - skipping hid-1.3.1/sethostid-simple-5.3/sethostid.c (File already exists)'
else
echo 'x - extracting hid-1.3.1/sethostid-simple-5.3/sethostid.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hid-1.3.1/sethostid-simple-5.3/sethostid.c' &&
/*
This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose. You use
this program at your own risk. The author disclaims responsibility for
any damages that might result from the use of this program, even
if they result from negligence on the part of the author.
X
Also, please don't use this program to steal software. The intended
use is for emergency situations where an application has to be moved from
one computer to another (e.g. in the event of a hardware malfunction)
and licence keys cannot be obtained quickly from the vendor. Many
vendors will not supply licence keys outsethostide of business hours.
X
before you install this modify /etc/name_to_sysnum to bind sethostid to 
an _unused_ system call number
X
As far as I can determine the details of how to load system calls in
Solaris 2.3 are undocumented. I've done this by poking around in the
header files in sys and the man pages, and extrapolating from what 
I know about how loadable device drivers work and how the procedure 
works in Solaris 1.1
X
Mark Henderson <markh@wimsey.bc.ca>
14 Aug 1994
*/
X
#include <sys/param.h>
#include <sys/syscall.h>
#include <sys/systm.h>
#include <sys/user.h>
#include <sys/modctl.h>
#include <sys/cred.h>
#include <sys/systeminfo.h>
X
static char serial[16];
char xyzzy_rbuf[16];
X
int sethostid();
X
struct sysent sethostid_sysent = {1,0,sethostid,0};
X
extern struct mod_ops mod_syscallops;
X
static struct modlsys modlsys = {
&mod_syscallops,
"simple sethostid v1.0", 
&sethostid_sysent,
};
X
extern systeminfo();
X
static struct modlinkage modlinkage = {
X    MODREV_1, /* magic number */
X    &modlsys, 
X    0
};
X
struct as2 {int command; char *buf; long count;};
int new_systeminfo(struct as2 *uap, rval_t *foo)
{
X    int ret,i,bsize;
X    systeminfo(uap,foo);
X    ret = foo->r_val1;
X    if (uap->command == SI_HW_SERIAL) {
X        bsize = (uap->count > 16) ? 16 : uap->count; /* min(16,count)*/
X        if (serial[0]) {
X            for (i=0;i < bsize - 1;i++)
X                xyzzy_rbuf[i]  = serial[i];
X            xyzzy_rbuf[bsize - 1] = 0;
X            ret = strlen(xyzzy_rbuf) + 1;
X            if (copyout(xyzzy_rbuf,uap->buf,ret) < 0)
X                return EFAULT;
X        }
X    }
X    foo->r_val1 = ret;
X    return 0;
}
X
struct as {int hostid; };
X
sethostid(struct as *uap, rval_t *foo)
{
X    cred_t *creds = CRED();
X    if (!suser(creds)) {
X        return EACCES;
X    }
X
X    if (!uap->hostid) {
X        serial[0] = '\0';
X        foo->r_val1 = 0;
X    }
X    else {
X        numtos( (unsigned long)uap->hostid, &serial[0]);
X        foo->r_val1 = uap->hostid;
X    }
X    return 0;
}
X
_init(void)
{
X    int status;
X    status = mod_install(&modlinkage);
X    if (!status) {
X        sysent[SYS_systeminfo].sy_narg = 3;
X        sysent[SYS_systeminfo].sy_call = new_systeminfo;
X        serial[0] = 0;
X    }
X    return status;
}
_fini(void)
{
X    int status;
X    status = mod_remove(&modlinkage);
X    if (!status) {
X        sysent[SYS_systeminfo].sy_narg = 3;
X        sysent[SYS_systeminfo].sy_call = systeminfo;
X    }
X    return status;
}
X
_info(struct modinfo *modinfop)
{
X    return (mod_info(&modlinkage, modinfop));
}
SHAR_EOF
chmod 0600 hid-1.3.1/sethostid-simple-5.3/sethostid.c ||
echo 'restore of hid-1.3.1/sethostid-simple-5.3/sethostid.c failed'
Wc_c="`wc -c < 'hid-1.3.1/sethostid-simple-5.3/sethostid.c'`"
test 3237 -eq "$Wc_c" ||
	echo 'hid-1.3.1/sethostid-simple-5.3/sethostid.c: original size 3237, current size' "$Wc_c"
fi
# ============= hid-1.3.1/sethostid-simple-5.3/sid.c ==============
if test -f 'hid-1.3.1/sethostid-simple-5.3/sid.c' -a X"$1" != X"-c"; then
	echo 'x - skipping hid-1.3.1/sethostid-simple-5.3/sid.c (File already exists)'
else
echo 'x - extracting hid-1.3.1/sethostid-simple-5.3/sid.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hid-1.3.1/sethostid-simple-5.3/sid.c' &&
/*
This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose. You use
this program at your own risk. The author disclaims responsibility for
any damages that might result from the use of this program, even
if they result from negligence on the part of the author.
X
Also, please don't use this program to steal software. The intended
use is for emergency situations where an application has to be moved from
one computer to another (e.g. in the event of a hardware malfunction)
and licence keys cannot be obtained quickly from the vendor. Many
vendors will not supply licence keys outside of business hours.
*/
X
#include <stdio.h>
#include <sys/syscall.h>
#include <errno.h>
#include "sethostid.h"
X
main(argc, argv)
int argc;
char *argv[];
{
X  unsigned hostid;
X
X  if (argc<2) {
X    fprintf(stderr, "%s <hostid>\n", argv[0]);
X    exit(1);
X  }
X  hostid=strtoul(argv[1], NULL, 16);
X  if (syscall(SYS_sethostid, hostid)==-1) {
X    perror(argv[0]);
X    exit(1);
X  }
}  
X
SHAR_EOF
chmod 0600 hid-1.3.1/sethostid-simple-5.3/sid.c ||
echo 'restore of hid-1.3.1/sethostid-simple-5.3/sid.c failed'
Wc_c="`wc -c < 'hid-1.3.1/sethostid-simple-5.3/sid.c'`"
test 1086 -eq "$Wc_c" ||
	echo 'hid-1.3.1/sethostid-simple-5.3/sid.c: original size 1086, current size' "$Wc_c"
fi
exit 0
