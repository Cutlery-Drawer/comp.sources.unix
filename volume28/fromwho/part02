Newsgroups: comp.sources.unix
From: darkfox@netcom.com (Johnson Michael Earls)
Subject: v28i093: fromwho - an expanded `from' program, V1.7, Part02/02
References: <1.774896492.20702@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: darkfox@netcom.com (Johnson Michael Earls)
Posting-Number: Volume 28, Issue 93
Archive-Name: fromwho/part02

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 2 (of 2)."
# Contents:  fromwho/fromwho.c fromwho/parseargs/parseargs.c
#   fromwho/parseargs/parseargs.man fromwho/patchlevel.h
#   fromwho/test.mmdf.uu fromwho/test.sendmail fromwho/verify.script
# Wrapped by darkfox@netcom14 on Fri Jul 22 09:36:15 1994
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'fromwho/fromwho.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'fromwho/fromwho.c'\"
else
echo shar: Extracting \"'fromwho/fromwho.c'\" \(12253 characters\)
sed "s/^X//" >'fromwho/fromwho.c' <<'END_OF_FILE'
X/*
X  fromwho -- 'from' with extras
X
X  This is a new 'from' program.  Instead of just listing who your mail is
X  from, it tells you how many total messages, how many are new, and
X  for each person you have mail from, tells how many messages they sent,
X  how many are new, and lists the subjects of the messages.
X
X  This code is public domain.  I might keep updating it, or I might forget
X  about it ]:)  But feel free to mail comments / suggestions to me at
X    jearls@data.acs.calpoly.edu
X
X  Usage:
X    fromwho [ <options> ... ]
X
X    --nolist
X    -l  Turns listing of users/subjects off.
X    --nosubject
X    -s  Turns listing of subjects off.
X    --newmail
X    -n  List only new mail
X    --alpha
X    -oa Sort the message list alphabetically by user
X    --mailbox
X    -om Sort the message list by mailbox order
X        (This still groups all messages from the same user together)
X    --nosort
X    -on Don't sort messages or combine messages from same user
X    --quiet
X    -q  Do not give an error if the mailbox doesn't exist.
X    --version
X    -v  Display the version number and exit immediately.
X    --file
X    -f  Sets the mailbox to read from.  If no mailbox is
X        given then use $HOME/mbox.
X
X  REVISION INFORMATION
X
X  $Revision: 1.7 $
X
X    $Author: jearls $
X      $Date: 1993/02/07 16:53:22 $
X
X  Modification Log:
X
X  $Log: fromwho.c,v $
X    Revision 1.7  1993/02/07  16:53:22  jearls
X    PATCH7: Updated to use 'parseargs' command-line parsing library
X    PATCH7: and added '-on' / '--nosort' option to display the mailbox
X    PATCH7: messages with no sorting whatsoever, and no combining of
X    PATCH7: messages from the same user (unless the messages were
X    PATCH7: together in the mailbox file).
X
X    Revision 1.6  1992/12/11  13:40:57  jearls
X    PATCH6: added -oa, -om to specify ordering of users alphabetically
X    PATCH6: or by mailbox order.  other small changes for portability.
X
X    Revision 1.5  92/04/07  17:22:37  jearls
X    PATCH5: Updated to use password file entry to get
X    PATCH5: user name and home directory, rather than
X    PATCH5: using UTMP and other fiddlingness.
X
X    Revision 1.4  92/03/16  12:21:17  jearls
X    PATCH4: Added support for MMDF mailboxes (I hope!)
X    PATCH4: Added option to count mark unread messages as new
X    PATCH4: Added option to suppress error message when mail file doesn't exist
X    PATCH4: Added checking of an environment variable to find mail file
X    PATCH4: Added -q flag to reverse error message suppression
X    PATCH4: Added -v flag to display the version number
X
X    Revision 1.3  91/12/03  11:14:33  jearls
X    PATCH3: Added `-v' option to display the version number.
X
X    Revision 1.2  91/11/23  12:49:37  jearls
X    PATCH2: Fixed miscellanous bugs, added '-n' option to
X    PATCH2: list only new mail.
X
X    Revision 1.1  91/10/19  17:05:17  jearls
X    PATCH1: Added support for AIX and other systems that don't
X    PATCH1: use a mail spool.
X
X    Revision 1.0  91/10/19  14:40:24  jearls
X    Initial revision
X
X*/
X
X#include <stdio.h>
X#include <pwd.h>
X
X#if USG || STDC_HEADERS
X#include <string.h>
X#else /* USG || STDC_HEADERS */
X#include <strings.h>
X#define HAS_INDEX
X#endif /* USG || STDC_HEADERS */
X
X#include <parseargs.h>
X
X#include "patchlevel.h"
X
X#ifndef MAILDIR
X#define MAILDIR "/usr/spool/mail/"
X#endif /* MAILDIR */
X
Xtypedef struct
X{
X  int msgs, new;
X} mailinfo;
X
Xtypedef struct subjnode
X{
X  char *subj;
X  int new;
X  struct subjnode *next;
X} subjnode;
X
Xtypedef struct userinfo
X{
X  char *name;
X  mailinfo info;
X
X  subjnode *subjs, *lastsub;
X
X  struct userinfo *next;
X} userinfo;
X
Xstatic OptsList opts[] =
X{
X  { "-help", 0, OPT_NONE, OPT_HELP, "List fromwho options." },
X  { "h", 0, OPT_NONE, OPT_HELP, "Same as --help." },
X  { "-nolist", 0, OPT_NONE, 'l', "Don't list users and subjects." },
X  { "l", 0, OPT_NONE, 'l', "Same as --nolist." },
X  { "-nosubject", 0, OPT_NONE, 's', "Don't list subjects." },
X  { "s", 0, OPT_NONE, 's', "Same as --nosubject." },
X  { "-newmail", 0, OPT_NONE, 'n', "List only new messages." },
X  { "n", 0, OPT_NONE, 'n', "Same as --newmail." },
X  { "-alpha", 0, OPT_NONE, 'a', "Sort messages by user [default ordering]." },
X  { "oa", 0, OPT_NONE, 'a', "Same as --alpha." },
X  { "-mailbox", 0, OPT_NONE, 'm', "Leave messages in mailbox order." },
X  { "om", 0, OPT_NONE, 'm', "Same as --mailbox." },
X  { "-nosort", 0, OPT_NONE, 'S', "Don't sort (or combine) messages." },
X  { "on", 0, OPT_NONE, 'S', "Same as --nosort." },
X  { "-quiet", 0, OPT_NONE, 'q', "Don't give an error if the mailbox file doesn't exist." },
X  { "q", 0, OPT_NONE, 'q', "Same as --quiet." },
X  { "-version", 0, OPT_NONE, 'v', "Display fromwho version and exit." },
X  { "v", 0, OPT_NONE, 'v', "Same as --version." },
X  { "-file", 0, OPT_NONE, 'f', "Set mailbox file.  If none given, use $HOME/mbox." },
X  { "f", 0, OPT_NONE, 'f', "Same as --file." },
X
X  { "", 0, 0, 0, "" }
X};
X
Xchar *strdup2(char *p, char *q)
X{
X  char *s = (char *)malloc(1+strlen(p)+strlen(q));
X  if (s)
X    (void)strcat(strcpy(s, p), q);
X  return(s);
X}
X
X/* translate MAILFILE into a real path */
Xchar *translate(char *mf, char *n, char *h)
X{
X  int len;
X  char *s, *p, *q;
X
X  len = strlen(mf);
X  if (*mf == '~')
X    len += strlen(h) - 1;
X  p = mf;
X#ifdef HAS_INDEX
X  while (p = index(p, '*'))
X#else /* HAS_INDEX */
X  while (p = strchr(p, '*'))
X#endif /* HAS_INDEX */
X  {
X    p++;
X    len += strlen(n)-1;
X  }
X  if (s = (char *)malloc(len+1))
X  {
X    p = s;
X    if (*mf == '~')
X    {
X      while (*h)
X        *(p++) = *(h++);
X      mf++;
X    } else
X      p = s;
X    while (*mf)
X      if ((*p = *(mf++)) == '*')
X      {
X        q = n;
X        while (*q)
X          *(p++) = *(q++);
X      } else
X        p++;
X    *p = '\0';
X  }
X  return(s);
X}
X
Xmailinfo mailstats(FILE *f, userinfo **ui, char sortby)
X{
X  mailinfo *mp, mi;
X  char buf[1024], *c1, *c2;
X  int stat, lp;
X  userinfo *p, *b, *n;
X
X  mi.msgs = mi.new = 0;
X
X  stat = 0;
X  while (fgets(buf, 1024, f))
X  {
X#ifdef MMDF
X    if ((!stat) && (!strcmp(buf, "\1\1\1\1\n")))
X    {
X      *buf = ' ';
X#else /* MMDF */
X    if ((!stat) && (!strncmp(buf, "From ", 5)))
X    {
X#endif /* MMDF */
X      stat = 1;
X      mi.msgs++;
X    }
X
X    if ((stat == 1) && (!strncmp(buf, "From:", 5)))
X    {
X      c1 = 5+(c2 = buf);
X      while ((*c1 == ' ') || (*c1 == '\t')) c1++;
X      while ((*c1) && (*c1 != '\n') && (*c1 != '('))
X        *(c2++) = *(c1++);
X      do {
X        c2--;
X      } while ((*c2 == ' ') || (*c2 == '\t'));
X      c2[1] = '\0';
X
X      stat = 2;
X
X      p = *ui; b = (userinfo *)NULL;
X
X      if (sortby == 'a')      /* 'a' : alphabetic ordering */
X        while (p && (strcmp(buf, p->name) > 0))
X          p = (b=p)->next;
X      else
X        if (sortby == 'm')    /* 'm' : mailbox ordering */
X          while (p && (strcmp(buf, p->name)))
X            p = (b=p)->next;
X        else                  /* 'S' : no sorting */
X        {
X          while (p) p = (b=p)->next;
X          if (b && !strcmp(buf, b->name)) p = b;
X        }
X
X      if (!p || (strcmp(buf, p->name)))
X      {
X        n = (userinfo *)malloc(sizeof(userinfo));
X        n->name = strdup(buf);
X        n->info.msgs = n->info.new = 0;
X        n->subjs = n->lastsub = (subjnode *)NULL;
X        n->next = p;
X        if (b)
X          b->next = n;
X        else
X          *ui = n;
X        p = n;
X      }
X      mp = &(p->info);
X      mp->msgs++;
X      if (p->lastsub)
X        p->lastsub = (p->lastsub->next = (subjnode *)malloc(sizeof(subjnode)));
X      else
X        p->subjs = p->lastsub = (subjnode *)malloc(sizeof(subjnode));
X      p->lastsub->subj = (char *)NULL;
X      p->lastsub->new = 0;
X      p->lastsub->next = (subjnode *)NULL;
X    }
X
X    if ((stat > 1) && (!strncmp(buf, "Subject:", 8)))
X      if (!p->lastsub->subj)
X      {
X        buf[strlen(buf)-1] = '\0';
X        p->lastsub->subj = strdup(buf+9);
X      }
X
X    if ((stat == 2) && (!strncmp(buf, "Status:", 7)))
X#ifdef UNREADNEW
X#ifdef HAS_INDEX
X      if (index(buf+8, 'R'))
X#else /* HAS_INDEX */
X      if (strchr(buf+8, 'R'))
X#endif /* HAS_INDEX */
X#endif /* UNREADNEW */
X        stat = 3;
X
X#ifdef MMDF
X    if ((stat) && (!strcmp(buf, "\1\1\1\1\n")))
X#else /* MMDF */
X    if ((stat) && (*buf == '\n'))
X#endif /* MMDF */
X    {
X      if (stat == 2)
X      {
X        mi.new++;
X        mp->new++;
X        p->lastsub->new = 1;
X      }
X      stat = 0;
X    }
X  }
X
X  return(mi);
X}
X
Xint doListOpt(char *s)
X{
X  fprintf(stderr, "  %s\n", s);
X}
X
Xvoid usage(char *prog, int err)
X{
X  fprintf(stderr, "Usage:  %s [ <option>... ]\n\nOptions:\n", prog);
X  paListOpts(opts, doListOpt);
X  exit(err);
X}
X
Xint main(int argc, char **argv)
X{
X  mailinfo mi;
X  userinfo *ui = (userinfo *)NULL, *p;
X  char *mbox, *prog, myname[9], *home;
X  extern char *getenv(char *);
X  int flag, listflag = 1, subjflag = 1, newflag = 0, sortby = 'a';
X#ifdef QUIETMBOX
X  int quietflag = 1;
X#else /* QUIETMBOX */
X  int quietflag = 0;
X#endif /* QUIETMBOX */
X  int lp, help = 0;
X  FILE *f;
X  subjnode *sp, *tp;
X  struct passwd *pw;
X  OptVal *opt;
X
X  extern int errno;
X
X/* get user name and home directory */
X  if (pw = getpwuid(getuid()))
X  {
X    home = strdup(pw->pw_dir);
X    strcpy(myname, pw->pw_name);
X  } else
X    fprintf(stderr, "%s: Who are you?\n", *argv);
X
X#ifdef MAILVAR
X  if (mbox = getenv(MAILVAR))
X    mbox = strdup(mbox);
X  else
X#endif /* MAILVAR */
X#ifdef MAILFILE
X    mbox = translate(MAILFILE, myname, home);
X#else /* MAILFILE */
X    mbox = strdup2(MAILDIR, myname);
X#endif /* MAILFILE */
X
X  if (paInit(opts))
X  {
X    perror("paInit");
X    exit(errno);
X  }
X
X/* parse arguments */
X  prog = *argv;
X  while (opt = paOpt(argc, argv, opts))
X    switch(opt->which)
X    {
X      case 'f' :  (void)free(mbox);
X                  if ((pa_argc < argc) && (*(argv[pa_argc]) != '-'))
X                    mbox = strdup(argv[pa_argc++]);
X                  else
X                    mbox = strdup2(home, "/mbox");
X                  help = 0;
X                  break;
X      case 's' :  subjflag = 0;
X                  help = 0;
X                  break;
X      case 'l' :  listflag = 0;
X                  help = 0;
X                  break;
X      case 'n' :  newflag = 1;
X                  help = 0;
X                  break;
X      case 'v' :  puts("FromWho, by Johnson Earls.  $Revision: 1.7 $");
X                  help = 1;
X                  break;
X#ifdef QUIETMBOX
X      case 'q' :  quietflag = 0;
X                  help = 0;
X                  break;
X#else /* QUIETMBOX */
X      case 'q' :  quietflag = 1;
X                  help = 0;
X                  break;
X#endif /* QUIETMBOX */
X      case 'a' :
X      case 'm' :
X      case 'S' :  sortby=opt->which;
X                  help = 0;
X                  break;
X      case OPT_HELP : help = 1; break;
X      default :   fprintf(stderr, "%s:  %s\n\n", prog, opt->arg.str);
X                  free(home);
X                  free(mbox);
X                  usage(prog, EINVAL);
X    }
X
X  argc -= pa_argc; argv += pa_argc;
X  if (argc > 1)
X    usage(prog, EINVAL);
X  if (help)
X    exit(0);
X
X/* open the file */
X  f = (FILE *)fopen(mbox, "r");
X  if (f == (FILE *)NULL)
X    if (quietflag)
X    {
X      exit(0);
X    } else {
X      perror(mbox);
X      free(home);
X      free(mbox);
X      exit(errno);
X    }
X
X/* get the info */
X  mi = mailstats(f, &ui, sortby);
X
X  (void)fclose(f);
X
X/* print everything out */
X  if (newflag)
X    printf("%s contains %d new message%s.\n", mbox, mi.new, (mi.new == 1 ? "" : "s"));
X  else
X    printf("%s contains %d message%s, %d new.\n", mbox, mi.msgs, (mi.msgs == 1 ? "" : "s"), mi.new);
X  while (ui)
X  {
X    if (listflag && (!newflag || ui->info.new))
X      if (newflag)
X        printf("  %-36s:  %d new message%s.\n", ui->name, ui->info.new, (ui->info.new == 1 ? "" : "s"));
X      else
X        printf("  %-36s:  %d message%s, %d new.\n", ui->name, ui->info.msgs, (ui->info.msgs == 1 ? "" : "s"), ui->info.new);
X    for (sp = ui->subjs; sp; )
X    {
X      if (sp->subj)
X      {
X        if (listflag && subjflag)
X          if (sp->new || !newflag)
X            printf("    %c %s\n", (sp->new ? '>' : ' '), sp->subj);
X        free(sp->subj);
X      } else
X        if (listflag && subjflag)
X          if (sp->new || !newflag)
X            printf("    %c <none>\n", (sp->new ? '>' : ' '));
X      sp = (tp=sp) -> next;
X      free(tp);
X    }
X    ui = (p=ui)->next;
X    free(p->name);
X    free(p);
X  }
X
X  free(home);
X  free(mbox);
X
X  exit(0);
X}
END_OF_FILE
if test 12253 -ne `wc -c <'fromwho/fromwho.c'`; then
    echo shar: \"'fromwho/fromwho.c'\" unpacked with wrong size!
fi
# end of 'fromwho/fromwho.c'
fi
if test -f 'fromwho/parseargs/parseargs.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'fromwho/parseargs/parseargs.c'\"
else
echo shar: Extracting \"'fromwho/parseargs/parseargs.c'\" \(6174 characters\)
sed "s/^X//" >'fromwho/parseargs/parseargs.c' <<'END_OF_FILE'
X#include <stdio.h>
X#include "parseargs.h"
X#include <math.h>
X
Xextern int puts(char *);
X
Xint pa_argc = 0;
X
Xstatic char buf[1024];
X
Xstatic int isnum(char *s)
X{
X  if (*s == '-') s++;
X  if (*s == '0')
X    if (*(++s) == 'x') s++;
X  while ((*s >= '0') && (*s <= '9')) s++;
X  return !(*s);
X}
X
Xstatic int isreal(char *s)
X{
X  int dot, exp;
X
X  dot = exp = 0;
X
X  if (*s == '-') s++;
X
X  while (((*s >= '0') && (*s <= '9')) || (!dot && (*s == '.')) || (!exp && ((*s == 'E') || (*s == 'e'))))
X  {
X    if (*s == '.')
X      dot = 1;
X    if ((*s == 'e') || (*s == 'E'))
X    {
X      dot = exp = 1;
X      if (*(++s) == '-') s++;
X    } else
X      s++;
X  }
X
X  return !(*s);
X}
X
Xstatic int prefix(char *a, char *b)
X{
X  char *p = a;
X  while (*p && (*p == *b))
X  {
X    p++; b++;
X  }
X  return (p-a);
X}
X
Xstatic int streqp(char *a, char *b, int m)
X{
X  char c, d;
X
X  while ((c = *a) && (d = *b))
X  {
X    if ((c & 0x60) == 0x40) c += 0x20;
X    if ((d & 0x60) == 0x40) d += 0x20;
X    if (c != d) break;
X    m--;
X    a++;
X    b++;
X  }
X
X  return (!c && (m <= 0));
X}
X
Xstatic int max(int a, int b)
X{
X  return ((a>b) ? a : b);
X}
X
Xtypedef void (*OptFunc)(OptVal *, int, char **, OptsList *);
X
Xstatic void doHelp(OptVal *opt, int c, char **v, OptsList *opts)
X{
X  paDoHelp(opts, *v);
X}
X
Xstatic OptFunc optfuncs[] = {
X  doHelp,
X};
X
Xint paInit(struct OptsList *opts)
X{
X  int i, j, n;
X  OptsList op;
X
X  for (n=0; *(opts[n].opt); n++)
X  {
X    if ((opts[n].argtype < 0) || (opts[n].argtype > OPT_ARGMAX))
X      return (-(errno = EINVAL));
X    if (opts[n].retval < OPT_FUNCMIN)
X#ifdef ENOSYS
X      return (-(errno = ENOSYS));
X#else
X      return (-(errno = ESRCH));
X#endif
X  }
X
X  i = 0;
X  while (i < n-1)
X    if (strcmp(opts[i].opt, opts[i+1].opt) > 0)
X    {
X      op = opts[j = ++i];
X      do
X      {
X        opts[j] = opts[j-1];
X      } while (--j && (strcmp(opts[j-1].opt, op.opt) > 0));
X      opts[i = j] = op;
X    } else
X      i++;
X
X  for (i=0; i<n; i++)
X  {
X    j = opts[i].minlen;
X    if (j < 0)
X      j = -j;
X    else
X    {
X      if (i) j = max(j, prefix(opts[i].opt, opts[i-1].opt));
X      if (i < n-1) j = max(j, prefix(opts[i].opt, opts[i+1].opt));
X      if (opts[i].opt[j]) j++;
X    }
X    opts[i].minlen = j;
X  }
X
X  return (pa_argc = 0);
X}
X
XOptVal *paOpt(int c, char **v, OptsList *opts)
X{
X  static OptVal opt;
X  int i, j;
X  char *p;
X
X  if ((++pa_argc < c) && (*v[pa_argc] == '-'))
X  {
X    opt.opt = v[pa_argc]+1;
X
X    for (i=0; *(opts[i].opt); i++)
X    {
Xi=i; /* for debugger */
X      if (streqp(opt.opt, opts[i].opt, opts[i].minlen))
X      {
Xi=i; /* for debugger */
X        if (opts[i].argtype && (++pa_argc == c))
X        {
X          sprintf(buf, "-%s: Option requires an argument.", opt.opt);
X          opt.which = 0;
X          opt.arg.str = buf;
X          return &opt;
X        }
X
X        opt.which = opts[i].retval;
X
X        switch (opts[i].argtype)
X        {
X          case OPT_NONE     : break;
X          case OPT_STRING   : opt.arg.str = v[pa_argc];
X                              break;
X          case OPT_NUMBER   : if (isnum(p = v[pa_argc]))
X                                opt.arg.num = atoi(p);
X                              else
X                              {
X                                sprintf(buf, "-%s: Option requires a numeric argument.", opt.opt);
X                                opt.which = 0;
X                                opt.arg.str = buf;
X                                return &opt;
X                              }
X                              break;
X          case OPT_REAL     : if (isreal(p = v[pa_argc]))
X                                opt.arg.real = atof(p);
X                              else
X                              {
X                                sprintf(buf, "-%s: Option requires a floating point argument.", opt.opt);
X                                opt.which = 0;
X                                opt.arg.str = buf;
X                                return &opt;
X                              }
X                              break;
X          case OPT_BOOLEAN  : p = v[pa_argc];
X                              if (streqp(p, "yes", 1) || streqp(p, "on", 2) || streqp(p, "true", 1))
X                                opt.arg.bool = 1;
X                              else
X                                if (streqp(p, "no", 1) || streqp(p, "off", 2) || streqp(p, "false", 1))
X                                  opt.arg.bool = 0;
X                                else
X                                {
X                                  sprintf(buf, "-%s: Option requires a boolean argument (yes/no, on/off, true/false).", opt.opt);
X                                  opt.which = 0;
X                                  opt.arg.str = buf;
X                                  return &opt;
X                                }
X                              break;
X         }
X
X        if (opts[i].retval < 0)
X          (*optfuncs[-1 - opts[i].retval])(&opt, c, v, opts);
X
X        return &opt;
X      }
X    }
X
X    sprintf(buf, "-%s: No such option.", opt.opt);
X    opt.which = 0;
X    opt.arg.str = buf;
X    return &opt;
X  }
X
X  pa_argc--;
X
X  return (OptVal *)0;
X}
X
Xvoid paListOpts(OptsList *opts, int (*print)(char *))
X{
X  char *p, *q;
X  int i, maxl;
X
X  for (maxl=i=0; *opts[i].opt; i++)
X    maxl=max(maxl, strlen(opts[i].opt));
X  maxl += 16;
X
X  while (*(p = opts->opt))
X  {
X    q = buf;
X    *(q++) = '-';
X
X    for (i=opts->minlen; i--;)
X      *(q++) = *(p++);
X
X    if (*p)
X    {
X      *(q++) = '[';
X      while (*p)
X        *(q++) = *(p++);
X      *(q++) = ']';
X    }
X
X    if (opts->argtype)
X    {
X      *(q++) = ' ';
X      *(q++) = '<';
X      switch (opts->argtype)
X      {
X        case OPT_NUMBER   : strcpy(q, "number"); break;
X        case OPT_REAL     : strcpy(q, "real"); break;
X        case OPT_STRING   : strcpy(q, "string"); break;
X        case OPT_BOOLEAN  : strcpy(q, "boolean"); break;
X      }
X      while (*q) q++;
X      *(q++) = '>';
X    }
X    if (opts->desc && *opts->desc)
X    {
X      do
X      {
X        *(q++) = ' ';
X      } while (q-buf < maxl);
X      strcpy(q, opts->desc);
X    } else
X      *q = '\0';
X    (*print)(buf);
X    opts++;
X  }
X}
X
Xvoid paDoHelp(OptsList *opts, char *program)
X{
X  printf("Available options for %s:\n", program);
X  paListOpts(opts, puts);
X}
END_OF_FILE
if test 6174 -ne `wc -c <'fromwho/parseargs/parseargs.c'`; then
    echo shar: \"'fromwho/parseargs/parseargs.c'\" unpacked with wrong size!
fi
# end of 'fromwho/parseargs/parseargs.c'
fi
if test -f 'fromwho/parseargs/parseargs.man' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'fromwho/parseargs/parseargs.man'\"
else
echo shar: Extracting \"'fromwho/parseargs/parseargs.man'\" \(5086 characters\)
sed "s/^X//" >'fromwho/parseargs/parseargs.man' <<'END_OF_FILE'
X.\" @(#)parseargs.3 1.00 93/01/15 Johnson Earls
X.TH PARSEARGS 3 "15 January 1993"
X.SH NAME
Xparseargs, paInit, paOpt, paListOpts, paDoHelp, pa_argc \- parse command line arguments
X.SH SYNOPSIS
X.LP
X.nf
X.ft B
X#include <parseargs.h>
X.sp
XpaInit(opts)
XOptsList *opts;
X.sp
XOptVal *paOpt(argc, argv, opts)
Xint argc;
Xchar **argv;
XOptsList *opts;
X.sp
XpaListOpts(opts, printfunc)
XOptsList *opts;
Xint (*printfunc)();
X.sp
XpaDoHelp(opts, program)
XOptsList *opts;
Xchar *program;
X.sp
Xtypedef struct OptsList
X{
X.ta 0.5i 1.2i 2.5i
X	char	*opt;	/* the name of the option (without the `-') */
X	int	minlen;	/* the minimum length of the option */
X	int	argtype;	/* the option's argument type */
X				/* can be OPT_NUMBER, OPT_STRING, OPT_REAL, */
X				/* OPT_BOOLEAN, or OPT_NONE. */
X	int	retval;	/* the value to return */
X	char	*desc;	/* description of this option, for paListOpts */
X.DT
X} OptsList;
X.sp
Xtypedef struct OptVal
X{
X.ta 0.5i 1.2i 2.5i
X	char	*opt;	/* the option found */
X	int	which;	/* the return value */
X	union
X	{
X.ta 1i 1.7i 2.5i
X	char	*str;	/* the STRING argument */
X	long	num;	/* the NUMBER argument */
X	double	real;	/* the REAL argument */
X	int	bool;	/* the BOOLEAN argument */
X.ta 0.5i 1.2i 2.5i
X	} arg;
X.DT
X} OptVal;
X.LP
X.SH DESCRIPTION
X.LP
XThese routines provide an alternative to the
X.BR getopt (3)
Xlibrary.  They provide a simple way to parse command-line options,
Xincluding options longer than one letter, and to do some simple type
Xchecking on the option arguments.
X.LP
X.B PaInit
Xinitializes the options list
X.IR opts ,
Xsorting the options in the list alphabetically and assigning each one a
Xminimum length required to match that option.
X.LP
X.B PaOpt
Xreturns the next option from the command line.  If no more options were
Xfound, a
X.B NULL
Xpointer is returned.  If an error occurred (unknown option, bad argument
Xtype, etc.), the
X.I which
Xfield of the returned
X.b OptVal
Xstructure will be 0, and
X.I arg.str
Xwill hold an error message.
X.LP
X.B PaListOpts
Xdisplays an
X.B OptsList
Xstructure, showing the option names, with the optional part (if any) in
Xbrackets
X.RB ( [ ,
X.BR ] ),
Xthe argument type, and the description.  It calls
X.I printfunc
Xto print each line.
X.LP
X.B PaDoHelp
Xdisplays a header using the program name given in
X.I program
Xfollowed by the options list from
X.IR opts .
X.LP
X.SH BUILT-IN FUNCTIONS
X.LP
XThere is one built-in function available for option processing.  If the
X.I retval
Xfield of any option in the
X.B OptsList
Xis set to
X.BR OPT_HELP ,
X.B paDoHelp
Xwill be called automatically before returning that option to the
Xcalling program.
X.LP
X.SH EXAMPLE
X.LP
XThe following example accepts either an integer or a real number and prints
Xthe square of that.  The options are:
X.IP -help 1.2i
XList the available options.
X.IP "-int <number>" 1.2i
XPrint the square of <number>.
X.IP "-real <real>" 1.2i
XPrint the square of <real>.
X.sp 1
X.LP
X.nf
X.RS
X/* sample program using parseargs */
X.sp 1
X#include <stdio.h>
X#include <parseargs.h>
X.sp 1
Xstatic OptsList opts[] =
X{
X  { "help", 0, OPT_NONE, OPT_HELP, "List the available options." },
X  { "int", 0, OPT_NUMBER, 1, "Print the square of <number>." },
X  { "real", 0, OPT_REAL, 2, "Print the square of <real>." },
X.sp 1
X  { "", 0, 0, 0, "" },
X};
X.sp 1
Xstatic char *progname;
X.sp 1
Xstatic printErr(char *s)
X{
X  fprintf(stderr, "  %s\en", s);
X}
X.sp 1
Xstatic void usage(int ec)
X{
X  fprintf(stderr, "Usage: %s [<options>...]\en\enOptions:\en", progname);
X  paListOpts(opts, printErr);
X.sp 1
X  exit(ec);
X}
X.sp 1
Xint main(int argc, char **argv)
X{
X  OptVal *opt;
X.sp 1
X  progname = *argv;
X.sp 1
X  if (paInit(opts))
X  {
X    perror("paInit");
X    exit(errno);
X  }
X.sp 1
X  if (argc == 1)
X    paDoHelp(opts, *argv);
X.sp 1
X  while (opt = paOpt(argc, argv, opts))
X  {
X    switch (opt->which)
X    {
X      case 1  : printf("%d squared = %d\en", opt->arg.num, opt->arg.num * opt->arg.num);
X                break;
X      case 2  : printf("%f squared = %f\en", opt->arg.real, opt->arg.real * opt->arg.real);
X                break;
X.sp 1
X      case OPT_HELP : break; /* otherwise -help would flag an error in default */
X.sp 1
X      default : fprintf(stderr, "%s:  %s\en", *argv, opt->arg.str);
X                usage(22);
X    }
X  }
X.sp 1
X  argc -= pa_argc; argv += pa_argc;
X  if (argc > 1)
X    usage(22);
X.sp 1
X  exit(0);
X}
X.ft R
X.fi
X.LP
X
X.SH "SEE ALSO"
X.BR getopt (3)
X.br
X.LP
X.SH DIAGNOSTICS
X.LP
X.B PaInit
Xwill return -1 if it finds an error and set
X.B errno
Xto one of the following:
X.IP EINVAL 1i
XThe
X.I argtype
Xfield is invalid.
X.IP ENOSYS 1i
XThe
X.I retval
Xfield is negative, but is not a valid internal function.  (ENOSYS is a POSIX
Xerror code; if this does not exist, ESRCH is returned instead.)
X.LP
XIf
X.B paOpt
Xcomes across an invalid option (one that is not in the
X.BR OptsList ,
Xis missing an argument, or whose argument is the wrong type), it will return an
X.B OptVal
Xstructure with the invalid option in
X.IR opt ,
X.I which
Xset to 0, and an error message in
X.IR arg.str .
X.LP
X.RE
X.LP
X.SH BUGS
X.LP
XAll information
Xis contained in a static area which is overwritten by subsequent calls
Xto these functions,
Xso it must be copied if it is
Xto be saved.
END_OF_FILE
if test 5086 -ne `wc -c <'fromwho/parseargs/parseargs.man'`; then
    echo shar: \"'fromwho/parseargs/parseargs.man'\" unpacked with wrong size!
fi
# end of 'fromwho/parseargs/parseargs.man'
fi
if test -f 'fromwho/patchlevel.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'fromwho/patchlevel.h'\"
else
echo shar: Extracting \"'fromwho/patchlevel.h'\" \(1793 characters\)
sed "s/^X//" >'fromwho/patchlevel.h' <<'END_OF_FILE'
X/*
X  fromwho patchlevel
X
X  This includes the RCS log and the patchlevel define
X
X  $Log: patchlevel.h,v $
X    Revision 1.7  1993/02/07  16:54:29  jearls
X    PATCH7: Updated to use 'parseargs' command-line parsing library
X    PATCH7: and added '-on' / '--nosort' option to display the mailbox
X    PATCH7: messages with no sorting whatsoever, and no combining of
X    PATCH7: messages from the same user (unless the messages were
X    PATCH7: together in the mailbox file).
X
X    Revision 1.6  1992/12/11  13:40:57  jearls
X    PATCH6: added -oa, -om to specify ordering of users alphabetically
X    PATCH6: or by mailbox order.  other small changes for portability.
X
X    Revision 1.5  92/04/07  17:24:26  jearls
X    PATCH5: Updated to use password file entry to get
X    PATCH5: user name and home directory, rather than
X    PATCH5: using UTMP and other fiddlingness.
X    
X    Revision 1.4  92/03/16  12:21:28  jearls
X    PATCH4: Added support for MMDF mailboxes (I hope!)
X    PATCH4: Added option to count mark unread messages as new
X    PATCH4: Added option to suppress error message when mail file doesn't exist
X    PATCH4: Added checking of an environment variable to find mail file
X    PATCH4: Added -q flag to reverse error message suppression
X    PATCH4: Added -v flag to display the version number
X    
X    Revision 1.3  91/12/03  11:14:15  jearls
X    PATCH3: Added `-v' option to display the version number.
X    
X    Revision 1.2  91/11/23  12:49:40  jearls
X    PATCH2: Fixed miscellanous bugs, added '-n' option to
X    PATCH2: list only new mail.
X    
X    Revision 1.1  91/10/19  17:06:12  jearls
X    PATCH1: Added support for AIX and other systems that don't
X    PATCH1: use a mail spool.
X    
X    Revision 1.0  91/10/19  14:40:25  jearls
X    Initial revision
X    
X*/
X
X#define PATCHLEVEL 7
END_OF_FILE
if test 1793 -ne `wc -c <'fromwho/patchlevel.h'`; then
    echo shar: \"'fromwho/patchlevel.h'\" unpacked with wrong size!
fi
# end of 'fromwho/patchlevel.h'
fi
if test -f 'fromwho/test.mmdf.uu' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'fromwho/test.mmdf.uu'\"
else
echo shar: Extracting \"'fromwho/test.mmdf.uu'\" \(1296 characters\)
sed "s/^X//" >'fromwho/test.mmdf.uu' <<'END_OF_FILE'
Xbegin 600 test.mmdf
XM 0$! 0I2971U<FXM4&%T:#H@/$9R;VUW:&]?5&5S=%]3=6ET93X*365S<V%G
XM92U)9#H@/#DR,#(R-3 V,S(N04$Q-S<X.$ @9G)O;7=H;RYC;VT@/@I296-E
XM:79E9#H@8GD@(&9R;VUW:&\N8V]M"@EI9"!!03 W.3(X.R!-;VXL(#(T($9E
XM8B Y,B R,CHS,CHT."!04U0*1&%T93H@36]N+" R-"!&96(@.3(@,C(Z,S(Z
XM-#@@4%-4"D9R;VTZ($9R;VUW:&]?5&5S=%]3=6ET90I4;SH@1G)O;7=H;U]4
XM97-T7U-U:71E"E-U8FIE8W0Z($9R;VUW:&\@=&5S=#H@($UE<W-A9V4@(S$@
XM*'-H;W5L9"!N;W0@8F4@3D57*0I3=&%T=7,Z(%)/"@H* 0$! 0H! 0$!"E)E
XM='5R;BU0871H.B \1G)O;7=H;U]497-T7U-U:71E/@I-97-S86=E+4ED.B \
XM.3(P,C(U,#8S,RY!03$W-SDS0"!F<F]M=VAO+F-O;2 ^"E)E8V5I=F5D.B!B
XM>2 @9G)O;7=H;RYC;VT*"6ED($%!,#<Y,S0[($UO;BP@,C0@1F5B(#DR(#(R
XM.C,S.C X(%!35 I$871E.B!-;VXL(#(T($9E8B Y,B R,CHS,SHP."!04U0*
XM1G)O;3H@1G)O;7=H;U]497-T7U-U:71E"E1O.B!&<F]M=VAO7U1E<W1?4W5I
XM=&4*4W5B:F5C=#H@1G)O;7=H;R!T97-T.B @365S<V%G92 C,B H<VAO=6QD
XM(&)E($Y%5R!W:71H("U$54Y214%$3D57*0I3=&%T=7,Z($\*"@H! 0$!"@$!
XM 0$*4F5T=7)N+5!A=&@Z(#Q&<F]M=VAO7U1E<W1?4W5I=&4^"DUE<W-A9V4M
XM260Z(#PY,C R,C4P-C,T+D%!,3<W.3= (&9R;VUW:&\N8V]M(#X*4F5C96EV
XM960Z(&)Y("!F<F]M=VAO+F-O;0H):60@04$P-SDT-SL@36]N+" R-"!&96(@
XM.3(@,C(Z,S,Z-3,@4%-4"D1A=&4Z($UO;BP@,C0@1F5B(#DR(#(R.C,S.C4S
XM(%!35 I&<F]M.B!&<F]M=VAO7U1E<W1?4W5I=&4*5&\Z($9R;VUW:&]?5&5S
XM=%]3=6ET90I3=6)J96-T.B!&<F]M=VAO('1E<W0Z("!-97-S86=E(",S("AS
X5:&]U;&0@8F4@3D57*0H*"@$! 0$*
X 
Xend
END_OF_FILE
if test 1296 -ne `wc -c <'fromwho/test.mmdf.uu'`; then
    echo shar: \"'fromwho/test.mmdf.uu'\" unpacked with wrong size!
fi
# end of 'fromwho/test.mmdf.uu'
fi
if test -f 'fromwho/test.sendmail' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'fromwho/test.sendmail'\"
else
echo shar: Extracting \"'fromwho/test.sendmail'\" \(1041 characters\)
sed "s/^X//" >'fromwho/test.sendmail' <<'END_OF_FILE'
XFrom Fromwho_Test_Suite Mon Feb 24 22:33:00 1992
XReturn-Path: <Fromwho_Test_Suite>
XMessage-Id: <9202250632.AA17788@ fromwho.com >
XReceived: by  fromwho.com
X	id AA07928; Mon, 24 Feb 92 22:32:48 PST
XDate: Mon, 24 Feb 92 22:32:48 PST
XFrom: Fromwho_Test_Suite
XTo: Fromwho_Test_Suite
XSubject: Fromwho test:  Message #1 (should not be NEW)
XStatus: RO
X
X
X
XFrom Fromwho_Test_Suite Mon Feb 24 22:33:20 1992
XReturn-Path: <Fromwho_Test_Suite>
XMessage-Id: <9202250633.AA17793@ fromwho.com >
XReceived: by  fromwho.com
X	id AA07934; Mon, 24 Feb 92 22:33:08 PST
XDate: Mon, 24 Feb 92 22:33:08 PST
XFrom: Fromwho_Test_Suite
XTo: Fromwho_Test_Suite
XSubject: Fromwho test:  Message #2 (should be NEW with -DUNREADNEW)
XStatus: O
X
X
X
XFrom Fromwho_Test_Suite Mon Feb 24 22:34:05 1992
XReturn-Path: <Fromwho_Test_Suite>
XMessage-Id: <9202250634.AA17797@ fromwho.com >
XReceived: by  fromwho.com
X	id AA07947; Mon, 24 Feb 92 22:33:53 PST
XDate: Mon, 24 Feb 92 22:33:53 PST
XFrom: Fromwho_Test_Suite
XTo: Fromwho_Test_Suite
XSubject: Fromwho test:  Message #3 (should be NEW)
X
X
X
END_OF_FILE
if test 1041 -ne `wc -c <'fromwho/test.sendmail'`; then
    echo shar: \"'fromwho/test.sendmail'\" unpacked with wrong size!
fi
# end of 'fromwho/test.sendmail'
fi
if test -f 'fromwho/verify.script' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'fromwho/verify.script'\"
else
echo shar: Extracting \"'fromwho/verify.script'\" \(1056 characters\)
sed "s/^X//" >'fromwho/verify.script' <<'END_OF_FILE'
X#define VARNAME(x) $x
X
X#ifdef MMDF
Xecho ./PROG -f test.mmdf
Xecho ""
X./PROG -f test.mmdf
Xecho ""
Xecho ./PROG -n -f test.mmdf
Xecho ""
X./PROG -n -f test.mmdf
X#else
Xecho ./PROG -f test.sendmail
Xecho ""
X./PROG -f test.sendmail
Xecho ""
Xecho ./PROG -n -f test.sendmail
Xecho ""
X./PROG -n -f test.sendmail
X#endif
X
Xecho ""
Xecho ""
X#ifdef MAILVAR
Xecho "Your MAILVAR is set to $"MAILVAR
Xeval "mail=$"MAILVAR
Xecho "$"MAILVAR "currently contains \"$mail\""
Xif [ -f "$mail" ]
Xthen
X  echo "  -- This file exists:"
X  echo ""
X  echo ./PROG -f $mail
X  echo ""
X  ./PROG -f $mail
Xelse
X  echo "  -- This file does not exist."
Xfi
Xecho ""
X#endif
X
X#ifdef MAILFILE
Xhome=`echo $HOME | sed 's,/,\\\\/,g'`
Xmail=`echo MAILFILE | sed 's/~/'$home'/g' | sed 's/\\*/'$USER'/g'`
X#else
X#ifndef MAILDIR
X#define MAILDIR "/usr/spool/mail/"
X#endif
Xmail=MAILDIR
Xmail=$mail$USER
X#endif
X
Xecho "Your default mail file is $mail"
Xif [ -f "$mail" ]
Xthen
X  echo "  -- This file exists:"
X  echo ""
X  echo ./PROG -f $mail
X  echo ""
X  ./PROG -f $mail
Xelse
X  echo "  -- This file does not exist."
Xfi
Xecho ""
END_OF_FILE
if test 1056 -ne `wc -c <'fromwho/verify.script'`; then
    echo shar: \"'fromwho/verify.script'\" unpacked with wrong size!
fi
# end of 'fromwho/verify.script'
fi
echo shar: End of archive 2 \(of 2\).
cp /dev/null ark2isdone
MISSING=""
for I in 1 2 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked both archives.
    echo "Now cd to fromwho and run './configure' to set up the Makefile."
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
-- 
John `Addicted to VR' Earls       darkfox@netcom.com

The opinions stated above are my very own.  If you want to use
'em, they're for sale, cheap.
