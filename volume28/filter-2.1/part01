Newsgroups: comp.sources.unix
From: polowin@chem.QueensU.CA (Joel Polowin)
Subject: v28i079: filter-2.1 - multiple-keyword text searcher, V2.1, Part01/01
Message-id: <1.772486169.29345@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: polowin@chem.QueensU.CA (Joel Polowin)
Posting-Number: Volume 28, Issue 79
Archive-Name: filter-2.1/part01

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 1 (of 1)."
# Contents:  MANIFEST README filter21.1 filter21.c makefile
# Wrapped by vixie@gw.home.vix.com on Fri Jun 24 12:27:39 1994
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'MANIFEST' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MANIFEST'\"
else
echo shar: Extracting \"'MANIFEST'\" \(269 characters\)
sed "s/^X//" >'MANIFEST' <<'END_OF_FILE'
X   File Name		Archive #	Description
X-----------------------------------------------------------
X MANIFEST                   1	This shipping list
X README                     1	
X filter21.1                 1	
X filter21.c                 1	
X makefile                   1	
END_OF_FILE
if test 269 -ne `wc -c <'MANIFEST'`; then
    echo shar: \"'MANIFEST'\" unpacked with wrong size!
fi
# end of 'MANIFEST'
fi
if test -f 'README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'README'\"
else
echo shar: Extracting \"'README'\" \(1114 characters\)
sed "s/^X//" >'README' <<'END_OF_FILE'
XFilter 2.1 by Joel Polowin  June 9 1994 Department of Chemistry,
XQueen's University, Kingston, Ontario, Canada.  Permission granted for
Xfree use and distribution;I want credit/blame for writing it.  E-mail:
Xpolowin@silicon.chem.queensu.ca, polowinj@qucdn.queensu.ca,
XJoel.Polowin@p4.f107.n249.z1.fidonet.org .  If you have suggestions or
Xconstructive criticism, they're welcome.
X
X"filter" is a text-search utility that permits multiple simultaneous
Xkeyword tests.
X
XYou *should* be able to install "filter" by typing "make".  You may
Xwish to edit the options at the beginning of the file "makefile".
XI won't guarantee that that installation will work, or anything else
Xabout this utility for that matter.  I haven't found any problems
Xwith it recently, but I don't know much about makefiles on MY system,
Xlet alone yours.
X
XWhat the makefile does is to compile the utility, and copy it to a
Xreadily-accessible directory, and copy the man page to what is
Xprobably the right place.  You may well be able to do this manually
Xmore quickly than you can check the options in "makefile" and run
Xthe automatic installation.
END_OF_FILE
if test 1114 -ne `wc -c <'README'`; then
    echo shar: \"'README'\" unpacked with wrong size!
fi
# end of 'README'
fi
if test -f 'filter21.1' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'filter21.1'\"
else
echo shar: Extracting \"'filter21.1'\" \(9436 characters\)
sed "s/^X//" >'filter21.1' <<'END_OF_FILE'
X.\" Copyright (c) 1994 by Joel Polowin, Department of Chemistry, Queen's 
X.\" University, Kingston, Ontario, Canada.  Permission granted for free 
X.\" use and distribution; I want credit/blame for writing it.  E-mail: 
X.\" polowin@silicon.chem.queensu.ca, polowinj@qucdn.queensu.ca, 
X.\" Joel.Polowin@p4.f107.n249.z1.fidonet.org .
X.\"
X.\" If you see something wrong with it or it fails to work, PLEASE let me know!
X.\"
X.TH FILTER 1 "7 June 1994"
X.IX filter
X.IX text
X.IX search
X.SH NAME
Xfilter \- text searcher, multiple simultaneous keyword tests
X.SH SYNOPSIS
X.na
X.B filter
X'ti 15
X.RI [ filename ]
X.RI [ filename \ ...]
X.I string 
X.RI [ string \ ...]
X.ad
X.SH DESCRIPTION
X.B filter
Xis a multiple-keyword text searcher.  Each
X.I string
X(default max. of 2000)
Xis a term to be searched for
Xin lines (default max. 600 chars) in file(s)
X.I filename,
Xprefixed by one 
Xof the following characters:
X.RS
X.PP
X+  to show lines which contain
X.I string
X.br
X\-  to show lines which do not contain
X.I string
X.br
X=  to show lines which contain
X.I string,
Xcase sensitive
X.br
X_  (underscore) to show lines which do not contain
X.br
X.I
X        string,
Xcase sensitive
X.PP
X.RE
XA string as above may be further prefixed with the letter 'o' to print the 
Xline if the current OR the preceding condition is true.
X.PP
XA string including blanks and the prefix may be enclosed in double quotes
Xon most systems.  Your operating system may have other ways of dealing
Xwith special characters.
X.PP
X.B filter
Xdetermines the first string which is a search term instead of a
Xfile name by its beginning with one of the characters '+\-=_'.  For files
Xwhose names begin with one of these characters, see below.  Otherwise, the
Xfirst search term must begin with one of these, as that first term cannot
Xbe 'or'-linked to a preceding term.  If no
X.I filename
Xis supplied,
X.B filter
Xreads from standard input.
X.PP
XFor strings that begin with '$', '&', or '^' (usually names of files of 
Xsearch terms), see below.
X.sp
X.PP
X.SS EXAMPLES
X.PP
X.B filter * +hawk +handsaw o+hound
X.PP
Xsearches all files in the current directory and prints lines that
Xcontain the string 'hawk' and at least one of 'handsaw' or 'hound'.
XThis assumes that the operating system and compiler accept wild-carded
Xfile names; else
X.B filter
Xwill be looking for a file named '*'.  For
XDOS, one would use '*.*'.
X.PP
X.nh
X.B
Xfilter armorial =Vert +argent \-gules _Or \-azure \-purpur +foil > tempfile.txt
X.PP
X.hy
Xsearches the file 'armorial' for lines that contain the string 'Vert'
X(case-sensitive) and 'argent' (upper or lower case) but not 'gules'
X(upper or lower case) and not 'Or' (case-sensitive) and neither 'azure'
Xnor 'purpur' (upper or lower case) and DO contain 'foil' (upper or
Xlower case); the resulting lines are saved in file 'tempfile.txt'.
X.sp
X.PP 
X.nh    
X.B
Xcat temp1.txt | filter +aardvark "o+winged\ pig" o+wombat "_|B|"
X.PP
X.hy
XThe file 'temp1.txt' is fed through
X.B filter, 
Xwhich passes
Xlines that contain 'aardvark' (upper or lower case) or the
Xstring 'winged\ pig' or 'wombat' (upper or lower case) and do NOT 
Xcontain '|B|'.  The result is printed on the screen.  Note use of quotation
Xmarks in the command line to include the space in 'winged\ pig' and the
Xspecial character '|' in '|B|'.
X.PP
X.SS "File names beginning with one of '+\-=_'"
X.PP
XIf you absolutely MUST use text file names that begin with one of these
Xcharacters, then use that character twice when you specify the file name(s) to
X.B filter\c
X\&.  Thus, the file name '\-stdev.c' would be specified as '\-\-stdev.c';
X\&'++junk.c' would be written '++++junk.c'.
X.PP
XWhat
X.B filter
Xdoes is to go through each term in the command line and
Xcount the number of identical flag characters beginning each; that number
Xis reduced by half, rounded down.  An even number specifies a text file name;
Xan odd number designates a search term.  '+junk' has one flag character,
Xis not changed (shortened by 1/2 \-> 0 characters), and is a search term:
Xprint lines containing 'junk'.  '++junk' has two flag characters, is 
Xshortened to '+junk', and is read as a text file name.  '+++junk' is shortened 
Xto '++junk', and is a search term: print lines containing the string '+junk'.
X\&'+=junk' has one flag character and is a search term: print lines containing
Xthe string '=junk'.
X.PP
XThis means that wild-carded file names that match files whose names begin
Xwith one of '+\-=_' will cause trouble.  I'm sorry; the telepathic monitors
Xof most computer systems are not software-addressable.  A compulsive urge
Xto use files whose names begin with punctuation or mathematical symbols 
Xcan now be treated successfully in a majority of cases.
X.PP
XSearch terms specified in files (see below) are not themselves in the
Xcommand line, and if they begin with one of '+\-=_' those characters should
Xnot be doubled.  Search-term file expansion takes place after
X.B filter
Xdetermines which command-line strings are file names.
X.PP
X.SS "'$', '&', and '^' usually flag search-term file names"
X.PP
XA string which begins with '$', '&', or '^' will be expanded as the name of a 
Xfile containing a list of search terms.  For example, the string +$critters
Xtells 
X.B filter
Xto look for a file 'critters'; lines from that file are taken
Xas search terms.
X 
XIf the file name is specified with '^', search terms INCLUDING '+\-=_' prefixes
Xare read from the file.  The string specifying the file name is replaced in
Xthe command line by the list of terms read from the file; the original prefix
Xis ignored.  
X.B filter 
Xdoes not add '+\-=_' prefixes to the terms.
X 
XIf the file name is specified with '$' or '&',
X.B filter
Xadds the prefix to 
Xeach term, depending on which of '$&' is used and which of '+\-=_' precedes it.
XWith '$', '+' and '=' give or-linked terms, so that text file lines will be
Xprinted if any search-term file line is matched; '\-' and '_' are not
Xor-linked, so that text file lines are printed only if no search-term file
Xline is matched.  With '&', '+' and '=' are not or-linked, so that ALL
Xsearch-term lines must be matched to print a text line; while '\-' and '_'
XARE or-linked, so that any search-term line NOT matched will allow text-line
Xprinting.
X.PP
XTo search for actual text strings beginning with '$','&', or '^', double the
Xflag characters.  Thus, to search for the string '$100', use the search
Xstring '+$$100'.  To expand file names beginning with those characters,
Xuse three of them: search-term file '$&junk' would be specified by something
Xlike '\-$$$&junk'.  In general, when a search term begins with a flag
Xcharacter, double each flag character of that kind beginning the term, and
Xif the term is a file name, add an extra flag character.
X.PP
XSearch-term files may contain file names, which will be expanded in turn.
XFor this reason, initial '$','&', and '^' characters must be doubled even in
Xnested search-term files.
X.PP
XNote that the or-linking logic can get seriously messed up when terms
Xbeginning with '\-' or '_' are expanded carelessly, as
X.B filter
Xhas no good
Xsense of logical precedence.  If file 'human' contains 'man' and 'woman',
Xthen 'o\-$human' would expand as 'o\-man \-woman'.
X.PP
X.SS EXAMPLES:
X 
X.B filter armorial +$animal o+$vegetable _^mineral
X.PP
X.RS
XIf file 'animal' contains:
X.br
X$human
X.br
Xreptile
X.br
Xamphibian
X.PP
Xand file 'human' contains:
X.br
Xman
X.br
Xwoman
X.PP
Xand file 'vegetable' contains:
X.br
Xtree
X.br
Xgrain
X.PP
Xand file 'mineral' contains:
X.br
X+rock
X.br
X\-dirt
X.PP
Xthen the above will be expanded to:
X.PP
X.B
Xfilter armorial +man o+woman o+reptile o+amphibian o+tree o+grain +rock
X.B
X\-dirt
X.RE
X.PP
X.B filter armorial +$&beastie +&&&doggie \-$dragon
X.PP
X.RS
XIf file '&beastie' contains:
X.br
Xunicorn
X.br
X$dragon
X.br
Xmanticore
X.PP
Xand file '&doggie' contains:
X.br
Xterrier
X.br
Xhound
X.br
X$$paniel
X.PP
Xand file 'dragon' contains:
X.br
Xwyvern
X.br
Xdragon
X.br
Xlizard
X.PP
Xthen the above will be expanded to
X.PP
X.B
X.nh
Xfilter armorial +unicorn o+wyvern o+dragon o+lizard o+manticore +terrier 
X.B
X+hound +$$paniel \-wyvern \-dragon \-lizard
X.PP
Xwhich will print all lines from file 'armorial' that contain
XANY of: 'unicorn', 'wyvern', 'dragon', 'lizard', 'manticore'; and
X.br
XALL of: 'terrier', 'hound', '$paniel'; and
X.br
XNONE of: 'wyvern', 'dragon', 'lizard'.
X.hy
X.RE
X.PP
X.SH "SEE ALSO"
X.PD
X.BR grep (1),
X.BR fgrep (1),
X.BR egrep (1)
X.SH DIAGNOSTICS
XMostly self-explanatory.
X.SH BUGS
XSee above comments re: wild-carded filenames that begin with flag characters,
Xand messed-up logic from carelessly expanded files of search terms.
X.PP
X.SS REVISION HISTORY
X.PP
XVersion 1.0 September 1992.
X.HP
X1.1 Sep '92 fixed minor bugs
X.HP
X1.2 Sep '92 added 'or'-linking to keywords
X.HP
X1.4 Oct '92 fixed a minor error in string lengths, added size DEFINEs
X.HP
X1.5 Jan '94 increased string lengths, fixed Stupid Newbie Error re:
Xassumption that *argv[] was writable
X.HP
X2.0 Feb '94 added search-term file expansion and multiple text file
Xcapability, including wildcards when system permits
X.HP
X2.1 Jun '94 added null-prefix search-term files and term-file `rewind'
X.PP
X.SS Copyleft info!
X.PP
XCopyright 1994 by Joel Polowin, Department of Chemistry, Queen's University, 
XKingston, Ontario, Canada.  Permission granted for free use and distribution;
XI want credit/blame for writing it.  Distributed as:
X.nh
X.B filtr21.tar, filtr21.zip.
XE-mail: polowin@silicon.chem.queensu.ca,
Xpolowinj@qucdn.queensu.ca, Joel.Polowin@p4.f107.n249.z1.fidonet.org .
X.hy
X.PP
XNo warranty of any kind is expressed or implied.  Hey, it's free!
END_OF_FILE
if test 9436 -ne `wc -c <'filter21.1'`; then
    echo shar: \"'filter21.1'\" unpacked with wrong size!
fi
# end of 'filter21.1'
fi
if test -f 'filter21.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'filter21.c'\"
else
echo shar: Extracting \"'filter21.c'\" \(8323 characters\)
sed "s/^X//" >'filter21.c' <<'END_OF_FILE'
X/*  `filter', v. 2.1    Latest mod: 12:30 Jun 8 1994
X     A `grep'-like text searcher for multiple simultaneous keyword tests
X
XCopyright 1994 by Joel Polowin, Department of Chemistry, Queen's University, 
XKingston, Ontario, Canada.  Permission granted for free use and distribution;
XI want credit/blame for writing it.  E-mail: polowin@silicon.chem.queensu.ca,
Xpolowinj@qucdn.queensu.ca, Joel.Polowin@p4.f107.n249.z1.fidonet.org .
X 
XIf you see something wrong with it or it fails to work, PLEASE let me know!
X*/
X 
X#define LENGTH 601 /* 1 more than max # characters */
X#define ARGS 2000
X 
X#include <stdio.h>
X#include <stdlib.h>
X#include <ctype.h>
X#include <string.h>
X 
Xvoid syntax ()
X{
X   fprintf(stderr,"Syntax: filter [filename] [filename ...] string [string ...]\n  where");
X   fprintf(stderr," each string (max. of %d) is a term to be searched for",ARGS);
X   fprintf(stderr," in lines (max.\n  %d chars) in file",LENGTH-1);
X   fprintf(stderr," `filename', prefixed by one of the following characters:\n");
X   fprintf(stderr,"    +  to show lines which contain string\n");
X   fprintf(stderr,"    -  to show lines which do not contain string\n");
X   fprintf(stderr,"    =  to show lines which contain string, case sensitive\n");
X   fprintf(stderr,"    _  (underscore) to show lines which do not contain string,\n");
X   fprintf(stderr,"            case sensitive\n\n");
X   fprintf(stderr,"A string as above may be further prefixed with the letter 'o' to\n");
X   fprintf(stderr,"  print the line if the current OR the preceding condition is true.");
X   fprintf(stderr,"\nA string including blanks and the prefix may be enclosed in");
X   fprintf(stderr," double quotes.\nStrings beginning with one of `$&^' designate"); 
X   fprintf(stderr," file expansion; see man page.\n\nExamples:\n  filter armorial");
X   fprintf(stderr," =Vert +argent -gules _Or -azure -purpur +foil > tempfile.txt\n");
X   fprintf(stderr,"  type temp1.txt | filter +aardvark \042o+winged pig\042 ");
X   fprintf(stderr,"o+wombat \042_|B|\042\n\nFilter utility v.2.1 (C) 1994 by Joel");
X   fprintf(stderr," Polowin, Chem. Dept., Queen's University,\nKingston.  Permission");
X   fprintf(stderr," granted for free use; I want credit/blame for writing it.\n");
X   fprintf(stderr,"polowin@silicon.chem.queensu.ca, polowinj@qucdn.queensu.ca\n");
X   exit(1);
X}
X 
Xvoid main(argc,argv)
Xint argc;
Xchar *argv[];
X{
X   char line[LENGTH],lowline[LENGTH];
X   FILE *infile;
X   int  i,j,k,l,test,firststring,nostring,lowcase;
X   void syntax();
X   void strlow();
X   char flag[ARGS+1],orflag[ARGS+1];
X   char *myargv[ARGS+1];
X   int  blocksize;
X   char *prefix,*filename;
X 
X   firststring=0;
X   for(i=1; i<argc; i++)
X      {
X      if(*argv[i]=='=' || *argv[i]=='+' || *argv[i]=='-' || *argv[i]=='_')
X	{
X	test=*argv[i];
X	for(j=1; test==*(argv[i]+j); j++)
X	   ;
X	if(j%2 && firststring==0) 
X	   firststring=i;
X	argv[i]+=j/2;
X	}
X      }
X 
X   if(firststring==0)
X      {
X      fprintf(stderr,"Must specify a search string.\n");
X      syntax();
X      }
X 
X   nostring=argc-firststring;
X   if(nostring>ARGS)
X      {
X      fprintf(stderr,"Too many search strings specified.\n");
X      syntax();
X      }
X 
X   lowcase=0;
X   
X   for (i=0; i<ARGS+1; i++) orflag[i]=0;
X 
X   blocksize=0;
X   for (i=firststring; i<argc; i++) blocksize+=strlen(argv[i])+1;
X   if (NULL==(myargv[1]=malloc(blocksize)))
X      {
X      fprintf(stderr,"Can't allocate memory for string storage.\n");
X      exit(1);
X      }
X   strcpy(myargv[1],argv[firststring]);
X 
X   for(i=2; i<=nostring; i++)
X      {
X      myargv[i]=myargv[i-1]+strlen(myargv[i-1])+1;
X      strcpy(myargv[i],argv[i+firststring-1]);
X      }
X 
X   for (i=1; i<=nostring; i++)
X   {
X      j=0;
X      switch(*myargv[i])
X      {
X	case '+':
X	   strlow(myargv[i]);
X	   lowcase=1;
X	case '=':
X	   flag[i]=1;
X	   break;
X	case '-':
X	   strlow(myargv[i]);
X	   lowcase=1;
X	case '_':
X	   flag[i]=0;
X	   break;
X	case 'O':
X	case 'o':
X	   orflag[i-1]=1;
X	   myargv[i]++;
X	   i--;
X	   j=1;
X	   break;
X	default:
X	   fprintf(stderr,"Error in string no. %d: %s\n",i-1,myargv[i]);
X	   syntax();
X      }
X 
X   if((!j) && (((test=*(myargv[i]+1))=='$') || (test=='&') || (test=='^')))
X      {
X      for(j=1; test==*(myargv[i]+1+j); j++)
X      ;  /* count identical flag chars */
X 
X      l=j/2;
X 
X      for (k=0; *(myargv[i]+k)!='\0'; k++)   /* shift string to delete */
X	*(myargv[i]+k+1)=*(myargv[i]+k+l+1);  /* half of flag chars */
X 
X      if(j%2) /* an odd number of flag chars: expand file */
X	{
X	if(test=='^') 
X	   {
X	   prefix="";
X	   orflag[i-1]=0;
X	   }
X	else
X	   {
X	   switch(*myargv[i])   /* determine prefix for expanded terms */
X	      {                 /* from current prefix and expansion type */
X	      case '+':
X		 if(test=='$') prefix="o+";
X		 else prefix="+";
X		 break;
X	      case '=':
X		 if(test=='$') prefix="o=";
X		 else prefix="=";
X		 break;
X	      case '-':
X		 if(test=='$') prefix="-";
X		 else prefix="o-";
X		 break;
X	      case '_':
X		 if(test=='$') prefix="_";
X		 else prefix="o_";
X		 break;
X	      default:
X		 fprintf(stderr,"Bugger-up in program!\n");
X		 exit(1);
X	      }
X	   }
X 
X	filename=myargv[i]+2;
X 
X	if(!(infile=fopen(filename,"r")))
X	   {
X	   fprintf(stderr,"Can't open search-term file %s\n",filename);
X	   exit(1);
X	   }
X 
X	if(test!='^') test=*myargv[i];  /* prefix of current term */
X 
X	blocksize=0;  /* figure out how much memory to allocate */
X	for(j=0;;j++)   /* for new terms */
X	   {
X	   if(NULL==fgets(line,LENGTH,infile)) break;
X	   if(LENGTH==strlen(line)+1) fprintf(stderr,
X	     "* Warning: truncated search term file %s line\n%s\n",
X	     filename,line);
X	   if(line[strlen(line)-1]=='\n') line[strlen(line)-1]='\0';
X	   blocksize+=strlen(line)+1;
X	   }
X 
X	if (j==0)
X	   {
X	   fprintf(stderr,"* Warning: empty search term file %s\n",
X	      filename);
X	   j=1;
X	   }
X 
X	blocksize+=j*strlen(prefix);
X	rewind(infile);
X 
X	if(nostring+j-1>ARGS)
X	   {
X	   fprintf(stderr,"File expansion gives too many terms (%d max)\n",
X	      ARGS);
X	   exit(1);
X	   }
X 
X	for(k=nostring; k>i; k--)      /* shift old myargv to make room */
X	   myargv[k+j-1]=myargv[k];
X 
X	if(NULL==(myargv[i]=malloc(blocksize)))
X	   {
X	   fprintf(stderr,"Can't allocate memory for search term expansion.\n");
X	   exit(1);
X	   }
X 
X	for(k=0;k<j;k++)
X	   {
X	   fgets(line,LENGTH,infile);
X	   if(line[strlen(line)-1]=='\n') line[strlen(line)-1]='\0';
X	   if(k==0)
X	      {
X	      if(test=='^') strcpy(myargv[i],line);
X	      else
X		 {
X		 *myargv[i]=test;
X		 strcpy(myargv[i]+1,line);
X		 }
X	      }
X	   else
X	      {
X	      myargv[i+k]=myargv[i+k-1]+strlen(myargv[i+k-1])+1;
X	      strcpy(myargv[i+k],prefix);
X	      strcat(myargv[i+k],line);
X	      }
X	   }
X 
X	fclose(infile);
X	nostring+=j-1;
X	i--;
X	}
X      }
X   }
X 
X   k=0;
X   do
X      {
X      k++;
X      if(firststring==1) infile=stdin;
X      else
X	if(!(infile=fopen(argv[k],"r")))
X	   {
X	   fprintf(stderr,"Can't open file %s for reading.\n",argv[k]);
X	   syntax();
X	   }
X      l=0;
X 
X      for (;;)
X	{
X	if(NULL==fgets(line,LENGTH,infile)) break;
X	if(LENGTH==strlen(line)+1) fprintf(stderr,"* Warning: truncated line \n%s\n",line);
X	if(lowcase) strlow(strcpy(lowline,line));
X	for(i=1; i<=nostring; i++)
X	   {
X	   test=0;
X	   switch(*myargv[i])
X	      {
X	      case '=':
X	      case '_':
X		 if(NULL!=strstr(line,(myargv[i]+1))) test=1;
X		 break;
X	      default:
X		 if(NULL!=strstr(lowline,(myargv[i]+1))) test=1;
X		 break;
X	      }
X	   if(test!=flag[i] && orflag[i]==0) break;
X	   if(test==flag[i])
X	      while(orflag[i]==1) i++;
X	   }
X	if(i>nostring)
X	   {
X	   if(firststring>2 && l==0)
X	      {
X	      printf("File %s:\n",argv[k]);
X	      l=1;
X	      }
X	   printf("%s",line);
X	   }
X	}
X      if(infile!=stdin) fclose(infile);
X      }
X   while(k<firststring-1);
X   exit(0);
X}
X 
Xvoid strlow(string)
Xchar *string;
X{
X   while (*string!='\0')
X   {
X      *string=tolower(*string);
X      string++;
X   }
X}
X 
X 
X/*  Revision history:
X 
XVersion 1.0 September 1992.
X 
X1.1 Sep '92 fixed minor bugs
X1.2 Sep '92 added 'or'-linking to keywords
X1.4 Oct '92 fixed a minor error in string lengths, added size DEFINEs
X1.5 Jan '94 increased string lengths, fixed a Stupid Newbie Error re:
X	    assumption that *argv[] was writeable
X2.0 Feb '94 added search-term file expansion and multiple text file
X	    capability, including wildcards when system permits
X2.1 Jun '94 added null-prefix search-term files and term-file `rewind'
X
X*/
END_OF_FILE
if test 8323 -ne `wc -c <'filter21.c'`; then
    echo shar: \"'filter21.c'\" unpacked with wrong size!
fi
# end of 'filter21.c'
fi
if test -f 'makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'makefile'\"
else
echo shar: Extracting \"'makefile'\" \(1430 characters\)
sed "s/^X//" >'makefile' <<'END_OF_FILE'
X# Filter 2.1 installation by Joel Polowin  June 16 1994 Department of 
X# Chemistry, Queen's University, Kingston, Ontario, Canada.  Permission 
X# granted for free use and distribution;I want credit/blame for writing it.
X# E-mail: polowin@silicon.chem.queensu.ca, polowinj@qucdn.queensu.ca, 
X# Joel.Polowin@p4.f107.n249.z1.fidonet.org .  If you have suggestions
X# or constructive criticism, it's welcome.
X
X# Warning: Joel don't know makefiles.  This was cribbed together by
X# looking at what showed up in other makefiles for other software.  No
X# guarantees whatsoever.  This "package" consists of one short program
X# that has to be compiled and stuck wherever, and one man page to go
X# with the usual set.  You're very likely able to do this manually more 
X# quickly than you can by checking and running this installation routine.
X
X# The directory you want the compiled program to end up in:
XDEST=/usr/local/bin
X# DEST=.
X
X# Your favorite C compiler:
XCC= cc
X
X# And your favorite compiler flags:
XCFLAGS = -O
X
X# The directory for the man pages:
XMANDIR=/usr/man/mann
X# MANDIR=.
X
X# The suffix to be attached to the man file; generally the same as the
X# last character of the man-page directory name:
XMANSUFFIX=n
X
XOBJECTS=filter21.o
X
Xfilter: $(OBJECTS)
X	cc $(CFLAGS) -o $(DEST)/filter filter21.o
X	rm -f $(MANDIR)/filter.* filter21.o
X	cp filter21.1 $(MANDIR)/filter.$(MANSUFFIX)
X	echo "Finished"
X
X.c.o: 
X	$(CC) $(CFLAGS) -c $< -o $*.o
END_OF_FILE
echo shar: 2 control characters may be missing from \"'makefile'\"
if test 1430 -ne `wc -c <'makefile'`; then
    echo shar: \"'makefile'\" unpacked with wrong size!
fi
# end of 'makefile'
fi
echo shar: End of archive 1 \(of 1\).
cp /dev/null ark1isdone
MISSING=""
for I in 1 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have the archive.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
