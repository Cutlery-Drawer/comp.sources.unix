Newsgroups: comp.sources.unix
From: maart@nikhefk.nikhef.nl (Maarten Litmaath)
Subject: v28i124: startup - flexible UNIX shell session initialization, Part01/01
Message-id: <1.780086866.16105@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: maart@nikhefk.nikhef.nl (Maarten Litmaath)
Posting-Number: Volume 28, Issue 124
Archive-Name: startup/part01

X-Environment: UNIX (BSD, System V)

This package addresses the problem of session initialization in UNIX.
In many UNIX versions "login" only sets a few environment variables,
prints /etc/motd, and it is up to the user to do the rest.  For non-
interactive remote shells ("rsh") the situation is even worse: the
shell ignores initialization files like ".login" and ".profile" in
these cases.

Some UNIX versions have standard shells "csh" and "sh" that consult
system-wide initialization files like /etc/login and /etc/profile.
At other installations the user is provided with custom versions of
shell initialization files that read the system-wide files explicitly.
In the latter case the user can easily screw up by modifying his files
inadvertently.  Furthermore, in either case the system administrator
has to maintain multiple system-wide files, namely one for each shell
in use.  Finally, the files in question often contain things that are
not crucial for smooth operation of the system, like alias definitions
and terminal mode settings that are handy for novice users, but annoy
the experienced: these things should go into the custom initialization
files that can be modified according to the user's taste.

The Startup Package offers an easy, portable alternative to deal with
the aforementioned problems.

: This is a shar archive.  Extract with sh, not csh.
: This archive ends with exit, so do not worry about trailing junk.
: --------------------------- cut here --------------------------
PATH=/bin:/usr/bin:/usr/ucb
echo Extracting 'startup.doc'
sed 's/^X//' > 'startup.doc' << '+ END-OF-FILE ''startup.doc'
X
X		The Startup Package.
X		--------------------
X
XThis package addresses the problem of session initialization in UNIX.
XIn many UNIX versions "login" only sets a few environment variables,
Xprints /etc/motd, and it is up to the user to do the rest.  For non-
Xinteractive remote shells ("rsh") the situation is even worse: the
Xshell ignores initialization files like ".login" and ".profile" in
Xthese cases.
X
XSome UNIX versions have standard shells "csh" and "sh" that consult
Xsystem-wide initialization files like /etc/login and /etc/profile.
XAt other installations the user is provided with custom versions of
Xshell initialization files that read the system-wide files explicitly.
XIn the latter case the user can easily screw up by modifying his files
Xinadvertently.  Furthermore, in either case the system administrator
Xhas to maintain multiple system-wide files, namely one for each shell
Xin use.  Finally, the files in question often contain things that are
Xnot crucial for smooth operation of the system, like alias definitions
Xand terminal mode settings that are handy for novice users, but annoy
Xthe experienced: these things should go into the custom initialization
Xfiles that can be modified according to the user's taste.
X
XThe whole problem can be solved in one go, if instead of the user's
Xactual shell, a dedicated "login" shell is executed, that takes care
Xof environment variables etc. after which it executes the real shell.
X
XIdeally the password file would not be changed: users would stay with
Xtheir original shells, whereas programs like "login" would be modified
Xto execute the dedicated "wrapper" instead of the shell pointed out in
X/etc/passwd.
X
XUnfortunately this either requires the vendor to modify "login" (and
Xsimilar utilities like /usr/etc/in.rshd), or it requires the system
Xadministrator to replace the utilities with local versions.  Generally
Xthe latter option is non-trivial, because these utilities tend to have
Xundocumented features which are crucial for smooth operation of the
Xsystem.
X
XThe Startup Package avoids these problems by letting each user have
Xthe "wrapper" itself as shell.  It is up to this wrapper to find out
Xwhich shell the user really wants, whether it should be interactive
Xor not, whether a message of the day should be printed etc.
X
XHow does it accomplish these tasks?
X-----------------------------------
X
XThe wrapper is typically located in a directory /usr/local/loginshells
Xand linked to files whose basenames are those of the real shells that
Xare in use, like "csh", "sh" and "bash".  Then each user chooses the
Xappropriate link as login shell.  If this scheme is to be enforced,
Xthe "chsh" program must be disabled, and every instance of /bin/csh
Xin /etc/passwd must be changed to /usr/local/loginshells/csh etc.
XNote that /usr/local/loginshells should NOT be put into the user's
XPATH (it may even be made unreadable).
X
XNow from the user's entry in /etc/passwd, the wrapper can find out what
Xshell is really wanted.  If the wrapper is executed by "login", the
Xname with which it is started (argument zero) has a leading "-".
XThe wanted shell, when necessary prefixed with the "-", is made the
Xfirst argument of the session initialization shell script.  The other
Xarguments are passed on as well.
X
XThe script is typically located in /usr/local/etc/startup_script.
XAn example is provided.  It sets the SHELL environment variable
Xto the name of the wanted shell, in the hope that utilities will use
Xit.  Otherwise, if it finds that the session has been initialized
Xalready, and the user did not request a login shell, it executes the
Xwanted shell immediately.
X
XIf a login shell is wanted, the startup script prints a message of
Xthe day etc.  In any case it initializes the environment and ends in
Xexecuting the actual shell.  The first argument of the script is made
Xthe name (argument zero) of the shell, the rest is simply passed on.
X
XAdvantages of using the Startup Package:
X----------------------------------------
X
X	- the user's ".login"/".profile" need not be prepared to
X	  consult system-wide initialization files
X
X	- there is only 1 system-wide startup file, independent of
X	  the user's actual shell
X
X	- the package works with "login", "rsh" and "su"
X
X	- it does not require system sources
X
X	- it offers flexibility for the system administrator to:
X
X		- set environment variables
X		- print a message of the day
X		- run programs
X		- control access/nice/limits/...
X
X	- it allows for host- and group-dependent initialization
X
XInstallation guide:
X-------------------
X
X 1) change configuration parameters in the Makefile, startup_wrapper.c
X    and "startup_script"
X
X 2) put your local session initialization commands into the provided
X    "startup_script"; note that it must work with "login", "rsh" and
X    "su"
X
X 3) type "make install"
X
X 4) for "ftp" update /etc/shells with the names of the new shells
X
X 5) edit the passwd file (on the NIS/YP server): for all ordinary users
X    change the loginshell, e.g. /bin/csh -> /usr/local/loginshells/csh;
X    leave "root" and other special users alone
X
X 6) optionally disable "chsh"
X
+ END-OF-FILE startup.doc
chmod 'u=rw,g=,o=' 'startup.doc'
set `wc -c 'startup.doc'`
count=$1
case $count in
5088)	:;;
*)	echo 'Bad character count in ''startup.doc' >&2
		echo 'Count should be 5088' >&2
esac
echo Extracting 'Makefile'
sed 's/^X//' > 'Makefile' << '+ END-OF-FILE ''Makefile'
X# Makefile for Startup Package
X
X# uncomment the next definition if your C library already
X# contains the function strerror(3):
X# HAS_STRERROR	= -DHAS_STRERROR
X
XLOGINSHELLS_DIR	= /usr/local/loginshells
XLOGINSHELLS	= csh sh		# bash ksh tcsh etc.
XWRAPPER		= startup_wrapper
XSTARTUP		= startup_script
XSTARTUP_DIR	= /usr/local/etc
XLOCAL_BIN	= /usr/local/bin
XEXECLP		= execlp
X
Xinstall:	i_$(WRAPPER) i_$(EXECLP) i_$(STARTUP)
X
X$(WRAPPER):	$(WRAPPER).c
X		$(CC) -o $(WRAPPER) $(HAS_STRERROR) $(WRAPPER).c
X
Xi_$(WRAPPER):	$(WRAPPER)
X		sh -c "(cd $(LOGINSHELLS_DIR)) 2> /dev/null || \
X			mkdir $(LOGINSHELLS_DIR)"
X		mv $(WRAPPER) $(LOGINSHELLS_DIR)
X		cd $(LOGINSHELLS_DIR); \
X			for i in $(LOGINSHELLS); do ln $(WRAPPER) $$i; done
X
X$(EXECLP):	$(EXECLP).c
X		$(CC) -o $(EXECLP) $(EXECLP).c
X
Xi_$(EXECLP):	$(EXECLP)
X		sh -c "(cd $(LOCAL_BIN)) 2> /dev/null || mkdir $(LOCAL_BIN)"
X		mv $(EXECLP) $(LOCAL_BIN)
X
X$(STARTUP):
X
Xi_$(STARTUP):	$(STARTUP)
X		sh -c "(cd $(STARTUP_DIR)) 2> /dev/null || mkdir $(STARTUP_DIR)"
X		chmod a+rx $(STARTUP)
X		cp $(STARTUP) $(STARTUP_DIR)
X
Xpackage:
X		shar startup.doc Makefile startup_wrapper.c execlp.c \
X			startup_script.ex > startup.shar
+ END-OF-FILE Makefile
chmod 'u=rw,g=,o=' 'Makefile'
set `wc -c 'Makefile'`
count=$1
case $count in
1154)	:;;
*)	echo 'Bad character count in ''Makefile' >&2
		echo 'Count should be 1154' >&2
esac
echo Extracting 'startup_wrapper.c'
sed 's/^X//' > 'startup_wrapper.c' << '+ END-OF-FILE ''startup_wrapper.c'
X/*
X * startup_wrapper.c
X *
X * Wrapper for a generic startup shell, to be linked to
X * /usr/local/loginshells/sh, /usr/local/loginshells/csh, etc.
X * The directory /usr/local/loginshells should NOT be put in the PATH
X * (it may even be made unreadable).
X *
X * The program extracts the name of the used link from the shell field
X * of the user's passwd entry.
X *
X * The program ends with the execution of the startup script specified
X * below.
X *
X * The first argument is made the basename of the found shell, to which
X * a "-" is prepended if argument 0 of the wrapper starts with one.
X * Through the leading "-" a login shell is requested.
X */
X
Xstatic	char	Id[] =
X"@(#)startup_wrapper 2.2 92/06/23 maart@nikhef.nl (Maarten Litmaath)";
X
X#ifndef	TEST
Xstatic	char	Startup_script[] = "/usr/local/etc/startup_script";
X#else
Xstatic	char	Startup_script[] = "./startup_script";
X#endif	/* !TEST */
X
X/*
X * The directory where the loginshells reside.
X * To be foolproof, its name should end in a slash.
X */
Xstatic	char	Loginshells_dir[] = "/usr/local/loginshells/";
X
X/*
X * The environment variable indicating that the system setup has been done.
X */
X
Xstatic	char	System_setup[] = "SYSTEM_SETUP";
X
X/*
X * Last resort shells.
X */
X
Xstatic	char	*Shells[] = {
X	"/bin/csh",
X	"/bin/sh",
X	0
X};
X
X#include	<stdio.h>
X#include	<pwd.h>
X#include	<sys/param.h>
X#include	<errno.h>
X#include	<stdlib.h>
X#include	<string.h>
X
Xmain(argc, argv)
Xint	argc;
Xchar	**argv;
X{
X	extern	char	*strerror();
X	struct	passwd	*pw;
X	char	**av, **p, **q;
X	char	*shell, *s;
X	char	buf[MAXPATHLEN + 1];
X	int	uid;
X
X	/*
X	 * If the setup has already been done, take a shortcut.
X	 * Beware that "su" sets the "SHELL" variable to what it
X	 * finds in the "passwd" file, so in order to prevent an
X	 * infinite recursion, check that the found shell does not
X	 * reside in the special loginshells directory!
X	 */
X
X	if (getenv(System_setup) && (shell = getenv("SHELL")) != 0
X		&& strncmp(shell, Loginshells_dir, strlen(Loginshells_dir))
X		!= 0) {
X		execvp(shell, argv);
X		if (errno == ENOMEM) {
X			perror(shell);
X			exit(1);
X		}
X		/*
X		 * Assume execvp() failed because $SHELL is nonsense.
X		 * Probably some utility decided to use the shell field
X		 * of the passwd entry instead, so do not print an error
X		 * message, but try to get to the right shell.
X		 */
X	}
X
X	/*
X	 * Find out the wanted shell.
X	 */
X
X	if (!(pw = getpwuid(uid = getuid()))) {
X		fprintf(stderr, "%s: cannot get passwd entry for uid %d: %s\n",
X			argv[0], uid, strerror(errno));
X		/*
X		 * Wager that argv[0] gives a hint.
X		 */
X		if ((s = strrchr(argv[0], '/')) != 0
X			|| *(s = argv[0]) == '-') {
X			s++;
X		}
X	} else {
X		if (!(s = strrchr(pw->pw_shell, '/'))) {
X			s = pw->pw_shell;
X		} else {
X			s++;
X		}
X	}
X	shell = buf;
X	if (*argv[0] == '-') {
X		*shell++ = '-';
X	}
X	strncpy(shell, s, MAXPATHLEN);
X
X	/*
X	 * Create a new argument list.
X	 */
X
X	if (!(q = av = (char **) malloc((argc + 2) * sizeof *av))) {
X		fprintf(stderr, "%s: memory allocation error: %s\n",
X			argv[0], strerror(errno));
X	} else {
X		*q++ = Startup_script;
X		*q++ = buf;
X		p = &argv[1];
X		while ((*q++ = *p++) != 0) {
X		}
X		execv(Startup_script, av);
X		fprintf(stderr, "%s: %s: %s\n", argv[0],
X			Startup_script, strerror(errno));
X	}
X
X	/*
X	 * Try to execute the shell directly.
X	 * As a last resort try the standard shells.
X	 */
X
X	for (p = Shells; ; p++) {
X		fprintf(stderr, "%s: trying %s\n", argv[0], shell);
X		execvp(shell, argv);
X		fprintf(stderr, "%s: %s: %s\n", argv[0], shell,
X			strerror(errno));
X		if (!(shell = *p)) {
X			break;
X		}
X	}
X
X	return 1;
X}
X
X
X#ifndef	HAS_STRERROR
X
Xchar	*strerror(n)
Xint	n;
X{
X	extern	int	sys_nerr;
X	extern	char	*sys_errlist[];
X
X	return (0 <= n && n < sys_nerr) ? sys_errlist[n] : "Unknown error";
X}
X
X#endif	/* !HAS_STRERROR */
+ END-OF-FILE startup_wrapper.c
chmod 'u=rw,g=r,o=r' 'startup_wrapper.c'
set `wc -c 'startup_wrapper.c'`
count=$1
case $count in
3737)	:;;
*)	echo 'Bad character count in ''startup_wrapper.c' >&2
		echo 'Count should be 3737' >&2
esac
echo Extracting 'execlp.c'
sed 's/^X//' > 'execlp.c' << '+ END-OF-FILE ''execlp.c'
X/*
X * execlp.c
X */
Xstatic	char	Id[] =
X	"@(#)execlp 1.0 92/06/14 maart@nikhef.nl (Maarten Litmaath)";
X
X#include	<stdio.h>
X
Xmain(argc, argv)
Xint	argc;
Xchar	**argv;
X{
X	if (argc < 2) {
X		fprintf(stderr, "Usage: %s executable [name [args]]\n",
X			argv[0]);
X	} else {
X		execvp(argv[1], &argv[2]);
X		perror(argv[1]);
X	}
X	return 1;
X}
+ END-OF-FILE execlp.c
chmod 'u=rw,g=r,o=r' 'execlp.c'
set `wc -c 'execlp.c'`
count=$1
case $count in
326)	:;;
*)	echo 'Bad character count in ''execlp.c' >&2
		echo 'Count should be 326' >&2
esac
echo Extracting 'startup_script.ex'
sed 's/^X//' > 'startup_script.ex' << '+ END-OF-FILE ''startup_script.ex'
X#!/bin/csh -f
X# @(#)startup_script 2.12 92/08/26 maart@nikhef.nl (Maarten Litmaath)
X# Generic startup shell, to be executed by /usr/local/loginshells/sh,
X# /usr/local/loginshells/csh, etc.
X# The directory /usr/local/loginshells should NOT be put in the PATH
X# (it may even be made unreadable).
X# The basename of the first argument, without the leading "-", if any,
X# indicates the real shell to be fired up in the end.
X# Through a leading "-" a login shell is requested.
X# The first argument will be made argument 0 of the real shell.
X
X#
X# configuration definitions
X#
X
Xset	CONF_DIR	= /usr/local/etc
Xset	EXECLP		= /usr/local/bin/execlp		# see execlp(3)
X
Xalias	errmsg		"sh -c 'exec echo "'"$@" >&2'"'" x	# bah!
X
X#
X# choose the intended shell and hope that utilities will honor it
X#
X
Xif ($#argv < 1) then
X	errmsg "Usage: $0 name-of-shell [args]"
X	exit 1
Xendif
X
Xset	base		= `basename "$1" | sed 's/^-//'`
X
Xswitch ($base)
Xcase sh:
Xcase csh:
X	setenv	SHELL	/bin/$base
X	set	start_shell = $SHELL
X	breaksw
Xdefault:
X	errmsg "${0}: unknown shell requested: $base"
X	exit 1
X	breaksw
Xendsw
X
X#
X# indicate whether a login shell has been requested
X#
X
Xif ("x$1" =~ x-*) set	login_shell
X
X#
X# if the setup has already been done, take a shortcut, unless the
X# user requested a login shell
X#
X
Xif ($?SYSTEM_SETUP && ! $?login_shell) exec $EXECLP $SHELL $argv:q
X
Xsetenv	SYSTEM_SETUP	1
X
X#
X# while in this script ignore interrupts
X#
X
Xonintr -
X
X#
X# generic aliases for manipulation of "*PATH" environment variables
X#
X
Xalias	append	'\\
X		if (! $?\!^) setenv \!^;\\
X		set tmp_="$\!^":;\\
X		if ("$tmp_" == :) set tmp_;\\
X		set tmp__=\!:2;\\
X		setenv \!^ "$tmp_$tmp__"'
X
Xalias	prefix	'\\
X		if (! $?\!^) setenv \!^;\\
X		set tmp_=:"$\!^";\\
X		if ("$tmp_" == :) set tmp_;\\
X		set tmp__=\!:2;\\
X		setenv \!^ "$tmp__$tmp_"'
X
X#
X# umask
X#
X
Xumask 022
X
X#
X# Base definitions
X#
X
Xunsetenv	PATH
Xappend		PATH		/usr/ucb
Xappend		PATH		/bin
Xappend		PATH		/usr/bin
Xappend		PATH		/usr/5bin
Xappend		PATH		/etc
Xappend		PATH		/usr/etc
Xappend		PATH		/usr/games
Xappend		PATH		.
Xunsetenv	FONTPATH
Xunsetenv	HELPPATH
Xunsetenv	LD_LIBRARY_PATH
Xsetenv		MANPATH		/usr/man
X
X#
X# Languages
X#
X
Xprefix		PATH		/usr/lang
Xprefix		PATH		/usr/lang/bin
Xprefix		LD_LIBRARY_PATH	/usr/lang/SC1.0.1
Xprefix		MANPATH		/usr/lang/man
X
X#
X# Openwin
X#
X
Xsetenv		OPENWINHOME	/usr/openwin
Xsetenv		XNEWSHOME	$OPENWINHOME
Xappend		LD_LIBRARY_PATH	$OPENWINHOME/lib
Xprefix		PATH		$OPENWINHOME/demo
Xprefix		PATH		$OPENWINHOME/bin
Xsetenv		XAPPLRESDIR	/usr/local/lib/X11/app-defaults
X
X#
X# Motif
X#
X
Xsetenv		MOTIFHOME	/usr/motif
Xprefix		LD_LIBRARY_PATH	$MOTIFHOME/lib
Xprefix		PATH		$MOTIFHOME/bin
X
X#
X# Local
X#
X
Xprefix		PATH		/usr/local/bin
Xprefix		MANPATH		/usr/local/man
X
X#
X# message of the day when login shell
X#
X
Xif ($?login_shell) then
X	cat $CONF_DIR/motd
Xendif
X
X#
X# host-specific stuff
X#
X
Xsetenv		HOSTNAME	`hostname`
X
Xset	file	= $CONF_DIR/startup_host/$HOSTNAME
Xif (-r $file) source $file 
X
X#
X# group-specific stuff
X#
X
Xset	group	= `id | sed -e 's/.* gid=[^(]*(//' -e 's/).*//'`
Xset	tilde	= `echo ~$group >& /dev/null && echo ~$group`
X
Xif ("$tilde" != "") then
X	set	file	= ~$group/startup_$group
X	if (-r $file) source $file
Xendif
X
X#
X# restore interrupts
X#
X
Xonintr
X
X#
X# fire up the real shell
X#
X
Xexec $EXECLP $start_shell $argv:q
+ END-OF-FILE startup_script.ex
chmod 'u=rw,g=r,o=r' 'startup_script.ex'
set `wc -c 'startup_script.ex'`
count=$1
case $count in
3235)	:;;
*)	echo 'Bad character count in ''startup_script.ex' >&2
		echo 'Count should be 3235' >&2
esac
exit 0
