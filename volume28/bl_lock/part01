Newsgroups: comp.sources.unix
From: carl@oversteer.library.uwa.edu.au (Carl Brewer)
Subject: v28i155: bl_lock - dumb(sic) terminal screen lock utility, Part01/01
Message-id: <1.784074915.9933@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: carl@oversteer.library.uwa.edu.au (Carl Brewer)
Posting-Number: Volume 28, Issue 155
Archive-Name: bl_lock/part01

	bl_lock 1.0a

	Dumb (misonmer, but conventional term) terminal screen locker.

	There seems to be a demand for UNIX screenlockers, and I'm not aware
	of one, so I wrote a crude one, here it is, for anyone that wants
	one ... it could be extended easily enough to make it into a
	screensaver, I guess, hack in some signal handling linked to
	terminal idletime or somesuch, but I didn't bother, if that's what
	you want, feel free to pinch bits of this to write your own.

			Carl Brewer <carl@oversteer.library.uwa.edu.au>

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  README MANIFEST Makefile bl_lock.n ckpass.c defs.h main.c
#   passmanage.c signalset.c
# Wrapped by vixie@gw.home.vix.com on Sat Nov  5 14:33:11 1994
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 1 (of 1)."'
if test -f 'README' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'README'\"
else
  echo shar: Extracting \"'README'\" \(1587 characters\)
  sed "s/^X//" >'README' <<'END_OF_FILE'
X
Xbl_lock 1.0a
X
XDumb (misonmer, but conventional term) terminal screen locker.
X
XThere seems to be a demand for UNIX screenlockers, and I'm not aware of 
Xone, so I wrote a crude one, here it is, for anyone that wants one ... it
Xcould be extended easily enough to make it into a screensaver, I guess,
Xhack in some signal handling linked to terminal idletime or somesuch,
Xbut I didn't bother, if that's what you want, feel free to pinch bits
Xof this to write your own.
X
XUses its own passwd, that is stored in the users directory encrypted (using 
Xstandard UNIX crypt(3)) as the file .bl_lockpass.  This file has the format
X
X<username>:<encrypted passwd>
X
XIf it's corrupted, bl_lock will abort.  I suggest that if this happens,
Xdelete .bl_lockpass  and then try bl_lock -p, as it will generate a
Xnew file if there is no old one.  Use of the -p switch will force a new
Xpasswd file generation, overwriting a previous file, should it exist.
Xbl_lock -p is also the only way to create a new passwd file.
X
XIt is recomended that users do not use the same passwd as they do for 
Xlogin (you should be using s/key or similar anyway, passwds are 
Xobsolete)
X
XINSTALL notes :
X
Xunder SunOS, Ultrix (most BSD based UNIXes) with gcc, just type make.
XSlowaris (fool you for running it ...) edit the Makefile to cope,  it'll
Xcompile with gcc, and has only been tested with gcc 2.6.0 on SunOS 4.1.3
Xand Slowaris 2.3 (SunOS 5.3).  I did run it under Ultrix 4.2, it works there
Xtoo, and OSF/1 2.0.  Anything else, if you get it working, let me know ...
X
XCarl Brewer (carl@oversteer.library.uwa.edu.au)
X24/10/94
X
X
END_OF_FILE
  if test 1587 -ne `wc -c <'README'`; then
    echo shar: \"'README'\" unpacked with wrong size!
  fi
  # end of 'README'
fi
if test -f 'MANIFEST' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'MANIFEST'\"
else
  echo shar: Extracting \"'MANIFEST'\" \(365 characters\)
  sed "s/^X//" >'MANIFEST' <<'END_OF_FILE'
X   File Name		Archive #	Description
X----------------------------------------------------------
XREADME                     1	
XMANIFEST                   1	
XMakefile                   1	
Xbl_lock.n                  1	
Xckpass.c                   1	
Xdefs.h                     1	
Xmain.c                     1	
Xpassmanage.c               1	
Xsignalset.c                1	
END_OF_FILE
  if test 365 -ne `wc -c <'MANIFEST'`; then
    echo shar: \"'MANIFEST'\" unpacked with wrong size!
  fi
  # end of 'MANIFEST'
fi
if test -f 'Makefile' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Makefile'\"
else
  echo shar: Extracting \"'Makefile'\" \(677 characters\)
  sed "s/^X//" >'Makefile' <<'END_OF_FILE'
X#		Makefile for bl_lock project, 1994
X
X#INSTALL = 	"/usr/local/bin"
XMKF =           Makefile
X#HDR =		proj2.h repl.h
XSRC =		main.c ckpass.c signalset.c passmanage.c
XOBJ = 		$(SRC:.c=.o)
XPROG =		bl_lock
XCC  =           gcc 
X#CFLAGS =	-O -ansi -pedantic -Wall
XCFLAGS =	-O -ansi -pedantic
X#LIBS =		-lcurses -ltermcap
X#DEFS =		SOLARIS_2
X#DEFS =		SUNOS41
X#
X##	uncomment this line if you're running under Slowaris, or some other
X#	SV pus-box ....
X#CPPFLAGS =	-DSOLARIS_2
X
X$(PROG):	$(OBJ)
X		$(CC) -o $@ $(OBJ) $(LIBS)
X
X$(OBJ):		$(HDR) $(MKF)
X
Xclean:
X		rm -f $(OBJ) $(PROG)
Xinstall:
X		@strip $(PROG)
X		@cp $(PROG) $(INSTALL)/$(PROG)
X		@chmod 0755 $(INSTALL)/$(PROG)
X		@echo "Installed"
END_OF_FILE
  if test 677 -ne `wc -c <'Makefile'`; then
    echo shar: \"'Makefile'\" unpacked with wrong size!
  fi
  # end of 'Makefile'
fi
if test -f 'bl_lock.n' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'bl_lock.n'\"
else
  echo shar: Extracting \"'bl_lock.n'\" \(1095 characters\)
  sed "s/^X//" >'bl_lock.n' <<'END_OF_FILE'
X.\" @(#)bl_lock.1 1.13 24/10/94 SMI; from UCB 4.2
X.TH BL_LOCK 1 "24 October 1994"
X.SH NAME
Xbl_lock \- lock a dumb terminal
X.SH SYNOPSIS
X.B bl_lock [-p] [-d]
X.IX  "sleep command"  ""  "\fLsleep\fP \(em suspend execution"
X.IX  "suspend execution"  ""  "suspend execution \(em \fLsleep\fP"
X.SH DESCRIPTION
X.B bl_lock 
Xlocks a dumb terminal until the correct password is entered.
X.LP
XUses its own passwd, that is stored in the users directory encrypted (using 
Xstandard UNIX crypt(3)) as the file .bl_lockpass.  This file has the format
X.LP
XIf given the -p option, it prompts for a new passwd, and overwrites the
Xexisting passwd file.  
X.LP
XThe -d option is for debugging, and is useless for any more than testing,
Xit turns off the signal capture and ignore routines, so you can SIGINT
Xout, which defeats the purpose of a screenlock.
X.SH "fILES"
X.BR .bl_lockpass
X.SH BUGS
Xcorrupt passfile should result in a prompt for a new passwd, there is no 
Xattempt made to parse the passfile if it's not OK, and no attempt to
Xrecover if it fails, if there's no passwd file, or it's corrupt, it just
Xcoredumps.
END_OF_FILE
  if test 1095 -ne `wc -c <'bl_lock.n'`; then
    echo shar: \"'bl_lock.n'\" unpacked with wrong size!
  fi
  # end of 'bl_lock.n'
fi
if test -f 'ckpass.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'ckpass.c'\"
else
  echo shar: Extracting \"'ckpass.c'\" \(381 characters\)
  sed "s/^X//" >'ckpass.c' <<'END_OF_FILE'
X#include <stdio.h>
X#include "./defs.h"
X
Xint ckpass(char *encryptedpasswd, char *salt)
X{
X    char *passwd;
X    int i;
X
X    passwd = (char *) malloc( sizeof(char) * MAXPASSLEN);
X
X    strcpy(passwd, (char *)getpass(PASSPROMPT) );
X    if ( !strcmp(encryptedpasswd, (char *)crypt(passwd, salt)) ) {
X	free(passwd);
X	return(1);
X    } else {
X	CLEARPASS;
X	free(passwd);
X	return(0);
X    }
X}
END_OF_FILE
  if test 381 -ne `wc -c <'ckpass.c'`; then
    echo shar: \"'ckpass.c'\" unpacked with wrong size!
  fi
  # end of 'ckpass.c'
fi
if test -f 'defs.h' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'defs.h'\"
else
  echo shar: Extracting \"'defs.h'\" \(534 characters\)
  sed "s/^X//" >'defs.h' <<'END_OF_FILE'
X#ifndef DEFS1
X#define VERSION "1.0a copyright Carl Brewer, 24/10/94"
X
X#define MAXPASSLEN 9
X#define MAXUSERNAMELEN 9
X#define MAXFILENAMELEN 50
X#define EPASSLEN 14
X#define PASSPROMPT "bl_lock passwd : "
X#define ROOT "root"
X#define BELL "\07"
X#define EGLOGFAILED -44
X#define ENOTASROOT  -55
X
X#define FILENAME ".bl_lockpass"
X#define USAGE "%s: %s [-p]"
X
X#define CLEARPASS for ( i = 0; i != MAXPASSLEN; i++ ) { \
X			passwd[i] = 'X'; \
X		  }
X
X#ifdef SOLARIS_2
X#include <stdlib.h>	/* slowaris 2 moves getpass() into stdlib */
X#endif
X
X#endif
END_OF_FILE
  if test 534 -ne `wc -c <'defs.h'`; then
    echo shar: \"'defs.h'\" unpacked with wrong size!
  fi
  # end of 'defs.h'
fi
if test -f 'main.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'main.c'\"
else
  echo shar: Extracting \"'main.c'\" \(2043 characters\)
  sed "s/^X//" >'main.c' <<'END_OF_FILE'
X#include <stdio.h>
X#include <stdio.h>
X#include <sys/param.h>
X#include <sys/types.h>
X#include <unistd.h>
X#include <pwd.h>
X
X#include "./defs.h"
Xextern int ckpass(char *encryptedpasswd, char *salt);
Xextern int signalset();
Xextern int changepasswd(char *user, char *fullfilename);
Xextern int readpasswd(char *user, char *fullfilename, char *encryptedpasswd);
X
Xint debug;
X
Xint main(int argc, char **argv)
X{
X    int ret;
X    int chpass;
X    char *encryptedpasswd;
X    char *user;
X    char *home;
X    char *fullfilename;
X
X    struct  passwd  *p;
X    uid_t uid;
X 
X    user = (char *) malloc( sizeof(char) * MAXUSERNAMELEN);
X    encryptedpasswd = (char *)malloc( sizeof(char) * EPASSLEN);
X    home = (char *)malloc( sizeof(char) * MAXFILENAMELEN);
X    fullfilename = (char *)malloc( sizeof(char) * (MAXFILENAMELEN * 2) );
X 
X    uid = getuid();
X    if ((p = getpwuid(uid)) == NULL) {
X        printf("FUCK OFF CUNT\n");
X    } else {
X        strcpy(user, p->pw_name);
X    }
X
X    debug = 0;
X
X    if ( argc == 1 ) {
X	chpass = 0;
X    } else if ( (argc == 2) && !strcmp(argv[1], "-p") ) {
X	chpass = 1;
X    } else if ( (argc == 2) && !strcmp(argv[1], "-d") ) {
X	debug = 1;
X	chpass = 0;
X    } else {
X	fprintf(stderr, "usage : %s [-p]\n", argv[0]);
X	exit(1);
X    }
X
X    strcpy(home, (char *)getenv("HOME") );
X
X    sprintf(fullfilename, "%s/%s", home, FILENAME);
X
X    if (debug)
X        printf("main(): >%s<\n", fullfilename);
X
X    if ( chpass ) {	/* change passwd time ... */
X	(void) changepasswd(user, fullfilename);
X	exit(0);
X    } else {		/* read the current passwd */
X	(void) readpasswd(user, fullfilename, encryptedpasswd);
X    }
X
X    (void) signalset();		/* ignore interupts etc */
X	
X    while ( (ret = ckpass(encryptedpasswd, user)) != 1 ) {
X	switch (ret) {
X	    case (EGLOGFAILED) :
X		perror("getlogin() failed, aborting");
X		exit(1);
X		break;
X	    case (0) :	/* incorrect passwd entered */
X		fprintf(stderr, "Incorrect passwd%s\n", BELL);
X		break;
X	    default :
X		perror("unknown error returned, aborting");
X		exit(1);
X		break;
X	}
X    }
X    exit(0);
X}
END_OF_FILE
  if test 2043 -ne `wc -c <'main.c'`; then
    echo shar: \"'main.c'\" unpacked with wrong size!
  fi
  # end of 'main.c'
fi
if test -f 'passmanage.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'passmanage.c'\"
else
  echo shar: Extracting \"'passmanage.c'\" \(1655 characters\)
  sed "s/^X//" >'passmanage.c' <<'END_OF_FILE'
X
X#ifdef SOLARIS_2
X#include <crypt.h>
X#endif
X#include <stdio.h>
X#include <sys/param.h>
X#include <sys/types.h>
X#include <unistd.h>
X#include <pwd.h>
X
X#include "./defs.h"
X
Xint chopper(char *second, char *string);
X
Xint readpasswd(char *user, char *fullfilename, char *encryptedpasswd)
X{
X    FILE *fp;
X    char *salt;
X    char *buffer;
X
X    salt = (char *) malloc( sizeof(char) * MAXUSERNAMELEN );
X    buffer = (char *) malloc( sizeof(char) * (MAXUSERNAMELEN + EPASSLEN + 3 ));
X 
X    fp = fopen(fullfilename, "r");
X 
X    fscanf(fp, "%s\n", buffer);
X
X    (void) chopper(encryptedpasswd, buffer);
X
X    fclose(fp);
X    free(salt); free(buffer); free(fp);
X}
X
X/*******************************************************************/
Xint chopper(char *second, char *string)
X{
X    int i,j;
X    char delim;
X
X    j = 0;
X
X    delim = ':';
X    
X    for ( i = 0; i != strlen(string); i++ ) {
X	if (string[i] == delim)
X	    break;
X    }
X    i++;
X    for ( ; i != strlen(string);) {
X	second[j++] = string[i++];
X    }
X    second[j] = '\0';
X    return i;
X}
X
X    
X/*******************************************************************/
Xint changepasswd(char *user, char *fullfilename)
X{
X    char *passwd;
X
X    passwd = (char *) malloc( sizeof(char) * MAXPASSLEN);
X
X    strcpy(passwd, (char *)getpass("enter your new passwd : "));
X
X    (void) makepassfile(passwd, user, fullfilename);
X    return 1;
X}
X
X
X/************************************************************************/ 
Xint makepassfile(char *passwd, char *salt, char *fullfilename)
X{
X    FILE *fp;
X
X    fp = fopen(fullfilename, "w");
X    
X    fprintf(fp, "%s:%s", salt, crypt(passwd, salt));
X
X    fclose(fp);
X    return 1;
X}
END_OF_FILE
  if test 1655 -ne `wc -c <'passmanage.c'`; then
    echo shar: \"'passmanage.c'\" unpacked with wrong size!
  fi
  # end of 'passmanage.c'
fi
if test -f 'signalset.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'signalset.c'\"
else
  echo shar: Extracting \"'signalset.c'\" \(223 characters\)
  sed "s/^X//" >'signalset.c' <<'END_OF_FILE'
X#include <signal.h>
X
Xextern int debug;
X
Xint signalset()
X{
X    if (debug) 
X	return 1;
X
X    signal(SIGTSTP, SIG_IGN);	/* ignore ^C */
X    signal(SIGINT, SIG_IGN);	/* ignore ^Z */
X    return 1;			/* heck, it worked .. :) */
X}
END_OF_FILE
  if test 223 -ne `wc -c <'signalset.c'`; then
    echo shar: \"'signalset.c'\" unpacked with wrong size!
  fi
  # end of 'signalset.c'
fi
echo shar: End of archive 1 \(of 1\).
cp /dev/null ark1isdone
MISSING=""
for I in 1 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have the archive.
    rm -f ark[1-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
