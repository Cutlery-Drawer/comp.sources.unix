Newsgroups: comp.sources.unix
From: thoth@cis.ufl.edu (Robert Forsman)
Subject: v28i205: netpipes-2.1 - the power of shell pipes over TCP streams, Part01/01
Message-id: <1.785495593.29156@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: thoth@cis.ufl.edu (Robert Forsman)
Posting-Number: Volume 28, Issue 205
Archive-Name: netpipes-2.1/part01

 netpipes is a pair of programs designed to connect any process to a
TCP/IP stream socket.  faucet is a server program which listens on a
port and forks processes for each connection.  hose is a one-shot
program which connects a process to a server.

  e.g.

 % faucet 2591 -out $NETREKDIR/list-players
 % faucet 2590 -in -out $NETREKDIR/highscore-interactive.perl
 % faucet 3000 -foreignhost aviator.cis -in xpipe -noauto
 % hose cairo.eng 3000 -out tail +0f make.log
 % hose metaserver.ecst.csuchico.edu 3521 -in grep 'P$'

	thoth@cis.ufl.edu (Robert Forsman)

#!/bin/sh
# This is a shell archive (produced by shar 3.50)
# To extract the files from this archive, save it to a file, remove
# everything above the "!/bin/sh" line above, and type "sh file_name".
#
# made 11/21/1994 18:45 UTC by thoth@aviator
# Source directory /amd/beach/export/tmp/netpipes2.1
#
# existing files will NOT be overwritten unless -c is specified
#
# This shar contains:
# length  mode       name
# ------ ---------- ------------------------------------------
#  17981 -rw-r--r-- COPYING
#   1508 -r--r--r-- Makefile
#    678 -r--r--r-- README
#   4532 -r--r--r-- faucet.1
#   9042 -r--r--r-- faucet.c
#   4009 -r--r--r-- hose.1
#   7301 -r--r--r-- hose.c
#   3285 -r--r--r-- portname.c
#
# ============= COPYING ==============
if test -f 'COPYING' -a X"$1" != X"-c"; then
	echo 'x - skipping COPYING (File already exists)'
else
echo 'x - extracting COPYING (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'COPYING' &&
X		    GNU GENERAL PUBLIC LICENSE
X		       Version 2, June 1991
X
X Copyright (C) 1989, 1991 Free Software Foundation, Inc.
X                          675 Mass Ave, Cambridge, MA 02139, USA
X Everyone is permitted to copy and distribute verbatim copies
X of this license document, but changing it is not allowed.
X
X			    Preamble
X
X  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
he GNU Library General Public License instead.)  You can apply it to
your programs, too.
X
X  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things.
X
X  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.
X
X  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.
X
X  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.
X
X  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.
X
X  Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.
X
X  The precise terms and conditions for copying, distribution and
modification follow.
X
X		    GNU GENERAL PUBLIC LICENSE
X   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
X
X  0. This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License.  The "Program", below,
refers to any such program or work, and a "work based on the Program"
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language.  (Hereinafter, translation is included without limitation in
the term "modification".)  Each licensee is addressed as "you".
X
Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program).
Whether that is true depends on what the Program does.
X
X  1. You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program.
X
You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.
X
X  2. You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:
X
X    a) You must cause the modified files to carry prominent notices
X    stating that you changed the files and the date of any change.
X
X    b) You must cause any work that you distribute or publish, that in
X    whole or in part contains or is derived from the Program or any
X    part thereof, to be licensed as a whole at no charge to all third
X    parties under the terms of this License.
X
X    c) If the modified program normally reads commands interactively
X    when run, you must cause it, when started running for such
X    interactive use in the most ordinary way, to print or display an
X    announcement including an appropriate copyright notice and a
X    notice that there is no warranty (or else, saying that you provide
X    a warranty) and that users may redistribute the program under
X    these conditions, and telling the user how to view a copy of this
X    License.  (Exception: if the Program itself is interactive but
X    does not normally print such an announcement, your work based on
X    the Program is not required to print an announcement.)
X
These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Program, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote it.
X
Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program.
X
In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.
X
X  3. You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms of
Sections 1 and 2 above provided that you also do one of the following:
X
X    a) Accompany it with the complete corresponding machine-readable
X    source code, which must be distributed under the terms of Sections
X    1 and 2 above on a medium customarily used for software interchange; or,
X
X    b) Accompany it with a written offer, valid for at least three
X    years, to give any third party, for a charge no more than your
X    cost of physically performing source distribution, a complete
X    machine-readable copy of the corresponding source code, to be
X    distributed under the terms of Sections 1 and 2 above on a medium
X    customarily used for software interchange; or,
X
X    c) Accompany it with the information you received as to the offer
X    to distribute corresponding source code.  (This alternative is
X    allowed only for noncommercial distribution and only if you
X    received the program in object code or executable form with such
X    an offer, in accord with Subsection b above.)
X
The source code for a work means the preferred form of the work for
making modifications to it.  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable.  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable.
X
If distribution of executable or object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place counts as
distribution of the source code, even though third parties are not
compelled to copy the source along with the object code.
X
X  4. You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License.
However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance.
X
X  5. You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Program or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Program or works based on it.
X
X  6. Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties to
this License.
X
X  7. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.
X
If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances.
X
It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.
X
This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.
X
X  8. If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded.  In such case, this License incorporates
the limitation as if written in the body of this License.
X
X  9. The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.
X
Each version is given a distinguishing version number.  If the Program
specifies a version number of this License which applies to it and "any
later version", you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
this License, you may choose any version ever published by the Free Software
Foundation.
X
X  10. If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.
X
X			    NO WARRANTY
X
X  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.
X
X  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.
X
X		     END OF TERMS AND CONDITIONS
X
X	Appendix: How to Apply These Terms to Your New Programs
X
X  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.
X
X  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.
X
X    <one line to give the program's name and a brief idea of what it does.>
X    Copyright (C) 19yy  <name of author>
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
Also add information on how to contact you by electronic and paper mail.
X
If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:
X
X    Gnomovision version 69, Copyright (C) 19yy name of author
X    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
X    This is free software, and you are welcome to redistribute it
X    under certain conditions; type `show c' for details.
X
The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, the commands you use may
be called something other than `show w' and `show c'; they could even be
mouse-clicks or menu items--whatever suits your program.
X
You should also get your employer (if you work as a programmer) or your
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  Here is a sample; alter the names:
X
X  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
X  `Gnomovision' (which makes passes at compilers) written by James Hacker.
X
X  <signature of Ty Coon>, 1 April 1989
X  Ty Coon, President of Vice
X
This General Public License does not permit incorporating your program into
proprietary programs.  If your program is a subroutine library, you may
consider it more useful to permit linking proprietary applications with the
library.  If this is what you want to do, use the GNU Library General
Public License instead of this License.
SHAR_EOF
chmod 0644 COPYING ||
echo 'restore of COPYING failed'
Wc_c="`wc -c < 'COPYING'`"
test 17981 -eq "$Wc_c" ||
	echo 'COPYING: original size 17981, current size' "$Wc_c"
fi
# ============= Makefile ==============
if test -f 'Makefile' -a X"$1" != X"-c"; then
	echo 'x - skipping Makefile (File already exists)'
else
echo 'x - extracting Makefile (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'Makefile' &&
#    faucet and hose: network pipe utilities
#    Copyright (C) 1992,1993 Robert Forsman
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
# This might be necessary for HPUX
#LDLIBS=-lBSD
X
# I'm told this is required for Sequent SysV
#LDLIBS=-lsocket -linet -lnsl
X
# If you don't want to use (or don't have) fcntl(2) try the -DUSE_IOCTL.
X
# Add -DSYSV if your signal handlers need reinstalling after being called.
# hpux has been known to require this.
CFLAGS = # -DUSE_IOCTL
X
FOBJS = faucet.o portname.o
HOBJS = hose.o portname.o
X
all	: faucet hose
X
faucet	: ${FOBJS}
X	${CC} ${CFLAGS} -o $@ ${FOBJS} ${LDLIBS}
X
hose	: ${HOBJS}
X	${CC} ${CFLAGS} -o $@ ${HOBJS} ${LDLIBS}
X
install : all
X	cp faucet hose ${HOME}/bin/`mach`
X	cp faucet.1 hose.1 ${HOME}/man/man1
X
clean	:
X	rm -f ${FOBJS}  ${HOBJS} 
X
spotless: clean
X	rm -f *~ core  hose faucet
SHAR_EOF
chmod 0444 Makefile ||
echo 'restore of Makefile failed'
Wc_c="`wc -c < 'Makefile'`"
test 1508 -eq "$Wc_c" ||
	echo 'Makefile: original size 1508, current size' "$Wc_c"
fi
# ============= README ==============
if test -f 'README' -a X"$1" != X"-c"; then
	echo 'x - skipping README (File already exists)'
else
echo 'x - extracting README (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'README' &&
X  Enjoy NETPIPES 2
X
X  by Robert Forsman
X
X  Check the Makefile.  Some systems require extra libraries or compile
flags.
X
X  There has been a change in the way that the subcommand is specified.
It is MUCH better than the old way.  Read the manual pages.
X
X  This program has, in the past, been compiled and tested on a DEC
5100, an RS6k, an HP9k, an SGI and sees almost daily usage under SunOS
4.1.3 and Linux.
X
X  If you compile this program on an architecture/OS not mentioned
above, drop me a line.  If you have problems compiling on any
architecture, I want to hear about it (and I'll try to help you fix
the problem and make sure that the next version compiles out of the
box).
SHAR_EOF
chmod 0444 README ||
echo 'restore of README failed'
Wc_c="`wc -c < 'README'`"
test 678 -eq "$Wc_c" ||
	echo 'README: original size 678, current size' "$Wc_c"
fi
# ============= faucet.1 ==============
if test -f 'faucet.1' -a X"$1" != X"-c"; then
	echo 'x - skipping faucet.1 (File already exists)'
else
echo 'x - extracting faucet.1 (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'faucet.1' &&
.\"" faucet.1 Copyright 11/21/1994 by Robert Forsman
.TH FAUCET 1 "Nov 21 1994"
.SH NAME
faucet \- a fixture for a BSD network pipe
.SH SYNOPSIS
\fBfaucet\fP \fIport\fP (\fB\-in\fP|\fB\-out\fP|\fB\-err\fP)
[\fB\-once\fP] [\fB\-verbose\fP] [\fB\-quiet\fP] [\fB\-unix\fP]
[\fB\-foreignhost\fP \fIhost\fP] [\fB\-foreignport\fP \fIport\fP]
\fIcommand\fP \fIargs\fP
X
.SH DESCRIPTION
.LP
.B faucet
attempts to provide the functionality of pipes over the network.
It behaves as the server end of a server\-client connection.
When used with
.B hose(1)
it can function as a replacement for
.IP
tar \-cf \- . | rsh other "cd destdir; tar \-xf \-"
.LP
.B faucet
and
.B hose
are especially useful when you don't have easy access to the
destination machine.
X
.LP
.B faucet
creates a BSD socket, binds it to the
.I port
specified on the command line, and listens for connections.
X
Every time
.B faucet
gets a connection it exec(2)s \fIcommand\fP and its \fIargs\fP with stdin,
stdout, and/or stderr redirected according to the
.B \-in \-out \-err
flags.
X
If the
.B \-once
flag is specified,
.B faucet
will exec(2) the
.I command
instead of fork(2)ing and exec(2)ing.  
.B \-once
means that the network pipe
is only good for one shot.
X
The
.B \-verbose
flag specifies that
.B faucet
should print information about connecting hosts.  This information
includes the numeric host address, host names, and foreign port numbers.
The
.B \-quiet
flag specifies that
.B faucet
should NOT print such info.
.B \-quiet
is the default.
X
The
.B \-unix
flag specifies that the
.I port
is not an internet port number or service name, but instead it is a
filename for a UNIX domain socket.
X
The
.B \-foreignhost
option specifies that faucet should reject all connections that do not
come from the
.I host
machine.  Similarly
.B \-foreignport
specifies that faucet should reject all connections that are not bound
on their local machine to the
.I port
argument.  The above two options allow a crude form of authentication.
Note that on most systems only root can bind a socket to a port number
below 1024.
X
.SH "EXAMPLES"
.LP
This creates a TCP\-IP socket on the local machine bound to port 3000.
.IP
example% faucet 3000 \-out \-verbose tar \-cf \- .
.LP
Every time some process (from any machine) attempts to connect to
port 3000 on this machine the
.B faucet
program will fork(2) a process and the child will exec(2) a
.IP
tar \-cf \- .
.LP
The
.B \-out
option means that the output of the child process will have been
redirected into the new socket retrieved by the accept(2) call.
.B \-verbose
means that faucet will print information about each new connection.
X
.LP
This creates a UNIX domain socket in the current directory
.IP
example% faucet u\-socket \-out \-err \-once \-unix csh \-c \\
X	"dd if=angio.pgm | funky.perl.script" 
.LP
The
.B \-out \-err
option means that stdout and stderr will be redirected in the child
process.  The
.B \-once
option means that the faucet will not fork(2), but exec(2) the process
so that only the first process can connect to the u\-socket before the
faucet becomes unavailable.
X
.SH "SEE ALSO"
.BR hose (1),
.BR socket (2),
.BR bind (2),
.BR listen (2),
.BR accept (2),
.BR services (5),
.BR gethostbyaddr (3)
X
.SH "NOTES"
.LP
Doubtless there are bugs in this program, especially in the unix domain
socket portions.  I welcome problem reports and would like to make
these programs as "clean" (no leftover files, sockets) as possible.
X
.SH "CREDITS"
.LP
Thanks to Steve Clift <clift@ml.csiro.au> for SGI (SysV) patches.
.LP
Many people complained about the old way of specifying the command.
Thanks to whoever gave me the alternative which is now implemented.
It is much better.
X
.SH "COPYRIGHT"
Copyright (C) 1992,1993,1994 Robert Forsman
X
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
X
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
X
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
.SH "AUTHOR"
X Robert Forsman
X thoth@cis.ufl.edu
X University of Florida
X Department of Computer and Information Science
SHAR_EOF
chmod 0444 faucet.1 ||
echo 'restore of faucet.1 failed'
Wc_c="`wc -c < 'faucet.1'`"
test 4532 -eq "$Wc_c" ||
	echo 'faucet.1: original size 4532, current size' "$Wc_c"
fi
# ============= faucet.c ==============
if test -f 'faucet.c' -a X"$1" != X"-c"; then
	echo 'x - skipping faucet.c (File already exists)'
else
echo 'x - extracting faucet.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'faucet.c' &&
/*
X
X    faucet.c, part of
X    faucet and hose: network pipe utilities
X    Copyright (C) 1992,1993 Robert Forsman
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
X    */
X
static char info[] = "faucet: a network utility for sockets\nWritten 1992,1993 by Robert Forsman <thoth@cis.ufl.edu>\n";
#include	<stdio.h>
#include	<errno.h>
extern int errno;		/* I hate the errno header file */
#include	<signal.h>
#ifdef hpux
#include	<sgtty.h>
#endif
#include	<sys/wait.h>
#include	<sys/param.h>
#include	<sys/file.h>
#ifdef USE_IOCTL
#include	<sys/ioctl.h>
#include	<sys/filio.h>
#else
#include	<sys/types.h>
#include	<unistd.h>
#include	<fcntl.h>
#endif
#include	<sys/socket.h>
#include	<sys/un.h>
#include	<netinet/in.h>
#include	<netdb.h>
X
int	mastersocket;
#define	DOSTDOUT	(1<<0)
#define	DOSTDIN		(1<<1)
#define	DOSTDERR	(1<<2)
#define	DOONCE		(1<<3)
#define	DOVERBOSE	(1<<4)
#define	DOUNIX		(1<<5)
X
int	doflags=0;
int	running=1;
X
char	*foreignhost=NULL,*foreignport=NULL;
int	foreignPORT;
struct in_addr	foreignHOST;
X
char	*programname;
extern int errno;
extern char *sys_errlist[];
X
X
int name_to_inet_port();
X
void nice_shutdown()
/* This procedure gets called when we are killed with one of the reasonable
X   signals (TERM, HUP, that kind of thing).  The main while loop then
X   terminates and we get a chance to clean up. */
{
X  running = 0;
}
X
X
/* print an internet host address prettily */
printhost(addr)
X     struct in_addr	*addr;
{
X  struct hostent	*h;
X  char	*s,**p;
X  int	i;
X
X  h = gethostbyaddr(addr, sizeof(*addr),AF_INET);
X  s = (h==NULL) ? NULL : h->h_name;
X
X  printf("%d", ((u_char*)addr)[0]);
X  for (i=1; i<sizeof(*addr); i++)
X    printf(".%d",((u_char*)addr)[i]);
X
X  printf("(%s",s?s:"name unknown");
X  if (s)
X    for (p=h->h_aliases; *p; p++)
X      printf(",%s",*p);
X  printf(")");
}
X
int setup_socket(name)
char *name;
/* This procedure creates a socket and handles retries on the inet domain.
X   Sockets seem to "stick" on my system (SunOS [43].x) */
{
X  int	sock;
X
X  sock = socket((doflags&DOUNIX)?AF_UNIX:AF_INET, SOCK_STREAM, 0);
X  /* I need a real value for the protocol eventually.  IPPROTO_TCP sounds
X     like a good value, but what about AF_UNIX sockets?  It seems to have
X     worked so far... */
X
X  if (sock <0) {
X      perror("opening stream socket");
X      exit(1);
X    }
X
X  if (!bindlocal(sock, name, (doflags&DOUNIX)?AF_UNIX:AF_INET)) {
X      fprintf(stderr,"%s: error binding stream socket %s (%s)",
X	      programname,name,sys_errlist[errno]);
X      exit(1);
X    }
X
X  /* We used to ask for NOFILE (max number of open files) for the size
X     of the connect queue.  Linux didn't like it (NOFILE=256) so we
X     hardcoded a smaller value. */
X  listen(sock,8);
X
X  return(sock);
}
X
X
void waitonchild()
X
{
X  int	status;
X
X  int	childpid;
X  
X  childpid = wait(&status);
X
#ifdef SYSV
X  signal(SIGCHLD,waitonchild);
#endif
}
X
X
int
authorize_address(sin)
X     struct sockaddr	*sin;
{
X  if (doflags&DOUNIX) {
X    struct sockaddr_un 	*srv = (struct sockaddr_un*)sin;
X    
X    if (foreignport != NULL && 0!=strcmp(foreignport, srv->sun_path)) {
X      if (doflags&DOVERBOSE) {
X	printf("%s: refusing connection from port %s\n",
X	       programname, srv->sun_path);
X      }
X      return 0;
X    }
X  } else {
X    struct sockaddr_in	*srv = (struct sockaddr_in*)sin;
X    
X    if (foreignhost!=NULL &&
X	0!=bcmp(&srv->sin_addr,
X		&foreignHOST, sizeof(foreignHOST))) {
X      if (doflags&DOVERBOSE) {
X	printf("refusing connection from host ");
X	printhost(&srv->sin_addr);
X	printf(".\n");
X      }
X      return 0;
X    }
X    
X    if (foreignport!=NULL && foreignPORT != srv->sin_port) {
X      if (doflags&DOVERBOSE) {
X	printf("refusing connection from port %d.\n",
X	       ntohs(srv->sin_port));
X      }
X      return 0;
X    }
X  }
X  
X  return 1;
}
X
X
main (argc,argv)
int argc;
char ** argv;
X
{
X  int	rval, i;
X  union {
X    struct sockaddr_in	in;
X    struct sockaddr_un	un;
X  } saddr;
X  struct sockaddr_in	*sinp = (struct sockaddr_in*)&saddr;
X  struct sockaddr_un	*sunp = (struct sockaddr_un*)&saddr;
X  char	**cmd;
X  
X  programname = argv[0];
X  
X  if (argc<3) {
X    fprintf(stderr,"Usage : %s <port> (-in|-out|-err)+ [-once] [-verb(|ose)] [-quiet] [-unix] [-foreignport <port>] [-foreignhost <host>] command args\n", programname);
X    exit(1);
X  }
X  
X  /* parse trailing args */
X  for (i=2; i<argc; i++) {
X    char	*arg;
X    if (argv[i][0]!='-')
X      break;
X    arg = argv[i]+1;
X    if (strcmp(arg,"in")==0)
X      doflags |= DOSTDIN;
X    else if (strcmp(arg,"out")==0)
X      doflags |= DOSTDOUT;
X    else if (strcmp(arg,"err")==0)
X      doflags |= DOSTDERR;
X    else if (strcmp(arg,"once")==0)
X      doflags |= DOONCE;
X    else if (strcmp(arg,"verbose")==0 ||
X	     strcmp(arg,"verb")==0)
X      doflags |= DOVERBOSE;
X    else if (strcmp(arg,"quiet")==0)
X      doflags &= ~DOVERBOSE;
X    else if (strcmp(arg,"unix")==0)
X      doflags |= DOUNIX;
X    else if (strcmp(arg,"foreignport")==0) {
X      if (i+1<argc)
X	foreignport=argv[++i];
X      else
X	fprintf(stderr,"%s: foreignport requires port name or number.\n",
X		programname);
X    } else if (strcmp(arg,"foreignhost")==0) {
X      if (i+1<argc)
X	foreignhost=argv[++i];
X      else
X	fprintf(stderr,"%s: foreignhost requires host name or number.\n",
X		programname);
X    } else
X      fprintf(stderr,"%s: Bogus extra command line flag \"%s\".\n",
X	      programname,argv[i]);
X  }
X  cmd = argv+i;
X  
X  if ( ! (doflags&(DOSTDIN|DOSTDERR|DOSTDOUT)) ) {
X    fprintf(stderr,"%s: Need at least one {-in|-out|-err}.\n",programname);
X    exit(1);
X  }
X  
X  if ( (doflags&DOUNIX) && foreignhost!=NULL ) {
X    fprintf(stderr, "%s: foreignhost parameter makes no sense with UNIX domain sockets, ignoring.\n", programname);
X    foreignhost = NULL;
X  }
X  
X  signal(SIGCHLD,waitonchild);
X  
X  mastersocket = setup_socket(argv[1]);
X  
X  signal(SIGHUP, nice_shutdown);
X  signal(SIGINT, nice_shutdown);
X  signal(SIGPIPE, nice_shutdown);
X  signal(SIGALRM, nice_shutdown);
X  signal(SIGTERM, nice_shutdown);
X  
X  if (foreignhost != NULL && !convert_hostname(foreignhost, &foreignHOST)) {
X    fprintf(stderr, "%s: could not translate %s to a host address\n",
X	    programname, foreignhost);
X    exit(1);
X  }
X  
X  if (foreignport!=NULL && !(doflags&DOUNIX) &&
X      0 == (foreignPORT = name_to_inet_port(foreignport)) ) {
X    fprintf(stderr,"%s: port %s unknown.\n",programname,foreignport);
X    exit(1);
X  }
X  
X  while (running) {
X
X    {
X      int	length;
X    
X      length = sizeof(saddr);
X    
X      rval = accept(mastersocket,&saddr,&length);
X    }
X    
X    if (rval<0) {
X      if (errno==EWOULDBLOCK) {
X	printf("%s: No more connections to talk to.\n",programname);
X      } else if (errno!=EINTR) {
X	fprintf(stderr,"%s: error in accept (%s).",
X		programname,sys_errlist[errno]);
X	exit(1);
X      }
X      continue;
X    }
X    
X    if (!authorize_address(&saddr)) {
X      close(rval);
X      continue;
X    }
X    
X    if ( doflags&DOVERBOSE ) {
X      printf("%s: Got connection from ",programname);
X      if ( doflags&DOUNIX ) {
X	printf("%s\n", sunp->sun_path);
X      } else {
X	printhost(&sinp->sin_addr);
X	printf(" port %d\n",ntohs(sinp->sin_port));
X      }
X    }
X    
X    fflush(stdout);
X    
X    if ( doflags&DOONCE || fork()==0 ) {
X      /* child process: frob descriptors and exec */
X      char	*s;
X      
X      if ( (doflags&(DOONCE|DOUNIX)) == (DOONCE|DOUNIX) )
X	unlink(argv[1]);
X      /* We don't want the unix domain socket anymore */
X
X      /* put stderr somewhere safe temporarily */
X      dup2(fileno(stderr),mastersocket);/*the old server socket is now closed*/
X
X      /* but we don't want it to hang around after we exec... */
#ifdef USE_IOCTL
X      ioctl(mastersocket,FIOCLEX,NULL);
#else
X      fcntl(mastersocket,F_SETFD,FD_CLOEXEC);
#endif
X
X      /* We don't need old stderr hanging around after an exec.
X	 The mastersocket has been closed by the dup2 */
X      
X      if (doflags & DOSTDIN)
X	dup2(rval,fileno(stdin));
X      if (doflags & DOSTDOUT)
X	dup2(rval,fileno(stdout));
X      if (doflags & DOSTDERR)
X	dup2(rval,fileno(stderr));
X      
X      close(rval); /* rval has been properly duplicated */
X
X      execvp(cmd[0], cmd);
X      s ="exec failed\n";
X      write(mastersocket,s,strlen(s));
X      exit(0);
X    } else {
X      /* parent: close socket.
X	 Signal will arrive upon death of child. */
X      close(rval);
X    }
X  }
X  
X  /* clean up the socket when we're done */
X  if (doflags&DOUNIX)
X    unlink(argv[1]);
X  close(mastersocket);
X  
}
SHAR_EOF
chmod 0444 faucet.c ||
echo 'restore of faucet.c failed'
Wc_c="`wc -c < 'faucet.c'`"
test 9042 -eq "$Wc_c" ||
	echo 'faucet.c: original size 9042, current size' "$Wc_c"
fi
# ============= hose.1 ==============
if test -f 'hose.1' -a X"$1" != X"-c"; then
	echo 'x - skipping hose.1 (File already exists)'
else
echo 'x - extracting hose.1 (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hose.1' &&
.\" hose.1 Copyright 11/21/1994 by Robert Forsman
.\""
.TH HOSE 1 "11/21/1994"
.SH NAME
hose \- the client end of a BSD network pipe
.SH SYNOPSIS
\fBhose\fP \fIhostname\fP \fIport\fP
(\fB\-in\fP|\fB\-out\fP|\fB\-err\fP) [\fB\-unix\fP]
[\fB\-localport\fP \fIport\fP] [\fB\-retry\fP \fIn\fP] \fIcommand\fP \fIargs\fP
X
.SH DESCRIPTION
.LP
.B hose
attempts to provide the functionality of pipes over the network.
It behaves as the client end of a server\-client connection.
When used with
.B faucet(1)
it can function as a replacement for
.IP
tar \-cf \- . | rsh other "cd destdir; tar \-xf \-"
.LP
.B faucet
and
.B hose
are especially useful when you don't have easy access to the
destination machine.
X
.LP
.B hose
creates a BSD socket and, if the
.B \-localport
option is used, binds it to the port number (or service name)
specified immediately afterwards.
X
.B hose
then tries to connect to the foreign machine
.I hostname
with foreign port
.I port.
X
If successful
.B hose
redirects the socket to stdin, stdout, and/or stderr according to the
.B \-in \-out \-err
flags.
X
.B hose
then exec(2)s a \fIcommand\fP with \fIargs\fP.
X
The
.B \-unix
flag specifies that the
.I port
is not an internet port number or service name, but instead it is a
filename for a UNIX domain socket.  This option may be simulated by
using 
.B \-unix\-
as the host name to connect to, or by renaming the
.B hose
program to \fBuhose\fP.
X
.B \-retry
.I n
allows the user to specify that
.b hose
should retry the connect(2) call for
.I n
times (or forever if
.I n
is negative).
.B \-delay
.I n
specifies how many seconds to delay between tries.
X
.B \-shutdown
means that
.B hose
should fork(2) before execcing the
.I command
and when the child exits it will perform a shutdown(2) with how=2.
X
.SH "EXAMPLES"
.LP
This will connect to port 3000 on the machine reef and connect the socket
to the stdin of a tar command.
.IP
example% hose reef 3000 \-in tar \-xf \- .
.LP
The command actually exec(2)ed by the
.B hose
program is
.IP
tar \-xf \- .
.LP
The
.B \-in
option means that the input of the child process will have been
redirected into the socket connected to reef.
X
.LP
This connects to a UNIX domain socket in the current directory
.IP
example% hose \-unix\- u\-socket \-in csh \-c \\
X	"unfunky.perl.script | dd of=sample.pgm"
.LP
The socket provides input to the csh command.
X
.SH "SEE ALSO"
.BR faucet (1),
.BR socket (2),
.BR bind (2),
.BR connect (2),
.BR shutdown (2),
.BR services (5),
.BR gethostbyaddr (3)
X
.SH "NOTES"
.LP
Doubtless there are bugs in this program, especially in the unix domain
socket portions.  I welcome problem reports and would like to make
these programs as "clean" (no leftover files, sockets) as possible.
X
.SH "CREDITS"
.LP
Thanks to Steve Clift <clift@ml.csiro.au> for SGI (SysV) patches.
.LP
Many people complained about the old way of specifying the command.
Thanks to whoever gave me the alternative which is now implemented.
It is much better.
.LP
Thanks to Sten Drescher <smd@hrt213.brooks.af.mil> for the -retry and
-delay patches and giving me the idea for the -shutdown option.
Evidently some printer doesn't appreciate the socket being close(2)d.
X
X
.SH "COPYRIGHT"
Copyright (C) 1992,1993,1994 Robert Forsman
X
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
X
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
X
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
.SH "AUTHOR"
X Robert Forsman
X thoth@cis.ufl.edu
X University of Florida
X Department of Computer and Information Science
SHAR_EOF
chmod 0444 hose.1 ||
echo 'restore of hose.1 failed'
Wc_c="`wc -c < 'hose.1'`"
test 4009 -eq "$Wc_c" ||
	echo 'hose.1: original size 4009, current size' "$Wc_c"
fi
# ============= hose.c ==============
if test -f 'hose.c' -a X"$1" != X"-c"; then
	echo 'x - skipping hose.c (File already exists)'
else
echo 'x - extracting hose.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'hose.c' &&
/*
X
X    hose.c, part of
X    faucet and hose: network pipe utilities
X    Copyright (C) 1992,1993 Robert Forsman
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
X    */
X
static char info[] = "hose: a network utility for sockets\nWritten 1992,1993 by Robert Forsman <thoth@cis.ufl.edu>\n";
#include	<stdio.h>
#ifdef hpux
#include	<sgtty.h>
#endif
#include	<signal.h>
#include	<sys/errno.h>
#include	<sys/param.h>
#include	<sys/file.h>
#ifdef USE_IOCTL
#include	<sys/ioctl.h>
#include	<sys/filio.h>
#else
#include	<sys/types.h>
#include	<unistd.h>
#include	<fcntl.h>
#endif
#include	<sys/socket.h>
#include	<sys/un.h>
#include	<netinet/in.h>
#include	<netdb.h>
X
#define	DOSTDOUT	(1<<0)
#define	DOSTDIN		(1<<1)
#define	DOSTDERR	(1<<2)
#define	DOUNIX		(1<<3)
#define	DOJAM		(1<<4)
/*#define	DOBOURNE	(1<<5)*/
X
#ifdef BOURNE_DEFAULT
long	doflags=DOBOURNE;
#else
long	doflags=0;
#endif
X
int	retry=0;	       /* how many times to retry after ECONNREFUSED */
unsigned delay=5;		/* how long to wait between each retry */
int	shutdn=0;		/* should we fork, wait and shutdown? */
char	*localport=NULL;	/* local port name */
char	*programname;
extern int	errno;
extern char *sys_errlist[];
X
X
int name_to_inet_port();
X
X
int setup_socket(hostname,portname)
char	*hostname;
char	*portname;
X
{
X  int	sock;
X  union {			/* make sure we allocate enough space */
X    struct sockaddr_un	un;
X    struct sockaddr_in	in;
X  }	server;
X  int length;
X  int tries;
X  int cstat;
X  
X  for (tries = 0; retry<0 || tries <= retry; tries++) {
X
X    sock = socket((doflags&DOUNIX)?AF_UNIX:AF_INET, SOCK_STREAM, 0);
X    if (sock <0) {
X      perror("opening stream socket");
X      exit(1);
X    }
X  
X    if (localport != NULL &&
X	!bindlocal(sock, localport, (doflags&DOUNIX)?AF_UNIX:AF_INET) ) {
X      fprintf(stderr,"%s: error binding stream socket %s (%s)",
X	      programname,localport,sys_errlist[errno]);
X      exit(1);
X    }
X  
X    if (doflags&DOUNIX) {
X      /* ignore the hostname parameter */
X      ((struct sockaddr_un*)&server)->sun_family = AF_UNIX;
X      strcpy( ((struct sockaddr_un*)&server)->sun_path, portname);
X      length = sizeof(struct sockaddr_un);
X    } else {
X      static int	initted = 0;
X      struct sockaddr_in *svr=(struct sockaddr_in *)&server;
X    
X      length = sizeof(struct sockaddr_in);
X      if (!initted) {		/* don't lookup again after a retry. */
X	svr->sin_family = AF_INET;
X    
X	if (!convert_hostname(hostname, &svr->sin_addr)) {
X	  fprintf(stderr, "%s: could not translate %s to a host address\n",
X		  programname, hostname);
X	  exit(1);
X	}
X    
X	svr->sin_port = name_to_inet_port(portname);
X	if (svr->sin_port==0) {
X	  fprintf(stderr,"%s: bogus port number %s\n",programname,portname);
X	  exit(1);
X	}
X      }
X      initted = 1;
X    }
X
X    cstat=connect(sock,(struct sockaddr*)&server,length);
X    if (cstat!=0) {
X      if (errno==ECONNREFUSED) {
X	close(sock);
X	sleep(delay);
X	sock = -1;
X	continue;
X      } else {
X	perror("connecting");
X	exit(1);
X      }
X    } else
X      break;
X  }
X
X  if (sock < 0) {
X    fprintf(stderr, "Retries exhausted, failing connect\n");
X    exit(1);
X  }
X
X  return(sock);
}
X
X
void endjam()
{
X  doflags &= ~DOJAM;
}
X
X
main (argc,argv)
X     int argc;
X     char ** argv;
X     
{
X  int	rval,i;
X  int	jampipe[2];
X  char	**cmd;
X  
X  programname=argv[0];
X  
X  if (argc<4) {
X    fprintf(stderr,"Usage : %s <hostname> <port> (-in|-out|-err)+ [-unix] [-localport <port>] [-retry n] [-delay n] [-shutdown] <command>\n",programname);
X    exit(1);
X  }
X  if (strcmp(argv[1],"-unix-")==0 || strcmp(programname,"uhose")==0 )
X    doflags |= DOUNIX;
X  for (i=3; i<argc; i++) {
X    char	*arg;
X    if (argv[i][0]!='-')
X      break;
X    arg = argv[i]+1;
X    if (strcmp(arg,"in")==0)
X      doflags |= DOSTDIN;
X    else if (strcmp(arg,"out")==0)
X      doflags |= DOSTDOUT;
X    else if (strcmp(arg,"err")==0)
X      doflags |= DOSTDERR;
X    else if (strcmp(arg,"unix")==0)
X      doflags |= DOUNIX;
#if 0
X    else if (strcmp(arg,"bourne")==0)
X      doflags |= DOBOURNE;
X    else if (strcmp(arg,"csh")==0)
X      doflags &= ~DOBOURNE;
#endif
X    else if (strcmp(arg,"jam")==0)
X      doflags |= DOJAM;
X    else if (strcmp(arg,"localport")==0) {
X      if (i+1<argc)
X	localport=argv[++i];
X      else
X	fprintf(stderr,
X		"%s: localport requires port name or number argument.\n",
X		programname);
X    } else if (strcmp(arg,"retry")==0) {
X      if (i+1<argc)
X        retry=atoi(argv[++i]);
X      else
X	fprintf(stderr,"%s: retry requires count argument.\n",
X		programname);
X    } else if (strcmp(arg,"delay")==0) {
X      if (i+1<argc)
X        delay=atoi(argv[++i]);
X      else
X	fprintf(stderr,"%s: delay requires time argument in seconds.\n",
X		programname);
X    } else if (strcmp(arg,"shutdown")==0)
X      shutdn=1;
X    else
X      fprintf(stderr,"%s: Bogus extra command line flag \"%s\".\n",
X	      programname,argv[i]);
X  }
X  cmd = argv+i;
X  
X  if ( ! (doflags&(DOSTDIN|DOSTDERR|DOSTDOUT)) ) {
X    fprintf(stderr,"%s: Need at least one {in|out|err}.\n",programname);
X    exit(1);
X  }
X
X  /* this wierd setup is to flood a socket with connections */
X  if (doflags&DOJAM) {
X    signal(SIGCHLD, endjam);
X    if (0>pipe(jampipe)) {
X      perror("opening jampipe");
X      exit(1);
X    }
X  }
X
X  while ( (doflags & DOJAM) && fork() ) {
X    char	ch;
X    close (jampipe[1]);
X    while (1==read(jampipe[0], &ch, 1))
X      ;
X    close (jampipe[0]);
X    jampipe[0] = -1;
X    if (0>pipe(jampipe)) {
X      perror("opening jampipe");
X      exit(1);
X    }
X  }
X
X  if (doflags&DOJAM)
X    close (jampipe[0]);
X
X  rval = setup_socket(argv[1],argv[2]);
X  
X  if (doflags&DOUNIX && localport!=NULL)
X    unlink(localport);
X
X  /* if we're to shutdown(2) the socket when the subprocess exits we
X     need to fork */
X  i = shutdn ? fork() : 0;
X
X  if (i) {
X    /* we are supposed to shutdown(2) the socket and we are the parent */
X    int	status;
X    int	pid;
X    pid = wait(&status);
X    if (pid != -1 && i!=pid)
X      fprintf(stderr, "Strange, wait returned a child I don't know about.  I'm an unwed father!\n");
X    shutdown(rval, 2);		/* shut the socket down nicely? */
X    close(rval);
X    exit( (status&0xff) ? 1 : ((status>>8)&0xff));
X  } else {
X    int sparefd;
X    char *s;
X    
X    sparefd = dup(fileno(stderr));
#ifdef USE_IOCTL
X    ioctl(sparefd,FIOCLEX,NULL);
#else
X    fcntl(sparefd,F_SETFD,FD_CLOEXEC);
#endif
X    
X    if (doflags & DOSTDIN)
X      dup2(rval,fileno(stdin));
X    if (doflags & DOSTDOUT)
X      dup2(rval,fileno(stdout));
X    if (doflags & DOSTDERR)
X      dup2(rval,fileno(stderr));
X    close(rval);
X    
X    if (doflags&DOJAM)
X      close (jampipe[1]);
X
X    execvp(cmd[0], cmd);
X
X    s ="exec failed\n";
X    write(sparefd,s,strlen(s));
X    exit(1);
X  }
}
SHAR_EOF
chmod 0444 hose.c ||
echo 'restore of hose.c failed'
Wc_c="`wc -c < 'hose.c'`"
test 7301 -eq "$Wc_c" ||
	echo 'hose.c: original size 7301, current size' "$Wc_c"
fi
# ============= portname.c ==============
if test -f 'portname.c' -a X"$1" != X"-c"; then
	echo 'x - skipping portname.c (File already exists)'
else
echo 'x - extracting portname.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'portname.c' &&
/*
X
X    portname.c, part of
X    faucet and hose: network pipe utilities
X    Copyright (C) 1992 Robert Forsman
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
X    */
X
#include	<stdio.h>
#include	<fcntl.h>
#include	<errno.h>
#include	<sys/socket.h>
#include	<sys/un.h>
#include	<netdb.h>
#include	<netinet/in.h>
X
int name_to_inet_port(portname)
char *portname;
/* This procedure converts a character string to a port number.  It looks
X   up the service by name and if there is none, then it converts the string
X   to a number with sscanf */
{
X  struct servent	*p;
X
X  if (portname==NULL)
X    return 0;
X
X  p = getservbyname(portname,"tcp");
X  if (p!=NULL)
X    {
X      return p->s_port;
X    }
X  else
X    {
X      int	port;
X      if (sscanf(portname,"%i",&port)!=1)
X	{
X	  return 0;
X	}
X      else
X	return htons(port);
X    }
}
X
int
convert_hostname(name, addr)
X     char	*name;
X     struct in_addr	*addr;
{
X  struct hostent	*hp;
X  int		len;
X
X  hp = gethostbyname(name);
X  if (hp != NULL)
X    bcopy(hp->h_addr,addr,hp->h_length);
X  else
X    {
X      int	count;
X      unsigned int	a1,a2,a3,a4;
X      count = sscanf(name,"%i.%i.%i.%i%n", &a1, &a2, &a3, &a4, &len);
X      if (4!=count || 0!=name[len] )
X	return 0;
#if 1
X      addr->s_addr = (((((a1 << 8) | a2) << 8) | a3) << 8) | a4;
#else
X      addr->S_un.S_un_b.s_b1 = a1;
X      addr->S_un.S_un_b.s_b2 = a2;
X      addr->S_un.S_un_b.s_b3 = a3;
X      addr->S_un.S_un_b.s_b4 = a4;
#endif
X    }
X  return 1;
}
X
X
int
bindlocal(fd, name, domain)
X     int	fd, domain;
X     char	*name;
{
X  struct sockaddr	*laddr;
X  int	addrlen;
X  int	countdown;
X  int	rval;
X  
X  if (domain==AF_INET)
X    {
X      static struct sockaddr_in	srv;
X      static int	initted=0;
X
X      laddr = (struct sockaddr*)&srv;
X      addrlen = sizeof(srv);
X
X      if (!initted) {
X	srv.sin_family = AF_INET;
X	srv.sin_addr.s_addr = INADDR_ANY;
X	
X	srv.sin_port = name_to_inet_port(name);
X      
X	if (srv.sin_port==0)
X	  {
X	    fprintf(stderr, "port %s unknown\n", name);
X	    errno = 0;
X	    return 0;
X	  }
X      }
X      initted = 1;		/* bindlocal is only called once in
X				   each netpipes program */
X    }
X  else
X    {
X      static struct sockaddr_un	srv;
X      laddr = (struct sockaddr*)&srv;
X      addrlen = sizeof(srv);
X      
X      srv.sun_family = AF_UNIX;
X      strcpy(srv.sun_path, name);
X    }
X  
X  countdown= (domain==AF_UNIX)?1:10;
X  do {
X    rval = bind(fd, laddr, addrlen);
X    if (rval)
X      if (errno==EADDRINUSE && --countdown>0)
X	{
X	  fprintf(stderr,"Address %s in use, sleeping 10.\n",
X		  name);
X	  sleep (10);
X	  fprintf(stderr,"Trying again . . .\n");
X	}
X      else
X	return 0;
X  } while (rval);
X
X  return 1;
}
SHAR_EOF
chmod 0444 portname.c ||
echo 'restore of portname.c failed'
Wc_c="`wc -c < 'portname.c'`"
test 3285 -eq "$Wc_c" ||
	echo 'portname.c: original size 3285, current size' "$Wc_c"
fi
exit 0
