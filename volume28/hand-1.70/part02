Newsgroups: comp.sources.unix
From: perseant@u.washington.edu (Konrad Schroder)
Subject: v28i121: hand-1.70 - a bunch of fingers working together, Part02/03
References: <1.777869799.9794@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: perseant@u.washington.edu (Konrad Schroder)
Posting-Number: Volume 28, Issue 121
Archive-Name: hand-1.70/part02

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of archive 2 (of 3)."
# Contents:  COPYING getopt.c handarg.c handtcp.c
# Wrapped by vixie@gw.home.vix.com on Thu Aug 25 19:55:18 1994
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'COPYING' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'COPYING'\"
else
echo shar: Extracting \"'COPYING'\" \(12488 characters\)
sed "s/^X//" >'COPYING' <<'END_OF_FILE'
X
X		    GNU GENERAL PUBLIC LICENSE
X		     Version 1, February 1989
X
X Copyright (C) 1989 Free Software Foundation, Inc.
X                    675 Mass Ave, Cambridge, MA 02139, USA
X Everyone is permitted to copy and distribute verbatim copies
X of this license document, but changing it is not allowed.
X
X			    Preamble
X
X  The license agreements of most software companies try to keep users
Xat the mercy of those companies.  By contrast, our General Public
XLicense is intended to guarantee your freedom to share and change free
Xsoftware--to make sure the software is free for all its users.  The
XGeneral Public License applies to the Free Software Foundation's
Xsoftware and to any other program whose authors commit to using it.
XYou can use it for your programs, too.
X
X  When we speak of free software, we are referring to freedom, not
Xprice.  Specifically, the General Public License is designed to make
Xsure that you have the freedom to give away or sell copies of free
Xsoftware, that you receive source code or can get it if you want it,
Xthat you can change the software or use pieces of it in new free
Xprograms; and that you know you can do these things.
X
X  To protect your rights, we need to make restrictions that forbid
Xanyone to deny you these rights or to ask you to surrender the rights.
XThese restrictions translate to certain responsibilities for you if you
Xdistribute copies of the software, or if you modify it.
X
X  For example, if you distribute copies of a such a program, whether
Xgratis or for a fee, you must give the recipients all the rights that
Xyou have.  You must make sure that they, too, receive or can get the
Xsource code.  And you must tell them their rights.
X
X  We protect your rights with two steps: (1) copyright the software, and
X(2) offer you this license which gives you legal permission to copy,
Xdistribute and/or modify the software.
X
X  Also, for each author's protection and ours, we want to make certain
Xthat everyone understands that there is no warranty for this free
Xsoftware.  If the software is modified by someone else and passed on, we
Xwant its recipients to know that what they have is not the original, so
Xthat any problems introduced by others will not reflect on the original
Xauthors' reputations.
X
X  The precise terms and conditions for copying, distribution and
Xmodification follow.
X
X		    GNU GENERAL PUBLIC LICENSE
X   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
X
X  0. This License Agreement applies to any program or other work which
Xcontains a notice placed by the copyright holder saying it may be
Xdistributed under the terms of this General Public License.  The
X"Program", below, refers to any such program or work, and a "work based
Xon the Program" means either the Program or any work containing the
XProgram or a portion of it, either verbatim or with modifications.  Each
Xlicensee is addressed as "you".
X
X  1. You may copy and distribute verbatim copies of the Program's source
Xcode as you receive it, in any medium, provided that you conspicuously and
Xappropriately publish on each copy an appropriate copyright notice and
Xdisclaimer of warranty; keep intact all the notices that refer to this
XGeneral Public License and to the absence of any warranty; and give any
Xother recipients of the Program a copy of this General Public License
Xalong with the Program.  You may charge a fee for the physical act of
Xtransferring a copy.
X
X  2. You may modify your copy or copies of the Program or any portion of
Xit, and copy and distribute such modifications under the terms of Paragraph
X1 above, provided that you also do the following:
X
X    a) cause the modified files to carry prominent notices stating that
X    you changed the files and the date of any change; and
X
X    b) cause the whole of any work that you distribute or publish, that
X    in whole or in part contains the Program or any part thereof, either
X    with or without modifications, to be licensed at no charge to all
X    third parties under the terms of this General Public License (except
X    that you may choose to grant warranty protection to some or all
X    third parties, at your option).
X
X    c) If the modified program normally reads commands interactively when
X    run, you must cause it, when started running for such interactive use
X    in the simplest and most usual way, to print or display an
X    announcement including an appropriate copyright notice and a notice
X    that there is no warranty (or else, saying that you provide a
X    warranty) and that users may redistribute the program under these
X    conditions, and telling the user how to view a copy of this General
X    Public License.
X
X    d) You may charge a fee for the physical act of transferring a
X    copy, and you may at your option offer warranty protection in
X    exchange for a fee.
X
XMere aggregation of another independent work with the Program (or its
Xderivative) on a volume of a storage or distribution medium does not bring
Xthe other work under the scope of these terms.
X
X  3. You may copy and distribute the Program (or a portion or derivative of
Xit, under Paragraph 2) in object code or executable form under the terms of
XParagraphs 1 and 2 above provided that you also do one of the following:
X
X    a) accompany it with the complete corresponding machine-readable
X    source code, which must be distributed under the terms of
X    Paragraphs 1 and 2 above; or,
X
X    b) accompany it with a written offer, valid for at least three
X    years, to give any third party free (except for a nominal charge
X    for the cost of distribution) a complete machine-readable copy of the
X    corresponding source code, to be distributed under the terms of
X    Paragraphs 1 and 2 above; or,
X
X    c) accompany it with the information you received as to where the
X    corresponding source code may be obtained.  (This alternative is
X    allowed only for noncommercial distribution and only if you
X    received the program in object code or executable form alone.)
X
XSource code for a work means the preferred form of the work for making
Xmodifications to it.  For an executable file, complete source code means
Xall the source code for all modules it contains; but, as a special
Xexception, it need not include source code for modules which are standard
Xlibraries that accompany the operating system on which the executable
Xfile runs, or for standard header files or definitions files that
Xaccompany that operating system.
X
X  4. You may not copy, modify, sublicense, distribute or transfer the
XProgram except as expressly provided under this General Public License.
XAny attempt otherwise to copy, modify, sublicense, distribute or transfer
Xthe Program is void, and will automatically terminate your rights to use
Xthe Program under this License.  However, parties who have received
Xcopies, or rights to use copies, from you under this General Public
XLicense will not have their licenses terminated so long as such parties
Xremain in full compliance.
X
X  5. By copying, distributing or modifying the Program (or any work based
Xon the Program) you indicate your acceptance of this license to do so,
Xand all its terms and conditions.
X
X  6. Each time you redistribute the Program (or any work based on the
XProgram), the recipient automatically receives a license from the original
Xlicensor to copy, distribute or modify the Program subject to these
Xterms and conditions.  You may not impose any further restrictions on the
Xrecipients' exercise of the rights granted herein.
X
X  7. The Free Software Foundation may publish revised and/or new versions
Xof the General Public License from time to time.  Such new versions will
Xbe similar in spirit to the present version, but may differ in detail to
Xaddress new problems or concerns.
X
XEach version is given a distinguishing version number.  If the Program
Xspecifies a version number of the license which applies to it and "any
Xlater version", you have the option of following the terms and conditions
Xeither of that version or of any later version published by the Free
XSoftware Foundation.  If the Program does not specify a version number of
Xthe license, you may choose any version ever published by the Free Software
XFoundation.
X
X  8. If you wish to incorporate parts of the Program into other free
Xprograms whose distribution conditions are different, write to the author
Xto ask for permission.  For software which is copyrighted by the Free
XSoftware Foundation, write to the Free Software Foundation; we sometimes
Xmake exceptions for this.  Our decision will be guided by the two goals
Xof preserving the free status of all derivatives of our free software and
Xof promoting the sharing and reuse of software generally.
X
X			    NO WARRANTY
X
X  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
XFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
XOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
XPROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
XOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
XMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
XTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
XPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
XREPAIR OR CORRECTION.
X
X  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
XWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
XREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
XINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
XOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
XTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
XYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
XPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
XPOSSIBILITY OF SUCH DAMAGES.
X
X		     END OF TERMS AND CONDITIONS
X
X	Appendix: How to Apply These Terms to Your New Programs
X
X  If you develop a new program, and you want it to be of the greatest
Xpossible use to humanity, the best way to achieve this is to make it
Xfree software which everyone can redistribute and change under these
Xterms.
X
X  To do so, attach the following notices to the program.  It is safest to
Xattach them to the start of each source file to most effectively convey
Xthe exclusion of warranty; and each file should have at least the
X"copyright" line and a pointer to where the full notice is found.
X
X    <one line to give the program's name and a brief idea of what it does.>
X    Copyright (C) 19yy  <name of author>
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 1, or (at your option)
X    any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
XAlso add information on how to contact you by electronic and paper mail.
X
XIf the program is interactive, make it output a short notice like this
Xwhen it starts in an interactive mode:
X
X    Gnomovision version 69, Copyright (C) 19xx name of author
X    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
X    This is free software, and you are welcome to redistribute it
X    under certain conditions; type `show c' for details.
X
XThe hypothetical commands `show w' and `show c' should show the
Xappropriate parts of the General Public License.  Of course, the
Xcommands you use may be called something other than `show w' and `show
Xc'; they could even be mouse-clicks or menu items--whatever suits your
Xprogram.
X
XYou should also get your employer (if you work as a programmer) or your
Xschool, if any, to sign a "copyright disclaimer" for the program, if
Xnecessary.  Here a sample; alter the names:
X
X  Yoyodyne, Inc., hereby disclaims all copyright interest in the
X  program `Gnomovision' (a program to direct compilers to make passes
X  at assemblers) written by James Hacker.
X
X  <signature of Ty Coon>, 1 April 1989
X  Ty Coon, President of Vice
X
XThat's all there is to it!
END_OF_FILE
if test 12488 -ne `wc -c <'COPYING'`; then
    echo shar: \"'COPYING'\" unpacked with wrong size!
fi
# end of 'COPYING'
fi
if test -f 'getopt.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'getopt.c'\"
else
echo shar: Extracting \"'getopt.c'\" \(19968 characters\)
sed "s/^X//" >'getopt.c' <<'END_OF_FILE'
X/* getopt for GNU.
X   NOTE: getopt is now part of the C library, so if you don't know what
X   "Keep this file name-space clean" means, talk to roland@gnu.ai.mit.edu
X   before changing it!
X
X   Copyright (C) 1987, 88, 89, 90, 91, 1992 Free Software Foundation, Inc.
X
X   This program is free software; you can redistribute it and/or modify it
X   under the terms of the GNU General Public License as published by the
X   Free Software Foundation; either version 2, or (at your option) any
X   later version.
X   
X   This program is distributed in the hope that it will be useful,
X   but WITHOUT ANY WARRANTY; without even the implied warranty of
X   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X   GNU General Public License for more details.
X   
X   You should have received a copy of the GNU General Public License
X   along with this program; if not, write to the Free Software
X   Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
X
X/* AIX requires this to be the first thing in the file.  */
X#ifdef __GNUC__
X#define alloca __builtin_alloca
X#else /* not __GNUC__ */
X#if defined (HAVE_ALLOCA_H) || (defined(sparc) && (defined(sun) || (!defined(USG) && !defined(SVR4) && !defined(__svr4__))))
X#include <alloca.h>
X#else
X#ifdef _AIX
X #pragma alloca
X#else
Xchar *alloca ();
X#endif
X#endif /* alloca.h */
X#endif /* not __GNUC__ */
X
X#include <stdio.h>
X
X#if defined(USG) || defined(STDC_HEADERS) || defined(__GNU_LIBRARY__)
X#include <string.h>
X#endif
X
X/* This needs to come after some library #include
X   to get __GNU_LIBRARY__ defined.  */
X#ifdef	__GNU_LIBRARY__
X#undef	alloca
X/* Don't include stdlib.h for non-GNU C libraries because some of them
X   contain conflicting prototypes for getopt.  */
X#include <stdlib.h>
X#else	/* Not GNU C library.  */
X#define	__alloca	alloca
X#endif	/* GNU C library.  */
X
X#if !__STDC__
X#define const
X#endif
X
X/* If GETOPT_COMPAT is defined, `+' as well as `--' can introduce a
X   long-named option.  Because this is not POSIX.2 compliant, it is
X   being phased out.  */
X#define GETOPT_COMPAT
X
X/* This version of `getopt' appears to the caller like standard Unix `getopt'
X   but it behaves differently for the user, since it allows the user
X   to intersperse the options with the other arguments.
X
X   As `getopt' works, it permutes the elements of ARGV so that,
X   when it is done, all the options precede everything else.  Thus
X   all application programs are extended to handle flexible argument order.
X
X   Setting the environment variable POSIXLY_CORRECT disables permutation.
X   Then the behavior is completely standard.
X
X   GNU application programs can use a third alternative mode in which
X   they can distinguish the relative order of options and other arguments.  */
X
X#include "getopt.h"
X
X/* For communication from `getopt' to the caller.
X   When `getopt' finds an option that takes an argument,
X   the argument value is returned here.
X   Also, when `ordering' is RETURN_IN_ORDER,
X   each non-option ARGV-element is returned here.  */
X
Xchar *optarg = 0;
X
X/* Index in ARGV of the next element to be scanned.
X   This is used for communication to and from the caller
X   and for communication between successive calls to `getopt'.
X
X   On entry to `getopt', zero means this is the first call; initialize.
X
X   When `getopt' returns EOF, this is the index of the first of the
X   non-option elements that the caller should itself scan.
X
X   Otherwise, `optind' communicates from one call to the next
X   how much of ARGV has been scanned so far.  */
X
Xint optind = 0;
X
X/* The next char to be scanned in the option-element
X   in which the last option character we returned was found.
X   This allows us to pick up the scan where we left off.
X
X   If this is zero, or a null string, it means resume the scan
X   by advancing to the next ARGV-element.  */
X
Xstatic char *nextchar;
X
X/* Callers store zero here to inhibit the error message
X   for unrecognized options.  */
X
Xint opterr = 1;
X
X/* Describe how to deal with options that follow non-option ARGV-elements.
X
X   If the caller did not specify anything,
X   the default is REQUIRE_ORDER if the environment variable
X   POSIXLY_CORRECT is defined, PERMUTE otherwise.
X
X   REQUIRE_ORDER means don't recognize them as options;
X   stop option processing when the first non-option is seen.
X   This is what Unix does.
X   This mode of operation is selected by either setting the environment
X   variable POSIXLY_CORRECT, or using `+' as the first character
X   of the list of option characters.
X
X   PERMUTE is the default.  We permute the contents of ARGV as we scan,
X   so that eventually all the non-options are at the end.  This allows options
X   to be given in any order, even with programs that were not written to
X   expect this.
X
X   RETURN_IN_ORDER is an option available to programs that were written
X   to expect options and other ARGV-elements in any order and that care about
X   the ordering of the two.  We describe each non-option ARGV-element
X   as if it were the argument of an option with character code 1.
X   Using `-' as the first character of the list of option characters
X   selects this mode of operation.
X
X   The special argument `--' forces an end of option-scanning regardless
X   of the value of `ordering'.  In the case of RETURN_IN_ORDER, only
X   `--' can cause `getopt' to return EOF with `optind' != ARGC.  */
X
Xstatic enum
X{
X  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER
X} ordering;
X
X#ifdef	__GNU_LIBRARY__
X#include <string.h>
X#define	my_index	strchr
X#define	my_bcopy(src, dst, n)	memcpy ((dst), (src), (n))
X#else
X
X/* Avoid depending on library functions or files
X   whose names are inconsistent.  */
X
Xchar *getenv ();
X
Xstatic char *
Xmy_index (string, chr)
X     char *string;
X     int chr;
X{
X  while (*string)
X    {
X      if (*string == chr)
X	return string;
X      string++;
X    }
X  return 0;
X}
X
Xstatic void
Xmy_bcopy (from, to, size)
X     char *from, *to;
X     int size;
X{
X  int i;
X  for (i = 0; i < size; i++)
X    to[i] = from[i];
X}
X#endif				/* GNU C library.  */
X
X/* Handle permutation of arguments.  */
X
X/* Describe the part of ARGV that contains non-options that have
X   been skipped.  `first_nonopt' is the index in ARGV of the first of them;
X   `last_nonopt' is the index after the last of them.  */
X
Xstatic int first_nonopt;
Xstatic int last_nonopt;
X
X/* Exchange two adjacent subsequences of ARGV.
X   One subsequence is elements [first_nonopt,last_nonopt)
X   which contains all the non-options that have been skipped so far.
X   The other is elements [last_nonopt,optind), which contains all
X   the options processed since those non-options were skipped.
X
X   `first_nonopt' and `last_nonopt' are relocated so that they describe
X   the new indices of the non-options in ARGV after they are moved.  */
X
Xstatic void
Xexchange (argv)
X     char **argv;
X{
X  int nonopts_size = (last_nonopt - first_nonopt) * sizeof (char *);
X  char **temp = (char **) malloc (nonopts_size);
X
X  /* Interchange the two blocks of data in ARGV.  */
X
X  my_bcopy ((char *) &argv[first_nonopt], (char *) temp, nonopts_size);
X  my_bcopy ((char *) &argv[last_nonopt], (char *) &argv[first_nonopt],
X	    (optind - last_nonopt) * sizeof (char *));
X  my_bcopy ((char *) temp,
X	    (char *) &argv[first_nonopt + optind - last_nonopt],
X	    nonopts_size);
X
X  /* Update records for the slots the non-options now occupy.  */
X
X  first_nonopt += (optind - last_nonopt);
X  last_nonopt = optind;
X  free(temp);
X}
X
X/* Scan elements of ARGV (whose length is ARGC) for option characters
X   given in OPTSTRING.
X
X   If an element of ARGV starts with '-', and is not exactly "-" or "--",
X   then it is an option element.  The characters of this element
X   (aside from the initial '-') are option characters.  If `getopt'
X   is called repeatedly, it returns successively each of the option characters
X   from each of the option elements.
X
X   If `getopt' finds another option character, it returns that character,
X   updating `optind' and `nextchar' so that the next call to `getopt' can
X   resume the scan with the following option character or ARGV-element.
X
X   If there are no more option characters, `getopt' returns `EOF'.
X   Then `optind' is the index in ARGV of the first ARGV-element
X   that is not an option.  (The ARGV-elements have been permuted
X   so that those that are not options now come last.)
X
X   OPTSTRING is a string containing the legitimate option characters.
X   If an option character is seen that is not listed in OPTSTRING,
X   return '?' after printing an error message.  If you set `opterr' to
X   zero, the error message is suppressed but we still return '?'.
X
X   If a char in OPTSTRING is followed by a colon, that means it wants an arg,
X   so the following text in the same ARGV-element, or the text of the following
X   ARGV-element, is returned in `optarg'.  Two colons mean an option that
X   wants an optional arg; if there is text in the current ARGV-element,
X   it is returned in `optarg', otherwise `optarg' is set to zero.
X
X   If OPTSTRING starts with `-' or `+', it requests different methods of
X   handling the non-option ARGV-elements.
X   See the comments about RETURN_IN_ORDER and REQUIRE_ORDER, above.
X
X   Long-named options begin with `--' instead of `-'.
X   Their names may be abbreviated as long as the abbreviation is unique
X   or is an exact match for some defined option.  If they have an
X   argument, it follows the option name in the same ARGV-element, separated
X   from the option name by a `=', or else the in next ARGV-element.
X   When `getopt' finds a long-named option, it returns 0 if that option's
X   `flag' field is nonzero, the value of the option's `val' field
X   if the `flag' field is zero.
X
X   The elements of ARGV aren't really const, because we permute them.
X   But we pretend they're const in the prototype to be compatible
X   with other systems.
X
X   LONGOPTS is a vector of `struct g_option' terminated by an
X   element containing a name which is zero.
X
X   LONGIND returns the index in LONGOPT of the long-named option found.
X   It is only valid when a long-named option has been found by the most
X   recent call.
X
X   If LONONLY is nonzero, '-' as well as '--' can introduce
X   long-named options.  */
X
Xint
X_getopt_internal (argc, argv, optstring, longopts, longind, lononly)
X     int argc;
X     char *const *argv;
X     const char *optstring;
X     const struct g_option *longopts;
X     int *longind;
X     int lononly;
X{
X  int option_index;
X
X  optarg = 0;
X
X  /* Initialize the internal data when the first call is made.
X     Start processing options with ARGV-element 1 (since ARGV-element 0
X     is the program name); the sequence of previously skipped
X     non-option ARGV-elements is empty.  */
X
X  if (optind == 0)
X    {
X      first_nonopt = last_nonopt = optind = 1;
X
X      nextchar = NULL;
X
X      /* Determine how to handle the ordering of options and nonoptions.  */
X
X      if (optstring[0] == '-')
X	{
X	  ordering = RETURN_IN_ORDER;
X	  ++optstring;
X	}
X      else if (optstring[0] == '+')
X	{
X	  ordering = REQUIRE_ORDER;
X	  ++optstring;
X	}
X      else if (getenv ("POSIXLY_CORRECT") != NULL)
X	ordering = REQUIRE_ORDER;
X      else
X	ordering = PERMUTE;
X    }
X
X  if (nextchar == NULL || *nextchar == '\0')
X    {
X      if (ordering == PERMUTE)
X	{
X	  /* If we have just processed some options following some non-options,
X	     exchange them so that the options come first.  */
X
X	  if (first_nonopt != last_nonopt && last_nonopt != optind)
X	    exchange ((char **) argv);
X	  else if (last_nonopt != optind)
X	    first_nonopt = optind;
X
X	  /* Now skip any additional non-options
X	     and extend the range of non-options previously skipped.  */
X
X	  while (optind < argc
X		 && (argv[optind][0] != '-' || argv[optind][1] == '\0')
X#ifdef GETOPT_COMPAT
X		 && (longopts == NULL
X		     || argv[optind][0] != '+' || argv[optind][1] == '\0')
X#endif				/* GETOPT_COMPAT */
X		 )
X	    optind++;
X	  last_nonopt = optind;
X	}
X
X      /* Special ARGV-element `--' means premature end of options.
X	 Skip it like a null option,
X	 then exchange with previous non-options as if it were an option,
X	 then skip everything else like a non-option.  */
X
X      if (optind != argc && !strcmp (argv[optind], "--"))
X	{
X	  optind++;
X
X	  if (first_nonopt != last_nonopt && last_nonopt != optind)
X	    exchange ((char **) argv);
X	  else if (first_nonopt == last_nonopt)
X	    first_nonopt = optind;
X	  last_nonopt = argc;
X
X	  optind = argc;
X	}
X
X      /* If we have done all the ARGV-elements, stop the scan
X	 and back over any non-options that we skipped and permuted.  */
X
X      if (optind == argc)
X	{
X	  /* Set the next-arg-index to point at the non-options
X	     that we previously skipped, so the caller will digest them.  */
X	  if (first_nonopt != last_nonopt)
X	    optind = first_nonopt;
X	  return EOF;
X	}
X
X      /* If we have come to a non-option and did not permute it,
X	 either stop the scan or describe it to the caller and pass it by.  */
X
X      if ((argv[optind][0] != '-' || argv[optind][1] == '\0')
X#ifdef GETOPT_COMPAT
X	  && (longopts == NULL
X	      || argv[optind][0] != '+' || argv[optind][1] == '\0')
X#endif				/* GETOPT_COMPAT */
X	  )
X	{
X	  if (ordering == REQUIRE_ORDER)
X	    return EOF;
X	  optarg = argv[optind++];
X	  return 1;
X	}
X
X      /* We have found another option-ARGV-element.
X	 Start decoding its characters.  */
X
X      nextchar = (argv[optind] + 1
X		  + (longopts != NULL && argv[optind][1] == '-'));
X    }
X
X  if (longopts != NULL
X      && ((argv[optind][0] == '-'
X	   && (argv[optind][1] == '-' || lononly))
X#ifdef GETOPT_COMPAT
X	  || argv[optind][0] == '+'
X#endif				/* GETOPT_COMPAT */
X	  ))
X    {
X      const struct g_option *p;
X      char *s = nextchar;
X      int exact = 0;
X      int ambig = 0;
X      const struct g_option *pfound = NULL;
X      int indfound;
X
X      while (*s && *s != '=')
X	s++;
X
X      /* Test all options for either exact match or abbreviated matches.  */
X      for (p = longopts, option_index = 0; p->name;
X	   p++, option_index++)
X	if (!strncmp (p->name, nextchar, s - nextchar))
X	  {
X	    if (s - nextchar == strlen (p->name))
X	      {
X		/* Exact match found.  */
X		pfound = p;
X		indfound = option_index;
X		exact = 1;
X		break;
X	      }
X	    else if (pfound == NULL)
X	      {
X		/* First nonexact match found.  */
X		pfound = p;
X		indfound = option_index;
X	      }
X	    else
X	      /* Second nonexact match found.  */
X	      ambig = 1;
X	  }
X
X      if (ambig && !exact)
X	{
X	  if (opterr)
X	    fprintf (stderr, "%s: option `%s' is ambiguous\n",
X		     argv[0], argv[optind]);
X	  nextchar += strlen (nextchar);
X	  optind++;
X	  return '?';
X	}
X
X      if (pfound != NULL)
X	{
X	  option_index = indfound;
X	  optind++;
X	  if (*s)
X	    {
X	      /* Don't test has_arg with >, because some C compilers don't
X		 allow it to be used on enums.  */
X	      if (pfound->has_arg)
X		optarg = s + 1;
X	      else
X		{
X		  if (opterr)
X		    {
X		      if (argv[optind - 1][1] == '-')
X			/* --option */
X			fprintf (stderr,
X				 "%s: option `--%s' doesn't allow an argument\n",
X				 argv[0], pfound->name);
X		      else
X			/* +option or -option */
X			fprintf (stderr,
X			     "%s: option `%c%s' doesn't allow an argument\n",
X			     argv[0], argv[optind - 1][0], pfound->name);
X		    }
X		  nextchar += strlen (nextchar);
X		  return '?';
X		}
X	    }
X	  else if (pfound->has_arg == 1)
X	    {
X	      if (optind < argc)
X		optarg = argv[optind++];
X	      else
X		{
X		  if (opterr)
X		    fprintf (stderr, "%s: option `%s' requires an argument\n",
X			     argv[0], argv[optind - 1]);
X		  nextchar += strlen (nextchar);
X		  return '?';
X		}
X	    }
X	  nextchar += strlen (nextchar);
X	  if (longind != NULL)
X	    *longind = option_index;
X	  if (pfound->flag)
X	    {
X	      *(pfound->flag) = pfound->val;
X	      return 0;
X	    }
X	  return pfound->val;
X	}
X      /* Can't find it as a long option.  If this is not getopt_lononly,
X	 or the option starts with '--' or is not a valid short
X	 option, then it's an error.
X	 Otherwise interpret it as a short option.  */
X      if (!lononly || argv[optind][1] == '-'
X#ifdef GETOPT_COMPAT
X	  || argv[optind][0] == '+'
X#endif				/* GETOPT_COMPAT */
X	  || my_index (optstring, *nextchar) == NULL)
X	{
X	  if (opterr)
X	    {
X	      if (argv[optind][1] == '-')
X		/* --option */
X		fprintf (stderr, "%s: unrecognized option `--%s'\n",
X			 argv[0], nextchar);
X	      else
X		/* +option or -option */
X		fprintf (stderr, "%s: unrecognized option `%c%s'\n",
X			 argv[0], argv[optind][0], nextchar);
X	    }
X	  nextchar = (char *) "";
X	  optind++;
X	  return '?';
X	}
X    }
X
X  /* Look at and handle the next option-character.  */
X
X  {
X    char c = *nextchar++;
X    char *temp = my_index (optstring, c);
X
X    /* Increment `optind' when we start to process its last character.  */
X    if (*nextchar == '\0')
X      ++optind;
X
X    if (temp == NULL || c == ':')
X      {
X	if (opterr)
X	  {
X	    if (c < 040 || c >= 0177)
X	      fprintf (stderr, "%s: unrecognized option, character code 0%o\n",
X		       argv[0], c);
X	    else
X	      fprintf (stderr, "%s: unrecognized option `-%c'\n", argv[0], c);
X	  }
X	return '?';
X      }
X    if (temp[1] == ':')
X      {
X	if (temp[2] == ':')
X	  {
X	    /* This is an option that accepts an argument optionally.  */
X	    if (*nextchar != '\0')
X	      {
X		optarg = nextchar;
X		optind++;
X	      }
X	    else
X	      optarg = 0;
X	    nextchar = NULL;
X	  }
X	else
X	  {
X	    /* This is an option that requires an argument.  */
X	    if (*nextchar != '\0')
X	      {
X		optarg = nextchar;
X		/* If we end this ARGV-element by taking the rest as an arg,
X		   we must advance to the next element now.  */
X		optind++;
X	      }
X	    else if (optind == argc)
X	      {
X		if (opterr)
X		  fprintf (stderr, "%s: option `-%c' requires an argument\n",
X			   argv[0], c);
X		c = '?';
X	      }
X	    else
X	      /* We already incremented `optind' once;
X		 increment it again when taking next ARGV-elt as argument.  */
X	      optarg = argv[optind++];
X	    nextchar = NULL;
X	  }
X      }
X    return c;
X  }
X}
X
Xint
Xgetopt (argc, argv, optstring)
X     int argc;
X     char *const *argv;
X     const char *optstring;
X{
X  return _getopt_internal (argc, argv, optstring,
X			   (const struct g_option *) 0,
X			   (int *) 0,
X			   0);
X}
X
Xint
Xgetopt_long (argc, argv, options, lonoptions, opt_index)
X     int argc;
X     char *const *argv;
X     const char *options;
X     const struct g_option *lonoptions;
X     int *opt_index;
X{
X  return _getopt_internal (argc, argv, options, lonoptions, opt_index, 0);
X}
X
X/* Like getopt_long, but '-' as well as '--' can indicate a long option.
X   If an option that starts with '-' (not '--') doesn't match a long option,
X   but does match a short option, it is parsed as a short option
X   instead. */
X
Xint 
Xgetopt_lononly (argc, argv, options, lonoptions, opt_index)
X     int argc;
X     char *const *argv;
X     const char *options;
X     const struct g_option *lonoptions;
X     int *opt_index;
X{
X  return _getopt_internal (argc, argv, options, lonoptions, opt_index, 1);
X}
X
X
X#ifdef TEST
X
X/* Compile with -DTEST to make an executable for use in testing
X   the above definition of `getopt'.  */
X
Xint
Xmain (argc, argv)
X     int argc;
X     char **argv;
X{
X  int c;
X  int digit_optind = 0;
X
X  while (1)
X    {
X      int this_option_optind = optind ? optind : 1;
X
X      c = getopt (argc, argv, "abc:d:0123456789");
X      if (c == EOF)
X	break;
X
X      switch (c)
X	{
X	case '0':
X	case '1':
X	case '2':
X	case '3':
X	case '4':
X	case '5':
X	case '6':
X	case '7':
X	case '8':
X	case '9':
X	  if (digit_optind != 0 && digit_optind != this_option_optind)
X	    printf ("digits occur in two different argv-elements.\n");
X	  digit_optind = this_option_optind;
X	  printf ("option %c\n", c);
X	  break;
X
X	case 'a':
X	  printf ("option a\n");
X	  break;
X
X	case 'b':
X	  printf ("option b\n");
X	  break;
X
X	case 'c':
X	  printf ("option c with value `%s'\n", optarg);
X	  break;
X
X	case '?':
X	  break;
X
X	default:
X	  printf ("?? getopt returned character code 0%o ??\n", c);
X	}
X    }
X
X  if (optind < argc)
X    {
X      printf ("non-option ARGV-elements: ");
X      while (optind < argc)
X	printf ("%s ", argv[optind++]);
X      printf ("\n");
X    }
X
X  exit (0);
X}
X
X#endif /* TEST */
END_OF_FILE
if test 19968 -ne `wc -c <'getopt.c'`; then
    echo shar: \"'getopt.c'\" unpacked with wrong size!
fi
# end of 'getopt.c'
fi
if test -f 'handarg.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'handarg.c'\"
else
echo shar: Extracting \"'handarg.c'\" \(20740 characters\)
sed "s/^X//" >'handarg.c' <<'END_OF_FILE'
X/*
X *
X * H A N D A R G . C   -    Argument handling for hand.
X *
X */
X
X/*
X *   Copyright (C) 1992, 1993 Konrad Schroder.
X *
X *   This program is free software; you can redistribute it and/or modify
X *   it under the terms of the GNU General Public License as published by
X *   the Free Software Foundation; either version 1, or (at your option)
X *   any later version.
X *
X *   This program is distributed in the hope that it will be useful,
X *   but WITHOUT ANY WARRANTY; without even the implied warranty of
X *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *   GNU General Public License for more details.
X *
X *   You should have received a copy of the GNU General Public License
X *   along with this program; if not, write to the Free Software
X *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X */
X
X#include "config.h"  /* needed here for ifdef's below */
X#include <ctype.h>
X#include <errno.h>
X#include <stdio.h>
X#if HAVE_STRING_H
X# include <string.h>
X#else
X# include <strings.h>
X#endif
X#include <time.h>
X#include "getopt.h"
X#include "handstr.h"
X#include "handsort.h"
X#include "hand.h"
X
Xextern struct Option option;
Xextern int mypid;
Xextern char *sys_errlist[], *tmpdir, program_name[];
Xextern int optind;
Xextern char **global_argv, **global_envv, home[];
X
Xstruct g_option long_option_array[] = {
X     {"add-host", 0, NULL, 1000},
X     {"add-user", 0, NULL, 2000},
X     {"del-host", 2, NULL, 3000},
X     {"del-user", 2, NULL, 4000},
X     {"fix",      0, NULL, 5000},
X     {"login-command", 1, NULL, 1001},
X     {"logout-command", 1, NULL, 1002},
X     {"port", 1, NULL, 1003},
X
X     {"beep", 0, &(option.nobeep), 0},
X     {"file", 1, NULL, 'f'},
X     {"idle", 1, NULL, 'i'},
X     {"no-idle", 0, &(option.idle_max), INT_MAX},
X#ifndef OS2
X     {"home", 0, NULL, 'h'},
X     {"here", 0, NULL, 'h'},
X#endif
X     {"list", 0, &(option.fxfmt), 1},
X     {"no-beep", 0, &(option.nobeep), 1},
X     {"no-list", 0, &(option.fxfmt), 0},
X#if 0
X     {"long", 0, NULL, 'l'},
X#endif
X     {"footer", 0, &(option.footer), 1},
X     {"no-footer", 0, &(option.footer), 0},
X     {"fork", 0, &(option.fork), MAX_FORKS},
X     {"no-fork", 0, &(option.fork), 0},
X     {"header", 0,  &(option.header), 1},
X     {"no-header", 0, &(option.header), 0},
X     {"obey-host-field", 0, &(option.host), 1},
X     {"no-obey-host-field", 0, &(option.host), 0},
X     {"once-only", 0, &(option.once_only), 1},
X     {"no-once-only", 0, &(option.once_only), 0},
X     {"quiet", 0, &(option.error), 1},
X     {"no-quiet", 0, &(option.error), 0},
X     {"silent", 0, &(option.error), 1},
X     {"no-silent", 0, &(option.error), 0},
X#if 0
X     {"short", 0, NULL, 's'},
X#endif
X     {"timeout", 1, NULL, 't'},
X     {"no-timeout", 0, &(option.timeout), 0},
X     {"timezone-correction", 0, NULL, 'T'},
X     {"no-timezone-correction", 0, &(option.timezone), 0},
X     {"verbose", 0, &(option.verbose), 1},
X     {"no-verbose", 0, &(option.verbose), 0},
X     {"version", 0, &(option.version), 1},
X     {"no-version", 0, &(option.version), 0},
X     {"watch", 2, NULL, 'W'},
X     {"no-watch", 0, &(option.watch), 0},
X#ifndef OS2
X     {"what", 0, &(option.what), 1},
X     {"no-what", 0, &(option.what), 0},
X#endif
X     {0, 0, NULL, 0}
X};
X
Xstatic int pcasecmp(p1, p2)
X     void *p1;
X     void *p2;
X{
X     return strcasecmp(*(void **)p1, *(void **)p2);
X}
X
Xvoid copyleft()
X{
X     puts("");
X     puts("Hand -- Determine whether your associates are logged in, anywhere.");
X     puts("");
X     puts("Copyright (c) 1992, 1993 Konrad Schroder.");
X     puts("");
X     puts("This program is free software; you can redistribute it and/or");
X     puts("modify it under the terms of the GNU General Public License as");
X     puts("published by the Free Software Foundation; either version 1, or");
X     puts("(at your option) any later version.");
X     puts("");
X     puts("This program is distributed in the hope that it will be useful,");
X     puts("but WITHOUT ANY WARRANTY; without even the implied warranty of");
X     puts("MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the");
X     puts("GNU General Public License for more details.");
X     puts("");
X     puts("You should have received a copy of the GNU General Public License");
X     puts("along with this program; if not, write to the Free Software");
X     puts("Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.");
X     puts("");
X     puts("Author:    Konrad Schroder              Tinker and Programmer");
X     puts("Internet:  perseant@u.washington.edu    18025 59th Ave SE");
X     puts("Phone:     (206) 486-3893               Snohomish, WA 98290");
X     puts("");
X
X     return;
X}
X
Xvoid usage()
X{
X     printf("\nUsage:\n");
X     printf("  %s  [-huVv] [-[n]CDFHLoOqSTwW] [-f <filename>] [-i <idle>]\n",
X            program_name);
X     puts("        [-t <timeout>]");
X     puts("        [--[no-]beep] [--file <filename>] [--[no-]footer]");
X     puts("        [--[no-]idle <idle>] [--[no-]header] [--here] [--home]");
X     puts("        [--[no-]list] [--login-command <command>]");
X     puts("        [--logout-command <command>] [--[no-]obey-host-field]");
X     puts("        [--[no-]once-only] [--port <port>] [--[no-]quiet]");
X     puts("        [--[no-]silent] [--[no-]timeout <timeout>]");
X     puts("        [--[no-]timezone-correction] [--[no-]verbose]");
X     puts("        [--[no-]version] [--[no-]watch] [--[no-]what]");
X     puts("        [user[@host] ...] [@host ...]");
X
X     printf("  %s  --add-host <canonical-name> [non-canonical-name...]\n",
X            program_name);
X     printf("  %s  --add-user <login-name> [nick name ...]\n",program_name);
X     printf("  %s  --del-host <hostname>\n",program_name);
X     printf("  %s  --del-user <login-name>\n",program_name);
X     printf("  %s  --fix\n",program_name);
X     return;
X}
X
X/*
X * strarg(argv, s) tokenizes the string s and returns an argv-like list of
X * tokens.
X */
X
Xchar **strarg(argv, s)
X     char **argv;
X     char *s;
X{
X     int i, envc;
X     char **envv, *t;
X
X     if(s==NULL || s[0]=='\0')
X     {
X          envv = (char **)malloc(sizeof(char *)*2);
X          envv[1]=NULL;
X          envv[0]=argv[0];
X          return envv;
X     }
X     if((t=(char *)strtok(s," \t"))!=NULL)
X     {
X          envv=(char **)malloc(sizeof(char *)*((envc=2)+1));
X          envv[1]=t;
X          while((t=(char *)strtok(NULL," \t"))!=NULL)
X          {
X               envv = (char **)realloc(envv,sizeof(char *)*(++envc+1));
X               envv[envc-1]=t;
X          }
X          envv[0]=argv[0];
X          envv[envc]=NULL;
X     }
X
X     fflush(stdout);
X     return envv;
X}
X
X/*
X * query_create(filename) helps a user to create an address file.
X * It returns NULL on failure (the user opts not to create the file)
X * or a handle to the file, open for reading, if successful.
X */
X
XFILE *query_create(t)
X     char *t;
X{
X     char s[ML], ad[ML], *ss;
X     FILE *fp;
X
X     sprintf(ad,"%s/.addresses.dat",home);
X     if(access(ad,0)==0)
X     {
X          /* They have an old-style .addresses.dat */
X          puts("You have an old-style ~/.addresses.dat, rather than a");
X          puts("new ~/.hand file.  Do you wish to convert your address");
X          puts("file into the new format?");
X          do {
X               fgets(s,ML,stdin);
X               if(!strchr("yYnN",s[0]))
X                    printf("\007Please answer yes or no.\n");
X          } while(!strchr("yYnN",s[0]));
X          if(s[0]=='n' || s[0]=='N')
X               return NULL;
X
X          /* update the file; kludge, cp it */
X          sprintf(s,"cp %s/.addresses.dat %s",home,t);
X          system(s);
X     }
X     else
X     {
X          puts("Hand requires the use of an address file,");
X          puts("~/.hand, if it is to be used without explicit arguments.");
X          puts("Do you wish to create this file? (yes or no)");
X          do {
X               fgets(s,ML,stdin);
X               if(!strchr("yYnN",s[0]))
X                    printf("\007Please answer yes or no.\n");
X          } while(!strchr("yYnN",s[0]));
X          if(s[0]=='n' || s[0]=='N')
X               return NULL;
X
X          /*
X           * Make a .hand file
X           */
X
X          if((fp = fopen(t,"w"))==NULL)
X          {
X               fprintf(stderr, "%s: %s: %s\n", program_name,
X                       sys_errlist[errno], t);
X               return NULL;
X          }
X          fputs("HOST LIST\n",fp);
X          fputs("PSEUDONYM LIST\n",fp);
X          fclose(fp);
X
X          puts("");
X          puts("First, hand must have a list of all the hosts that it is expected");
X          puts("to check.");
X          puts("");
X
X          add_many_hosts(t);
X
X          puts("");
X          puts("Next Hand must have a list of users for which it is to check.");
X          puts("Hand will assume that the first word on a line refers to the");
X          puts("strict username (login name), whereas following words are taken");
X          puts("to be a nickname.");
X          puts("");
X
X          add_many_users(t);
X     }
X     hsort(t);
X     checkhosts(t,0);
X     return (fopen(t,"r"));
X}
X
Xvoid set_defaults(fn)
X     char *fn;
X{
X     char default_file[ML];
X
X     fn[0]='\0';
X
X     /*
X      * default settings for options
X      */
X     option.error=0;
X     option.footer=1;
X     option.fork=MAX_FORKS;
X     option.fxfmt=0;
X     option.header=1;
X     option.host=1;
X     option.idle_max=INT_MAX; /* minutes */
X     option.localhost=1;
X     option.nobeep=0;
X     option.once_only=1;
X     option.timeout=15;       /* seconds */
X     option.timezone=0;
X     option.verbose=0;
X     option.version=0;
X     option.what=0;
X     option.port=DEFAULT_FINGER_PORT;
X     option.incommand[0] = option.outcommand[0]='\0';
X#ifdef NODIST
X     option.log = 1;
X#endif
X     
X     sprintf(default_file, "%s/.hand",home);  /* "~/.hand" */
X     strcpy(fn,default_file);
X     
X     return;
X}
X
X/*
X * gethandopt() reads the (modified by envarg) arguments to hand and adjusts
X * the option structure and data file (a new temporary file if altered) to
X * agree with the options presented.  As of version 1.42, it uses GNU
X * getopt() to simplify the process.
X */
X
Xint gethandopt(argv, fn, tf, usr, usrc)
X     char **argv;
X     char *fn;
X     struct File *tf;
X     char **usr;
X     int *usrc;
X{
X     int c, i, j, nsys=0, negation, was_fork_enabled=0, opt_index=0;
X     int argc;
X     char s[ML], olds[ML], **wsys, **wusr;
X     FILE *dat;
X     char default_file[ML];
X
X     for(argc=0;argv[argc]!=NULL;argc++)
X          ;
X
X     optind=0;
X
X     sprintf(default_file, "%s/.hand",home);  /* "~/.hand" */
X     strcpy(fn,default_file);
X
X     *usrc=0;
X     wsys=(char **)malloc((argc+1)*sizeof(char *));
X     wusr=(char **)malloc((argc+1)*sizeof(char *));
X     *wsys=(char *)malloc(2*ML*argc*sizeof(char));
X
X     *wusr= *wsys+ML*argc*sizeof(char);
X     for(i=1;i<argc;i++)
X     {
X          wsys[i]=wsys[0]+ML*sizeof(char);
X          wusr[i]=wusr[0]+ML*sizeof(char);
X     }
X
X     negation=0;
X     while((c=getopt_long(argc, argv, "CDf:FhHi:LoOnqSt:TuVvwW::",
X                          long_option_array, &opt_index))!=EOF)
X     {
X          switch(c)
X          {
X             case 0:      /* a long option was processed */
X               break;
X             case 1000:        /* --add-host */
X               addhost(argv+optind, fn, 0);
X               return -1;
X             case 2000:        /* --add-user */
X               adduser(argv+optind, fn, 0);
X               return -1;
X             case 3000:        /* --del-host */
X               if(optarg==NULL)
X                    del_many_hosts(fn);
X               else
X                    delhost(optarg, fn, 0);
X               return -1;
X             case 4000:        /* --del-user */
X               if(optarg==NULL)
X                    del_many_users(fn);
X               else
X                    deluser(optarg, fn, 0);
X               return -1;
X             case 5000:        /* --fix */
X               option.fix=1;
X               checkhosts(fn,0);
X               return -1;
X
X             case 1001:        /* --in-command */
X               strcpy(option.incommand,optarg);
X               break;
X             case 1002:        /* --in-command */
X               strcpy(option.outcommand,optarg);
X               break;
X             case 1003:        /* --port */
X               option.port = atoi(optarg);
X               if(option.port==0)
X                    option.port=DEFAULT_FINGER_PORT;
X               break;
X             case 'C':
X               if(!negation)
X               {
X                    copyleft();
X                    return -1; /* not an error, but stop anyway */
X               }
X               negation=0;
X               break;
X             case 'f':
X               if(negation)
X               {
X                    fprintf(stderr, "%s: option -%c is not negatable.\n",
X                            program_name, c);
X                    usage();
X                    return -1;
X               }
X               strcpy(fn,optarg);
X               break;
X             case 'F':
X               if(negation)
X                    option.fork=0;
X               else
X               {
X                    option.fork = MAX_FORKS;
X                    was_fork_enabled=1;
X               }
X               negation=0;
X               break;
X             case 'L':
X               option.fxfmt= !negation;
X               negation=0;
X               break;
X             case 'w':
X               option.what= !negation;
X               negation=0;
X               break;
X#ifndef OS2
X             case 'h':
X               if(negation)
X               {
X                    fprintf(stderr, "%s: option -%c is not negatable.\n",
X                            program_name, c);
X                    usage();
X                    return -1;
X               }
X               strcpy(wsys[nsys++],"-");
X               break;
X#endif
X             case 'H':
X               option.header= !negation;
X               negation=0;
X               break;
X             case 'i':
X               if(negation)
X               {
X                    fprintf(stderr, "%s: option -%c is not negatable.\n",
X                            program_name, c);
X                    usage();
X                    return -1;
X               }
X               option.idle_max=atol(optarg);
X               if(option.idle_max==0)
X                    option.idle_max=INT_MAX;
X               break;
X#if 0
X             case 'l':
X               if(negation)
X               {
X                    fprintf(stderr, "%s: option -%c is not negatable.\n",
X                            program_name, c);
X                    usage();
X                    return -1;
X               }
X               sprintf(fn,"%s/.addresses.dat",home);
X               break;
X#endif
X             case 'o':
X               option.once_only=!negation;
X               negation=0;
X               break;
X             case 'O':
X               option.host=!negation;
X               break;
X             case 'n':
X               negation=1;
X               break;
X             case 'q':
X               option.error= !negation;
X               negation=0;
X               break;
X#if 0
X             case 's':
X               if(negation)
X               {
X                    fprintf(stderr, "%s: option -%c is not negatable.\n",
X                            program_name, c);
X                    usage();
X                    return -1;
X               }
X               sprintf(fn,"%s/.short.dat",home);
X               break;
X#endif
X             case 'S':
X               option.footer= !negation;
X               negation=0;
X               break;
X             case 't':
X               if(negation)
X               {
X                    fprintf(stderr, "%s: option -%c is not negatable.\n",
X                            program_name, c);
X                    usage();
X                    return -1;
X               }
X               option.timeout=atoi(optarg);
X               break;
X             case 'T':
X               option.timezone= !negation;
X               negation=0;
X               break;
X             case 'v':
X               if(negation)
X                    option.verbose=0;
X               else
X                    option.verbose++;
X               negation=0;
X               break;
X             case 'V':
X               option.version= !negation;
X               negation=0;
X               break;
X             case 'W':
X               if(optarg==NULL)
X                    option.watch=5;
X               else
X                    option.watch=atoi(optarg);
X               break;
X             case '?':
X             case 'u':
X               usage();
X               return -1;
X          }
X     } /* end of options */
X
X     /*
X      * Now process usernames and hostnames passed to Hand as arguments.
X      */
X
X     for(i = optind; argv[i]!=NULL;i++)
X     {
X          if(argv[i][0] == '@')
X          {
X               strcpy(wsys[nsys++],argv[i]+1);
X          }
X          else /* not a host name, not a parameter, must be a username */
X          {
X               strcpy(wusr[(*usrc)++],argv[i]);
X          }
X     }
X
X     /*
X      * Check for alphabetization in the data file, unless users are given
X      * (in which case we have to alphabetize them anyway).
X      */
X
X     if(*usrc==0)
X     {
X          if((dat = fopen(fn,"r")) == NULL)
X          {
X               /*
X                * If the file that they're missing is ~/.hand,
X                * notify them that one needs to be created, and help
X                * them to do it---but only if they're on a tty.
X                */
X
X               if(strcmp(fn,default_file)==0 && isatty(0))
X               {
X                    if((dat = query_create(fn))==NULL)
X                         return -1;
X               }
X               else
X               {
X                    printf("hand: cannot read file %s\n",fn);
X                    return -1;
X               }
X          }
X          do {
X               fgets(s,ML,dat);
X          } while(strcmp(s,"PSEUDONYM LIST\n"));
X
X          olds[0]='\0';
X          while(fgetl(s,ML,dat)!=NULL)
X          {
X               if((i=instr(s," ",0))>0)
X                    s[i]='\0';
X               if((i=instr(s,"\t",0))>0)
X                    s[i]='\0';
X               if((i=instr(s,"@",0))>0)
X                    s[i]='\0';
X               if(strcasecmp(olds,s)>0)
X               {
X                    fprintf(stderr,"%s: names are out of order: %s %s\n",fn,
X                            olds,s);
X                    fprintf(stderr,"\tsorting file %s\n",fn);
X                    fclose(dat);
X                    hsort(fn);
X               }
X               strcpy(olds,s);
X          }
X     }
X
X     /*
X      * Now, treat the data file, replacing the host list if a host
X      * is given, the name list if a name is given, or both if applicable.
X      */
X
X     if(!(*usrc && nsys))
X          if((dat = fopen(fn,"r")) == NULL)
X          {
X               fprintf(stderr, "%s: %s: %s\n", program_name, sys_errlist[errno],
X                       fn);
X               return -1;
X          }
X
X     if(option.verbose)
X     {
X          printf("%d user(s), %d host(s) specified.\n",*usrc,nsys);
X     }
X     if(*usrc)
X     {
X          if(*usrc==1 && !was_fork_enabled)
X               option.fork=0;
X          qsort(wusr,*usrc,sizeof(char **),(void *)pcasecmp);
X          if(option.verbose>1)
X          {
X               for(j=0;j< *usrc;j++)
X                    printf("%d \"%s\"\n",mypid,wusr[j]);
X               printf("\n");
X          }
X     }
X     if(*usrc || nsys)
X     {
X          tmpnam(tf->name);
X          tf->fp = fopen(tf->name,"w");
X
X          option.localhost=!nsys;
X          if(nsys)
X          {
X               fprintf(tf->fp,"HOST LIST\n");
X               for(i=0;i<nsys;i++)
X                    fprintf(tf->fp,"%s\n",wsys[i]);
X               fprintf(tf->fp,"PSEUDONYM LIST\n");
X               if(!*usrc)
X               {
X                    do {
X                         fgets(s,ML,dat);
X                    } while(strcmp(s,"PSEUDONYM LIST\n"));
X               }
X          }
X          else
X          {
X               while(fgets(s,ML,dat)!=NULL)
X               {
X                    fprintf(tf->fp,"%s",s);
X                    if(strcmp(s,"PSEUDONYM LIST\n")==0)
X                         break;
X               }
X          }
X          if(*usrc)
X          {
X               for(i=0;i < *usrc;i++)
X               {
X                    fprintf(tf->fp,"%s\n",wusr[i]);
X               }
X               for(i=1;i< *usrc;i++)
X                    free(wusr[i]);
X               *usr = *wusr;         /* keep wusr[0] around for later */
X          }
X          else
X          {
X               while(fgets(s,ML,dat)!=NULL)
X               {
X                    fprintf(tf->fp,"%s",s);
X               }
X          }
X          if(!(nsys && *usrc))
X               fclose(dat);
X          fclose(tf->fp);
X          strcpy(fn,tf->name);
X     }
X     return 0;
X}
END_OF_FILE
if test 20740 -ne `wc -c <'handarg.c'`; then
    echo shar: \"'handarg.c'\" unpacked with wrong size!
fi
# end of 'handarg.c'
fi
if test -f 'handtcp.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'handtcp.c'\"
else
echo shar: Extracting \"'handtcp.c'\" \(12654 characters\)
sed "s/^X//" >'handtcp.c' <<'END_OF_FILE'
X/*
X *
X * H A N D T C P . C   -   Transfer Control / Finger suite for hand.
X *
X */
X
X/*
X *   Copyright (C) 1992 Konrad Schroder.
X *
X *   This program is free software; you can redistribute it and/or modify
X *   it under the terms of the GNU General Public License as published by
X *   the Free Software Foundation; either version 1, or (at your option)
X *   any later version.
X *
X *   This program is distributed in the hope that it will be useful,
X *   but WITHOUT ANY WARRANTY; without even the implied warranty of
X *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X *   GNU General Public License for more details.
X *
X *   You should have received a copy of the GNU General Public License
X *   along with this program; if not, write to the Free Software
X *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X */
X
X#include <errno.h>
X#include <fcntl.h>
X#include <netdb.h>
X#include <sys/types.h>
X#include <netinet/in.h>
X#include <arpa/inet.h>
X#include <setjmp.h>
X#include <stdio.h>
X#include <signal.h>
X#include <sys/signal.h>
X#include <sys/socket.h>
X#include <sys/stat.h>
X#include <time.h>
X#include <utmp.h>
X#include "hand.h"
X#include "handstr.h"
X
X#if STDC_HEADERS || HAVE_STRING_H
X# include <string.h>
X# if !STDC_HEADERS && HAVE_MEMORY_H
X#  include <memory.h>
X# endif
X# define bcopy(s,d,n) memcpy((d),(s),(n))
X# define bcmp(s1,s2,n) memcmp((s1),(s2),(n))
X# define bzero(s,n) memset((s),0,(n))
X#else
X# include <strings.h>
X#endif /* not ( STDC_HEADERS || HAVE_STRING_H ) */
X
X#ifndef S_IWGRP
X# define S_IWGRP 00020
X#endif
X
X#ifndef INADDR_NONE
X# define INADDR_NONE 0xffffffff
X#endif
X
X#if !(__STDC__)
X#define const
X#endif
X
Xextern int mypid, my_timezone;
Xextern char *sys_errlist[], *tmpdir;
Xextern struct Option option;
Xjmp_buf tohere;
X
XRETSIGTYPE alrm(not_used)
X     int not_used;
X{
X     longjmp(tohere,-1);
X     /* NOT REACHED */
X     return;
X}
X
X/*
X * hostname() takes a name as a character string in the form
X *   <canonical name>[:]<nick name>[:]<timezone>
X * and converts it to a pair of strings, one the dotted-decimal form of a
X * hostname, the other the remaining portion of the input string, possibly the
X * entire string if an ascii hostname is given, and a status number indicating
X * whether a decimal form is available.  Status -1 is returned if the argument
X * is not a valid hostname.
X */
X
Xstruct hname hostname(s)
X     char *s;
X{
X     unsigned long inaddr;
X     char *t;
X     char u[ML];
X     struct hname name;
X     struct hostent *hp;
X
X     name.st = -1;
X     name.ascii[0]='\0';
X     name.true[0]='\0';
X     name.dot[0]='\0';
X     name.timezone=0;
X     name.flags[0]='\0';
X
X     if(s[0]=='-')
X     {
X          strcpy(name.ascii,"-");
X          strcpy(name.true,"-");
X          name.timezone=my_timezone;
X          name.st=1;
X          return name;
X     }
X
X     strcpy(u,s);
X     if((t=(char *)strtok(u,": \t\n"))==NULL)
X          return name; /* error */
X     else
X     {
X          strcpy(name.dot,t);
X          strcpy(name.true,t);
X          if((inaddr = inet_addr(name.dot)) == INADDR_NONE)
X          {
X               /*
X                * Not a dotted-decimal name, so fix it
X                * so there *is* a dotted-decimal name there.
X                */
X               if((hp = gethostbyname(name.dot))==NULL)
X               {
X                    if(option.error==0)
X                         fprintf(stderr,"tcp: Address unknown: %s\n",
X                                 name.dot);
X                    return name;
X               }
X               sprintf(name.dot,"%u.%u.%u.%u",((unsigned int)hp->h_addr[0]) &255,
X                       ((unsigned int)hp->h_addr[1])&255,
X                       ((unsigned int)hp->h_addr[2])&255,
X                       ((unsigned int)hp->h_addr[3])&255);
X          }
X          name.st = 0;
X          if((t=(char *)strtok(NULL,":\n"))==NULL)
X          {
X               strcpy(name.ascii,name.true);
X               lowercase(name.ascii);
X               return name;
X          }
X          else
X          {
X               name.st=0;
X               while(strchr(" \t",t[0]))
X                    t++;
X               strcpy(name.true,t);
X               strcpy(name.ascii,t);
X               lowercase(name.ascii);
X               if((t=(char *)strtok(NULL,":\n"))==NULL)
X                    return name;
X               else
X               {
X                    name.timezone=atoi(t);
X                    if((t=(char *)strtok(NULL,":\n"))!=NULL)
X                         strcpy(name.flags,t);
X                    else
X                         return name;
X               }
X          }
X     }
X     return name;
X}
X
X/*
X * findidle() reads the "idle time", i.e. (now - last access), off of the
X * file referenced by the argument.  It is meant to be used on terminals,
X * but it can be used on ordinary files just as well.
X */
X 
Xtime_t findidle(tty_name)
X     char *tty_name;
X{
X     struct stat stbuf;
X     time_t then, dt, now;
X
X     stat(tty_name, &stbuf);
X     time(&now);
X     then = stbuf.st_atime;
X     dt = (time_t)(now-then); /* difftime(now,then) */
X     dt = ((dt+30)/60);       /* in minutes, not seconds */
X     if(dt<0)
X          dt = 0;
X     return dt;
X}
X
X/*
X * is_mesg_on checks for group write access to the given file (assumedly a tty)
X */
X
Xint is_mesg_on(tty)
X     char *tty;
X{
X     struct stat buf;
X
X     stat(tty,&buf);
X     return buf.st_mode & S_IWGRP;
X}
X
Xstatic int sUcasecmp(p1, p2)
X     const void *p1;
X     const void *p2;
X{
X     struct User *q1, *q2;
X
X     q1= *(void **)p1; q2= *(void **)p2;
X     return strcasecmp(q1->name, q2->name);
X}
X
X/*
X * t_finger() does a skeletal finger on the local system, giving only the
X * information that hand will use, namely tty and login time.
X *
X * w_finger() calls w(1) to provide extra information.
X *
X * finger() calls tcp_open() to open a connection to host at port 0x4f, sends
X * "\r\n", and reads the finger information returned by host's finger daemon.
X * if host pauses for more than timeout seconds during transmission, the
X * connection will be closed and further information lost, although any
X * information received up to that time will be remembered.
X *
X * The output from each of these functions is stored in a file whose name
X * is generated by tmpnam() and stored in op->name.
X */
X
X#ifndef OS2
Xstruct User **t_finger()  /* trivial finger */
X{
X     struct utmp ut;
X     struct tm *tym;
X     struct User **user;
X     int i, userc=0;
X     char ttyname[20];
X     char day_of_week[7][4];
X     FILE *ip;
X     char *utmpfile;
X
X     /* first, find the utmpfile */
X
X#ifdef UTMP_FILE
X     utmpfile=UTMP_FILE;
X#else
X     if(access(utmpfile="/etc/utmp",0)==0)
X          ;
X     else if(access(utmpfile="/var/adm/utmp",0)==0)
X          ;
X     else if(access(utmpfile="/var/run/utmp",0)==0)
X          ;
X     else
X     {
X          errout("cannot find the utmp file!","","");
X          return NULL;
X     }
X#endif /* defined UTMP_FILE */
X
X     bcopy("Sun\0Mon\0Tue\0Wed\0Thu\0Fri\0Sat\0",day_of_week,28);
X
X     if((ip = fopen(utmpfile, "r"))==NULL)
X     {
X          errout("t_finger", sys_errlist[errno], utmpfile);
X          return NULL;
X     }
X
X     while((fread(&ut,sizeof(ut),1,ip))>0)
X          userc++;
X     rewind(ip);
X
X     /* get a little extra--people might log in while we're doing this */
X     user=(struct User **)malloc((userc+10)*sizeof(struct User *));
X     for(i=0;i<userc+10;i++)
X     {
X	  user[i]=(struct User *)malloc(sizeof(struct User));
X	  bzero(user[i],sizeof(struct User));
X     }
X
X     userc=0;
X     while((fread(&ut,sizeof(ut),1,ip))>0)
X     {
X          tym = localtime(((time_t *)&(ut.ut_time)));
X#ifdef HAVE_USER_PROCESS
X          if(ut.ut_type==USER_PROCESS)
X#endif
X	       if((ut.ut_name)[0]!='\0')
X	       {
X		    bzero(ttyname, 19);
X		    strcpy(ttyname,"/dev/");
X		    strncat(ttyname,ut.ut_line,(sizeof(ut.ut_line)));
X              sprintf(user[userc]->tty,"%c%s",
X                      is_mesg_on(ttyname)?' ':'*',
X                      ttyname+5);
X		    strncpy(user[userc]->name,ut.ut_name,sizeof(ut.ut_name));
X		    user[userc]->idle=findidle(ttyname);
X		    sprintf(user[userc]->when,"%3.3s %2.2d:%2.2d",
X			    day_of_week[tym->tm_wday],
X			    tym->tm_hour,tym->tm_min);
X		    user[userc]->flags=HF_WHEN|HF_IDLE|HF_TTY;
X		    userc++;
X	       }
X
X          qsort(user, userc, sizeof(struct User *), (void *)sUcasecmp);
X          user[userc]->name[0]='|';
X          user[userc]->name[1]='\0';  /* end the list */
X     }
X     fclose(ip);
X     return user;
X}
X
Xint w_finger(ip, op)
X     struct File *ip;
X     struct File *op;
X{
X     int i,w_u,w_i,w_w;
X     char s[ML];
X
X     tmpnam(ip->name);
X     sprintf(s,"w -s > %s",ip->name);
X     system(s);
X     tmpnam(op->name);
X     if((ip->fp = fopen(ip->name,"r"))==NULL)
X     {
X          errout("w_finger", sys_errlist[errno], ip->name);
X          return -1;
X     }
X     if((op->fp = fopen(op->name,"w"))==NULL)
X     {
X          errout("w_finger", sys_errlist[errno], ip->name);
X          return -1;
X     }
X
X     for(i=0;i<2;i++)
X          fgets(s,ML,ip->fp);
X
X     w_u=incasestr(s,"User",0);
X     w_i=incasestr(s,"idle",w_u);
X     w_w=incasestr(s,"what",w_i); 
X
X     /* The w header must look like "user...idle...what" */
X     if(w_u<0 || w_i<0 || w_w<0)
X     {
X          fprintf(stderr,"w_finger: Unknown w format\n");
X          fclose(ip->fp);
X          fclose(op->fp);
X          unlink(op->name);
X          return(-1);
X     }
X     fprintf(op->fp,"%-10.8s  %-18.18s  %4.4s\n","login","subsys","idle");
X     while(fgets(s,ML,ip->fp)!=NULL)
X     {
X          nonewlines(s);
X          fprintf(op->fp,"%-10.8s  %-18.18s  %4.4s\n",s+w_u,s+w_w,s+w_i);
X     }
X     fclose(ip->fp);
X     unlink(ip->name);
X     fclose(op->fp);
X     return 0;
X}
X#endif /* not OS2 */
X
X/*
X * tcp_open(host,port,timeout) returns a descriptor to a socket connected to
X * an open tcp connection to host at tcp port port.  If an error occurs or
X * host does not respond within timeout seconds, tcp_open returns -1.
X */
X
Xint tcp_open(host, port, timeout)
X     struct hname host;
X     int port;
X     int timeout;
X{
X     int fd, cn=0;
X     unsigned long inaddr;
X     struct hostent host_info,*hp;
X     struct sockaddr_in serv_addr;
X
X     if(host.dot[0]=='\0')
X          strcpy(host.dot,"-----");
X     bzero((char *) &serv_addr, sizeof(serv_addr));
X     serv_addr.sin_family = AF_INET;
X     serv_addr.sin_port = htons(port);
X     if((inaddr = inet_addr(host.dot)) != INADDR_NONE)
X     {
X          bcopy((char *) &inaddr, (char *) &serv_addr.sin_addr,
X          sizeof(inaddr));
X          host_info.h_name = NULL;
X     }
X     else
X     {
X          if((hp = gethostbyname(host.ascii))==NULL)
X          {
X               if(option.error==0)
X                    fprintf(stderr,"tcp: Address unknown: %s\n", host.ascii);
X               return -1;
X          }
X          host_info = *hp;
X          sprintf(host.dot,"%u.%u.%u.%u",abs((int)hp->h_addr[0]),
X            abs((int)hp->h_addr[1]),
X            abs((int)hp->h_addr[2]),
X            abs((int)hp->h_addr[3]));
X          bcopy(hp->h_addr, (char *)&serv_addr.sin_addr,hp->h_length);
X     }
X     if((fd = socket(AF_INET, SOCK_STREAM, 0)) <0)
X     {
X          errout("tcp","can't create socket",sys_errlist[errno]);
X          return -1;
X     }
X     if(setjmp(tohere))
X     {
X          if(option.error==0)
X               fprintf(stderr,"tcp: %s: %s\n",sys_errlist[ETIMEDOUT],
X                                                         host.ascii);
X          return -1;
X     }
X     signal(SIGALRM, alrm);
X     alarm(timeout);
X     cn = connect(fd,(struct sockaddr *) &serv_addr, sizeof(serv_addr));
X     alarm(0);
X     if(cn<0)
X     {
X          if(option.error==0)
X               fprintf(stderr, "tcp: %s: %s (%s)\n",
X                          sys_errlist[errno], host.ascii, host.dot);
X          close(fd);
X          return -1;
X     }
X     return fd;
X}
X
Xint finger(host, timeout, op)
X     struct hname host;
X     int timeout;
X     struct File *op;
X{
X     int fd,i;
X     char *CR="\r\n", buf[1024];
X
X     tmpnam(op->name);
X     if((op->fp = fopen(op->name,"w"))==NULL)
X     {
X          errout("finger",sys_errlist[errno],op->name);
X          return -1;
X     }
X     if((fd = tcp_open(host,option.port,timeout))<0)
X     {
X          fclose(op->fp);
X          return fd;
X     }
X     write(fd,CR,3);
X     if(setjmp(tohere))
X     {
X          if(option.error==0)
X               fprintf(stderr,"finger: %s: timed out on read\n",host.ascii);
X          goto exit_loop;
X     }
X     signal(SIGALRM, alrm);
X     alarm(timeout);
X     while((i=read(fd,buf,1024))>0)
X     {
X          fwrite(buf,sizeof(char),i,op->fp);
X          alarm(timeout);
X     }
X   exit_loop:
X     fputc('\n', op->fp);
X     alarm(0);
X     close(fd);
X     fclose(op->fp);
X     return 0;
X}
END_OF_FILE
if test 12654 -ne `wc -c <'handtcp.c'`; then
    echo shar: \"'handtcp.c'\" unpacked with wrong size!
fi
# end of 'handtcp.c'
fi
echo shar: End of archive 2 \(of 3\).
cp /dev/null ark2isdone
MISSING=""
for I in 1 2 3 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 3 archives.
    rm -f ark[1-9]isdone
else
    echo You still need to unpack the following archives:
    echo "        " ${MISSING}
fi
##  End of shell archive.
exit 0
