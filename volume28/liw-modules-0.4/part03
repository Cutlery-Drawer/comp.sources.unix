Newsgroups: comp.sources.unix
From: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Subject: v28i190: liw-modules-0.4 - the LIW module set (for use with Publib), Part03/14
References: <1.785201893.15507@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Posting-Number: Volume 28, Issue 190
Archive-Name: liw-modules-0.4/part03

#!/bin/sh
# This is part 03 of a multipart archive.
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
# ============= liw-modules-0.4/cmp/cmp.c ==============
if test ! -d 'liw-modules-0.4'; then
  echo 'x - creating directory liw-modules-0.4'
  mkdir 'liw-modules-0.4'
fi
if test ! -d 'liw-modules-0.4/cmp'; then
  echo 'x - creating directory liw-modules-0.4/cmp'
  mkdir 'liw-modules-0.4/cmp'
fi
if test -f 'liw-modules-0.4/cmp/cmp.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/cmp/cmp.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/cmp/cmp.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/cmp/cmp.c' &&
/*
X * cmp.c -- comparison function for qsort, bsearch, and others
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-cmp:cmp.c,v 1.1.1.1 1993/11/20 17:01:45 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
X
#include "publib/cmp.h"
X
static size_t offset = 0;
static int (*member_cmp)(const void *, const void *) = NULL;
X
void cmp_set_offset(size_t off, int (*cmp)(const void *, const void *)) {
X	assert(cmp != cmp_struct);
X	offset = off;
X	member_cmp = cmp;
}
X
int cmp_struct(const void *e1, const void *e2) {
X	const char *p1 = e1;
X	const char *p2 = e2;
X	assert(member_cmp != NULL);
X	return member_cmp(p1 + offset, p2 + offset);
}
X
#define CAT(a,b)	a##b
X
#define SIMPLE_CMP(name, type)					\
X	int CAT(cmp_,name) (const void *e1, const void *e2) {	\
X		type p1 = *(const type *)e1;			\
X		type p2 = *(const type *)e2;			\
X		if (p1 < p2)					\
X			return -1;				\
X		if (p1 == p2)					\
X			return 0;				\
X		return 1;					\
X	}
X
X
SIMPLE_CMP(char,	char)
SIMPLE_CMP(short,	short)
SIMPLE_CMP(int,		int)
SIMPLE_CMP(long,	long)
X
SIMPLE_CMP(schar,	signed char)
X
SIMPLE_CMP(uchar,	unsigned char)
SIMPLE_CMP(ushort,	unsigned short)
SIMPLE_CMP(uint,	unsigned int)
SIMPLE_CMP(ulong,	unsigned long)
X
SIMPLE_CMP(float,	float)
SIMPLE_CMP(double,	double)
SIMPLE_CMP(ldouble,	long double)
X
X
int cmp_charptr(const void *e1, const void *e2) {
X	return strcmp(*(const char **)e1, *(const char **)e2);
}
X
X
int cmp_chararr(const void *e1, const void *e2) {
X	return strcmp((const char *)e1, (const char *)e2);
}
SHAR_EOF
  $shar_touch -am 1120190193 'liw-modules-0.4/cmp/cmp.c' &&
  chmod 0600 'liw-modules-0.4/cmp/cmp.c' ||
  echo 'restore of liw-modules-0.4/cmp/cmp.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/cmp/cmp.c'`"
  test 1506 -eq "$shar_count" ||
    echo "liw-modules-0.4/cmp/cmp.c: original size 1506, current size $shar_count"
fi
# ============= liw-modules-0.4/cmp/cmp.h ==============
if test -f 'liw-modules-0.4/cmp/cmp.h' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/cmp/cmp.h (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/cmp/cmp.h (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/cmp/cmp.h' &&
/*
X * cmp.h -- comparison functions for qsort, bsearch, et al.
X *
X * Part of publib.
X * "@(#)publib-cmp:cmp.h,v 1.1.1.1 1993/11/20 17:01:45 liw Exp"
X */
X
#ifndef __publib_cmp_h
#define __publib_cmp_h
X
#include <stddef.h>	/* size_t */
X
void cmp_set_offset(size_t __offset, int (*)(const void *, const void *));
int cmp_struct(const void *, const void *);
X
int cmp_char(const void *, const void *);
int cmp_short(const void *, const void *);
int cmp_int(const void *, const void *);
int cmp_long(const void *, const void *);
X
int cmp_schar(const void *, const void *);
X
int cmp_uchar(const void *, const void *);
int cmp_ushort(const void *, const void *);
int cmp_uint(const void *, const void *);
int cmp_ulong(const void *, const void *);
X
int cmp_float(const void *, const void *);
int cmp_double(const void *, const void *);
int cmp_ldouble(const void *, const void *);
X
int cmp_charptr(const void *, const void *);
int cmp_chararr(const void *, const void *);
X
#endif
SHAR_EOF
  $shar_touch -am 1120190193 'liw-modules-0.4/cmp/cmp.h' &&
  chmod 0600 'liw-modules-0.4/cmp/cmp.h' ||
  echo 'restore of liw-modules-0.4/cmp/cmp.h failed'
  shar_count="`wc -c < 'liw-modules-0.4/cmp/cmp.h'`"
  test 972 -eq "$shar_count" ||
    echo "liw-modules-0.4/cmp/cmp.h: original size 972, current size $shar_count"
fi
# ============= liw-modules-0.4/expr/Makefile ==============
if test ! -d 'liw-modules-0.4/expr'; then
  echo 'x - creating directory liw-modules-0.4/expr'
  mkdir 'liw-modules-0.4/expr'
fi
if test -f 'liw-modules-0.4/expr/Makefile' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/expr/Makefile (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/expr/Makefile (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/expr/Makefile' &&
objs = expr_compile.o expr_eval.o expr_free.o expr_run.o
testprogs = test_expr
include $(srcdir)/Generic.mk
X
test_expr: test_expr.o $(libname)
X	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ test_expr.o $(libname) -lm
test_expr.o: expr.h 
$(objs): expr.h 
SHAR_EOF
  $shar_touch -am 1120175793 'liw-modules-0.4/expr/Makefile' &&
  chmod 0600 'liw-modules-0.4/expr/Makefile' ||
  echo 'restore of liw-modules-0.4/expr/Makefile failed'
  shar_count="`wc -c < 'liw-modules-0.4/expr/Makefile'`"
  test 242 -eq "$shar_count" ||
    echo "liw-modules-0.4/expr/Makefile: original size 242, current size $shar_count"
fi
# ============= liw-modules-0.4/expr/README ==============
if test -f 'liw-modules-0.4/expr/README' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/expr/README (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/expr/README (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/expr/README' &&
README for Publib module expr
Lars Wirzenius
"@(#)publib-expr:README,v 1.1 1994/08/28 17:16:23 liw Exp"
X
These routines evaluate mathematical expressions given as strings.
X
----------------------
X
Copyright (c) 1994 Lars Wirzenius.  All rights reserved.
X
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
X
1. Redistributions of source code must retain the above copyright
X   notice, this list of conditions and the following disclaimer.
X
2. Redistributions in binary form must reproduce the above copyright
X   notice, this list of conditions and the following disclaimer in the
X   documentation and/or other materials provided with the distribution.
X
THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
SHAR_EOF
  $shar_touch -am 0828201694 'liw-modules-0.4/expr/README' &&
  chmod 0600 'liw-modules-0.4/expr/README' ||
  echo 'restore of liw-modules-0.4/expr/README failed'
  shar_count="`wc -c < 'liw-modules-0.4/expr/README'`"
  test 1449 -eq "$shar_count" ||
    echo "liw-modules-0.4/expr/README: original size 1449, current size $shar_count"
fi
# ============= liw-modules-0.4/expr/expr.3 ==============
if test -f 'liw-modules-0.4/expr/expr.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/expr/expr.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/expr/expr.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/expr/expr.3' &&
X.\" part of publib
X.\" "@(#)publib-expr:expr.3,v 1.2 1994/02/03 17:33:55 liw Exp"
X.\"
X.TH EXPR 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
expr_eval, expr_compile, expr_run, expr_free \- evaluate arithmetic
expressions
X.SH SYNOPSIS
#include <expr.h>
X.sp 1
X.nf
int \fBexpr_eval\fR(const char *\fIexpr\fR, double *\fIres\fR, expr_hook *\fIhook\fR);
Expr *\fBexpr_compile\fR(const char *\fIsource\fR);
int \fBexpr_run\fR(Expr *\fIcompiled\fR, double *\fIres\fR, expr_hook *\fIhook\fR);
void \fBexpr_free\fR(Expr *\fIcompiled\fR);
X.fi
X.SH "DESCRIPTION"
These functions evaluate arithmetic expressions given as a string.
All values used in the expression (constants, any symbols, functions
and variables provided by the hook function, and the result of the
expression) are floating point values of type double.
X.PP
An expression may contain operators + (add or sign), - (subtract or
sign), * (multiply), / (divide), and % (remainder), may use
parentheses for grouping, may express constants using C floating point
and integer syntax, and may use symbols (variables, constants, or
whatever; the meaning is determined by a hook function) and functions
(i.e., a symbol followed by an argument list in parentheses).  The
expression may also be an assignment, which gives a new value to a
symbol (if the hook function allows it).
X.PP
The exact syntax of the expression using BNF is:
X.sp 1
X.nf
X.in +5
\fB
assignment = symbol '=' expr 
X.ti +5
X     | expr.
expr = term '+' expr
X.ti +5
X     | term '-' expr
X.ti +5
X     | term.
term = factor '*' term
X.ti +5
X     | factor '/' term
X.ti +5
X     | factor '%' term
X.ti +5
X     | factor.
factor = simple_expr
X.ti +5
X     | '-' simple_expr.
X.ti +5
X     | '+' simple_expr.
simple_expr = constant 
X.ti +5
X     | symbol 
X.ti +5
X     | symbol '(' arglist ')' 
X.ti +5
X     | '(' expr ')'.
arglist = expr | expr ',' arglist.
constant = integer or float, C syntax.
symbol = C identifier.
\fR
X.in -5
X.fi
X.PP
The \fIexpr_compile\fR function will parse a string representation for
an expression, and will `compile' it into a form that is more
efficient to execute.  The \fIexpr_run\fR function will execute the
compiled form of the expression, and returns the value of the
expression.  The \fIexpr_free\fR function will free all resources
allocated for the compiled form.  Use it after the last time you need
to evaluate the expression.  The \fIexpr_eval\fR function will do all
three operations mentioned above.  It is more convenient to use when
you only need to evaluate an expression once.
X.PP
The \fIexpr_run\fR and \fIexpr_eval\fR functions take as their last
argument a `hook', or a pointer to a function that will be used to get
the value of a symbol.  The hook should report an error by returning
-1, and success by returning 0.  The syntax allows symbols to be given
an argument list (in parentheses), and the hook is supposed to be
prepared to handle those cases as well, interpreting the symbol as a
function and the argument list as its arguments.  (The hook may report
an error, if a non-function symbol is used as a function, or vice
versa, or if the argument list is of the wrong length.)  The hook may
give any semantics is wishes to the symbol, neither the expression
syntax nor the evaluation code assumes anything.  Useful symbols might
be trigonometric functions, a random number generator, or the time of
the day.
X.PP
Assignments are also handled via the hook.  If the second argument to
the hook is -1, the hook is supposed to modify the value of the
symbol.  Again, it may give any semantics it wishes (i.e., it needn't
actually modify it, or it might store a different value, or it might
output something, or do something totally different), and may report
errors by returning -1.
X.SH EXAMPLES
The following function implements a variable, "doug", and a function,
"sum".
X.sp 1
X.nf
int hook(const char *sym, int nargs, double *args, double *val) {
X	if (strcmp(sym, "doug") == 0) {
X		if (nargs != 0)
X			return -1;
X		*val = 42.0;
X	} else if (strcmp(sym, "sum") == 0) {
X		if (nargs != 2)
X			return -1;
X		*val = args[0] + args[1];
X	}
X	return 0;
}
X.fi
X.SH "SEE ALSO"
publib(3)
X.PP
Literature about symbol tables or hash tables might come in handy when
implementing hooks.
X.SH BUGS
Only having one data type is restricting.  At least truth values (and
operators), string expressions, and integers would be nice, if they
can be folded in nicely, without making the syntax and implementation
of the function overly baroque.  On the other hand, simplicity has its
virtue, and the current syntax is powerful enough for most things that
the author can imagine the system being used for.
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203193394 'liw-modules-0.4/expr/expr.3' &&
  chmod 0600 'liw-modules-0.4/expr/expr.3' ||
  echo 'restore of liw-modules-0.4/expr/expr.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/expr/expr.3'`"
  test 4696 -eq "$shar_count" ||
    echo "liw-modules-0.4/expr/expr.3: original size 4696, current size $shar_count"
fi
# ============= liw-modules-0.4/expr/expr.h ==============
if test -f 'liw-modules-0.4/expr/expr.h' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/expr/expr.h (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/expr/expr.h (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/expr/expr.h' &&
#ifndef __publib_expr_h
#define __publib_expr_h
X
enum expr_opcode {
X	op_add, op_sub, op_mul, op_div, op_rem, op_num, op_sym,	op_fun,
X	op_ass,
X
X	/* the rest are not real operands, but rather tokens (used during
X	   parsing; they mustn't be in the executing expression)  */
X	op_left, op_right, op_comma
};
X 
struct expr_instr {
X	enum expr_opcode op;
X	union {
X		double num;
X		char *sym;
X		struct {
X			int nargs;
X			char *name;
X		} fun;
X	} val;
};
X
struct expr_code {
X	struct expr_instr *prg;
X	size_t size, allocated;
};
typedef struct expr_code Expr;
X
typedef int expr_hook(const char *, int __n, double *__args, double *__val);
X
int expr_eval(const char *__expr, double *__res, expr_hook *__hook);
Expr *expr_compile(const char *__source);
int expr_run(Expr *__compiled, double *__res, expr_hook *__hook);
void expr_free(Expr *);
X
#endif
SHAR_EOF
  $shar_touch -am 1120175793 'liw-modules-0.4/expr/expr.h' &&
  chmod 0600 'liw-modules-0.4/expr/expr.h' ||
  echo 'restore of liw-modules-0.4/expr/expr.h failed'
  shar_count="`wc -c < 'liw-modules-0.4/expr/expr.h'`"
  test 836 -eq "$shar_count" ||
    echo "liw-modules-0.4/expr/expr.h: original size 836, current size $shar_count"
fi
# ============= liw-modules-0.4/expr/expr_compile.c ==============
if test -f 'liw-modules-0.4/expr/expr_compile.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/expr/expr_compile.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/expr/expr_compile.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/expr/expr_compile.c' &&
/*
X * expr_compile.c -- compile expression given in string form
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-expr:expr_compile.c,v 1.1.1.1 1993/11/20 15:57:29 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <errno.h>
#include "publib/expr.h"
#include "publib/errormsg.h"
X
X
#define UNGOT_MAX	8
static struct expr_instr ungot_tokens[UNGOT_MAX];
static int ungot_count = 0;
X
X
static int get_token(const char **s, struct expr_instr *in);
static void unget_token(struct expr_instr *in);
static int assignment(const char **s, Expr *e);
static int expr(const char **s, Expr *e);
static int factor(const char **s, Expr *e);
static int term(const char **s, Expr *e);
static int simple_expr(const char **s, Expr *e);
static int arg_list(struct expr_instr *syminstr, const char **s, Expr *e);
static int push(Expr *e, struct expr_instr *);
X
X
X
Expr *expr_compile(const char *string) {
X	Expr *e;
X
X	e = (Expr *) malloc(sizeof(Expr));
X	if (e == NULL) {
X		__publib_error("malloc failed");
X		return NULL;
X	}
X
X	e->prg = NULL;
X	e->size = 0;
X	e->allocated = 0;
X	if (assignment(&string, e) == -1) {
X		expr_free(e);
X		return NULL;
X	}
X	if (*string != '\0') {
X		__publib_error("syntax error: "
X			       "expression continues unexpectedly");
X		expr_free(e);
X		return NULL;
X	}
X	return e;
}
X
static int assignment(const char **s, Expr *e) {
X	struct expr_instr in, in2;
X
X	if (get_token(s, &in) == -1)
X		return -1;
X	if (in.op != op_sym || get_token(s, &in2) == -1) {
X		unget_token(&in);
X		return expr(s, e);
X	}
X
X	if (in2.op != op_ass) {
X		unget_token(&in2);
X		unget_token(&in);
X		return expr(s, e);
X	}
X
X	in2.val.sym = in.val.sym;
X	if (expr(s, e) == -1 || push(e, &in2) == -1)
X		return -1;
X	return 0;
}
X
X
static int expr(const char **s, Expr *e) {
X	struct expr_instr in;
X
X	if (term(s, e) == -1)
X		return -1;
X	while (get_token(s, &in) != -1) {
X		if (in.op != op_add && in.op != op_sub) {
X			unget_token(&in);
X			return 0;
X		}
X		if (term(s, e) == -1 || push(e, &in) == -1)
X			return -1;
X	}
X	return 0;
}
X
X
static int term(const char **s, Expr *e) {
X	struct expr_instr in;
X
X	if (factor(s, e) == -1)
X		return -1;
X	while (get_token(s, &in) != -1) {
X		if (in.op != op_mul && in.op != op_div && in.op != op_rem) {
X			unget_token(&in);
X			return 0;
X		}
X		if (factor(s, e) == -1 || push(e, &in) == -1)
X			return -1;
X	}
X	return 0;
}
X
X
static int factor(const char **s, Expr *e) {
X	struct expr_instr in;
X
X	if (get_token(s, &in) == -1)
X		return -1;
X	if (in.op == op_sub || in.op == op_add) {
X		if (get_token(s, &in) == -1)
X			return -1;
X		if (in.op != op_num) {
X			__publib_error("syntax error: "
X				       "unary + or - not followed by number");
X			return -1;
X		}
X		in.op = op_num;
X		if (in.op == op_sub)
X			in.val.num = -in.val.num;
X		else
X			in.val.num = in.val.num;
X		return 0;
X	}
X
X	unget_token(&in);
X	return simple_expr(s, e);
}
X
X
static int simple_expr(const char **s, Expr *e) {
X	struct expr_instr in;
X
X	if (get_token(s, &in) == -1)
X		return -1;
X
X	switch (in.op) {
X	case op_num:
X		if (push(e, &in) == -1)
X			return -1;
X		return 0;
X		
X	case op_left:
X		if (expr(s, e) == -1)
X			return -1;
X		if (get_token(s, &in) == -1)
X			return -1;
X		if (in.op != op_right) {
X			__publib_error("syntax error: unbalanced (");
X			return -1;
X		}
X		return 0;
X
X	case op_sym:
X		if (arg_list(&in, s, e) == -1)
X			return -1;
X		if (push(e, &in) == -1)
X			return -1;
X		return 0;
X
X	default:
X		__publib_error("syntax error: unexpected token");
X		return -1;
X	}
}
X
X
static int arg_list(struct expr_instr *syminstr, const char **s, Expr *e) {
X	struct expr_instr in;
X
X	if (get_token(s, &in) == -1)
X		return 0;
X
X	if (in.op != op_left) {
X		unget_token(&in);
X		return 0;
X	}
X
X	syminstr->op = op_fun;
X	syminstr->val.fun.name = syminstr->val.sym;
X	syminstr->val.fun.nargs = 0;
X
X	do {
X		if (expr(s, e) == -1)
X			return -1;
X		if (get_token(s, &in) == -1)
X			return -1;
X		if (in.op != op_right && in.op != op_comma) {
X			__publib_error("syntax error: expression not "
X				 "followed by , or ) in argument list");
X			return -1;
X		}
X		++syminstr->val.fun.nargs;
X	} while (in.op == op_comma);
X
X	return 0;
}
X
X
static void unget_token(struct expr_instr *in) {
X	ungot_tokens[ungot_count] = *in;
X	if (ungot_count < UNGOT_MAX)
X		++ungot_count;
}
X
X
static int get_token(const char **s, struct expr_instr *in) {
X	int off = 1;
X
X	if (ungot_count > 0) {
X		--ungot_count;
X		*in = ungot_tokens[ungot_count];
X		return 0;
X	}
X
X	while (isspace(**s))
X		++(*s);
X
X	switch (**s) {
X	case '+':
X		in->op = op_add;
X		break;
X
X	case '-':
X		in->op = op_sub;
X		break;
X
X	case '*':
X		in->op = op_mul;
X		break;
X
X	case '/':
X		in->op = op_div;
X		break;
X
X	case '%':
X		in->op = op_rem;
X		break;
X
X	case '(':
X		in->op = op_left;
X		break;
X
X	case ')':
X		in->op = op_right;
X		break;
X
X	case ',':
X		in->op = op_comma;
X		break;
X
X	case '=':
X		in->op = op_ass;
X		break;
X
X	case '\0':
X		return -1;
X
X	default:
X		if (isalpha(**s) || **s == '_') {
X			char *sym;
X			const char *p = *s;
X			size_t len;
X			while (isalnum(**s) || **s == '_')
X				++(*s);
X			len = *s - p + 1;
X			sym = (char *) malloc(len);
X			if (sym == NULL) {
X				__publib_error("malloc failed");
X				return -1;
X			}
X			memcpy(sym, p, len-1);
X			sym[len-1] = '\0';
X			in->op = op_sym;
X			in->val.sym = sym;
X			off = 0;
X			break;
X		}
X
X		if (!isdigit(**s)) {
X			__publib_error("syntax error: unexpected character");
X			return -1;
X		}
X
X		in->op = op_num;
X		in->val.num = strtod(*s, (char **)s);
X		off = 0;
X		break;
X	}
X
X	*s += off;
X	return 0;
}
X
X
static int push(Expr *e, struct expr_instr *in) {
X	struct expr_instr *p;
X	size_t n;
X
X	if (e->size >= e->allocated) {
X		n = e->allocated + 64;
X		if (e->prg == NULL)
X			p = (struct expr_instr *)malloc(n*sizeof(*p));
X		else
X			p = (struct expr_instr *)realloc(e->prg, n*sizeof(*p));
X		if (p == NULL) {
X			__publib_error("realloc failed");
X			return -1;
X		}
X		e->allocated = n;
X		e->prg = p;
X	}
X	e->prg[e->size] = *in;
X	++e->size;
X	return 0;
}
SHAR_EOF
  $shar_touch -am 1120175793 'liw-modules-0.4/expr/expr_compile.c' &&
  chmod 0600 'liw-modules-0.4/expr/expr_compile.c' ||
  echo 'restore of liw-modules-0.4/expr/expr_compile.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/expr/expr_compile.c'`"
  test 5899 -eq "$shar_count" ||
    echo "liw-modules-0.4/expr/expr_compile.c: original size 5899, current size $shar_count"
fi
# ============= liw-modules-0.4/expr/expr_eval.c ==============
if test -f 'liw-modules-0.4/expr/expr_eval.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/expr/expr_eval.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/expr/expr_eval.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/expr/expr_eval.c' &&
/*
X * expr_eval.c -- evaluate expression given in string form
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-expr:expr_eval.c,v 1.1.1.1 1993/11/20 15:57:29 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/expr.h"
X
int expr_eval(const char *string, double *res, expr_hook *hook) {
X	Expr *e;
X	int ret;
X
X	e = expr_compile(string);
X	if (e == NULL)
X		return -1;
X	ret = expr_run(e, res, hook);
X	expr_free(e);
X	return ret;
}
SHAR_EOF
  $shar_touch -am 1120175793 'liw-modules-0.4/expr/expr_eval.c' &&
  chmod 0600 'liw-modules-0.4/expr/expr_eval.c' ||
  echo 'restore of liw-modules-0.4/expr/expr_eval.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/expr/expr_eval.c'`"
  test 465 -eq "$shar_count" ||
    echo "liw-modules-0.4/expr/expr_eval.c: original size 465, current size $shar_count"
fi
# ============= liw-modules-0.4/expr/expr_free.c ==============
if test -f 'liw-modules-0.4/expr/expr_free.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/expr/expr_free.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/expr/expr_free.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/expr/expr_free.c' &&
/*
X * expr_free.c -- free resources allocated for compiled expression
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-expr:expr_free.c,v 1.1.1.1 1993/11/20 15:57:29 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include "publib/expr.h"
X
void expr_free(Expr *e) {
X	size_t i;
X
X	for (i = 0; i < e->size; ++i) {
X		switch (e->prg[i].op) {
X		case op_sym:
X			free(e->prg[i].val.sym);
X			break;
X		case op_fun:
X			free(e->prg[i].val.fun.name);
X			break;
X		default:
X			/* ignored */
X			break;
X		}
X	}
X	free(e->prg);
X	free(e);
}
SHAR_EOF
  $shar_touch -am 1120175793 'liw-modules-0.4/expr/expr_free.c' &&
  chmod 0600 'liw-modules-0.4/expr/expr_free.c' ||
  echo 'restore of liw-modules-0.4/expr/expr_free.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/expr/expr_free.c'`"
  test 549 -eq "$shar_count" ||
    echo "liw-modules-0.4/expr/expr_free.c: original size 549, current size $shar_count"
fi
# ============= liw-modules-0.4/expr/expr_run.c ==============
if test -f 'liw-modules-0.4/expr/expr_run.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/expr/expr_run.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/expr/expr_run.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/expr/expr_run.c' &&
/*
X * expr_run.c -- run a compiled expression
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-expr:expr_run.c,v 1.1.1.1 1993/11/20 15:57:29 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include "publib/expr.h"
#include "publib/errormsg.h"
X
static int grow(size_t, double **stack, size_t *stsize);
X
int expr_run(Expr *e, double *res, expr_hook *hook) {
X	int pc;
X	double *stack, result;
X	size_t top, stsize;
X	struct expr_instr *in;
X
X	stack = NULL;
X	stsize = top = 0;
X	for (pc = 0; pc < e->size; ++pc) {
X		in = &e->prg[pc];
X		switch (in->op) {
X		case op_ass:
X			assert(top > 0);
X			if (hook(in->val.sym, -1, 0, stack+top-1) == -1) {
X				__publib_error("hook failed");
X				return -1;
X			}
X			break;
X
X		case op_add:
X			stack[top-2] += stack[top-1];
X			--top;
X			break;
X
X		case op_sub:
X			stack[top-2] -= stack[top-1];
X			--top;
X			break;
X
X		case op_mul:
X			stack[top-2] *= stack[top-1];
X			--top;
X			break;
X
X		case op_div:
X			stack[top-2] /= stack[top-1];
X			--top;
X			break;
X
X		case op_rem:
X			stack[top-2] = fmod(stack[top-2], stack[top-1]);
X			--top;
X			break;
X
X		case op_num:
X			if (top >= stsize && grow(64, &stack, &stsize) == -1)
X				return -1;
X			stack[top] = in->val.num;
X			++top;
X			break;
X
X		case op_sym:
X			if (grow(1, &stack, &stsize) == -1)
X				return -1;
X			if (hook(in->val.sym, 0, 0, stack+top) == -1) {
X				__publib_error("hook failed");
X				return -1;
X			}
X			++top;
X			break;
X
X		case op_fun:
X			if (grow(1, &stack, &stsize) == -1)
X				return -1;
X			if (hook(in->val.fun.name, in->val.fun.nargs,
X				 stack+top-in->val.fun.nargs, &result)==-1) {
X				__publib_error("hook failed");
X				return -1;
X			}
X			top -= in->val.fun.nargs;
X			stack[top] = result;
X			++top;
X			break;
X
X		default:
X			__publib_error("invalid stack code");
X			return -1;
X		}
X	}
X
X	assert(top == 1);
X	*res = stack[0];
X	return 0;
}
X
X
X
static int grow(size_t inc, double **stack, size_t *size) {
X	size_t newsize;
X	double *st;
X
X	newsize = *size + inc;
X	if (*stack == NULL)
X		st = (double *) malloc(newsize * sizeof(double));
X	else
X		st = (double *) realloc(*stack, newsize * sizeof(double));
X	if (st == NULL) {
X		free(*stack);
X		__publib_error("realloc failed");
X		return -1;
X	}
X
X	*size = newsize;
X	*stack = st;
X
X	return 0;
}
SHAR_EOF
  $shar_touch -am 1120175793 'liw-modules-0.4/expr/expr_run.c' &&
  chmod 0600 'liw-modules-0.4/expr/expr_run.c' ||
  echo 'restore of liw-modules-0.4/expr/expr_run.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/expr/expr_run.c'`"
  test 2277 -eq "$shar_count" ||
    echo "liw-modules-0.4/expr/expr_run.c: original size 2277, current size $shar_count"
fi
# ============= liw-modules-0.4/expr/test_expr.c ==============
if test -f 'liw-modules-0.4/expr/test_expr.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/expr/test_expr.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/expr/test_expr.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/expr/test_expr.c' &&
/*
X * test_expr.c -- test the expression parser and evaluator
X *
X * This program reads expressions from the standard input, one per line, and
X * prints the result to the standard output.  It defines the variables "pi",
X * "e", and "da", and the functions "sin", "cos", "ln", and "sqrt".
X *
X * This program is part of publib.
X * "@(#)publib-expr:test_expr.c,v 1.1.1.1 1993/11/20 15:57:29 liw Exp"
X */
X
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "publib/expr.h"
#include "publib/errormsg.h"
X
static int hook(const char *sym, int nargs, double *args, double *val);
X
int main(void) {
X	char line[256];
X	int i, errors;
X	double result;
X
X	set_progname(NULL, "test_expr");
X
X	errors = 0;
X	while (fgets(line, sizeof(line), stdin) != NULL) {
X		i = expr_eval(line, &result, hook);
X		if (i == -1) {
X			errormsg(0, 0, "could not evaluate expression\n");
X			++errors;
X		} else
X			printf("%g\n", result);
X	}
X	return errors ? 1 : 0;
}
X
X
static double foo(double f1, double f2) {
X	return f1+f2;
}
X
X
static int hook(const char *sym, int nargs, double *args, double *val) {
X	static struct {
X		const char *name;
X		double val;
X	} vars[] = {
X		"e",	M_E,
X		"pi",	M_PI,
X		"da",	42.0,
X		"x",	0,
X		NULL,
X	};
X	static const struct {
X		const char *name;
X		int nargs;
X		double (*fun)();	/* no args! */
X	} funs[] = {
X		"sin",	1,	sin,
X		"cos",	1,	cos,
X		"sqrt",	1,	sqrt,
X		"foo",	2,	foo,
X		NULL,
X	};
X	int i;
X
X	for (i = 0; vars[i].name != NULL; ++i) {
X		if (strcmp(sym, vars[i].name) == 0) {
X			if (nargs == -1)
X				vars[i].val = *val;
X			else if (nargs == 0)
X				*val = vars[i].val;
X			else {
X				errormsg(0, 0, "invalid number of arguments "
X					 "for %s, should be -1 or 0, is %d",
X					 sym, nargs);
X				return -1;
X			}
X			return 0;
X		}
X	}
X
X	for (i = 0; funs[i].name != NULL; ++i) {
X		if (strcmp(sym, funs[i].name) == 0) {
X			if (nargs != funs[i].nargs) {
X				errormsg(0, 0, "invalid number of arguments "
X					 "for %s, should be %d, is %d",
X					 sym, funs[i].nargs, nargs);
X				return -1;
X			}
X			switch (nargs) {
X			case 0:
X				*val = funs[i].fun();
X				break;
X			case 1:
X				*val = funs[i].fun(args[0]);
X				break;
X			case 2:
X				*val = funs[i].fun(args[0], args[1]);
X				break;
X			case 3:
X				*val = funs[i].fun(args[0], args[1], args[3]);
X				break;
X			default:
X				/* too many args */
X				return -1;
X			}
X			return 0;
X		}
X	}
X
X	errormsg(0, 0, "unknown symbol %s", sym);
X	return -1;
}
SHAR_EOF
  $shar_touch -am 1120175793 'liw-modules-0.4/expr/test_expr.c' &&
  chmod 0600 'liw-modules-0.4/expr/test_expr.c' ||
  echo 'restore of liw-modules-0.4/expr/test_expr.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/expr/test_expr.c'`"
  test 2424 -eq "$shar_count" ||
    echo "liw-modules-0.4/expr/test_expr.c: original size 2424, current size $shar_count"
fi
: || echo 'restore of liw-modules-0.4/files/Makefile failed'
echo 'End of part 3, continue with part 4'
exit 0

