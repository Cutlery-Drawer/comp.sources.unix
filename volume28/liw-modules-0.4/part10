Newsgroups: comp.sources.unix
From: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Subject: v28i197: liw-modules-0.4 - the LIW module set (for use with Publib), Part10/14
References: <1.785201893.15507@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Posting-Number: Volume 28, Issue 197
Archive-Name: liw-modules-0.4/part10

#!/bin/sh
# This is part 10 of a multipart archive.
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
# ============= liw-modules-0.4/strutil/memrev.c ==============
if test ! -d 'liw-modules-0.4'; then
  echo 'x - creating directory liw-modules-0.4'
  mkdir 'liw-modules-0.4'
fi
if test ! -d 'liw-modules-0.4/strutil'; then
  echo 'x - creating directory liw-modules-0.4/strutil'
  mkdir 'liw-modules-0.4/strutil'
fi
if test -f 'liw-modules-0.4/strutil/memrev.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memrev.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memrev.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memrev.c' &&
/*
X * memrev.c -- reverse an array in place
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:memrev.c,v 1.1.1.1 1994/02/03 17:25:31 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
void *memrev(void *block, size_t elsize, size_t elnum) {
X	char *s, *t;
X
X	assert(block != NULL);
X	assert(elsize > 0);
X
X	for (s = block, t = s + (elnum-1)*elsize; s < t; s+=elsize, t-=elsize)
X		memswap(s, t, elsize);
X	return block;
}
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/memrev.c' &&
  chmod 0600 'liw-modules-0.4/strutil/memrev.c' ||
  echo 'restore of liw-modules-0.4/strutil/memrev.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memrev.c'`"
  test 478 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memrev.c: original size 478, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memrmem.3 ==============
if test -f 'liw-modules-0.4/strutil/memrmem.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memrmem.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memrmem.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memrmem.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:memrmem.3,v 1.1 1994/06/20 20:30:00 liw Exp"
X.\"
X.TH MEMRMEM 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
memrmem \- find last occurence of memory block within another memory block
X.SH SYNOPSIS
X.nf
#include <publib.h>
void *\fBmemrmem\fR(const void *\fIv\fR, size_t \fIsize\fR,
X                const void *\fIpat\fR, size_t \fIpatsize\fR);
X.SH DESCRIPTION
\fImemrmem\fR finds the last occurence of memory block \fIpat\fR within memory
block \fIv\fR.
X.SH "RETURN VALUE"
\fImemrmem\fR returns a pointer to the first byte of the match, if it finds any,
or a null pointer if there are no matches.
X.SH "SEE ALSO"
publib(3), memmem(3), strstr(3), strrstr(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/memrmem.3' &&
  chmod 0600 'liw-modules-0.4/strutil/memrmem.3' ||
  echo 'restore of liw-modules-0.4/strutil/memrmem.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memrmem.3'`"
  test 771 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memrmem.3: original size 771, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memrmem.c ==============
if test -f 'liw-modules-0.4/strutil/memrmem.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memrmem.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memrmem.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memrmem.c' &&
/*
X * memrmem.c -- reverse search for memory block inside another memory block
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:memrmem.c,v 1.1 1994/06/20 20:30:01 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
void *memrmem(const void *v, size_t size, const void *pat, size_t patsize) {
X	const char *p;
X
X	assert(v != NULL);
X	assert(pat != NULL);
X
X	/* Special cases */
X	if (size < patsize)
X		return NULL;
X	if (patsize == 0)
X		return (void *) v;
X
X	/* xxx - this will make p < v if pattern not found; potential
X	   portability problem */
X	for (p = v, p += size-patsize; size >= patsize; --p, --size)
X		if (memcmp(p, pat, patsize) == 0)
X			return (void *) p;
X	return NULL;
}
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/memrmem.c' &&
  chmod 0600 'liw-modules-0.4/strutil/memrmem.c' ||
  echo 'restore of liw-modules-0.4/strutil/memrmem.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memrmem.c'`"
  test 739 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memrmem.c: original size 739, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memshuffle.3 ==============
if test -f 'liw-modules-0.4/strutil/memshuffle.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memshuffle.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memshuffle.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memshuffle.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:memshuffle.3,v 1.1.1.1 1994/02/03 17:25:30 liw Exp"
X.\"
X.TH MEMSHUFFLE 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
memshuffle \- make an array be in random order
X.SH SYNOPSIS
X.nf
#include <publib.h>
void *\fBmemshuffle\fR(void *\fIblock\fR, size_t \fIelsize\fR, size_t \fIelnum\fR);
X.SH DESCRIPTION
\fImemshuffle\fR will move around the elements of an array in a random
fashion.  It uses the standard library function \fIrand\fR(3) to get
the pseudo-random numbers it needs.  The caller must set a suitable
seed with \fIsrand\fR(3).
X.SH "RETURN VALUE"
\fImemshuffle\fR returns its first argument.
X.SH EXAMPLE
To shuffle an integer array one might do the following.
X.sp 1
X.nf
X.in +5
int array[4] = { 1, 2, 3, 4 };
X
memshuffle(array, sizeof(array[0]), 4);
X.in -5
X.SH BUGS
On many systems \fIrand\fR(3) is not of very good quality.  However,
it is the only random number generator that can be assumed to exist.
Making it possible for the caller to provide an alternate source
of random numbers (e.g., via a function pointer) is perhaps too more
trouble than its worth.  A better way would be for everyone to fix
their \fIrand\fR's.
X.SH "SEE ALSO"
publib(3), memrev(3), rand(3), srand(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/memshuffle.3' &&
  chmod 0600 'liw-modules-0.4/strutil/memshuffle.3' ||
  echo 'restore of liw-modules-0.4/strutil/memshuffle.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memshuffle.3'`"
  test 1304 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memshuffle.3: original size 1304, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memshuffle.c ==============
if test -f 'liw-modules-0.4/strutil/memshuffle.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memshuffle.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memshuffle.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memshuffle.c' &&
/*
X * memshuffle.c -- make an array be in random order
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:memshuffle.c,v 1.3 1994/06/20 20:30:02 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include <stdlib.h>
#include "publib/strutil.h"
X
X
void *memshuffle(void *base, size_t elsize, size_t nelem) {
X	size_t i;
X	char *p;
X
X	assert(base != NULL);
X	assert(elsize > 0);
X
X	for (p = base; nelem > 0; --nelem, p += elsize) {
X		i = rand() / (RAND_MAX / nelem + 1);
X		if (i > 0)
X			memswap(p, p + i*elsize, elsize);
X	}
X	return base;
}
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/memshuffle.c' &&
  chmod 0600 'liw-modules-0.4/strutil/memshuffle.c' ||
  echo 'restore of liw-modules-0.4/strutil/memshuffle.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memshuffle.c'`"
  test 564 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memshuffle.c: original size 564, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memswap.3 ==============
if test -f 'liw-modules-0.4/strutil/memswap.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memswap.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memswap.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memswap.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:memswap.3,v 1.1.1.1 1994/02/03 17:25:30 liw Exp"
X.\"
X.TH MEMSWAP 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
memswap \- swap the contents of two memory blocks
X.SH SYNOPSIS
X.nf
#include <publib.h>
void \fBmemswap\fR(void *\fIblock1\fR, void *\fIblock2\fR, size_t \fIn\fR);
X.SH DESCRIPTION
\fImemswap\fR will swap the contents of the two blocks pointed by
its first two arguments.  The last argument gives the size of the
memory blocks.
X.SH EXAMPLE
To swap two structs, one might do the following.
X.sp 1
X.nf
X.in +5
struct tm tm1, tm2;
X
memswap(&tm1, &tm2, sizeof(struct tm));
X.in -5
X.SH BUGS
Using \fImemswap\fR to swap small portions of memory is inefficient.
It is not worth it to use it to swap variables of any of the basic
types, for instance.  Use inline code for such cases.  However, for
large portions of memory, e.g., arrays, it is convenient.
X.PP
\fImemswap\fR can't swap variables whose address can't be taken.  This
excludes variables with the \fBregister\fR specifier and bitfields in
structs.  But then, there is no way to write a function (or macro) that
can handle any kind of arguments.  Life is hard.
X.SH "SEE ALSO"
publib(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/memswap.3' &&
  chmod 0600 'liw-modules-0.4/strutil/memswap.3' ||
  echo 'restore of liw-modules-0.4/strutil/memswap.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memswap.3'`"
  test 1263 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memswap.3: original size 1263, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memswap.c ==============
if test -f 'liw-modules-0.4/strutil/memswap.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memswap.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memswap.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memswap.c' &&
/*
X * memswap.c -- swap contents of two memory blocks
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:memswap.c,v 1.2 1994/02/05 17:08:43 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
/* The size of the auxiliary array that is used while swapping */
#define N	1024
X
void memswap(void *block1, void *block2, size_t n) {
X	char *s, *t, buf[N];
X
X	assert(block1 != NULL);
X	assert(block2 != NULL);
X	assert(!memoverlap(block1, n, block2, n));
X
X	s = block1;
X	t = block2;
X	while (n > N) {
X		memcpy(buf, s, N);
X		memcpy(s, t, N);
X		memcpy(t, buf, N);
X		s += N;
X		t += N;
X		n -= N;
X	}
X	memcpy(buf, s, n);
X	memcpy(s, t, n);
X	memcpy(t, buf, n);
}
SHAR_EOF
  $shar_touch -am 0205190894 'liw-modules-0.4/strutil/memswap.c' &&
  chmod 0600 'liw-modules-0.4/strutil/memswap.c' ||
  echo 'restore of liw-modules-0.4/strutil/memswap.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memswap.c'`"
  test 703 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memswap.c: original size 703, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/stracat.3 ==============
if test -f 'liw-modules-0.4/strutil/stracat.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/stracat.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/stracat.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/stracat.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:stracat.3,v 1.1.1.1 1994/02/03 17:25:30 liw Exp"
X.\"
X.TH STRACAT 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
stracat \- concatenate many strings into an allocated memory block
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstracat\fR(const char *\fIs\fR, ...);
X.SH DESCRIPTION
\fIstracat\fR will allocate a block of memory with malloc and concatenate
all arguments strings into this block.  The user is supposed
to free the returned block.  The end of the argument list is signalled
by a null pointer.
X.SH "RETURN VALUE"
\fIstracat\fR returns a pointer to the allocated block,
or NULL if it could not be allocated.
X.SH EXAMPLE
To concatenate "hello, " and "world", one might say the following.
X.sp 1
X.nf
X.in +5
p = stracat("hello, ", "world", (char *)NULL);
if (p != NULL)
X	puts(p);
X.in -5
X.sp 1
Please note that it is necessary to case NULL as in the example above,
since there is no information about the type of the argument available
in the prototype, and since an unadorned NULL might not be of the 
correct type.  (See any good C reference book or the comp.lang.c FAQ for
more information.)
X.SH "SEE ALSO"
publib(3), strcat(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/stracat.3' &&
  chmod 0600 'liw-modules-0.4/strutil/stracat.3' ||
  echo 'restore of liw-modules-0.4/strutil/stracat.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/stracat.3'`"
  test 1252 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/stracat.3: original size 1252, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/stracat.c ==============
if test -f 'liw-modules-0.4/strutil/stracat.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/stracat.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/stracat.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/stracat.c' &&
/*
X * stracat.c -- concatenate many strings into an allocated memory block
X *
X * Part of publib.  See man page for more information.
X * "@(#)publib-strutil:stracat.c,v 1.5 1994/07/16 15:29:17 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>
#include "publib/strutil.h"
#include "publib/errormsg.h"
X
X
#define N 1024
X
X
char *stracat(const char *s, ...) {
X	va_list args;
X	char *q, *block;
X	const char *p;
X	size_t size, len;
X	size_t lentab[N];
X	int n, i;
X
X	assert(s != NULL);
X
X	/*
X	 * Compute the amount of memory needed for the target string.
X	 *
X	 * I could use realloc to make it larger if an initial guess
X	 * at its size would be too little, but this way we avoid doing
X	 * calling realloc many times, which is a win, because it can
X	 * be pretty slow.  However, I haven't actually tested that
X	 * this is faster. :-(.
X	 *
X	 * I use another untested speed hack (but this one should be
X	 * obvious -- famous last words): to avoid having to compute the
X	 * length of each string twice, I store the lengths in an array,
X	 * lentab.  If there are more strings than will fit into lentab,
X	 * then the rest will still have their lengths computed twice.
X	 * N, the length of lentab, should be made large enough that it
X	 * seldom happens, and small enough that there is not significant
X	 * memory loss.  On memory-starved machines (such as PCs running
X	 * under MS-DOS), one has to take into account also a minuscule stack
X	 * size.  On machines with real memory management, a thousand or ten
X	 * should be a pretty good value for N.
X	 */
X	n = 1;
X	lentab[0] = strlen(s);
X	size = 1 + lentab[0];
X	va_start(args, s);
X	while ((p = va_arg(args, char *)) != NULL) {
X		len = strlen(p);
X		size += len;
X		if (n < N)
X			lentab[n++] = len;
X	}
X	va_end(args);
X
X	/*
X	 * Allocate the block.
X	 */
X	block = malloc(size);
X	if (block == NULL) {
X		__publib_error("malloc failed");
X		return NULL;
X	}
X
X	/*
X	 * Concatenate the strings to the allocated block.
X	 */
X	memcpy(block, s, lentab[0]);
X	q = block + lentab[0];
X	i = 1;
X	va_start(args, s);
X	while ((p = va_arg(args, const char *)) != NULL) {
X		len = (i < n) ? lentab[i++] : strlen(p);
X		memcpy(q, p, len);
X		q += len;
X	}
X	*q = '\0';
X	va_end(args);
X
X	return block;
}
SHAR_EOF
  $shar_touch -am 0716182994 'liw-modules-0.4/strutil/stracat.c' &&
  chmod 0600 'liw-modules-0.4/strutil/stracat.c' ||
  echo 'restore of liw-modules-0.4/strutil/stracat.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/stracat.c'`"
  test 2238 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/stracat.c: original size 2238, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/stranaxfrm.3 ==============
if test -f 'liw-modules-0.4/strutil/stranaxfrm.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/stranaxfrm.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/stranaxfrm.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/stranaxfrm.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:stranaxfrm.3,v 1.1 1994/06/20 20:30:05 liw Exp"
X.\"
X.TH STRANAXFRM 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
stranaxfrm \- make a string into canonical form for anagram comparison
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstranaxfrm\fI(char *\fIstr\fR);
X.SH DESCRIPTION
\fIstranaxfrm\fR transforms a string into a canonical form for anagram comparisons.
To check whether two strings are anagrams of each other (i.e., they contain
the same characters, but in different order), compare their canonical forms.
The canonical form merely has all the characters in the string sorted into
ascending order.
X.PP
To write a program to find anagrams, first convert a word list
into canonical order, then look up words in that version of the word list
by transforming them also to canonical order.  
X.SH "RETURN VALUE"
\fIstranaxfrm\fR returns its argument.
X.SH BUGS
This function is of a whimsical nature.
X.SH "SEE ALSO"
publib(3), strcmp(3), strcasecmp(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/stranaxfrm.3' &&
  chmod 0600 'liw-modules-0.4/strutil/stranaxfrm.3' ||
  echo 'restore of liw-modules-0.4/strutil/stranaxfrm.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/stranaxfrm.3'`"
  test 1072 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/stranaxfrm.3: original size 1072, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/stranaxfrm.c ==============
if test -f 'liw-modules-0.4/strutil/stranaxfrm.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/stranaxfrm.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/stranaxfrm.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/stranaxfrm.c' &&
/*
X * stranaxfrm.c -- make a string into canonical order for anagram comparison
X *
X * Part of publib.  See man page for more information.
X * "@(#)publib-strutil:stranaxfrm.c,v 1.1 1994/06/20 20:30:06 liw Exp"
X */
X
#include <assert.h>
#include "publib/strutil.h"
X
char *stranaxfrm(char *str) {
X	char c, *s, *t, *min;
X
X	assert(str != NULL);
X
X	/*
X	 * Sort the letters in the string, using selection sort.  While 
X	 * slowish for long strings, it should be quite fast enough for
X	 * the usual short ones.  (Beep! Untested efficiency claim!)
X	 */
X	for (s = str; *s != '\0'; ++s) {
X		for (min = t = s; *t != '\0'; ++t)
X			if (*t < *min)
X				min = t;
X		c = *s;
X		*s = *min;
X		*min = c;
X	}
X	return str;
}
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/stranaxfrm.c' &&
  chmod 0600 'liw-modules-0.4/strutil/stranaxfrm.c' ||
  echo 'restore of liw-modules-0.4/strutil/stranaxfrm.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/stranaxfrm.c'`"
  test 697 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/stranaxfrm.c: original size 697, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strcenter.c ==============
if test -f 'liw-modules-0.4/strutil/strcenter.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strcenter.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strcenter.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strcenter.c' &&
/*
X * strcenter.c -- center a string within given margins
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strcenter.c,v 1.1 1994/10/06 11:10:34 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
char *strcenter(char *s, size_t w) {
X	for (t = s; isspace(*t); ++t)
X		continue;
X	strrtrim(t);
X	len = strlen(t);
X	if (len >= w)
X		strmove(s, t);
X	else {
X		strmove(s+(w-len)/2, t);
X		memset(s, ' ', (w-len)/2);
X	}
X	return s;
}
SHAR_EOF
  $shar_touch -am 1006131094 'liw-modules-0.4/strutil/strcenter.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strcenter.c' ||
  echo 'restore of liw-modules-0.4/strutil/strcenter.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strcenter.c'`"
  test 483 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strcenter.c: original size 483, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strchange.3 ==============
if test -f 'liw-modules-0.4/strutil/strchange.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strchange.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strchange.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strchange.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strchange.3,v 1.1 1994/06/20 20:30:07 liw Exp"
X.\"
X.TH STRCHANGE 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strchange \- replace beginning of string with beginning of another string
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrchange\fR(char *\fIstr\fR, size_t \fIchangelen\fR,
X                  const char *\fInew\fR, size_t \fInewlen\fR);
X.SH DESCRIPTION
\fIstrchange\fR will replace \fIchangelen\fR characters from the beginning of
\fIstr\fR with \fInewlen\fR characters from the beginning of \fInew\fR.  The
rest of \fIstr\fR will moved appropriately.
X.SH "RETURN VALUE"
\fIstrchange\fR will return its first argument.
X.SH "SEE ALSO"
publib(3), strcpy(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strchange.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strchange.3' ||
  echo 'restore of liw-modules-0.4/strutil/strchange.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strchange.3'`"
  test 784 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strchange.3: original size 784, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strchange.c ==============
if test -f 'liw-modules-0.4/strutil/strchange.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strchange.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strchange.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strchange.c' &&
/*
X * strchange.c -- change beginning of string to another string
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strchange.c,v 1.1 1994/06/20 20:30:08 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
char *strchange(char *str, size_t changelen, const char *new, size_t newlen) {
X	size_t n;
X
X	assert(str != NULL);
X	assert(new != NULL);
X	assert(!stroverlap(str, new));
X
X	n = strlen(str);
X	if (n < changelen)
X		changelen = n;
X	n = strlen(new);
X	if (n < newlen)
X		newlen = n;
X	memmove(str+newlen, str+changelen, strlen(str+changelen)+1);
X	memcpy(str, new, newlen);
X
X	return str;
}
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strchange.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strchange.c' ||
  echo 'restore of liw-modules-0.4/strutil/strchange.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strchange.c'`"
  test 644 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strchange.c: original size 644, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strcins.3 ==============
if test -f 'liw-modules-0.4/strutil/strcins.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strcins.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strcins.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strcins.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strcins.3,v 1.1 1994/07/22 21:02:15 liw Exp"
X.\"
X.TH STRCINS 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strcins \- insert a character at the beginning of a string
X.SH SYNOPSIS
X.nf
#include <publib.h>
void \fBstrins\fR(char *\fIstr\fR, int \fIc\fR);
X.SH DESCRIPTION
\fIstrcins\fR inserts the character \fIc\fR at the beginning of the
string \fIstr\fR.
The target string must contain enough memory to hold the result.
X.SH "SEE ALSO"
publib(3), strdel(3), strins(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0723000294 'liw-modules-0.4/strutil/strcins.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strcins.3' ||
  echo 'restore of liw-modules-0.4/strutil/strcins.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strcins.3'`"
  test 584 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strcins.3: original size 584, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strcins.c ==============
if test -f 'liw-modules-0.4/strutil/strcins.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strcins.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strcins.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strcins.c' &&
/*
X * strcins.c -- insert a char at the beginning of a string
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strcins.c,v 1.2 1994/07/25 23:15:35 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
void strcins(char *str, int c) {
X	assert(str != NULL);
X
X	memmove(str+1, str, strlen(str)+1);
X	*str = c;
}
SHAR_EOF
  $shar_touch -am 0726021594 'liw-modules-0.4/strutil/strcins.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strcins.c' ||
  echo 'restore of liw-modules-0.4/strutil/strcins.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strcins.c'`"
  test 367 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strcins.c: original size 367, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strcstr.3 ==============
if test -f 'liw-modules-0.4/strutil/strcstr.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strcstr.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strcstr.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strcstr.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strcstr.3,v 1.1.1.1 1994/02/03 17:25:29 liw Exp"
X.\"
X.TH STRCSTR 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strcstr \- convert memory block to printable C string notation
X.SH SYNOPSIS
X.nf
#include <publib.h>
void \fBstrcstr\fR(char *\fIstr\fR, size_t \fImax\fR, const void *\fIblock\fR, size_t \fIn\fR);
X.SH DESCRIPTION
\fIstrcstr\fR converts the contents of an arbitrary memory block (which need
not be a zero terminated string) into a printable notation using normal
C string literal syntax.  This can be used for example to store potentially
binary data in a file, or in debugging outputs.
X.PP
All characters for which there is a simple shorthand escape sequence (',
", ?, \\, \\a, \\b, \\f, \\n, \\r, \\t, \\v) are stored using that
notation.  \\0 is stored as \\0.  All other non-printable characters are
stored using a hexadecimal escape sequence.  All other printable
characters are stored as is.
X.PP
The \fIisprint\fR(3) macro is used to determine whether a character is
printable (i.e., whether it is printed as is, or using special notation).
Therefore, the output depends on the locale.
X.SH "RETURN VALUE"
\fIstrcstr\fR returns nothing.
X.SH EXAMPLE
The following code dumps input to the standard output in a 
guaranteed (modulo locale bugs) printable format. 
It might be used for debugging.
X.sp 1
X.nf
X.in +5
#include <stdio.h>
#include <publib.h>
X
int main(void) {
X	char line[512];
X	char cstr[512*(CHAR_BIT/4+1)+2+1];  /* +2 for \\x, +1 for \\0,
X						the rest to be able to
X						store the hex code for
X						512 chars.  */
X
X	while (fgets(line, sizeof(line), stdio) != NULL) {
X		strcstr(cstr, sizeof(cstr), line, strlen(line));
X		printf("%s\n", line);
X	}
X	return 0;
}
X.in -5
X.SH "SEE ALSO"
publib(3), strins(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/strcstr.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strcstr.3' ||
  echo 'restore of liw-modules-0.4/strutil/strcstr.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strcstr.3'`"
  test 1845 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strcstr.3: original size 1845, current size $shar_count"
fi
: || echo 'restore of liw-modules-0.4/strutil/strcstr.c failed'
echo 'End of part 10, continue with part 11'
exit 0

