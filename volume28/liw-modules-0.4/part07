Newsgroups: comp.sources.unix
From: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Subject: v28i194: liw-modules-0.4 - the LIW module set (for use with Publib), Part07/14
References: <1.785201893.15507@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Posting-Number: Volume 28, Issue 194
Archive-Name: liw-modules-0.4/part07

#!/bin/sh
# This is part 07 of a multipart archive.
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
# ============= liw-modules-0.4/iset/iset_range.c ==============
if test ! -d 'liw-modules-0.4'; then
  echo 'x - creating directory liw-modules-0.4'
  mkdir 'liw-modules-0.4'
fi
if test ! -d 'liw-modules-0.4/iset'; then
  echo 'x - creating directory liw-modules-0.4/iset'
  mkdir 'liw-modules-0.4/iset'
fi
if test -f 'liw-modules-0.4/iset/iset_range.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/iset_range.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/iset_range.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/iset_range.c' &&
/*
X * iset_range.c -- return the range of numbers in an iset
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-iset:iset_range.c,v 1.1.1.1 1993/11/20 17:02:31 liw Exp"
X */
X
#include <assert.h>
#include <stddef.h>	/* need NULL */
#include "publib/iset.h"
X
void iset_range(const Iset *is, long *lowest, long *highest) {
X	assert(is != NULL);
X	assert(is->lowest != NULL);
X	assert(is->highest != NULL);
X	if (lowest != NULL)
X		*lowest = is->lowest->start;
X	if (highest != NULL)
X		*highest = is->highest->start;
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/iset/iset_range.c' &&
  chmod 0600 'liw-modules-0.4/iset/iset_range.c' ||
  echo 'restore of liw-modules-0.4/iset/iset_range.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/iset_range.c'`"
  test 529 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/iset_range.c: original size 529, current size $shar_count"
fi
# ============= liw-modules-0.4/iset/iset_remove.c ==============
if test -f 'liw-modules-0.4/iset/iset_remove.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/iset_remove.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/iset_remove.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/iset_remove.c' &&
/*
X * iset_remove.c -- remove a number from an iset
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-iset:iset_remove.c,v 1.3 1994/07/16 15:28:53 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include "publib/iset.h"
#include "publib/errormsg.h"
X
int iset_remove(Iset *is, long number) {
X	struct __iset_range *r, *rnew;
X
X	assert(is != NULL);
X
X	for (r = is->lowest; r != NULL && r->end < number; r = r->next)
X		continue;
X
X	if (r == NULL || r->start > number)
X		return 0;	/* number not in iset, nothing to do */
X
X	assert(r->start <= number && number <= r->end);
X
X	if (r->start == number && r->end == number) {
X		if (r->prev == NULL)
X			is->lowest = r->next;
X		else
X			r->prev->next = r->next;
X		if (r->next == NULL)
X			is->highest = r->prev;
X		else
X			r->next->prev = r->prev;
X		free(r);
X		return 0;
X	}
X
X	if (r->start == number) {
X		++r->start;
X		return 0;
X	}
X
X	if (r->end == number) {
X		--r->end;
X		return 0;
X	}
X
X	/* split range into two */
X
X	rnew = malloc(sizeof(struct __iset_range));
X	if (rnew == NULL) {
X		__publib_error("malloc failed");
X		return -1;
X	}
X	rnew->start = number+1;
X	rnew->end = r->end;
X	r->end = number-1;
X
X	assert(is->lowest != NULL);
X
X	rnew->next = r->next;
X	rnew->prev = r;
X	r->next = rnew;
X	if (rnew->next != NULL)
X		rnew->next->prev = rnew;
X
X	return 0;
}
SHAR_EOF
  $shar_touch -am 0716182894 'liw-modules-0.4/iset/iset_remove.c' &&
  chmod 0600 'liw-modules-0.4/iset/iset_remove.c' ||
  echo 'restore of liw-modules-0.4/iset/iset_remove.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/iset_remove.c'`"
  test 1309 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/iset_remove.c: original size 1309, current size $shar_count"
fi
# ============= liw-modules-0.4/iset/iset_rm_rng.c ==============
if test -f 'liw-modules-0.4/iset/iset_rm_rng.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/iset_rm_rng.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/iset_rm_rng.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/iset_rm_rng.c' &&
/*
X * iset_remove_range.c -- remove a range of numbers from an iset
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-iset:iset_rm_rng.c,v 1.1.1.1 1993/11/20 17:02:31 liw Exp"
X */
X
#include <assert.h>
#include <stddef.h>	/* need NULL */
#include "publib/iset.h"
X
int iset_remove_range(Iset *is, long number1, long number2) {
X	long i;
X
X	assert(is != NULL);
X	assert(number1 <= number2);
X
X	for (i = number1; i <= number2; ++i)
X		if (iset_remove(is, i) == -1)
X			return -1;
X	return 0;
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/iset/iset_rm_rng.c' &&
  chmod 0600 'liw-modules-0.4/iset/iset_rm_rng.c' ||
  echo 'restore of liw-modules-0.4/iset/iset_rm_rng.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/iset_rm_rng.c'`"
  test 505 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/iset_rm_rng.c: original size 505, current size $shar_count"
fi
# ============= liw-modules-0.4/iset/iset_union.c ==============
if test -f 'liw-modules-0.4/iset/iset_union.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/iset_union.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/iset_union.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/iset_union.c' &&
/*
X * iset_union.c -- add all numbers in an iset to another iset
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-iset:iset_union.c,v 1.1.1.1 1993/11/20 17:02:31 liw Exp"
X */
X
#include <assert.h>
#include <stddef.h>	/* need NULL */
#include "publib/iset.h"
X
int iset_union(Iset *is1, const Iset *is2) {
X	struct __iset_range *r;
X
X	assert(is1 != NULL);
X	assert(is2 != NULL);
X
X	for (r = is2->lowest; r != NULL; r = r->next)
X		if (iset_add_range(is1, r->start, r->end) == -1)
X			return -1;
X	return 0;
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/iset/iset_union.c' &&
  chmod 0600 'liw-modules-0.4/iset/iset_union.c' ||
  echo 'restore of liw-modules-0.4/iset/iset_union.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/iset_union.c'`"
  test 522 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/iset_union.c: original size 522, current size $shar_count"
fi
# ============= liw-modules-0.4/iset/test_add.c ==============
if test -f 'liw-modules-0.4/iset/test_add.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/test_add.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/test_add.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/test_add.c' &&
/*
X * add.c -- add numbers to an iset, then print out minimum ranges
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-iset:test_add.c,v 1.1.1.1 1993/11/20 17:02:31 liw Exp"
X */
X
#undef NDEBUG
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include "publib/iset.h"
X
void dump(Iset *is) {
X	struct __iset_range *r;
X
X	printf("dump:");
X	for (r = is->lowest; r != NULL; r = r->next)
X		printf(" %ld-%ld", r->start, r->end);
X	printf("\n");
}
X
int main(void) {
X	int i;
X	Iset *is;
X
X	assert((is = iset_create()) != NULL);
X	dump(is);
X	while (scanf("%d", &i) == 1) {
X		assert(iset_add(is, i) != -1);
X		dump(is);
X	}
X	iset_destroy(is);
X
X	exit(0);
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/iset/test_add.c' &&
  chmod 0600 'liw-modules-0.4/iset/test_add.c' ||
  echo 'restore of liw-modules-0.4/iset/test_add.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/test_add.c'`"
  test 669 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/test_add.c: original size 669, current size $shar_count"
fi
# ============= liw-modules-0.4/log/Makefile ==============
if test ! -d 'liw-modules-0.4/log'; then
  echo 'x - creating directory liw-modules-0.4/log'
  mkdir 'liw-modules-0.4/log'
fi
if test -f 'liw-modules-0.4/log/Makefile' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/log/Makefile (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/log/Makefile (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/log/Makefile' &&
objs = log.o
testprogs = 
include $(srcdir)/Generic.mk
X
xxxtest: xxxtest.o $(libname)
X	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ xxxtest.o $(libname)
xxxtest.o: xxx.h
$(objs): log.h
SHAR_EOF
  $shar_touch -am 0620234594 'liw-modules-0.4/log/Makefile' &&
  chmod 0600 'liw-modules-0.4/log/Makefile' ||
  echo 'restore of liw-modules-0.4/log/Makefile failed'
  shar_count="`wc -c < 'liw-modules-0.4/log/Makefile'`"
  test 173 -eq "$shar_count" ||
    echo "liw-modules-0.4/log/Makefile: original size 173, current size $shar_count"
fi
# ============= liw-modules-0.4/log/README ==============
if test -f 'liw-modules-0.4/log/README' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/log/README (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/log/README (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/log/README' &&
README for Publib module log
Lars Wirzenius
"@(#)publib-log:README,v 1.1 1994/08/28 18:06:51 liw Exp"
X
These routines implement a simple log file facility.
X
----------------------
X
Copyright (c) 1994 Lars Wirzenius.  All rights reserved.
X
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
X
1. Redistributions of source code must retain the above copyright
X   notice, this list of conditions and the following disclaimer.
X
2. Redistributions in binary form must reproduce the above copyright
X   notice, this list of conditions and the following disclaimer in the
X   documentation and/or other materials provided with the distribution.
X
THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
SHAR_EOF
  $shar_touch -am 0828210694 'liw-modules-0.4/log/README' &&
  chmod 0600 'liw-modules-0.4/log/README' ||
  echo 'restore of liw-modules-0.4/log/README failed'
  shar_count="`wc -c < 'liw-modules-0.4/log/README'`"
  test 1433 -eq "$shar_count" ||
    echo "liw-modules-0.4/log/README: original size 1433, current size $shar_count"
fi
# ============= liw-modules-0.4/log/log.3 ==============
if test -f 'liw-modules-0.4/log/log.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/log/log.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/log/log.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/log/log.3' &&
X.\" part of publib
X.\" "@(#)publib-framework:log.3,v 1.2 1994/08/28 18:08:19 liw Exp"
X.\"
X.TH LOG 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
log \- simple log file output
X.SH SYNOPSIS
X.nf
#include <publib.h>
X.sp 1
int \fBlog_open\fR(const char *\fIfilename\fR, int \fImin_level\fR);
int \fBlog_add\fR(FILE *\fIf\fR, int \fImin_level\fR);
void \fBlog_set_level\fR(int \fIlog_handle\fR, int \fImin_level\fR);
int \fBlog_close\fR(void);
void \fBlog_off\fR(void);
void \fBlog_on\fR(void);
void \fBlog_chat\fR(const char *\fIfmt\fR, ...);
void \fBlog_note\fR(const char *\fIfmt\fR, ...);
void \fBlog_warn\fR(const char *\fIfmt\fR, ...);
void \fBlog_error\fR(const char *\fIfmt\fR, ...);
void \fBlog_fatal\fR(const char *\fIfmt\fR, ...);
void \fBlog_printf\fR(int \fIlevel\fR, const char *\fIfmt\fR, ...);
X.SH DESCRIPTION
These routines implement a simple log file facility.
There can be several log files open at the same time
(up to 256, but limits on the
number of concurrently open files may set a lower limit).
Each log message is associated with a level of severity,
which can be any integer, but the levels 
\fIlog_level_chat\fR,
\fIlog_level_note\fR,
\fIlog_level_warn\fR,
\fIlog_level_error\fR, and
\fIlog_level_fatal\fR
are predefined, and can easily be used by calling the respective
print functions (\fIlog_chat\fR, etc.); for other log levels,
\fIlog_printf\fR must be called.
Each open log file is associated by a minimum level.
Messages below the minimum level are not output to that log file.
X.PP
The log printing functions attempt to force the messages to
be written to the disk (or wherever they're going), using
\fIfflush\fR(3).
This will hopefully avoid problems due to delayed messages
that buffering may cause.
X.PP
Log files are opened with \fIlog_open\fR.  An already open file
(such as \fIstderr\fR) can be added to the list of open log files
with \fIlog_add\fR.
Both of these functions set the minimum level as well.
They return a log file handle, which is used to identify
the log file to the other functions.
The minimum level can later be adjusted with \fIlog_set_level\fR.
\fIlog_close\fR closes all log files.
X.PP
Logging may temporarily be turned off for all log files at the
same time with \fIlog_off\fR.
It can be turned back on with \fIlog_on\fR.
X.SH "RETURN VALUE"
\fIlog_open\fR and \fIlog_add\fR return a log file handle.
\fIlog_close\fR returns -1 if the closing of any log file failed,
0 if all went well.
X.SH "SEE ALSO"
publib(3), syslog(2)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0828210894 'liw-modules-0.4/log/log.3' &&
  chmod 0600 'liw-modules-0.4/log/log.3' ||
  echo 'restore of liw-modules-0.4/log/log.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/log/log.3'`"
  test 2553 -eq "$shar_count" ||
    echo "liw-modules-0.4/log/log.3: original size 2553, current size $shar_count"
fi
# ============= liw-modules-0.4/log/log.c ==============
if test -f 'liw-modules-0.4/log/log.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/log/log.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/log/log.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/log/log.c' &&
/*
X * log.c -- log files
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-log:log.c,v 1.7 1994/10/06 11:17:22 liw Exp"
X */
X
#include <assert.h>
#include "publib/log.h"
#include "publib/errormsg.h"
X
X
#define MAX	256
static struct {
X	FILE *f;
X	int min;
} logs[MAX];
static int nlogs = 0;
static int log_is_on = 1;
X
int log_open(const char *filename, int min_level) {
X	FILE *f;
X
X	assert(filename != NULL);
X
X	assert(nlogs >= 0 && nlogs <= MAX);
X	if (nlogs == MAX) {
X		__publib_error("too many log files");
X		return -1;
X	}
X
X	f = fopen(filename, "a");
X	if (f == NULL) {
X		__publib_error("fopen failed");
X		return -1;
X	}
X
X	logs[nlogs].f = f;
X	logs[nlogs].min = min_level;
X	return nlogs++;
}
X
int log_add(FILE *f, int min_level) {
X	assert(f != NULL);
X
X	assert(nlogs >= 0 && nlogs <= MAX);
X	if (nlogs == MAX) {
X		__publib_error("too many log files");
X		return -1;
X	}
X
X	logs[nlogs].f = f;
X	logs[nlogs].min = min_level;
X	return nlogs++;
}
X
void log_set_level(int logid, int min_level) {
X	assert(logid >= 0);
X	assert(logid < nlogs);
X	logs[logid].min = min_level;
}
X
X
int log_close(void) {
X	int i, ret;
X
X	assert(nlogs >= 0 && nlogs <= MAX);
X	ret = 0;
X	for (i = 0; i < nlogs; ++i) {
X		if (fclose(logs[i].f) != 0) {
X			__publib_error("fclose failed for logfile");
X			ret = -1;
X		}
X	}
X	return ret;
}
X
X
void log_off(void) {
X	log_is_on = 0;
}
X
X
void log_on(void) {
X	log_is_on = 1;
}
X
X
/* All the functions log_chat through log_fatal are exactly the same,
X * except for the level argument to log_vprintf.  Therefore, we use
X * a macro to emphasize the similarity and to avoid unnecessary
X * differences.
X */
#define do_log_at_level(level) \
X	void log_##level(const char *fmt, ...) { \
X		va_list args; \
X		int i; \
X		for (i = 0; i < nlogs; ++i) { \
X			if (log_level_##level < logs[i].min) continue; \
X			va_start(args, fmt); \
X			(void) vfprintf(logs[i].f, fmt, args); \
X			(void) fflush(logs[i].f); \
X			va_end(args); \
X		} \
X	}
do_log_at_level(chat)
do_log_at_level(note)
do_log_at_level(warn)
do_log_at_level(error)
do_log_at_level(fatal)
X
X
void log_printf(int level, const char *fmt, ...) {
X	va_list args;
X	int i;
X
X	for (i = 0; i < nlogs; ++i) {
X		if (level >= logs[i].min) {
X			va_start(args, fmt);
X			(void) vfprintf(logs[i].f, fmt, args);
X			(void) fflush(logs[i].f);
X			va_end(args);
X		}
X	}
}
SHAR_EOF
  $shar_touch -am 1006131794 'liw-modules-0.4/log/log.c' &&
  chmod 0600 'liw-modules-0.4/log/log.c' ||
  echo 'restore of liw-modules-0.4/log/log.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/log/log.c'`"
  test 2304 -eq "$shar_count" ||
    echo "liw-modules-0.4/log/log.c: original size 2304, current size $shar_count"
fi
# ============= liw-modules-0.4/log/log.h ==============
if test -f 'liw-modules-0.4/log/log.h' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/log/log.h (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/log/log.h (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/log/log.h' &&
/*
X * log.h -- log files
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-log:log.h,v 1.3 1994/08/28 18:08:21 liw Exp"
X */
X
#ifndef __publib_log_h_included
#define __publib_log_h_included
X
#include <stdio.h>	/* need FILE */
#include <stdarg.h>	/* need va_list */
X
enum log_level {
X	log_level_chat,
X	log_level_note,
X	log_level_warn,
X	log_level_error,
X	log_level_fatal
};
X
int log_open(const char *, int);
int log_add(FILE *, int);
void log_set_level(int, int);
int log_close(void);
void log_off(void);
void log_on(void);
void log_chat(const char *, ...);
void log_note(const char *, ...);
void log_warn(const char *, ...);
void log_error(const char *, ...);
void log_fatal(const char *, ...);
void log_printf(int, const char *, ...);
X
#endif
SHAR_EOF
  $shar_touch -am 0828210894 'liw-modules-0.4/log/log.h' &&
  chmod 0600 'liw-modules-0.4/log/log.h' ||
  echo 'restore of liw-modules-0.4/log/log.h failed'
  shar_count="`wc -c < 'liw-modules-0.4/log/log.h'`"
  test 764 -eq "$shar_count" ||
    echo "liw-modules-0.4/log/log.h: original size 764, current size $shar_count"
fi
# ============= liw-modules-0.4/sbuf/Makefile ==============
if test ! -d 'liw-modules-0.4/sbuf'; then
  echo 'x - creating directory liw-modules-0.4/sbuf'
  mkdir 'liw-modules-0.4/sbuf'
fi
if test -f 'liw-modules-0.4/sbuf/Makefile' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/sbuf/Makefile (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/sbuf/Makefile (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/sbuf/Makefile' &&
objs = sbuf.o
X
testprogs = 
include $(srcdir)/Generic.mk
X
simple: simple.o $(libname)
X	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ simple.o $(libname)
simple.o: sbuf.h $(srcdir)/include/publib.h
$(objs): sbuf.h
SHAR_EOF
  $shar_touch -am 0828201294 'liw-modules-0.4/sbuf/Makefile' &&
  chmod 0600 'liw-modules-0.4/sbuf/Makefile' ||
  echo 'restore of liw-modules-0.4/sbuf/Makefile failed'
  shar_count="`wc -c < 'liw-modules-0.4/sbuf/Makefile'`"
  test 200 -eq "$shar_count" ||
    echo "liw-modules-0.4/sbuf/Makefile: original size 200, current size $shar_count"
fi
# ============= liw-modules-0.4/sbuf/README ==============
if test -f 'liw-modules-0.4/sbuf/README' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/sbuf/README (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/sbuf/README (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/sbuf/README' &&
README for Publib module sbuf
Lars Wirzenius
"@(#)publib-sbuf:README,v 1.1.1.1 1994/08/28 17:12:05 liw Exp"
X
These routines implement a text editor's editing buffer using
a simple buffer gap data structure.
X
----------------------
X
Copyright (c) 1994 Lars Wirzenius.  All rights reserved.
X
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
X
1. Redistributions of source code must retain the above copyright
X   notice, this list of conditions and the following disclaimer.
X
2. Redistributions in binary form must reproduce the above copyright
X   notice, this list of conditions and the following disclaimer in the
X   documentation and/or other materials provided with the distribution.
X
THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
SHAR_EOF
  $shar_touch -am 0828201294 'liw-modules-0.4/sbuf/README' &&
  chmod 0600 'liw-modules-0.4/sbuf/README' ||
  echo 'restore of liw-modules-0.4/sbuf/README failed'
  shar_count="`wc -c < 'liw-modules-0.4/sbuf/README'`"
  test 1484 -eq "$shar_count" ||
    echo "liw-modules-0.4/sbuf/README: original size 1484, current size $shar_count"
fi
: || echo 'restore of liw-modules-0.4/sbuf/sbuf.c failed'
echo 'End of part 7, continue with part 8'
exit 0

