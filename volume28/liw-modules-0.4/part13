Newsgroups: comp.sources.unix
From: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Subject: v28i200: liw-modules-0.4 - the LIW module set (for use with Publib), Part13/14
References: <1.785201893.15507@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Posting-Number: Volume 28, Issue 200
Archive-Name: liw-modules-0.4/part13

#!/bin/sh
# This is part 13 of a multipart archive.
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
# ============= liw-modules-0.4/strutil/strset.c ==============
if test ! -d 'liw-modules-0.4'; then
  echo 'x - creating directory liw-modules-0.4'
  mkdir 'liw-modules-0.4'
fi
if test ! -d 'liw-modules-0.4/strutil'; then
  echo 'x - creating directory liw-modules-0.4/strutil'
  mkdir 'liw-modules-0.4/strutil'
fi
if test -f 'liw-modules-0.4/strutil/strset.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strset.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strset.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strset.c' &&
/*
X * strset.c -- set all characters in a string to a given character
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strset.c,v 1.1 1994/06/20 20:30:36 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
char *strset(char *str, int c) {
X	char *s;
X	assert(str != NULL);
X
X	for (s = str; *s != '\0'; ++s)
X		*s = c;
X	return str;
}
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strset.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strset.c' ||
  echo 'restore of liw-modules-0.4/strutil/strset.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strset.c'`"
  test 391 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strset.c: original size 391, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strshuffle.3 ==============
if test -f 'liw-modules-0.4/strutil/strshuffle.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strshuffle.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strshuffle.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strshuffle.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strshuffle.3,v 1.1 1994/06/20 20:30:37 liw Exp"
X.\"
X.TH STRSHUFFLE 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strshuffle \- make the characters in a string be in random order
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrshuffle\fR(char *\fIstr\fR);
X.SH DESCRIPTION
\fIstrshuffle\fR will make the characters in a string be in random
order.
X.SH "RETURN VALUE"
\fIstrshuffle\fR will return its argument.
X.SH "SEE ALSO"
publib(3), memshuffle(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strshuffle.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strshuffle.3' ||
  echo 'restore of liw-modules-0.4/strutil/strshuffle.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strshuffle.3'`"
  test 566 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strshuffle.3: original size 566, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strshuffle.c ==============
if test -f 'liw-modules-0.4/strutil/strshuffle.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strshuffle.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strshuffle.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strshuffle.c' &&
/*
X * strshuffle.c -- make the characters in a string be in random order
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strshuffle.c,v 1.1 1994/06/20 20:30:38 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include <stdlib.h>
#include "publib/strutil.h"
X
X
char *strshuffle(char *str) {
X	assert(str != NULL);
X	return memshuffle(str, 1, strlen(str));
}
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strshuffle.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strshuffle.c' ||
  echo 'restore of liw-modules-0.4/strutil/strshuffle.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strshuffle.c'`"
  test 391 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strshuffle.c: original size 391, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strsplit.3 ==============
if test -f 'liw-modules-0.4/strutil/strsplit.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strsplit.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strsplit.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strsplit.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strsplit.3,v 1.2 1994/02/19 20:58:36 liw Exp"
X.\"
X.TH STRSPLIT 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strsplit \- split string into words
X.SH SYNOPSIS
X.nf
#include <publib.h>
int \fBstrsplit\fR(char *\fIsrc\fR, char **\fIwords\fR, int \fImaxw\fR, const char *\fIsep\fR);
X.SH DESCRIPTION
\fIstrsplit\fR splits the \fIsrc\fR string into words separated by one
or more of the characters in \fIsep\fR (or by whitespace characters, as
specified by \fIisspace\fR(3), if \fIsep\fR is the empty string).
Pointers to the words are stored in successive elements in the array
pointed to by \fIwords\fR.  No more than \fImaxw\fR pointers are stored.
The input string is modifed by replacing the separator character
following a word with '\\0'.  However, if there are more than \fImaxw\fR
words, only \fImaxw\fR-1 words will be returned, and the \fImaxw\fRth 
pointer in the array will point to the rest of the string.  If
\fImaxw\fR is 0, no modification is done.  This can be used for counting
how many words there are, e.g., so that space for the word pointer table
can be allocated dynamically.
X.PP
strsplit splits the src string into words separated by one or more
of the characters in sep (or by whitespace characters, as defined by
isspace(3), if sep is the empty string).  The src string is modified
by replacing the separator character after each word with '\\0'.  A
pointer to each word is stored into successive elements of the
array words.  If there are more than maxw words, a '\\0' is stored
after the first maxw-1 words only, and the words[maxw-1] will contain
a pointer to the rest of the string after the word in words[maxw-2].
X
X.SH "RETURN VALUE"
\fIstrsplit\fR returns the total number of words in the input string.
X.SH EXAMPLE
Assuming that words are separated by white space, to count the number
of words on a line, one might say the following.
X.sp 1
X.nf
X.in +5
n = strsplit(line, NULL, 0, "");
X.in -5
X.PP
To print out the fields of a colon-separated list (such as PATH, or a
line from /etc/passwd or /etc/group), one might do the following.
X.sp 1
X.nf
X.in +5
char *fields[15];
int i, n;
X
n = strsplit(list, fields, 15, ":");
if (n > 15)
X	n = 15;
for (i = 0; i < n; ++i)
X	printf("field %d: %s\\n", i, fields[i]);
X.in -5
X.PP
In real life, one would of course prefer to not restrict the number of
fields, so one might either allocated the pointer table dynamically
(first counting the number of words using something like the first
example), or realize that since it is the original string that is
being modified, one can do the following:
X.sp 1
X.nf
X.in +5
char *fields[15];
int i, n;
X
do {
X	n = strsplit(list, fields, 15, ":");
X	if (n > 15)
X		n = 15;
X	for (i = 0; i < n; ++i)
X		printf("field %d: %s\\n", i, fields[i]);
X	list = field[n-1] + strlen(field[n-1]);
} while (n == 15);
X.in -5
X.SH "SEE ALSO"
publib(3), strtok(3)
X.SH AUTHOR
The idea for this function came from C-News source code by Henry Spencer
and Geoff Collyer.  Their function is very similar, but this
implementation is by Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0219225894 'liw-modules-0.4/strutil/strsplit.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strsplit.3' ||
  echo 'restore of liw-modules-0.4/strutil/strsplit.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strsplit.3'`"
  test 3108 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strsplit.3: original size 3108, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strsplit.c ==============
if test -f 'liw-modules-0.4/strutil/strsplit.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strsplit.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strsplit.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strsplit.c' &&
/*
X * strsplit.c -- split a string into "words"
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strsplit.c,v 1.3 1994/02/19 20:58:38 liw Exp"
X */
X
#include <assert.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>
X
#include "publib/strutil.h"
X
static char *find_nonsep(const char *s, const char *sep);
static char *find_sep(const char *s, const char *sep);
X
int strsplit(char *s, char **words, int maxw, const char *sep) {
X	char *start, *end;
X	int count;
X
X	assert(s != NULL);
X	assert(words != NULL || maxw == 0);
X	assert(sep != NULL);
X	assert(!memoverlap(s, strlen(s)+1, sep, strlen(sep)+1));
X
X	count = 0;
X	end = s;
X	while ((start = find_nonsep(end, sep)) != NULL) {
X		end = find_sep(start, sep);
X		if (count == maxw-1 && find_nonsep(end, sep) != NULL) {
X			words[count] = start;
X			
X		}
X		if (count < maxw) {
X			*end++ = '\0';
X			words[count] = start;
X		}
X		++count;
X	}
X
X	return count;
}
X
X
/* Find first character that is not a separator, starting with the character
X   at s.  Return NULL if not found.  */
static char *find_nonsep(const char *s, const char *sep) {
X	if (sep != NULL)
X		s += strspn(s, sep);
X	else
X		while (isspace(*s))
X			++s;
X	return *s == '\0' ? NULL : (char *) s;
}
X
X
/* Find first character that is a separator, starting with the character
X   at s.  Treat '\0' as a separator, so that the call always succeeds.  */
static char *find_sep(const char *s, const char *sep) {
X	if (sep != NULL)
X		s += strcspn(s, sep);
X	else
X		while (*s != '\0' && !isspace(*s))
X			++s;
X	return (char *) s;
}
SHAR_EOF
  $shar_touch -am 0219225894 'liw-modules-0.4/strutil/strsplit.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strsplit.c' ||
  echo 'restore of liw-modules-0.4/strutil/strsplit.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strsplit.c'`"
  test 1551 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strsplit.c: original size 1551, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strsub.3 ==============
if test -f 'liw-modules-0.4/strutil/strsub.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strsub.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strsub.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strsub.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strsub.3,v 1.1.1.1 1994/02/03 17:25:30 liw Exp"
X.\"
X.TH STRSUB 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strsub \- substitute first occurence of pattern with another string
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrsub\fR(char *\fIstr\fR, const char *\fIpat\fR, const char *\fIsub\fR);
X.SH DESCRIPTION
\fIstrsub\fR finds the first occurence of the pattern \fIpat\fR in the
string \fIstr\fR (using a method similar to \fIstrstr\fR(3), i.e., no
regular expressions), and replaces it with \fIsub\fR. 
If \fIpat\fR does not occur in \fIstr\fR, no substitution is made.
X.PP
Of course, if \fIsub\fR is an empty string, the pattern is deleted from
the string.
X.SH "RETURN VALUE"
\fIstrsub\fR returns a pointer to the first character after the substitution,
or NULL if no substitution was made.
X.SH EXAMPLE
To substitute up to two occurences of "foo" with "bar" in a line,
one might do the following.
X.sp 1
X.nf
X.in +5
p = strsub(line, "foo", "bar");
if (p != NULL)
X	strsub(line, "foo", "bar");
X.in -5
X.SH "SEE ALSO"
publib(3), strstr(3), strgsub(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/strsub.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strsub.3' ||
  echo 'restore of liw-modules-0.4/strutil/strsub.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strsub.3'`"
  test 1170 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strsub.3: original size 1170, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strsub.c ==============
if test -f 'liw-modules-0.4/strutil/strsub.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strsub.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strsub.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strsub.c' &&
/*
X * strsub.c -- substitute first occurence of pattern with another string
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strsub.c,v 1.1.1.1 1994/02/03 17:25:30 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
char *strsub(char *str, const char *pat, const char *sub) {
X	size_t lenpat, lensub, lenstr;
X
X	assert(str != NULL);
X	assert(pat != NULL);
X	assert(*pat != '\0');
X	assert(sub != NULL);
X
X	str = strstr(str, pat);
X	if (str == NULL)
X		return NULL;
X
X	lenstr = strlen(str);
X	lenpat = strlen(pat);
X	lensub = strlen(sub);
X
X	/* make room for substituted string, or remove slack after it */
X	if (lensub != lenpat)
X		memmove(str + lensub, str + lenpat, lenstr + 1 - lenpat);
X
X	memcpy(str, sub, lensub);
X	return str + lensub;
}
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/strsub.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strsub.c' ||
  echo 'restore of liw-modules-0.4/strutil/strsub.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strsub.c'`"
  test 791 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strsub.c: original size 791, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strtabify.3 ==============
if test -f 'liw-modules-0.4/strutil/strtabify.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strtabify.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strtabify.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strtabify.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strtabify.3,v 1.1 1994/06/20 20:30:39 liw Exp"
X.\"
X.TH STRTABIFY 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strtabify \- convert runs of spaces and tabs to tabs
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrtabify\fR(char *\fIstr\fR, size_t \fItabsize\fR);
X.SH DESCRIPTION
\fIstrtabify\fR will converts spaces and tabs to tabs and spaces (using
the minimal amount of spaces required, possibly none), while preserving
indentation.  Tab positions are set every \fItabsize\fR columns.
X.SH "RETURN VALUE"
\fIstrtabify\fR will return its first argument.
X.SH "SEE ALSO"
publib(3), struntabify(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strtabify.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strtabify.3' ||
  echo 'restore of liw-modules-0.4/strutil/strtabify.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strtabify.3'`"
  test 714 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strtabify.3: original size 714, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strtabify.c ==============
if test -f 'liw-modules-0.4/strutil/strtabify.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strtabify.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strtabify.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strtabify.c' &&
/*
X * strtabify.c -- convert runs of spaces and tabs to tabs (+ necessary spaces)
X *
X * Part of publib.  See man page for more information.
X * "@(#)publib-strutil:strtabify.c,v 1.1 1994/06/20 20:30:40 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>
#include "publib/strutil.h"
X
X
#define nexttab(col)	((col) + tabsize - (col)%tabsize)
X
X
char *strtabify(char *str, size_t tabsize) {
X	size_t scol, tcol;
X	char *s, *t;
X
X	tcol = scol = 0;
X	t = s = str;
X	do {
X		switch (*s) {
X		case ' ':
X			++scol;
X			break;
X		case '\t':
X			scol = nexttab(scol);
X			break;
X		default:
X			while (nexttab(tcol) <= scol) {
X				*t++ = '\t';
X				tcol = nexttab(tcol);
X			}
X			while (tcol < scol) {
X				*t++ = ' ';
X				++tcol;
X			}
X			*t++ = *s;
X			++scol;
X			tcol = scol;
X			break;
X		}
X	} while (*s++ != '\0');
X
X	return str;
}
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strtabify.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strtabify.c' ||
  echo 'restore of liw-modules-0.4/strutil/strtabify.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strtabify.c'`"
  test 845 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strtabify.c: original size 845, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strtrexpand.3 ==============
if test -f 'liw-modules-0.4/strutil/strtrexpand.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strtrexpand.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strtrexpand.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strtrexpand.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strtrexpand.3,v 1.1 1994/06/20 20:30:41 liw Exp"
X.\"
X.TH STRTREXPAND 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strtrexpand \- expand tr-like notation in string
X.SH SYNOPSIS
X.nf
#include <publib.h>
void \fBstrtrexpand\fR(char *\fItgt\fR, const char *\fIsrc\fR);
X.SH DESCRIPTION
\fIstrtrexpand\fR will convert shorthand notation similar to that used
by \fItr\fR(1) into the equivalent longhand notation.  The supported
short forms are:
X.TP 8
\fIa\fR-\fIb\fR
All characters from \fIa\fR to \fIb\fR, inclusive, in the order given by
their character codes.
X.TP
\fI\\a\fR
The character \fIa\fR.
X.TP
\fI\\o \\oo \\ooo\fR
Character with octal code \fIo\fR, \fIoo\fR, or \fIooo\fR, respectively.
X.SH "RETURN VALUE"
\fIstrtrexpand\fR returns nothing.
X.SH "SEE ALSO"
publib(3), tr(1)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strtrexpand.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strtrexpand.3' ||
  echo 'restore of liw-modules-0.4/strutil/strtrexpand.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strtrexpand.3'`"
  test 895 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strtrexpand.3: original size 895, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strtrexpand.c ==============
if test -f 'liw-modules-0.4/strutil/strtrexpand.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strtrexpand.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strtrexpand.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strtrexpand.c' &&
/*
X * strtrexpand.c -- expand tr-like notation in string
X *
X * Part of publib.  See man page for more information.
X * "@(#)publib-strutil:strtrexpand.c,v 1.1 1994/06/20 20:30:43 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>
#include "publib/strutil.h"
X
X
/* a-b: everything from charcode a to charcode b
X   \a: the character a
X   \o \oo \ooo : character with octal code o
*/
#define odigit(c)	(c >= '0' && c <= '7')
void strtrexpand(char *tgt, const char *src) {
X	int c;
X	while (src[0] != '\0') {
X		if (src[0] == '\\' && odigit(src[1])) {
X			++src;
X			c = *src++ - '0';
X			if (odigit(*src))
X				c = c*8 + *src++ - '0';
X			if (odigit(*src))
X				c = c*8 + *src++ - '0';
X			*tgt++ = c;
X		} else if (src[0] == '\\') {
X			*tgt++ = src[1];
X			src += 2;
X		} else if (src[1] == '-' && src[2] != '\0') {
X			for (c = src[0]; c <= src[2]; ++c)
X				*tgt++ = c;
X			src += 3;
X		} else {
X			*tgt++ = *src++;
X		}
X	}
X	*tgt = '\0';
}
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strtrexpand.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strtrexpand.c' ||
  echo 'restore of liw-modules-0.4/strutil/strtrexpand.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strtrexpand.c'`"
  test 963 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strtrexpand.c: original size 963, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strtrim.3 ==============
if test -f 'liw-modules-0.4/strutil/strtrim.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strtrim.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strtrim.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strtrim.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strtrim.3,v 1.1.1.1 1994/02/03 17:25:30 liw Exp"
X.\"
X.TH STRTRIM 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strtrim \- remove leading and trailing whitespace
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrtrim\fR(char *\fIs\fR);
X.SH DESCRIPTION
\fIstrtrim\fR removes all whitespace characters from the beginning and
the end of a string.  As whitespace is counted everything for which
\fIisspace\fR(3) returns true.
X.SH "RETURN VALUE"
\fIstrtrim\fR returns its argument.
X.SH EXAMPLE
To remove whitespace from the beginning and end of all lines, you might do the
following:
X.sp 1
X.nf
X.in +5
#include <publib.h>
X
int main(void) {
X	char line[512];
X
X	while (fgets(line, sizeof(line), stdio) != NULL) {
X		strtrim(line);
X		printf("%s", line);
X	}
X	return 0;
}
X.in -5
X.SH "SEE ALSO"
publib(3), strrtrim(3), strltrim(3), isspace(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/strtrim.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strtrim.3' ||
  echo 'restore of liw-modules-0.4/strutil/strtrim.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strtrim.3'`"
  test 945 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strtrim.3: original size 945, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strtrim.c ==============
if test -f 'liw-modules-0.4/strutil/strtrim.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strtrim.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strtrim.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strtrim.c' &&
/*
X * strtrim.c -- remove leading and trailing blanks from string
X *
X * Part of publib.  See man page for more information.
X * "@(#)publib-strutil:strtrim.c,v 1.1.1.1 1994/02/03 17:25:29 liw Exp"
X */
X
#include <assert.h>
#include "publib/strutil.h"
X
char *strtrim(char *s) {
X	assert(s != NULL);
X	strrtrim(s);
X	strltrim(s);
X	return s;
}
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/strtrim.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strtrim.c' ||
  echo 'restore of liw-modules-0.4/strutil/strtrim.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strtrim.c'`"
  test 336 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strtrim.c: original size 336, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/struncstr.3 ==============
if test -f 'liw-modules-0.4/strutil/struncstr.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/struncstr.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/struncstr.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/struncstr.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:struncstr.3,v 1.1.1.1 1994/02/03 17:25:30 liw Exp"
X.\"
X.TH STRUNCSTR 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
struncstr \- convert printable C string notation to a memory block
X.SH SYNOPSIS
X.nf
#include <publib.h>
void \fBstruncstr\fR(void *\fIblock\fR, const char *\fIstr\fR, size_t \fImax\fR);
X.SH DESCRIPTION
\fIstruncstr\fR converts a C string literal to the memory block it
describes by converting all escape sequences to single characters.
See a C reference manual or \fIstrcstr\fR(3) for a description of
the C string literal notation.
X.PP
\fImax\fR is the maximum number of characters to store into the
memory block.
X.SH "SEE ALSO"
publib(3), strcstr(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/struncstr.3' &&
  chmod 0600 'liw-modules-0.4/strutil/struncstr.3' ||
  echo 'restore of liw-modules-0.4/strutil/struncstr.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/struncstr.3'`"
  test 785 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/struncstr.3: original size 785, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/struncstr.c ==============
if test -f 'liw-modules-0.4/strutil/struncstr.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/struncstr.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/struncstr.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/struncstr.c' &&
/*
X * struncstr.c -- convert C string literal notation into binary data
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:struncstr.c,v 1.2 1994/02/05 17:08:46 liw Exp"
X */
X
#include <assert.h>
#include <ctype.h>
#include <string.h>
#include "publib/strutil.h"
X
X
/* Append a character to the end of the data block, if it fits. */
#define append(c)	(void)(m < max && (data[m++] = (c)))
X
/* Convert hexadecimal character to its corresponding integer value.
X   Assume that the character is valid.  */
#define hextoint(c)	hexvalues[strchr(hexdigits, (c))-hexdigits];
X
X
void struncstr(void *block, const char *str, size_t max) {
X	static const char print[] = "'\"?\\abfnrtv";
X	static const char unprint[] = "'\"?\\\a\b\f\n\r\t\v";
X	static const char hexdigits[] = "0123456789abcdefABCDEF";
X	static const char hexvalues[] = "\0\1\2\3\4\5\6\7\x8\x9"
X					"\xa\xb\xc\xd\xe\xf"
X					"\xA\xB\xC\xD\xE\xF";
X	char *p, *data;
X	unsigned c;
X	size_t m;
X	int i;
X
X	assert(str != NULL);
X	assert(block != NULL);
X	assert(!memoverlap(block, max, str, strlen(str)+1));
X
X	data = block;
X	m = 0;
X	while (m < max && *str != '\0') {
X		if (*str != '\\')		/* printable character? */
X			append(*str++);
X		else if (str[1] == 'x') {	/* hex escape sequence? */
X			str += 2;
X			c = 0;
X			while (isxdigit(*str)) {
X				c = (c << 4) | hextoint(*str);
X				++str;
X			}
X			append(c);
X		} else if (isdigit(str[1])) {	/* octal escape sequence? */
X			++str;
X			c = i = 0;
X			while (++i < 3 && isdigit(*str))
X				c = (c << 3) | hextoint(*str++);
X			append(c);
X		} else if ((p = strchr(unprint, str[1])) != NULL) {
X			append(print[p-unprint]); /* simple esc sequence */
X			str += 2;
X		} else {			/* undefined sequence! */
X			append('\\');
X			append(str[1]);
X			str += 2;
X		}
X	}
}
SHAR_EOF
  $shar_touch -am 0205190894 'liw-modules-0.4/strutil/struncstr.c' &&
  chmod 0600 'liw-modules-0.4/strutil/struncstr.c' ||
  echo 'restore of liw-modules-0.4/strutil/struncstr.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/struncstr.c'`"
  test 1763 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/struncstr.c: original size 1763, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/struntabify.3 ==============
if test -f 'liw-modules-0.4/strutil/struntabify.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/struntabify.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/struntabify.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/struntabify.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:struntabify.3,v 1.1 1994/06/20 20:30:44 liw Exp"
X.\"
X.TH STRUNTABIFY 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
struntabify \- convert tabs to spaces
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstruntabify\fR(char *\fIstr\fR, size_t \fItabsize\fR);
X.SH DESCRIPTION
\fIstruntabify\fR will convert all tab characters ('\\t') in the string
\fIstr\fR to spaces.  Tab positions are at every \fItabsize\fR columns.
The string is supposed to be big enough to hold the conversion, which
is done in place.
X.SH "RETURN VALUE"
\fIstruntabify\fR will return its first argument.
X.SH "SEE ALSO"
publib(3), strtabify(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/struntabify.3' &&
  chmod 0600 'liw-modules-0.4/strutil/struntabify.3' ||
  echo 'restore of liw-modules-0.4/strutil/struntabify.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/struntabify.3'`"
  test 728 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/struntabify.3: original size 728, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/struntabify.c ==============
if test -f 'liw-modules-0.4/strutil/struntabify.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/struntabify.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/struntabify.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/struntabify.c' &&
/*
X * struntabify.c -- convert tabs to spaces
X *
X * Part of publib.  See man page for more information.
X * "@(#)publib-strutil:struntabify.c,v 1.1 1994/06/20 20:30:45 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>
#include "publib/strutil.h"
X
X
char *struntabify(char *str, size_t tabsize) {
X	size_t n;
X	char *s;
X
X	assert(str != NULL);
X	assert(tabsize > 0);
X
X	s = str;
X	while ((s = strchr(s, '\t')) != NULL) {
X		n = tabsize - (s-str)%tabsize;
X		memmove(s+1 + n-1, s+1, strlen(s+1)+1);
X		memset(s, ' ', n);
X		s += n;
X	}
X	return str;
}
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/struntabify.c' &&
  chmod 0600 'liw-modules-0.4/strutil/struntabify.c' ||
  echo 'restore of liw-modules-0.4/strutil/struntabify.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/struntabify.c'`"
  test 580 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/struntabify.c: original size 580, current size $shar_count"
fi
: || echo 'restore of liw-modules-0.4/strutil/strutil.h failed'
echo 'End of part 13, continue with part 14'
exit 0

