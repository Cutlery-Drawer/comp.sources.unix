Newsgroups: comp.sources.unix
From: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Subject: v28i198: liw-modules-0.4 - the LIW module set (for use with Publib), Part11/14
References: <1.785201893.15507@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Posting-Number: Volume 28, Issue 198
Archive-Name: liw-modules-0.4/part11

#!/bin/sh
# This is part 11 of a multipart archive.
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
# ============= liw-modules-0.4/strutil/strcstr.c ==============
if test ! -d 'liw-modules-0.4'; then
  echo 'x - creating directory liw-modules-0.4'
  mkdir 'liw-modules-0.4'
fi
if test ! -d 'liw-modules-0.4/strutil'; then
  echo 'x - creating directory liw-modules-0.4/strutil'
  mkdir 'liw-modules-0.4/strutil'
fi
if test -f 'liw-modules-0.4/strutil/strcstr.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strcstr.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strcstr.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strcstr.c' &&
/*
X * strcstr.c -- convert binary data into C string literal notation
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strcstr.c,v 1.2 1994/02/05 17:08:43 liw Exp"
X */
X
#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <string.h>
#include "publib/strutil.h"
X
X
/* Append a character to the end of the result string if it fits.  */
#define append(c)	(void)((m < max-1) && (str[m++] = (c)))
X
X
void strcstr(char *str, size_t max, const void *block, size_t n) {
X	static const char print[] = "'\"?\\abfnrtv";
X	static const char unprint[] = "'\"?\\\a\b\f\n\r\t\v";
X	int i, thishex, prevhex;
X	const char *p, *data;
X	size_t m;
X
X	assert(str != NULL);
X	assert(max > 0);
X	assert(block != NULL);
X	assert(!memoverlap(str, max, block, n));
X
X	data = block;
X	m = 0;
X	prevhex = 0;
X	while (m < max-1 && n-- > 0) {
X		thishex = 0;
X		if (*data == '\0') {
X			append('\\');
X			append('0');
X			if (isdigit(data[1])) {
X				append('0');
X				append('0');
X			}
X			++data;
X		} else if ((p = strchr(unprint, *data)) != NULL) {
X			append('\\');
X			append(print[p-unprint]);
X			++data;
X		} else if (isprint(*data) && !(prevhex && isxdigit(*data)))
X			append(*data++);
X		else {
X			append('\\');
X			append('x');
X			i = (CHAR_BIT/4+1)*4-4;
X			while (m < max-1 && i >= 0) {
X				append("0123456789abcdef"[(*data & (0xf << i)) >> i]);
X				i -= 4;
X			}
X			thishex = 1;
X			++data;
X		}
X		prevhex = thishex;
X	}
X	append('\0');
}
SHAR_EOF
  $shar_touch -am 0205190894 'liw-modules-0.4/strutil/strcstr.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strcstr.c' ||
  echo 'restore of liw-modules-0.4/strutil/strcstr.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strcstr.c'`"
  test 1434 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strcstr.c: original size 1434, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strdel.3 ==============
if test -f 'liw-modules-0.4/strutil/strdel.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strdel.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strdel.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strdel.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strdel.3,v 1.1.1.1 1994/02/03 17:25:29 liw Exp"
X.\"
X.TH STRDEL 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strdel \- delete characters from beginning of string
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrdel\fR(char *\fIs\fR, size_t \fIn\fR);
X.SH DESCRIPTION
\fIstrdel\fR removes the first \fIn\fR characters of \fIs\fR.  If
\fIn\fR is greater than the length of the string, all characters
in the string (not counting '\\0') are removed but no more.
X.SH "RETURN VALUE"
\fIstrdel\fR returns its first argument.
X.SH EXAMPLE
To change all occurences of "Pascal" in the input to "Yuck!", you might do
the following:
X.sp 1
X.nf
X.in +5
#include <string.h>
#include <stdio.h>
#include <publib.h>
X
int main(void) {
X	char line[512];
X
X	while (fgets(line, sizeof(line), stdio) != NULL) {
X		while ((p = strstr(line, "Pascal")) != NULL) {
X			strdel(p, 6);
X			strins(p, "Yuck!");
X		}
X		printf("%s", line);
X	}
X	return 0;
}
X.in -5
X.SH "SEE ALSO"
publib(3), strins(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/strdel.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strdel.3' ||
  echo 'restore of liw-modules-0.4/strutil/strdel.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strdel.3'`"
  test 1075 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strdel.3: original size 1075, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strdel.c ==============
if test -f 'liw-modules-0.4/strutil/strdel.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strdel.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strdel.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strdel.c' &&
/*
X * strdel.c -- remove characters from the beginning of a string
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strdel.c,v 1.1.1.1 1994/02/03 17:25:30 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
char *strdel(char *s, size_t n) {
X	size_t len;
X
X	assert(s != NULL);
X
X	len = strlen(s);
X	if (n > len)
X		n = len;
X	memmove(s, s+n, len+1 - n);
X	return s;
}
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/strdel.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strdel.c' ||
  echo 'restore of liw-modules-0.4/strutil/strdel.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strdel.c'`"
  test 423 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strdel.c: original size 423, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strend.3 ==============
if test -f 'liw-modules-0.4/strutil/strend.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strend.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strend.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strend.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strend.3,v 1.1 1994/06/20 20:30:10 liw Exp"
X.\"
X.TH STREND 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strend \- return pointer to the terminating '\\0' of a string
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrend\fR(const char *\fIs\fR);
X.SH DESCRIPTION
\fIstrend\fR will return a pointer to the '\\0' that terminates a string.
X.SH "SEE ALSO"
publib(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strend.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strend.3' ||
  echo 'restore of liw-modules-0.4/strutil/strend.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strend.3'`"
  test 478 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strend.3: original size 478, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strend.c ==============
if test -f 'liw-modules-0.4/strutil/strend.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strend.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strend.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strend.c' &&
/*
X * strend.c -- return pointer to the '\0' terminator of a string
X *
X * Part of publib.  See man page for more information.
X * "@(#)publib-strutil:strend.c,v 1.1 1994/06/20 20:30:11 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
char *strend(const char *s) {
X	assert(s != NULL);
X	return (char *)s + strlen(s);
}
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strend.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strend.c' ||
  echo 'restore of liw-modules-0.4/strutil/strend.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strend.c'`"
  test 350 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strend.c: original size 350, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strendzap.3 ==============
if test -f 'liw-modules-0.4/strutil/strendzap.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strendzap.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strendzap.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strendzap.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strendzap.3,v 1.3 1994/07/22 12:22:50 liw Exp"
X.\"
X.TH STRENDZAP 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strendzap \- remove pattern from end of str, if it is there
X.SH SYNOPSIS
X.nf
#include <publib.h>
int \fBstrendzap\fR(char *\fIstr\fR, const char *\fIpat\fR);
X.SH DESCRIPTION
\fIstrendzap\fR removes \fIpat\fR from the end of \fIstr\fR if it
is there.  Otherwise, it does nothing.
X.SH "RETURN VALUE"
\fIstrendzap\fR returns non-zero if it removed anything, 0 if not.
X.SH EXAMPLE
To remove the suffix .c from the end of a filename, you might do this:
X.sp 1
X.nf
X.in +5
#include <publib.h>
X
strendzap(filename, ".c");
X.in -5
X.SH "SEE ALSO"
publib(3), strzap(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0722152294 'liw-modules-0.4/strutil/strendzap.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strendzap.3' ||
  echo 'restore of liw-modules-0.4/strutil/strendzap.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strendzap.3'`"
  test 785 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strendzap.3: original size 785, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strendzap.c ==============
if test -f 'liw-modules-0.4/strutil/strendzap.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strendzap.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strendzap.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strendzap.c' &&
/*
X * strendzap.c -- remove pat from end of str, if it is there
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strendzap.c,v 1.2 1994/07/22 12:22:51 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
int strendzap(char *str, const char *pat) {
X	size_t len, patlen;
X
X	assert(str != NULL);
X	assert(pat != NULL);
X
X	len = strlen(str);
X	patlen = strlen(pat);
X
X	if (patlen <= len) {
X		str += len - patlen;
X		if (strcmp(str, pat) == 0) {
X			*str = '\0';
X			return 1;
X		}
X	}
X	return 0;
}
SHAR_EOF
  $shar_touch -am 0722152294 'liw-modules-0.4/strutil/strendzap.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strendzap.c' ||
  echo 'restore of liw-modules-0.4/strutil/strendzap.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strendzap.c'`"
  test 545 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strendzap.c: original size 545, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strgsub.3 ==============
if test -f 'liw-modules-0.4/strutil/strgsub.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strgsub.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strgsub.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strgsub.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strgsub.3,v 1.1.1.1 1994/02/03 17:25:30 liw Exp"
X.\"
X.TH STRGSUB 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strgsub \- substitute all occurences of pattern with another string
X.SH SYNOPSIS
X.nf
#include <publib.h>
int \fBstrgsub\fR(char *\fIstr\fR, const char *\fIpat\fR, const char *\fIsub\fR, size_t \fImax\fR);
X.SH DESCRIPTION
\fIstrgsub\fR finds all occurences of the pattern \fIpat\fR in the
string \fIstr\fR (using a method similar to \fIstrstr\fR(3) to find
the occurrences, i.e., no regular expressions), and replaces each with
\fIsub\fR. If \fIpat\fR does not occur in \fIstr\fR, no substitution is made.
The size (including the terminating '\\0') of the string after
the substitutions may be at most \fImax\fR chars.  If it would be larger,
no substitutions are made.
X.PP
Of course, if \fIsub\fR is an empty string, the occurences of the pattern 
are deleted from the string.
X.SH "RETURN VALUE"
\fIstrgsub\fR returns the number of substitutions made, or -1 if the
result would not have fit into \fImax\fR chars.
X.SH EXAMPLE
To substitute every "foo" with "bar" in a line, one might do the following.
X.sp 1
X.nf
X.in +5
strgsub(line, "foo", "bar", strlen(line)+1);
X.in -5
X.SH "SEE ALSO"
publib(3), strstr(3), strsub(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/strgsub.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strgsub.3' ||
  echo 'restore of liw-modules-0.4/strutil/strgsub.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strgsub.3'`"
  test 1346 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strgsub.3: original size 1346, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strgsub.c ==============
if test -f 'liw-modules-0.4/strutil/strgsub.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strgsub.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strgsub.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strgsub.c' &&
/*
X * strgsub.c -- substitute all occurences of pattern with another string
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strgsub.c,v 1.1.1.1 1994/02/03 17:25:30 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
int strgsub(char *str, const char *pat, const char *sub, size_t max) {
X	size_t lenpat, lensub;
X	const char *p;
X	int n;
X
X	assert(str != NULL);
X	assert(pat != NULL);
X	assert(*pat != '\0');
X	assert(sub != NULL);
X	assert(max >= strlen(str)+1);
X
X	/*
X	 * Check that the all substitutions will fit.
X	 */
X	lenpat = strlen(pat);
X	lensub = strlen(sub);
X	if (lenpat < lensub) {
X		for (n = 0, p = str; (p = strstr(p, pat)) != NULL; p += lenpat)
X			++n;
X		if (strlen(str)+1 + n*(lensub-lenpat) > max)
X			return -1;
X	}
X
X	/*
X	 * Substitute.
X	 */
X	for (n = 0; (str = strsub(str, pat, sub)) != NULL; ++n)
X		continue;
X	return n;
}
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/strgsub.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strgsub.c' ||
  echo 'restore of liw-modules-0.4/strutil/strgsub.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strgsub.c'`"
  test 892 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strgsub.c: original size 892, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strhash.3 ==============
if test -f 'liw-modules-0.4/strutil/strhash.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strhash.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strhash.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strhash.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strhash.3,v 1.1 1994/06/20 20:30:13 liw Exp"
X.\"
X.TH STRHASH 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strhash \- hash function for strings
X.SH SYNOPSIS
X.nf
#include <publib.h>
unsigned long \fBstrhash\fR(const char *\fIs\fR);
X.SH DESCRIPTION
\fIstrhash\fR is a hash function for strings.  It uses an algorithm
that tries to be good in most cases, but it is often possible to use
a better algorithm that takes better into account the characteristics
of the data for a given application.  However, \fIstrhash\fR often
good enough; test it before spending time to develop a better one.
X.SH "RETURN VALUE"
\fIstrhash\fR returns the computed hash value.  Note that the value
is not scaled into any particular range (all values that an unsigned
long can take are possible).  The caller will have to do the scaling
himself.
X.SH "SEE ALSO"
publib(3), hashtab(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strhash.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strhash.3' ||
  echo 'restore of liw-modules-0.4/strutil/strhash.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strhash.3'`"
  test 977 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strhash.3: original size 977, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strhash.c ==============
if test -f 'liw-modules-0.4/strutil/strhash.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strhash.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strhash.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strhash.c' &&
/*
X * strhash.c -- compute a hash value for a string
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strhash.c,v 1.1 1994/06/20 20:30:15 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
unsigned long strhash(const char *s) {
X	unsigned long h;
X
X	assert(s != NULL);
X	for (h = 0; *s != '\0'; ++s)
X		h = (h * 33) | *s;
X	return h;
}
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strhash.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strhash.c' ||
  echo 'restore of liw-modules-0.4/strutil/strhash.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strhash.c'`"
  test 394 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strhash.c: original size 394, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strinit.3 ==============
if test -f 'liw-modules-0.4/strutil/strinit.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strinit.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strinit.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strinit.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strinit.3,v 1.1 1994/06/20 20:30:16 liw Exp"
X.\"
X.TH STRINIT 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strinit \- initialize a string with a given character to a given length
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrinit\fR(char *\fIs\fR, int \fIc\fR, size_t \fIlen\fR) {
X.SH DESCRIPTION
\fIstrinit\fR initializes the string pointed to by \fIs\fR to be of
length \fIlen\fR, all characters being \fIc\fR, where the terminating
'\\0' is \fInot\fR included in the length, i.e., the string will use
\fIlen+1\fR characters.
X.SH "RETURN VALUE"
\fIstrinit\fR will return \fIs\fR.
X.SH EXAMPLE
To initialize a string to consist of twenty underscores, one would
do the following.
X.sp 1
X.nf
X.in +5
#include <publib.h>
X
char string[21];     /* note 21 to make room for '\\0' */
strinit(string, '_', 20);
X.in -5
X.SH "SEE ALSO"
publib(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strinit.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strinit.3' ||
  echo 'restore of liw-modules-0.4/strutil/strinit.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strinit.3'`"
  test 954 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strinit.3: original size 954, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strinit.c ==============
if test -f 'liw-modules-0.4/strutil/strinit.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strinit.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strinit.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strinit.c' &&
/*
X * strinit.c -- initialize a string to a given length with a given character
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strinit.c,v 1.1 1994/06/20 20:30:17 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
char *strinit(char *s, int c, size_t len) {
X	assert(s != NULL);
X
X	memset(s, c, len);
X	s[len] = '\0';
X	return s;
}
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strinit.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strinit.c' ||
  echo 'restore of liw-modules-0.4/strutil/strinit.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strinit.c'`"
  test 393 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strinit.c: original size 393, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strins.3 ==============
if test -f 'liw-modules-0.4/strutil/strins.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strins.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strins.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strins.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strins.3,v 1.2 1994/07/25 23:15:36 liw Exp"
X.\"
X.TH STRINS 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strins \- insert a string at the beginning of another string
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrins\fR(char *\fItgt\fR, const char *\fIsrc\fR);
X.SH DESCRIPTION
\fIstrins\fR inserts the \fIsrc\fR string at the beginning of the
\fItgt\fR string.  The strings must not overlap.  The target string
must contain enough memory to hold both strings.
X.SH "RETURN VALUE"
\fIstrins\fR returns its first argument.
X.SH EXAMPLE
See the manual page for \fIstrdel\fR(3) for an example.
X.SH "SEE ALSO"
publib(3), strdel(3), strnins(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0726021594 'liw-modules-0.4/strutil/strins.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strins.3' ||
  echo 'restore of liw-modules-0.4/strutil/strins.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strins.3'`"
  test 756 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strins.3: original size 756, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strins.c ==============
if test -f 'liw-modules-0.4/strutil/strins.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strins.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strins.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strins.c' &&
/*
X * strins.c -- insert a string at the beginning of another string
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strins.c,v 1.2 1994/02/05 17:08:44 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
char *strins(char *tgt, const char *src) {
X	size_t srclen;
X
X	assert(tgt != NULL);
X	assert(src != NULL);
X	assert(!memoverlap(tgt, strlen(tgt)+strlen(src)+1, src, strlen(src)+1));
X
X	srclen = strlen(src);
X	memmove(tgt + srclen, tgt, strlen(tgt) + 1);	/* +1 for '\0' */
X	memcpy(tgt, src, srclen);
X
X	return tgt;
}
SHAR_EOF
  $shar_touch -am 0205190894 'liw-modules-0.4/strutil/strins.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strins.c' ||
  echo 'restore of liw-modules-0.4/strutil/strins.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strins.c'`"
  test 576 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strins.c: original size 576, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strrev.3 ==============
if test -f 'liw-modules-0.4/strutil/strrev.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strrev.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strrev.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strrev.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strrev.3,v 1.3 1994/06/20 20:30:30 liw Exp"
X.\"
X.TH STRREV 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strrev \- reverse a string in place
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrrev\fR(char *\fIstr\fR);
X.SH DESCRIPTION
\fIstrrev\fR reverses the argument string in place, i.e., it swaps
the \fIi\fRth character from the beginning with the \fIi\fRth
character from the end.
X.SH "RETURN VALUE"
\fIstrrev\fR returns its argument.
X.SH EXAMPLE
Reversing "dlrow, elloh" would be done like the following.
X.sp 1
X.nf
X.in +5
char str[] = "dlrow, elloh";
X
puts(strrev(str));
X.in -5
X.sp 1
X.fi
This would output "hello, world".
Note that using the string literal as the argument would be an error,
since it is not allowable to modify string literals.
X.SH BUGS
Does not automatically detect palindromes, nor automatically return
without doing anything.
X.SH "SEE ALSO"
publib(3), memrev(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strrev.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strrev.3' ||
  echo 'restore of liw-modules-0.4/strutil/strrev.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strrev.3'`"
  test 1004 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strrev.3: original size 1004, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strltrim.3 ==============
if test -f 'liw-modules-0.4/strutil/strltrim.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strltrim.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strltrim.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strltrim.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strltrim.3,v 1.1.1.1 1994/02/03 17:25:29 liw Exp"
X.\"
X.TH STRLTRIM 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strltrim \- remove leading whitespace from string
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrltrim\fR(char *\fIs\fR);
X.SH DESCRIPTION
\fIstrltrim\fR removes all leading whitespace characters from the
beginning of a string, by moving everything starting from the first
non-whitespace character to the beginning of the string.  As whitespace
is counted everything for which \fIisspace\fR(3) returns true.
X.SH "RETURN VALUE"
\fIstrltrim\fR returns its argument.
X.SH EXAMPLE
To remove all indentation from all lines in a program, you might do
the following:
X.sp 1
X.nf
X.in +5
#include <publib.h>
X
int main(void) {
X	char line[512];
X
X	while (fgets(line, sizeof(line), stdio) != NULL) {
X		strltrim(line);
X		printf("%s", line);
X	}
X	return 0;
}
X.in -5
X.SH "SEE ALSO"
publib(3), strrtrim(3), strtrim(3), isspace(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/strltrim.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strltrim.3' ||
  echo 'restore of liw-modules-0.4/strutil/strltrim.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strltrim.3'`"
  test 1041 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strltrim.3: original size 1041, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strltrim.c ==============
if test -f 'liw-modules-0.4/strutil/strltrim.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strltrim.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strltrim.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strltrim.c' &&
/*
X * strltrim.c -- remove leading whitespace from string
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strltrim.c,v 1.1.1.1 1994/02/03 17:25:29 liw Exp"
X */
X
#include <assert.h>
#include <ctype.h>
#include <string.h>
X
#include "publib/strutil.h"
X
char *strltrim(char *s) {
X	char *t;
X
X	assert(s != NULL);
X	for (t = s; isspace(*t); ++t)
X		continue;
X	memmove(s, t, strlen(t)+1);	/* +1 so that '\0' is moved too */
X	return s;
}
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/strltrim.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strltrim.c' ||
  echo 'restore of liw-modules-0.4/strutil/strltrim.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strltrim.c'`"
  test 459 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strltrim.c: original size 459, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strmaxcpy.3 ==============
if test -f 'liw-modules-0.4/strutil/strmaxcpy.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strmaxcpy.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strmaxcpy.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strmaxcpy.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strmaxcpy.3,v 1.1.1.1 1994/02/03 17:25:29 liw Exp"
X.\"
X.TH STRMAXCPY 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strmaxcpy \- copy at most a given number of characters of string
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrmaxcpy\fR(char *\fItgt\fR, const char *\fIsrc\fR, size_t \fIn\fR);
X.SH DESCRIPTION
\fIstrmaxcpy\fR copies up to \fIn-1\fR characters from the beginning of
\fIsrc\fR to \fItgt\fR, then adds a '\\0'.  \fIn\fR must be at least 1.
The target string must be large enough to hold the result.
X.PP
Note that unlike \fIstrncpy\fR(3), this function always terminates the
result with '\\0'.  It also doesn't fill the result with extra '\\0'
characters.
X.SH "RETURN VALUE"
\fIstrmaxcpy\fR returns its first argument.
X.SH EXAMPLE
To print out the first 69 characters of a string, you might do the
following (although familiarity with printf's format string might
be more useful in this case).
X.sp 1
X.nf
X.in +5
#include <stdio.h>
#include <publib.h>
X
void print42(const char *string) {
X	char copy[43];	/* 42 + '\\0' */
X
X	puts(strmaxcpy(copy, string, sizeof(copy)));
}
X.in -5
X.SH "SEE ALSO"
publib(3), strncpy(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/strmaxcpy.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strmaxcpy.3' ||
  echo 'restore of liw-modules-0.4/strutil/strmaxcpy.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strmaxcpy.3'`"
  test 1245 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strmaxcpy.3: original size 1245, current size $shar_count"
fi
: || echo 'restore of liw-modules-0.4/strutil/strmaxcpy.c failed'
echo 'End of part 11, continue with part 12'
exit 0

