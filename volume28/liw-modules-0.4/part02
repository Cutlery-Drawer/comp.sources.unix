Newsgroups: comp.sources.unix
From: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Subject: v28i189: liw-modules-0.4 - the LIW module set (for use with Publib), Part02/14
References: <1.785201893.15507@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Posting-Number: Volume 28, Issue 189
Archive-Name: liw-modules-0.4/part02

#!/bin/sh
# This is part 02 of a multipart archive.
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
# ============= liw-modules-0.4/bitarr/ba_and_ba.c ==============
if test ! -d 'liw-modules-0.4'; then
  echo 'x - creating directory liw-modules-0.4'
  mkdir 'liw-modules-0.4'
fi
if test ! -d 'liw-modules-0.4/bitarr'; then
  echo 'x - creating directory liw-modules-0.4/bitarr'
  mkdir 'liw-modules-0.4/bitarr'
fi
if test -f 'liw-modules-0.4/bitarr/ba_and_ba.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/bitarr/ba_and_ba.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/bitarr/ba_and_ba.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/bitarr/ba_and_ba.c' &&
/*
X * ba_and_ba.c -- and a set with another set
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-bitarr:ba_and_ba.c,v 1.2 1993/11/29 19:41:40 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/bitarr.h"
X
void ba_and_ba(Bitarr *u1, const Bitarr *u2) {
X	size_t i, size, u1size;
X
X	assert(u1 != NULL);
X	assert(u2 != NULL);
X	assert(u1->rnglen == 0 || u1->w != NULL);
X	assert(u2->rnglen == 0 || u2->w != NULL);
X
X	u1size = ba_num2word(u1->rnglen);
X	size = ba_num2word(u2->rnglen);
X	if (u1size < size)
X		size = u1size;
X	for (i = 0; i < size; ++i)
X		u1->w[i] &= u2->w[i];
X	if (size < u1size)
X		memset(u1->w + size, 0, u1size - size);
}
SHAR_EOF
  $shar_touch -am 1129214193 'liw-modules-0.4/bitarr/ba_and_ba.c' &&
  chmod 0600 'liw-modules-0.4/bitarr/ba_and_ba.c' ||
  echo 'restore of liw-modules-0.4/bitarr/ba_and_ba.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/bitarr/ba_and_ba.c'`"
  test 670 -eq "$shar_count" ||
    echo "liw-modules-0.4/bitarr/ba_and_ba.c: original size 670, current size $shar_count"
fi
# ============= liw-modules-0.4/bitarr/ba_clear.c ==============
if test -f 'liw-modules-0.4/bitarr/ba_clear.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/bitarr/ba_clear.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/bitarr/ba_clear.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/bitarr/ba_clear.c' &&
/*
X * ba_clear.c -- remove number from set
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-bitarr:ba_clear.c,v 1.2 1994/07/16 12:04:15 liw Exp"
X */
X
#include <assert.h>
#include "publib/bitarr.h"
X
void ba_clear(Bitarr *u, unsigned number) {
X	assert(u != NULL);
X	assert(u->rnglen == 0 || u->w != NULL);
X
X	if (number < u->rnglen)
X		u->w[ba_num2word(number)] &= ~ba_num2mask(number);
}
SHAR_EOF
  $shar_touch -am 0716150494 'liw-modules-0.4/bitarr/ba_clear.c' &&
  chmod 0600 'liw-modules-0.4/bitarr/ba_clear.c' ||
  echo 'restore of liw-modules-0.4/bitarr/ba_clear.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/bitarr/ba_clear.c'`"
  test 407 -eq "$shar_count" ||
    echo "liw-modules-0.4/bitarr/ba_clear.c: original size 407, current size $shar_count"
fi
# ============= liw-modules-0.4/bitarr/ba_clear_all.c ==============
if test -f 'liw-modules-0.4/bitarr/ba_clear_all.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/bitarr/ba_clear_all.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/bitarr/ba_clear_all.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/bitarr/ba_clear_all.c' &&
/*
X * ba_clear_all.c -- make set empty
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-bitarr:ba_clear_all.c,v 1.1.1.1 1993/11/20 17:00:34 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/bitarr.h"
X
void ba_clear_all(Bitarr *u) {
X	assert(u != NULL);
X	assert(u->rnglen == 0 || u->w != NULL);
X
X	if (u->rnglen > 0)
X		memset(u->w, 0, ba_num2word(u->rnglen));
}
SHAR_EOF
  $shar_touch -am 1120190093 'liw-modules-0.4/bitarr/ba_clear_all.c' &&
  chmod 0600 'liw-modules-0.4/bitarr/ba_clear_all.c' ||
  echo 'restore of liw-modules-0.4/bitarr/ba_clear_all.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/bitarr/ba_clear_all.c'`"
  test 403 -eq "$shar_count" ||
    echo "liw-modules-0.4/bitarr/ba_clear_all.c: original size 403, current size $shar_count"
fi
# ============= liw-modules-0.4/bitarr/ba_copy.c ==============
if test -f 'liw-modules-0.4/bitarr/ba_copy.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/bitarr/ba_copy.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/bitarr/ba_copy.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/bitarr/ba_copy.c' &&
/*
X * ba_copy.c -- create a copy of a set
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-bitarr:ba_copy.c,v 1.3 1994/07/16 15:28:25 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "publib/bitarr.h"
#include "publib/errormsg.h"
X
Bitarr *ba_copy(const Bitarr *u) {
X	Bitarr *uc;
X
X	assert(u != NULL);
X	assert(u->rnglen == 0 || u->w != NULL);
X
X	uc = ba_create();
X	if (uc == NULL) {
X		__publib_error("ba_create failed");
X		return NULL;
X	}
X	if (ba_resize(uc, ba_num2word(u->rnglen)) == -1) {
X		__publib_error("ba_resize failed");
X		return NULL;
X	}
X	memcpy(uc->w, u->w, ba_num2word(u->rnglen));
X	return uc;
}
SHAR_EOF
  $shar_touch -am 0716182894 'liw-modules-0.4/bitarr/ba_copy.c' &&
  chmod 0600 'liw-modules-0.4/bitarr/ba_copy.c' ||
  echo 'restore of liw-modules-0.4/bitarr/ba_copy.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/bitarr/ba_copy.c'`"
  test 661 -eq "$shar_count" ||
    echo "liw-modules-0.4/bitarr/ba_copy.c: original size 661, current size $shar_count"
fi
# ============= liw-modules-0.4/bitarr/ba_create.c ==============
if test -f 'liw-modules-0.4/bitarr/ba_create.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/bitarr/ba_create.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/bitarr/ba_create.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/bitarr/ba_create.c' &&
/*
X * ba_create.c -- create an empty set
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-bitarr:ba_create.c,v 1.3 1994/07/16 15:28:27 liw Exp"
X */
X
#include <stdlib.h>
#include "publib/bitarr.h"
#include "publib/errormsg.h"
X
Bitarr *ba_create(void) {
X	Bitarr *u;
X
X	u = malloc(sizeof(Bitarr));
X	if (u == NULL) {
X		__publib_error("malloc failed");
X		return NULL;
X	}
X
X	u->w = NULL;
X	u->rnglen = 0;
X
X	return u;
}
SHAR_EOF
  $shar_touch -am 0716182894 'liw-modules-0.4/bitarr/ba_create.c' &&
  chmod 0600 'liw-modules-0.4/bitarr/ba_create.c' ||
  echo 'restore of liw-modules-0.4/bitarr/ba_create.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/bitarr/ba_create.c'`"
  test 433 -eq "$shar_count" ||
    echo "liw-modules-0.4/bitarr/ba_create.c: original size 433, current size $shar_count"
fi
# ============= liw-modules-0.4/bitarr/ba_destroy.c ==============
if test -f 'liw-modules-0.4/bitarr/ba_destroy.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/bitarr/ba_destroy.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/bitarr/ba_destroy.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/bitarr/ba_destroy.c' &&
/*
X * ba_destroy.c -- free resources allocated to a set
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-bitarr:ba_destroy.c,v 1.1.1.1 1993/11/20 17:00:34 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include "publib/bitarr.h"
X
void ba_destroy(Bitarr *u) {
X	assert(u != NULL);
X	free(u->w);
X	free(u);
}
SHAR_EOF
  $shar_touch -am 1120190093 'liw-modules-0.4/bitarr/ba_destroy.c' &&
  chmod 0600 'liw-modules-0.4/bitarr/ba_destroy.c' ||
  echo 'restore of liw-modules-0.4/bitarr/ba_destroy.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/bitarr/ba_destroy.c'`"
  test 334 -eq "$shar_count" ||
    echo "liw-modules-0.4/bitarr/ba_destroy.c: original size 334, current size $shar_count"
fi
# ============= liw-modules-0.4/bitarr/ba_not.c ==============
if test -f 'liw-modules-0.4/bitarr/ba_not.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/bitarr/ba_not.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/bitarr/ba_not.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/bitarr/ba_not.c' &&
/*
X * ba_not.c -- complement a set
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-bitarr:ba_not.c,v 1.1.1.1 1993/11/20 17:00:34 liw Exp"
X */
X
#include <assert.h>
#include "publib/bitarr.h"
X
void ba_not(Bitarr *u) {
X	size_t i, size;
X
X	assert(u != NULL);
X	assert(u->rnglen == 0 || u->w != NULL);
X
X	size = ba_num2word(u->rnglen);
X	for (i = 0; i < size; ++i)
X		u->w[i] = ~u->w[i];
}
SHAR_EOF
  $shar_touch -am 1120190093 'liw-modules-0.4/bitarr/ba_not.c' &&
  chmod 0600 'liw-modules-0.4/bitarr/ba_not.c' ||
  echo 'restore of liw-modules-0.4/bitarr/ba_not.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/bitarr/ba_not.c'`"
  test 404 -eq "$shar_count" ||
    echo "liw-modules-0.4/bitarr/ba_not.c: original size 404, current size $shar_count"
fi
# ============= liw-modules-0.4/bitarr/ba_or_ba.c ==============
if test -f 'liw-modules-0.4/bitarr/ba_or_ba.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/bitarr/ba_or_ba.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/bitarr/ba_or_ba.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/bitarr/ba_or_ba.c' &&
/*
X * ba_or_ba.c -- or a set with another set
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-bitarr:ba_or_ba.c,v 1.3 1994/07/16 15:28:29 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "publib/bitarr.h"
#include "publib/errormsg.h"
X
int ba_or_ba(Bitarr *u1, const Bitarr *u2) {
X	size_t i, size;
X
X	assert(u1 != NULL);
X	assert(u2 != NULL);
X	assert(u1->rnglen == 0 || u1->w != NULL);
X	assert(u2->rnglen == 0 || u2->w != NULL);
X
X	if (u1->rnglen < u2->rnglen && ba_resize(u1, u2->rnglen) == -1) {
X		__publib_error("ba_resize failed");
X		return -1;
X	}
X
X	assert(u1->rnglen >= u2->rnglen);
X	size = ba_num2word(u2->rnglen);
X	for (i = 0; i < size; ++i)
X		u1->w[i] |= u2->w[i];
X
X	return 0;
}
SHAR_EOF
  $shar_touch -am 0716182894 'liw-modules-0.4/bitarr/ba_or_ba.c' &&
  chmod 0600 'liw-modules-0.4/bitarr/ba_or_ba.c' ||
  echo 'restore of liw-modules-0.4/bitarr/ba_or_ba.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/bitarr/ba_or_ba.c'`"
  test 741 -eq "$shar_count" ||
    echo "liw-modules-0.4/bitarr/ba_or_ba.c: original size 741, current size $shar_count"
fi
# ============= liw-modules-0.4/bitarr/ba_or_not_ba.c ==============
if test -f 'liw-modules-0.4/bitarr/ba_or_not_ba.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/bitarr/ba_or_not_ba.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/bitarr/ba_or_not_ba.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/bitarr/ba_or_not_ba.c' &&
/*
X * ba_or_not_ba.c -- or a set with the complement of another set
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-bitarr:ba_or_not_ba.c,v 1.2 1993/11/29 19:41:41 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "publib/bitarr.h"
X
void ba_or_not_ba(Bitarr *u1, const Bitarr *u2) {
X	size_t i, size, u1size;
X
X	assert(u1 != NULL);
X	assert(u2 != NULL);
X	assert(u1->rnglen == 0 || u1->w != NULL);
X	assert(u2->rnglen == 0 || u2->w != NULL);
X
X	u1size = ba_num2word(u1->rnglen);
X	size = ba_num2word(u2->rnglen);
X	if (u1size < size)
X		size = u1size;
X	for (i = 0; i < size; ++i)
X		u1->w[i] |= ~u2->w[i];
X	if (size < u1size)
X		memset(u1->w + size, ~(unsigned char)0, u1size - size);
}
SHAR_EOF
  $shar_touch -am 1129214193 'liw-modules-0.4/bitarr/ba_or_not_ba.c' &&
  chmod 0600 'liw-modules-0.4/bitarr/ba_or_not_ba.c' ||
  echo 'restore of liw-modules-0.4/bitarr/ba_or_not_ba.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/bitarr/ba_or_not_ba.c'`"
  test 733 -eq "$shar_count" ||
    echo "liw-modules-0.4/bitarr/ba_or_not_ba.c: original size 733, current size $shar_count"
fi
# ============= liw-modules-0.4/bitarr/ba_query.c ==============
if test -f 'liw-modules-0.4/bitarr/ba_query.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/bitarr/ba_query.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/bitarr/ba_query.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/bitarr/ba_query.c' &&
/*
X * ba_query.c -- check if number belongs to set
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-bitarr:ba_query.c,v 1.1.1.1 1993/11/20 17:00:34 liw Exp"
X */
X
#include <assert.h>
#include "publib/bitarr.h"
X
int ba_query(Bitarr *u, unsigned number) {
X	assert(u != NULL);
X	if (number >= u->rnglen)
X		return 0;
X	assert(u->w != NULL);
X	return u->w[ba_num2word(number)] & ba_num2mask(number);
}
SHAR_EOF
  $shar_touch -am 1120190093 'liw-modules-0.4/bitarr/ba_query.c' &&
  chmod 0600 'liw-modules-0.4/bitarr/ba_query.c' ||
  echo 'restore of liw-modules-0.4/bitarr/ba_query.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/bitarr/ba_query.c'`"
  test 416 -eq "$shar_count" ||
    echo "liw-modules-0.4/bitarr/ba_query.c: original size 416, current size $shar_count"
fi
# ============= liw-modules-0.4/bitarr/ba_resize.c ==============
if test -f 'liw-modules-0.4/bitarr/ba_resize.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/bitarr/ba_resize.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/bitarr/ba_resize.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/bitarr/ba_resize.c' &&
/*
X * ba_resize.c -- change size of set
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-bitarr:ba_resize.c,v 1.3 1994/07/16 15:28:30 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "publib/bitarr.h"
#include "publib/errormsg.h"
X
int ba_resize(Bitarr *u, size_t rnglen) {
X	size_t oldsize, newsize;
X	unsigned *w;
X
X	assert(u != NULL);
X
X	oldsize = ba_num2word(u->rnglen);
X	newsize = ba_num2word(rnglen);
X	w = realloc(u->w, newsize);
X	if (w == NULL) {
X		__publib_error("realloc failed");
X		return -1;
X	}
X
X	if (oldsize < newsize)
X		memset(w + oldsize, 0, newsize - oldsize);
X
X	u->w = w;
X	u->rnglen = rnglen;
X	return 0;
}
SHAR_EOF
  $shar_touch -am 0716182894 'liw-modules-0.4/bitarr/ba_resize.c' &&
  chmod 0600 'liw-modules-0.4/bitarr/ba_resize.c' ||
  echo 'restore of liw-modules-0.4/bitarr/ba_resize.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/bitarr/ba_resize.c'`"
  test 674 -eq "$shar_count" ||
    echo "liw-modules-0.4/bitarr/ba_resize.c: original size 674, current size $shar_count"
fi
# ============= liw-modules-0.4/bitarr/ba_set.c ==============
if test -f 'liw-modules-0.4/bitarr/ba_set.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/bitarr/ba_set.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/bitarr/ba_set.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/bitarr/ba_set.c' &&
/*
X * ba_set.c -- add number to set
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-bitarr:ba_set.c,v 1.3 1994/07/16 15:28:32 liw Exp"
X */
X
#include <assert.h>
#include "publib/bitarr.h"
#include "publib/errormsg.h"
X
int ba_set(Bitarr *u, unsigned number) {
X	assert(u != NULL);
X
X	if (number >= u->rnglen && ba_resize(u, number+1) == -1) {
X		__publib_error("ba_resize failed");
X		return -1;
X	}
X	u->w[ba_num2word(number)] |= ba_num2mask(number);
X	return 0;
}
SHAR_EOF
  $shar_touch -am 0716182894 'liw-modules-0.4/bitarr/ba_set.c' &&
  chmod 0600 'liw-modules-0.4/bitarr/ba_set.c' ||
  echo 'restore of liw-modules-0.4/bitarr/ba_set.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/bitarr/ba_set.c'`"
  test 481 -eq "$shar_count" ||
    echo "liw-modules-0.4/bitarr/ba_set.c: original size 481, current size $shar_count"
fi
# ============= liw-modules-0.4/bitarr/ba_xor_ba.c ==============
if test -f 'liw-modules-0.4/bitarr/ba_xor_ba.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/bitarr/ba_xor_ba.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/bitarr/ba_xor_ba.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/bitarr/ba_xor_ba.c' &&
/*
X * ba_xor_ba.c -- xor a set with another set
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-bitarr:ba_xor_ba.c,v 1.2 1993/11/29 19:41:42 liw Exp"
X */
X
#include <assert.h>
#include "publib/bitarr.h"
X
void ba_xor_ba(Bitarr *u1, const Bitarr *u2) {
X	size_t i, size, u2size;
X
X	assert(u1 != NULL);
X	assert(u2 != NULL);
X	assert(u1->rnglen == 0 || u1->w != NULL);
X	assert(u2->rnglen == 0 || u2->w != NULL);
X
X	size = ba_num2word(u1->rnglen);
X	u2size = ba_num2word(u2->rnglen);
X	if (u2size < size)
X		size = u2size;
X	for (i = 0; i < size; ++i)
X		u1->w[i] ^= u2->w[i];
}
SHAR_EOF
  $shar_touch -am 1129214193 'liw-modules-0.4/bitarr/ba_xor_ba.c' &&
  chmod 0600 'liw-modules-0.4/bitarr/ba_xor_ba.c' ||
  echo 'restore of liw-modules-0.4/bitarr/ba_xor_ba.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/bitarr/ba_xor_ba.c'`"
  test 588 -eq "$shar_count" ||
    echo "liw-modules-0.4/bitarr/ba_xor_ba.c: original size 588, current size $shar_count"
fi
# ============= liw-modules-0.4/bitarr/bitarr.3 ==============
if test -f 'liw-modules-0.4/bitarr/bitarr.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/bitarr/bitarr.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/bitarr/bitarr.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/bitarr/bitarr.3' &&
X.\" part of publib
X.\" "@(#)publib-bitarr:bitarr.3,v 1.3 1994/08/28 17:06:25 liw Exp"
X.\"
X.TH BITARR 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
ba_and_ba, ba_clear, ba_clear_all, ba_copy, ba_create,
ba_destroy, ba_not, ba_or_ba, ba_or_not_ba, ba_query,
ba_resize, ba_set, ba_xor_ba \- bit array manipulation
X.SH SYNOPSIS
X.nf
#include <bitarr.h>
X.sp 1
Bitarr *\fBba_create\fR(void);
void \fBba_destroy\fR(Bitarr *\fIba\fR);
Bitarr *\fBba_copy\fR(const Bitarr *\fIba\fR);
int \fBba_resize\fR(Bitarr *\fIba\fR, size_t \fImax_number\fR);
X.sp 1
int \fBba_set\fR(Bitarr *\fIba\fR, unsigned \fInumber\fR);
int \fBba_clear\fR(Bitarr *\fIba\fR, unsigned \fInumber\fR);
void \fBba_clear_all\fR(Bitarr *\fIba\fR);
int \fBba_query\fR(Bitarr *\fIba\fR, unsigned \fInumber\fR);
void \fBba_and_ba\fR(Bitarr *\fIba1\fR, const Bitarr *\fIba2\fR);
int \fBba_or_ba\fR(Bitarr *\fIba1\fR, const Bitarr *\fIba2\fR);
void \fBba_xor_ba\fR(Bitarr *\fIba1\fR, const Bitarr *\fIba2\fR);
void \fBba_or_not_ba\fR(Bitarr *\fIba1\fR, const Bitarr *\fIba2\fR);
void \fBba_not\fR(Bitarr *\fIba\fR);
X.SH "DESCRIPTION"
These functions operate on bit arrays.
\fIba_create\fR creates one and \fIba_destroy\fR it.
\fIba_copy\fR makes a copy of one, and \fIba_resize\fR changes its size.
The bit arrays resize themselves automatically,
but \fIba_resize\fR can be used to get rid of extra memory allocated for
the array, or to make sure there is enough memory allocated for the array
(so that further operations are guaranteed to work).
X.PP
\fIba_set\fR sets one element (bit) in the array to 1.
\fIba_clear\fR clears one element (sets it to 0),
\fIba_clear_all\fR clears all elements.
\fIba_query\fR returns the current value of an element.
X.PP
\fIba_and_ba\fR, \fIba_or_ba\fR, \fIba_xor_ba\fR, and \fIba_or_ba\fR
do logical operations on two arrays.
The result will be stored in the first one.
\fIba_not\fR will invert all elements in the array.
X.SH RETURNS
\fIba_create\fR and \fIba_copy\fR return a pointer to the new array,
or NULL if they fail.
Those that return an integer, return -1 for error, non-negative for
success.
X.SH "SEE ALSO"
publib(3), iset(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0828200694 'liw-modules-0.4/bitarr/bitarr.3' &&
  chmod 0600 'liw-modules-0.4/bitarr/bitarr.3' ||
  echo 'restore of liw-modules-0.4/bitarr/bitarr.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/bitarr/bitarr.3'`"
  test 2200 -eq "$shar_count" ||
    echo "liw-modules-0.4/bitarr/bitarr.3: original size 2200, current size $shar_count"
fi
# ============= liw-modules-0.4/bitarr/bitarr.h ==============
if test -f 'liw-modules-0.4/bitarr/bitarr.h' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/bitarr/bitarr.h (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/bitarr/bitarr.h (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/bitarr/bitarr.h' &&
#ifndef __publib_bitarr_h
#define __publib_bitarr_h
X
#include <stddef.h>	/* need size_t */
#include <limits.h>	/* need CHAR_BIT */
X
typedef struct {
X	unsigned *w;
X	size_t rnglen;
} Bitarr;
X
/* How many bits are there in an unsigned int? */
#define ba_bits		(sizeof(unsigned)*CHAR_BIT)
X
/* Compute word a given bit is stored in */
#define ba_num2word(i)	((i) / ba_bits)
X
/* Create bitmask for one word, given index into bit array */
#define ba_num2mask(i)	(1 << ((i) % ba_bits))
X
Bitarr *ba_create(void);
void ba_destroy(Bitarr *__ba);
Bitarr *ba_copy(const Bitarr *__ba);
int ba_resize(Bitarr *__ba, size_t __max_number);
X
int ba_set(Bitarr *__ba, unsigned __number);		/* ba[number] = 1 */
void ba_clear(Bitarr *__ba, unsigned __number);		/* ba[number] = 0 */
void ba_clear_all(Bitarr *__ba);			/* ba[*] = 0 */
int ba_query(Bitarr *__ba, unsigned __number);		/* ba[number] */
void ba_and_ba(Bitarr *__ba1, const Bitarr *__ba2);	/* ba1 &= ba2 */
int ba_or_ba(Bitarr *__ba1, const Bitarr *__ba2);	/* ba1 |= ba2 */
void ba_xor_ba(Bitarr *__ba1, const Bitarr *__ba2);	/* ba1 ^= ba2 */
void ba_or_not_ba(Bitarr *__ba1, const Bitarr *__ba2);	/* ba1 |= ~ba2 */
void ba_not(Bitarr *__ba);				/* ba = ~ba */
X
#endif
SHAR_EOF
  $shar_touch -am 0716150494 'liw-modules-0.4/bitarr/bitarr.h' &&
  chmod 0600 'liw-modules-0.4/bitarr/bitarr.h' ||
  echo 'restore of liw-modules-0.4/bitarr/bitarr.h failed'
  shar_count="`wc -c < 'liw-modules-0.4/bitarr/bitarr.h'`"
  test 1207 -eq "$shar_count" ||
    echo "liw-modules-0.4/bitarr/bitarr.h: original size 1207, current size $shar_count"
fi
# ============= liw-modules-0.4/cmp/Makefile ==============
if test ! -d 'liw-modules-0.4/cmp'; then
  echo 'x - creating directory liw-modules-0.4/cmp'
  mkdir 'liw-modules-0.4/cmp'
fi
if test -f 'liw-modules-0.4/cmp/Makefile' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/cmp/Makefile (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/cmp/Makefile (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/cmp/Makefile' &&
objs = cmp.o
include $(srcdir)/Generic.mk
X
$(objs): cmp.h
SHAR_EOF
  $shar_touch -am 1120190193 'liw-modules-0.4/cmp/Makefile' &&
  chmod 0600 'liw-modules-0.4/cmp/Makefile' ||
  echo 'restore of liw-modules-0.4/cmp/Makefile failed'
  shar_count="`wc -c < 'liw-modules-0.4/cmp/Makefile'`"
  test 58 -eq "$shar_count" ||
    echo "liw-modules-0.4/cmp/Makefile: original size 58, current size $shar_count"
fi
# ============= liw-modules-0.4/cmp/README ==============
if test -f 'liw-modules-0.4/cmp/README' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/cmp/README (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/cmp/README (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/cmp/README' &&
README for Publib module cmp
Lars Wirzenius
"@(#)publib-cmp:README,v 1.2 1994/08/28 17:09:07 liw Exp"
X
These routines implement comparison functions for qsort(3),
bsearch(3) and others with the same interface.
X
----------------------
X
Copyright (c) 1994 Lars Wirzenius.  All rights reserved.
X
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
X
1. Redistributions of source code must retain the above copyright
X   notice, this list of conditions and the following disclaimer.
X
2. Redistributions in binary form must reproduce the above copyright
X   notice, this list of conditions and the following disclaimer in the
X   documentation and/or other materials provided with the distribution.
X
THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
SHAR_EOF
  $shar_touch -am 0828200994 'liw-modules-0.4/cmp/README' &&
  chmod 0600 'liw-modules-0.4/cmp/README' ||
  echo 'restore of liw-modules-0.4/cmp/README failed'
  shar_count="`wc -c < 'liw-modules-0.4/cmp/README'`"
  test 1487 -eq "$shar_count" ||
    echo "liw-modules-0.4/cmp/README: original size 1487, current size $shar_count"
fi
# ============= liw-modules-0.4/cmp/cmp.3 ==============
if test -f 'liw-modules-0.4/cmp/cmp.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/cmp/cmp.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/cmp/cmp.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/cmp/cmp.3' &&
X.\" part of publib
X.\" "@(#)publib-cmp:cmp.3,v 1.2 1994/02/03 17:33:52 liw Exp"
X.\"
X.TH COMPARE 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
cmp_set_offset,
cmp_struct,
cmp_char,
cmp_short,
cmp_int,
cmp_long,
cmp_float,
cmp_double,
cmp_long_double,
cmp_schar,
cmp_uchar,
cmp_ushort,
cmp_uint,
cmp_ulong,
cmp_charptr,
cmp_chararr \- comparison functions for qsort, bsearch, and others
X.SH SYNOPSIS
X.nf
#include <cmp.h>
void \fBcmp_set_offset\fR(size_t \fIoffset\fR, int (*)(const void *, const void *));
int \fBcmp_struct\fR(const void *, const void *);
X.sp 1
int \fBcmp_char\fR(const void *, const void *);
int \fBcmp_short\fR(const void *, const void *);
int \fBcmp_int\fR(const void *, const void *);
int \fBcmp_long\fR(const void *, const void *);
int \fBcmp_float\fR(const void *, const void *);
int \fBcmp_double\fR(const void *, const void *);
int \fBcmp_long_double\fR(const void *, const void *);
X.sp 1
int \fBcmp_schar\fR(const void *, const void *);
X.sp 1
int \fBcmp_uchar\fR(const void *, const void *);
int \fBcmp_ushort\fR(const void *, const void *);
int \fBcmp_uint\fR(const void *, const void *);
int \fBcmp_ulong\fR(const void *, const void *);
X.sp 1
int \fBcmp_charptr\fR(const void *, const void *);
int \fBcmp_chararr\fR(const void *, const void *);
X.fi
X.SH "DESCRIPTION"
The functions declared above, with the exception of
\fIcmp_set_offset\fR, compare two array elements of the indicated type
when given pointers to them.  The functions are designed to work with
\fIqsort(3)\fR, \fIbsearch(3)\fR, and a number of other library
functions which all need the same type of comparison function.  They
all return negative if the value indicated by the first argument is
less than the second, 0 if they are the same, and positive otherwise.
X.PP
\fIcmp_struct\fR compares elements of a structure.  It needs to know
the offset of the element, and a comparison function suitable for the
type of the element.  These are set with \fIcmp_set_offset\fR, which
should be called before \fIqsort(3)\fR.  The settings stay in effect
until changed.
X.SH "SEE ALSO"
publib(3), qsort(3), bsearch(3), isort(3), lsearch(3), lfind(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203193394 'liw-modules-0.4/cmp/cmp.3' &&
  chmod 0600 'liw-modules-0.4/cmp/cmp.3' ||
  echo 'restore of liw-modules-0.4/cmp/cmp.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/cmp/cmp.3'`"
  test 2207 -eq "$shar_count" ||
    echo "liw-modules-0.4/cmp/cmp.3: original size 2207, current size $shar_count"
fi
: || echo 'restore of liw-modules-0.4/cmp/cmp.c failed'
echo 'End of part 2, continue with part 3'
exit 0

