Newsgroups: comp.sources.unix
From: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Subject: v28i201: liw-modules-0.4 - the LIW module set (for use with Publib), Part14/14
References: <1.785201893.15507@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Posting-Number: Volume 28, Issue 201
Archive-Name: liw-modules-0.4/part14

#!/bin/sh
# This is part 14 of a multipart archive.
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
# ============= liw-modules-0.4/strutil/strutil.h ==============
if test ! -d 'liw-modules-0.4'; then
  echo 'x - creating directory liw-modules-0.4'
  mkdir 'liw-modules-0.4'
fi
if test ! -d 'liw-modules-0.4/strutil'; then
  echo 'x - creating directory liw-modules-0.4/strutil'
  mkdir 'liw-modules-0.4/strutil'
fi
if test -f 'liw-modules-0.4/strutil/strutil.h' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strutil.h (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strutil.h (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strutil.h' &&
#ifndef __publib_strutil_h
#define __publib_strutil_h
X
#include <stddef.h>	/* need size_t */
X
void *memarrfill(void *, size_t, size_t);
void *memdel(void *, size_t, size_t);
void *memfill(void *, size_t, const void *, size_t);
void *memins(void *, size_t, const void *, size_t);
void memisort(void *, size_t, size_t, const void *,
X		int (*)(const void *, const void *));
void *memmem(const void *, size_t, const void *, size_t);
int memoverlap(const void *, size_t, const void *, size_t);
void *memrchr(const void *, int, size_t);
void *memrev(void *, size_t, size_t);
void *memrmem(const void *, size_t, const void *, size_t);
void memswap(void *, void *, size_t);
void *memshuffle(void *, size_t, size_t);
X
char *stracat(const char *, ...);
char *stranaxfrm(char *);
char *strchange(char *, size_t, const char *, size_t);
void strcins(char *, int);
void strcstr(char *, size_t, const void *, size_t);
char *strdel(char *, size_t);
char *strend(const char *);
int strendzap(char *, const char *);
int strgsub(char *, const char *, const char *, size_t);
unsigned long strhash(const char *);
char *strinit(char *, int, size_t);
char *strins(char *, const char *);
char *strltrim(char *);
char *strnins(char *, const char *, size_t);
char *strmaxcpy(char *, const char *, size_t);
char *strmove(char *, const char *);
char *strmtrim(char *);
char *strndup(const char *, size_t);
int stroverlap(const char *, const char *);
char *strrev(char *);
char *strright(const char *, size_t);
char *strrot13(char *);
char *strrstr(const char *, const char *);
char *strset(char *, int);
int strsplit(char *, char **, int, const char *);
char *strsub(char *, const char *, const char *);
char *strrtrim(char *);
char *strtrim(char *);
char *strshuffle(char *);
char *strtabify(char *, size_t);
void strtrexpand(char *, const char *);
void struncstr(void *, const char *, size_t);
char *struntabify(char *, size_t);
int strvars(char *, size_t, char *(*)(const char *));
int strzap(char *, const char *);
X
/* new */
X
#if 0
X
char *strmany(char *, const char *, size_t);
X
unsigned long memsum(const void *buf, size_t n) {
X	assert(buf != NULL);
X	assert(0);
X	/* This is as yet unwritten.  I will need to find a good source
X	   for how the checksum is implemented in for example sum(1).
X	   I might be able to use GNU's or BSD's versions, but will have
X	   to look into licensing. */
X	return 0;
}
X
int strvercmp(const void *, const void *);
X
X
int strgetver(const char *, int *, int *, int *);
X
int strgetver(const char *version, int *major, int *minor, int *patchlevel) {
X	char *p;
X
X	assert(version != NULL);
X	assert(major != NULL);
X	assert(minor != NULL);
X	assert(patchlevel != NULL);
X
X	*major = (int) strtol(version, &p, 10);
X	*minor = (int) strtol(p, &p, 10);
X	*patchlevel = (int) strtol(p, &p, 10);
X	if (*p != '\0' || p == version)
X		return -1;
X	if (*major < 0 || *minor < 0 || *patchlevel < 0)
X		return -1;
X	return 0;
}
X
X
int strsoundex(const char *);
X
X
#endif
X
#endif
SHAR_EOF
  $shar_touch -am 0828211194 'liw-modules-0.4/strutil/strutil.h' &&
  chmod 0600 'liw-modules-0.4/strutil/strutil.h' ||
  echo 'restore of liw-modules-0.4/strutil/strutil.h failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strutil.h'`"
  test 2955 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strutil.h: original size 2955, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strvars.3 ==============
if test -f 'liw-modules-0.4/strutil/strvars.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strvars.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strvars.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strvars.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strvars.3,v 1.1 1994/06/20 20:30:48 liw Exp"
X.\"
X.TH STRVARS 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strvars \- expand variables in string
X.SH SYNOPSIS
X.nf
#include <publib.h>
int \fBstrvars\fR(char *\fIstr\fR, size_t \fImax\fR, char *(*\fIexpand\fR)(const char *));
X.SH DESCRIPTION
\fIstrvars\fR will replaces references to variables in the string \fIstr\fR
with the values of the variables.  A reference to a variable 
is of the form \fI$(foo)\fR or \fI$x\fR (where \fIx\fR is a single
character, but not \fI$\fR).  A dollar sign is expressed in the string
as \fI$$\fR, and will be converted to \fI$\fR in the output.  The replacements
are done in place.  The result will not exceed \fImax\fR characters (including
the '\\0').
X.PP
The values of the variables are fetched using the function \fIexpand\fR.
It is given the name of the variable as its argument, and must return
a pointer to the value, or NULL if that variable doesn't exist.
X.SH "RETURN VALUE"
\fIstrvars\fR will return \fIstr\fR if successful, or NULL if an
error occured (malformed input string, result too big, or unknown variable).
If NULL is returned, the state of \fIstr\fR is indeterminate.
X.SH EXAMPLE
To replace references to environment variables, one would the following.
X.sp 1
X.nf
X.in +5
#include <publib.h>
#include <stdlib.h>
X
char line[1024];
X
if (strvars(line, 1024, getenv) == NULL)
X    errormsg(1, 0, "strvars failed");
printf("line = <%s>\\n");
X.in -5
X.SH "SEE ALSO"
publib(3), getenv(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strvars.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strvars.3' ||
  echo 'restore of liw-modules-0.4/strutil/strvars.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strvars.3'`"
  test 1596 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strvars.3: original size 1596, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strvars.c ==============
if test -f 'liw-modules-0.4/strutil/strvars.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strvars.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strvars.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strvars.c' &&
/*
X * strvars.c -- expand variables in string
X *
X * Part of publib.  See man page for more information.
X * "@(#)publib-strutil:strvars.c,v 1.2 1994/08/28 18:12:58 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
#include "publib/errormsg.h"
X
X
int strvars(char *str, size_t max, char *(*expand)(const char *)) {
X	char *p, *q, *val, name[] = "x";
X
X	assert(str != NULL);
X	assert(max >= strlen(str));
X	assert(expand != NULL);
X
X	p = str;
X	while ((p = strchr(p, '$')) != NULL) {
X		if (p[1] == '\0')
X			++p;
X		else if (p[1] == '$') {
X			memmove(p, p+1, strlen(p+1) + 1);
X			++p;
X		} else {
X			if (p[1] == '(') {
X				q = strchr(p, ')');
X				if (q == NULL) {
X					__publib_error("No ) to terminate $(");
X					return -1;
X				}
X				*q = '\0';
X				val = expand(p+1);
X			} else {
X				name[0] = p[1];
X				q = p+1;
X				val = expand(name);
X			}
X			if (val == NULL) {
X				__publib_error("Unknown variable");
X				return -1;
X			}
X			if (strlen(val) + (p-str) >= max) {
X				__publib_error("Result too long");
X				return -1;
X			}
X			memmove(p, q+1, strlen(q+1)+1);
X			memmove(p+strlen(val), p, strlen(p)+1);
X			memcpy(p, val, strlen(val));
X			p += strlen(val);
X		}
X	}
X	return 0;
}
SHAR_EOF
  $shar_touch -am 0828211294 'liw-modules-0.4/strutil/strvars.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strvars.c' ||
  echo 'restore of liw-modules-0.4/strutil/strvars.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strvars.c'`"
  test 1193 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strvars.c: original size 1193, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strzap.3 ==============
if test -f 'liw-modules-0.4/strutil/strzap.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strzap.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strzap.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strzap.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strzap.3,v 1.2 1994/07/22 12:22:53 liw Exp"
X.\"
X.TH STRZAP 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strzap \- remove pattern from beginning of string, if it is there
X.SH SYNOPSIS
X.nf
#include <publib.h>
int \fBstrzap\fR(char *\fIstr\fR, const char *\fIpat\fR);
X.SH DESCRIPTION
\fIstrzap\fR compares the beginning of \fIstr\fR with all of \fIpat\fR,
and if they are the same, it removes the beginning from \fIstr\fR.
X.SH "RETURN VALUE"
\fIstrzap\fR returns non-zero if it removed anything, 0 if not.
X.SH "SEE ALSO"
publib(3), strendzap(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0722152294 'liw-modules-0.4/strutil/strzap.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strzap.3' ||
  echo 'restore of liw-modules-0.4/strutil/strzap.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strzap.3'`"
  test 661 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strzap.3: original size 661, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strzap.c ==============
if test -f 'liw-modules-0.4/strutil/strzap.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strzap.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strzap.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strzap.c' &&
/*
X * strzap.c -- remove pat from beginning of str, if it is there
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strzap.c,v 1.2 1994/07/22 12:22:54 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
int strzap(char *str, const char *pat) {
X	size_t len, patlen;
X
X	assert(str != NULL);
X	assert(pat != NULL);
X
X	len = strlen(str);
X	patlen = strlen(pat);
X
X	if (patlen <= len && memcmp(str, pat, patlen) == 0) {
X		memmove(str, str+patlen, len-patlen+1);
X		return 1;
X	}
X	return 0;
}
SHAR_EOF
  $shar_touch -am 0722152294 'liw-modules-0.4/strutil/strzap.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strzap.c' ||
  echo 'restore of liw-modules-0.4/strutil/strzap.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strzap.c'`"
  test 542 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strzap.c: original size 542, current size $shar_count"
fi
exit 0

