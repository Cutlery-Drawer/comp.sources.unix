Newsgroups: comp.sources.unix
From: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Subject: v28i193: liw-modules-0.4 - the LIW module set (for use with Publib), Part06/14
References: <1.785201893.15507@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Posting-Number: Volume 28, Issue 193
Archive-Name: liw-modules-0.4/part06

#!/bin/sh
# This is part 06 of a multipart archive.
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
# ============= liw-modules-0.4/hash/hash_install.c ==============
if test ! -d 'liw-modules-0.4'; then
  echo 'x - creating directory liw-modules-0.4'
  mkdir 'liw-modules-0.4'
fi
if test ! -d 'liw-modules-0.4/hash'; then
  echo 'x - creating directory liw-modules-0.4/hash'
  mkdir 'liw-modules-0.4/hash'
fi
if test -f 'liw-modules-0.4/hash/hash_install.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/hash/hash_install.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/hash/hash_install.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/hash/hash_install.c' &&
/*
X * hash_install.c -- add a new data value in a hash table
X *
X * Part of Publib, see man page for more information.
X * "@(#)publib-hash:hash_install.c,v 1.1.1.1 1994/07/20 21:02:54 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include "publib/hash.h"
#include "publib/errormsg.h"
X
void *hash_install(Hashtab *ht, void *data, size_t size) {
X	struct __hash_node *p;
X	unsigned long val;
X	size_t i;
X
X	assert(ht != NULL);
X	assert(data != NULL);
X
X	val = ht->hash(data);
X	i = val % __HASHTAB_SIZE;
X	for (p = ht->tab[i]; p != NULL; p = p->next)
X		if (val == p->val && ht->cmp(data, p->data) == 0)
X			return p->data;
X	p = malloc(sizeof(struct __hash_node));
X	if (p == NULL) {
X		__publib_error("malloc failed");
X		return NULL;
X	}
X	if (size == 0)
X		p->data = data;
X	else if ((p->data = malloc(size)) == NULL) {
X		__publib_error("malloc failed");
X		free(p);
X		return NULL;
X	} else
X		memcpy(p->data, data, size);
X	p->size = size;
X	p->val = val;
X	p->next = ht->tab[i];
X	ht->tab[i] = p;
X	return p->data;
}
SHAR_EOF
  $shar_touch -am 0721000294 'liw-modules-0.4/hash/hash_install.c' &&
  chmod 0600 'liw-modules-0.4/hash/hash_install.c' ||
  echo 'restore of liw-modules-0.4/hash/hash_install.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/hash/hash_install.c'`"
  test 1002 -eq "$shar_count" ||
    echo "liw-modules-0.4/hash/hash_install.c: original size 1002, current size $shar_count"
fi
# ============= liw-modules-0.4/hash/hash_iter.c ==============
if test -f 'liw-modules-0.4/hash/hash_iter.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/hash/hash_iter.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/hash/hash_iter.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/hash/hash_iter.c' &&
/*
X * hash_iter.c -- iterate through all datums in a hash table
X *
X * Part of Publib, see man page for more information.
X * "@(#)publib-hash:hash_iter.c,v 1.1.1.1 1994/07/20 21:02:54 liw Exp"
X */
X
#include <assert.h>
#include "publib/hash.h"
X
int hash_iter(Hashtab *ht, int (*doit)(void *, void *), void *param) {
X	struct __hash_node *p;
X	size_t i;
X
X	assert(ht != NULL);
X	assert(doit != NULL);
X
X	for (i = 0; i < __HASHTAB_SIZE; ++i)
X		for (p = ht->tab[i]; p != NULL; p = p->next)
X			switch (doit(p->data, param)) {
X			case 0: return 0;
X			case -1: return -1;
X			}
X	return 1;
}
SHAR_EOF
  $shar_touch -am 0721000294 'liw-modules-0.4/hash/hash_iter.c' &&
  chmod 0600 'liw-modules-0.4/hash/hash_iter.c' ||
  echo 'restore of liw-modules-0.4/hash/hash_iter.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/hash/hash_iter.c'`"
  test 577 -eq "$shar_count" ||
    echo "liw-modules-0.4/hash/hash_iter.c: original size 577, current size $shar_count"
fi
# ============= liw-modules-0.4/hash/hash_lookup.c ==============
if test -f 'liw-modules-0.4/hash/hash_lookup.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/hash/hash_lookup.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/hash/hash_lookup.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/hash/hash_lookup.c' &&
/*
X * hash_lookup.c -- find a datum in a hash table
X *
X * Part of Publib, see man page for more information.
X * "@(#)publib-hash:hash_lookup.c,v 1.1.1.1 1994/07/20 21:02:54 liw Exp"
X */
X
#include <assert.h>
#include "publib/hash.h"
X
void *hash_lookup(Hashtab *ht, void *data) {
X	struct __hash_node *p;
X	unsigned long val;
X
X	assert(ht != NULL);
X
X	val = ht->hash(data);
X	for (p = ht->tab[val % __HASHTAB_SIZE]; p != NULL; p = p->next)
X		if (val == p->val && ht->cmp(data, p->data) == 0)
X			return p->data;
X	return NULL;
}
SHAR_EOF
  $shar_touch -am 0721000294 'liw-modules-0.4/hash/hash_lookup.c' &&
  chmod 0600 'liw-modules-0.4/hash/hash_lookup.c' ||
  echo 'restore of liw-modules-0.4/hash/hash_lookup.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/hash/hash_lookup.c'`"
  test 520 -eq "$shar_count" ||
    echo "liw-modules-0.4/hash/hash_lookup.c: original size 520, current size $shar_count"
fi
# ============= liw-modules-0.4/hash/hash_uninstall.c ==============
if test -f 'liw-modules-0.4/hash/hash_uninstall.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/hash/hash_uninstall.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/hash/hash_uninstall.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/hash/hash_uninstall.c' &&
/*
X * hash_uninstall.c -- remove a datum from a hash table
X *
X * Part of Publib, see man page for more information.
X * "@(#)publib-hash:hash_uninstall.c,v 1.1.1.1 1994/07/20 21:02:54 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include "publib/hash.h"
X
int hash_uninstall(Hashtab *ht, void *data) {
X	struct __hash_node *p, *prev;
X	unsigned long val;
X	size_t i;
X
X	assert(ht != NULL);
X	assert(data != NULL);
X
X	val = ht->hash(data);
X	i = val % __HASHTAB_SIZE;
X	for (prev = NULL, p = ht->tab[i]; p != NULL; prev = p, p = p->next) {
X		if (val == p->val && ht->cmp(data, p->data) == 0) {
X			if (prev == NULL)
X				ht->tab[i] = p->next;
X			else
X				prev->next = p->next;
X			if (p->size > 0)
X				free(p->data);
X			free(p);
X			return 0;
X		}
X	}
X	return -1;
}
SHAR_EOF
  $shar_touch -am 0721000294 'liw-modules-0.4/hash/hash_uninstall.c' &&
  chmod 0600 'liw-modules-0.4/hash/hash_uninstall.c' ||
  echo 'restore of liw-modules-0.4/hash/hash_uninstall.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/hash/hash_uninstall.c'`"
  test 758 -eq "$shar_count" ||
    echo "liw-modules-0.4/hash/hash_uninstall.c: original size 758, current size $shar_count"
fi
# ============= liw-modules-0.4/iset/Makefile ==============
if test ! -d 'liw-modules-0.4/iset'; then
  echo 'x - creating directory liw-modules-0.4/iset'
  mkdir 'liw-modules-0.4/iset'
fi
if test -f 'liw-modules-0.4/iset/Makefile' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/Makefile (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/Makefile (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/Makefile' &&
objs = iset_add.o iset_add_rng.o iset_clear.o iset_contains.o \
X	iset_copy.o iset_create.o iset_destroy.o iset_diff.o \
X	iset_is_empty.o iset_isect.o iset_nth_rng.o iset_range.o \
X	iset_remove.o iset_rm_rng.o iset_union.o 
testprogs = test_add
include $(srcdir)/Generic.mk
X
test_add: test_add.o $(libname)
X	$(CC) $(CFLAGS) $(LDFLAGS) -o test_add test_add.o $(libname)
test_add.o: iset.h
$(objs): iset.h
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/iset/Makefile' &&
  chmod 0600 'liw-modules-0.4/iset/Makefile' ||
  echo 'restore of liw-modules-0.4/iset/Makefile failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/Makefile'`"
  test 403 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/Makefile: original size 403, current size $shar_count"
fi
# ============= liw-modules-0.4/iset/README ==============
if test -f 'liw-modules-0.4/iset/README' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/README (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/README (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/README' &&
README for Publib module iset
Lars Wirzenius
"@(#)publib-iset:README,v 1.1 1994/08/28 18:01:52 liw Exp"
X
These routines implement a set of long integers.  It is implemented
as a linked list of ranges, so as to make it more efficient if there
are many dense parts in the set.
X
----------------------
X
Copyright (c) 1994 Lars Wirzenius.  All rights reserved.
X
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
X
1. Redistributions of source code must retain the above copyright
X   notice, this list of conditions and the following disclaimer.
X
2. Redistributions in binary form must reproduce the above copyright
X   notice, this list of conditions and the following disclaimer in the
X   documentation and/or other materials provided with the distribution.
X
THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
SHAR_EOF
  $shar_touch -am 0828210194 'liw-modules-0.4/iset/README' &&
  chmod 0600 'liw-modules-0.4/iset/README' ||
  echo 'restore of liw-modules-0.4/iset/README failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/README'`"
  test 1552 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/README: original size 1552, current size $shar_count"
fi
# ============= liw-modules-0.4/iset/iset.3 ==============
if test -f 'liw-modules-0.4/iset/iset.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/iset.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/iset.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/iset.3' &&
X.\" part of publib
X.\" "@(#)publib-iset:iset.3,v 1.2 1994/02/03 17:27:58 liw Exp"
X.\"
X.TH ISET 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
iset_create, iset_destroy, iset_copy, iset_is_empty, iset_add,
iset_add_range, iset_remove, iset_remove_range, iset_clear,
iset_contains, iset_union, iset_diff, iset_isect, iset_range,
iset_nth_range \- manipulate sets of integers
X.SH SYNOPSIS
X.nf
#include <publib.h>
X.sp 1
Iset *\fBiset_create\fR(void);
void \fBiset_destroy\fR(Iset *\fIis\fR);
Iset *\fBiset_copy\fR(const Iset *\fIis\fR);
X.sp 1
int \fBiset_is_empty\fR(const Iset *\fIis\fR);
int \fBiset_add\fR(Iset *\fIis\fR, long \fInumber\fR);
int \fBiset_add_range\fR(Iset *\fIis\fR, long \fInumber1\fR, long \fInumber2\fR);
int \fBiset_remove\fR(Iset *\fIis\fR, long \fInumber\fR);
int \fBiset_remove_range\fR(Iset *\fIis\fR, long \fInumber1\fR, long \fInumber2\fR);
void \fBiset_clear\fR(Iset *\fIis\fR);
int \fBiset_contains\fR(const Iset *\fIis\fR, long \fInumber\fR);
int \fBiset_union\fR(Iset *\fIis1\fR, const Iset *\fIis2\fR);
int \fBiset_diff\fR(Iset *\fIis1\fR, const Iset *\fIis2\fR);
int \fBiset_isect\fR(Iset *\fIis1\fR, const Iset *\fIis2\fR);
void \fBiset_range\fR(const Iset *\fIis\fR, long *\fIlowest\fR, long *\fIhighest\fR);
int \fBiset_nth_range\fR(const Iset *\fIis\fR, long \fIn\fR, long *\fIlo\fR, long *\fIhi\fR);
X.SH "DESCRIPTION"
These functions operate on sets of integers (of type long).  You
clever people will know how to use them without my help, which saves
me from writing a manual page.
X.SH "SEE ALSO"
publib(3), bitarr(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203192794 'liw-modules-0.4/iset/iset.3' &&
  chmod 0600 'liw-modules-0.4/iset/iset.3' ||
  echo 'restore of liw-modules-0.4/iset/iset.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/iset.3'`"
  test 1629 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/iset.3: original size 1629, current size $shar_count"
fi
# ============= liw-modules-0.4/iset/iset.h ==============
if test -f 'liw-modules-0.4/iset/iset.h' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/iset.h (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/iset.h (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/iset.h' &&
/*
X * iset.h -- sets of integers
X */
X
X
#ifndef __publib_iset_h
#define __publib_iset_h
X
struct __iset_range {
X	long start, end;
X	struct __iset_range *prev, *next;
};
X
struct __publib_iset {
X	struct __iset_range *lowest, *highest;
};
X
typedef struct __publib_iset Iset;
X
Iset *iset_create(void);
void iset_destroy(Iset *__is);
Iset *iset_copy(const Iset *__is);
X
int iset_is_empty(const Iset *__is);
int iset_add(Iset *__is, long __number);
int iset_add_range(Iset *__is, long __number1, long __number2);
int iset_remove(Iset *__is, long __number);
int iset_remove_range(Iset *__is, long __number1, long __number2);
void iset_clear(Iset *__is);
int iset_contains(const Iset *__is, long __number);
int iset_union(Iset *__is1, const Iset *__is2);
int iset_diff(Iset *__is1, const Iset *__is2);
int iset_isect(Iset *__is1, const Iset *__is2);
void iset_range(const Iset *__is, long *__lowest, long *__highest);
int iset_nth_range(const Iset *__is, long __n, long *__lo, long *__hi);
X
#endif
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/iset/iset.h' &&
  chmod 0600 'liw-modules-0.4/iset/iset.h' ||
  echo 'restore of liw-modules-0.4/iset/iset.h failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/iset.h'`"
  test 987 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/iset.h: original size 987, current size $shar_count"
fi
# ============= liw-modules-0.4/iset/iset_add.c ==============
if test -f 'liw-modules-0.4/iset/iset_add.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/iset_add.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/iset_add.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/iset_add.c' &&
/*
X * iset_add.c -- add an integer to an iset
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-iset:iset_add.c,v 1.4 1994/07/16 15:28:50 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include "publib/iset.h"
#include "publib/errormsg.h"
X
X
/* insert new range into a list of ranges */
static int new_range(long start, long end, struct __iset_range *before, 
X		     Iset *is) {
X	struct __iset_range *rnew;
X
X	assert(before != NULL);
X	assert(is != NULL);
X
X	rnew = malloc(sizeof(struct __iset_range));
X	if (rnew == NULL) {
X		__publib_error("malloc failed");
X		return -1;
X	}
X
X	rnew->start = start;
X	rnew->end = end;
X
X	if (before == NULL) {	/* append to list of ranges */
X		rnew->next = NULL;
X		rnew->prev = is->highest;
X		if (is->highest != NULL)
X			is->highest->next = rnew;
X		is->highest = rnew;
X		if (is->lowest == NULL)
X			is->lowest = rnew;
X	} else {		/* insert before `before' */
X		rnew->next = before;
X		rnew->prev = before->prev;
X		before->prev = rnew;
X		if (rnew->prev != NULL)
X			rnew->prev->next = rnew;
X		else {
X			is->lowest = rnew;
X			if (is->highest == NULL)
X				is->highest = rnew;
X		}
X	}
X
X	return 0;
}
X
X
/* see if a range is adjacent to its neighbors and join it with them if so */
static void join_ranges(Iset *is, struct __iset_range *r) {
X	struct __iset_range *temp;
X
X	assert(is != NULL);
X	assert(r != NULL);
X
X	if (r->prev != NULL && r->prev->end == r->start-1) {
X		r->prev->end = r->end;
X		r->prev->next = r->next;
X		if (r->next != NULL)
X			r->next->prev = r->prev;
X		else
X			is->highest = r->prev;
X		temp = r;
X		r = r->prev;
X		free(temp);
X	}
X
X	if (r->next != NULL && r->next->start == r->end+1) {
X		r->next->start = r->start;
X		r->next->prev = r->prev;
X		if (r->prev != NULL)
X			r->prev->next = r->next;
X		else
X			is->lowest = r->next;
X		free(r);
X	}
}
X
X
int iset_add(Iset *is, long number) {
X	struct __iset_range *r;
X
X	assert(is != NULL);
X
X	for (r = is->lowest; r != NULL; r = r->next) {
X		if (r->start <= number && number <= r->end)
X			return 0;	/* number already in set */
X		if (number == r->start-1) {
X			--r->start;
X			join_ranges(is, r);
X			return 0;	/* increase existing range */
X		}
X		if (number == r->end+1) {
X			++r->end;
X			join_ranges(is, r);
X			return 0;	/* increase existing range */
X		}
X		if (number < r->start)
X			return new_range(number, number, r, is);
X	}
X	return new_range(number, number, NULL, is);
}
SHAR_EOF
  $shar_touch -am 0716182894 'liw-modules-0.4/iset/iset_add.c' &&
  chmod 0600 'liw-modules-0.4/iset/iset_add.c' ||
  echo 'restore of liw-modules-0.4/iset/iset_add.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/iset_add.c'`"
  test 2367 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/iset_add.c: original size 2367, current size $shar_count"
fi
# ============= liw-modules-0.4/iset/iset_add_rng.c ==============
if test -f 'liw-modules-0.4/iset/iset_add_rng.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/iset_add_rng.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/iset_add_rng.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/iset_add_rng.c' &&
/*
X * iset_add_range.c -- add a range of integers to an iset
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-iset:iset_add_rng.c,v 1.1.1.1 1993/11/20 17:02:31 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include "publib/iset.h"
X
int iset_add_range(Iset *is, long number1, long number2) {
X	long i;
X
X	assert(is != NULL);
X	assert(number1 <= number2);
X
X	for (i = number1; i <= number2; ++i)
X		if (iset_add(is, i) == -1)
X			return -1;
X	return 0;
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/iset/iset_add_rng.c' &&
  chmod 0600 'liw-modules-0.4/iset/iset_add_rng.c' ||
  echo 'restore of liw-modules-0.4/iset/iset_add_rng.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/iset_add_rng.c'`"
  test 477 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/iset_add_rng.c: original size 477, current size $shar_count"
fi
# ============= liw-modules-0.4/iset/iset_clear.c ==============
if test -f 'liw-modules-0.4/iset/iset_clear.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/iset_clear.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/iset_clear.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/iset_clear.c' &&
/*
X * is_clear.c -- make an iset be empty
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-iset:iset_clear.c,v 1.1.1.1 1993/11/20 17:02:31 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include "publib/iset.h"
X
void iset_clear(Iset *is) {
X	struct __iset_range *r;
X
X	assert(is != NULL);
X	while (is->lowest != NULL) {
X		r = is->lowest;
X		is->lowest = is->lowest->next;
X		free(r);
X	}
X	is->highest = NULL;
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/iset/iset_clear.c' &&
  chmod 0600 'liw-modules-0.4/iset/iset_clear.c' ||
  echo 'restore of liw-modules-0.4/iset/iset_clear.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/iset_clear.c'`"
  test 435 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/iset_clear.c: original size 435, current size $shar_count"
fi
# ============= liw-modules-0.4/iset/iset_contains.c ==============
if test -f 'liw-modules-0.4/iset/iset_contains.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/iset_contains.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/iset_contains.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/iset_contains.c' &&
/*
X * iset_contains.c -- check whether an iset contains a number
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-iset:iset_contains.c,v 1.1.1.1 1993/11/20 17:02:31 liw Exp"
X */
X
#include <assert.h>
#include <stddef.h>	/* need NULL */
#include "publib/iset.h"
X
int iset_contains(const Iset *is, long number) {
X	struct __iset_range *r;
X
X	assert(is != NULL);
X
X	for (r = is->lowest; r != NULL && r->end < number; r = r->next)
X		continue;
X	return (r != NULL && r->start <= number && number <= r->end);
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/iset/iset_contains.c' &&
  chmod 0600 'liw-modules-0.4/iset/iset_contains.c' ||
  echo 'restore of liw-modules-0.4/iset/iset_contains.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/iset_contains.c'`"
  test 523 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/iset_contains.c: original size 523, current size $shar_count"
fi
# ============= liw-modules-0.4/iset/iset_copy.c ==============
if test -f 'liw-modules-0.4/iset/iset_copy.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/iset_copy.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/iset_copy.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/iset_copy.c' &&
/*
X * iset_copy.c -- create a copy of an iset
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-iset:iset_copy.c,v 1.3 1994/07/16 15:28:52 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "publib/iset.h"
#include "publib/errormsg.h"
X
Iset *iset_copy(const Iset *is) {
X	Iset *isnew;
X	struct __iset_range *r, *rnew;
X
X	assert(is != NULL);
X
X	isnew = iset_create();
X	if (isnew == NULL)
X		return NULL;
X	for (r = is->lowest; r != NULL; r = r->next) {
X		rnew = malloc(sizeof(struct __iset_range));
X		if (rnew == NULL) {
X			__publib_error("malloc failed");
X			iset_destroy(isnew);
X			return NULL;
X		}
X		rnew->start = r->start;
X		rnew->end = r->end;
X		rnew->prev = isnew->highest;
X		rnew->next = NULL;
X		isnew->highest = rnew;
X		if (isnew->lowest == NULL)
X			isnew->lowest = rnew;
X	}
X
X	return isnew;
}
SHAR_EOF
  $shar_touch -am 0716182894 'liw-modules-0.4/iset/iset_copy.c' &&
  chmod 0600 'liw-modules-0.4/iset/iset_copy.c' ||
  echo 'restore of liw-modules-0.4/iset/iset_copy.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/iset_copy.c'`"
  test 848 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/iset_copy.c: original size 848, current size $shar_count"
fi
# ============= liw-modules-0.4/iset/iset_create.c ==============
if test -f 'liw-modules-0.4/iset/iset_create.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/iset_create.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/iset_create.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/iset_create.c' &&
/*
X * iset_create.c -- create an empty integer set
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-iset:iset_create.c,v 1.1.1.1 1993/11/20 17:02:31 liw Exp"
X */
X
#include <stdlib.h>
#include "publib/iset.h"
#include "publib/errormsg.h"
X
Iset *iset_create(void) {
X	Iset *is;
X
X	is = malloc(sizeof(Iset));
X	if (is == NULL) {
X		__publib_error("malloc failed");
X		return NULL;
X	}
X
X	is->lowest = is->highest = NULL;
X	return is;
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/iset/iset_create.c' &&
  chmod 0600 'liw-modules-0.4/iset/iset_create.c' ||
  echo 'restore of liw-modules-0.4/iset/iset_create.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/iset_create.c'`"
  test 448 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/iset_create.c: original size 448, current size $shar_count"
fi
# ============= liw-modules-0.4/iset/iset_destroy.c ==============
if test -f 'liw-modules-0.4/iset/iset_destroy.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/iset_destroy.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/iset_destroy.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/iset_destroy.c' &&
/*
X * iset_destroy.c -- free resources allocated to an iset
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-iset:iset_destroy.c,v 1.1.1.1 1993/11/20 17:02:31 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include "publib/iset.h"
X
void iset_destroy(Iset *is) {
X	assert(is != NULL);
X	iset_clear(is);
X	free(is);
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/iset/iset_destroy.c' &&
  chmod 0600 'liw-modules-0.4/iset/iset_destroy.c' ||
  echo 'restore of liw-modules-0.4/iset/iset_destroy.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/iset_destroy.c'`"
  test 343 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/iset_destroy.c: original size 343, current size $shar_count"
fi
# ============= liw-modules-0.4/iset/iset_diff.c ==============
if test -f 'liw-modules-0.4/iset/iset_diff.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/iset_diff.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/iset_diff.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/iset_diff.c' &&
/*
X * iset_diff.c -- take set difference
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-iset:iset_diff.c,v 1.1.1.1 1993/11/20 17:02:31 liw Exp"
X */
X
#include <assert.h>
#include <stddef.h>	/* need NULL */
#include "publib/iset.h"
X
int iset_diff(Iset *is1, const Iset *is2) {
X	struct __iset_range *r;
X
X	assert(is1 != NULL);
X	assert(is2 != NULL);
X
X	for (r = is2->lowest; r != NULL; r = r->next)
X		if (iset_remove_range(is1, r->start, r->end) == -1)
X			return -1;
X	return 0;
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/iset/iset_diff.c' &&
  chmod 0600 'liw-modules-0.4/iset/iset_diff.c' ||
  echo 'restore of liw-modules-0.4/iset/iset_diff.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/iset_diff.c'`"
  test 499 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/iset_diff.c: original size 499, current size $shar_count"
fi
# ============= liw-modules-0.4/iset/iset_is_empty.c ==============
if test -f 'liw-modules-0.4/iset/iset_is_empty.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/iset_is_empty.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/iset_is_empty.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/iset_is_empty.c' &&
/*
X * iset_is_empty.c -- test whether an iset is empty
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-iset:iset_is_empty.c,v 1.1.1.1 1993/11/20 17:02:31 liw Exp"
X */
X
#include <assert.h>
#include <stddef.h>	/* need NULL */
#include "publib/iset.h"
X
int iset_is_empty(const Iset *is) {
X	assert(is != NULL);
X	return is->lowest == NULL;
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/iset/iset_is_empty.c' &&
  chmod 0600 'liw-modules-0.4/iset/iset_is_empty.c' ||
  echo 'restore of liw-modules-0.4/iset/iset_is_empty.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/iset_is_empty.c'`"
  test 361 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/iset_is_empty.c: original size 361, current size $shar_count"
fi
# ============= liw-modules-0.4/iset/iset_isect.c ==============
if test -f 'liw-modules-0.4/iset/iset_isect.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/iset_isect.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/iset_isect.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/iset_isect.c' &&
/*
X * iset_iset.c -- remove elements from set that are not also in another set
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-iset:iset_isect.c,v 1.1.1.1 1993/11/20 17:02:32 liw Exp"
X */
X
#include <assert.h>
#include <stddef.h>	/* need NULL */
#include "publib/iset.h"
X
int iset_isect(Iset *is1, const Iset *is2) {
X	struct __iset_range *r;
X	long i;
X
X	assert(is1 != NULL);
X	assert(is2 != NULL);
X
X	for (r = is1->lowest; r != NULL; r = r->next)
X		for (i = r->start; i <= r->end; ++i)
X			if (!iset_contains(is2, i))
X				if (iset_remove(is1, i) == -1)
X					return -1;
X	return 0;
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/iset/iset_isect.c' &&
  chmod 0600 'liw-modules-0.4/iset/iset_isect.c' ||
  echo 'restore of liw-modules-0.4/iset/iset_isect.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/iset_isect.c'`"
  test 601 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/iset_isect.c: original size 601, current size $shar_count"
fi
# ============= liw-modules-0.4/iset/iset_nth_rng.c ==============
if test -f 'liw-modules-0.4/iset/iset_nth_rng.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/iset/iset_nth_rng.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/iset/iset_nth_rng.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/iset/iset_nth_rng.c' &&
/*
X * iset_nth_rng.c -- return the ends of the nth consecutive range of values
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-iset:iset_nth_rng.c,v 1.1.1.1 1993/11/20 17:02:32 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include "publib/iset.h"
X
int iset_nth_range(const Iset *is, long n, long *lo, long *hi) {
X	struct __iset_range *r;
X
X	assert(is != NULL);
X	assert(lo != NULL);
X	assert(hi != NULL);
X	assert(n > 0);
X
X	for (r = is->lowest; n > 1 && r != NULL; --n, r = r->next)
X		continue;
X	if (r == NULL)
X		return -1;
X	*lo = r->start;
X	*hi = r->end;
X	return 0;
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/iset/iset_nth_rng.c' &&
  chmod 0600 'liw-modules-0.4/iset/iset_nth_rng.c' ||
  echo 'restore of liw-modules-0.4/iset/iset_nth_rng.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/iset/iset_nth_rng.c'`"
  test 598 -eq "$shar_count" ||
    echo "liw-modules-0.4/iset/iset_nth_rng.c: original size 598, current size $shar_count"
fi
: || echo 'restore of liw-modules-0.4/iset/iset_range.c failed'
echo 'End of part 6, continue with part 7'
exit 0

