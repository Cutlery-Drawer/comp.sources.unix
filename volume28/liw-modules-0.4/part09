Newsgroups: comp.sources.unix
From: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Subject: v28i196: liw-modules-0.4 - the LIW module set (for use with Publib), Part09/14
References: <1.785201893.15507@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Posting-Number: Volume 28, Issue 196
Archive-Name: liw-modules-0.4/part09

#!/bin/sh
# This is part 09 of a multipart archive.
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
# ============= liw-modules-0.4/strutil/Makefile ==============
if test ! -d 'liw-modules-0.4'; then
  echo 'x - creating directory liw-modules-0.4'
  mkdir 'liw-modules-0.4'
fi
if test ! -d 'liw-modules-0.4/strutil'; then
  echo 'x - creating directory liw-modules-0.4/strutil'
  mkdir 'liw-modules-0.4/strutil'
fi
if test -f 'liw-modules-0.4/strutil/Makefile' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/Makefile (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/Makefile (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/Makefile' &&
objs = \
X	memarrfill.o	\
X	memdel.o	\
X	memfill.o	\
X	memins.o	\
X	memisort.o	\
X	memmem.o	\
X	memoverlap.o	\
X	memrchr.o	\
X	memrev.o	\
X	memrmem.o	\
X	memshuffle.o	\
X	memswap.o	\
X	stracat.o	\
X	stranaxfrm.o	\
X	strchange.o	\
X	strcins.o	\
X	strcstr.o	\
X	strdel.o	\
X	strend.o	\
X	strendzap.o	\
X	strgsub.o	\
X	strhash.o	\
X	strinit.o	\
X	strins.o	\
X	strltrim.o	\
X	strmaxcpy.o	\
X	strmove.o	\
X	strmtrim.o	\
X	strndup.o	\
X	strnins.o	\
X	stroverlap.o	\
X	strrev.o	\
X	strright.o	\
X	strrot13.o	\
X	strrstr.o	\
X	strrtrim.o	\
X	strset.o	\
X	strshuffle.o	\
X	strsplit.o	\
X	strsub.o	\
X	strtabify.o	\
X	strtrexpand.o	\
X	strtrim.o	\
X	struncstr.o	\
X	struntabify.o	\
X	strvars.o	\
X	strzap.o	
X
X
testprogs = 
include $(srcdir)/Generic.mk
X
xxxtest: xxxtest.o $(libname)
X	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ xxxtest.o $(libname)
xxxtest.o: xxx.h
$(objs): strutil.h
SHAR_EOF
  $shar_touch -am 0828211194 'liw-modules-0.4/strutil/Makefile' &&
  chmod 0600 'liw-modules-0.4/strutil/Makefile' ||
  echo 'restore of liw-modules-0.4/strutil/Makefile failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/Makefile'`"
  test 817 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/Makefile: original size 817, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/README ==============
if test -f 'liw-modules-0.4/strutil/README' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/README (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/README (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/README' &&
README for Publib module strutil
Lars Wirzenius
"@(#)publib-strutil:README,v 1.2 1994/08/28 18:10:33 liw Exp"
X
These routines implement a number of more or less useful string
and memory block operatins.
X
----------------------
X
Copyright (c) 1994 Lars Wirzenius.  All rights reserved.
X
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
X
1. Redistributions of source code must retain the above copyright
X   notice, this list of conditions and the following disclaimer.
X
2. Redistributions in binary form must reproduce the above copyright
X   notice, this list of conditions and the following disclaimer in the
X   documentation and/or other materials provided with the distribution.
X
THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
SHAR_EOF
  $shar_touch -am 0828211094 'liw-modules-0.4/strutil/README' &&
  chmod 0600 'liw-modules-0.4/strutil/README' ||
  echo 'restore of liw-modules-0.4/strutil/README failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/README'`"
  test 1480 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/README: original size 1480, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memarrfill.3 ==============
if test -f 'liw-modules-0.4/strutil/memarrfill.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memarrfill.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memarrfill.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memarrfill.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:memarrfill.3,v 1.1 1994/07/12 21:11:35 liw Exp"
X.\"
X.TH MEMARRFILL 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
memarrfill \- fill an array with the value of its first element
X.SH SYNOPSIS
X.nf
#include <publib.h>
void *\fBmemarrfill\fR(void *\fIarr\fR, size_t \fIelsize\fR, size_t \fInelem\fR);
X.SH DESCRIPTION
\fImemarrfill\fR sets all elements the array \fIarr\fR to the value of
its first element.
The array has \fInelem\fR elements (including the first one),
each of which is \fIelsize\fR bytes big.
X.SH "RETURN VALUE"
\fImemarrfill\fR returns its first argument.
X.SH "SEE ALSO"
publib(3), memfill(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0713001194 'liw-modules-0.4/strutil/memarrfill.3' &&
  chmod 0600 'liw-modules-0.4/strutil/memarrfill.3' ||
  echo 'restore of liw-modules-0.4/strutil/memarrfill.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memarrfill.3'`"
  test 724 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memarrfill.3: original size 724, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memarrfill.c ==============
if test -f 'liw-modules-0.4/strutil/memarrfill.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memarrfill.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memarrfill.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memarrfill.c' &&
/*
X * memarrfill.c -- copy first element of array to all elements
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:memarrfill.c,v 1.1 1994/07/12 21:04:52 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
X
void *memarrfill(void *arr, size_t elsize, size_t nelem) {
X	assert(arr != NULL);
X	assert(elsize > 0);
X
X	if (nelem > 0)
X		memfill((char*)arr+elsize, (nelem-1)*elsize, arr, elsize);
X	return arr;
}
SHAR_EOF
  $shar_touch -am 0713000494 'liw-modules-0.4/strutil/memarrfill.c' &&
  chmod 0600 'liw-modules-0.4/strutil/memarrfill.c' ||
  echo 'restore of liw-modules-0.4/strutil/memarrfill.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memarrfill.c'`"
  test 464 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memarrfill.c: original size 464, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memdel.3 ==============
if test -f 'liw-modules-0.4/strutil/memdel.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memdel.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memdel.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memdel.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:memdel.3,v 1.1 1994/06/20 20:29:51 liw Exp"
X.\"
X.TH MEMDEL 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
memdel \- remove bytes from beginning of memory block
X.SH SYNOPSIS
X.nf
#include <publib.h>
void *\fBmemdel\fR(void *\fIp\fR, size_t \fIsize\fR, size_t \fIn\fR);
X.SH DESCRIPTION
\fImemdel\fR moves the contents of the block pointed to by \fIp\fR
towards the beginning, \fIn\fR steps.  The values of the last \fIn\fR
bytes of the block are indeterminate.
X.PP
\fIp\fR must not be a null pointer.  \fIsize\fR and \fIn\fR may be zero.
X.SH "RETURN VALUE"
\fImemdel\fR returns its first argument.
X.SH "SEE ALSO"
publib(3), strdel(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620232994 'liw-modules-0.4/strutil/memdel.3' &&
  chmod 0600 'liw-modules-0.4/strutil/memdel.3' ||
  echo 'restore of liw-modules-0.4/strutil/memdel.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memdel.3'`"
  test 748 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memdel.3: original size 748, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memdel.c ==============
if test -f 'liw-modules-0.4/strutil/memdel.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memdel.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memdel.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memdel.c' &&
/*
X * memdel.c -- delete bytes from beginning of memory block
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:memdel.c,v 1.1 1994/06/20 20:29:52 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
X
void *memdel(void *p, size_t size, size_t n) {
X	assert(p != NULL);
X	assert(n <= size);
X	memmove(p, (char*)p + n, size-n);
X	return p;
}
SHAR_EOF
  $shar_touch -am 0620232994 'liw-modules-0.4/strutil/memdel.c' &&
  chmod 0600 'liw-modules-0.4/strutil/memdel.c' ||
  echo 'restore of liw-modules-0.4/strutil/memdel.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memdel.c'`"
  test 396 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memdel.c: original size 396, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memfill.3 ==============
if test -f 'liw-modules-0.4/strutil/memfill.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memfill.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memfill.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memfill.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:memfill.3,v 1.1.1.1 1994/02/03 17:25:31 liw Exp"
X.\"
X.TH MEMFILL 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
memfill \- fill memory area with pattern
X.SH SYNOPSIS
X.nf
#include <publib.h>
void *\fBmemfill\fR(void *\fIbuf\fR, size_t \fIsize\fR, const void *\fIpat\fR, size_t \fIpatsize\fR);
X.SH DESCRIPTION
\fImemfill\fR copies consecutive bytes from the pattern \fIpat\fR to
consecutive bytes in the memory area \fIbuf\fR, wrapping around in
\fIpat\fR when its end is reached.  \fIpatsize\fR is the size of
the pattern, \fIsize\fR is the size of the memory area.  The pattern
and the memory area must not be overlapping.
X.SH "RETURN VALUE"
\fImemfill\fR returns its first argument.
X.SH EXAMPLE
To initialize an integer array one might do the following.
X.sp 1
X.nf
X.in +5
int temp, array[1024];
X
temp = 1234;
memfill(array, sizeof(array), &temp, sizeof(temp));
X.in -5
X.SH "SEE ALSO"
publib(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/memfill.3' &&
  chmod 0600 'liw-modules-0.4/strutil/memfill.3' ||
  echo 'restore of liw-modules-0.4/strutil/memfill.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memfill.3'`"
  test 1010 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memfill.3: original size 1010, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memfill.c ==============
if test -f 'liw-modules-0.4/strutil/memfill.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memfill.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memfill.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memfill.c' &&
/*
X * memfill.c -- fill memory area with pattern
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:memfill.c,v 1.2 1994/02/05 17:08:42 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
X
void *memfill(void *buf, size_t bufsize, const void *pat, size_t patsize) {
X	char *p;
X
X	assert(buf != NULL);
X	assert(bufsize > 0);
X	assert(pat != NULL);
X	assert(patsize > 0);
X	assert(!memoverlap(buf, bufsize, pat, patsize));
X
X	for (p = buf; bufsize > patsize; p += patsize, bufsize -= patsize)
X		memcpy(p, pat, patsize);
X	memcpy(p, pat, bufsize);
X	return buf;
}
SHAR_EOF
  $shar_touch -am 0205190894 'liw-modules-0.4/strutil/memfill.c' &&
  chmod 0600 'liw-modules-0.4/strutil/memfill.c' ||
  echo 'restore of liw-modules-0.4/strutil/memfill.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memfill.c'`"
  test 611 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memfill.c: original size 611, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memins.3 ==============
if test -f 'liw-modules-0.4/strutil/memins.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memins.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memins.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memins.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:memins.3,v 1.2 1994/06/20 20:29:53 liw Exp"
X.\"
X.TH MEMINS 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
memins \- insert bytes at beginning of memory block
X.SH SYNOPSIS
X.nf
#include <publib.h>
void *\fBmemins\fR(void *\fItgt\fR, size_t \fItgtsize\fR, const void *\fIsrc\fR, size_t \fIsrcsize\fR);
X.SH DESCRIPTION
\fImemins\fR inserts \fIsrcsize\fR bytes from \fIsrc\fR at the beginning
of \fItgt\fR, but moves the first \fItgtsize\fR out of the way.  The source
and target memory blocks must not overlap.
X.SH "RETURN VALUE"
\fImemins\fR returns its first argument.
X.SH EXAMPLE
To insert a new element at the \fIi\fRth position of an array,
one might do the following.
X.sp 1
X.nf
X.in +5
int new, array[10];
X
memins(array+i, (10-i-1)*sizeof(array[0]), &new, sizeof(new));
X.in -5
X.sp 1
X.fi
Please note that the above code carefully avoids the trap of moving the
last element of the array past the end of the array.
X.SH "SEE ALSO"
publib(3), strins(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620232994 'liw-modules-0.4/strutil/memins.3' &&
  chmod 0600 'liw-modules-0.4/strutil/memins.3' ||
  echo 'restore of liw-modules-0.4/strutil/memins.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memins.3'`"
  test 1066 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memins.3: original size 1066, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memins.c ==============
if test -f 'liw-modules-0.4/strutil/memins.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memins.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memins.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memins.c' &&
/*
X * memins.c -- insert bytes at beginning of memory block
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:memins.c,v 1.1 1994/02/05 17:09:24 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
X
void *memins(void *tgt, size_t tgtsize, const void *src, size_t srcsize) {
X	assert(tgt != NULL);
X	assert(src != NULL);
X	assert(!memoverlap(tgt, tgtsize, src, srcsize));
X
X	if (tgtsize > 0)
X		memmove((char *)tgt + srcsize, tgt, tgtsize);
X	if (srcsize > 0)
X		memcpy(tgt, src, srcsize);
X	return tgt;
}
SHAR_EOF
  $shar_touch -am 0205190994 'liw-modules-0.4/strutil/memins.c' &&
  chmod 0600 'liw-modules-0.4/strutil/memins.c' ||
  echo 'restore of liw-modules-0.4/strutil/memins.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memins.c'`"
  test 557 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memins.c: original size 557, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memisort.3 ==============
if test -f 'liw-modules-0.4/strutil/memisort.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memisort.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memisort.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memisort.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:memisort.3,v 1.2 1994/06/20 20:29:54 liw Exp"
X.\"
X.TH MEMISORT 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
memisort \- insert new element into sorted array
X.SH SYNOPSIS
X.nf
#include <publib.h>
X
void \fBmemisort\fR(void *\fIbase\fR, size_t \fIelsize\fR, size_t \fInelem\fR, const void *\fInew\fR,
X		int (*\fIcomp\fR)(const void *, const void *));
X.SH DESCRIPTION
\fImemisort\fR inserts a new element into a sorted array, in the proper
place to keep the array sorted.  \fIbase\fR, \fIelsize\fR, \fInelem\fR,
and \fIcomp\fR are as for \fIqsort\fR(3), \fInew\fR is a pointer to
the new element.
X.SH "SEE ALSO"
publib(3), qsort(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620232994 'liw-modules-0.4/strutil/memisort.3' &&
  chmod 0600 'liw-modules-0.4/strutil/memisort.3' ||
  echo 'restore of liw-modules-0.4/strutil/memisort.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memisort.3'`"
  test 746 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memisort.3: original size 746, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memisort.c ==============
if test -f 'liw-modules-0.4/strutil/memisort.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memisort.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memisort.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memisort.c' &&
/*
X * memisort.c -- sort new element in sorted array
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:memisort.c,v 1.1 1994/02/06 09:45:09 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
X
void memisort(void *base, size_t nelem, size_t elsize, const void *new, 
X	      int (*comp)(const void *, const void *)) {
X	char *p, *top, *cbase;
X
X	assert(base != NULL);
X	assert(elsize > 0);
X	assert(new != NULL);
X	assert(comp != NULL);
X	assert(!memoverlap(base, nelem*elsize, new, elsize));
X
X	cbase = (char *) base;
X	top = cbase + nelem*elsize;
X	for (p = top; p > cbase; p -= elsize)
X		if ((*comp)(new, p-elsize) >= 0)
X			break;
X	if (p < top)
X		memmove(p+elsize, p, (size_t) (top-p));
X			/* we're lost if ptrdiff_t < size_t */
X	memcpy(p, new, elsize);
}
SHAR_EOF
  $shar_touch -am 0206114594 'liw-modules-0.4/strutil/memisort.c' &&
  chmod 0600 'liw-modules-0.4/strutil/memisort.c' ||
  echo 'restore of liw-modules-0.4/strutil/memisort.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memisort.c'`"
  test 809 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memisort.c: original size 809, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memmem.3 ==============
if test -f 'liw-modules-0.4/strutil/memmem.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memmem.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memmem.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memmem.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:memmem.3,v 1.1 1994/06/20 20:29:56 liw Exp"
X.\"
X.TH MEMMEM 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
memmem \- search for memory block inside another memory block
X.SH SYNOPSIS
X.nf
#include <publib.h>
void *\fBmemmem\fR(const void *\fIv\fR, size_t \fIsize\fR,
X               const void *\fIpat\fR, size_t \fIpatsize\fR);
X.SH DESCRIPTION
\fImemmem\fR searches for the pattern \fIpat\fR (length \fIpatsize\fR bytes)
in the memory block \fIv\fR (length \fIsize\fR bytes).
X.SH "RETURN VALUE"
\fImemmem\fR returns a pointer to the first byte of the first
occurence it finds, or NULL if it doesn't find any occurence.
X.SH "SEE ALSO"
publib(3), memrmem(3), strstr(3), strrstr(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620232994 'liw-modules-0.4/strutil/memmem.3' &&
  chmod 0600 'liw-modules-0.4/strutil/memmem.3' ||
  echo 'restore of liw-modules-0.4/strutil/memmem.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memmem.3'`"
  test 793 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memmem.3: original size 793, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memmem.c ==============
if test -f 'liw-modules-0.4/strutil/memmem.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memmem.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memmem.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memmem.c' &&
/*
X * memmem.c -- search for memory block inside another memory block
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:memmem.c,v 1.1 1994/06/20 20:29:57 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
void *memmem(const void *v, size_t size, const void *pat, size_t patsize) {
X	const char *p;
X
X	assert(v != NULL);
X	assert(pat != NULL);
X
X	for (p = v; size >= patsize; ++p, --size)
X		if (memcmp(p, pat, patsize) == 0)
X			return (void*) p;
X	return NULL;
}
SHAR_EOF
  $shar_touch -am 0620232994 'liw-modules-0.4/strutil/memmem.c' &&
  chmod 0600 'liw-modules-0.4/strutil/memmem.c' ||
  echo 'restore of liw-modules-0.4/strutil/memmem.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memmem.c'`"
  test 520 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memmem.c: original size 520, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memoverlap.3 ==============
if test -f 'liw-modules-0.4/strutil/memoverlap.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memoverlap.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memoverlap.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memoverlap.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:memoverlap.3,v 1.1 1994/02/05 17:09:24 liw Exp"
X.\"
X.TH MEMOVERLAP 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
memoverlap \- check whether two memory blocks overlap
X.SH SYNOPSIS
X.nf
#include <publib.h>
int \fBmemoverlap\fR(const void *\fIt\fR, size_t \fIts\fR, const void *\fIs\fR, size_t \fIss\fR);
X.SH DESCRIPTION
\fImemoverlap\fR checks whether the memory blocks \fIt\fR--(\fIt+ts-1\fR)
and \fIs\fR--(\fIs+ss-1\fR) overlap.  Neither pointer argument may be
NULL, but the sizes may be 0.  The memory blocks can be arbitrary, they
do not have to be part of the same array.  Therefore, this function hides
the unportable pointer comparison that one would otherwise rely on.
X.SH "RETURN VALUE"
\fImemoverlap\fR returns 0 if the blocks do not overlap, and nonzero
if they do.
X.SH "SEE ALSO"
publib(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0205190994 'liw-modules-0.4/strutil/memoverlap.3' &&
  chmod 0600 'liw-modules-0.4/strutil/memoverlap.3' ||
  echo 'restore of liw-modules-0.4/strutil/memoverlap.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memoverlap.3'`"
  test 919 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memoverlap.3: original size 919, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memoverlap.c ==============
if test -f 'liw-modules-0.4/strutil/memoverlap.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memoverlap.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memoverlap.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memoverlap.c' &&
/*
X * memoverlap.c -- check whether two memory areas overlap
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:memoverlap.c,v 1.3 1994/06/20 20:29:59 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
X
/* NOTE: This implementation assumes that arbitrary pointers can be
X   compared.  You need to fix it for a system where this doesn't hold.  */
int memoverlap(const void *t, size_t tsize, const void *s, size_t ssize) {
X	const char *ct, *cs;
X
X	if (t == NULL || s == NULL)
X		return 0;
X
X	ct = t;
X	cs = s;
X	if (ssize == 0)
X		ssize = 1;
X	if (tsize == 0)
X		tsize = 1;
X
X	return (cs+ssize-1 >= ct && cs <= ct+tsize-1)
X	    || (ct+tsize-1 >= cs && ct <= cs+ssize-1);
}
X
X
/* As a curiosity, the following should be a strictly standard-conforming
X   implementation.  It's rather useless for real work.  */
#if 0
int memoverlap(const void *t, size_t tsize, const void *s, size_t ssize) {
X	const char *ct, *cs;
X	size_t nt, ns;
X
X	for (ct = t, nt = 0; nt < tsize; ++nt, ++ct)
X		for (cs = s, ns = 0; ns < ssize; ++ns, ++cs)
X			if (cs == ct)
X				return 1;
X	return 0;
}
#endif
SHAR_EOF
  $shar_touch -am 0620232994 'liw-modules-0.4/strutil/memoverlap.c' &&
  chmod 0600 'liw-modules-0.4/strutil/memoverlap.c' ||
  echo 'restore of liw-modules-0.4/strutil/memoverlap.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memoverlap.c'`"
  test 1122 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memoverlap.c: original size 1122, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memrchr.3 ==============
if test -f 'liw-modules-0.4/strutil/memrchr.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memrchr.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memrchr.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memrchr.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:memrchr.3,v 1.1 1994/08/28 18:13:41 liw Exp"
X.\"
X.TH MEMRCHR 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
memrchr \- find last occurence of a character within another memory block
X.SH SYNOPSIS
X.nf
#include <publib.h>
void *\fBmemrchr\fR(const void *\fIv\fR, int \fIc\fR, size_t \fIsize\fR);
X.SH DESCRIPTION
\fImemrchr\fR finds the last occurence of character \fIc\fR within memory
block \fIv\fR, of length \fIsize\fR.
X.SH "RETURN VALUE"
\fImemrchr\fR returns a pointer to the the match, if it finds any,
or a null pointer if it doesn't.
X.SH "SEE ALSO"
publib(3), memchr(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0828211394 'liw-modules-0.4/strutil/memrchr.3' &&
  chmod 0600 'liw-modules-0.4/strutil/memrchr.3' ||
  echo 'restore of liw-modules-0.4/strutil/memrchr.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memrchr.3'`"
  test 692 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memrchr.3: original size 692, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memrchr.c ==============
if test -f 'liw-modules-0.4/strutil/memrchr.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memrchr.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memrchr.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memrchr.c' &&
/*
X * memrchr.c -- reverse search for character inside another memory block
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:memrchr.c,v 1.2 1994/10/06 11:09:24 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
void *memrchr(const void *v, int c, size_t size) {
X	const char *p;
X
X	assert(v != NULL);
X
X	p = (const char *)v + size;
X	while (size-- > 0)
X		if (*--p == c)
X			return (void *) p;
X	return NULL;
}
SHAR_EOF
  $shar_touch -am 1006130994 'liw-modules-0.4/strutil/memrchr.c' &&
  chmod 0600 'liw-modules-0.4/strutil/memrchr.c' ||
  echo 'restore of liw-modules-0.4/strutil/memrchr.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memrchr.c'`"
  test 468 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memrchr.c: original size 468, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/memrev.3 ==============
if test -f 'liw-modules-0.4/strutil/memrev.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/memrev.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/memrev.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/memrev.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:memrev.3,v 1.1.1.1 1994/02/03 17:25:29 liw Exp"
X.\"
X.TH MEMREV 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
memrev \- reverse an array in place
X.SH SYNOPSIS
X.nf
#include <publib.h>
void *\fBmemrev\fR(void *\fIblock\fR, size_t \fIelsize\fR, size_t \fIelnum\fR);
X.SH DESCRIPTION
\fImemrev\fR will reverse an array, by swapping the contents of
its elements.
X.SH "RETURN VALUE"
\fImemrev\fR returns its first argument.
X.SH EXAMPLE
To reverse an integer array one might do the following.
X.sp 1
X.nf
X.in +5
int array[4] = { 1, 2, 3, 4 };
X
memrev(array, sizeof(array[0]), 4);
X.in -5
X.sp 1
This will result in the array being { 4, 3, 2, 1 }.
X.SH "SEE ALSO"
publib(3), strrev(3), memshuffle(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/memrev.3' &&
  chmod 0600 'liw-modules-0.4/strutil/memrev.3' ||
  echo 'restore of liw-modules-0.4/strutil/memrev.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/memrev.3'`"
  test 803 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/memrev.3: original size 803, current size $shar_count"
fi
: || echo 'restore of liw-modules-0.4/strutil/memrev.c failed'
echo 'End of part 9, continue with part 10'
exit 0

