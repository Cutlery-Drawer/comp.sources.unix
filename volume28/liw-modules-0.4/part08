Newsgroups: comp.sources.unix
From: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Subject: v28i195: liw-modules-0.4 - the LIW module set (for use with Publib), Part08/14
References: <1.785201893.15507@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Posting-Number: Volume 28, Issue 195
Archive-Name: liw-modules-0.4/part08

#!/bin/sh
# This is part 08 of a multipart archive.
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
# ============= liw-modules-0.4/sbuf/sbuf.c ==============
if test ! -d 'liw-modules-0.4'; then
  echo 'x - creating directory liw-modules-0.4'
  mkdir 'liw-modules-0.4'
fi
if test ! -d 'liw-modules-0.4/sbuf'; then
  echo 'x - creating directory liw-modules-0.4/sbuf'
  mkdir 'liw-modules-0.4/sbuf'
fi
if test -f 'liw-modules-0.4/sbuf/sbuf.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/sbuf/sbuf.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/sbuf/sbuf.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/sbuf/sbuf.c' &&
/*
X * sbuf.c -- simple text editor buffer routines
X *
X * Part of Publib.  See manpage for more information.
X * "@(#)publib-sbuf:sbuf.c,v 1.2 1994/10/06 11:15:27 liw Exp"
X */
X
X
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "publib/sbuf.h"
#include "publib/errormsg.h"
X
X
/* Return length of gap */
#define gaplen(buf)	(buf->alloc - buf->len)
X
X
X
/* Create a buffer. */
Sbuf *sbuf_create(void) {
X	Sbuf *buf;
X
X	buf = malloc(sizeof(Sbuf));
X	if (buf == NULL) {
X		__publib_error("malloc failed");
X		return NULL;
X	}
X
X	buf->block = NULL;
X	buf->locked = 0;
X	buf->gappos = 0;
X	buf->alloc = 0;
X	buf->len = 0;
X	buf->marks = NULL;
X	buf->markalloc = 0;
X
X	sbuf_validate(buf);
X
X	return buf;
}
X
X
X
/* Destroy a buffer */
void sbuf_destroy(Sbuf *buf) {
X	sbuf_validate(buf);
X
X	free(buf->block);
X	free(buf->marks);
X	free(buf);
}
X
X
X
/* Check that all the data structures for the buffer are OK.  Abort program
X   if they aren't.  */
void (sbuf_validate)(Sbuf *buf) {
X	struct __sbufmark *m;
X	size_t i;
X
X	assert(buf != NULL);
X	assert(buf->len <= buf->alloc);
X	assert(buf->block != NULL || buf->alloc == 0);
X	assert(buf->gappos <= buf->alloc);
X	assert(buf->len <= buf->alloc);
X
X	assert(buf->marks != NULL || buf->markalloc == 0);
X	for (i = 0; i < buf->markalloc; ++i) {
X		m = buf->marks + i;
X		if (m->inuse) {
X			if (m->begin + m->len > buf->len) {
X				printf("buf=%p, m=%u, m->begin=%ld, m->len=%ld, buf->len=%u\n",
X					buf, i, m->begin, m->len, buf->len);
X				fflush(stdout);
X			}
X			assert(m->begin + m->len <= buf->len);
X		}
X	}
}
X
X
X
/* Move gap before the pos'th character in text, and make sure it is at
X   least len characters. */
int sbuf_movegap(Sbuf *buf, size_t pos, size_t len) {
X	char *p;
X
X	sbuf_validate(buf);
X	assert(pos <= buf->len);
X	assert(!buf->locked);
X
X	if (gaplen(buf) < len || buf->block == NULL) {
X		if (buf->block != NULL && sbuf_movegap(buf, buf->len, 0) < 0) {
X			__publib_error("recursive sbuf_failed (can't happen)");
X			return -1;
X		}
X		p = realloc(buf->block, buf->alloc + len + 4);
X		if (p == NULL) {
X			__publib_error("realloc failed");
X			return -1;
X		}
X		buf->block = p;
X		buf->alloc += len;
X	}
X
X	assert(buf->block != NULL);
X        if (pos < buf->gappos)
X               	memmove(buf->block + pos + gaplen(buf),
X                       	buf->block + pos,
X                       	buf->gappos - pos);
X        else
X               	memmove(buf->block + buf->gappos,
X                       	buf->block + buf->gappos + gaplen(buf),
X                       	pos - buf->gappos);
X        buf->gappos = pos;
X
X	sbuf_validate(buf);
X
X	return 0;
}
X
X
X
/* Lock buffer against changes and return pointer to a contiguous block
X   of memory holding the buffer contents (which may be modified except
X   its length may not be modified).  */
char *sbuf_lock(Sbuf *buf) {
X	sbuf_validate(buf);
X	assert(!buf->locked);
X
X	if (sbuf_movegap(buf, buf->len, 0) == -1) {
X		__publib_error("sbuf_movegap failed");
X		return NULL;
X	}
X	buf->locked = 1;
X	return buf->block;
}
X
X
X
/* Release a lock on a buffer.  The user may not assume that the pointer
X   returned by sbuf_lock is usable any longer.  */
void sbuf_unlock(Sbuf *buf) {
X	sbuf_validate(buf);
X	assert(buf->locked);
X
X	buf->locked = 0;
}
X
X
X
/* Return length (== number of character in the buffer). */
long sbuf_length(Sbuf *buf) {
X	sbuf_validate(buf);
X	return buf->len;
}
X
X
X
/* Return the character at position pos.  Return EOF if just after last
X   character.  */
int (sbuf_charat)(Sbuf *buf, long pos) {
X	sbuf_validate(buf);
X	assert(pos >= 0);
X	assert(pos <= buf->len);
X	assert(!buf->locked);
X
X	if (pos == buf->len)
X		return EOF;
X
X	assert(buf->block != NULL);
X	if (pos < buf->gappos)
X		return buf->block[pos];
X	return buf->block[pos + gaplen(buf)];
}
X
X
X
/* Create a mark. */
Sbufmark *sbuf_mark(Sbuf *buf, long pos, long len) {
X	struct __sbufmark *p;
X	Sbufmark *q;
X	size_t i;
X
X	sbuf_validate(buf);
X	assert(pos >= 0);
X	assert(len >= 0);
X	assert(pos + len <= buf->len);
X
X	p = NULL;
X	for (i = 0; i < buf->markalloc; ++i) {
X		if (!buf->marks[i].inuse) {
X			p = buf->marks + i;
X			break;
X		}
X	}
X	if (p == NULL) {
X		i = buf->markalloc + 8;
X		p = realloc(buf->marks, i * sizeof(struct __sbufmark));
X		if (p == NULL) {
X			__publib_error("realloc failed");
X			return NULL;
X		}
X		buf->marks = p;
X		p = buf->marks + buf->markalloc;
X		while (buf->markalloc < i)
X			buf->marks[buf->markalloc++].inuse = 0;
X		buf->markalloc = i;
X	}
X
X	q = malloc(sizeof(Sbufmark));
X	if (q == NULL) {
X		__publib_error("malloc failed");
X		return NULL;
X	}
X
X	p->inuse = 1;
X	p->begin = pos;
X	p->len = len;
X	p->dirty = 0;
X
X	q->buf = buf;
X	q->mark = p - buf->marks;
X
X	sbuf_validate(buf);
X	sbuf_validate_mark(q);
X
X	return q;
}
X
X
X
/* Destroy a mark.  */
void sbuf_unmark(Sbufmark *mark) {
X	sbuf_validate_mark(mark);
X
X	mark->buf->marks[mark->mark].inuse = 0;
}
X
X
X
/* Check that a mark's data structures are ok.  */
void (sbuf_validate_mark)(Sbufmark *mark) {
X	assert(mark != NULL);
X	sbuf_validate(mark->buf);
X	assert(mark->mark < mark->buf->markalloc);
X	assert(mark->buf->marks[mark->mark].inuse);
}
X
X
X
/* Move an existing mark. */
void sbuf_remark(Sbufmark *mark, long pos, long len) {
X	sbuf_validate_mark(mark);
X	assert(pos >= 0);
X	assert(len >= 0);
X	assert(pos + len <= mark->buf->len);
X
X	mark->buf->marks[mark->mark].begin = pos;
X	mark->buf->marks[mark->mark].len = len;
X	mark->buf->marks[mark->mark].dirty = 0;
}
X
X
X
/* Return starting position of mark. */
long sbuf_mark_begin(Sbufmark *mark) {
X	sbuf_validate_mark(mark);
X	return mark->buf->marks[mark->mark].begin;
}
X
X
X
/* Return end position of mark.  */
long sbuf_mark_end(Sbufmark *mark) {
X	sbuf_validate_mark(mark);
X	return mark->buf->marks[mark->mark].begin +
X               mark->buf->marks[mark->mark].len;
}
X
X
X
/* Return length of mark.  */
long sbuf_mark_len(Sbufmark *mark) {
X	sbuf_validate_mark(mark);
X	return mark->buf->marks[mark->mark].len;
}
X
X
X
/* Return dirty bit.  */
int sbuf_mark_is_dirty(Sbufmark *mark) {
X	sbuf_validate_mark(mark);
X	return mark->buf->marks[mark->mark].dirty;
}
X
X
X
/* Set dirty bit.  */
void sbuf_mark_set_dirty(Sbufmark *mark, int dirty) {
X	sbuf_validate_mark(mark);
X	mark->buf->marks[mark->mark].dirty = dirty;
}
X
X
X
/* Copy marked text to a string.  */
void sbuf_strat(char *str, Sbufmark *mark) {
X	struct __sbufmark *m;
X	char *p;
X
X	assert(str != NULL);
X	sbuf_validate_mark(mark);
X
X	p = sbuf_lock(mark->buf);
X	m = mark->buf->marks + mark->mark;
X	if (m->len > 0)
X		memcpy(str, p + m->begin, m->len);
X	str[m->len] = '\0';
X	sbuf_unlock(mark->buf);
}
X
X
X
/* Replace the contents of a mark with a string.  */
int sbuf_strchange(Sbufmark *mark, const char *str, size_t len) {
X	struct __sbufmark *m, old;
X	long mend, oldend;
X	size_t i;
X
X	sbuf_validate_mark(mark);
X	assert(str != NULL);
X	assert(strlen(str) >= len);	/* bug if buffer may hold '\0'! */
X	assert(!mark->buf->locked);
X
X	m = mark->buf->marks + mark->mark;
X
X	/*
X	 * Delete old contents of mark
X	 */
X	if (sbuf_movegap(mark->buf, m->begin, len) == -1) {
X		__publib_error("sbuf_movegap failed");
X		return -1;
X	}
X	assert(m->len <= mark->buf->len - m->begin);
X	mark->buf->len -= m->len;
X
X	/*
X	 * Insert string
X	 */
X	memcpy(mark->buf->block + mark->buf->gappos, str, len);
X	mark->buf->len += len;
X	mark->buf->gappos += len;
X
X	/*
X	 * Adjust marks
X	 */
X	old = *m;
X	oldend = old.begin + old.len;
X	for (i = 0; i < mark->buf->markalloc; ++i) {
X		m = mark->buf->marks + i;
X		if (!m->inuse)
X			continue;
X		mend = m->begin + m->len;
X		if (m->begin < old.begin && mend > old.begin) {
X			/* m starts before, extends into or after old */
X			if (mend <= oldend)
X				m->len = len + old.begin - m->begin;
X			else
X				m->len = m->len - old.len + len;
X		} else if (m->begin >= old.begin && m->begin < oldend) {
X			/* m starts within or at beginning of old */
X			m->begin = old.begin;
X			if (mend > oldend)
X				m->len = len + (mend - oldend);
X			else
X				m->len = len;
X		} else if (m->begin >= oldend) {
X			/* m starts after or at end of old */
X			m->len = m->len - old.len + len;
X		}
X		m->dirty = 1;
X	}
X
X	sbuf_validate_mark(mark);
X
X	return 0;
}
X
X
X
/* Replace contents of one mark with those of another mark.  The marks may
X   overlap.  */
int sbuf_change(Sbufmark *mark, Sbufmark *repl) {
X	char *temp, tempbuf[10240];
X	long len;
X	int ret;
X
X	sbuf_validate_mark(mark);
X	sbuf_validate_mark(repl);
X
X	len = sbuf_mark_len(repl);
X	if (len < sizeof tempbuf)
X		temp = tempbuf;
X	else {
X		temp = malloc(len+1);
X		if (temp == NULL) {
X			__publib_error("malloc failed");
X			return -1;
X		}
X	}
X
X	sbuf_strat(temp, repl);
X	ret = sbuf_strchange(mark, temp, len);
X
X	if (temp != tempbuf)
X		free(temp);
X
X	return ret;
}
X
X
X
/* Replace contents of mark m with the contents of file f */
int sbuf_insert_file(Sbufmark *m, FILE *f) {
X	size_t i, n, inc;
X	char *p, *q;
X
X	n = 0;
X	inc = 128*1024;	/* a nice small number */
X	p = NULL;
X	do {
X		q = realloc(p, n + inc);
X		if (q == NULL) {
X			__publib_error("realloc failed");
X			return -1;
X		}
X		p = q;
X
X		i = fread(p+n, 1, inc, f);
X		if (i != inc && ferror(f)) {
X			__publib_error("fread failed");
X			free(p);
X			return -1;
X		}
X
X		n += i;
X	} while (!feof(f));
X
X	if (sbuf_strchange(m, p, n) == -1) {
X		__publib_error("sbuf_strchange failed");
X		free(p);
X		return -1;
X	}
X
X	free(p);
X	return 0;
}
X
X
X
/* Write contents of mark m to file f.  */
int sbuf_write_to_file(Sbufmark *m, FILE *f) {
X	size_t i;
X	long n;
X	char *p;
X
X	n = sbuf_mark_len(m);
X	p = malloc(n);
X	if (p == NULL) {
X		__publib_error("malloc failed");
X		return -1;
X	}
X
X	sbuf_strat(p, m);
X
X	i = fwrite(p, 1, n, f);
X	if (i != n) {
X		__publib_error("fwrite failed");
X		free(p);
X		return -1;
X	}
X
X	free(p);
X	return 0;
}
X
SHAR_EOF
  $shar_touch -am 1006131594 'liw-modules-0.4/sbuf/sbuf.c' &&
  chmod 0600 'liw-modules-0.4/sbuf/sbuf.c' ||
  echo 'restore of liw-modules-0.4/sbuf/sbuf.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/sbuf/sbuf.c'`"
  test 9542 -eq "$shar_count" ||
    echo "liw-modules-0.4/sbuf/sbuf.c: original size 9542, current size $shar_count"
fi
# ============= liw-modules-0.4/sbuf/sbuf.h ==============
if test -f 'liw-modules-0.4/sbuf/sbuf.h' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/sbuf/sbuf.h (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/sbuf/sbuf.h (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/sbuf/sbuf.h' &&
/*
X * sbuf.h -- simple text editor buffer routines
X *
X * Part of Publib.  See manpage for more information.
X * "@(#)publib-sbuf:sbuf.h,v 1.1.1.1 1994/08/28 17:12:05 liw Exp"
X */
X
X
#ifndef __publib_sbuf_included
#define __publib_sbuf_included
X
X
/*
X * Includes for types defined elsewhere.
X * These are all standard headers.
X */
X
#include <stddef.h>		/* need size_t */
X
X
struct __sbufmark {
X	unsigned inuse:1;	/* is this mark in use? */
X	unsigned dirty:1;	/* has text in mark been modified? */
X	long begin;		/* where the buffer begins ... */
X	long len;		/* ...and how long it is */
};
X
X
struct __sbuf {
X	char *block;
X	unsigned locked:1;
X	size_t gappos;
X	size_t alloc;
X	size_t len;
X
X	struct __sbufmark *marks;
X	size_t markalloc;
};
typedef struct __sbuf Sbuf;
X
/*
X * This is how the client sees a struct __bufmark.  We can't use a
X * pointer directly, since the struct __bufmarks may move because of
X * realloc, and we can't assume that the client will be able to update
X * his pointers.
X */
typedef struct {
X	Sbuf *buf;
X	size_t mark;
} Sbufmark;
X
X
/*
X * The validation functions shouldn't generate any code when NDEBUG is
X * defined.  This is the same behaviour as assert has.  Note that the
X * prototypes and definitions of these functions are protected against
X * the macros by virtue of having the function names within parentheses.
X */
#ifdef NDEBUG
#define sbuf_validate(buf)	((void)0)
#define sbuf_validate_mark(m)	((void)0)
#endif
X
X
/*
X * Let's use the same NDEBUG flag to turn on a macro version of sbuf_charat.
X * _NO_ error checking for this baby.  Use the non-macro version for that.
X */
#ifdef NDEBUG
#include <stdio.h> /* need EOF */
#define sbuf_charat(buf, pos) \
X	((pos) == (buf)->len \
X		?  EOF \
X		: (pos) < (buf)->gappos \
X			? (buf)->block[(pos)] \
X			: (buf)->block[(pos) + (buf)->gappos])
#endif
X
X
void sbufgap_movegap(Sbuf *, size_t);
X
void sbuf_insert(Sbuf *, size_t, const char *, size_t);
void sbuf_delete(Sbuf *, size_t, size_t);
char *sbuf_lock(Sbuf *);
void sbuf_unlock(Sbuf *);
X
Sbuf *sbuf_create(void);
void sbuf_destroy(Sbuf *);
void (sbuf_validate)(Sbuf *);
X
Sbufmark *sbuf_mark(Sbuf *, long, long);
void sbuf_remark(Sbufmark *, long, long);
void sbuf_unmark(Sbufmark *);
long sbuf_mark_begin(Sbufmark *);
long sbuf_mark_end(Sbufmark *);
long sbuf_mark_len(Sbufmark *);
int sbuf_mark_is_dirty(Sbufmark *);
void sbuf_mark_set_dirty(Sbufmark *, int);
void (sbuf_validate_mark)(Sbufmark *);
X
int sbuf_strchange(Sbufmark *, const char *, size_t);
int sbuf_change(Sbufmark *, Sbufmark *);
int (sbuf_charat)(Sbuf *, long);
void sbuf_strat(char *, Sbufmark *);
X
int sbuf_insert_file(Sbufmark *, FILE *);
int sbuf_write_to_file(Sbufmark *, FILE *);
X
long sbuf_length(Sbuf *);
X
#endif
SHAR_EOF
  $shar_touch -am 0828201294 'liw-modules-0.4/sbuf/sbuf.h' &&
  chmod 0600 'liw-modules-0.4/sbuf/sbuf.h' ||
  echo 'restore of liw-modules-0.4/sbuf/sbuf.h failed'
  shar_count="`wc -c < 'liw-modules-0.4/sbuf/sbuf.h'`"
  test 2707 -eq "$shar_count" ||
    echo "liw-modules-0.4/sbuf/sbuf.h: original size 2707, current size $shar_count"
fi
# ============= liw-modules-0.4/stack/Makefile ==============
if test ! -d 'liw-modules-0.4/stack'; then
  echo 'x - creating directory liw-modules-0.4/stack'
  mkdir 'liw-modules-0.4/stack'
fi
if test -f 'liw-modules-0.4/stack/Makefile' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/stack/Makefile (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/stack/Makefile (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/stack/Makefile' &&
objs = stack_copy.o stack_create.o stack_destroy.o stack_emptyp.o \
X	stack_pop.o stack_push.o
include $(srcdir)/Generic.mk
$(objs): stack.h
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/stack/Makefile' &&
  chmod 0600 'liw-modules-0.4/stack/Makefile' ||
  echo 'restore of liw-modules-0.4/stack/Makefile failed'
  shar_count="`wc -c < 'liw-modules-0.4/stack/Makefile'`"
  test 140 -eq "$shar_count" ||
    echo "liw-modules-0.4/stack/Makefile: original size 140, current size $shar_count"
fi
# ============= liw-modules-0.4/stack/README ==============
if test -f 'liw-modules-0.4/stack/README' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/stack/README (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/stack/README (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/stack/README' &&
README for Publib module stack
Lars Wirzenius
"@(#)publib-stack:README,v 1.1 1994/08/28 18:09:27 liw Exp"
X
These routines implement a generic stack.
X
----------------------
X
Copyright (c) 1994 Lars Wirzenius.  All rights reserved.
X
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
X
1. Redistributions of source code must retain the above copyright
X   notice, this list of conditions and the following disclaimer.
X
2. Redistributions in binary form must reproduce the above copyright
X   notice, this list of conditions and the following disclaimer in the
X   documentation and/or other materials provided with the distribution.
X
THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
SHAR_EOF
  $shar_touch -am 0828210994 'liw-modules-0.4/stack/README' &&
  chmod 0600 'liw-modules-0.4/stack/README' ||
  echo 'restore of liw-modules-0.4/stack/README failed'
  shar_count="`wc -c < 'liw-modules-0.4/stack/README'`"
  test 1426 -eq "$shar_count" ||
    echo "liw-modules-0.4/stack/README: original size 1426, current size $shar_count"
fi
# ============= liw-modules-0.4/stack/stack.3 ==============
if test -f 'liw-modules-0.4/stack/stack.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/stack/stack.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/stack/stack.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/stack/stack.3' &&
X.\" part of publib
X.\" "@(#)publib-stack:stack.3,v 1.2 1994/02/03 17:34:05 liw Exp"
X.\"
X.TH STACK 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
stack_create, stack_destroy, stack_pop, stack_is_empty, stack_copy,
stack_push \- manipulate stacks
X.SH SYNOPSIS
X.nf
#include <stack.h>
X.br
Stack *\fBstack_create\fR(void);
void \fBstack_destroy\fR(Stack *);
void *\fBstack_pop\fR(Stack *);
int \fBstack_is_empty\fR(Stack *);
Stack *\fBstack_copy\fR(Stack *);
int \fBstack_push\fR(Stack *, void *\fIdata\fR, size_t \fIbytes\fR);
X.SH "DESCRIPTION"
These functions operate on stacks.  This manual page is shortish.
X.SH "SEE ALSO"
publib(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203193494 'liw-modules-0.4/stack/stack.3' &&
  chmod 0600 'liw-modules-0.4/stack/stack.3' ||
  echo 'restore of liw-modules-0.4/stack/stack.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/stack/stack.3'`"
  test 706 -eq "$shar_count" ||
    echo "liw-modules-0.4/stack/stack.3: original size 706, current size $shar_count"
fi
# ============= liw-modules-0.4/stack/stack.h ==============
if test -f 'liw-modules-0.4/stack/stack.h' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/stack/stack.h (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/stack/stack.h (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/stack/stack.h' &&
/*
X * stack.h -- stack routines
X *
X * Part of publib
X * "@(#)publib-stack:stack.h,v 1.1.1.1 1993/11/20 17:02:51 liw Exp"
X */
X
#ifndef __publib_stack_h
#define __publib_stack_h
X
#include <stddef.h>	/* need size_t */
X
struct __stack {
X	void **data;
X	size_t *size;
X	size_t allocated, used;
};
typedef struct __stack Stack;
X
Stack *stack_create(void);
void stack_destroy(Stack *);
void *stack_pop(Stack *);
int stack_is_empty(Stack *);
Stack *stack_copy(Stack *);
int stack_push(Stack *, void *__data, size_t __bytes);
X
#endif
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/stack/stack.h' &&
  chmod 0600 'liw-modules-0.4/stack/stack.h' ||
  echo 'restore of liw-modules-0.4/stack/stack.h failed'
  shar_count="`wc -c < 'liw-modules-0.4/stack/stack.h'`"
  test 523 -eq "$shar_count" ||
    echo "liw-modules-0.4/stack/stack.h: original size 523, current size $shar_count"
fi
# ============= liw-modules-0.4/stack/stack_copy.c ==============
if test -f 'liw-modules-0.4/stack/stack_copy.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/stack/stack_copy.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/stack/stack_copy.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/stack/stack_copy.c' &&
/*
X * stack_copy.c -- make a copy of a stack and pushed data
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-stack:stack_copy.c,v 1.3 1994/07/16 15:29:05 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "publib/stack.h"
#include "publib/errormsg.h"
X
Stack *stack_copy(Stack *st) {
X	Stack *cp;
X	size_t i;
X
X	assert(st != NULL);
X
X	cp = malloc(sizeof(Stack));
X	if (cp == NULL) {
X		__publib_error("malloc failed");
X		return NULL;
X	}
X
X	cp->data = NULL;	/* initializations needed for error return */
X	cp->size = NULL;
X
X	cp->allocated = cp->used = st->used;
X
X	if (cp->used == 0)
X		return cp;
X
X	cp->data = malloc(st->used * sizeof(void *));
X	if (cp->data == NULL)
X		goto error;
X
X	cp->size = malloc(st->used * sizeof(size_t));
X	if (cp->size == NULL)
X		goto error;
X
X	for (i = 0; i < st->used; ++i) {
X		if (st->size[i] == 0) {
X			cp->data[i] = st->data[i];
X			cp->size[i] = st->size[i];
X		} else {
X			cp->data[i] = malloc(st->size[i]);
X			if (cp->data[i] == NULL)
X				goto error;
X			memcpy(cp->data[i], st->data[i], st->size[i]);
X			cp->size[i] = st->size[i];
X		}
X	}
X
X	return 0;
X
X error:
X	__publib_error("malloc failed");
X	free(cp->data);
X	free(cp->size);
X	free(cp);
X	return NULL;
}
SHAR_EOF
  $shar_touch -am 0716182994 'liw-modules-0.4/stack/stack_copy.c' &&
  chmod 0600 'liw-modules-0.4/stack/stack_copy.c' ||
  echo 'restore of liw-modules-0.4/stack/stack_copy.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/stack/stack_copy.c'`"
  test 1229 -eq "$shar_count" ||
    echo "liw-modules-0.4/stack/stack_copy.c: original size 1229, current size $shar_count"
fi
# ============= liw-modules-0.4/stack/stack_create.c ==============
if test -f 'liw-modules-0.4/stack/stack_create.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/stack/stack_create.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/stack/stack_create.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/stack/stack_create.c' &&
/*
X * stack_create.c -- create a new (and empty) stack
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-stack:stack_create.c,v 1.3 1994/07/16 15:29:06 liw Exp"
X */
X
#include <stdlib.h>
#include "publib/stack.h"
#include "publib/errormsg.h"
X
Stack *stack_create(void) {
X	Stack *st;
X
X	st = malloc(sizeof(Stack));
X	if (st == NULL) {
X		__publib_error("malloc failed");
X		return NULL;
X	}
X
X	st->data = NULL;
X	st->size = NULL;
X	st->allocated = 0;
X	st->used = 0;
X	return st;
}
SHAR_EOF
  $shar_touch -am 0716182994 'liw-modules-0.4/stack/stack_create.c' &&
  chmod 0600 'liw-modules-0.4/stack/stack_create.c' ||
  echo 'restore of liw-modules-0.4/stack/stack_create.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/stack/stack_create.c'`"
  test 492 -eq "$shar_count" ||
    echo "liw-modules-0.4/stack/stack_create.c: original size 492, current size $shar_count"
fi
# ============= liw-modules-0.4/stack/stack_destroy.c ==============
if test -f 'liw-modules-0.4/stack/stack_destroy.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/stack/stack_destroy.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/stack/stack_destroy.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/stack/stack_destroy.c' &&
/*
X * stack_destroy.c -- free resources allocated for stack
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-stack:stack_destroy.c,v 1.1.1.1 1993/11/20 17:02:51 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include "publib/stack.h"
X
void stack_destroy(Stack *st) {
X	assert(st != NULL);
X	assert(st->used <= st->allocated);
X	while (st->used > 0)
X		stack_pop(st);
X	free(st->size);
X	free(st->data);
X	free(st);
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/stack/stack_destroy.c' &&
  chmod 0600 'liw-modules-0.4/stack/stack_destroy.c' ||
  echo 'restore of liw-modules-0.4/stack/stack_destroy.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/stack/stack_destroy.c'`"
  test 440 -eq "$shar_count" ||
    echo "liw-modules-0.4/stack/stack_destroy.c: original size 440, current size $shar_count"
fi
# ============= liw-modules-0.4/stack/stack_emptyp.c ==============
if test -f 'liw-modules-0.4/stack/stack_emptyp.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/stack/stack_emptyp.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/stack/stack_emptyp.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/stack/stack_emptyp.c' &&
/*
X * stack_is_empty.c -- test if stack is empty
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-stack:stack_emptyp.c,v 1.1.1.1 1993/11/20 17:02:51 liw Exp"
X */
X
#include <assert.h>
#include "publib/stack.h"
X
int stack_is_empty(Stack *st) {
X	assert(st != NULL);
X	return st->used == 0;
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/stack/stack_emptyp.c' &&
  chmod 0600 'liw-modules-0.4/stack/stack_emptyp.c' ||
  echo 'restore of liw-modules-0.4/stack/stack_emptyp.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/stack/stack_emptyp.c'`"
  test 311 -eq "$shar_count" ||
    echo "liw-modules-0.4/stack/stack_emptyp.c: original size 311, current size $shar_count"
fi
# ============= liw-modules-0.4/stack/stack_pop.c ==============
if test -f 'liw-modules-0.4/stack/stack_pop.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/stack/stack_pop.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/stack/stack_pop.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/stack/stack_pop.c' &&
/*
X * stack_pop.c -- remove and return topmost element of stack
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-stack:stack_pop.c,v 1.1.1.1 1993/11/20 17:02:51 liw Exp"
X */
X
#include <assert.h>
#include "publib/stack.h"
X
void *stack_pop(Stack *st) {
X	void *p;
X
X	assert(st != NULL);
X	assert(st->used > 0);
X
X	--st->used;
X	p = st->data[st->used];
X	st->data[st->used] = NULL;
X	st->size[st->used] = 0;
X	return p;
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/stack/stack_pop.c' &&
  chmod 0600 'liw-modules-0.4/stack/stack_pop.c' ||
  echo 'restore of liw-modules-0.4/stack/stack_pop.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/stack/stack_pop.c'`"
  test 434 -eq "$shar_count" ||
    echo "liw-modules-0.4/stack/stack_pop.c: original size 434, current size $shar_count"
fi
# ============= liw-modules-0.4/stack/stack_push.c ==============
if test -f 'liw-modules-0.4/stack/stack_push.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/stack/stack_push.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/stack/stack_push.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/stack/stack_push.c' &&
/*
X * stack_push.c -- push element on top of stack
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-stack:stack_push.c,v 1.3 1994/07/16 15:29:08 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "publib/stack.h"
#include "publib/errormsg.h"
X
int stack_push(Stack *st, void *data, size_t bytes) {
X	void *p;
X	size_t n;
X
X	assert(st != NULL);
X	assert(st->used <= st->allocated);
X	assert(data != NULL);
X
X	if (st->used == st->allocated) {
X		n = st->allocated + 64;
X
X		p = realloc(st->data, n * sizeof(void *));
X		if (p == NULL) {
X			__publib_error("realloc failed");
X			return -1;
X		}
X		st->data = p;
X
X		p = realloc(st->size, n * sizeof(size_t));
X		if (p == NULL) {
X			__publib_error("realloc failed");
X			return -1;
X		}
X		st->size = p;
X
X		while (st->allocated < n) {
X			st->data[st->allocated] = NULL;
X			st->size[st->allocated] = 0;
X			++st->allocated;
X		}
X	}
X
X	if (bytes == 0) {
X		st->data[st->used] = data;
X		st->size[st->used] = 0;
X	} else {
X		p = malloc(bytes);
X		if (p == NULL) {
X			__publib_error("malloc failed");
X			free(p);
X			return -1;
X		}
X		memcpy(p, data, bytes);
X		st->data[st->used] = p;
X		st->size[st->used] = bytes;
X	}
X
X	++st->used;
X
X	return 0;
}
SHAR_EOF
  $shar_touch -am 0716182994 'liw-modules-0.4/stack/stack_push.c' &&
  chmod 0600 'liw-modules-0.4/stack/stack_push.c' ||
  echo 'restore of liw-modules-0.4/stack/stack_push.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/stack/stack_push.c'`"
  test 1216 -eq "$shar_count" ||
    echo "liw-modules-0.4/stack/stack_push.c: original size 1216, current size $shar_count"
fi
: || echo 'restore of liw-modules-0.4/strutil/Makefile failed'
echo 'End of part 8, continue with part 9'
exit 0

