Newsgroups: comp.sources.unix
From: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Subject: v28i192: liw-modules-0.4 - the LIW module set (for use with Publib), Part05/14
References: <1.785201893.15507@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Posting-Number: Volume 28, Issue 192
Archive-Name: liw-modules-0.4/part05

#!/bin/sh
# This is part 05 of a multipart archive.
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
# ============= liw-modules-0.4/fname/fnhome.c ==============
if test ! -d 'liw-modules-0.4'; then
  echo 'x - creating directory liw-modules-0.4'
  mkdir 'liw-modules-0.4'
fi
if test ! -d 'liw-modules-0.4/fname'; then
  echo 'x - creating directory liw-modules-0.4/fname'
  mkdir 'liw-modules-0.4/fname'
fi
if test -f 'liw-modules-0.4/fname/fnhome.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/fname/fnhome.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/fname/fnhome.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/fname/fnhome.c' &&
/*
X * fnhome.c -- return home directory of user
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-fname:fnhome.c,v 1.4 1994/07/16 15:28:39 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include <pwd.h>
#include <unistd.h>
#include "publib/fname.h"
#include "publib/errormsg.h"
X
int fnhome(char *homedir, const char *username) {
X	struct passwd *pwd;
X
X	assert(homedir != NULL);
X	assert(username != NULL);
X	assert(*username != '\0');
X	if (username == NULL)
X		pwd = getpwuid(getuid());
X	else
X		pwd = getpwnam(username);
X	if (pwd == NULL) {
X		__publib_error("can't find home directory");
X		return -1;
X	}
X
X	strcpy(homedir, pwd->pw_dir);
X	return 0;
}
SHAR_EOF
  $shar_touch -am 0716182894 'liw-modules-0.4/fname/fnhome.c' &&
  chmod 0600 'liw-modules-0.4/fname/fnhome.c' ||
  echo 'restore of liw-modules-0.4/fname/fnhome.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/fname/fnhome.c'`"
  test 674 -eq "$shar_count" ||
    echo "liw-modules-0.4/fname/fnhome.c: original size 674, current size $shar_count"
fi
# ============= liw-modules-0.4/fname/fnjoin.c ==============
if test -f 'liw-modules-0.4/fname/fnjoin.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/fname/fnjoin.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/fname/fnjoin.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/fname/fnjoin.c' &&
/*
X * fnjoin.c -- join two filenames together
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-fname:fnjoin.c,v 1.2 1994/06/20 20:49:23 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include <stdio.h>
X
#include "publib/fname.h"
X
void fnjoin(char *res, const char *f1, const char *f2) {
X	const char *p;
X
X	assert(res != NULL);
X	assert(f1 != NULL);
X	assert(*f1 != '\0');
X	assert(f2 != NULL);
X	assert(*f2 != '\0');
X
X	p = strchr(f1, '\0');
X	if ((p > f1 && p[-1] == '/') || *f2 == '/')
X		p = "";
X	else
X		p = "/";
X	sprintf(res, "%s%s%s", f1, p, f2);
}
SHAR_EOF
  $shar_touch -am 0620234994 'liw-modules-0.4/fname/fnjoin.c' &&
  chmod 0600 'liw-modules-0.4/fname/fnjoin.c' ||
  echo 'restore of liw-modules-0.4/fname/fnjoin.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/fname/fnjoin.c'`"
  test 576 -eq "$shar_count" ||
    echo "liw-modules-0.4/fname/fnjoin.c: original size 576, current size $shar_count"
fi
# ============= liw-modules-0.4/fname/fnlastsuf.c ==============
if test -f 'liw-modules-0.4/fname/fnlastsuf.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/fname/fnlastsuf.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/fname/fnlastsuf.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/fname/fnlastsuf.c' &&
/*
X * fnlastsuf.c -- find last suffix in basename of filename
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-fname:fnlastsuf.c,v 1.2 1994/06/20 20:49:24 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/fname.h"
X
char *fnlastsuf(const char *fname) {
X	assert(fname != NULL);
X	return strchr(fnbase(fname), '.');
}
SHAR_EOF
  $shar_touch -am 0620234994 'liw-modules-0.4/fname/fnlastsuf.c' &&
  chmod 0600 'liw-modules-0.4/fname/fnlastsuf.c' ||
  echo 'restore of liw-modules-0.4/fname/fnlastsuf.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/fname/fnlastsuf.c'`"
  test 358 -eq "$shar_count" ||
    echo "liw-modules-0.4/fname/fnlastsuf.c: original size 358, current size $shar_count"
fi
# ============= liw-modules-0.4/fname/fnpathfind.3 ==============
if test -f 'liw-modules-0.4/fname/fnpathfind.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/fname/fnpathfind.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/fname/fnpathfind.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/fname/fnpathfind.3' &&
X.\" part of publib
X.\" "@(#)publib-fname:fnpathfind.3,v 1.2 1994/02/03 17:34:01 liw Exp"
X.\"
X.TH FNPATHFIND 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
fnpathfind \- find a file in a list of directories
X.SH SYNOPSIS
X.nf
#include <publib.h>
X.sp 1
int \fBfnpathfind\fR(const char *\fIpath\fR, const char *\fItgt\fR,
X                     char *\fIres\fR, size_t \fImax\fR);
X.SH "DESCRIPTION"
\fIpathfind\fR looks for a file in a list of directories.  The
argument `path' is a colon separated list of directories, typically
the contents of an environment variable like PATH, MANPATH, or CDPATH.
The function will go through the directories in the path and look in
each directory for a file given in argument `target' until it finds
it.  Only an exact match is reported, no wild cards or globbing.
X.PP
The names that are matched are formed by taking an element from the
path and prepending it to target.  An empty element means the current
directory, as does the name ".".
X.PP
The function returns -1 for failure (not found or error), or the total
size for the full name (the full name may have been truncated when
stored into result).
X.SH BUGS
The function uses dynamic memory allocation and may
therefore fail due to insufficient memory.
X.PP
It is not trivial to know in which directory the search ended.  This
makes is difficult to continue the search.
X.SH "SEE ALSO"
publib(3), fname(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203193494 'liw-modules-0.4/fname/fnpathfind.3' &&
  chmod 0600 'liw-modules-0.4/fname/fnpathfind.3' ||
  echo 'restore of liw-modules-0.4/fname/fnpathfind.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/fname/fnpathfind.3'`"
  test 1463 -eq "$shar_count" ||
    echo "liw-modules-0.4/fname/fnpathfind.3: original size 1463, current size $shar_count"
fi
# ============= liw-modules-0.4/fname/fnpathfind.c ==============
if test -f 'liw-modules-0.4/fname/fnpathfind.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/fname/fnpathfind.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/fname/fnpathfind.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/fname/fnpathfind.c' &&
/*
X * fnpathfind.c -- find file in a list of directories
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-fname:fnpathfind.c,v 1.4 1994/07/16 15:28:42 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
X
#include "publib/fname.h"
#include "publib/errormsg.h"
X
/* XXX - there is a standard unix function pathfind ... */
X
int fnpathfind(const char *path, const char *tgt, char *result, size_t max) {
X	char *p;		/* auxiliary pointer */
X	char *colon;		/* where the next colon is */
X	char *fullname;		/* the full name of the current possibility */
X	size_t cursize;		/* current block size allocated for fullname */
X	size_t fullsize;	/* size of current possibility (<= cursize) */
X	size_t dirlen;		/* length of the current component of path */
X	size_t tgtlen;		/* length of the tgt */
X
X	assert(path != NULL);
X	assert(tgt != NULL);
X	assert(result != NULL);
X	assert(max > 0);
X
X	tgtlen = strlen(tgt);
X	fullname = NULL;
X	cursize = 0;
X
X	for (; *path != '\0'; path = colon + (*colon == '\0' ? 0 : 1)) {
X		/* find end of current path element (next colon, or the
X		   trailing '\0' if last element */
X		colon = strchr(path, ':');
X		if (colon == NULL)
X			colon = strchr(path, '\0');
X
X		/* compute size of full name: 
X		      dirname + "/" + tgt + trailing '\0'
X		   except that the "/" is only needed if the dirname doesn't
X		   end in a slash.  Then make sure fullname is at least big
X		   enough.  */
X		dirlen = colon - path;
X		fullsize = dirlen + (dirlen ? 0 : 1) + tgtlen + 1;
X		if (cursize < fullsize) {
X			p = realloc(fullname, fullsize);
X			if (p == NULL) {
X				__publib_error("realloc failed");
X				free(fullname);
X				return -1;
X			}
X			fullname = p;
X			cursize = fullsize;
X		}
X
X		/* construct the full name */
X		strncpy(fullname, path, dirlen);
X		p = fullname + dirlen;
X		if (dirlen > 0 && fullname[dirlen-1] != '/')
X			*p++ = '/';
X		strcpy(p, tgt);
X
X		/* does it exist?  if so, copy to result and return */
X		if (access(fullname, 00) == 00) {
X			strncpy(result, fullname, max);
X			result[max-1] = '\0';
X			free(fullname);
X			return fullsize;
X		}
X	}
X
X	/* we didn't find anything */
X	free(fullname);
X	return -1;
}
SHAR_EOF
  $shar_touch -am 0716182894 'liw-modules-0.4/fname/fnpathfind.c' &&
  chmod 0600 'liw-modules-0.4/fname/fnpathfind.c' ||
  echo 'restore of liw-modules-0.4/fname/fnpathfind.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/fname/fnpathfind.c'`"
  test 2172 -eq "$shar_count" ||
    echo "liw-modules-0.4/fname/fnpathfind.c: original size 2172, current size $shar_count"
fi
# ============= liw-modules-0.4/fname/fnqualify.3 ==============
if test -f 'liw-modules-0.4/fname/fnqualify.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/fname/fnqualify.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/fname/fnqualify.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/fname/fnqualify.3' &&
X.\" part of publib
X.\" "@(#)publib-fname:fnqualify.3,v 1.2 1994/02/03 17:34:02 liw Exp"
X.\"
X.TH FNQUALIFY 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
fnqualify \- qualify a filename
X.SH SYNOPSIS
X.nf
#include <publib.h>
X.sp 1
size_t \fBfnqualify\fR(char *\fIresult\fR, const char *\fIpath\fR, size_t \fImax\fR);
X.SH "DESCRIPTION"
\fIfname_qualify\fR qualifies a filename.  This means that if the
input name is not an absolute name (i.e. starts from the root
directory, e.g. is \fBfoo\fR, not \fB/tmp/foo\fR), the current
directory will be prepended to it.  Also, tilde conversion is done: if
the filename begins with a tilde (~), the tilde is replaced with the
home directory of the user, and if it begins with a tilde and a
username, both are replaced with the home directory of the given user.
X.PP
Simplifications like replacing /./ with /, and /foo/../bar with /bar
are not done because of problems with symbolic links.
X.SH RETURNS
The function returns -1 if there was some error, or the total size of
the full name otherwise.  The return value may be greater than the
maximum size given by the last argument; only as much as allowed by
that is actually written, though.
X.SH "SEE ALSO"
publib(3), fname(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203193494 'liw-modules-0.4/fname/fnqualify.3' &&
  chmod 0600 'liw-modules-0.4/fname/fnqualify.3' ||
  echo 'restore of liw-modules-0.4/fname/fnqualify.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/fname/fnqualify.3'`"
  test 1285 -eq "$shar_count" ||
    echo "liw-modules-0.4/fname/fnqualify.3: original size 1285, current size $shar_count"
fi
# ============= liw-modules-0.4/fname/fnqualify.c ==============
if test -f 'liw-modules-0.4/fname/fnqualify.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/fname/fnqualify.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/fname/fnqualify.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/fname/fnqualify.c' &&
/*
X * fnqualify.c -- qualify a filename
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-fname:fnqualify.c,v 1.4 1994/07/16 15:28:43 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include <pwd.h>
#include <unistd.h>
#include <stdio.h>
#include "publib/fname.h"
#include "publib/errormsg.h"
X
#ifndef USERNAME_MAX
#define USERNAME_MAX 9
#endif
X
size_t fnqualify(char *result, const char *path, size_t max) {
X	size_t len, size;
X	struct passwd *pwd;
X	const char *p;
X	char username[USERNAME_MAX];
X
X	assert(result != NULL);
X	assert(path != NULL);
X	assert(max > 0);
X
X	/* Is it qualified already? */
X	if (path[0] == '/') {
X		strncpy(result, path, max);
X		result[max-1] = '\0';
X		return strlen(path) + 1;
X	}
X
X	/* Do we just need to prepend the current directory? */
X	if (path[0] != '~') {
X		if (getcwd(result, max) == NULL) {
X			__publib_error("getcwd failed");
X			return -1;
X		}
X		len = strlen(result);
X		size = len + 1 + strlen(path) + 1; /* +2 for '/' and '\0' */
X		if (size > max)
X			return size;
X		sprintf(result + len, "/%s", path);
X		return size;
X	}
X		
X	/* We need to do tilde substitution, get the password entry (which
X	   includes the name of the home directory) */
X	if (path[1] == '\0' || path[1] == '/') {
X		pwd = getpwuid(getuid());
X		p = path+1;
X	} else {
X		p = strchr(path, '/');
X		if (p == NULL)
X			p = strchr(path, '\0');
X		size = (size_t) (p-path);
X		if (size > sizeof(username))
X			return -1;
X		memcpy(username, path+1, size);
X		username[size-1] = '\0';
X
X		pwd = getpwnam(username);
X		if (*p == '/')
X			++p;
X	}
X	if (pwd == NULL)
X		return -1;
X
X	/* Now we have all the necessary information, build the result */
X	size = strlen(pwd->pw_dir) + 1 + strlen(p) + 1;
X	if (size < max)
X		sprintf(result, "%s/%s", pwd->pw_dir, p);
X	return size;
}
SHAR_EOF
  $shar_touch -am 0716182894 'liw-modules-0.4/fname/fnqualify.c' &&
  chmod 0600 'liw-modules-0.4/fname/fnqualify.c' ||
  echo 'restore of liw-modules-0.4/fname/fnqualify.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/fname/fnqualify.c'`"
  test 1777 -eq "$shar_count" ||
    echo "liw-modules-0.4/fname/fnqualify.c: original size 1777, current size $shar_count"
fi
# ============= liw-modules-0.4/fname/fnsetsuf.c ==============
if test -f 'liw-modules-0.4/fname/fnsetsuf.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/fname/fnsetsuf.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/fname/fnsetsuf.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/fname/fnsetsuf.c' &&
/*
X * fnsetsuf.c -- replace (last) suffix of filename
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-fname:fnsetsuf.c,v 1.2 1994/06/20 20:49:27 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/fname.h"
X
size_t fnsetsuf(char *fname, const char *suffix, size_t max) {
X	char *dot;
X	size_t needed;
X
X	assert(fname != NULL);
X	assert(suffix != NULL);
X	assert(max > 0);
X
X	dot = fnlastsuf(fname);
X	if (dot == NULL) {
X		needed = strlen(fname) + strlen(suffix) + 1;
X		if (needed > max)
X			return needed;
X		strcat(fname, suffix);
X	} else {
X		needed = (strlen(fname) - strlen(dot)) + strlen(suffix) + 1;
X		if (needed > max)
X			return needed;
X		strcpy(dot, suffix);
X	}
X
X	return needed;
}
SHAR_EOF
  $shar_touch -am 0620234994 'liw-modules-0.4/fname/fnsetsuf.c' &&
  chmod 0600 'liw-modules-0.4/fname/fnsetsuf.c' ||
  echo 'restore of liw-modules-0.4/fname/fnsetsuf.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/fname/fnsetsuf.c'`"
  test 721 -eq "$shar_count" ||
    echo "liw-modules-0.4/fname/fnsetsuf.c: original size 721, current size $shar_count"
fi
# ============= liw-modules-0.4/fname/test_fnqualify.c ==============
if test -f 'liw-modules-0.4/fname/test_fnqualify.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/fname/test_fnqualify.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/fname/test_fnqualify.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/fname/test_fnqualify.c' &&
/*
X * test_fnqualify.c -- test fnqualify
X *
X * Part of publib.
X * "@(#)publib-fname:test_fnqualify.c,v 1.1.1.1 1993/11/20 17:02:15 liw Exp"
X */
X
#include <stdio.h>
X
#include "publib/fname.h"
X
int main(int argc, char **argv) {
X	int i;
X	char buf[FILENAME_MAX];
X	size_t n;
X
X	for (i = 1; i < argc; ++i) {
X		n = fnqualify(buf, argv[i], sizeof(buf));
X		printf("input:  `%s'\n", argv[i]);
X		printf("output: `%s'\n", buf);
X		printf("n: %lu\n", (unsigned long) n);
X		printf("\n");
X	}
X
X	return 0;
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/fname/test_fnqualify.c' &&
  chmod 0600 'liw-modules-0.4/fname/test_fnqualify.c' ||
  echo 'restore of liw-modules-0.4/fname/test_fnqualify.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/fname/test_fnqualify.c'`"
  test 489 -eq "$shar_count" ||
    echo "liw-modules-0.4/fname/test_fnqualify.c: original size 489, current size $shar_count"
fi
# ============= liw-modules-0.4/hash/.depend ==============
if test ! -d 'liw-modules-0.4/hash'; then
  echo 'x - creating directory liw-modules-0.4/hash'
  mkdir 'liw-modules-0.4/hash'
fi
if test -f 'liw-modules-0.4/hash/.depend' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/hash/.depend (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/hash/.depend (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/hash/.depend' &&
dupfiles.o : dupfiles.c /home/liw/include/publib.h 
SHAR_EOF
  $shar_touch -am 0721000294 'liw-modules-0.4/hash/.depend' &&
  chmod 0600 'liw-modules-0.4/hash/.depend' ||
  echo 'restore of liw-modules-0.4/hash/.depend failed'
  shar_count="`wc -c < 'liw-modules-0.4/hash/.depend'`"
  test 52 -eq "$shar_count" ||
    echo "liw-modules-0.4/hash/.depend: original size 52, current size $shar_count"
fi
# ============= liw-modules-0.4/hash/Makefile ==============
if test -f 'liw-modules-0.4/hash/Makefile' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/hash/Makefile (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/hash/Makefile (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/hash/Makefile' &&
objs = hash_create.o hash_destroy.o hash_install.o hash_lookup.o \
X	hash_uninstall.o hash_iter.o
testprogs = 
include $(srcdir)/Generic.mk
X
xxxtest: xxxtest.o $(libname)
X	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ xxxtest.o $(libname)
xxxtest.o: hash.h
$(objs): hash.h
SHAR_EOF
  $shar_touch -am 0721000294 'liw-modules-0.4/hash/Makefile' &&
  chmod 0600 'liw-modules-0.4/hash/Makefile' ||
  echo 'restore of liw-modules-0.4/hash/Makefile failed'
  shar_count="`wc -c < 'liw-modules-0.4/hash/Makefile'`"
  test 259 -eq "$shar_count" ||
    echo "liw-modules-0.4/hash/Makefile: original size 259, current size $shar_count"
fi
# ============= liw-modules-0.4/hash/README ==============
if test -f 'liw-modules-0.4/hash/README' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/hash/README (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/hash/README (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/hash/README' &&
README for Publib module hash
Lars Wirzenius
"@(#)publib-hash:README,v 1.1 1994/08/28 17:21:56 liw Exp"
X
These routines implement a generic hashing table.
X
----------------------
X
Copyright (c) 1994 Lars Wirzenius.  All rights reserved.
X
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
X
1. Redistributions of source code must retain the above copyright
X   notice, this list of conditions and the following disclaimer.
X
2. Redistributions in binary form must reproduce the above copyright
X   notice, this list of conditions and the following disclaimer in the
X   documentation and/or other materials provided with the distribution.
X
THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
SHAR_EOF
  $shar_touch -am 0828202194 'liw-modules-0.4/hash/README' &&
  chmod 0600 'liw-modules-0.4/hash/README' ||
  echo 'restore of liw-modules-0.4/hash/README failed'
  shar_count="`wc -c < 'liw-modules-0.4/hash/README'`"
  test 1432 -eq "$shar_count" ||
    echo "liw-modules-0.4/hash/README: original size 1432, current size $shar_count"
fi
# ============= liw-modules-0.4/hash/hash.3 ==============
if test -f 'liw-modules-0.4/hash/hash.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/hash/hash.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/hash/hash.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/hash/hash.3' &&
X.\" part of publib
X.\" "@(#)publib-hash:hash.3,v 1.1 1994/08/28 17:59:35 liw Exp"
X.\"
X.TH HASH 3 "C Programmer's Manual" "Publib" "C Programmer's Manual"
X.SH NAME
hash_create, hash_destroy, hash_install, hash_lookup, hash_uninstall,
hash_iter \- generic hash tables
X.SH SYNOPSIS
#include <publib.h>
X.sp 1
X.nf
#include <publib.h>
X.sp 1
Hashtab *\fBhash_create\fR(unsigned long (*\fIfun\fR)(void *),
X         int (*\fIcmp\fR)(const void *, const void *));
void \fBhash_destroy\fR(Hashtab *\fIht\fR);
void *\fBhash_install\fR(Hashtab *\fIht\fR, void *\fIdata\fR, size_t \fIsize\fR);
void *\fBhash_lookup\fR(Hashtab *\fIht\fR, void *\fIdata\fR);
int \fBhash_uninstall\fR(Hashtab *\fIht\fR, void *\fIdata\fR);
int \fBhash_iter\fR(Hashtab *\fIht\fR, int (*\fIdoit\fR)(void *, void *), void *\fIparam\fR);
X.SH "DESCRIPTION"
These functions implement generic hash tables.
The table is created by \fIhash_create\fR and destroyed by \fIhash_destroy\fR.
The \fIfun\fR argument is a pointer to the hashing function,
which must convert a datum to an unsigned long, which is then converted
to an index into the hashing table.
\fIcmp\fR is a \fIqsort\fR(3)-like comparison functions, used to compare
to (wannabe) hash table elements.
X.PP
\fIhash_install\fR installs a new datum into the table.
A pointer to the data and the size of the data are given as the arguments.
If the size is 0, only the pointer value is copied to the table.
Otherwise a copy of the data is made into dynamically allocated memory.
X.PP
\fIhash_lookup\fR attempts to find a datum in the hash table.
A pointer to another datum is given as the argument.
The comparison function should compare equal (return 0)
the desired datum and this datum (but the argument needn't be a fully
initialized datum, although that is up to the writer of the comparison
function).
There cannot be two elements in the hash table that are equal (the
comparison function returns 0 for them).
It is up to the user to handle collisions.
X.PP
\fIhash_uninstall\fR removes an element from a table.
The argument is a pointer to a datum that identifies the element.
X.PP
\fIhash_iter\fR goes through every element in the hash table
and calls the \fIdoit\fR function.
If \fIdoit\fR returns -1 or 0, \fIhash_iter\fR will stop the
traversal and return the same value.
X.SH RETURNS
\fIhash_create\fR returns a pointer to the new hash table, or NULL if
it fails.
\fIhash_install\fR returns a pointer to an element in the table
(either the installed one, or one that was already installed, if one
tries to install the same datum twice).
\fIhash_uninstall\fR returns 0 if it found the element in the array,
or -1 if it didn't.
\fIhash_lookup\fR return a pointer to the element it finds, or NULL if
it doesn't find anything beautiful.
\fIhash_iter\fR returns -1 or 0, if \fIdoit\fR returns either of those
values, or 1 if it gets through all elements in the table.
X.SH "SEE ALSO"
publib(3), qsort(3), bsearch(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0828205994 'liw-modules-0.4/hash/hash.3' &&
  chmod 0600 'liw-modules-0.4/hash/hash.3' ||
  echo 'restore of liw-modules-0.4/hash/hash.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/hash/hash.3'`"
  test 2984 -eq "$shar_count" ||
    echo "liw-modules-0.4/hash/hash.3: original size 2984, current size $shar_count"
fi
# ============= liw-modules-0.4/hash/hash.h ==============
if test -f 'liw-modules-0.4/hash/hash.h' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/hash/hash.h (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/hash/hash.h (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/hash/hash.h' &&
/*
X * hash.h -- hashing table routines
X *
X * Part of Publib, see man page for more information.
X * "@(#)publib-hash:hash.h,v 1.1.1.1 1994/07/20 21:02:54 liw Exp"
X */
X
#ifndef __publib_hash_h_included
#define __publib_hash_h_included
X
#include <stddef.h>	/* need size_t */
X
#define __HASHTAB_SIZE	511
X
typedef unsigned long __hash_func(void *);
X
struct __hash_node {
X	void *data;
X	size_t size;
X	unsigned long val;
X	struct __hash_node *next;
};
X
struct __hashtab {
X	__hash_func *hash;
X	int (*cmp)(const void *, const void *);
X	struct __hash_node *tab[__HASHTAB_SIZE];
};
X
typedef struct __hashtab Hashtab;
X
Hashtab *hash_create(__hash_func *, int (*)(const void *, const void *));
void hash_destroy(Hashtab *);
void *hash_install(Hashtab *, void *, size_t);
void *hash_lookup(Hashtab *, void *);
int hash_uninstall(Hashtab *, void *);
int hash_iter(Hashtab *, int (*)(void *, void *), void *);
X
#endif
SHAR_EOF
  $shar_touch -am 0721000294 'liw-modules-0.4/hash/hash.h' &&
  chmod 0600 'liw-modules-0.4/hash/hash.h' ||
  echo 'restore of liw-modules-0.4/hash/hash.h failed'
  shar_count="`wc -c < 'liw-modules-0.4/hash/hash.h'`"
  test 900 -eq "$shar_count" ||
    echo "liw-modules-0.4/hash/hash.h: original size 900, current size $shar_count"
fi
# ============= liw-modules-0.4/hash/hash_create.c ==============
if test -f 'liw-modules-0.4/hash/hash_create.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/hash/hash_create.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/hash/hash_create.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/hash/hash_create.c' &&
/*
X * hash_create.c -- create a hash table
X *
X * Part of Publib, see man page for more information.
X * "@(#)publib-hash:hash_create.c,v 1.1.1.1 1994/07/20 21:02:54 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include "publib/hash.h"
#include "publib/errormsg.h"
X
Hashtab *hash_create(__hash_func *h, int (*cmp)(const void *, const void *)) {
X	Hashtab *ht;
X	size_t i;
X
X	assert(h != NULL);
X	assert(cmp != NULL);
X
X	ht = malloc(sizeof(Hashtab));
X	if (ht == NULL) {
X		__publib_error("malloc failed");
X		return NULL;
X	}
X
X	ht->hash = h;
X	ht->cmp = cmp;
X	for (i = 0; i < __HASHTAB_SIZE; ++i)
X		ht->tab[i] = NULL;
X	return ht;
}
SHAR_EOF
  $shar_touch -am 0721000294 'liw-modules-0.4/hash/hash_create.c' &&
  chmod 0600 'liw-modules-0.4/hash/hash_create.c' ||
  echo 'restore of liw-modules-0.4/hash/hash_create.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/hash/hash_create.c'`"
  test 629 -eq "$shar_count" ||
    echo "liw-modules-0.4/hash/hash_create.c: original size 629, current size $shar_count"
fi
# ============= liw-modules-0.4/hash/hash_destroy.c ==============
if test -f 'liw-modules-0.4/hash/hash_destroy.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/hash/hash_destroy.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/hash/hash_destroy.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/hash/hash_destroy.c' &&
/*
X * hash_destroy.c -- destroy a hash table
X *
X * Part of Publib, see man page for more information.
X * "@(#)publib-hash:hash_destroy.c,v 1.1.1.1 1994/07/20 21:02:54 liw Exp"
X */
X
#include <assert.h>
#include <stdlib.h>
#include "publib/hash.h"
X
void hash_destroy(Hashtab *ht) {
X	struct __hash_node *p;
X	size_t i;
X
X	assert(ht != NULL);
X	for (i = 0; i < __HASHTAB_SIZE; ++i) {
X		while (ht->tab[i] != NULL) {
X			p = ht->tab[i];
X			ht->tab[i] = p->next;
X			if (p->size > 0)
X				free(p->data);
X			free(p);
X		}
X	}
X	free(ht);
}
SHAR_EOF
  $shar_touch -am 0721000294 'liw-modules-0.4/hash/hash_destroy.c' &&
  chmod 0600 'liw-modules-0.4/hash/hash_destroy.c' ||
  echo 'restore of liw-modules-0.4/hash/hash_destroy.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/hash/hash_destroy.c'`"
  test 523 -eq "$shar_count" ||
    echo "liw-modules-0.4/hash/hash_destroy.c: original size 523, current size $shar_count"
fi
: || echo 'restore of liw-modules-0.4/hash/hash_install.c failed'
echo 'End of part 5, continue with part 6'
exit 0

