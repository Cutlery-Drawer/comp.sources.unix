Newsgroups: comp.sources.unix
From: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Subject: v28i199: liw-modules-0.4 - the LIW module set (for use with Publib), Part12/14
References: <1.785201893.15507@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Posting-Number: Volume 28, Issue 199
Archive-Name: liw-modules-0.4/part12

#!/bin/sh
# This is part 12 of a multipart archive.
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
# ============= liw-modules-0.4/strutil/strmaxcpy.c ==============
if test ! -d 'liw-modules-0.4'; then
  echo 'x - creating directory liw-modules-0.4'
  mkdir 'liw-modules-0.4'
fi
if test ! -d 'liw-modules-0.4/strutil'; then
  echo 'x - creating directory liw-modules-0.4/strutil'
  mkdir 'liw-modules-0.4/strutil'
fi
if test -f 'liw-modules-0.4/strutil/strmaxcpy.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strmaxcpy.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strmaxcpy.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strmaxcpy.c' &&
/*
X * strmaxcpy.c -- copy at most a given number of characters of string
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strmaxcpy.c,v 1.3 1994/07/31 23:30:44 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
char *strmaxcpy(char *tgt, const char *src, size_t n) {
X	assert(tgt != NULL);
X	assert(src != NULL);
X	assert(!memoverlap(tgt, n+1, src, strlen(src)+1));
X
X	*tgt = '\0';
X	strncat(tgt, src, n);
X
X	return tgt;
}
SHAR_EOF
  $shar_touch -am 0801023094 'liw-modules-0.4/strutil/strmaxcpy.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strmaxcpy.c' ||
  echo 'restore of liw-modules-0.4/strutil/strmaxcpy.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strmaxcpy.c'`"
  test 480 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strmaxcpy.c: original size 480, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strmove.3 ==============
if test -f 'liw-modules-0.4/strutil/strmove.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strmove.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strmove.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strmove.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strmove.3,v 1.1 1994/06/20 20:30:18 liw Exp"
X.\"
X.TH STRMOVE 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strmove \- make a copy of a string, handling overlapping strings
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrmove\fR(char *\fItgt\fR, const char *\fIsrc\fR);
X.SH DESCRIPTION
\fIstrmove\fR copies the string \fIsrc\fR to \fItgt\fR, just like
\fIstrcpy\fR(3), but handles overlapping moves correctly (cf. \fImemcpy\fR(3)
vs. \fImemmove\fR(3)).
X.SH "RETURN VALUE"
\fIstrmove\fR returns \fItgt\fR.
X.SH "SEE ALSO"
publib(3), strcpy(3), memcpy(3), memmove(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strmove.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strmove.3' ||
  echo 'restore of liw-modules-0.4/strutil/strmove.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strmove.3'`"
  test 682 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strmove.3: original size 682, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strmove.c ==============
if test -f 'liw-modules-0.4/strutil/strmove.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strmove.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strmove.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strmove.c' &&
/*
X * strmove.c -- copy a string to another, possibly overlapping place
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strmove.c,v 1.1 1994/06/20 20:30:20 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
char *strmove(char *tgt, const char *src) {
X	assert(tgt != NULL);
X	assert(src != NULL);
X
X	return memmove(tgt, src, strlen(src) + 1);
}
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strmove.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strmove.c' ||
  echo 'restore of liw-modules-0.4/strutil/strmove.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strmove.c'`"
  test 406 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strmove.c: original size 406, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strmtrim.3 ==============
if test -f 'liw-modules-0.4/strutil/strmtrim.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strmtrim.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strmtrim.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strmtrim.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strmtrim.3,v 1.1 1994/06/20 20:30:21 liw Exp"
X.\"
X.TH STRMTRIM 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strmtrim \- replace multiple white spaces with single blanks within string
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrmtrim\fR(char *\fIstr\fR);
X.SH DESCRIPTION
\fIstrmtrim\fR will replace every run of whitespace characters
(as defined by \fIisspace\fR(3)) with a single blank.  It will not
touch leading and trailing whitespace (use \fIstrltrim\fR(3) and
\fIstrrtrim\fR(3) for those).
X.SH "RETURN VALUE"
\fIstrmtrim\fR will return the value of its argument.
X.SH "SEE ALSO"
publib(3), strtrim(3), strltrim(3), strrtrim(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strmtrim.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strmtrim.3' ||
  echo 'restore of liw-modules-0.4/strutil/strmtrim.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strmtrim.3'`"
  test 755 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strmtrim.3: original size 755, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strmtrim.c ==============
if test -f 'liw-modules-0.4/strutil/strmtrim.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strmtrim.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strmtrim.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strmtrim.c' &&
/*
X * strmtrim.c -- replace multiple white spaces with single blanks within string
X *
X * Part of publib.  See man page for more information.
X * "@(#)publib-strutil:strmtrim.c,v 1.1 1994/06/20 20:30:22 liw Exp"
X */
X
#include <assert.h>
#include <ctype.h>
#include "publib/strutil.h"
X
char *strmtrim(char *str) {
X	char *s, *t, *u;
X
X	assert(str != NULL);
X
X	for (s = str; isspace(*s); ++s)
X		continue;
X
X	t = s;
X	for (;;) {
X		if (!isspace(*t)) {
X			*s = *t;
X			if (*t == '\0')
X				break;
X			++s;
X			++t;
X		} else {
X			u = t;
X			while (isspace(*++t))
X				continue;
X			if (*t == '\0') {
X				while ((*s++ = *u++) != '\0')
X					continue;
X				break;
X			}
X			*s++ = ' ';
X		}
X	}
X
X	return str;
}
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strmtrim.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strmtrim.c' ||
  echo 'restore of liw-modules-0.4/strutil/strmtrim.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strmtrim.c'`"
  test 683 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strmtrim.c: original size 683, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strndup.3 ==============
if test -f 'liw-modules-0.4/strutil/strndup.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strndup.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strndup.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strndup.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strndup.3,v 1.1 1994/06/20 20:30:23 liw Exp"
X.\"
X.TH STRNDUP 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strndup \- duplicate part of a string
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrndup\fR(const char *\fIstr\fR, size_t \fIn\fR);
X.SH DESCRIPTION
\fIstrndup\fR will make a duplicate of the \fIn\fR first characters
of \fIstr\fR, using \fImalloc\fR(3) to allocate memory for the
duplicate.  The caller is supposed to free the duplicate's memory
when no longer needed.
X.SH "RETURN VALUE"
\fIstrndup\fR will return a pointer to the duplicate, or NULL if no
memory could be allocated.
X.SH "SEE ALSO"
publib(3), strdup(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strndup.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strndup.3' ||
  echo 'restore of liw-modules-0.4/strutil/strndup.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strndup.3'`"
  test 746 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strndup.3: original size 746, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strndup.c ==============
if test -f 'liw-modules-0.4/strutil/strndup.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strndup.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strndup.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strndup.c' &&
/*
X * strndup.c -- duplicate at most a given beginning of a string
X *
X * Part of publib.  See man page for more information.
X * "@(#)publib-strutil:strndup.c,v 1.1 1994/06/20 20:30:24 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>
#include "publib/strutil.h"
#include "publib/errormsg.h"
X
char *strndup(const char *str, size_t n) {
X	char *dup;
X	size_t len;
X
X	len = strlen(str);
X	if (n > len)
X		n = len;
X
X	dup = malloc(n+1);
X	if (dup == NULL) {
X		__publib_error("malloc failed");
X		return NULL;
X	}
X
X	memcpy(dup, str, n);
X	dup[n] = '\0';
X	return dup;
}
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strndup.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strndup.c' ||
  echo 'restore of liw-modules-0.4/strutil/strndup.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strndup.c'`"
  test 598 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strndup.c: original size 598, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strnins.3 ==============
if test -f 'liw-modules-0.4/strutil/strnins.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strnins.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strnins.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strnins.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strnins.3,v 1.1 1994/07/25 23:15:37 liw Exp"
X.\"
X.TH STRNINS 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strnins \- insert prefix of a string at the beginning of another string
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrnins\fR(char *\fItgt\fR, const char *\fIsrc\fR, size_t \fIn\fR);
X.SH DESCRIPTION
\fIstrins\fR inserts upto \fIn\fR characters from the beginning of
the \fIsrc\fR string at the beginning of the \fItgt\fR string.
The strings must not overlap.
The target string must contain enough memory to hold both strings.
X.SH "RETURN VALUE"
\fIstrnins\fR returns its first argument.
X.SH EXAMPLE
See the manual page for \fIstrdel\fR(3) for an example.
X.SH "SEE ALSO"
publib(3), strdel(3), strins(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0726021594 'liw-modules-0.4/strutil/strnins.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strnins.3' ||
  echo 'restore of liw-modules-0.4/strutil/strnins.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strnins.3'`"
  test 830 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strnins.3: original size 830, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strnins.c ==============
if test -f 'liw-modules-0.4/strutil/strnins.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strnins.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strnins.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strnins.c' &&
/*
X * strnins.c -- insert prefix of a string at the beginning of another string
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strnins.c,v 1.1 1994/07/25 23:15:39 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
char *strnins(char *tgt, const char *src, size_t n) {
X	size_t srclen;
X
X	assert(tgt != NULL);
X	assert(src != NULL);
X	assert(!memoverlap(tgt, strlen(tgt)+strlen(src)+1, src, strlen(src)+1));
X
X	srclen = strlen(src);
X	if (srclen > n)
X		srclen = n;
X	memmove(tgt + srclen, tgt, strlen(tgt) + 1);	/* +1 for '\0' */
X	memcpy(tgt, src, srclen);
X
X	return tgt;
}
SHAR_EOF
  $shar_touch -am 0726021594 'liw-modules-0.4/strutil/strnins.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strnins.c' ||
  echo 'restore of liw-modules-0.4/strutil/strnins.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strnins.c'`"
  test 630 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strnins.c: original size 630, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/stroverlap.3 ==============
if test -f 'liw-modules-0.4/strutil/stroverlap.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/stroverlap.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/stroverlap.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/stroverlap.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:stroverlap.3,v 1.1 1994/06/20 20:30:25 liw Exp"
X.\"
X.TH STROVERLAP 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
stroverlap \- check whether two strings overlap
X.SH SYNOPSIS
X.nf
#include <publib.h>
int \fBstroverlap\fR(const char *\fIs\fR, const char *\fIt\fR);
X.SH DESCRIPTION
\fIstroverlap\fR checks whether the storage used by two strings
overlap (i.e., if they even partially stored in the same place
in memory).
X.SH "RETURN VALUE"
\fIstroverlap\fR returns 0 for no overlap, nonzero for any overlap
at all.
X.SH "SEE ALSO"
publib(3), memoverlap(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/stroverlap.3' &&
  chmod 0600 'liw-modules-0.4/strutil/stroverlap.3' ||
  echo 'restore of liw-modules-0.4/strutil/stroverlap.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/stroverlap.3'`"
  test 669 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/stroverlap.3: original size 669, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/stroverlap.c ==============
if test -f 'liw-modules-0.4/strutil/stroverlap.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/stroverlap.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/stroverlap.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/stroverlap.c' &&
/*
X * stroverlap.c -- check whether two strings overlap
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:stroverlap.c,v 1.1 1994/06/20 20:30:28 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
int stroverlap(const char *s, const char *t) {
X	assert(s != NULL);
X	assert(t != NULL);
X	return memoverlap(s, strlen(s)+1, t, strlen(t)+1);
}
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/stroverlap.c' &&
  chmod 0600 'liw-modules-0.4/strutil/stroverlap.c' ||
  echo 'restore of liw-modules-0.4/strutil/stroverlap.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/stroverlap.c'`"
  test 399 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/stroverlap.c: original size 399, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strrev.c ==============
if test -f 'liw-modules-0.4/strutil/strrev.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strrev.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strrev.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strrev.c' &&
/*
X * strrev.c -- reverse a string in place
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strrev.c,v 1.1.1.1 1994/02/03 17:25:30 liw Exp"
X */
X
#include <assert.h>
#include "publib/strutil.h"
X
char *strrev(char *s) {
X	char c, *t, *origs = s;
X
X	assert(s != NULL);
X
X	for (t = s+strlen(s); s < t; ++s, --t) {
X		c = *s;
X		*s = *t;
X		*t = c;
X	}
X	return origs;
}
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/strrev.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strrev.c' ||
  echo 'restore of liw-modules-0.4/strutil/strrev.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strrev.c'`"
  test 390 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strrev.c: original size 390, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strright.3 ==============
if test -f 'liw-modules-0.4/strutil/strright.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strright.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strright.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strright.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strright.3,v 1.1 1994/06/20 20:30:31 liw Exp"
X.\"
X.TH STRRIGHT 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strright \- return a pointer to the beginning of the rightmost n chars in a string
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrright\fR(const char *\fIs\fR, size_t \fIn\fR);
X.SH DESCRIPTION
\fIstrright\fR will return a pointer to the first of the \fIn\fR rightmost
characters (not counting the '\\0') in the string \fIs\fR.  It does \fInot\fR
make a copy of the string, but will return a pointer into the argument
string.
X.SH "SEE ALSO"
publib(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strright.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strright.3' ||
  echo 'restore of liw-modules-0.4/strutil/strright.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strright.3'`"
  test 679 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strright.3: original size 679, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strright.c ==============
if test -f 'liw-modules-0.4/strutil/strright.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strright.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strright.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strright.c' &&
/*
X * strright.c -- return a pointer to the beginning of the rightmost n chars
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strright.c,v 1.1 1994/06/20 20:30:32 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
char *strright(const char *s, size_t n) {
X	size_t len;
X
X	assert(s != NULL);
X	len = strlen(s);
X	if (n > len)
X		n = 0;
X	return (char *)s + (len - n);
}
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strright.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strright.c' ||
  echo 'restore of liw-modules-0.4/strutil/strright.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strright.c'`"
  test 429 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strright.c: original size 429, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strrot13.3 ==============
if test -f 'liw-modules-0.4/strutil/strrot13.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strrot13.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strrot13.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strrot13.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strrot13.3,v 1.1 1994/02/05 17:09:25 liw Exp"
X.\"
X.TH STRROT13 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strrot13 \- encrypt or decrypt string using rot13
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrrot13\fR(char *\fIstr\fR);
X.SH DESCRIPTION
\fIstrrot13\fR converts the argument string using rot13, i.e., it
replaces each letter a with n, n with a, b with o, o with b, and
so on.  Converting twice results in the original string.  Non-letter
characters are not converted.
X.PP
The rot13 encryption method is used commonly on USENET to hide
offensive text, or spoilers in discussions about movies or books,
or in other similar occasions.
X.SH "RETURN VALUE"
\fIstrrot13\fR returns its argument.
X.SH "SEE ALSO"
publib(3), crypt(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0205190994 'liw-modules-0.4/strutil/strrot13.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strrot13.3' ||
  echo 'restore of liw-modules-0.4/strutil/strrot13.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strrot13.3'`"
  test 854 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strrot13.3: original size 854, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strrot13.c ==============
if test -f 'liw-modules-0.4/strutil/strrot13.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strrot13.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strrot13.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strrot13.c' &&
/*
X * strrot13.c -- encrypt string with rot13
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strrot13.c,v 1.1.1.1 1994/02/03 17:25:31 liw Exp"
X */
X
#include <assert.h>
#include "publib/strutil.h"
X
#define N	26
X
X
/* Warning: this code assumes ASCII */
char *strrot13(char *str) {
X	char *s = str;
X
X	while (*s != '\0') {
X		if ((*s >= 'a' && *s <= 'm') || (*s >= 'A' && *s <= 'M'))
X			*s += 13;
X		else if ((*s >= 'n' && *s <= 'z') || (*s >= 'N' && *s <= 'Z'))
X			*s -= 13;
X		++s;
X	}
X	return str;
}
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/strrot13.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strrot13.c' ||
  echo 'restore of liw-modules-0.4/strutil/strrot13.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strrot13.c'`"
  test 527 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strrot13.c: original size 527, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strrstr.3 ==============
if test -f 'liw-modules-0.4/strutil/strrstr.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strrstr.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strrstr.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strrstr.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strrstr.3,v 1.1.1.1 1994/02/03 17:25:29 liw Exp"
X.\"
X.TH STRRSTR 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strrstr \- locate last occurence of substring
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrrstr\fR(const char *\fIstr\fR, const char *\fIpat\fR);
X.SH DESCRIPTION
\fIstrrstr\fR finds the last occurence of the string \fIpat\fR in
the string \fIstr\fR.  The terminating '\\0' characters are not
compared.
X.SH "RETURN VALUE"
\fIstrrstr\fR returns a pointer to the first character of the substring,
or \fBNULL\fR if the substring is not found.
X.SH EXAMPLE
To print out everything on each line starting with the last occurence
of "/* " on each line, you might use the following code:
X.sp 1
X.nf
X.in +5
#include <stdio.h>
#include <publib.h>
X
int main(void) {
X	char *p, line[512];
X
X	while (fgets(line, sizeof(line), stdin) != NULL) {
X		p = strrstr(line, "/* ");
X		if (p != NULL)
X			printf("%s", p);
X	}
X	return 0;
}
X.in -5
X.SH "SEE ALSO"
publib(3), string(3), strstr(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/strrstr.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strrstr.3' ||
  echo 'restore of liw-modules-0.4/strutil/strrstr.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strrstr.3'`"
  test 1094 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strrstr.3: original size 1094, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strrstr.c ==============
if test -f 'liw-modules-0.4/strutil/strrstr.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strrstr.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strrstr.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strrstr.c' &&
/*
X * strrstr.c -- find last occurence of string in another string
X *
X * Part of publib.  See man page for more information.
X * "@(#)publib-strutil:strrstr.c,v 1.1.1.1 1994/02/03 17:25:29 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/strutil.h"
X
char *strrstr(const char *str, const char *pat) {
X	size_t len, patlen;
X	const char *p;
X
X	assert(str != NULL);
X	assert(pat != NULL);
X
X	len = strlen(str);
X	patlen = strlen(pat);
X
X	if (patlen > len)
X		return NULL;
X	for (p = str + (len - patlen); p > str; --p)
X		if (*p == *pat && strncmp(p, pat, patlen) == 0)
X			return (char *) p;
X	return NULL;
}
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/strrstr.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strrstr.c' ||
  echo 'restore of liw-modules-0.4/strutil/strrstr.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strrstr.c'`"
  test 616 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strrstr.c: original size 616, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strrtrim.3 ==============
if test -f 'liw-modules-0.4/strutil/strrtrim.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strrtrim.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strrtrim.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strrtrim.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strrtrim.3,v 1.1.1.1 1994/02/03 17:25:30 liw Exp"
X.\"
X.TH STRRTRIM 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strrtrim \- remove trailing whitespace
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrrtrim\fR(char *\fIs\fR);
X.SH DESCRIPTION
\fIstrrtrim\fR removes all trailing whitespace characters from the
end of a string.  As whitespace is counted everything for which
\fIisspace\fR(3) returns true.
X.SH "RETURN VALUE"
\fIstrltrim\fR returns its argument.
X.SH EXAMPLE
To remove whitespace from the end of all lines, you might do the
following:
X.sp 1
X.nf
X.in +5
#include <publib.h>
X
int main(void) {
X	char line[512];
X
X	while (fgets(line, sizeof(line), stdio) != NULL) {
X		strrtrim(line);
X		printf("%s", line);
X	}
X	return 0;
}
X.in -5
X.SH "SEE ALSO"
publib(3), strtrim(3), strltrim(3), isspace(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203192594 'liw-modules-0.4/strutil/strrtrim.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strrtrim.3' ||
  echo 'restore of liw-modules-0.4/strutil/strrtrim.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strrtrim.3'`"
  test 916 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strrtrim.3: original size 916, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strrtrim.c ==============
if test -f 'liw-modules-0.4/strutil/strrtrim.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strrtrim.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strrtrim.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strrtrim.c' &&
/*
X * strrtrim.c -- remove trailing whitespace from a string
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-strutil:strrtrim.c,v 1.3 1994/07/16 12:11:02 liw Exp"
X */
X
#include <assert.h>
#include <ctype.h>
#include <string.h>
X
#include "publib/strutil.h"
X
char *strrtrim(char *s) {
X	char *t, *tt;
X
X	assert(s != NULL);
X
X	for (tt = t = s; *t != '\0'; ++t)
X		if (!isspace(*t))
X			tt = t+1;
X	*tt = '\0';
X
X	return s;
}
SHAR_EOF
  $shar_touch -am 0716151194 'liw-modules-0.4/strutil/strrtrim.c' &&
  chmod 0600 'liw-modules-0.4/strutil/strrtrim.c' ||
  echo 'restore of liw-modules-0.4/strutil/strrtrim.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strrtrim.c'`"
  test 439 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strrtrim.c: original size 439, current size $shar_count"
fi
# ============= liw-modules-0.4/strutil/strset.3 ==============
if test -f 'liw-modules-0.4/strutil/strset.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/strutil/strset.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/strutil/strset.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/strutil/strset.3' &&
X.\" part of publib
X.\" "@(#)publib-strutil:strset.3,v 1.1 1994/06/20 20:30:35 liw Exp"
X.\"
X.TH STRSET 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
strset \- set all characters in a string to a given character
X.SH SYNOPSIS
X.nf
#include <publib.h>
char *\fBstrset\fR(char *\fIstr\fR, int \fIc\fR);
X.SH DESCRIPTION
\fIstrset\fR will set all characters (before the terminating '\\0') in
the string \fIstr\fR to \fIc\fR.
X.SH "RETURN VALUE"
\fIstrset\fR returns its first argument.
X.SH "SEE ALSO"
publib(3), memset(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0620233094 'liw-modules-0.4/strutil/strset.3' &&
  chmod 0600 'liw-modules-0.4/strutil/strset.3' ||
  echo 'restore of liw-modules-0.4/strutil/strset.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/strutil/strset.3'`"
  test 588 -eq "$shar_count" ||
    echo "liw-modules-0.4/strutil/strset.3: original size 588, current size $shar_count"
fi
: || echo 'restore of liw-modules-0.4/strutil/strset.c failed'
echo 'End of part 12, continue with part 13'
exit 0

