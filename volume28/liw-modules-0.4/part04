Newsgroups: comp.sources.unix
From: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Subject: v28i191: liw-modules-0.4 - the LIW module set (for use with Publib), Part04/14
References: <1.785201893.15507@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: wirzeniu@cc.helsinki.fi (Lars Wirzenius)
Posting-Number: Volume 28, Issue 191
Archive-Name: liw-modules-0.4/part04

#!/bin/sh
# This is part 04 of a multipart archive.
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
# ============= liw-modules-0.4/files/Makefile ==============
if test ! -d 'liw-modules-0.4'; then
  echo 'x - creating directory liw-modules-0.4'
  mkdir 'liw-modules-0.4'
fi
if test ! -d 'liw-modules-0.4/files'; then
  echo 'x - creating directory liw-modules-0.4/files'
  mkdir 'liw-modules-0.4/files'
fi
if test -f 'liw-modules-0.4/files/Makefile' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/files/Makefile (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/files/Makefile (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/files/Makefile' &&
objs = xgetaline.o xfseek.o xfopen.o xfclose.o getaline.o fassert.o
include $(srcdir)/Generic.mk
X
$(objs): files.h
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/files/Makefile' &&
  chmod 0600 'liw-modules-0.4/files/Makefile' ||
  echo 'restore of liw-modules-0.4/files/Makefile failed'
  shar_count="`wc -c < 'liw-modules-0.4/files/Makefile'`"
  test 115 -eq "$shar_count" ||
    echo "liw-modules-0.4/files/Makefile: original size 115, current size $shar_count"
fi
# ============= liw-modules-0.4/files/README ==============
if test -f 'liw-modules-0.4/files/README' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/files/README (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/files/README (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/files/README' &&
README for Publib module files
Lars Wirzenius
"@(#)publib-files:README,v 1.1 1994/08/28 17:18:07 liw Exp"
X
These routines do various operations on files.  The functions with
names beginning with an x are error checking frontends to the
corresponding functions.
X
----------------------
X
Copyright (c) 1994 Lars Wirzenius.  All rights reserved.
X
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
X
1. Redistributions of source code must retain the above copyright
X   notice, this list of conditions and the following disclaimer.
X
2. Redistributions in binary form must reproduce the above copyright
X   notice, this list of conditions and the following disclaimer in the
X   documentation and/or other materials provided with the distribution.
X
THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
SHAR_EOF
  $shar_touch -am 0828201894 'liw-modules-0.4/files/README' &&
  chmod 0600 'liw-modules-0.4/files/README' ||
  echo 'restore of liw-modules-0.4/files/README failed'
  shar_count="`wc -c < 'liw-modules-0.4/files/README'`"
  test 1538 -eq "$shar_count" ||
    echo "liw-modules-0.4/files/README: original size 1538, current size $shar_count"
fi
# ============= liw-modules-0.4/files/fassert.c ==============
if test -f 'liw-modules-0.4/files/fassert.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/files/fassert.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/files/fassert.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/files/fassert.c' &&
/*
X * fassert.c -- check for errors on stream
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-files:fassert.c,v 1.1.1.1 1993/11/20 17:02:01 liw Exp"
X */
X
#include <stdio.h>
#include <errno.h>
X
#include "publib/port.h"
#include "publib/errormsg.h"
#include "publib/files.h"
X
void fassert(FILE *fp) {
X	if (fp == NULL) {
X		__publib_error("argument is NULL");
X		exit(EXIT_FAILURE);
X	}
X
X	if (ferror(fp)) {
X		__publib_error("I/O error on file");
X		exit(EXIT_FAILURE);
X	}
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/files/fassert.c' &&
  chmod 0600 'liw-modules-0.4/files/fassert.c' ||
  echo 'restore of liw-modules-0.4/files/fassert.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/files/fassert.c'`"
  test 491 -eq "$shar_count" ||
    echo "liw-modules-0.4/files/fassert.c: original size 491, current size $shar_count"
fi
# ============= liw-modules-0.4/files/files.3 ==============
if test -f 'liw-modules-0.4/files/files.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/files/files.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/files/files.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/files/files.3' &&
X.\" part of publib
X.\" "@(#)publib-files:files.3,v 1.2 1994/02/03 17:33:58 liw Exp"
X.\"
X.TH FILES 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
xgetaline, xfseek, xfopen, xfclose, getaline, fassert \- file
manipulation utilities
X.SH SYNOPSIS
X.nf
#include <files.h>
X.sp 1
FILE *\fBxfopen\fR(const char *\fIfilename\fR, const char *\fImode\fR);
void \fBxfclose\fR(FILE *\fIfp\fR);
void \fBxfseek\fR(FILE *\fIfp\fR, long \fIoffset\fR, int \fIorigin\fR);
char *\fBgetaline\fR(FILE *\fIfp\fR);
char *\fBxgetaline\fR(FILE *\fIfp\fR);
void \fBfassert\fR(FILE *\fIfp\fR);
X.SH "DESCRIPTION"
These functions are useful for file manipulation.  The functions that
begin with \fIx\fR work like the functions without the letter, except
if there is an error, they print an error message and kill the
program.
X.PP
\fIgetaline\fR reads a line from the given file.  It allocates the
memory for the line with \fImalloc(3)\fR, and returns a pointer to the
beginning of the line.  If there is an error, it returns NULL.  If the
returned value is not NULL, the caller is responsible for freeing the
memory.  The newline is removed from the end of the line.
X.PP
\fIfassert\fR checks that the argument is not NULL, and that (for a
non-NULL argument) the file does not have its error indicator flag
set.  If either condition is true, it prints an error message and
termiantes the program.   If neither condition is true, it does
nothing.  This can be used to add checks that the I/O in a program is
going well; however, it is mostly useful only for small programs,
because more serious programs need to handle the errors more
gracefully.
X.SH "SEE ALSO"
publib(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0203193394 'liw-modules-0.4/files/files.3' &&
  chmod 0600 'liw-modules-0.4/files/files.3' ||
  echo 'restore of liw-modules-0.4/files/files.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/files/files.3'`"
  test 1713 -eq "$shar_count" ||
    echo "liw-modules-0.4/files/files.3: original size 1713, current size $shar_count"
fi
# ============= liw-modules-0.4/files/files.h ==============
if test -f 'liw-modules-0.4/files/files.h' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/files/files.h (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/files/files.h (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/files/files.h' &&
/*
X * files.h -- utility functions for files
X *
X * Part of publib.
X * "@(#)publib-files:files.h,v 1.1.1.1 1993/11/20 17:02:01 liw Exp"
X */
X
#ifndef __publib_files_h
#define __publib_files_h
X
#include <stdio.h>	/* need FILE */
X
FILE *xfopen(const char *__filename, const char *__mode);
void xfclose(FILE *__fp);
void xfseek(FILE *__fp, long __offset, int __origin);
X
char *getaline(FILE *__fp);
char *xgetaline(FILE *__fp);
X
void fassert(FILE *__fp);
X
#if 0
X
/**/int copy_file(const char *__oldname, const char *__newname);
/**/int fcopy_file(FILE *__oldfile, FILE *__newfile);
X
/**/int move_file(const char *__oldname, const char *__newname);
/**/int fmove_file(FILE *__oldfile, FILE *__newfile);
X
/**/char *make_backup_file(const char *__fname);
X
/**/int eprintf(const char *, ...);
/**/int eprintf_register(void);
X
/**/int snprintf(char *, size_t, const char *, ...);
X
#endif
X
#endif
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/files/files.h' &&
  chmod 0600 'liw-modules-0.4/files/files.h' ||
  echo 'restore of liw-modules-0.4/files/files.h failed'
  shar_count="`wc -c < 'liw-modules-0.4/files/files.h'`"
  test 886 -eq "$shar_count" ||
    echo "liw-modules-0.4/files/files.h: original size 886, current size $shar_count"
fi
# ============= liw-modules-0.4/files/getaline.c ==============
if test -f 'liw-modules-0.4/files/getaline.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/files/getaline.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/files/getaline.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/files/getaline.c' &&
/*
X * getaline.c -- read arbitrarily long line from file
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-files:getaline.c,v 1.2 1994/07/24 13:51:17 liw Exp"
X */
X
#include <stdio.h>
#include <stdlib.h>
X
#include "publib/errormsg.h"
#include "publib/files.h"
X
char *getaline(FILE *f) {
X	char *buf;		/* buffer for line */
X	size_t size;		/* size of buffer */
X	size_t inc;		/* how much to enlarge buffer */
X	size_t len;		/* # of chars stored into buf before '\0' */
X	char *p;
X	const size_t thres = 128; /* initial buffer size (most lines should
X				     fit into this size, so think of this as
X				     the "long line threshold").  */
X	const size_t mucho = 128; /* if there is at least this much wasted
X				     space when the whole buffer has been
X				     read, try to reclaim it.  Don't make
X				     this too small, else there is too much
X				     time wasted trying to reclaim a couple
X				     of bytes.  */
X	const size_t mininc = 64; /* minimum number of bytes by which
X				     to increase the allocated memory */
X
X	len = 0;
X	size = thres;
X	buf = malloc(size);
X	if (buf == NULL) {
X		__publib_error("malloc failed");
X		return NULL;
X	}
X
X	while (fgets(buf+len, size-len, f) != NULL) {
X		len += strlen(buf+len);
X		if (len > 0 && buf[len-1] == '\n')
X			break;		/* the whole line has been read */
X
X		for (inc = size, p = NULL; p == NULL && inc > mininc; inc /= 2)
X			p = realloc(buf, size + inc);
X
X		if (p == NULL) {
X			__publib_error("realloc failed");
X			free(buf);
X			return NULL;	/* couldn't get more memory */
X		}
X
X		size += inc;
X		buf = p;
X	}
X
X	if (len == 0) {
X		if (ferror(f))
X			__publib_error("I/O error");
X		free(buf);
X		return NULL;	/* nothing read (eof or error) */
X	}
X
X	if (buf[len-1] == '\n')	/* remove newline, if there */
X		buf[--len] = '\0';
X
X	if (size - len > mucho) { /* a plenitude of unused memory? */
X		p = realloc(buf, len+1);
X		if (p != NULL) {
X			buf = p;
X			size = len+1;
X		}
X	}
X
X	return buf;
}
SHAR_EOF
  $shar_touch -am 0724165194 'liw-modules-0.4/files/getaline.c' &&
  chmod 0600 'liw-modules-0.4/files/getaline.c' ||
  echo 'restore of liw-modules-0.4/files/getaline.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/files/getaline.c'`"
  test 1942 -eq "$shar_count" ||
    echo "liw-modules-0.4/files/getaline.c: original size 1942, current size $shar_count"
fi
# ============= liw-modules-0.4/files/xfclose.c ==============
if test -f 'liw-modules-0.4/files/xfclose.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/files/xfclose.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/files/xfclose.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/files/xfclose.c' &&
/*
X * xfclose.c -- error checking front-end for fclose
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-files:xfclose.c,v 1.1.1.1 1993/11/20 17:02:01 liw Exp"
X */
X
#include <stdio.h>
#include <errno.h>
X
#include "publib/port.h"
#include "publib/errormsg.h"
#include "publib/files.h"
X
void xfclose(FILE *f) {
X	if (ferror(f)) {
X		__publib_error("An error during file I/O");
X		exit(EXIT_FAILURE);
X	}
X
X	if (fclose(f) != 0) {
X		__publib_error("An error while closeing a file");
X		exit(EXIT_FAILURE);
X	}
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/files/xfclose.c' &&
  chmod 0600 'liw-modules-0.4/files/xfclose.c' ||
  echo 'restore of liw-modules-0.4/files/xfclose.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/files/xfclose.c'`"
  test 523 -eq "$shar_count" ||
    echo "liw-modules-0.4/files/xfclose.c: original size 523, current size $shar_count"
fi
# ============= liw-modules-0.4/files/xfopen.c ==============
if test -f 'liw-modules-0.4/files/xfopen.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/files/xfopen.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/files/xfopen.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/files/xfopen.c' &&
/*
X * xfopen.c -- error checking front-end for fopen
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-files:xfopen.c,v 1.1.1.1 1993/11/20 17:02:01 liw Exp"
X */
X
#include <stdio.h>
#include <errno.h>
X
#include "publib/errormsg.h"
#include "publib/files.h"
X
FILE *xfopen(const char *filename, const char *mode) {
X	FILE *f;
X
X	f = fopen(filename, mode);
X	if (f == NULL) {
X		/* can't use __publib_error here, because the message is
X		   useless without the extra information */
X		errormsg(__liberror & (__abort_on_error | __exit_on_error), 
X			 errno, "xfopen: %s: can't open file in mode `%s'",
X			 filename, mode);
X	}
X	return f;
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/files/xfopen.c' &&
  chmod 0600 'liw-modules-0.4/files/xfopen.c' ||
  echo 'restore of liw-modules-0.4/files/xfopen.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/files/xfopen.c'`"
  test 651 -eq "$shar_count" ||
    echo "liw-modules-0.4/files/xfopen.c: original size 651, current size $shar_count"
fi
# ============= liw-modules-0.4/files/xfseek.c ==============
if test -f 'liw-modules-0.4/files/xfseek.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/files/xfseek.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/files/xfseek.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/files/xfseek.c' &&
/*
X * xfseek.c -- error checking front-end for fseek
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-files:xfseek.c,v 1.1.1.1 1993/11/20 17:02:01 liw Exp"
X */
X
#include <stdio.h>
X
#include "publib/port.h"
#include "publib/errormsg.h"
#include "publib/files.h"
X
void xfseek(FILE *f, long off, int origin) {
X	if (fseek(f, off, origin) != 0) {
X		__publib_error("fseek failed");
X		exit(EXIT_FAILURE);
X	}
}
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/files/xfseek.c' &&
  chmod 0600 'liw-modules-0.4/files/xfseek.c' ||
  echo 'restore of liw-modules-0.4/files/xfseek.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/files/xfseek.c'`"
  test 426 -eq "$shar_count" ||
    echo "liw-modules-0.4/files/xfseek.c: original size 426, current size $shar_count"
fi
# ============= liw-modules-0.4/files/xgetaline.c ==============
if test -f 'liw-modules-0.4/files/xgetaline.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/files/xgetaline.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/files/xgetaline.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/files/xgetaline.c' &&
/*
X * xgetaline.c -- error checking front-end for getaline
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-files:xgetaline.c,v 1.2 1994/07/12 20:59:55 liw Exp"
X */
X
#include <stdio.h>
X
#include "publib/port.h"
#include "publib/errormsg.h"
#include "publib/files.h"
X
char *xgetaline(FILE *fp) {
X	char *p;
X
X	p = getaline(fp);
X	if (p == NULL && ferror(fp)) {
X		__publib_error("getaline failed");
X		exit(EXIT_FAILURE);
X	}
X	return p;
}
SHAR_EOF
  $shar_touch -am 0712235994 'liw-modules-0.4/files/xgetaline.c' &&
  chmod 0600 'liw-modules-0.4/files/xgetaline.c' ||
  echo 'restore of liw-modules-0.4/files/xgetaline.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/files/xgetaline.c'`"
  test 455 -eq "$shar_count" ||
    echo "liw-modules-0.4/files/xgetaline.c: original size 455, current size $shar_count"
fi
# ============= liw-modules-0.4/fname/Makefile ==============
if test ! -d 'liw-modules-0.4/fname'; then
  echo 'x - creating directory liw-modules-0.4/fname'
  mkdir 'liw-modules-0.4/fname'
fi
if test -f 'liw-modules-0.4/fname/Makefile' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/fname/Makefile (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/fname/Makefile (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/fname/Makefile' &&
objs = fnbase.o fndelbeg.o fndelend.o fndelsuf.o fndir.o fnhome.o \
X	fnjoin.o fnlastsuf.o fnpathfind.o fnqualify.o fnsetsuf.o
testprogs = test_fnqualify
include $(srcdir)/Generic.mk
X
test_fnqualify: test_fnqualify.o $(libname)
X	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ test_fnqualify.o $(libname)
test_fnqualify.o: fname.h
$(objs): fname.h
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/fname/Makefile' &&
  chmod 0600 'liw-modules-0.4/fname/Makefile' ||
  echo 'restore of liw-modules-0.4/fname/Makefile failed'
  shar_count="`wc -c < 'liw-modules-0.4/fname/Makefile'`"
  test 332 -eq "$shar_count" ||
    echo "liw-modules-0.4/fname/Makefile: original size 332, current size $shar_count"
fi
# ============= liw-modules-0.4/fname/README ==============
if test -f 'liw-modules-0.4/fname/README' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/fname/README (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/fname/README (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/fname/README' &&
README for Publib module fname
Lars Wirzenius
"@(#)publib-fname:README,v 1.1 1994/08/28 17:19:55 liw Exp"
X
These routines operate on UNIX/POSIX style filenames
(/dir/foo.bar/file.a.b.c).
X
----------------------
X
Copyright (c) 1994 Lars Wirzenius.  All rights reserved.
X
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
X
1. Redistributions of source code must retain the above copyright
X   notice, this list of conditions and the following disclaimer.
X
2. Redistributions in binary form must reproduce the above copyright
X   notice, this list of conditions and the following disclaimer in the
X   documentation and/or other materials provided with the distribution.
X
THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
SHAR_EOF
  $shar_touch -am 0828201994 'liw-modules-0.4/fname/README' &&
  chmod 0600 'liw-modules-0.4/fname/README' ||
  echo 'restore of liw-modules-0.4/fname/README failed'
  shar_count="`wc -c < 'liw-modules-0.4/fname/README'`"
  test 1464 -eq "$shar_count" ||
    echo "liw-modules-0.4/fname/README: original size 1464, current size $shar_count"
fi
# ============= liw-modules-0.4/fname/fname.3 ==============
if test -f 'liw-modules-0.4/fname/fname.3' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/fname/fname.3 (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/fname/fname.3 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/fname/fname.3' &&
X.\" part of publib
X.\" "@(#)publib:fname.3,v 1.1 1994/07/12 21:03:04 liw Exp"
X.\"
X.TH FNAME 3 "C Programmer's Manual" Publib "C Programmer's Manual"
X.SH NAME
fnbase, fndelbeg, fndelend, fndelsuf, fndir, fnhome, 
fnjoin, fnlastsuf, fnsetsuf \- filename manipulation
X.SH SYNOPSIS
X.nf
#include <publib.h>
X.sp 1
char *\fBfnbase\fR(const char *\fIfname\fR);
void \fBfndelbeg\fR(char *\fIfname\fR);
void \fBfndelend\fR(char *\fIfname\fR);
int \fBfndelsuf\fR(char *\fIfname\fR, const char *\fIsuffix\fR);
void \fBfndir\fR(char *\fIdir\fR, const char *\fIfname\fR);
int \fBfnhome\fR(char *\fIhomedir\fR, const char *\fIusername\fR);
void \fBfnjoin\fR(char *\fIres\fR, const char *\fIf1\fR, const char *\fIf2\fR);
char *\fBfnlastsuf\fR(const char *\fIfname\fR);
size_t \fBfnsetsuf\fR(char *\fIfname\fR, const char *\fIsuf\fR, size_t \fImax\fR);
X.SH DESCRIPTION
These routines manipulate POSIX-style filenames.
This manual page is still under construction.
X.SH "SEE ALSO"
publib(3)
X.SH AUTHOR
Lars Wirzenius (lars.wirzenius@helsinki.fi)
SHAR_EOF
  $shar_touch -am 0713000394 'liw-modules-0.4/fname/fname.3' &&
  chmod 0600 'liw-modules-0.4/fname/fname.3' ||
  echo 'restore of liw-modules-0.4/fname/fname.3 failed'
  shar_count="`wc -c < 'liw-modules-0.4/fname/fname.3'`"
  test 1027 -eq "$shar_count" ||
    echo "liw-modules-0.4/fname/fname.3: original size 1027, current size $shar_count"
fi
# ============= liw-modules-0.4/fname/fname.h ==============
if test -f 'liw-modules-0.4/fname/fname.h' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/fname/fname.h (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/fname/fname.h (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/fname/fname.h' &&
/*
X * fname.h -- filename manipulation
X *
X * Part of publib.
X * "@(#)publib-fname:fname.h,v 1.1.1.1 1993/11/20 17:02:15 liw Exp"
X */
X
#ifndef __publib_fname_h
#define __publib_fname_h
X
#include <stddef.h>	/* need size_t */
X
char *fnbase(const char *);
void fndelbeg(char *);
void fndelend(char *);
int fndelsuf(char *, const char *);
void fndir(char *, const char *);
int fnhome(char *, const char *);
void fnjoin(char *, const char *, const char *);
char *fnlastsuf(const char *);
int fnpathfind(const char *, const char *, char *, size_t);
size_t fnqualify(char *, const char *, size_t);
size_t fnsetsuf(char *, const char *, size_t);
X
#endif
SHAR_EOF
  $shar_touch -am 1120190293 'liw-modules-0.4/fname/fname.h' &&
  chmod 0600 'liw-modules-0.4/fname/fname.h' ||
  echo 'restore of liw-modules-0.4/fname/fname.h failed'
  shar_count="`wc -c < 'liw-modules-0.4/fname/fname.h'`"
  test 645 -eq "$shar_count" ||
    echo "liw-modules-0.4/fname/fname.h: original size 645, current size $shar_count"
fi
# ============= liw-modules-0.4/fname/fnbase.c ==============
if test -f 'liw-modules-0.4/fname/fnbase.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/fname/fnbase.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/fname/fnbase.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/fname/fnbase.c' &&
/*
X * fnbase.c -- find start of basename in filename
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-fname:fnbase.c,v 1.2 1994/06/20 20:47:47 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
X
#include "publib/fname.h"
X
char *fnbase(const char *fname) {
X	char *base;
X
X	assert(fname != NULL);
X	base = strrchr(fname, '/');
X	if (base == NULL)
X		return (char *) fname;
X	return base+1;
}
SHAR_EOF
  $shar_touch -am 0620234794 'liw-modules-0.4/fname/fnbase.c' &&
  chmod 0600 'liw-modules-0.4/fname/fnbase.c' ||
  echo 'restore of liw-modules-0.4/fname/fnbase.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/fname/fnbase.c'`"
  test 411 -eq "$shar_count" ||
    echo "liw-modules-0.4/fname/fnbase.c: original size 411, current size $shar_count"
fi
# ============= liw-modules-0.4/fname/fndelbeg.c ==============
if test -f 'liw-modules-0.4/fname/fndelbeg.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/fname/fndelbeg.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/fname/fndelbeg.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/fname/fndelbeg.c' &&
/*
X * fndelbeg.c -- delete first part of filename
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-fname:fndelbeg.c,v 1.2 1994/06/20 20:49:18 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/fname.h"
X
void fndelbeg(char *fname) {
X	char *p;
X
X	assert(fname != NULL);
X	if (*fname == '/')
X		memmove(fname, fname+1, strlen(fname)+1);
X	else {
X		p = strchr(fname, '/');
X		if (p == NULL)
X			*fname = '\0';
X		else
X			memmove(fname, p, strlen(p) + 1);
X	}
}
SHAR_EOF
  $shar_touch -am 0620234994 'liw-modules-0.4/fname/fndelbeg.c' &&
  chmod 0600 'liw-modules-0.4/fname/fndelbeg.c' ||
  echo 'restore of liw-modules-0.4/fname/fndelbeg.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/fname/fndelbeg.c'`"
  test 492 -eq "$shar_count" ||
    echo "liw-modules-0.4/fname/fndelbeg.c: original size 492, current size $shar_count"
fi
# ============= liw-modules-0.4/fname/fndelend.c ==============
if test -f 'liw-modules-0.4/fname/fndelend.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/fname/fndelend.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/fname/fndelend.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/fname/fndelend.c' &&
/*
X * fndelend.c -- delete last filename in a pathname
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-fname:fndelend.c,v 1.2 1994/06/20 20:49:19 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/fname.h"
X
void fndelend(char *fname) {
X	char *p;
X
X	assert(fname != NULL);
X	p = strrchr(fname, '/');
X	*(p == NULL ? fname : p) = '\0';
}
SHAR_EOF
  $shar_touch -am 0620234994 'liw-modules-0.4/fname/fndelend.c' &&
  chmod 0600 'liw-modules-0.4/fname/fndelend.c' ||
  echo 'restore of liw-modules-0.4/fname/fndelend.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/fname/fndelend.c'`"
  test 377 -eq "$shar_count" ||
    echo "liw-modules-0.4/fname/fndelend.c: original size 377, current size $shar_count"
fi
# ============= liw-modules-0.4/fname/fndelsuf.c ==============
if test -f 'liw-modules-0.4/fname/fndelsuf.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/fname/fndelsuf.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/fname/fndelsuf.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/fname/fndelsuf.c' &&
/*
X * fndelsuf.c -- delete last suffix from basename of filename
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-fname:fndelsuf.c,v 1.2 1994/06/20 20:49:20 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/fname.h"
X
int fndelsuf(char *fname, const char *suffix) {
X	char *dot;
X
X	assert(fname != NULL);
X	assert(suffix != NULL);
X	assert(*suffix != '\0');
X	dot = fnlastsuf(fname);
X	if (dot == NULL)
X		return -1;
X	if (suffix == NULL || strcmp(dot, suffix) == 0) {
X		*dot = '\0';
X		return 0;
X	}
X	return -1;
}
SHAR_EOF
  $shar_touch -am 0620234994 'liw-modules-0.4/fname/fndelsuf.c' &&
  chmod 0600 'liw-modules-0.4/fname/fndelsuf.c' ||
  echo 'restore of liw-modules-0.4/fname/fndelsuf.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/fname/fndelsuf.c'`"
  test 548 -eq "$shar_count" ||
    echo "liw-modules-0.4/fname/fndelsuf.c: original size 548, current size $shar_count"
fi
# ============= liw-modules-0.4/fname/fndir.c ==============
if test -f 'liw-modules-0.4/fname/fndir.c' && test X"$1" != X"-c"; then
  echo 'x - skipping liw-modules-0.4/fname/fndir.c (file already exists)'
else
  echo 'x - extracting liw-modules-0.4/fname/fndir.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'liw-modules-0.4/fname/fndir.c' &&
/*
X * fndir.c -- copy all but basename of filename
X *
X * Part of publib.  See man page for more information
X * "@(#)publib-fname:fndir.c,v 1.2 1994/06/20 20:49:21 liw Exp"
X */
X
#include <assert.h>
#include <string.h>
#include "publib/fname.h"
X
void fndir(char *dir, const char *fname) {
X	char *base;
X
X	assert(dir != NULL);
X	assert(fname != NULL);
X	base = fnbase(fname);
X	if (base == fname)
X		strcpy(dir, ".");
X	else {
X		memcpy(dir, fname, (size_t)(base-fname));
X		dir[base-fname] = '\0';
X	}
}
SHAR_EOF
  $shar_touch -am 0620234994 'liw-modules-0.4/fname/fndir.c' &&
  chmod 0600 'liw-modules-0.4/fname/fndir.c' ||
  echo 'restore of liw-modules-0.4/fname/fndir.c failed'
  shar_count="`wc -c < 'liw-modules-0.4/fname/fndir.c'`"
  test 493 -eq "$shar_count" ||
    echo "liw-modules-0.4/fname/fndir.c: original size 493, current size $shar_count"
fi
: || echo 'restore of liw-modules-0.4/fname/fnhome.c failed'
echo 'End of part 4, continue with part 5'
exit 0

