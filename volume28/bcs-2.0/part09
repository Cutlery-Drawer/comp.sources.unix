Newsgroups: comp.sources.unix
From: ejb@ERA.COM (Jay Berkenbilt)
Subject: v28i010: bcs-2.0 - A Baseline Configuration System, Part09/25
References: <1.764985670.1461@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: ejb@ERA.COM (Jay Berkenbilt)
Posting-Number: Volume 28, Issue 10
Archive-Name: bcs-2.0/part09

#!/bin/sh
# this is bcs.09 (part 9 of bcs-2.0)
# do not concatenate these parts, unpack them in order with /bin/sh
# file bcs-2.0/doc/texinfo.tex continued
#
if test ! -r _shar_seq_.tmp; then
	echo 'Please unpack part 1 first!'
	exit 1
fi
(read Scheck
 if test "$Scheck" != 9; then
	echo Please unpack part "$Scheck" next!
	exit 1
 else
	exit 0
 fi
) < _shar_seq_.tmp || exit 1
if test ! -f _shar_wnt_.tmp; then
	echo 'x - still skipping bcs-2.0/doc/texinfo.tex'
else
echo 'x - continuing file bcs-2.0/doc/texinfo.tex'
sed 's/^X//' << 'SHAR_EOF' >> 'bcs-2.0/doc/texinfo.tex' &&
\medbreak %
% Define the end token that this defining construct specifies
% so that it will exit this group.
\def#1{\endgraf\endgroup\medbreak}%
\def#2{\begingroup\obeylines\spacesplit#3}%
\parindent=0in
\advance\leftskip by \defbodyindent \advance \rightskip by \defbodyindent
\exdentamount=\defbodyindent
\begingroup %
\catcode 61=\active %
\obeylines\spacesplit#3}
X
\def\defvrparsebody #1#2#3#4 {\begingroup\inENV %
\medbreak %
% Define the end token that this defining construct specifies
% so that it will exit this group.
\def#1{\endgraf\endgroup\medbreak}%
\def#2##1 {\begingroup\obeylines\spacesplit{#3{##1}}}%
\parindent=0in
\advance\leftskip by \defbodyindent \advance \rightskip by \defbodyindent
\exdentamount=\defbodyindent
\begingroup\obeylines\spacesplit{#3{#4}}}
X
% This seems to work right in all cases.
\let\deftpparsebody=\defvrparsebody
% This fails to work.  When given `@deftp {Data Type} foo_t',
% it thinks the type name is just `f'.
%%% This is the same as all the others except for the last line.  We need
%%% to parse the arguments differently for @deftp, since the ``attributes''
%%% there are optional.
%%%
%%\def\deftpparsebody #1#2#3#4 {\begingroup\inENV %
%%\medbreak %
%%% Define the end token that this defining construct specifies
%%% so that it will exit this group.
%%\def#1{\endgraf\endgroup\medbreak}%
%%\def#2##1 {\begingroup\obeylines\spacesplit{#3{##1}}}%
%%\parindent=0in
%%\advance\leftskip by \defbodyindent \advance \rightskip by \defbodyindent
%%\exdentamount=\defbodyindent
%%\begingroup\obeylines\parsetpheaderline{#3{#4}}}
X
%%{\obeylines %
%%  % Parse the type name and any attributes (field names, etc.).
%%  % #1 is the beginning of the macro call that will produce the output,
%%  %   i.e., \deftpheader{CLASS}; this is passed from \deftpparsebody.
%%  % #2 is the type name, e.g., `struct termios'.
%%  % #3 is the (possibly empty) attribute list.
%%  %
%%  \gdef\parsetpheaderline#1#2#3^^M{%
%%    \endgroup % Started in \deftpparsebody.
%%    %
%%    % If the attribute list is in fact empty, there will be no space after
%%    % #2; so we can't put a space in our TeX parameter list.  But if it
%%    % isn't empty, then #3 will begin with an unwanted space.
%%    \def\theargs{\ignorespaces #3}%
%%    %
%%    % Call the macro to produce the output.
%%    #1{#2}\theargs %
%%  }%
%%}
X
\def\defopvarparsebody #1#2#3#4#5 {\begingroup\inENV %
\medbreak %
% Define the end token that this defining construct specifies
% so that it will exit this group.
\def#1{\endgraf\endgroup\medbreak}%
\def#2##1 ##2 {\def#4{##1}%
\begingroup\obeylines\spacesplit{#3{##2}}}%
\parindent=0in
\advance\leftskip by \defbodyindent \advance \rightskip by \defbodyindent
\exdentamount=\defbodyindent
\begingroup\obeylines\spacesplit{#3{#5}}}
X
% Split up #2 at the first space token.
% call #1 with two arguments:
%  the first is all of #2 before the space token,
%  the second is all of #2 after that space token.
% If #2 contains no space token, all of it is passed as the first arg
% and the second is passed as empty.
X
{\obeylines
\gdef\spacesplit#1#2^^M{\endgroup\spacesplitfoo{#1}#2 \relax\spacesplitfoo}%
\long\gdef\spacesplitfoo#1#2 #3#4\spacesplitfoo{%
\ifx\relax #3%
#1{#2}{}\else #1{#2}{#3#4}\fi}}
X
% So much for the things common to all kinds of definitions.
X
% Define @defun.
X
% First, define the processing that is wanted for arguments of \defun
% Use this to expand the args and terminate the paragraph they make up
X
\def\defunargs #1{\functionparens \sl
% Expand, preventing hyphenation at `-' chars.
% Note that groups don't affect changes in \hyphenchar.
\hyphenchar\tensl=0
#1%
\hyphenchar\tensl=45
\ifnum\parencount=0 \else \errmessage{unbalanced parens in @def arguments}\fi%
\interlinepenalty=10000
\advance\rightskip by 0pt plus 1fil
\endgraf\penalty 10000\vskip -\parskip\penalty 10000%
}
X
\def\deftypefunargs #1{%
% Expand, preventing hyphenation at `-' chars.
% Note that groups don't affect changes in \hyphenchar.
\functionparens
\code{#1}%
\interlinepenalty=10000
\advance\rightskip by 0pt plus 1fil
\endgraf\penalty 10000\vskip -\parskip\penalty 10000%
}
X
% Do complete processing of one @defun or @defunx line already parsed.
X
% @deffn Command forward-char nchars
X
\def\deffn{\defmethparsebody\Edeffn\deffnx\deffnheader}
X
\def\deffnheader #1#2#3{\doind {fn}{\code{#2}}%
\begingroup\defname {#2}{#1}\defunargs{#3}\endgroup %
\catcode 61=\other % Turn off change made in \defparsebody
}
X
% @defun == @deffn Function
X
\def\defun{\defparsebody\Edefun\defunx\defunheader}
X
\def\defunheader #1#2{\doind {fn}{\code{#1}}% Make entry in function index
\begingroup\defname {#1}{Function}%
\defunargs {#2}\endgroup %
\catcode 61=\other % Turn off change made in \defparsebody
}
X
% @deftypefun int foobar (int @var{foo}, float @var{bar})
X
\def\deftypefun{\defparsebody\Edeftypefun\deftypefunx\deftypefunheader}
X
% #1 is the data type.  #2 is the name and args.
\def\deftypefunheader #1#2{\deftypefunheaderx{#1}#2 \relax}
% #1 is the data type, #2 the name, #3 the args.
\def\deftypefunheaderx #1#2 #3\relax{%
\doind {fn}{\code{#2}}% Make entry in function index
\begingroup\defname {\code{#1} #2}{Function}%
\deftypefunargs {#3}\endgroup %
\catcode 61=\other % Turn off change made in \defparsebody
}
X
% @deftypefn {Library Function} int foobar (int @var{foo}, float @var{bar})
X
\def\deftypefn{\defmethparsebody\Edeftypefn\deftypefnx\deftypefnheader}
X
% #1 is the classification.  #2 is the data type.  #3 is the name and args.
\def\deftypefnheader #1#2#3{\deftypefnheaderx{#1}{#2}#3 \relax}
% #1 is the classification, #2 the data type, #3 the name, #4 the args.
\def\deftypefnheaderx #1#2#3 #4\relax{%
\doind {fn}{\code{#3}}% Make entry in function index
\begingroup\defname {\code{#2} #3}{#1}%
\deftypefunargs {#4}\endgroup %
\catcode 61=\other % Turn off change made in \defparsebody
}
X
% @defmac == @deffn Macro
X
\def\defmac{\defparsebody\Edefmac\defmacx\defmacheader}
X
\def\defmacheader #1#2{\doind {fn}{\code{#1}}% Make entry in function index
\begingroup\defname {#1}{Macro}%
\defunargs {#2}\endgroup %
\catcode 61=\other % Turn off change made in \defparsebody
}
X
% @defspec == @deffn Special Form
X
\def\defspec{\defparsebody\Edefspec\defspecx\defspecheader}
X
\def\defspecheader #1#2{\doind {fn}{\code{#1}}% Make entry in function index
\begingroup\defname {#1}{Special Form}%
\defunargs {#2}\endgroup %
\catcode 61=\other % Turn off change made in \defparsebody
}
X
% This definition is run if you use @defunx
% anywhere other than immediately after a @defun or @defunx.
X
\def\deffnx #1 {\errmessage{@deffnx in invalid context}}
\def\defunx #1 {\errmessage{@defunx in invalid context}}
\def\defmacx #1 {\errmessage{@defmacx in invalid context}}
\def\defspecx #1 {\errmessage{@defspecx in invalid context}}
\def\deftypefnx #1 {\errmessage{@deftypefnx in invalid context}}
\def\deftypeunx #1 {\errmessage{@deftypeunx in invalid context}}
X
% @defmethod, and so on
X
% @defop {Funny Method} foo-class frobnicate argument
X
\def\defop #1 {\def\defoptype{#1}%
\defopparsebody\Edefop\defopx\defopheader\defoptype}
X
\def\defopheader #1#2#3{%
\dosubind {fn}{\code{#2}}{on #1}% Make entry in function index
\begingroup\defname {#2}{\defoptype{} on #1}%
\defunargs {#3}\endgroup %
}
X
% @defmethod == @defop Method
X
\def\defmethod{\defmethparsebody\Edefmethod\defmethodx\defmethodheader}
X
\def\defmethodheader #1#2#3{%
\dosubind {fn}{\code{#2}}{on #1}% entry in function index
\begingroup\defname {#2}{Method on #1}%
\defunargs {#3}\endgroup %
}
X
% @defcv {Class Option} foo-class foo-flag
X
\def\defcv #1 {\def\defcvtype{#1}%
\defopvarparsebody\Edefcv\defcvx\defcvarheader\defcvtype}
X
\def\defcvarheader #1#2#3{%
\dosubind {vr}{\code{#2}}{of #1}% Make entry in var index
\begingroup\defname {#2}{\defcvtype{} of #1}%
\defvarargs {#3}\endgroup %
}
X
% @defivar == @defcv {Instance Variable}
X
\def\defivar{\defvrparsebody\Edefivar\defivarx\defivarheader}
X
\def\defivarheader #1#2#3{%
\dosubind {vr}{\code{#2}}{of #1}% Make entry in var index
\begingroup\defname {#2}{Instance Variable of #1}%
\defvarargs {#3}\endgroup %
}
X
% These definitions are run if you use @defmethodx, etc.,
% anywhere other than immediately after a @defmethod, etc.
X
\def\defopx #1 {\errmessage{@defopx in invalid context}}
\def\defmethodx #1 {\errmessage{@defmethodx in invalid context}}
\def\defcvx #1 {\errmessage{@defcvx in invalid context}}
\def\defivarx #1 {\errmessage{@defivarx in invalid context}}
X
% Now @defvar
X
% First, define the processing that is wanted for arguments of @defvar.
% This is actually simple: just print them in roman.
% This must expand the args and terminate the paragraph they make up
\def\defvarargs #1{\normalparens #1%
\interlinepenalty=10000
\endgraf\penalty 10000\vskip -\parskip\penalty 10000}
X
% @defvr Counter foo-count
X
\def\defvr{\defvrparsebody\Edefvr\defvrx\defvrheader}
X
\def\defvrheader #1#2#3{\doind {vr}{\code{#2}}%
\begingroup\defname {#2}{#1}\defvarargs{#3}\endgroup}
X
% @defvar == @defvr Variable
X
\def\defvar{\defvarparsebody\Edefvar\defvarx\defvarheader}
X
\def\defvarheader #1#2{\doind {vr}{\code{#1}}% Make entry in var index
\begingroup\defname {#1}{Variable}%
\defvarargs {#2}\endgroup %
}
X
% @defopt == @defvr {User Option}
X
\def\defopt{\defvarparsebody\Edefopt\defoptx\defoptheader}
X
\def\defoptheader #1#2{\doind {vr}{\code{#1}}% Make entry in var index
\begingroup\defname {#1}{User Option}%
\defvarargs {#2}\endgroup %
}
X
% @deftypevar int foobar
X
\def\deftypevar{\defvarparsebody\Edeftypevar\deftypevarx\deftypevarheader}
X
% #1 is the data type.  #2 is the name.
\def\deftypevarheader #1#2{%
\doind {vr}{\code{#2}}% Make entry in variables index
\begingroup\defname {\code{#1} #2}{Variable}%
\interlinepenalty=10000
\endgraf\penalty 10000\vskip -\parskip\penalty 10000
\endgroup}
X
% @deftypevr {Global Flag} int enable
X
\def\deftypevr{\defvrparsebody\Edeftypevr\deftypevrx\deftypevrheader}
X
\def\deftypevrheader #1#2#3{\doind {vr}{\code{#3}}%
\begingroup\defname {\code{#2} #3}{#1}
\interlinepenalty=10000
\endgraf\penalty 10000\vskip -\parskip\penalty 10000
\endgroup}
X
% This definition is run if you use @defvarx
% anywhere other than immediately after a @defvar or @defvarx.
X
\def\defvrx #1 {\errmessage{@defvrx in invalid context}}
\def\defvarx #1 {\errmessage{@defvarx in invalid context}}
\def\defoptx #1 {\errmessage{@defoptx in invalid context}}
\def\deftypevarx #1 {\errmessage{@deftypevarx in invalid context}}
\def\deftypevrx #1 {\errmessage{@deftypevrx in invalid context}}
X
% Now define @deftp
% Args are printed in bold, a slight difference from @defvar.
X
\def\deftpargs #1{\bf \defvarargs{#1}}
X
% @deftp Class window height width ...
X
\def\deftp{\deftpparsebody\Edeftp\deftpx\deftpheader}
X
\def\deftpheader #1#2#3{\doind {tp}{\code{#2}}%
\begingroup\defname {#2}{#1}\deftpargs{#3}\endgroup}
X
% This definition is run if you use @deftpx, etc
% anywhere other than immediately after a @deftp, etc.
X
\def\deftpx #1 {\errmessage{@deftpx in invalid context}}
X
\message{cross reference,}
% Define cross-reference macros
\newwrite \auxfile
X
\newif\ifhavexrefs  % True if xref values are known.
\newif\ifwarnedxrefs  % True if we warned once that they aren't known.
X
% \setref{foo} defines a cross-reference point named foo.
X
\def\setref#1{%
%\dosetq{#1-title}{Ytitle}%
\dosetq{#1-pg}{Ypagenumber}%
\dosetq{#1-snt}{Ysectionnumberandtype}}
X
\def\unnumbsetref#1{%
%\dosetq{#1-title}{Ytitle}%
\dosetq{#1-pg}{Ypagenumber}%
\dosetq{#1-snt}{Ynothing}}
X
\def\appendixsetref#1{%
%\dosetq{#1-title}{Ytitle}%
\dosetq{#1-pg}{Ypagenumber}%
\dosetq{#1-snt}{Yappendixletterandtype}}
X
% \xref, \pxref, and \ref generate cross-references to specified points.
% For \xrefX, #1 is the node name, #2 the name of the Info
% cross-reference, #3 the printed node name, #4 the name of the Info
% file, #5 the name of the printed manual.  All but the node name can be
% omitted.
%
\def\pxref#1{see \xrefX[#1,,,,,,,]}
\def\xref#1{See \xrefX[#1,,,,,,,]}
\def\ref#1{\xrefX[#1,,,,,,,]}
\def\xrefX[#1,#2,#3,#4,#5,#6]{\begingroup%
\def\printedmanual{\ignorespaces #5}%
\def\printednodename{\ignorespaces #3}%
%
\setbox1=\hbox{\printedmanual}%
\setbox0=\hbox{\printednodename}%
\ifdim \wd0=0pt%
\def\printednodename{\ignorespaces #1}%
%%% Uncommment the following line to make the actual chapter or section title
%%% appear inside the square brackets.
%\def\printednodename{#1-title}%
\fi%
%
%
% If we use \unhbox0 and \unhbox1 to print the node names, TeX does
% not insert empty discretionaries after hyphens, which means that it
% will not find a line break at a hyphen in a node names.  Since some
% manuals are best written with fairly long node names, containing
% hyphens, this is a loss.  Therefore, we simply give the text of
% the node name again, so it is as if TeX is seeing it for the first
% time.
\ifdim \wd1>0pt
section ``\printednodename'' in \cite{\printedmanual}%
\else%
\turnoffactive%
\refx{#1-snt}{} [\printednodename], page\tie\refx{#1-pg}{}%
\fi
\endgroup}
X
% \dosetq is the interface for calls from other macros
X
% Use \turnoffactive so that punctuation chars such as underscore
% work in node names.
\def\dosetq #1#2{{\let\folio=0 \turnoffactive%
\edef\next{\write\auxfile{\internalsetq {#1}{#2}}}%
\next}}
X
% \internalsetq {foo}{page} expands into
% CHARACTERS 'xrdef {foo}{...expansion of \Ypage...}
% When the aux file is read, ' is the escape character
X
\def\internalsetq #1#2{'xrdef {#1}{\csname #2\endcsname}}
X
% Things to be expanded by \internalsetq
X
\def\Ypagenumber{\folio}
X
\def\Ytitle{\thischapter}
X
\def\Ynothing{}
X
\def\Ysectionnumberandtype{%
\ifnum\secno=0 Chapter\xreftie\the\chapno %
\else \ifnum \subsecno=0 Section\xreftie\the\chapno.\the\secno %
\else \ifnum \subsubsecno=0 %
Section\xreftie\the\chapno.\the\secno.\the\subsecno %
\else %
Section\xreftie\the\chapno.\the\secno.\the\subsecno.\the\subsubsecno %
\fi \fi \fi }
X
\def\Yappendixletterandtype{%
\ifnum\secno=0 Appendix\xreftie'char\the\appendixno{}%
\else \ifnum \subsecno=0 Section\xreftie'char\the\appendixno.\the\secno %
\else \ifnum \subsubsecno=0 %
Section\xreftie'char\the\appendixno.\the\secno.\the\subsecno %
\else %
Section\xreftie'char\the\appendixno.\the\secno.\the\subsecno.\the\subsubsecno %
\fi \fi \fi }
X
\gdef\xreftie{'tie}
X
% Use TeX 3.0's \inputlineno to get the line number, for better error
% messages, but if we're using an old version of TeX, don't do anything.
%
\ifx\inputlineno\thisisundefined
X  \let\linenumber = \empty % Non-3.0.
\else
X  \def\linenumber{\the\inputlineno:\space}
\fi
X
% Define \refx{NAME}{SUFFIX} to reference a cross-reference string named NAME.
% If its value is nonempty, SUFFIX is output afterward.
X
\def\refx#1#2{%
X  \expandafter\ifx\csname X#1\endcsname\relax
X    % If not defined, say something at least.
X    $\langle$un\-de\-fined$\rangle$%
X    \ifhavexrefs
X      \message{\linenumber Undefined cross reference `#1'.}%
X    \else
X      \ifwarnedxrefs\else
X        \global\warnedxrefstrue
X        \message{Cross reference values unknown; you must run TeX again.}%
X      \fi
X    \fi
X  \else
X    % It's defined, so just use it.
X    \csname X#1\endcsname
X  \fi
X  #2% Output the suffix in any case.
}
X
% Read the last existing aux file, if any.  No error if none exists.
X
% This is the macro invoked by entries in the aux file.
\def\xrdef #1#2{
{\catcode`\'=\other\expandafter \gdef \csname X#1\endcsname {#2}}}
X
\def\readauxfile{%
\begingroup
\catcode `\^^@=\other
\catcode `\=\other
\catcode `\=\other
\catcode `\^^C=\other
\catcode `\^^D=\other
\catcode `\^^E=\other
\catcode `\^^F=\other
\catcode `\^^G=\other
\catcode `\^^H=\other
\catcode `\=\other
\catcode `\^^L=\other
\catcode `\=\other
\catcode `\=\other
\catcode `\=\other
\catcode `\=\other
\catcode `\=\other
\catcode `\=\other
\catcode `\=\other
\catcode `\=\other
\catcode `\=\other
\catcode `\=\other
\catcode `\=\other
\catcode `\=\other
\catcode 26=\other
\catcode `\^^[=\other
\catcode `\^^\=\other
\catcode `\^^]=\other
\catcode `\^^^=\other
\catcode `\^^_=\other
\catcode `\@=\other
\catcode `\^=\other
\catcode `\~=\other
\catcode `\[=\other
\catcode `\]=\other
\catcode`\"=\other
\catcode`\_=\other
\catcode`\|=\other
\catcode`\<=\other
\catcode`\>=\other
\catcode `\$=\other
\catcode `\#=\other
\catcode `\&=\other
% `\+ does not work, so use 43.
\catcode 43=\other
% the aux file uses ' as the escape.
% Turn off \ as an escape so we do not lose on
% entries which were dumped with control sequences in their names.
% For example, 'xrdef {$\leq $-fun}{page ...} made by @defun ^^
% Reference to such entries still does not work the way one would wish,
% but at least they do not bomb out when the aux file is read in.
\catcode `\{=1 \catcode `\}=2
\catcode `\%=\other
\catcode `\'=0
\catcode `\\=\other
\openin 1 \jobname.aux
\ifeof 1 \else \closein 1 \input \jobname.aux \global\havexrefstrue
\global\warnedobstrue
\fi
% Open the new aux file.  Tex will close it automatically at exit.
\openout \auxfile=\jobname.aux
\endgroup}
X
X
% Footnotes.
X
\newcount \footnoteno
X
% The trailing space in the following definition for supereject is
% vital for proper filling; pages come out unaligned when you do a
% pagealignmacro call if that space before the closing brace is
% removed.
\def\supereject{\par\penalty -20000\footnoteno =0 }
X
% @footnotestyle is meaningful for info output only..
\let\footnotestyle=\comment
X
\let\ptexfootnote=\footnote
X
{\catcode `\@=11
%
% Auto-number footnotes.  Otherwise like plain.
\gdef\footnote{%
X  \global\advance\footnoteno by \@ne
X  \edef\thisfootno{$^{\the\footnoteno}$}%
X  %
X  % In case the footnote comes at the end of a sentence, preserve the
X  % extra spacing after we do the footnote number.
X  \let\@sf\empty
X  \ifhmode\edef\@sf{\spacefactor\the\spacefactor}\/\fi
X  %
X  % Remove inadvertent blank space before typesetting the footnote number.
X  \unskip
X  \thisfootno\@sf
X  \footnotezzz
}%
X
% Don't bother with the trickery in plain.tex to not require the
% footnote text as a parameter.  Our footnotes don't need to be so general.
%
\long\gdef\footnotezzz#1{\insert\footins{%
X  % We want to typeset this text as a normal paragraph, even if the
X  % footnote reference occurs in (for example) a display environment.
X  % So reset some parameters.
X  \interlinepenalty\interfootnotelinepenalty
X  \splittopskip\ht\strutbox % top baseline for broken footnotes
X  \splitmaxdepth\dp\strutbox
X  \floatingpenalty\@MM
X  \leftskip\z@skip
X  \rightskip\z@skip
X  \spaceskip\z@skip
X  \xspaceskip\z@skip
X  \parindent\defaultparindent
X  %
X  % Hang the footnote text off the number.
X  \hang
X  \textindent{\thisfootno}%
X  %
X  % Don't crash into the line above the footnote text.  Since this
X  % expands into a box, it must come within the paragraph, lest it
X  % provide a place where TeX can split the footnote.
X  \footstrut
X  #1\strut}%
}
X
}%end \catcode `\@=11
X
% Set the baselineskip to #1, and the lineskip and strut size
% correspondingly.  There is no deep meaning behind these magic numbers
% used as factors; they just match (closely enough) what Knuth defined.
%
\def\lineskipfactor{.08333}
\def\strutheightpercent{.70833}
\def\strutdepthpercent {.29167}
%
\def\setleading#1{%
X  \normalbaselineskip = #1\relax
X  \normallineskip = \lineskipfactor\normalbaselineskip
X  \normalbaselines
X  \setbox\strutbox =\hbox{%
X    \vrule width0pt height\strutheightpercent\baselineskip
X                    depth \strutdepthpercent \baselineskip
X  }%
}
X
% @| inserts a changebar to the left of the current line.  It should
% surround any changed text.  This approach does *not* work if the
% change spans more than two lines of output.  To handle that, we would
% have adopt a much more difficult approach (putting marks into the main
% vertical list for the beginning and end of each change).
%
\def\|{%
X  % \vadjust can only be used in horizontal mode.
X  \leavevmode
X  %
X  % Append this vertical mode material after the current line in the output.
X  \vadjust{%
X    % We want to insert a rule with the height and depth of the current
X    % leading; that is exactly what \strutbox is supposed to record.
X    \vskip-\baselineskip
X    %
X    % \vadjust-items are inserted at the left edge of the type.  So
X    % the \llap here moves out into the left-hand margin.
X    \llap{%
X      %
X      % For a thicker or thinner bar, change the `1pt'.
X      \vrule height\baselineskip width1pt
X      %
X      % This is the space between the bar and the text.
X      \hskip 12pt
X    }%
X  }%
}
X
% For a final copy, take out the rectangles
% that mark overfull boxes (in case you have decided
% that the text looks ok even though it passes the margin).
%
\def\finalout{\overfullrule=0pt}
X
X
% End of control word definitions.
X
\message{and turning on texinfo input format.}
X
\def\openindices{%
X   \newindex{cp}%
X   \newcodeindex{fn}%
X   \newcodeindex{vr}%
X   \newcodeindex{tp}%
X   \newcodeindex{ky}%
X   \newcodeindex{pg}%
}
X
% Set some numeric style parameters, for 8.5 x 11 format.
X
%\hsize = 6.5in
\newdimen\defaultparindent \defaultparindent = 15pt
\parindent = \defaultparindent
\parskip 18pt plus 1pt
\setleading{15pt}
\advance\topskip by 1.2cm
X
% Prevent underfull vbox error messages.
\vbadness=10000
X
% Following George Bush, just get rid of widows and orphans.
\widowpenalty=10000
\clubpenalty=10000
X
% Use TeX 3.0's \emergencystretch to help line breaking, but if we're
% using an old version of TeX, don't do anything.  We want the amount of
% stretch added to depend on the line length, hence the dependence on
% \hsize.  This makes it come to about 9pt for the 8.5x11 format.
%
\ifx\emergencystretch\thisisundefined
X  % Allow us to assign to \emergencystretch anyway.
X  \def\emergencystretch{\dimen0}%
\else
X  \emergencystretch = \hsize
X  \divide\emergencystretch by 45
\fi
X
% Use @smallbook to reset parameters for 7x9.5 format  (or else 7x9.25)
\def\smallbook{
X
% These values for secheadingskip and subsecheadingskip are
% experiments.  RJC 7 Aug 1992
\global\secheadingskip = 17pt plus 6pt minus 3pt
\global\subsecheadingskip = 14pt plus 6pt minus 3pt
X
\global\lispnarrowing = 0.3in
\setleading{12pt}
\advance\topskip by -1cm
\global\parskip 3pt plus 1pt
\global\hsize = 5in
\global\vsize=7.5in
\global\tolerance=700
\global\hfuzz=1pt
\global\contentsrightmargin=0pt
X
\global\pagewidth=\hsize
\global\pageheight=\vsize
X
\global\let\smalllisp=\smalllispx
\global\let\smallexample=\smalllispx
\global\def\Esmallexample{\Esmalllisp}
}
X
% Use @afourpaper to print on European A4 paper.
\def\afourpaper{
\global\tolerance=700
\global\hfuzz=1pt
\setleading{12pt}
\global\parskip 15pt plus 1pt
X
\global\vsize= 53\baselineskip
\advance\vsize by \topskip
%\global\hsize=   5.85in     % A4 wide 10pt
\global\hsize=  6.5in
\global\outerhsize=\hsize
\global\advance\outerhsize by 0.5in
\global\outervsize=\vsize
\global\advance\outervsize by 0.6in
X
\global\pagewidth=\hsize
\global\pageheight=\vsize
}
X
% Define macros to output various characters with catcode for normal text.
\catcode`\"=\other
\catcode`\~=\other
\catcode`\^=\other
\catcode`\_=\other
\catcode`\|=\other
\catcode`\<=\other
\catcode`\>=\other
\catcode`\+=\other
\def\normaldoublequote{"}
\def\normaltilde{~}
\def\normalcaret{^}
\def\normalunderscore{_}
\def\normalverticalbar{|}
\def\normalless{<}
\def\normalgreater{>}
\def\normalplus{+}
X
% This macro is used to make a character print one way in ttfont
% where it can probably just be output, and another way in other fonts,
% where something hairier probably needs to be done.
%
% #1 is what to print if we are indeed using \tt; #2 is what to print
% otherwise.  Since all the Computer Modern typewriter fonts have zero
% interword stretch (and shrink), and it is reasonable to expect all
% typewriter fonts to have this, we can check that font parameter.
%
\def\ifusingtt#1#2{\ifdim \fontdimen3\the\font=0pt #1\else #2\fi}
X
% Turn off all special characters except @
% (and those which the user can use as if they were ordinary).
% Most of these we simply print from the \tt font, but for some, we can
% use math or other variants that look better in normal text.
X
\catcode`\"=\active
\def\activedoublequote{{\tt \char '042}}
\let"=\activedoublequote
\catcode`\~=\active
\def~{{\tt \char '176}}
\chardef\hat=`\^
\catcode`\^=\active
\def^{{\tt \hat}}
X
\catcode`\_=\active
\def_{\ifusingtt\normalunderscore\_}
% Subroutine for the previous macro.
\def\_{\lvvmode \kern.06em \vbox{\hrule width.3em height.1ex}}
X
% \lvvmode is equivalent in function to \leavevmode.
% Using \leavevmode runs into trouble when written out to
% an index file due to the expansion of \leavevmode into ``\unhbox
% \voidb@x'' ---which looks to TeX like ``\unhbox \voidb\x'' due to our
% magic tricks with @.
\def\lvvmode{\vbox to 0pt{}}
X
\catcode`\|=\active
\def|{{\tt \char '174}}
\chardef \less=`\<
\catcode`\<=\active
\def<{{\tt \less}}
\chardef \gtr=`\>
\catcode`\>=\active
\def>{{\tt \gtr}}
\catcode`\+=\active
\def+{{\tt \char 43}}
%\catcode 27=\active
%\def^^[{$\diamondsuit$}
X
% Used sometimes to turn off (effectively) the active characters
% even after parsing them.
\def\turnoffactive{\let"=\normaldoublequote
\let~=\normaltilde
\let^=\normalcaret
\let_=\normalunderscore
\let|=\normalverticalbar
\let<=\normalless
\let>=\normalgreater
\let+=\normalplus}
X
% Set up an active definition for =, but don't enable it most of the time.
{\catcode`\==\active
\global\def={{\tt \char 61}}}
X
\catcode`\@=0
X
% \rawbackslashxx output one backslash character in current font
\global\chardef\rawbackslashxx=`\\
%{\catcode`\\=\other
%@gdef@rawbackslashxx{\}}
X
% \rawbackslash redefines \ as input to do \rawbackslashxx.
{\catcode`\\=\active
@gdef@rawbackslash{@let\=@rawbackslashxx }}
X
% \normalbackslash outputs one backslash in fixed width font.
\def\normalbackslash{{\tt\rawbackslashxx}}
X
% Say @foo, not \foo, in error messages.
\escapechar=`\@
X
% \catcode 17=0   % Define control-q
\catcode`\\=\active
X
% If a .fmt file is being used, we don't want the `\input texinfo' to show up.
% That is what \eatinput is for; after that, the `\' should revert to printing
% a backslash.
%
@gdef@eatinput input texinfo{@fixbackslash}
@global@let\ = @eatinput
X
% On the other hand, perhaps the file did not have a `\input texinfo'. Then
% the first `\{ in the file would cause an error. This macro tries to fix
% that, assuming it is called before the first `\' could plausibly occur.
%
@gdef@fixbackslash{@ifx\@eatinput @let\ = @normalbackslash @fi}
X
%% These look ok in all fonts, so just make them not special.  The @rm below
%% makes sure that the current font starts out as the newly loaded cmr10
@catcode`@$=@other @catcode`@%=@other @catcode`@&=@other @catcode`@#=@other
X
@textfonts
@rm
X
@c Local variables:
@c page-delimiter: "^\\\\message"
@c End:
SHAR_EOF
echo 'File bcs-2.0/doc/texinfo.tex is complete' &&
chmod 0444 bcs-2.0/doc/texinfo.tex ||
echo 'restore of bcs-2.0/doc/texinfo.tex failed'
Wc_c="`wc -c < 'bcs-2.0/doc/texinfo.tex'`"
test 131253 -eq "$Wc_c" ||
	echo 'bcs-2.0/doc/texinfo.tex: original size 131253, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/doc/Makefile ==============
if test -f 'bcs-2.0/doc/Makefile' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/doc/Makefile (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/doc/Makefile (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/doc/Makefile' &&
#
# $Id: Makefile,v 1.13 1994/03/20 04:32:42 qjb Exp $
# $Source: /local/tmp/bcs-2.0/doc/RCS/Makefile,v $
# $Author: qjb $
#
# Makefile for BCS documentation
#
X
CONFIGMK = ../make/config.mk
include $(CONFIGMK)
include ../make/params.mk
X
all: bcs.PS info
dvi: bcs.dvi
X
TABSUF = lof lot toc
FIGURES = $(TEXTFIGURES) $(PSFIGURES)
TEXTFIGURES = baseline.txt stagea.txt stageb.txt stagec.txt
PSFIGURES = $(TEXTFIGURES:%.txt=%.EPS)
X
%.EPS: %.fig
X	$(FIG2DEV) -L ps $< $@
X
%.info: %.texinfo
X	$(MAKEINFO) $<
X
bcs.PS: bcs.dvi
X	$(DVIPS) -o bcs.PS bcs.dvi
X
bcs.dvi: bcs.texinfo $(FIGURES)
X	$(TEXI2DVI) bcs.texinfo
X
info: bcs.info
X
# Distribute the .PS file instead of the .dvi
clean:
X	$(RM) *.aux *.log *.cp *.cps *.fn *.ky *.pg *.toc *.tp *.vr
X	$(RM) *~ *.bak TAGS *.dvi
X
distclean: clean
X
realclean: distclean
X	$(RM) *.PS *.EPS *.info*
X
install: info
X	../mkinstalldirs $(DESTDIR)$(infodir)
X	$(RM) $(DESTDIR)$(infodir)/bcs.info*
X	$(CP) bcs.info* $(DESTDIR)$(infodir)
X	@echo "======================================================================="
X	@echo "Please add an entry for bcs to $(DESTDIR)$(infodir)/dir"
X	@echo "if necessary."
X	@echo "======================================================================="
X
uninstall:
X	$(RM) $(DESTDIR)$(infodir)/bcs.info*
SHAR_EOF
chmod 0444 bcs-2.0/doc/Makefile ||
echo 'restore of bcs-2.0/doc/Makefile failed'
Wc_c="`wc -c < 'bcs-2.0/doc/Makefile'`"
test 1256 -eq "$Wc_c" ||
	echo 'bcs-2.0/doc/Makefile: original size 1256, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/doc/baseline.fig ==============
if test -f 'bcs-2.0/doc/baseline.fig' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/doc/baseline.fig (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/doc/baseline.fig (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/doc/baseline.fig' &&
#FIG 2.1
80 2
2 1 0 1 -1 0 0 0 0.000 -1 0 0
X	 139 99 79 159 9999 9999
2 1 0 1 -1 0 0 0 0.000 -1 0 0
X	 139 99 119 159 9999 9999
2 1 0 1 -1 0 0 0 0.000 -1 0 0
X	 139 99 159 159 9999 9999
2 1 0 1 -1 0 0 0 0.000 -1 0 0
X	 139 99 199 159 9999 9999
2 1 0 1 -1 0 0 0 0.000 -1 0 0
X	 79 179 59 239 9999 9999
2 1 0 1 -1 0 0 0 0.000 -1 0 0
X	 79 184 99 239 9999 9999
2 1 0 1 -1 0 0 0 0.000 -1 0 0
X	 99 259 79 319 9999 9999
2 1 0 1 -1 0 0 0 0.000 -1 0 0
X	 99 259 119 319 9999 9999
2 1 0 1 -1 0 0 0 0.000 -1 0 0
X	 119 339 119 399 9999 9999
4 0 12 12 0 -1 0 0.00000 4 14 7 74 174 A
4 0 12 12 0 -1 0 0.00000 4 14 7 114 174 B
4 0 12 12 0 -1 0 0.00000 4 14 7 154 174 C
4 0 12 12 0 -1 0 0.00000 4 14 7 54 254 E
4 0 12 12 0 -1 0 0.00000 4 14 21 109 334 RCS
4 0 12 12 0 -1 0 0.00000 4 14 35 104 414 a.c,v
4 0 12 12 0 -1 0 0.00000 4 14 21 69 334 a.c
4 0 12 12 0 -1 0 0.00000 4 14 56 109 94 Baseline
4 0 12 12 0 -1 0 0.00000 4 14 7 99 254 F
4 0 12 12 0 -1 0 0.00000 4 14 7 199 174 D
SHAR_EOF
chmod 0444 bcs-2.0/doc/baseline.fig ||
echo 'restore of bcs-2.0/doc/baseline.fig failed'
Wc_c="`wc -c < 'bcs-2.0/doc/baseline.fig'`"
test 968 -eq "$Wc_c" ||
	echo 'bcs-2.0/doc/baseline.fig: original size 968, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/doc/baseline.txt ==============
if test -f 'bcs-2.0/doc/baseline.txt' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/doc/baseline.txt (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/doc/baseline.txt (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/doc/baseline.txt' &&
@c character below required to first line from being misindented.
-
X
X                            Baseline
X                               |
X                      +-----+--+--+-----+
X                      |     |     |     |
X                      |     |     |     |
X                      |     |     |     |
X                      A     B     C     D
X                     /\
X                    /  \
X                   /    \
X                  /      \
X                  E      F
X                        /\
X                       /  \
X                      /    \
X                     /      \
X                    a.c     RCS
X                             |
X                             |
X                             |
X                             |
X                           a.c,v
SHAR_EOF
chmod 0444 bcs-2.0/doc/baseline.txt ||
echo 'restore of bcs-2.0/doc/baseline.txt failed'
Wc_c="`wc -c < 'bcs-2.0/doc/baseline.txt'`"
test 781 -eq "$Wc_c" ||
	echo 'bcs-2.0/doc/baseline.txt: original size 781, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/doc/bcs.texinfo ==============
if test -f 'bcs-2.0/doc/bcs.texinfo' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/doc/bcs.texinfo (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/doc/bcs.texinfo (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/doc/bcs.texinfo' &&
\input texinfo   @c -*-texinfo-*-
@c
@c $Id: bcs.texinfo,v 1.11 1994/03/20 04:31:24 qjb Exp $
@c $Source: /local/tmp/bcs-2.0/doc/RCS/bcs.texinfo,v $
@c $Author: qjb $
@c
X
@c %**start of header
@setfilename bcs.info
@settitle Baseline Configuration System version @value{swversion}
@setchapternewpage odd
@c %**end of header
X
@c
@c Set swversion to whatever version the software is.
@c Set lastchanged to the date this was last changed.
@c
@set swversion 2.0
@set lastchanged March 19, 1994
X
@c
@c Set DVIPS if you will run the printed document through dvips.
@c This enables inclusion of postscript figures instead of
@c figures drawn with ASCII text.
@c
@set DVIPS
X
@ifinfo
@clear DVIPS
@end ifinfo
X
@ifset DVIPS
@tex
\input epsf
@end tex
@end ifset
X
@ignore
@ifinfo
@format
START-INFO-DIR-ENTRY
* BCS: (bcs).           A Baseline Configuration System
END-INFO-DIR-ENTRY
@end format
@end ifinfo
@end ignore
X
@iftex
@tex
\hyphenation{in-ter-ac-tive}
\hyphenation{stan-dard}
\hyphenation{op-tions}
@end tex
@end iftex
X
@ifinfo
This documentation describes BCS, a Baseline Configuration System that
provides an automated means for maintaining a stable software
baseline along with multiple, individually owned work areas.
This document describes version @value{swversion} of BCS.  This
document was last revised on @value{lastchanged}.
X
Copyright @copyright{} 1994  E. Jay Berkenbilt
X
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.
X
@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).
X
@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.
X
Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation.
@end ifinfo
X
@finalout
@titlepage
@title BCS: A Baseline Configuration System
@subtitle For BCS Version @value{swversion}
@subtitle Documentation last revised on @value{lastchanged}
@author E. Jay Berkenbilt
X
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1994  E. Jay Berkenbilt
X
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.
X
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.
X
Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation.
@end titlepage
X
X
@node Top, Copying, (dir), (dir)
X
@ifinfo
This documentation describes BCS, a Baseline Configuration System that
provides an automated means for maintaining a stable software
baseline along with multiple, individually owned work areas.
This document describes version @value{swversion} of BCS.  This document was
last revised on @value{lastchanged}. 
X
@end ifinfo
X
@menu
* Copying::                     
* Overview of BCS::             
* Advantages of BCS::           
* Use of BCS::                  
* Command Descriptions::        
* Supported Configuration Management Systems::  
* Example Baseline::            
* Technical Guide to BCS::      
* Example Uses of BCS::         
* Possible Future Enhancements::  
* Acknowledgments::             
* Internals::                   
* Index::                       
X
X --- The Detailed Node Listing ---
X
Overview of BCS
X
* Definition of Terms::         
* Baseline Structure::          
X
Definition of Terms
X
* Baseline::                    
* Staging Area::                
* Version Control::             
* Configuration Management::    
* History Logs::                
X
Use of BCS
X
* Environment Variables::       
* Important and Unimportant Files::  
* Automatically Staged and Unstageable Files::  
X
Command Descriptions
X
* Standard Options::            
* BCS Command Summary::         
X
BCS Command Summary
X
* Baseline Containment Commands::  
* File Classification Commands::  
* Staging Area Maintenance Commands::  
X
Supported Configuration Management Systems
X
* RCS support::                 
* SCCS support::                
X
Example Baseline
X
* Common Operations::           
X
Technical Guide to BCS
X
* Setting up BCS::              
* Creating the Baseline::       
* Internal Files::              
* Creating Staging Areas::      
* Adding BCS to an Existing Baseline::  
X
Example Uses of BCS
X
* Multiple Simultaneous Developers::  
* Support for a Multi-platform Environment::  
X
Multiple Simultaneous Developers
X
* Maintaining Baseline Stability::  
X
Example Procedure for Maintaining Baseline Stability
X
* Stability Problem::           
* Stability Solution::          
* Example of Stability Problem::  
* Stability Implications::      
X
Possible Future Enhancements
X
* Hierarchical Staging Areas::  
* Secure Baseline::             
X
Hierarchical Staging Areas
X
* Integration of Changes in Two Staging Areas::  
* Maintenance of Multiple Revisions of Software::  
X
Internals
X
* Overview of Internals::       
* Classification of Files::     
* Caching File System Information::  
* The File Information Table::  
* Debugging::                   
* Configuration Management Package Interface::  
* Staging and Synchronization::  
* Unstaging Files and Directories::  
@end menu
X
@node Copying, Overview of BCS, Top, Top
@comment  node-name,  next,  previous,  up
@chapter Terms and Conditions
@cindex copying
@cindex license restrictions
@cindex terms and conditions
@cindex redistribution
X
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU @samp{General Public License} as published by
the Free Software Foundation; either 
@ifinfo
version 1,
@end ifinfo
@iftex
@tex version~1, @end tex
@end iftex
or (at your option)
any later version.  You may also distribute this package under
the terms of the @samp{Artistic License} that comes with Perl.
X
This program is distributed in the hope that it will be useful,
but @emph{without any warranty;} without even the implied
warranty of @emph{merchantability} or @emph{fitness for a
particular purpose}.  See the General Public License or the
Artistic License for more details.
X
You should have received a copy of the GNU General Public
License along with this program.  The text of the license along
with explanatory information appears in the @file{COPYING} file
with the sources.  If you do not have this file, you may obtain
the license by writing to the Free Software Foundation, Inc.,
@ifinfo
675 Mass
@end ifinfo
@iftex
@tex 675~Mass @end tex
@end iftex
Ave, Cambridge, 
@ifinfo
MA 02139, 
@end ifinfo
@iftex
@tex MA~02139,  @end tex
@end iftex
USA.  You should also have
received a copy of the Artistic License in a file called
@file{Artistic} with this distribution.
X
@node Overview of BCS, Advantages of BCS, Copying, Top
@comment  node-name,  next,  previous,  up
@chapter Overview of BCS
@cindex overview of BCS
X
BCS is a set of utilities for maintaining a single baseline
and multiple staging areas for any development effort in which
more than one user is working.
BCS provides some configuration management
functionality as well as the means for multiple users to work
concurrently on a common source tree with minimal conflict.
This document provides an overview of what BCS
does, what you need to know to use it, and how it works.   If
you are familiar with baseline setups in general and just want
to get to work on using the system, see @ref{Use of BCS}.
X
@menu
* Definition of Terms::         
* Baseline Structure::          
@end menu
X
@node Definition of Terms, Baseline Structure, Overview of BCS, Overview of BCS
@comment  node-name,  next,  previous,  up
@section Definition of Terms
@cindex definition of terms
@cindex term definitions
X
This section defines a few terms that are used throughout this
document.
X
@menu
* Baseline::                    
* Staging Area::                
* Version Control::             
* Configuration Management::    
* History Logs::                
@end menu
X
@node Baseline, Staging Area, Definition of Terms, Definition of Terms
@comment  node-name,  next,  previous,  up
@subsection Baseline
@cindex baseline
@cindex authoritative copy
The @dfn{baseline} is one or more directory
hierarchies that 
contain the official copy of a project.  At any given time,
the baseline should be kept stable.  All files in the baseline
are accessible to all workers on a project.  Note that this use
of the term ``baseline'' here is different from a use that would
refer to a @dfn{functional baseline} in which some software
would be part of the baseline and other parts of it would exist
solely as extensions.  In this document, the term baseline refers
specifically to the part of the file system that contains
@emph{all} 
of the non-recreatable files that make up a project.  In 
@ifinfo
version 2
@end ifinfo
@iftex
@tex version~2 @end tex
@end iftex
of BCS, the baseline can consist of an arbitrary number
of directories.
X
@node Staging Area, Version Control, Baseline, Definition of Terms
@comment  node-name,  next,  previous,  up
@subsection Staging Area
@cindex staging area
@cindex work area
@cindex individual work area
A @dfn{staging area} is a private work area 
for a specific developer.  An individual's staging area will
usually consist primarily of symbolic links to the baseline.
The particular files that a person is working on will be copied
into that person's staging area so that he or she can modify
those files without affecting other users of the system.
X
@node Version Control, Configuration Management, Staging Area, Definition of Terms
@comment  node-name,  next,  previous,  up
@subsection Version Control
@cindex version control
@cindex revision control
@dfn{Version control} is a term
that describes the control and recording of versions, or
revisions, of files. 
A version control system must provide, at least, a means for
saving and retrieving old versions of files.
X
@node Configuration Management, History Logs, Version Control, Definition of Terms
@comment  node-name,  next,  previous,  up
@subsection Configuration Management
@cindex configuration management
@dfn{Configuration management}
is a term that describes the general control of configurations
of groups of files.  Configuration management systems must
include some version control.  In addition, it should be
possible to make a @dfn{snap shot} of
the entire system so that incremental changes can be managed.
A configuration management system also provides a
@dfn{locking} mechanism to prevent multiple users from 
simultaneously updating a single file.  BCS provides
configuration management capability by extending other packages.
Although BCS can easily be made to work with a variety of
configuration management systems, we recommend RCS [Walter
Tichy] which is the package of choice by the Free Software
Foundation and is a robust, portable, and highly functional
system in use on a wide range of platforms.  The examples in
this document are primarily based on the assumption that RCS is
the underlying configuration management system, although BCS
currently supports SCCS as well.@footnote{It can be argued that
packages such as RCS and SCCS are not actually configuration
management systems but simply version control systems.  The
author maintains that since both of these packages provide
locking, and at least RCS provides symbolic name support for
identifying large groups of files, they can be considered
configuration management packages for the purposes of this
document.} For a description of how to 
support a new configuration management package and
what attributes a package must have to be supported,
see @ref{Configuration Management Package Interface}. 
X
@node History Logs,  , Configuration Management, Definition of Terms
@comment  node-name,  next,  previous,  up
@subsection History Logs
@cindex history logs
@cindex configuration history
@cindex configuration management logs
@cindex RCS logs
@cindex SCCS logs
The logs kept by the configuration
management system are often referred to as @dfn{history logs}.
This is 
how we refer to them in this document.  History logs typically
contain old versions of files, owner information, and a history
of changes made to the file through the configuration management
system. 
X
@node Baseline Structure,  , Definition of Terms, Overview of BCS
@comment  node-name,  next,  previous,  up
@section Baseline Structure
@cindex baseline structure
@cindex structure of baseline
@cindex source code layout
When a staging area is initially created, it is a set of
directories containing only symbolic links to the baseline and a
file called @file{.baseline_path}.  (For more information on
this file, see @ref{Internal Files}.)  When a
user is ready to work on files in a particular part of the
system, the user will @dfn{stage} the appropriate files or 
directories.  In order for a file or directory to be staged, it
must be a symbolic link to a file or a directory in the
baseline that is @dfn{important} and eligible to be staged.
When a file is staged, the symbolic link is replaced
by an actual copy of the file.  When a directory is staged, the
symbolic link is replaced by a directory containing links to all
directories and important, eligible files in the original
directory.  For more discussion of the 
concepts of important and eligible files, see @ref{Important and
Unimportant Files}. 
If the directory in
the baseline contains important links, special treatment is
given when linking them to the staging area.  For a
description of staging and synchronization, see @ref{Staging and
Synchronization}. 
X
BCS works with an underlying configuration management system in
such a way that the commands for the package itself do not
have to be aware of the existence of BCS.  The basic checkin and
checkout commands of the version control system will not be
used directly by 
BCS users.  Instead, the @code{bcs} command will be used as a
front end.  In BCS, history logs
are shared between the baseline and the staging areas.  The
actual directories that contain the history logs are located 
in the baseline.  When a directory is staged, the staged
directory will contain a symbolic link to the log directory in
the baseline.  When a user wishes to edit a particular file, he
or she must check the file out for editing.  BCS will stage any
parts of the baseline that are needed.  When the user believes
that the edits are 
completed, he or she may check the file in and update the
baseline's copy of the file.  Note that the user may check files
in and out as many times as desired during the editing process.
The baseline copy is not updated until the user explicitly
causes the update to be performed.  
X
When a user is finished working in a particular directory, he or
she may @dfn{unstage} the directory.  When a directory is
unstaged, BCS performs several special checks for staged files with
history logs.  It performs some checks for other files as well.  The
directory will be unstaged only if all the 
files are updated in the baseline or if the user forces the
unstage to proceed anyway.  When a directory is
unstaged, the directory is recursively removed and replaced with
a symbolic link back to the baseline.  When a file is unstaged,
the file is removed and replaced with a symbolic link to a file
in the baseline.  Users will seldom explicitly unstage files.
The only time this would generally be done is if the user were
backing out changes and did not wish to update the baseline
needlessly.  For more details about unstaging, see @ref{Staging
Area Maintenance Commands}. 
X
Periodically, as the baseline changes, users' staging areas may
become unsynchronized with the baseline.  BCS provides the
@code{sync_staging} command to keep a user's staging area
synchronized with the 
baseline. 
X
@node Advantages of BCS, Use of BCS, Overview of BCS, Top
@comment  node-name,  next,  previous,  up
@chapter Advantages of BCS
@cindex advantages of bcs
@cindex why BCS?
X
There are several advantages to BCS over some other baseline
systems or to an unaccompanied configuration management system.
X
@itemize @bullet
@item History logs are shared between the baseline and staging
areas.  This means that users can check files in and out at will
while they are working without affecting the baseline.  Once
they update the baseline and unstage their work areas, other
users will have the benefit of all the intermediate versions of
the file that may have been checked in during the working
period.
X
@item Files are not updated in baseline until necessary.  When a
user checks out a file, the file's history log in the baseline is
locked.  This prevents other users from being able to check out
SHAR_EOF
true || echo 'restore of bcs-2.0/doc/bcs.texinfo failed'
fi
echo 'End of bcs-2.0 part 9'
echo 'File bcs-2.0/doc/bcs.texinfo is continued in part 10'
echo 10 > _shar_seq_.tmp
exit 0
