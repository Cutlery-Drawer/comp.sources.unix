Newsgroups: comp.sources.unix
From: ejb@ERA.COM (Jay Berkenbilt)
Subject: v28i009: bcs-2.0 - A Baseline Configuration System, Part08/25
References: <1.764985670.1461@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: ejb@ERA.COM (Jay Berkenbilt)
Posting-Number: Volume 28, Issue 9
Archive-Name: bcs-2.0/part08

#!/bin/sh
# this is bcs.08 (part 8 of bcs-2.0)
# do not concatenate these parts, unpack them in order with /bin/sh
# file bcs-2.0/doc/texinfo.tex continued
#
if test ! -r _shar_seq_.tmp; then
	echo 'Please unpack part 1 first!'
	exit 1
fi
(read Scheck
 if test "$Scheck" != 8; then
	echo Please unpack part "$Scheck" next!
	exit 1
 else
	exit 0
 fi
) < _shar_seq_.tmp || exit 1
if test ! -f _shar_wnt_.tmp; then
	echo 'x - still skipping bcs-2.0/doc/texinfo.tex'
else
echo 'x - continuing file bcs-2.0/doc/texinfo.tex'
sed 's/^X//' << 'SHAR_EOF' >> 'bcs-2.0/doc/texinfo.tex' &&
\expandafter\let\csname#1indfile\endcsname=\synindexfoo
\expandafter\xdef\csname#1index\endcsname{%	% Define \xxxindex
\noexpand\doindex {#2}}%
}
X
% @syncodeindex foo bar   similar, but put all entries made for index foo
% inside @code.
\def\syncodeindex #1 #2 {%
\expandafter\let\expandafter\synindexfoo\expandafter=\csname#2indfile\endcsname
\expandafter\let\csname#1indfile\endcsname=\synindexfoo
\expandafter\xdef\csname#1index\endcsname{%	% Define \xxxindex
\noexpand\docodeindex {#2}}%
}
X
% Define \doindex, the driver for all \fooindex macros.
% Argument #1 is generated by the calling \fooindex macro,
%  and it is "foo", the name of the index.
X
% \doindex just uses \parsearg; it calls \doind for the actual work.
% This is because \doind is more useful to call from other macros.
X
% There is also \dosubind {index}{topic}{subtopic}
% which makes an entry in a two-level index such as the operation index.
X
\def\doindex#1{\edef\indexname{#1}\parsearg\singleindexer}
\def\singleindexer #1{\doind{\indexname}{#1}}
X
% like the previous two, but they put @code around the argument.
\def\docodeindex#1{\edef\indexname{#1}\parsearg\singlecodeindexer}
\def\singlecodeindexer #1{\doind{\indexname}{\code{#1}}}
X
\def\indexdummies{%
\def\_{{\realbackslash _}}%
\def\w{\realbackslash w }%
\def\bf{\realbackslash bf }%
\def\rm{\realbackslash rm }%
\def\sl{\realbackslash sl }%
\def\sf{\realbackslash sf}%
\def\tt{\realbackslash tt}%
\def\gtr{\realbackslash gtr}%
\def\less{\realbackslash less}%
\def\hat{\realbackslash hat}%
\def\char{\realbackslash char}%
\def\TeX{\realbackslash TeX}%
\def\dots{\realbackslash dots }%
\def\copyright{\realbackslash copyright }%
\def\tclose##1{\realbackslash tclose {##1}}%
\def\code##1{\realbackslash code {##1}}%
\def\samp##1{\realbackslash samp {##1}}%
\def\t##1{\realbackslash r {##1}}%
\def\r##1{\realbackslash r {##1}}%
\def\i##1{\realbackslash i {##1}}%
\def\b##1{\realbackslash b {##1}}%
\def\cite##1{\realbackslash cite {##1}}%
\def\key##1{\realbackslash key {##1}}%
\def\file##1{\realbackslash file {##1}}%
\def\var##1{\realbackslash var {##1}}%
\def\kbd##1{\realbackslash kbd {##1}}%
\def\dfn##1{\realbackslash dfn {##1}}%
\def\emph##1{\realbackslash emph {##1}}%
}
X
% \indexnofonts no-ops all font-change commands.
% This is used when outputting the strings to sort the index by.
\def\indexdummyfont#1{#1}
\def\indexdummytex{TeX}
\def\indexdummydots{...}
X
\def\indexnofonts{%
\let\w=\indexdummyfont
\let\t=\indexdummyfont
\let\r=\indexdummyfont
\let\i=\indexdummyfont
\let\b=\indexdummyfont
\let\emph=\indexdummyfont
\let\strong=\indexdummyfont
\let\cite=\indexdummyfont
\let\sc=\indexdummyfont
%Don't no-op \tt, since it isn't a user-level command
% and is used in the definitions of the active chars like <, >, |...
%\let\tt=\indexdummyfont
\let\tclose=\indexdummyfont
\let\code=\indexdummyfont
\let\file=\indexdummyfont
\let\samp=\indexdummyfont
\let\kbd=\indexdummyfont
\let\key=\indexdummyfont
\let\var=\indexdummyfont
\let\TeX=\indexdummytex
\let\dots=\indexdummydots
}
X
% To define \realbackslash, we must make \ not be an escape.
% We must first make another character (@) an escape
% so we do not become unable to do a definition.
X
{\catcode`\@=0 \catcode`\\=\other
@gdef@realbackslash{\}}
X
\let\indexbackslash=0  %overridden during \printindex.
X
\def\doind #1#2{%
{\count10=\lastpenalty %
{\indexdummies % Must do this here, since \bf, etc expand at this stage
\escapechar=`\\%
{\let\folio=0% Expand all macros now EXCEPT \folio
\def\rawbackslashxx{\indexbackslash}% \indexbackslash isn't defined now
% so it will be output as is; and it will print as backslash in the indx.
%
% Now process the index-string once, with all font commands turned off,
% to get the string to sort the index by.
{\indexnofonts
\xdef\temp1{#2}%
}%
% Now produce the complete index entry.  We process the index-string again,
% this time with font commands expanded, to get what to print in the index.
\edef\temp{%
\write \csname#1indfile\endcsname{%
\realbackslash entry {\temp1}{\folio}{#2}}}%
\temp }%
}\penalty\count10}}
X
\def\dosubind #1#2#3{%
{\count10=\lastpenalty %
{\indexdummies % Must do this here, since \bf, etc expand at this stage
\escapechar=`\\%
{\let\folio=0%
\def\rawbackslashxx{\indexbackslash}%
%
% Now process the index-string once, with all font commands turned off,
% to get the string to sort the index by.
{\indexnofonts
\xdef\temp1{#2 #3}%
}%
% Now produce the complete index entry.  We process the index-string again,
% this time with font commands expanded, to get what to print in the index.
\edef\temp{%
\write \csname#1indfile\endcsname{%
\realbackslash entry {\temp1}{\folio}{#2}{#3}}}%
\temp }%
}\penalty\count10}}
X
% The index entry written in the file actually looks like
%  \entry {sortstring}{page}{topic}
% or
%  \entry {sortstring}{page}{topic}{subtopic}
% The texindex program reads in these files and writes files
% containing these kinds of lines:
%  \initial {c}
%     before the first topic whose initial is c
%  \entry {topic}{pagelist}
%     for a topic that is used without subtopics
%  \primary {topic}
%     for the beginning of a topic that is used with subtopics
%  \secondary {subtopic}{pagelist}
%     for each subtopic.
X
% Define the user-accessible indexing commands
% @findex, @vindex, @kindex, @cindex.
X
\def\findex {\fnindex}
\def\kindex {\kyindex}
\def\cindex {\cpindex}
\def\vindex {\vrindex}
\def\tindex {\tpindex}
\def\pindex {\pgindex}
X
\def\cindexsub {\begingroup\obeylines\cindexsub}
{\obeylines %
\gdef\cindexsub "#1" #2^^M{\endgroup %
\dosubind{cp}{#2}{#1}}}
X
% Define the macros used in formatting output of the sorted index material.
X
% This is what you call to cause a particular index to get printed.
% Write
% @unnumbered Function Index
% @printindex fn
X
\def\printindex{\parsearg\doprintindex}
X
\def\doprintindex#1{%
X  \tex
X  \dobreak \chapheadingskip {10000}
X  \catcode`\%=\other\catcode`\&=\other\catcode`\#=\other
X  \catcode`\$=\other\catcode`\_=\other
X  \catcode`\~=\other
X  %
X  % The following don't help, since the chars were translated
X  % when the raw index was written, and their fonts were discarded
X  % due to \indexnofonts.
X  %\catcode`\"=\active
X  %\catcode`\^=\active
X  %\catcode`\_=\active
X  %\catcode`\|=\active
X  %\catcode`\<=\active
X  %\catcode`\>=\active
X  % %
X  \def\indexbackslash{\rawbackslashxx}
X  \indexfonts\rm \tolerance=9500 \advance\baselineskip -1pt
X  \begindoublecolumns
X  %
X  % See if the index file exists and is nonempty.
X  \openin 1 \jobname.#1s
X  \ifeof 1
X    % \enddoublecolumns gets confused if there is no text in the index,
X    % and it loses the chapter title and the aux file entries for the
X    % index.  The easiest way to prevent this problem is to make sure
X    % there is some text.
X    (Index is nonexistent)
X    \else
X    %
X    % If the index file exists but is empty, then \openin leaves \ifeof
X    % false.  We have to make TeX try to read something from the file, so
X    % it can discover if there is anything in it.
X    \read 1 to \temp
X    \ifeof 1
X      (Index is empty)
X    \else
X      \input \jobname.#1s
X    \fi
X  \fi
X  \closein 1
X  \enddoublecolumns
X  \Etex
}
X
% These macros are used by the sorted index file itself.
% Change them to control the appearance of the index.
X
% Same as \bigskipamount except no shrink.
% \balancecolumns gets confused if there is any shrink.
\newskip\initialskipamount \initialskipamount 12pt plus4pt
X
\def\initial #1{%
{\let\tentt=\sectt \let\tt=\sectt \let\sf=\sectt
\ifdim\lastskip<\initialskipamount
\removelastskip \penalty-200 \vskip \initialskipamount\fi
\line{\secbf#1\hfill}\kern 2pt\penalty10000}}
X
% This typesets a paragraph consisting of #1, dot leaders, and then #2
% flush to the right margin.  It is used for index and table of contents
% entries.  The paragraph is indented by \leftskip.
%
\def\entry #1#2{\begingroup
X  %
X  % Start a new paragraph if necessary, so our assignments below can't
X  % affect previous text.
X  \par
X  %
X  % Do not fill out the last line with white space.
X  \parfillskip = 0in
X  %
X  % No extra space above this paragraph.
X  \parskip = 0in
X  %
X  % Do not prefer a separate line ending with a hyphen to fewer lines.
X  \finalhyphendemerits = 0
X  %
X  % \hangindent is only relevant when the entry text and page number
X  % don't both fit on one line.  In that case, bob suggests starting the
X  % dots pretty far over on the line.  Unfortunately, a large
X  % indentation looks wrong when the entry text itself is broken across
X  % lines.  So we use a small indentation and put up with long leaders.
X  %
X  % \hangafter is reset to 1 (which is the value we want) at the start
X  % of each paragraph, so we need not do anything with that.
X  \hangindent=2em
X  %
X  % When the entry text needs to be broken, just fill out the first line
X  % with blank space.
X  \rightskip = 0pt plus1fil
X  %
X  % Start a ``paragraph'' for the index entry so the line breaking
X  % parameters we've set above will have an effect.
X  \noindent
X  %
X  % Insert the text of the index entry.  TeX will do line-breaking on it.
X  #1%
X  %
X  % If we must, put the page number on a line of its own, and fill out
X  % this line with blank space.  (The \hfil is overwhelmed with the
X  % fill leaders glue in \indexdotfill if the page number does fit.)
X  \hfil\penalty50
X  \null\nobreak\indexdotfill % Have leaders before the page number.
X  %
X  % The `\ ' here is removed by the implicit \unskip that TeX does as
X  % part of (the primitive) \par.  Without it, a spurious underfull
X  % \hbox ensues.
X  \ #2% The page number ends the paragraph.
X  \par
\endgroup}
X
% Like \dotfill except takes at least 1 em.
\def\indexdotfill{\cleaders
X  \hbox{$\mathsurround=0pt \mkern1.5mu . \mkern1.5mu$}\hskip 1em plus 1fill}
X
\def\primary #1{\line{#1\hfil}}
X
\newskip\secondaryindent \secondaryindent=0.5cm
X
\def\secondary #1#2{
{\parfillskip=0in \parskip=0in
\hangindent =1in \hangafter=1
\noindent\hskip\secondaryindent\hbox{#1}\indexdotfill #2\par
}}
X
%% Define two-column mode, which is used in indexes.
%% Adapted from the TeXbook, page 416.
\catcode `\@=11
X
\newbox\partialpage
X
\newdimen\doublecolumnhsize
X
\def\begindoublecolumns{\begingroup
X  % Grab any single-column material above us.
X  \output = {\global\setbox\partialpage
X    =\vbox{\unvbox255\kern -\topskip \kern \baselineskip}}%
X  \eject
X  %
X  % Now switch to the double-column output routine.
X  \output={\doublecolumnout}%
X  %
X  % Change the page size parameters.  We could do this once outside this
X  % routine, in each of @smallbook, @afourpaper, and the default 8.5x11
X  % format, but then we repeat the same computation.  Repeating a couple
X  % of assignments once per index is clearly meaningless for the
X  % execution time, so we may as well do it once.
X  %
X  % First we halve the line length, less a little for the gutter between
X  % the columns.  We compute the gutter based on the line length, so it
X  % changes automatically with the paper format.  The magic constant
X  % below is chosen so that the gutter has the same value (well, +- <
X  % 1pt) as it did when we hard-coded it.
X  %
X  % We put the result in a separate register, \doublecolumhsize, so we
X  % can restore it in \pagesofar, after \hsize itself has (potentially)
X  % been clobbered.
X  %
X  \doublecolumnhsize = \hsize
X    \advance\doublecolumnhsize by -.04154\hsize
X    \divide\doublecolumnhsize by 2
X  \hsize = \doublecolumnhsize
X  %
X  % Double the \vsize as well.  (We don't need a separate register here,
X  % since nobody clobbers \vsize.)
X  \vsize = 2\vsize
X  \doublecolumnpagegoal
}
X
\def\enddoublecolumns{\eject \endgroup \pagegoal=\vsize \unvbox\partialpage}
X
\def\doublecolumnsplit{\splittopskip=\topskip \splitmaxdepth=\maxdepth
X  \global\dimen@=\pageheight \global\advance\dimen@ by-\ht\partialpage
X  \global\setbox1=\vsplit255 to\dimen@ \global\setbox0=\vbox{\unvbox1}
X  \global\setbox3=\vsplit255 to\dimen@ \global\setbox2=\vbox{\unvbox3}
X  \ifdim\ht0>\dimen@ \setbox255=\vbox{\unvbox0\unvbox2} \global\setbox255=\copy5 \fi
X  \ifdim\ht2>\dimen@ \setbox255=\vbox{\unvbox0\unvbox2} \global\setbox255=\copy5 \fi
}
\def\doublecolumnpagegoal{%
X  \dimen@=\vsize \advance\dimen@ by-2\ht\partialpage \global\pagegoal=\dimen@
}
\def\pagesofar{\unvbox\partialpage %
X  \hsize=\doublecolumnhsize % have to restore this since output routine
X  \wd0=\hsize \wd2=\hsize \hbox to\pagewidth{\box0\hfil\box2}}
\def\doublecolumnout{%
X  \setbox5=\copy255
X  {\vbadness=10000 \doublecolumnsplit}
X  \ifvbox255
X    \setbox0=\vtop to\dimen@{\unvbox0}
X    \setbox2=\vtop to\dimen@{\unvbox2}
X    \onepageout\pagesofar \unvbox255 \penalty\outputpenalty
X  \else
X    \setbox0=\vbox{\unvbox5}
X    \ifvbox0
X      \dimen@=\ht0 \advance\dimen@ by\topskip \advance\dimen@ by-\baselineskip
X      \divide\dimen@ by2 \splittopskip=\topskip \splitmaxdepth=\maxdepth
X      {\vbadness=10000
X	\loop \global\setbox5=\copy0
X          \setbox1=\vsplit5 to\dimen@
X          \setbox3=\vsplit5 to\dimen@
X          \ifvbox5 \global\advance\dimen@ by1pt \repeat
X        \setbox0=\vbox to\dimen@{\unvbox1}
X        \setbox2=\vbox to\dimen@{\unvbox3}
X        \global\setbox\partialpage=\vbox{\pagesofar}
X        \doublecolumnpagegoal
X      }
X    \fi
X  \fi
}
X
\catcode `\@=\other
\message{sectioning,}
% Define chapters, sections, etc.
X
\newcount \chapno
\newcount \secno        \secno=0
\newcount \subsecno     \subsecno=0
\newcount \subsubsecno  \subsubsecno=0
X
% This counter is funny since it counts through charcodes of letters A, B, ...
\newcount \appendixno  \appendixno = `\@
\def\appendixletter{\char\the\appendixno}
X
\newwrite \contentsfile
% This is called from \setfilename.
\def\opencontents{\openout \contentsfile = \jobname.toc}
X
% Each @chapter defines this as the name of the chapter.
% page headings and footings can use it.  @section does likewise
X
\def\thischapter{} \def\thissection{}
\def\seccheck#1{\if \pageno<0 %
\errmessage{@#1 not allowed after generating table of contents}\fi
%
}
X
\def\chapternofonts{%
\let\rawbackslash=\relax%
\let\frenchspacing=\relax%
\def\result{\realbackslash result}
\def\equiv{\realbackslash equiv}
\def\expansion{\realbackslash expansion}
\def\print{\realbackslash print}
\def\TeX{\realbackslash TeX}
\def\dots{\realbackslash dots}
\def\copyright{\realbackslash copyright}
\def\tt{\realbackslash tt}
\def\bf{\realbackslash bf }
\def\w{\realbackslash w}
\def\less{\realbackslash less}
\def\gtr{\realbackslash gtr}
\def\hat{\realbackslash hat}
\def\char{\realbackslash char}
\def\tclose##1{\realbackslash tclose {##1}}
\def\code##1{\realbackslash code {##1}}
\def\samp##1{\realbackslash samp {##1}}
\def\r##1{\realbackslash r {##1}}
\def\b##1{\realbackslash b {##1}}
\def\key##1{\realbackslash key {##1}}
\def\file##1{\realbackslash file {##1}}
\def\kbd##1{\realbackslash kbd {##1}}
% These are redefined because @smartitalic wouldn't work inside xdef.
\def\i##1{\realbackslash i {##1}}
\def\cite##1{\realbackslash cite {##1}}
\def\var##1{\realbackslash var {##1}}
\def\emph##1{\realbackslash emph {##1}}
\def\dfn##1{\realbackslash dfn {##1}}
}
X
\newcount\absseclevel % used to calculate proper heading level
\newcount\secbase\secbase=0 % @raise/lowersections modify this count
X
% @raisesections: treat @section as chapter, @subsection as section, etc.
\def\raisesections{\global\advance\secbase by -1}
\let\up=\raisesections % original BFox name
X
% @lowersections: treat @chapter as section, @section as subsection, etc.
\def\lowersections{\global\advance\secbase by 1}
\let\down=\lowersections % original BFox name
X
% Choose a numbered-heading macro
% #1 is heading level if unmodified by @raisesections or @lowersections
% #2 is text for heading
\def\numhead#1#2{\absseclevel=\secbase\advance\absseclevel by #1
\ifcase\absseclevel
X  \chapterzzz{#2}
\or
X  \seczzz{#2}
\or
X  \numberedsubseczzz{#2}
\or
X  \numberedsubsubseczzz{#2}
\else
X  \ifnum \absseclevel<0
X    \chapterzzz{#2}
X  \else
X    \numberedsubsubseczzz{#2}
X  \fi
\fi
}
X
% like \numhead, but chooses appendix heading levels
\def\apphead#1#2{\absseclevel=\secbase\advance\absseclevel by #1
\ifcase\absseclevel
X  \appendixzzz{#2}
\or
X  \appendixsectionzzz{#2}
\or
X  \appendixsubseczzz{#2}
\or
X  \appendixsubsubseczzz{#2}
\else
X  \ifnum \absseclevel<0
X    \appendixzzz{#2}
X  \else
X    \appendixsubsubseczzz{#2}
X  \fi
\fi
}
X
% like \numhead, but chooses numberless heading levels
\def\unnmhead#1#2{\absseclevel=\secbase\advance\absseclevel by #1
\ifcase\absseclevel
X  \unnumberedzzz{#2}
\or
X  \unnumberedseczzz{#2}
\or
X  \unnumberedsubseczzz{#2}
\or
X  \unnumberedsubsubseczzz{#2}
\else
X  \ifnum \absseclevel<0
X    \unnumberedzzz{#2}
X  \else
X    \unnumberedsubsubseczzz{#2}
X  \fi
\fi
}
X
X
\def\thischaptername{No Chapter Title}
\outer\def\chapter{\parsearg\chapteryyy}
\def\chapteryyy #1{\numhead0{#1}} % normally numhead0 calls chapterzzz
\def\chapterzzz #1{\seccheck{chapter}%
\secno=0 \subsecno=0 \subsubsecno=0
\global\advance \chapno by 1 \message{Chapter \the\chapno}%
\chapmacro {#1}{\the\chapno}%
\gdef\thissection{#1}%
\gdef\thischaptername{#1}%
% We don't substitute the actual chapter name into \thischapter
% because we don't want its macros evaluated now.
\xdef\thischapter{Chapter \the\chapno: \noexpand\thischaptername}%
{\chapternofonts%
\edef\temp{{\realbackslash chapentry {#1}{\the\chapno}{\noexpand\folio}}}%
\escapechar=`\\%
\write \contentsfile \temp  %
\donoderef %
\global\let\section = \numberedsec
\global\let\subsection = \numberedsubsec
\global\let\subsubsection = \numberedsubsubsec
}}
X
\outer\def\appendix{\parsearg\appendixyyy}
\def\appendixyyy #1{\apphead0{#1}} % normally apphead0 calls appendixzzz
\def\appendixzzz #1{\seccheck{appendix}%
\secno=0 \subsecno=0 \subsubsecno=0
\global\advance \appendixno by 1 \message{Appendix \appendixletter}%
\chapmacro {#1}{Appendix \appendixletter}%
\gdef\thissection{#1}%
\gdef\thischaptername{#1}%
\xdef\thischapter{Appendix \appendixletter: \noexpand\thischaptername}%
{\chapternofonts%
\edef\temp{{\realbackslash chapentry
X  {#1}{Appendix \appendixletter}{\noexpand\folio}}}%
\escapechar=`\\%
\write \contentsfile \temp  %
\appendixnoderef %
\global\let\section = \appendixsec
\global\let\subsection = \appendixsubsec
\global\let\subsubsection = \appendixsubsubsec
}}
X
\outer\def\top{\parsearg\unnumberedyyy}
\outer\def\unnumbered{\parsearg\unnumberedyyy}
\def\unnumberedyyy #1{\unnmhead0{#1}} % normally unnmhead0 calls unnumberedzzz
\def\unnumberedzzz #1{\seccheck{unnumbered}%
\secno=0 \subsecno=0 \subsubsecno=0
%
% This used to be simply \message{#1}, but TeX fully expands the
% argument to \message.  Therefore, if #1 contained @-commands, TeX
% expanded them.  For example, in `@unnumbered The @cite{Book}', TeX
% expanded @cite (which turns out to cause errors because \cite is meant
% to be executed, not expanded).
%
% Anyway, we don't want the fully-expanded definition of @cite to appear
% as a result of the \message, we just want `@cite' itself.  We use
% \the<toks register> to achieve this: TeX expands \the<toks> only once,
% simply yielding the contents of the <toks register>.
\toks0 = {#1}\message{(\the\toks0)}%
%
\unnumbchapmacro {#1}%
\gdef\thischapter{#1}\gdef\thissection{#1}%
{\chapternofonts%
\edef\temp{{\realbackslash unnumbchapentry {#1}{\noexpand\folio}}}%
\escapechar=`\\%
\write \contentsfile \temp  %
\unnumbnoderef %
\global\let\section = \unnumberedsec
\global\let\subsection = \unnumberedsubsec
\global\let\subsubsection = \unnumberedsubsubsec
}}
X
\outer\def\numberedsec{\parsearg\secyyy}
\def\secyyy #1{\numhead1{#1}} % normally calls seczzz
\def\seczzz #1{\seccheck{section}%
\subsecno=0 \subsubsecno=0 \global\advance \secno by 1 %
\gdef\thissection{#1}\secheading {#1}{\the\chapno}{\the\secno}%
{\chapternofonts%
\edef\temp{{\realbackslash secentry %
{#1}{\the\chapno}{\the\secno}{\noexpand\folio}}}%
\escapechar=`\\%
\write \contentsfile \temp %
\donoderef %
\penalty 10000 %
}}
X
\outer\def\appenixsection{\parsearg\appendixsecyyy}
\outer\def\appendixsec{\parsearg\appendixsecyyy}
\def\appendixsecyyy #1{\apphead1{#1}} % normally calls appendixsectionzzz
\def\appendixsectionzzz #1{\seccheck{appendixsection}%
\subsecno=0 \subsubsecno=0 \global\advance \secno by 1 %
\gdef\thissection{#1}\secheading {#1}{\appendixletter}{\the\secno}%
{\chapternofonts%
\edef\temp{{\realbackslash secentry %
{#1}{\appendixletter}{\the\secno}{\noexpand\folio}}}%
\escapechar=`\\%
\write \contentsfile \temp %
\appendixnoderef %
\penalty 10000 %
}}
X
\outer\def\unnumberedsec{\parsearg\unnumberedsecyyy}
\def\unnumberedsecyyy #1{\unnmhead1{#1}} % normally calls unnumberedseczzz
\def\unnumberedseczzz #1{\seccheck{unnumberedsec}%
\plainsecheading {#1}\gdef\thissection{#1}%
{\chapternofonts%
\edef\temp{{\realbackslash unnumbsecentry{#1}{\noexpand\folio}}}%
\escapechar=`\\%
\write \contentsfile \temp %
\unnumbnoderef %
\penalty 10000 %
}}
X
\outer\def\numberedsubsec{\parsearg\numberedsubsecyyy}
\def\numberedsubsecyyy #1{\numhead2{#1}} % normally calls numberedsubseczzz
\def\numberedsubseczzz #1{\seccheck{subsection}%
\gdef\thissection{#1}\subsubsecno=0 \global\advance \subsecno by 1 %
\subsecheading {#1}{\the\chapno}{\the\secno}{\the\subsecno}%
{\chapternofonts%
\edef\temp{{\realbackslash subsecentry %
{#1}{\the\chapno}{\the\secno}{\the\subsecno}{\noexpand\folio}}}%
\escapechar=`\\%
\write \contentsfile \temp %
\donoderef %
\penalty 10000 %
}}
X
\outer\def\appendixsubsec{\parsearg\appendixsubsecyyy}
\def\appendixsubsecyyy #1{\apphead2{#1}} % normally calls appendixsubseczzz
\def\appendixsubseczzz #1{\seccheck{appendixsubsec}%
\gdef\thissection{#1}\subsubsecno=0 \global\advance \subsecno by 1 %
\subsecheading {#1}{\appendixletter}{\the\secno}{\the\subsecno}%
{\chapternofonts%
\edef\temp{{\realbackslash subsecentry %
{#1}{\appendixletter}{\the\secno}{\the\subsecno}{\noexpand\folio}}}%
\escapechar=`\\%
\write \contentsfile \temp %
\appendixnoderef %
\penalty 10000 %
}}
X
\outer\def\unnumberedsubsec{\parsearg\unnumberedsubsecyyy}
\def\unnumberedsubsecyyy #1{\unnmhead2{#1}} %normally calls unnumberedsubseczzz
\def\unnumberedsubseczzz #1{\seccheck{unnumberedsubsec}%
\plainsecheading {#1}\gdef\thissection{#1}%
{\chapternofonts%
\edef\temp{{\realbackslash unnumbsubsecentry{#1}{\noexpand\folio}}}%
\escapechar=`\\%
\write \contentsfile \temp %
\unnumbnoderef %
\penalty 10000 %
}}
X
\outer\def\numberedsubsubsec{\parsearg\numberedsubsubsecyyy}
\def\numberedsubsubsecyyy #1{\numhead3{#1}} % normally numberedsubsubseczzz
\def\numberedsubsubseczzz #1{\seccheck{subsubsection}%
\gdef\thissection{#1}\global\advance \subsubsecno by 1 %
\subsubsecheading {#1}
X  {\the\chapno}{\the\secno}{\the\subsecno}{\the\subsubsecno}%
{\chapternofonts%
\edef\temp{{\realbackslash subsubsecentry %
X  {#1}
X  {\the\chapno}{\the\secno}{\the\subsecno}{\the\subsubsecno}
X  {\noexpand\folio}}}%
\escapechar=`\\%
\write \contentsfile \temp %
\donoderef %
\penalty 10000 %
}}
X
\outer\def\appendixsubsubsec{\parsearg\appendixsubsubsecyyy}
\def\appendixsubsubsecyyy #1{\apphead3{#1}} % normally appendixsubsubseczzz
\def\appendixsubsubseczzz #1{\seccheck{appendixsubsubsec}%
\gdef\thissection{#1}\global\advance \subsubsecno by 1 %
\subsubsecheading {#1}
X  {\appendixletter}{\the\secno}{\the\subsecno}{\the\subsubsecno}%
{\chapternofonts%
\edef\temp{{\realbackslash subsubsecentry{#1}%
X  {\appendixletter}
X  {\the\secno}{\the\subsecno}{\the\subsubsecno}{\noexpand\folio}}}%
\escapechar=`\\%
\write \contentsfile \temp %
\appendixnoderef %
\penalty 10000 %
}}
X
\outer\def\unnumberedsubsubsec{\parsearg\unnumberedsubsubsecyyy}
\def\unnumberedsubsubsecyyy #1{\unnmhead3{#1}} %normally unnumberedsubsubseczzz
\def\unnumberedsubsubseczzz #1{\seccheck{unnumberedsubsubsec}%
\plainsecheading {#1}\gdef\thissection{#1}%
{\chapternofonts%
\edef\temp{{\realbackslash unnumbsubsubsecentry{#1}{\noexpand\folio}}}%
\escapechar=`\\%
\write \contentsfile \temp %
\unnumbnoderef %
\penalty 10000 %
}}
X
% These are variants which are not "outer", so they can appear in @ifinfo.
% Actually, they should now be obsolete; ordinary section commands should work.
\def\infotop{\parsearg\unnumberedzzz}
\def\infounnumbered{\parsearg\unnumberedzzz}
\def\infounnumberedsec{\parsearg\unnumberedseczzz}
\def\infounnumberedsubsec{\parsearg\unnumberedsubseczzz}
\def\infounnumberedsubsubsec{\parsearg\unnumberedsubsubseczzz}
X
\def\infoappendix{\parsearg\appendixzzz}
\def\infoappendixsec{\parsearg\appendixseczzz}
\def\infoappendixsubsec{\parsearg\appendixsubseczzz}
\def\infoappendixsubsubsec{\parsearg\appendixsubsubseczzz}
X
\def\infochapter{\parsearg\chapterzzz}
\def\infosection{\parsearg\sectionzzz}
\def\infosubsection{\parsearg\subsectionzzz}
\def\infosubsubsection{\parsearg\subsubsectionzzz}
X
% These macros control what the section commands do, according
% to what kind of chapter we are in (ordinary, appendix, or unnumbered).
% Define them by default for a numbered chapter.
\global\let\section = \numberedsec
\global\let\subsection = \numberedsubsec
\global\let\subsubsection = \numberedsubsubsec
X
% Define @majorheading, @heading and @subheading
X
% NOTE on use of \vbox for chapter headings, section headings, and
% such:
%	1) We use \vbox rather than the earlier \line to permit
%	   overlong headings to fold.
%	2) \hyphenpenalty is set to 10000 because hyphenation in a
%	   heading is obnoxious; this forbids it.
%       3) Likewise, headings look best if no \parindent is used, and
%          if justification is not attempted.  Hence \raggedright.
X
X
\def\majorheading{\parsearg\majorheadingzzz}
\def\majorheadingzzz #1{%
{\advance\chapheadingskip by 10pt \chapbreak }%
{\chapfonts \vbox{\hyphenpenalty=10000\tolerance=5000
X                  \parindent=0pt\raggedright
X                  \rm #1\hfill}}\bigskip \par\penalty 200}
X
\def\chapheading{\parsearg\chapheadingzzz}
\def\chapheadingzzz #1{\chapbreak %
{\chapfonts \vbox{\hyphenpenalty=10000\tolerance=5000
X                  \parindent=0pt\raggedright
X                  \rm #1\hfill}}\bigskip \par\penalty 200}
X
\def\heading{\parsearg\secheadingi}
X
\def\subheading{\parsearg\subsecheadingi}
X
\def\subsubheading{\parsearg\subsubsecheadingi}
X
% These macros generate a chapter, section, etc. heading only
% (including whitespace, linebreaking, etc. around it),
% given all the information in convenient, parsed form.
X
%%% Args are the skip and penalty (usually negative)
\def\dobreak#1#2{\par\ifdim\lastskip<#1\removelastskip\penalty#2\vskip#1\fi}
X
\def\setchapterstyle #1 {\csname CHAPF#1\endcsname}
X
%%% Define plain chapter starts, and page on/off switching for it
% Parameter controlling skip before chapter headings (if needed)
X
\newskip \chapheadingskip \chapheadingskip = 30pt plus 8pt minus 4pt
X
\def\chapbreak{\dobreak \chapheadingskip {-4000}}
\def\chappager{\par\vfill\supereject}
\def\chapoddpage{\chappager \ifodd\pageno \else \hbox to 0pt{} \chappager\fi}
X
\def\setchapternewpage #1 {\csname CHAPPAG#1\endcsname}
X
\def\CHAPPAGoff{
\global\let\pchapsepmacro=\chapbreak
\global\let\pagealignmacro=\chappager}
X
\def\CHAPPAGon{
\global\let\pchapsepmacro=\chappager
\global\let\pagealignmacro=\chappager
\global\def\HEADINGSon{\HEADINGSsingle}}
X
\def\CHAPPAGodd{
\global\let\pchapsepmacro=\chapoddpage
\global\let\pagealignmacro=\chapoddpage
\global\def\HEADINGSon{\HEADINGSdouble}}
X
\CHAPPAGon
X
\def\CHAPFplain{
\global\let\chapmacro=\chfplain
\global\let\unnumbchapmacro=\unnchfplain}
X
\def\chfplain #1#2{%
X  \pchapsepmacro
X  {%
X    \chapfonts \vbox{\hyphenpenalty=10000\tolerance=5000
X                     \parindent=0pt\raggedright
X                     \rm #2\enspace #1}%
X  }%
X  \bigskip
X  \penalty5000
}
X
\def\unnchfplain #1{%
\pchapsepmacro %
{\chapfonts \vbox{\hyphenpenalty=10000\tolerance=5000
X                  \parindent=0pt\raggedright
X                  \rm #1\hfill}}\bigskip \par\penalty 10000 %
}
\CHAPFplain % The default
X
\def\unnchfopen #1{%
\chapoddpage {\chapfonts \vbox{\hyphenpenalty=10000\tolerance=5000
X                       \parindent=0pt\raggedright
X                       \rm #1\hfill}}\bigskip \par\penalty 10000 %
}
X
\def\chfopen #1#2{\chapoddpage {\chapfonts
\vbox to 3in{\vfil \hbox to\hsize{\hfil #2} \hbox to\hsize{\hfil #1} \vfil}}%
\par\penalty 5000 %
}
X
\def\CHAPFopen{
\global\let\chapmacro=\chfopen
\global\let\unnumbchapmacro=\unnchfopen}
X
% Parameter controlling skip before section headings.
X
\newskip \subsecheadingskip  \subsecheadingskip = 17pt plus 8pt minus 4pt
\def\subsecheadingbreak{\dobreak \subsecheadingskip {-500}}
X
\newskip \secheadingskip  \secheadingskip = 21pt plus 8pt minus 4pt
\def\secheadingbreak{\dobreak \secheadingskip {-1000}}
X
% @paragraphindent  is defined for the Info formatting commands only.
\let\paragraphindent=\comment
X
% Section fonts are the base font at magstep2, which produces
% a size a bit more than 14 points in the default situation.
X
\def\secheading #1#2#3{\secheadingi {#2.#3\enspace #1}}
\def\plainsecheading #1{\secheadingi {#1}}
\def\secheadingi #1{{\advance \secheadingskip by \parskip %
\secheadingbreak}%
{\secfonts \vbox{\hyphenpenalty=10000\tolerance=5000
X                 \parindent=0pt\raggedright
X                 \rm #1\hfill}}%
\ifdim \parskip<10pt \kern 10pt\kern -\parskip\fi \penalty 10000 }
X
X
% Subsection fonts are the base font at magstep1,
% which produces a size of 12 points.
X
\def\subsecheading #1#2#3#4{\subsecheadingi {#2.#3.#4\enspace #1}}
\def\subsecheadingi #1{{\advance \subsecheadingskip by \parskip %
\subsecheadingbreak}%
{\subsecfonts \vbox{\hyphenpenalty=10000\tolerance=5000
X                     \parindent=0pt\raggedright
X                     \rm #1\hfill}}%
\ifdim \parskip<10pt \kern 10pt\kern -\parskip\fi \penalty 10000 }
X
\def\subsubsecfonts{\subsecfonts} % Maybe this should change:
X				  % Perhaps make sssec fonts scaled
X				  % magstep half
\def\subsubsecheading #1#2#3#4#5{\subsubsecheadingi {#2.#3.#4.#5\enspace #1}}
\def\subsubsecheadingi #1{{\advance \subsecheadingskip by \parskip %
\subsecheadingbreak}%
{\subsubsecfonts \vbox{\hyphenpenalty=10000\tolerance=5000
X                       \parindent=0pt\raggedright
X                       \rm #1\hfill}}%
\ifdim \parskip<10pt \kern 10pt\kern -\parskip\fi \penalty 10000}
X
X
\message{toc printing,}
X
% Finish up the main text and prepare to read what we've written
% to \contentsfile.
X
\newskip\contentsrightmargin \contentsrightmargin=1in
\def\startcontents#1{%
X   \pagealignmacro
X   \immediate\closeout \contentsfile
X   \ifnum \pageno>0
X      \pageno = -1		% Request roman numbered pages.
X   \fi
X   % Don't need to put `Contents' or `Short Contents' in the headline.
X   % It is abundantly clear what they are.
X   \unnumbchapmacro{#1}\def\thischapter{}%
X   \begingroup   		% Set up to handle contents files properly.
X      \catcode`\\=0  \catcode`\{=1  \catcode`\}=2  \catcode`\@=11
X      \raggedbottom             % Worry more about breakpoints than the bottom.
X      \advance\hsize by -\contentsrightmargin % Don't use the full line length.
}
X
X
% Normal (long) toc.
\outer\def\contents{%
X   \startcontents{Table of Contents}%
X      \input \jobname.toc
X   \endgroup
X   \vfill \eject
}
X
% And just the chapters.
\outer\def\summarycontents{%
X   \startcontents{Short Contents}%
X      %
X      \let\chapentry = \shortchapentry
X      \let\unnumbchapentry = \shortunnumberedentry
X      % We want a true roman here for the page numbers.
X      \secfonts
X      \let\rm=\shortcontrm \let\bf=\shortcontbf \let\sl=\shortcontsl
X      \rm
X      \advance\baselineskip by 1pt % Open it up a little.
X      \def\secentry ##1##2##3##4{}
X      \def\unnumbsecentry ##1##2{}
X      \def\subsecentry ##1##2##3##4##5{}
X      \def\unnumbsubsecentry ##1##2{}
X      \def\subsubsecentry ##1##2##3##4##5##6{}
X      \def\unnumbsubsubsecentry ##1##2{}
X      \input \jobname.toc
X   \endgroup
X   \vfill \eject
}
\let\shortcontents = \summarycontents
X
% These macros generate individual entries in the table of contents.
% The first argument is the chapter or section name.
% The last argument is the page number.
% The arguments in between are the chapter number, section number, ...
X
% Chapter-level things, for both the long and short contents.
\def\chapentry#1#2#3{\dochapentry{#2\labelspace#1}{#3}}
X
% See comments in \dochapentry re vbox and related settings
\def\shortchapentry#1#2#3{%
X  \tocentry{\shortchaplabel{#2}\labelspace #1}{\doshortpageno{#3}}%
}
X
% Typeset the label for a chapter or appendix for the short contents.
% The arg is, e.g. `Appendix A' for an appendix, or `3' for a chapter.
% We could simplify the code here by writing out an \appendixentry
% command in the toc file for appendices, instead of using \chapentry
% for both, but it doesn't seem worth it.
\setbox0 = \hbox{\shortcontrm Appendix }
\newdimen\shortappendixwidth \shortappendixwidth = \wd0
X
\def\shortchaplabel#1{%
X  % We typeset #1 in a box of constant width, regardless of the text of
X  % #1, so the chapter titles will come out aligned.
X  \setbox0 = \hbox{#1}%
X  \dimen0 = \ifdim\wd0 > \shortappendixwidth \shortappendixwidth \else 0pt \fi
X  %
X  % This space should be plenty, since a single number is .5em, and the
X  % widest letter (M) is 1em, at least in the Computer Modern fonts.
X  % (This space doesn't include the extra space that gets added after
X  % the label; that gets put in in \shortchapentry above.)
X  \advance\dimen0 by 1.1em
X  \hbox to \dimen0{#1\hfil}%
}
X
\def\unnumbchapentry#1#2{\dochapentry{#1}{#2}}
\def\shortunnumberedentry#1#2{\tocentry{#1}{\doshortpageno{#2}}}
X
% Sections.
\def\secentry#1#2#3#4{\dosecentry{#2.#3\labelspace#1}{#4}}
\def\unnumbsecentry#1#2{\dosecentry{#1}{#2}}
X
% Subsections.
\def\subsecentry#1#2#3#4#5{\dosubsecentry{#2.#3.#4\labelspace#1}{#5}}
\def\unnumbsubsecentry#1#2{\dosubsecentry{#1}{#2}}
X
% And subsubsections.
\def\subsubsecentry#1#2#3#4#5#6{%
X  \dosubsubsecentry{#2.#3.#4.#5\labelspace#1}{#6}}
\def\unnumbsubsubsecentry#1#2{\dosubsubsecentry{#1}{#2}}
X
X
% This parameter controls the indentation of the various levels.
\newdimen\tocindent \tocindent = 3pc
X
% Now for the actual typesetting. In all these, #1 is the text and #2 is the
% page number.
%
% If the toc has to be broken over pages, we would want to be at chapters
% if at all possible; hence the \penalty.
\def\dochapentry#1#2{%
X   \penalty-300 \vskip\baselineskip
X   \begingroup
X     \chapentryfonts
X     \tocentry{#1}{\dopageno{#2}}%
X   \endgroup
X   \nobreak\vskip .25\baselineskip
}
X
\def\dosecentry#1#2{\begingroup
X  \secentryfonts \leftskip=\tocindent
X  \tocentry{#1}{\dopageno{#2}}%
\endgroup}
X
\def\dosubsecentry#1#2{\begingroup
X  \subsecentryfonts \leftskip=2\tocindent
X  \tocentry{#1}{\dopageno{#2}}%
\endgroup}
X
\def\dosubsubsecentry#1#2{\begingroup
X  \subsubsecentryfonts \leftskip=3\tocindent
X  \tocentry{#1}{\dopageno{#2}}%
\endgroup}
X
% Final typesetting of a toc entry; we use the same \entry macro as for
% the index entries, but we want to suppress hyphenation here.  (We
% can't do that in the \entry macro, since index entries might consist
% of hyphenated-identifiers-that-do-not-fit-on-a-line-and-nothing-else.)
%
\def\tocentry#1#2{\begingroup
X  \hyphenpenalty = 10000
X  \entry{#1}{#2}%
\endgroup}
X
% Space between chapter (or whatever) number and the title.
\def\labelspace{\hskip1em \relax}
X
\def\dopageno#1{{\rm #1}}
\def\doshortpageno#1{{\rm #1}}
X
\def\chapentryfonts{\secfonts \rm}
\def\secentryfonts{\textfonts}
\let\subsecentryfonts = \textfonts
\let\subsubsecentryfonts = \textfonts
X
X
\message{environments,}
X
% Since these characters are used in examples, it should be an even number of
% \tt widths. Each \tt character is 1en, so two makes it 1em.
% Furthermore, these definitions must come after we define our fonts.
\newbox\dblarrowbox    \newbox\longdblarrowbox
\newbox\pushcharbox    \newbox\bullbox
\newbox\equivbox       \newbox\errorbox
X
\let\ptexequiv = \equiv
X
%{\tentt
%\global\setbox\dblarrowbox = \hbox to 1em{\hfil$\Rightarrow$\hfil}
%\global\setbox\longdblarrowbox = \hbox to 1em{\hfil$\mapsto$\hfil}
%\global\setbox\pushcharbox = \hbox to 1em{\hfil$\dashv$\hfil}
%\global\setbox\equivbox = \hbox to 1em{\hfil$\ptexequiv$\hfil}
% Adapted from the manmac format (p.420 of TeXbook)
%\global\setbox\bullbox = \hbox to 1em{\kern.15em\vrule height .75ex width .85ex
%                                      depth .1ex\hfil}
%}
X
\def\point{$\star$}
X
\def\result{\leavevmode\raise.15ex\hbox to 1em{\hfil$\Rightarrow$\hfil}}
\def\expansion{\leavevmode\raise.1ex\hbox to 1em{\hfil$\mapsto$\hfil}}
\def\print{\leavevmode\lower.1ex\hbox to 1em{\hfil$\dashv$\hfil}}
X
\def\equiv{\leavevmode\lower.1ex\hbox to 1em{\hfil$\ptexequiv$\hfil}}
X
% Adapted from the TeXbook's \boxit.
{\tentt \global\dimen0 = 3em}% Width of the box.
\dimen2 = .55pt % Thickness of rules
% The text. (`r' is open on the right, `e' somewhat less so on the left.)
\setbox0 = \hbox{\kern-.75pt \tensf error\kern-1.5pt}
X
\global\setbox\errorbox=\hbox to \dimen0{\hfil
X   \hsize = \dimen0 \advance\hsize by -5.8pt % Space to left+right.
X   \advance\hsize by -2\dimen2 % Rules.
X   \vbox{
X      \hrule height\dimen2
X      \hbox{\vrule width\dimen2 \kern3pt          % Space to left of text.
X         \vtop{\kern2.4pt \box0 \kern2.4pt}% Space above/below.
X         \kern3pt\vrule width\dimen2}% Space to right.
X      \hrule height\dimen2}
X    \hfil}
X
% The @error{} command.
\def\error{\leavevmode\lower.7ex\copy\errorbox}
X
% @tex ... @end tex    escapes into raw Tex temporarily.
% One exception: @ is still an escape character, so that @end tex works.
% But \@ or @@ will get a plain tex @ character.
X
\def\tex{\begingroup
\catcode `\\=0 \catcode `\{=1 \catcode `\}=2
\catcode `\$=3 \catcode `\&=4 \catcode `\#=6
\catcode `\^=7 \catcode `\_=8 \catcode `\~=13 \let~=\tie
\catcode `\%=14
\catcode 43=12
\catcode`\"=12
\catcode`\==12
\catcode`\|=12
\catcode`\<=12
\catcode`\>=12
\escapechar=`\\
%
\let\{=\ptexlbrace
\let\}=\ptexrbrace
\let\.=\ptexdot
\let\*=\ptexstar
\let\dots=\ptexdots
\def\@{@}%
\let\bullet=\ptexbullet
\let\b=\ptexb \let\c=\ptexc \let\i=\ptexi \let\t=\ptext \let\l=\ptexl
\let\L=\ptexL
%
\let\Etex=\endgroup}
X
% Define @lisp ... @endlisp.
% @lisp does a \begingroup so it can rebind things,
% including the definition of @endlisp (which normally is erroneous).
X
% Amount to narrow the margins by for @lisp.
\newskip\lispnarrowing \lispnarrowing=0.4in
X
% This is the definition that ^^M gets inside @lisp, @example, and other
% such environments.  \null is better than a space, since it doesn't
% have any width.
\def\lisppar{\null\endgraf}
X
% Make each space character in the input produce a normal interword
% space in the output.  Don't allow a line break at this space, as this
% is used only in environments like @example, where each line of input
% should produce a line of output anyway.
%
{\obeyspaces %
\gdef\sepspaces{\obeyspaces\let =\tie}}
X
% Define \obeyedspace to be our active space, whatever it is.  This is
% for use in \parsearg.
{\sepspaces %
\global\let\obeyedspace= }
X
% This space is always present above and below environments.
\newskip\envskipamount \envskipamount = 0pt
X
% Make spacing and below environment symmetrical.  We use \parskip here
% to help in doing that, since in @example-like environments \parskip
% is reset to zero; thus the \afterenvbreak inserts no space -- but the
% start of the next paragraph will insert \parskip
%
\def\aboveenvbreak{{\advance\envskipamount by \parskip
\endgraf \ifdim\lastskip<\envskipamount
\removelastskip \penalty-50 \vskip\envskipamount \fi}}
X
\let\afterenvbreak = \aboveenvbreak
X
% \nonarrowing is a flag.  If "set", @lisp etc don't narrow margins.
\let\nonarrowing=\relax
X
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \cartouche: draw rectangle w/rounded corners around argument
\font\circle=lcircle10
\newdimen\circthick
\newdimen\cartouter\newdimen\cartinner
\newskip\normbskip\newskip\normpskip\newskip\normlskip
\circthick=\fontdimen8\circle
%
\def\ctl{{\circle\char'013\hskip -6pt}}% 6pt from pl file: 1/2charwidth
\def\ctr{{\hskip 6pt\circle\char'010}}
\def\cbl{{\circle\char'012\hskip -6pt}}
\def\cbr{{\hskip 6pt\circle\char'011}}
\def\carttop{\hbox to \cartouter{\hskip\lskip
X	\ctl\leaders\hrule height\circthick\hfil\ctr
X	\hskip\rskip}}
\def\cartbot{\hbox to \cartouter{\hskip\lskip
X	\cbl\leaders\hrule height\circthick\hfil\cbr
X	\hskip\rskip}}
%
\newskip\lskip\newskip\rskip
X
\long\def\cartouche{%
\begingroup
X	\lskip=\leftskip \rskip=\rightskip
X	\leftskip=0pt\rightskip=0pt %we want these *outside*.
X	\cartinner=\hsize \advance\cartinner by-\lskip
X		 	  \advance\cartinner by-\rskip
X	\cartouter=\hsize
X	\advance\cartouter by 18pt % allow for 3pt kerns on either
%				     side, and for 6pt waste from
%				     each corner char
X	\normbskip=\baselineskip \normpskip=\parskip \normlskip=\lineskip
X	% Flag to tell @lisp, etc., not to narrow margin.
X	\let\nonarrowing=\comment
X	\vbox\bgroup
X		\baselineskip=0pt\parskip=0pt\lineskip=0pt
X		\carttop
X		\hbox\bgroup
X			\hskip\lskip
X			\vrule\kern3pt
X			\vbox\bgroup
X				\hsize=\cartinner
X				\kern3pt
X				\begingroup
X					\baselineskip=\normbskip
X					\lineskip=\normlskip
X					\parskip=\normpskip
X					\vskip -\parskip
\def\Ecartouche{%
X				\endgroup
X				\kern3pt
X			\egroup
X			\kern3pt\vrule
X			\hskip\rskip
X		\egroup
X		\cartbot
X	\egroup
\endgroup
}}
X
X
% This macro is called at the beginning of all the @example variants,
% inside a group.
\def\nonfillstart{%
X  \aboveenvbreak
X  \inENV % This group ends at the end of the body
X  \hfuzz = 12pt % Don't be fussy
X  \sepspaces % Make spaces be word-separators rather than space tokens.
X  \singlespace
X  \let\par = \lisppar % don't ignore blank lines
X  \obeylines % each line of input is a line of output
X  \parskip = 0pt
X  \parindent = 0pt
X  \emergencystretch = 0pt % don't try to avoid overfull boxes
X  % @cartouche defines \nonarrowing to inhibit narrowing
X  % at next level down.
X  \ifx\nonarrowing\relax
X    \advance \leftskip by \lispnarrowing
X    \exdentamount=\lispnarrowing
X    \let\exdent=\nofillexdent
X    \let\nonarrowing=\relax
X  \fi
}
X
% To ending an @example-like environment, we first end the paragraph
% (via \afterenvbreak's vertical glue), and then the group.  That way we
% keep the zero \parskip that the environments set -- \parskip glue
% will be inserted at the beginning of the next paragraph in the
% document, after the environment.
%
\def\nonfillfinish{\afterenvbreak\endgroup}%
X
% This macro is
\def\lisp{\begingroup
X  \nonfillstart
X  \let\Elisp = \nonfillfinish
X  \tt
X  \rawbackslash % have \ input char produce \ char from current font
X  \gobble
}
X
% Define the \E... control sequence only if we are inside the
% environment, so the error checking in \end will work.
%
% We must call \lisp last in the definition, since it reads the
% return following the @example (or whatever) command.
%
\def\example{\begingroup \def\Eexample{\nonfillfinish\endgroup}\lisp}
\def\smallexample{\begingroup \def\Esmallexample{\nonfillfinish\endgroup}\lisp}
\def\smalllisp{\begingroup \def\Esmalllisp{\nonfillfinish\endgroup}\lisp}
X
% @smallexample and @smalllisp.  This is not used unless the @smallbook
% command is given.  Originally contributed by Pavel@xerox.
%
\def\smalllispx{\begingroup
X  \nonfillstart
X  \let\Esmalllisp = \nonfillfinish
X  \let\Esmallexample = \nonfillfinish
X  %
X  % Smaller interline space and fonts for small examples.
X  \baselineskip 10pt
X  \indexfonts \tt
X  \rawbackslash % output the \ character from the current font
X  \gobble
}
X
% This is @display; same as @lisp except use roman font.
%
\def\display{\begingroup
X  \nonfillstart
X  \let\Edisplay = \nonfillfinish
X  \gobble
}
X
% This is @format; same as @display except don't narrow margins.
%
\def\format{\begingroup
X  \let\nonarrowing = t
X  \nonfillstart
X  \let\Eformat = \nonfillfinish
X  \gobble
}
X
% @flushleft (same as @format) and @flushright.
%
\def\flushleft{\begingroup
X  \let\nonarrowing = t
X  \nonfillstart
X  \let\Eflushleft = \nonfillfinish
X  \gobble
}
\def\flushright{\begingroup
X  \let\nonarrowing = t
X  \nonfillstart
X  \let\Eflushright = \nonfillfinish
X  \advance\leftskip by 0pt plus 1fill
X  \gobble}
X
% @quotation does normal linebreaking and narrows the margins.
%
\def\quotation{%
\begingroup\inENV %This group ends at the end of the @quotation body
{\parskip=0pt  % because we will skip by \parskip too, later
\aboveenvbreak}%
\singlespace
\parindent=0pt
\let\Equotation = \nonfillfinish
% @cartouche defines \nonarrowing to inhibit narrowing
% at next level down.
\ifx\nonarrowing\relax
\advance \leftskip by \lispnarrowing
\advance \rightskip by \lispnarrowing
\exdentamount=\lispnarrowing
\let\nonarrowing=\relax
\fi}
X
\message{defuns,}
% Define formatter for defuns
% First, allow user to change definition object font (\df) internally
\def\setdeffont #1 {\csname DEF#1\endcsname}
X
\newskip\defbodyindent \defbodyindent=.4in
\newskip\defargsindent \defargsindent=50pt
\newskip\deftypemargin \deftypemargin=12pt
\newskip\deflastargmargin \deflastargmargin=18pt
X
\newcount\parencount
% define \functionparens, which makes ( and ) and & do special things.
% \functionparens affects the group it is contained in.
\def\activeparens{%
\catcode`\(=\active \catcode`\)=\active \catcode`\&=\active
\catcode`\[=\active \catcode`\]=\active}
X
% Make control sequences which act like normal parenthesis chars.
\let\lparen = ( \let\rparen = )
X
{\activeparens % Now, smart parens don't turn on until &foo (see \amprm)
X
% Be sure that we always have a definition for `(', etc.  For example,
% if the fn name has parens in it, \boldbrax will not be in effect yet,
% so TeX would otherwise complain about undefined control sequence.
\global\let(=\lparen \global\let)=\rparen
\global\let[=\lbrack \global\let]=\rbrack
X
\gdef\functionparens{\boldbrax\let&=\amprm\parencount=0 }
\gdef\boldbrax{\let(=\opnr\let)=\clnr\let[=\lbrb\let]=\rbrb}
X
% Definitions of (, ) and & used in args for functions.
% This is the definition of ( outside of all parentheses.
\gdef\oprm#1 {{\rm\char`\(}#1 \bf \let(=\opnested %
\global\advance\parencount by 1 }
%
% This is the definition of ( when already inside a level of parens.
\gdef\opnested{\char`\(\global\advance\parencount by 1 }
%
\gdef\clrm{% Print a paren in roman if it is taking us back to depth of 0.
% also in that case restore the outer-level definition of (.
\ifnum \parencount=1 {\rm \char `\)}\sl \let(=\oprm \else \char `\) \fi
\global\advance \parencount by -1 }
% If we encounter &foo, then turn on ()-hacking afterwards
\gdef\amprm#1 {{\rm\&#1}\let(=\oprm \let)=\clrm\ }
%
\gdef\normalparens{\boldbrax\let&=\ampnr}
} % End of definition inside \activeparens
%% These parens (in \boldbrax) actually are a little bolder than the
%% contained text.  This is especially needed for [ and ]
\def\opnr{{\sf\char`\(}} \def\clnr{{\sf\char`\)}} \def\ampnr{\&}
\def\lbrb{{\bf\char`\[}} \def\rbrb{{\bf\char`\]}}
X
% First, defname, which formats the header line itself.
% #1 should be the function name.
% #2 should be the type of definition, such as "Function".
X
\def\defname #1#2{%
% Get the values of \leftskip and \rightskip as they were
% outside the @def...
\dimen2=\leftskip
\advance\dimen2 by -\defbodyindent
\dimen3=\rightskip
\advance\dimen3 by -\defbodyindent
\noindent        %
\setbox0=\hbox{\hskip \deflastargmargin{\rm #2}\hskip \deftypemargin}%
\dimen0=\hsize \advance \dimen0 by -\wd0 % compute size for first line
\dimen1=\hsize \advance \dimen1 by -\defargsindent %size for continuations
\parshape 2 0in \dimen0 \defargsindent \dimen1     %
% Now output arg 2 ("Function" or some such)
% ending at \deftypemargin from the right margin,
% but stuck inside a box of width 0 so it does not interfere with linebreaking
{% Adjust \hsize to exclude the ambient margins,
% so that \rightline will obey them.
\advance \hsize by -\dimen2 \advance \hsize by -\dimen3
\rlap{\rightline{{\rm #2}\hskip \deftypemargin}}}%
% Make all lines underfull and no complaints:
\tolerance=10000 \hbadness=10000
\advance\leftskip by -\defbodyindent
\exdentamount=\defbodyindent
{\df #1}\enskip        % Generate function name
}
X
% Actually process the body of a definition
% #1 should be the terminating control sequence, such as \Edefun.
% #2 should be the "another name" control sequence, such as \defunx.
% #3 should be the control sequence that actually processes the header,
%    such as \defunheader.
X
\def\defparsebody #1#2#3{\begingroup\inENV% Environment for definitionbody
\medbreak %
% Define the end token that this defining construct specifies
% so that it will exit this group.
\def#1{\endgraf\endgroup\medbreak}%
\def#2{\begingroup\obeylines\activeparens\spacesplit#3}%
\parindent=0in
\advance\leftskip by \defbodyindent \advance \rightskip by \defbodyindent
\exdentamount=\defbodyindent
\begingroup %
\catcode 61=\active %
\obeylines\activeparens\spacesplit#3}
X
\def\defmethparsebody #1#2#3#4 {\begingroup\inENV %
\medbreak %
% Define the end token that this defining construct specifies
% so that it will exit this group.
\def#1{\endgraf\endgroup\medbreak}%
\def#2##1 {\begingroup\obeylines\activeparens\spacesplit{#3{##1}}}%
\parindent=0in
\advance\leftskip by \defbodyindent \advance \rightskip by \defbodyindent
\exdentamount=\defbodyindent
\begingroup\obeylines\activeparens\spacesplit{#3{#4}}}
X
\def\defopparsebody #1#2#3#4#5 {\begingroup\inENV %
\medbreak %
% Define the end token that this defining construct specifies
% so that it will exit this group.
\def#1{\endgraf\endgroup\medbreak}%
\def#2##1 ##2 {\def#4{##1}%
\begingroup\obeylines\activeparens\spacesplit{#3{##2}}}%
\parindent=0in
\advance\leftskip by \defbodyindent \advance \rightskip by \defbodyindent
\exdentamount=\defbodyindent
\begingroup\obeylines\activeparens\spacesplit{#3{#5}}}
X
% These parsing functions are similar to the preceding ones
% except that they do not make parens into active characters.
% These are used for "variables" since they have no arguments.
X
\def\defvarparsebody #1#2#3{\begingroup\inENV% Environment for definitionbody
SHAR_EOF
true || echo 'restore of bcs-2.0/doc/texinfo.tex failed'
fi
echo 'End of bcs-2.0 part 8'
echo 'File bcs-2.0/doc/texinfo.tex is continued in part 9'
echo 9 > _shar_seq_.tmp
exit 0
