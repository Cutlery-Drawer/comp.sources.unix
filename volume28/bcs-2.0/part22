Newsgroups: comp.sources.unix
From: ejb@ERA.COM (Jay Berkenbilt)
Subject: v28i023: bcs-2.0 - A Baseline Configuration System, Part22/25
References: <1.764985670.1461@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: ejb@ERA.COM (Jay Berkenbilt)
Posting-Number: Volume 28, Issue 23
Archive-Name: bcs-2.0/part22

#!/bin/sh
# this is bcs.22 (part 22 of bcs-2.0)
# do not concatenate these parts, unpack them in order with /bin/sh
# file bcs-2.0/unsupported/sample-baseline/RCS/Makefile,v continued
#
if test ! -r _shar_seq_.tmp; then
	echo 'Please unpack part 1 first!'
	exit 1
fi
(read Scheck
 if test "$Scheck" != 22; then
	echo Please unpack part "$Scheck" next!
	exit 1
 else
	exit 0
 fi
) < _shar_seq_.tmp || exit 1
if test ! -f _shar_wnt_.tmp; then
	echo 'x - still skipping bcs-2.0/unsupported/sample-baseline/RCS/Makefile,v'
else
echo 'x - continuing file bcs-2.0/unsupported/sample-baseline/RCS/Makefile,v'
sed 's/^X//' << 'SHAR_EOF' >> 'bcs-2.0/unsupported/sample-baseline/RCS/Makefile,v' &&
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.1
date	94.01.09.22.28.44;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@LIB_SUBDIRS = library
BIN_SUBDIRS = prog
X
include $(MK)/toplevel.mk
@
SHAR_EOF
echo 'File bcs-2.0/unsupported/sample-baseline/RCS/Makefile,v is complete' &&
chmod 0444 bcs-2.0/unsupported/sample-baseline/RCS/Makefile,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/RCS/Makefile,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/RCS/Makefile,v'`"
test 242 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/RCS/Makefile,v: original size 242, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/RCS/README,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/RCS/README,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/RCS/README,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/RCS/README,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/RCS/README,v' &&
head	1.3;
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.3
date	94.01.10.15.59.11;	author ejb;	state Exp;
branches;
next	1.2;
X
1.2
date	94.01.10.14.42.18;	author ejb;	state Exp;
branches;
next	1.1;
X
1.1
date	94.01.09.22.42.40;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.3
log
@make -> gnu make
@
text
@This sample baseline is not thoroughly tested, and it is not
guaranteed to work on your system.  If it does, please let me
know.  If it doesn't and you can fix it, I'll take patches.  If
it doesn't work and you can't fix it, let me know that too so I
can see what I can do.
X
This baseline is based on an actual baseline that is in use at
our company.  The makefiles and scripts are slightly simplified
in some cases.  Feel free to use any or all of this setup.  You
will probably have to modify parts of it for your own projects.
X
Here are things to try in this baseline:
X
0.  Make sure the bcs commands are in your path.
1.  source setup.  You must do this so that your environment and
X    path are setup to try the sample baseline.  Do this from the
X    sample-baseline directory; it uses $cwd.
2.  Run gnu make.  This will build the sample baseline.
3.  cd staging
4.  sync_staging .
5.  stage prog
6.  Run gnu make.  This will just build the program in prog without
X    building the library.  It will link against the library in
X    the baseline.
7.  Modify files and rebuild.  Read make.doc in the make
X    directory.  Experiment.  Have fun. :-)
X
You can do some of these steps out of order.  Although you will
get some non-fatal errors, you shouldn't worry about them.  The
process of making in the baseline the first time sets some
things up that wouldn't appear if you did the sync_staging step
first.
X
Finally, performing the above exercises will likely be useful to
you only if you have read the earlier sections (through use) of
the BCS users guide.  This is not designed to be a tutorial, but
only an example of how you might set up a baseline.  Although
this sample baseline is very small and contains only toy files,
this arrangement, or one slightly modified from it, could be
used to house a baseline consisting of thousands of files.
@
X
X
1.2
log
@minor updates
@
text
@d18 1
a18 1
2.  make.  This will build the sample baseline.
d22 1
a22 1
6.  make.  This will just build the program in prog without
@
X
X
1.1
log
@Initial revision
@
text
@d27 14
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/RCS/README,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/RCS/README,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/RCS/README,v'`"
test 2381 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/RCS/README,v: original size 2381, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/RCS/setup,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/RCS/setup,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/RCS/setup,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/RCS/setup,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/RCS/setup,v' &&
head	1.2;
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.2
date	94.01.10.14.56.47;	author ejb;	state Exp;
branches;
next	1.1;
X
1.1
date	94.01.09.22.38.39;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.2
log
@make it safe to run more than once; put tools first in path
instead of last
@
text
@#
# Source this file from csh
#
X
setenv BASELINE $cwd
setenv STAGING $cwd/staging
mkdir $STAGING
echo .. >! $STAGING/.baseline_path
X
# In a real system, $BASELINE below would be substituted with
# $STAGING so people could maintain the makefiles and tools with
# BCS. 
set path = ($BASELINE/tools $path)
setenv MK $BASELINE/make
@
X
X
1.1
log
@Initial revision
@
text
@d8 1
a8 1
echo .. > $STAGING/.baseline_path
d13 1
a13 1
set path = ($path $BASELINE/tools)
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/RCS/setup,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/RCS/setup,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/RCS/setup,v'`"
test 762 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/RCS/setup,v: original size 762, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/README ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/README' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/README (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/README (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/README' &&
This sample baseline is not thoroughly tested, and it is not
guaranteed to work on your system.  If it does, please let me
know.  If it doesn't and you can fix it, I'll take patches.  If
it doesn't work and you can't fix it, let me know that too so I
can see what I can do.
X
This baseline is based on an actual baseline that is in use at
our company.  The makefiles and scripts are slightly simplified
in some cases.  Feel free to use any or all of this setup.  You
will probably have to modify parts of it for your own projects.
X
Here are things to try in this baseline:
X
0.  Make sure the bcs commands are in your path.
1.  source setup.  You must do this so that your environment and
X    path are setup to try the sample baseline.  Do this from the
X    sample-baseline directory; it uses $cwd.
2.  Run gnu make.  This will build the sample baseline.
3.  cd staging
4.  sync_staging .
5.  stage prog
6.  Run gnu make.  This will just build the program in prog without
X    building the library.  It will link against the library in
X    the baseline.
7.  Modify files and rebuild.  Read make.doc in the make
X    directory.  Experiment.  Have fun. :-)
X
You can do some of these steps out of order.  Although you will
get some non-fatal errors, you shouldn't worry about them.  The
process of making in the baseline the first time sets some
things up that wouldn't appear if you did the sync_staging step
first.
X
Finally, performing the above exercises will likely be useful to
you only if you have read the earlier sections (through use) of
the BCS users guide.  This is not designed to be a tutorial, but
only an example of how you might set up a baseline.  Although
this sample baseline is very small and contains only toy files,
this arrangement, or one slightly modified from it, could be
used to house a baseline consisting of thousands of files.
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/README ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/README failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/README'`"
test 1851 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/README: original size 1851, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/library/Makefile ==============
if test ! -d 'bcs-2.0/unsupported/sample-baseline/library'; then
    echo 'x - creating directory bcs-2.0/unsupported/sample-baseline/library'
    mkdir 'bcs-2.0/unsupported/sample-baseline/library'
fi
if test -f 'bcs-2.0/unsupported/sample-baseline/library/Makefile' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/library/Makefile (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/library/Makefile (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/library/Makefile' &&
CSRCS = util.c
X
HDRS = $(CSRCS:%.c=%.h)
X
TARGET=libutil.a
X
include $(MK)/library.mk
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/library/Makefile ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/library/Makefile failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/library/Makefile'`"
test 84 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/library/Makefile: original size 84, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/library/RCS/Makefile,v ==============
if test ! -d 'bcs-2.0/unsupported/sample-baseline/library/RCS'; then
    echo 'x - creating directory bcs-2.0/unsupported/sample-baseline/library/RCS'
    mkdir 'bcs-2.0/unsupported/sample-baseline/library/RCS'
fi
if test -f 'bcs-2.0/unsupported/sample-baseline/library/RCS/Makefile,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/library/RCS/Makefile,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/library/RCS/Makefile,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/library/RCS/Makefile,v' &&
head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.1
date	94.01.09.21.56.51;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@CSRCS = util.c
X
HDRS = $(CSRCS:%.c=%.h)
X
TARGET=libutil.a
X
include $(MK)/library.mk
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/library/RCS/Makefile,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/library/RCS/Makefile,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/library/RCS/Makefile,v'`"
test 258 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/library/RCS/Makefile,v: original size 258, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/library/RCS/util.c,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/library/RCS/util.c,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/library/RCS/util.c,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/library/RCS/util.c,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/library/RCS/util.c,v' &&
head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;
X
X
1.1
date	94.01.09.22.28.12;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@#include <stdio.h>
#include "util.h"
X
int util(int a)
{
X    int result = a * a;
X    printf("This wonderful utility says %d * %d = %d.\n", a, a, result);
X    return result;
}
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/library/RCS/util.c,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/library/RCS/util.c,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/library/RCS/util.c,v'`"
test 349 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/library/RCS/util.c,v: original size 349, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/library/RCS/util.h,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/library/RCS/util.h,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/library/RCS/util.h,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/library/RCS/util.h,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/library/RCS/util.h,v' &&
head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;
X
X
1.1
date	94.01.09.22.16.06;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@#ifndef HDR__UTIL_H
#define HDR__UTIL_H
X
int util(int);
X
#endif /* HDR__UTIL_H */
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/library/RCS/util.h,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/library/RCS/util.h,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/library/RCS/util.h,v'`"
test 257 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/library/RCS/util.h,v: original size 257, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/library/util.c ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/library/util.c' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/library/util.c (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/library/util.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/library/util.c' &&
#include <stdio.h>
#include "util.h"
X
int util(int a)
{
X    int result = a * a;
X    printf("This wonderful utility says %d * %d = %d.\n", a, a, result);
X    return result;
}
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/library/util.c ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/library/util.c failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/library/util.c'`"
test 174 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/library/util.c: original size 174, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/library/util.h ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/library/util.h' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/library/util.h (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/library/util.h (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/library/util.h' &&
#ifndef HDR__UTIL_H
#define HDR__UTIL_H
X
int util(int);
X
#endif /* HDR__UTIL_H */
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/library/util.h ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/library/util.h failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/library/util.h'`"
test 82 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/library/util.h: original size 82, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/IRIX.mki ==============
if test ! -d 'bcs-2.0/unsupported/sample-baseline/make'; then
    echo 'x - creating directory bcs-2.0/unsupported/sample-baseline/make'
    mkdir 'bcs-2.0/unsupported/sample-baseline/make'
fi
if test -f 'bcs-2.0/unsupported/sample-baseline/make/IRIX.mki' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/IRIX.mki (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/IRIX.mki (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/IRIX.mki' &&
#
# $Id: IRIX.mki,v 1.1 1994/01/10 14:53:40 ejb Exp $
# $Source: /home/ejb/source/bcs/src/unsupported/sample-baseline/make/RCS/IRIX.mki,v $
# $Author: ejb $
#
# This makefile is used to define architecture-specific parameters.
# It must define RANLIB and export it since the installsw script uses
# this variable.  Any of the architecture-specific variables as
# discussed in the rules.mki files can be overridden here.
#
X
AR_ARGS = rvl
AR = ar
X
CC = gcc
CXX = g++
X
CCPP = $(CC)
CXXPP = $(CXX)
X
export RANLIB = true
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/IRIX.mki ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/IRIX.mki failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/IRIX.mki'`"
test 516 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/IRIX.mki: original size 516, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/Linux.mki ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/Linux.mki' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/Linux.mki (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/Linux.mki (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/Linux.mki' &&
#
# $Id: Linux.mki,v 1.1 1994/01/09 22:03:11 qjb Exp $
# $Source: /home/qjb/source/bcs/src/unsupported/sample-baseline/make/RCS/Linux.mki,v $
# $Author: qjb $
#
# This makefile is used to define architecture-specific parameters.
# It must define RANLIB and export it since the installsw script uses
# this variable.  Any of the architecture-specific variables as
# discussed in the rules.mki files can be overridden here.
#
X
AR_ARGS = rvl
AR = ar
X
CC = gcc
CXX = g++
X
CCPP = $(CC)
CXXPP = $(CXX)
X
export RANLIB = ranlib
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/Linux.mki ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/Linux.mki failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/Linux.mki'`"
test 520 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/Linux.mki: original size 520, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/RCS/IRIX.mki,v ==============
if test ! -d 'bcs-2.0/unsupported/sample-baseline/make/RCS'; then
    echo 'x - creating directory bcs-2.0/unsupported/sample-baseline/make/RCS'
    mkdir 'bcs-2.0/unsupported/sample-baseline/make/RCS'
fi
if test -f 'bcs-2.0/unsupported/sample-baseline/make/RCS/IRIX.mki,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/RCS/IRIX.mki,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/RCS/IRIX.mki,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/RCS/IRIX.mki,v' &&
head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.1
date	94.01.10.14.53.40;	author ejb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@#
# $Id: Linux.mki,v 1.1 1994/01/09 22:03:11 qjb Exp $
# $Source: /home/qjb/source/bcs/src/unsupported/sample-baseline/make/RCS/Linux.mki,v $
# $Author: qjb $
#
# This makefile is used to define architecture-specific parameters.
# It must define RANLIB and export it since the installsw script uses
# this variable.  Any of the architecture-specific variables as
# discussed in the rules.mki files can be overridden here.
#
X
AR_ARGS = rvl
AR = ar
X
CC = gcc
CXX = g++
X
CCPP = $(CC)
CXXPP = $(CXX)
X
export RANLIB = true
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/RCS/IRIX.mki,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/RCS/IRIX.mki,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/RCS/IRIX.mki,v'`"
test 692 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/RCS/IRIX.mki,v: original size 692, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/RCS/Linux.mki,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/RCS/Linux.mki,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/RCS/Linux.mki,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/RCS/Linux.mki,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/RCS/Linux.mki,v' &&
head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.1
date	94.01.09.22.03.11;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@#
# $Id: sparc.mk,v 1.6 1994/01/03 16:41:03 ejb Exp $
# $Source: /projects/sasp/tools/make/RCS/sparc.mk,v $
# $Author: ejb $
#
# This makefile is used to define architecture-specific parameters.
# It must define RANLIB and export it since the installsw script uses
# this variable.  Any of the architecture-specific variables as
# discussed in the rules.mki files can be overridden here.
#
X
AR_ARGS = rvl
AR = ar
X
CC = gcc
CXX = g++
X
CCPP = $(CC)
CXXPP = $(CXX)
X
export RANLIB = ranlib
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/RCS/Linux.mki,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/RCS/Linux.mki,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/RCS/Linux.mki,v'`"
test 660 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/RCS/Linux.mki,v: original size 660, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/RCS/ccprog.mk,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/RCS/ccprog.mk,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/RCS/ccprog.mk,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/RCS/ccprog.mk,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/RCS/ccprog.mk,v' &&
head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.1
date	94.01.09.21.54.52;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@#
# $Id: ccprog.mk,v 1.3 1993/07/28 20:56:33 ejb Exp $
# $Source: /projects/sasp/tools/make/RCS/ccprog.mk,v $
# $Author: ejb $
#
# This makefile template is used for programs whose main routine is
# defined in C++ code.  See prog.mk for more information.
#
X
include $(MK)/prog.mki
X
#
# Build the actual target using the C++ compiler.  This rule uses
# gnu make's extension for supporting library dependencies with the
# -llib syntax.
#
X
$(REALTARGET):: $(OBJS) $(LIBS)
X	$(build_target:_COMPILE_=$(CXX))
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/RCS/ccprog.mk,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/RCS/ccprog.mk,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/RCS/ccprog.mk,v'`"
test 677 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/RCS/ccprog.mk,v: original size 677, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/RCS/cprog.mk,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/RCS/cprog.mk,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/RCS/cprog.mk,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/RCS/cprog.mk,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/RCS/cprog.mk,v' &&
head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.1
date	94.01.09.21.54.52;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@#
# $Id: cprog.mk,v 1.3 1993/07/28 20:56:33 ejb Exp $
# $Source: /projects/sasp/tools/make/RCS/cprog.mk,v $
# $Author: ejb $
#
# This makefile template is used for programs whose main routine is
# defined in C code.  See prog.mk for more information.
#
X
include $(MK)/prog.mki
X
#
# Build the actual target using the C compiler.  This rule uses
# gnu make's extension for supporting library dependencies with the
# -llib syntax.
#
X
$(REALTARGET):: $(OBJS) $(LIBS)
X	$(build_target:_COMPILE_=$(CC))
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/RCS/cprog.mk,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/RCS/cprog.mk,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/RCS/cprog.mk,v'`"
test 670 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/RCS/cprog.mk,v: original size 670, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/RCS/global.mki,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/RCS/global.mki,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/RCS/global.mki,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/RCS/global.mki,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/RCS/global.mki,v' &&
head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.1
date	94.01.09.22.00.27;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@#
# $Id: global.mk,v 1.4 1993/07/28 20:56:33 ejb Exp $
# $Source: /projects/sasp/tools/make/RCS/global.mk,v $
# $Author: ejb $
#
# This makefile template is included by all other rules files.  It
# defines the default target of all, the global clean rule, and
# takes care of defining other global parameters for all makes.
#
X
include $(MK)/local.mki
X
# Make sure IN_STAGING is exported and initialized.  It is used
# by some scripts invoked by these makefiles.
ifeq ($(MAKELEVEL), 0) 
X  export IN_STAGING = 0
endif
X
export TOP
X
# Initialize IN_STAGING and TOP.  Use := so that the expensive shell
# commands are run only once.  Do this only for MAKELEVEL 0 and export.
# That way, child makes don't have to recompute this information.
ifeq ($(BCS),1)
X  ifeq ($(MAKELEVEL), 0) 
X    IN_STAGING := $(shell in_staging_area)
X  endif
X  ifeq ($(IN_STAGING), 1)
X    TOP := $(STAGING)
X    IN_STAGING = 1
X  else
X    TOP := $(BASELINE)
X  endif
else
X  # Use DEFTOP only if BCS is not defined.
X  TOP := $(DEFTOP)
endif
X
# Define TOOLS to where the scripts make depends upon are located.
# This must be defined after the computation of TOP, so any commands
# needed for that must be in the path.
TOOLS := $(TOP)/tools
X
# Make sure ARCH is exported since the scripts make uses use this too.
ifeq ($(MAKELEVEL), 0) 
X  export ARCH := $(shell $(TOOLS)/archtype)
endif
X
include $(MK)/$(ARCH).mki
X
default: all
X
# Make stage should be a no-op when not otherwise defined.
stage::
X
clean::
X	-$(RM) *~ *% core a.out
X
print_dirs::
X	@@pwd
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/RCS/global.mki,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/RCS/global.mki,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/RCS/global.mki,v'`"
test 1689 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/RCS/global.mki,v: original size 1689, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/RCS/library.mk,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/RCS/library.mk,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/RCS/library.mk,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/RCS/library.mk,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/RCS/library.mk,v' &&
head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.1
date	94.01.09.22.12.30;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@#
# $Id: library.mk,v 1.3 1993/07/28 20:56:33 ejb Exp $
# $Source: /projects/sasp/tools/make/RCS/library.mk,v $
# $Author: ejb $
#
# This makefile template should be included by makefiles in
# library directories.  The including makefile may define the
# HDRS variable to a list of header files to get installed.
# See also the rules.mk file for descriptions of meanings of
# other variables.
#
X
include $(MK)/rules.mki
X
# To build the library, just set up the dependencies with the
# special gnu make syntax for archive objects.	Ranlib is run at
# install time since people don't link against uninstalled
# libraries.
$(REALTARGET):: $(OBJS:%=$(REALTARGET)(%))
X
install:: $(REALTARGET) install_hdrs
X	$(TOOLS)/installsw lib $(REALTARGET)
X
install_hdrs::
X	$(TOOLS)/installsw inc $(HDRS)
X
# Stage destination directories for install only when both
# running BCS and in staging area
ifeq ($(BCS)$(IN_STAGING), 11)
define stage_destdir
X	stage $(TOP)/lib/$(ARCH)
X	stage $(TOP)/include
endef
endif
X
uninstall::
X	$(stage_destdir)
X	-$(RM) $(TOP)/lib/$(ARCH)/$(TARGET)
X	-$(RM) $(foreach hdr, $(HDRS), $(TOP)/include/$(hdr)) || true
X
print_libs::
X	@@pwd
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/RCS/library.mk,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/RCS/library.mk,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/RCS/library.mk,v'`"
test 1318 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/RCS/library.mk,v: original size 1318, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/RCS/local.mki,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/RCS/local.mki,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/RCS/local.mki,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/RCS/local.mki,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/RCS/local.mki,v' &&
head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.1
date	94.01.09.22.00.16;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@#
# $Id: local.mk,v 1.4 1993/12/20 18:27:01 ejb Exp $
# $Source: /projects/sasp/tools/make/RCS/local.mk,v $
# $Author: ejb $
#
# This makefile template contains parameters local to this system.
# It can ammend or redefine any of the variables described in
# rules.mk as locally adjustable.  It must define BCS as either 1 or 0
# and DEFTOP as the default pathname of the top of the baseline if
# BCS is not being used.  (The definition is harmless but ignored if
# BCS is in use.)
#
X
BCS = 1
DEFTOP = /usr/tmp/bcs/unsupported/sample-baseline
X
DFLAGS += -g
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/RCS/local.mki,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/RCS/local.mki,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/RCS/local.mki,v'`"
test 730 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/RCS/local.mki,v: original size 730, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/RCS/lucid.mki,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/RCS/lucid.mki,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/RCS/lucid.mki,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/RCS/lucid.mki,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/RCS/lucid.mki,v' &&
head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.1
date	94.01.04.14.23.02;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@#
# $Id: lucid.mki,v 1.4 1994/01/04 14:23:22 ejb Exp $
# $Source: /projects/sasp/tools/make/RCS/lucid.mki,v $
# $Author: ejb $
#
# This internal makefile template defines parameters for using
# the Lucid C and C++ compilers.  It is not intended for
# inclusion by users' makefiles. 
#
X
#ENERGIZE = -Xez
# -Xf is 2.1 mode; -Xr is relaxed
CXXMODE = -Xf -Xr
# Suppress some warnings from NIHCL constructs
CXXSUPPRESS = -Xw"Postfix operator call" -Xw"const void"
LUCID_DIR = /usr/local/lucid
CC = $(LUCID_DIR)/bin/lcc $(ENERGIZE)
CXX = $(LUCID_DIR)/bin/lcc $(ENERGIZE) $(CXXMODE) $(CXXSUPPRESS)
EXTRALIBDIRS += $(LUCID_DIR)/lib /usr/local/lucid-utils/lib 
EXTRAINCDIRS += /usr/local/lucid-utils/include
CCPP = gcc -nostdinc -I$(LUCID_DIR)/include -I/usr/include
CXXPP = $(CCPP) -I$(LUCID_DIR)/include/c++incl
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/RCS/lucid.mki,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/RCS/lucid.mki,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/RCS/lucid.mki,v'`"
test 979 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/RCS/lucid.mki,v: original size 979, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/RCS/make.doc,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/RCS/make.doc,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/RCS/make.doc,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/RCS/make.doc,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/RCS/make.doc,v' &&
head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.1
date	94.01.09.22.10.24;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@#
# $Id: make.doc,v 1.3 1993/10/01 16:44:05 ejb Exp $
# $Source: /projects/sasp/tools/make/RCS/make.doc,v $
# $Author: ejb $
#
X
This file documents the make system in use in this baseline.
This makefile system incorporates several features:
X
* Support for the Baseline Configuration System
* Support for multiple architecture targets coexisting in a
X  common source area
* Easy to create and maintain individual makefiles
* System-wide compilation parameters encapsulated in common
X  files
* Separate working and installed copies of targets
* Automatic dependencies
* Use of gnu make, an implementation of make with considerably
X  more functionality than most vendors' default make programs.
X
X
Assumptions about Baseline Configuration
========================================
X
This make system imposes a few restrictions on the layout of the
source code baseline.  Specifically, there must be a single
top-level baseline directory.  This directory contains an
arbitrarily deep level of source code subdirectories.  Each
directory is responsible for producing a single installed
product.  This currently means either a single program or a
single library along with the header files that go with it.
X
All libraries, public header files, and binaries must be
installed.  Directly under the top level, there are bin,
lib, and include subdirectories.  The bin and lib directories
have architecture-specific subdirectories as well.  Units within
the project and units within other projects that depend upon
this one get their libraries and include files from this
installed area.
X
X
Requirements for Use
====================
X
These makefiles include other makefiles from a specific
directory and invoke scripts from another directory.  The make
files require the directory containing the makefile templates to
be stored in the environment variable $MK and require the tools
to be in the path of the person invoking make.  The makefiles in
this system use features specific to gnu make, so gnu make must
be available.  Although this document assumes that gnu make is
installed as "make", it does not need to be.  The makefile
system will work fine with it called by another name.
X
X
Creating Makefiles
==================
X
There are several categories of makefiles that need to be
created in a large software baseline.  These include makefiles
for 
X
* Library targets
* Program targets
* Recursive compilation of child directories
X  - At the top level of the baseline
X  - Anywhere where there are multiple levels in the file system
X    that contain sources
X
The basic paradigm for creating makefiles under this system is
to have a simple makefile that defines certain parameters and
then includes a single template (with the include directive)
from a special makefile rules directory, $MK.  Specific details
about what parameters can be defined and what to use for what
purpose is documented in the makefiles themselves.  This
reduces the risk of THIS document getting out of date as changes
are made to the individual makefile templates.  Only a brief
summary of the functionality is described here.  For the rest,
refer to the makefile templates in question.
X
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
X
Library Targets:
X
Set CCSRCS to a list of C++ sources.
Set CSRCS to a list of C sources.
Set TARGET to the name of the library being built
Set HDRS to a list of header files that need installation
X
include $(MK)/library.mk
X
The order of the above is unimportant.  Example:
X
------------------------------------------------------------
X
CCSRCS = \
X	fileone.cc \
X	filetwo.cc
X
CSRCS = old.c
HDRS = $(CCSRCS:%.cc=%.h) \
X	junk.h
X
TARGET = libpotato.a
X
include $(MK)/library.mk
X
------------------------------------------------------------
X
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
X
Program targets:
X
Set CCSRCS to a list of C++ sources.
Set CSRCS to a list of C sources.
Set TARGET to the name of the program being built
Set LIBS to a list of libraries to be linked with
X
include $(MK)/cprog.mk if main is defined in C code or
$(MK)/ccprog.mk if main is defined in C++ code.
X
The order of the above is unimportant.  Example:
X
------------------------------------------------------------
X
CCSRCS = main.cc
CSRCS = aux.c
LIBS = -lpotato -lXt -lXext -lX11
TARGET = salad
X
include ($MK)/ccprog.mk
X
------------------------------------------------------------
X
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
X
Recursive Compilation:
X
Set LIB_SUBDIRS to a list of directories containing library sources
Set BIN_SUBDIRS to a list of directories containing program sources
Set REC_SUBDIRS to a list of directories containing other source directories
X
include $(MK)/toplevel.mk if this is the top-level makefile or
$(MK)/recursive.mk otherwise.
X
In the case of a project-level makefile, the file project.mk
must also exist.  This file is documented below.
X
Example:
X
------------------------------------------------------------
X
LIB_SUBDIRS = onepotato twopotato
REC_SUBDIRS = morestuff
BIN_SUBDIRS = salad
X
include $(MK)/toplevel.mk
X
------------------------------------------------------------
X
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
X
X
The local.mk and architecture-specific make templates
====================================================
X
The file `local.mk', which resides in the $MK directory, can be
edited to suit a specific project.  This file must specify
whether BCS is in use by setting the BCS variable to either 0 or
1.  It should set DEFTOP to the default path to the top of the
baseline (though this can be derived from the environment if BCS
is in use).  In addition it can define other variables as needed
for all the projects.
X
Example:
X
------------------------------------------------------------
X
BCS = 1
DEFTOP = /projects/sample
EXTRALIBDIRS += /usr/CC/SC1.0
DFLAGS += -g
X
------------------------------------------------------------
X
The archtype script is used to determine the name of the
architecture directories for a specific platform.  There must be
a makefile template defined for each architecture that is
supported.  This file defines architecture-specific parameters
such as names of compilers, link commands, etc.
X
Example:
X
This is a sample sparc.mki file for sparcstations running
Solaris 1.  The RANLIB variable must be defined here and must be
exported. 
X
------------------------------------------------------------
X
AR_ARGS = rvl
AR = ar
X
CC = cc
CXX = /usr/CC/CC
X
export RANLIB = ranlib
X
------------------------------------------------------------
X
Invocation of make with this system
===================================
X
Different targets are defined for different kinds of makefiles.
Some targets are defined at all levels.
X
Targets supported at all levels
-------------------------------
X
At all levels, the targets "clean" and "uninstall" are
supported.  Running
X
make clean 
X
removes all automatically generated files, core files and editor
backups.  To suppress generation of dependency files when
running make clean, you may wish to run 
X
make clean NODEP=1
X
Note that all but the actual unit-level makefiles do this
automatically.  
X
make uninstall
X
removes all installed libraries, headers, and binaries.
Invoking either of these from higher levels will cause it to be
invoked recursively.
X
Targets supported for recursive compilation
-------------------------------------------
X
print_libs, print_bins, print_dirs
X  These targets cause the names of of library, binary, and all
X  directories to be printed.  They are useful for
X  getting lists of directories for find commands, tar commands,
X  etc. and are of little use for day-to-day development.  They
X  can also be useful for debugging makefile configuration.
X  These targets are useful when make is invoked with the
X  -silent option.
X
install_hdrs, install_libs, install_bins
X  These targets build and install headers, libraries, and
X  binaries respectively in all child directories.
X
all_libs, all_bins
X  These targets build but do not install libraries and binaries
X  in child directories.
X
stage
X  If run from the staging area, make stage stages all child
X  directories recursively.  This is useful for cases in which it
X  is desirable to have an entire copy of the project separate
X  from the baseline.
X
Note: If you want to make static recursively, affix
BINDING=-Bstatic (or whatever the proper static binding flag for
your compiler is) to the end of the make command line for one of
the above targets. 
X
Targets supported only at top level
-----------------------------------
All of the recursive targets are supported.  In addition, the
target "world" is supported.  make world from the top level
builds and installs everything in the system.
X
Targets supported for program and library directories
-----------------------------------------------------
all, install
X  These targets build (all) or build and install (install) the
X  current target
X
Targets supported for program directories only
----------------------------------------------
static
X  This target builds a statically linked copy of the current
X  target. 
link
X  This target forces a relink regardless of the state of the
X  dependencies
X
Targets supported for library directories only
----------------------------------------------
install_hdrs
X  This target causes all public header files used by users of
X  this library to be installed
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/RCS/make.doc,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/RCS/make.doc,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/RCS/make.doc,v'`"
test 9549 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/RCS/make.doc,v: original size 9549, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/RCS/prog.mki,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/RCS/prog.mki,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/RCS/prog.mki,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/RCS/prog.mki,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/RCS/prog.mki,v' &&
head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.1
date	94.01.09.22.12.37;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@#
# $Id: prog.mk,v 1.6 1993/12/20 19:20:31 ejb Exp $
# $Source: /projects/sasp/tools/make/RCS/prog.mk,v $
# $Author: ejb $
#
# This makefile is included by language- or compiler-specific makefiles.
# The makefiles including those may may define LIBS to a list
# of libraries that this program needs to link with.  This LIBS should
# have syntax suitable for being included on the link commandline.
# See also the rules.mk file for descriptions of meanings of
# other variables.
#
# The ANALYZE variable set here can be used to prefix the link step with
# another program such as purify or quantify.
#
X
include $(MK)/rules.mki
X
VPATH=$(LIBDIRS:-L%=%)
X
define build_target
X	-$(RM) $(REALTARGET)
X	$(ANALYZE) _COMPILE_ -o $(REALTARGET) $(BINDING) $(OBJS) $(LDFLAGS)
X	-chmod g+w $(REALTARGET)
endef
X
static::
X	-$(RM) $(REALTARGET)
X	$(MAKE) $(MFLAGS) $(REALTARGET) BINDING=-Bstatic
X
link::
X	-$(RM) $(REALTARGET)
X	$(MAKE) $(MFLAGS) $(REALTARGET)
X
install:: $(REALTARGET)
X	$(TOOLS)/installsw bin $(REALTARGET)
X
ifeq ($(BCS)$(IN_STAGING), 11)
define stage_destdir
X	stage $(TOP)/bin/$(ARCH)
endef
endif
X
uninstall::
X	$(stage_destdir)
X	-$(RM) $(TOP)/bin/$(ARCH)/$(TARGET)
X
print_bins::
X	@@pwd
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/RCS/prog.mki,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/RCS/prog.mki,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/RCS/prog.mki,v'`"
test 1356 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/RCS/prog.mki,v: original size 1356, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/RCS/recursive.mk,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/RCS/recursive.mk,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/RCS/recursive.mk,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/RCS/recursive.mk,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/RCS/recursive.mk,v' &&
head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.1
date	94.01.09.21.54.51;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@#
# $Id: recursive.mk,v 1.4 1993/07/28 20:56:33 ejb Exp $
# $Source: /projects/sasp/tools/make/RCS/recursive.mk,v $
# $Author: ejb $
#
# This file is included directly by recursive makefiles at other
# than the top and project levels or indirectly by top and
# project level makefiles.  It defines rules necessary for
# recursive compilation.
#
X
include $(MK)/global.mki
X
.PHONY: all_libs install_libs all_bins install_bins install_hdrs clean
X
ALL_SUBDIRS := $(LIB_SUBDIRS) $(BIN_SUBDIRS) $(REC_SUBDIRS)
X
# Support make stage only if this is the staging area
ifeq ($(IN_STAGING), 1)
stage::
X	stage $(ALL_SUBDIRS)
X	recursive_make "$(MAKE)" "$(MFLAGS)" "$@@" $(REC_SUBDIRS)
endif
X
print_libs::
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@@ $(LIB_SUBDIRS)
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@@ $(REC_SUBDIRS)
X
print_bins::
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@@ $(BIN_SUBDIRS)
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@@ $(REC_SUBDIRS)
X
print_dirs::
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@@ $(LIB_SUBDIRS)
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@@ $(BIN_SUBDIRS)
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@@ $(REC_SUBDIRS)
X
install_hdrs::
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@@ $(REC_SUBDIRS)
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@@ $(LIB_SUBDIRS)
X
all_libs::
X	recursive_make "$(MAKE)" "$(MFLAGS)" $@@ $(REC_SUBDIRS)
X	recursive_make "$(MAKE)" "$(MFLAGS)" all $(LIB_SUBDIRS)
X
install_libs::
X	recursive_make "$(MAKE)" "$(MFLAGS)" $@@ $(REC_SUBDIRS)
X	recursive_make "$(MAKE)" "$(MFLAGS)" install $(LIB_SUBDIRS)
X
all_bins::
X	recursive_make "$(MAKE)" "$(MFLAGS)" $@@ $(REC_SUBDIRS)
X	recursive_make "$(MAKE)" "$(MFLAGS)" all $(BIN_SUBDIRS)
X
install_bins::
X	recursive_make "$(MAKE)" "$(MFLAGS)" $@@ $(REC_SUBDIRS)
X	recursive_make "$(MAKE)" "$(MFLAGS)" install $(BIN_SUBDIRS)
X
uninstall clean::
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@@ $(ALL_SUBDIRS)
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/RCS/recursive.mk,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/RCS/recursive.mk,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/RCS/recursive.mk,v'`"
test 2099 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/RCS/recursive.mk,v: original size 2099, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/RCS/rules.mki,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/RCS/rules.mki,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/RCS/rules.mki,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/RCS/rules.mki,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/RCS/rules.mki,v' &&
head	1.3;
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.3
date	94.03.19.14.27.19;	author qjb;	state Exp;
branches;
next	1.2;
X
1.2
date	94.01.10.14.48.58;	author ejb;	state Exp;
branches;
next	1.1;
X
1.1
date	94.01.09.22.26.42;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.3
log
@create arch explicitly instead of through dependency so files
don't depend on the directory that contains them!
@
text
@#
# $Id: rules.mki,v 1.2 1994/01/10 14:48:58 ejb Exp qjb $
# $Source: /home/qjb/source/bcs/src/unsupported/sample-baseline/make/RCS/rules.mki,v $
# $Author: ejb $
#
# This file is at the heart of this makefile system.  It defines the
# main rules for building software.
SHAR_EOF
true || echo 'restore of bcs-2.0/unsupported/sample-baseline/make/RCS/rules.mki,v failed'
fi
echo 'End of bcs-2.0 part 22'
echo 'File bcs-2.0/unsupported/sample-baseline/make/RCS/rules.mki,v is continued in part 23'
echo 23 > _shar_seq_.tmp
exit 0
