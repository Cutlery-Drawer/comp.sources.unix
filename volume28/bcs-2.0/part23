Newsgroups: comp.sources.unix
From: ejb@ERA.COM (Jay Berkenbilt)
Subject: v28i024: bcs-2.0 - A Baseline Configuration System, Part23/25
References: <1.764985670.1461@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: ejb@ERA.COM (Jay Berkenbilt)
Posting-Number: Volume 28, Issue 24
Archive-Name: bcs-2.0/part23

#!/bin/sh
# this is bcs.23 (part 23 of bcs-2.0)
# do not concatenate these parts, unpack them in order with /bin/sh
# file bcs-2.0/unsupported/sample-baseline/make/RCS/rules.mki,v continued
#
if test ! -r _shar_seq_.tmp; then
	echo 'Please unpack part 1 first!'
	exit 1
fi
(read Scheck
 if test "$Scheck" != 23; then
	echo Please unpack part "$Scheck" next!
	exit 1
 else
	exit 0
 fi
) < _shar_seq_.tmp || exit 1
if test ! -f _shar_wnt_.tmp; then
	echo 'x - still skipping bcs-2.0/unsupported/sample-baseline/make/RCS/rules.mki,v'
else
echo 'x - continuing file bcs-2.0/unsupported/sample-baseline/make/RCS/rules.mki,v'
sed 's/^X//' << 'SHAR_EOF' >> 'bcs-2.0/unsupported/sample-baseline/make/RCS/rules.mki,v' &&
#
# There are many variables used in this file.  It is appropriate to
# modify or override some in unit-level makefiles
# and local.mk.  Others should not be tampered with.  When possible,
# variables are set up here to support gnu make's default targets as
# documented in the gnu make manual.
#
# ARCHITECTURE-DEPENDENT VARIABLES
#   These variables are suitable for modification in the arch.mk files:
#
#     CC:   The C compiler
#     CXX:  The C++ compiler
#     LD:   The linker
#     RM:   Remove a file -- should succeed if the file does not exist
#     AR:   Library archive builder
#     AR_FLAGS:  Flags to pass to ar when adding an object file to a
#		 library
#     RANLIB: Program used to generate library tables of contents.  (On
#	      systems with no ranlib program, this can be defined as
#	      "true" since the "true" program always succeeds.)
#
# VARIABLES SUITABLE FOR LOCAL MODIFICATION
#   These variables can be modified in individual makefiles or
#   in local.mk.  They should be set += so
#   that settings are not overridden if set in more than once
#   place:
#
#     DFLAGS: Debugging flags to the compiler.  Flags defined here
#         are used during compiling and linking but not during
#         dependency generation.
#     EXTRAINCDIRS: Extra directories (outside project library
#         includes and default includes) where include files
#         should be searched for.
#     EXTRALIBDIRS: Extra directories (outside project library
#         directories and default directories) where libraries
#         should be searched for.
#     XCPPFLAGS: Extra flags for the C Preprocessor besides
#         the standard and deafult include directories.  This
#         could include things like -DDEBUG.
#     XCFLAGS: Extra flags to the C compiler that are not used
#         for debugging or the preprocessor.  These will
#         generally be compiler-specific.  (With gcc, for
#         example, turning on -Wall here would be appropriate.)
#     XCXXFLAGS: Same as XCFLAGS but for the C++ compiler.
#     XLDFLAGS: Sames as XCFLAGS but used at link time.
#     
# GUIDELINES FOR MODIFYING THIS FILE
#   If there is not an appropriate place in one of the above
#   variables for something you need to include, rather than
#   modifying one of the others, add the additional variable to
#   the list and included where necessary.  For example, If you
#   wanted to add additional flags to be used only during
#   dependency generation, don't hard code them into the
#   dependency generation rules.  Instead, add something like
#   DEPFLAGS and include that in the rule.  In general, users
#   should be able to treat this file like a black box and
#   should not need to be concerned with the specifics of how it
#   does its job.`
#
X
include $(MK)/global.mki
X
COBJS  = $(CSRCS:%.c=$(ARCH)/%.o)
CCOBJS = $(CCSRCS:%.cc=$(ARCH)/%.o)
OBJS = $(COBJS) $(CCOBJS)
DEPS = $(OBJS:%.o=%.d)
REALTARGET = $(TARGET:%=$(ARCH)/%)
X
CFLAGS = $(DFLAGS) $(XCFLAGS)
CXXFLAGS = $(DFLAGS) $(XCXXFLAGS)
CPPFLAGS = $(INCDIRS) $(XCPPFLAGS)
INCDIRS = -I$(TOP)/include \
X	  $(EXTRAINCDIRS:%=-I%)
X
LDFLAGS = $(DFLAGS) $(LIBDIRS) $(LIBS) $(XLDFLAGS)
LIBDIRS = -L$(TOP)/lib/$(ARCH) \
X	  $(EXTRALIBDIRS:%=-L%)
X
ifeq ($(BCS)$(IN_STAGING), 11)
define stage_arch
X	@@if islink $(ARCH); then stage $(ARCH); fi
endef
endif
X
define create_arch
X	@@if test ! -d $(ARCH); then mkdir $(ARCH); fi
endef
X
# Generate dependencies in the arch directories with the
# gen_deps script.
$(ARCH)/%.d : %.c
X	$(create_arch)
X	$(stage_arch)
X	if [ ! -f $@@ ]; then gen_deps "$(CCPP) -M $(CPPFLAGS)" $(TARGET) $<; fi
X	
$(ARCH)/%.d : %.cc
X	$(create_arch)
X	$(stage_arch)
X	if [ ! -f $@@ ]; then gen_deps "$(CXXPP) -M $(CPPFLAGS)" $(TARGET) $<; fi
X
# Normal .c and .cc to .o rules
$(ARCH)/%.o : %.c
X	$(create_arch)
X	$(stage_arch)
X	gen_deps "$(CCPP) -M $(CPPFLAGS)" $(TARGET) $<
X	-$(RM) $@@
X	$(CC) $(CPPFLAGS) $(CFLAGS) -c -o $@@ $<
X	-chmod g+w $@@
X
$(ARCH)/%.o : %.cc
X	$(create_arch)
X	$(stage_arch)
X	gen_deps "$(CXXPP) -M $(CPPFLAGS)" $(TARGET) $<
X	-$(RM) $@@
X	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@@ $<
X	-chmod g+w $@@
X
$(ARCH)/%.i : %.cc FORCE
X	$(create_arch)
X	$(stage_arch)
X	-$(RM) $@@
X	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -E $< | sed -e '/^#/d' > $@@
X	-chmod g+w $@@
X
FORCE: ;
X
# Rules for building archive object files using special gnu make syntax
# Gnu make is smart enough not to require the object file to exist --
# it chains this rule and the $(ARCH)/%.o : %.cc or %.c rule to create
# a dependency on the source file.
($(ARCH)/%.o) : $(ARCH)/%.o
X	$(create_arch)
X	$(AR) $(AR_ARGS) $@@ $(ARCH)/$*.o 
X	-$(RM) $(ARCH)/$*.o
X	-chmod g+w $@@
X
.PHONY: all clean install
X
$(REALTARGET)::
X	$(stage_arch)
X
all:: $(REALTARGET)
X
clean::
X	$(stage_arch)
X	-$(RM) $(REALTARGET) *.[od] $(ARCH)/*.[od] $(ARCH)/*.tmp*
X
# Don't try to include dependencies if NODEP is defined.
ifndef NODEP
include $(DEPS)
endif
@
X
X
1.2
log
@replace test -h with islink
@
text
@d2 3
a4 3
# $Id: rules.mki,v 1.1 1994/01/09 22:26:42 qjb Exp ejb $
# $Source: /home/ejb/source/bcs/src/unsupported/sample-baseline/make/RCS/rules.mki,v $
# $Author: qjb $
d88 1
a88 1
X	if islink $(ARCH); then stage $(ARCH); fi
d92 4
d98 2
a99 1
$(ARCH)/%.d : %.c $(ARCH)
d103 2
a104 1
$(ARCH)/%.d : %.cc $(ARCH)
d109 2
a110 1
$(ARCH)/%.o : %.c $(ARCH)
d117 2
a118 1
$(ARCH)/%.o : %.cc $(ARCH)
d125 2
a126 1
$(ARCH)/%.i : %.cc FORCE $(ARCH)
a131 3
$(ARCH) :
X	@@if test ! -d $(ARCH); then mkdir $(ARCH); fi
X
d138 2
a139 1
($(ARCH)/%.o) : $(ARCH)/%.o $(ARCH)
@
X
X
1.1
log
@Initial revision
@
text
@d2 3
a4 3
# $Id: rules.mk,v 1.11 1993/12/20 18:27:01 ejb Exp $
# $Source: /projects/sasp/tools/make/RCS/rules.mk,v $
# $Author: ejb $
d88 1
a88 1
X	if test -h $(ARCH); then stage $(ARCH); fi
@
SHAR_EOF
echo 'File bcs-2.0/unsupported/sample-baseline/make/RCS/rules.mki,v is complete' &&
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/RCS/rules.mki,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/RCS/rules.mki,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/RCS/rules.mki,v'`"
test 6395 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/RCS/rules.mki,v: original size 6395, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/RCS/sparc.mki,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/RCS/sparc.mki,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/RCS/sparc.mki,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/RCS/sparc.mki,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/RCS/sparc.mki,v' &&
head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.1
date	94.01.09.22.03.16;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@#
# $Id: sparc.mk,v 1.6 1994/01/03 16:41:03 ejb Exp $
# $Source: /projects/sasp/tools/make/RCS/sparc.mk,v $
# $Author: ejb $
#
# This makefile is used to define architecture-specific parameters.
# It must define RANLIB and export it since the installsw script uses
# this variable.  Any of the architecture-specific variables as
# discussed in the rules.mki files can be overridden here.
#
X
AR_ARGS = rvl
AR = ar
X
include $(MK)/lucid.mki
export RANLIB = ranlib
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/RCS/sparc.mki,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/RCS/sparc.mki,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/RCS/sparc.mki,v'`"
test 635 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/RCS/sparc.mki,v: original size 635, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/RCS/sun_cc.mki,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/RCS/sun_cc.mki,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/RCS/sun_cc.mki,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/RCS/sun_cc.mki,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/RCS/sun_cc.mki,v' &&
head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.1
date	93.12.20.18.28.43;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@#
# $Id: sun_cc.mki,v 1.2 1993/12/20 18:27:01 ejb Exp $
# $Source: /projects/sasp/tools/make/RCS/sun_cc.mki,v $
# $Author: ejb $
#
# This internal makefile template defines parameters for using
# SUN CC.  It is not intended for inclusion by users' makefiles.
#
X
CC = cc
CXX = /usr/CC/CC
EXTRALIBDIRS += /usr/CC/SC1.0
X
CCPP = $(CC)
CXXPP = $(CXX)
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/RCS/sun_cc.mki,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/RCS/sun_cc.mki,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/RCS/sun_cc.mki,v'`"
test 520 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/RCS/sun_cc.mki,v: original size 520, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/RCS/toplevel.mk,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/RCS/toplevel.mk,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/RCS/toplevel.mk,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/RCS/toplevel.mk,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/RCS/toplevel.mk,v' &&
head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.1
date	93.07.28.21.02.17;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@#
# $Id: toplevel.mk,v 1.3 1993/07/28 20:56:33 ejb Exp $
# $Source: /projects/sasp/tools/make/RCS/toplevel.mk,v $
# $Author: ejb $
#
# This makefile should be included by makefiles at the project level.
# See also recursive.mk
#
X
.PHONY: world
X
world: install_hdrs install_libs install_bins
X
include $(MK)/recursive.mk
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/RCS/toplevel.mk,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/RCS/toplevel.mk,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/RCS/toplevel.mk,v'`"
test 493 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/RCS/toplevel.mk,v: original size 493, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/RCS/HP-UX.mki,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/RCS/HP-UX.mki,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/RCS/HP-UX.mki,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/RCS/HP-UX.mki,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/RCS/HP-UX.mki,v' &&
head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
X
X
1.1
date	94.03.19.14.26.44;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@#
# $Id: IRIX.mki,v 1.1 1994/01/10 14:53:40 ejb Exp $
# $Source: /home/ejb/source/bcs/src/unsupported/sample-baseline/make/RCS/IRIX.mki,v $
# $Author: ejb $
#
# This makefile is used to define architecture-specific parameters.
# It must define RANLIB and export it since the installsw script uses
# this variable.  Any of the architecture-specific variables as
# discussed in the rules.mki files can be overridden here.
#
X
AR_ARGS = rvl
AR = ar
X
CC = cc -Aa -D_HPUX_SOURCE
CXX = CC
X
CCPP = $(CC)
CXXPP = $(CXX)
X
export RANLIB = true
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/RCS/HP-UX.mki,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/RCS/HP-UX.mki,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/RCS/HP-UX.mki,v'`"
test 707 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/RCS/HP-UX.mki,v: original size 707, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/ccprog.mk ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/ccprog.mk' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/ccprog.mk (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/ccprog.mk (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/ccprog.mk' &&
#
# $Id: ccprog.mk,v 1.1 1994/01/09 21:54:52 qjb Exp $
# $Source: /home/qjb/source/bcs/src/unsupported/sample-baseline/make/RCS/ccprog.mk,v $
# $Author: qjb $
#
# This makefile template is used for programs whose main routine is
# defined in C++ code.  See prog.mk for more information.
#
X
include $(MK)/prog.mki
X
#
# Build the actual target using the C++ compiler.  This rule uses
# gnu make's extension for supporting library dependencies with the
# -llib syntax.
#
X
$(REALTARGET):: $(OBJS) $(LIBS)
X	$(build_target:_COMPILE_=$(CXX))
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/ccprog.mk ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/ccprog.mk failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/ccprog.mk'`"
test 535 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/ccprog.mk: original size 535, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/cprog.mk ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/cprog.mk' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/cprog.mk (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/cprog.mk (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/cprog.mk' &&
#
# $Id: cprog.mk,v 1.1 1994/01/09 21:54:52 qjb Exp $
# $Source: /home/qjb/source/bcs/src/unsupported/sample-baseline/make/RCS/cprog.mk,v $
# $Author: qjb $
#
# This makefile template is used for programs whose main routine is
# defined in C code.  See prog.mk for more information.
#
X
include $(MK)/prog.mki
X
#
# Build the actual target using the C compiler.  This rule uses
# gnu make's extension for supporting library dependencies with the
# -llib syntax.
#
X
$(REALTARGET):: $(OBJS) $(LIBS)
X	$(build_target:_COMPILE_=$(CC))
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/cprog.mk ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/cprog.mk failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/cprog.mk'`"
test 528 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/cprog.mk: original size 528, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/global.mki ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/global.mki' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/global.mki (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/global.mki (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/global.mki' &&
#
# $Id: global.mki,v 1.1 1994/01/09 22:00:27 qjb Exp $
# $Source: /home/qjb/source/bcs/src/unsupported/sample-baseline/make/RCS/global.mki,v $
# $Author: qjb $
#
# This makefile template is included by all other rules files.  It
# defines the default target of all, the global clean rule, and
# takes care of defining other global parameters for all makes.
#
X
include $(MK)/local.mki
X
# Make sure IN_STAGING is exported and initialized.  It is used
# by some scripts invoked by these makefiles.
ifeq ($(MAKELEVEL), 0) 
X  export IN_STAGING = 0
endif
X
export TOP
X
# Initialize IN_STAGING and TOP.  Use := so that the expensive shell
# commands are run only once.  Do this only for MAKELEVEL 0 and export.
# That way, child makes don't have to recompute this information.
ifeq ($(BCS),1)
X  ifeq ($(MAKELEVEL), 0) 
X    IN_STAGING := $(shell in_staging_area)
X  endif
X  ifeq ($(IN_STAGING), 1)
X    TOP := $(STAGING)
X    IN_STAGING = 1
X  else
X    TOP := $(BASELINE)
X  endif
else
X  # Use DEFTOP only if BCS is not defined.
X  TOP := $(DEFTOP)
endif
X
# Define TOOLS to where the scripts make depends upon are located.
# This must be defined after the computation of TOP, so any commands
# needed for that must be in the path.
TOOLS := $(TOP)/tools
X
# Make sure ARCH is exported since the scripts make uses use this too.
ifeq ($(MAKELEVEL), 0) 
X  export ARCH := $(shell $(TOOLS)/archtype)
endif
X
include $(MK)/$(ARCH).mki
X
default: all
X
# Make stage should be a no-op when not otherwise defined.
stage::
X
clean::
X	-$(RM) *~ *% core a.out
X
print_dirs::
X	@pwd
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/global.mki ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/global.mki failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/global.mki'`"
test 1548 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/global.mki: original size 1548, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/library.mk ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/library.mk' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/library.mk (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/library.mk (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/library.mk' &&
#
# $Id: library.mk,v 1.1 1994/01/09 22:12:30 qjb Exp $
# $Source: /home/qjb/source/bcs/src/unsupported/sample-baseline/make/RCS/library.mk,v $
# $Author: qjb $
#
# This makefile template should be included by makefiles in
# library directories.  The including makefile may define the
# HDRS variable to a list of header files to get installed.
# See also the rules.mk file for descriptions of meanings of
# other variables.
#
X
include $(MK)/rules.mki
X
# To build the library, just set up the dependencies with the
# special gnu make syntax for archive objects.	Ranlib is run at
# install time since people don't link against uninstalled
# libraries.
$(REALTARGET):: $(OBJS:%=$(REALTARGET)(%))
X
install:: $(REALTARGET) install_hdrs
X	$(TOOLS)/installsw lib $(REALTARGET)
X
install_hdrs::
X	$(TOOLS)/installsw inc $(HDRS)
X
# Stage destination directories for install only when both
# running BCS and in staging area
ifeq ($(BCS)$(IN_STAGING), 11)
define stage_destdir
X	stage $(TOP)/lib/$(ARCH)
X	stage $(TOP)/include
endef
endif
X
uninstall::
X	$(stage_destdir)
X	-$(RM) $(TOP)/lib/$(ARCH)/$(TARGET)
X	-$(RM) $(foreach hdr, $(HDRS), $(TOP)/include/$(hdr)) || true
X
print_libs::
X	@pwd
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/library.mk ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/library.mk failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/library.mk'`"
test 1175 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/library.mk: original size 1175, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/local.mki ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/local.mki' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/local.mki (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/local.mki (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/local.mki' &&
#
# $Id: local.mki,v 1.1 1994/01/09 22:00:16 qjb Exp $
# $Source: /home/qjb/source/bcs/src/unsupported/sample-baseline/make/RCS/local.mki,v $
# $Author: qjb $
#
# This makefile template contains parameters local to this system.
# It can ammend or redefine any of the variables described in
# rules.mk as locally adjustable.  It must define BCS as either 1 or 0
# and DEFTOP as the default pathname of the top of the baseline if
# BCS is not being used.  (The definition is harmless but ignored if
# BCS is in use.)
#
X
BCS = 1
DEFTOP = /usr/tmp/bcs/unsupported/sample-baseline
X
DFLAGS += -g
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/local.mki ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/local.mki failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/local.mki'`"
test 590 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/local.mki: original size 590, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/lucid.mki ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/lucid.mki' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/lucid.mki (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/lucid.mki (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/lucid.mki' &&
#
# $Id: lucid.mki,v 1.1 1994/01/04 14:23:02 qjb Exp $
# $Source: /home/qjb/source/bcs/src/unsupported/sample-baseline/make/RCS/lucid.mki,v $
# $Author: qjb $
#
# This internal makefile template defines parameters for using
# the Lucid C and C++ compilers.  It is not intended for
# inclusion by users' makefiles. 
#
X
#ENERGIZE = -Xez
# -Xf is 2.1 mode; -Xr is relaxed
CXXMODE = -Xf -Xr
# Suppress some warnings from NIHCL constructs
CXXSUPPRESS = -Xw"Postfix operator call" -Xw"const void"
LUCID_DIR = /usr/local/lucid
CC = $(LUCID_DIR)/bin/lcc $(ENERGIZE)
CXX = $(LUCID_DIR)/bin/lcc $(ENERGIZE) $(CXXMODE) $(CXXSUPPRESS)
EXTRALIBDIRS += $(LUCID_DIR)/lib /usr/local/lucid-utils/lib 
EXTRAINCDIRS += /usr/local/lucid-utils/include
CCPP = gcc -nostdinc -I$(LUCID_DIR)/include -I/usr/include
CXXPP = $(CCPP) -I$(LUCID_DIR)/include/c++incl
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/lucid.mki ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/lucid.mki failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/lucid.mki'`"
test 837 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/lucid.mki: original size 837, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/make.doc ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/make.doc' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/make.doc (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/make.doc (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/make.doc' &&
#
# $Id: make.doc,v 1.1 1994/01/09 22:10:24 qjb Exp $
# $Source: /home/qjb/source/bcs/src/unsupported/sample-baseline/make/RCS/make.doc,v $
# $Author: qjb $
#
X
This file documents the make system in use in this baseline.
This makefile system incorporates several features:
X
* Support for the Baseline Configuration System
* Support for multiple architecture targets coexisting in a
X  common source area
* Easy to create and maintain individual makefiles
* System-wide compilation parameters encapsulated in common
X  files
* Separate working and installed copies of targets
* Automatic dependencies
* Use of gnu make, an implementation of make with considerably
X  more functionality than most vendors' default make programs.
X
X
Assumptions about Baseline Configuration
========================================
X
This make system imposes a few restrictions on the layout of the
source code baseline.  Specifically, there must be a single
top-level baseline directory.  This directory contains an
arbitrarily deep level of source code subdirectories.  Each
directory is responsible for producing a single installed
product.  This currently means either a single program or a
single library along with the header files that go with it.
X
All libraries, public header files, and binaries must be
installed.  Directly under the top level, there are bin,
lib, and include subdirectories.  The bin and lib directories
have architecture-specific subdirectories as well.  Units within
the project and units within other projects that depend upon
this one get their libraries and include files from this
installed area.
X
X
Requirements for Use
====================
X
These makefiles include other makefiles from a specific
directory and invoke scripts from another directory.  The make
files require the directory containing the makefile templates to
be stored in the environment variable $MK and require the tools
to be in the path of the person invoking make.  The makefiles in
this system use features specific to gnu make, so gnu make must
be available.  Although this document assumes that gnu make is
installed as "make", it does not need to be.  The makefile
system will work fine with it called by another name.
X
X
Creating Makefiles
==================
X
There are several categories of makefiles that need to be
created in a large software baseline.  These include makefiles
for 
X
* Library targets
* Program targets
* Recursive compilation of child directories
X  - At the top level of the baseline
X  - Anywhere where there are multiple levels in the file system
X    that contain sources
X
The basic paradigm for creating makefiles under this system is
to have a simple makefile that defines certain parameters and
then includes a single template (with the include directive)
from a special makefile rules directory, $MK.  Specific details
about what parameters can be defined and what to use for what
purpose is documented in the makefiles themselves.  This
reduces the risk of THIS document getting out of date as changes
are made to the individual makefile templates.  Only a brief
summary of the functionality is described here.  For the rest,
refer to the makefile templates in question.
X
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
X
Library Targets:
X
Set CCSRCS to a list of C++ sources.
Set CSRCS to a list of C sources.
Set TARGET to the name of the library being built
Set HDRS to a list of header files that need installation
X
include $(MK)/library.mk
X
The order of the above is unimportant.  Example:
X
------------------------------------------------------------
X
CCSRCS = \
X	fileone.cc \
X	filetwo.cc
X
CSRCS = old.c
HDRS = $(CCSRCS:%.cc=%.h) \
X	junk.h
X
TARGET = libpotato.a
X
include $(MK)/library.mk
X
------------------------------------------------------------
X
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
X
Program targets:
X
Set CCSRCS to a list of C++ sources.
Set CSRCS to a list of C sources.
Set TARGET to the name of the program being built
Set LIBS to a list of libraries to be linked with
X
include $(MK)/cprog.mk if main is defined in C code or
$(MK)/ccprog.mk if main is defined in C++ code.
X
The order of the above is unimportant.  Example:
X
------------------------------------------------------------
X
CCSRCS = main.cc
CSRCS = aux.c
LIBS = -lpotato -lXt -lXext -lX11
TARGET = salad
X
include ($MK)/ccprog.mk
X
------------------------------------------------------------
X
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
X
Recursive Compilation:
X
Set LIB_SUBDIRS to a list of directories containing library sources
Set BIN_SUBDIRS to a list of directories containing program sources
Set REC_SUBDIRS to a list of directories containing other source directories
X
include $(MK)/toplevel.mk if this is the top-level makefile or
$(MK)/recursive.mk otherwise.
X
In the case of a project-level makefile, the file project.mk
must also exist.  This file is documented below.
X
Example:
X
------------------------------------------------------------
X
LIB_SUBDIRS = onepotato twopotato
REC_SUBDIRS = morestuff
BIN_SUBDIRS = salad
X
include $(MK)/toplevel.mk
X
------------------------------------------------------------
X
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
X
X
The local.mk and architecture-specific make templates
====================================================
X
The file `local.mk', which resides in the $MK directory, can be
edited to suit a specific project.  This file must specify
whether BCS is in use by setting the BCS variable to either 0 or
1.  It should set DEFTOP to the default path to the top of the
baseline (though this can be derived from the environment if BCS
is in use).  In addition it can define other variables as needed
for all the projects.
X
Example:
X
------------------------------------------------------------
X
BCS = 1
DEFTOP = /projects/sample
EXTRALIBDIRS += /usr/CC/SC1.0
DFLAGS += -g
X
------------------------------------------------------------
X
The archtype script is used to determine the name of the
architecture directories for a specific platform.  There must be
a makefile template defined for each architecture that is
supported.  This file defines architecture-specific parameters
such as names of compilers, link commands, etc.
X
Example:
X
This is a sample sparc.mki file for sparcstations running
Solaris 1.  The RANLIB variable must be defined here and must be
exported. 
X
------------------------------------------------------------
X
AR_ARGS = rvl
AR = ar
X
CC = cc
CXX = /usr/CC/CC
X
export RANLIB = ranlib
X
------------------------------------------------------------
X
Invocation of make with this system
===================================
X
Different targets are defined for different kinds of makefiles.
Some targets are defined at all levels.
X
Targets supported at all levels
-------------------------------
X
At all levels, the targets "clean" and "uninstall" are
supported.  Running
X
make clean 
X
removes all automatically generated files, core files and editor
backups.  To suppress generation of dependency files when
running make clean, you may wish to run 
X
make clean NODEP=1
X
Note that all but the actual unit-level makefiles do this
automatically.  
X
make uninstall
X
removes all installed libraries, headers, and binaries.
Invoking either of these from higher levels will cause it to be
invoked recursively.
X
Targets supported for recursive compilation
-------------------------------------------
X
print_libs, print_bins, print_dirs
X  These targets cause the names of of library, binary, and all
X  directories to be printed.  They are useful for
X  getting lists of directories for find commands, tar commands,
X  etc. and are of little use for day-to-day development.  They
X  can also be useful for debugging makefile configuration.
X  These targets are useful when make is invoked with the
X  -silent option.
X
install_hdrs, install_libs, install_bins
X  These targets build and install headers, libraries, and
X  binaries respectively in all child directories.
X
all_libs, all_bins
X  These targets build but do not install libraries and binaries
X  in child directories.
X
stage
X  If run from the staging area, make stage stages all child
X  directories recursively.  This is useful for cases in which it
X  is desirable to have an entire copy of the project separate
X  from the baseline.
X
Note: If you want to make static recursively, affix
BINDING=-Bstatic (or whatever the proper static binding flag for
your compiler is) to the end of the make command line for one of
the above targets. 
X
Targets supported only at top level
-----------------------------------
All of the recursive targets are supported.  In addition, the
target "world" is supported.  make world from the top level
builds and installs everything in the system.
X
Targets supported for program and library directories
-----------------------------------------------------
all, install
X  These targets build (all) or build and install (install) the
X  current target
X
Targets supported for program directories only
----------------------------------------------
static
X  This target builds a statically linked copy of the current
X  target. 
link
X  This target forces a relink regardless of the state of the
X  dependencies
X
Targets supported for library directories only
----------------------------------------------
install_hdrs
X  This target causes all public header files used by users of
X  this library to be installed
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/make.doc ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/make.doc failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/make.doc'`"
test 9407 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/make.doc: original size 9407, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/prog.mki ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/prog.mki' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/prog.mki (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/prog.mki (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/prog.mki' &&
#
# $Id: prog.mki,v 1.1 1994/01/09 22:12:37 qjb Exp $
# $Source: /home/qjb/source/bcs/src/unsupported/sample-baseline/make/RCS/prog.mki,v $
# $Author: qjb $
#
# This makefile is included by language- or compiler-specific makefiles.
# The makefiles including those may may define LIBS to a list
# of libraries that this program needs to link with.  This LIBS should
# have syntax suitable for being included on the link commandline.
# See also the rules.mk file for descriptions of meanings of
# other variables.
#
# The ANALYZE variable set here can be used to prefix the link step with
# another program such as purify or quantify.
#
X
include $(MK)/rules.mki
X
VPATH=$(LIBDIRS:-L%=%)
X
define build_target
X	-$(RM) $(REALTARGET)
X	$(ANALYZE) _COMPILE_ -o $(REALTARGET) $(BINDING) $(OBJS) $(LDFLAGS)
X	-chmod g+w $(REALTARGET)
endef
X
static::
X	-$(RM) $(REALTARGET)
X	$(MAKE) $(MFLAGS) $(REALTARGET) BINDING=-Bstatic
X
link::
X	-$(RM) $(REALTARGET)
X	$(MAKE) $(MFLAGS) $(REALTARGET)
X
install:: $(REALTARGET)
X	$(TOOLS)/installsw bin $(REALTARGET)
X
ifeq ($(BCS)$(IN_STAGING), 11)
define stage_destdir
X	stage $(TOP)/bin/$(ARCH)
endef
endif
X
uninstall::
X	$(stage_destdir)
X	-$(RM) $(TOP)/bin/$(ARCH)/$(TARGET)
X
print_bins::
X	@pwd
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/prog.mki ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/prog.mki failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/prog.mki'`"
test 1215 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/prog.mki: original size 1215, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/recursive.mk ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/recursive.mk' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/recursive.mk (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/recursive.mk (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/recursive.mk' &&
#
# $Id: recursive.mk,v 1.1 1994/01/09 21:54:51 qjb Exp $
# $Source: /home/qjb/source/bcs/src/unsupported/sample-baseline/make/RCS/recursive.mk,v $
# $Author: qjb $
#
# This file is included directly by recursive makefiles at other
# than the top and project levels or indirectly by top and
# project level makefiles.  It defines rules necessary for
# recursive compilation.
#
X
include $(MK)/global.mki
X
.PHONY: all_libs install_libs all_bins install_bins install_hdrs clean
X
ALL_SUBDIRS := $(LIB_SUBDIRS) $(BIN_SUBDIRS) $(REC_SUBDIRS)
X
# Support make stage only if this is the staging area
ifeq ($(IN_STAGING), 1)
stage::
X	stage $(ALL_SUBDIRS)
X	recursive_make "$(MAKE)" "$(MFLAGS)" "$@" $(REC_SUBDIRS)
endif
X
print_libs::
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@ $(LIB_SUBDIRS)
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@ $(REC_SUBDIRS)
X
print_bins::
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@ $(BIN_SUBDIRS)
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@ $(REC_SUBDIRS)
X
print_dirs::
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@ $(LIB_SUBDIRS)
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@ $(BIN_SUBDIRS)
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@ $(REC_SUBDIRS)
X
install_hdrs::
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@ $(REC_SUBDIRS)
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@ $(LIB_SUBDIRS)
X
all_libs::
X	recursive_make "$(MAKE)" "$(MFLAGS)" $@ $(REC_SUBDIRS)
X	recursive_make "$(MAKE)" "$(MFLAGS)" all $(LIB_SUBDIRS)
X
install_libs::
X	recursive_make "$(MAKE)" "$(MFLAGS)" $@ $(REC_SUBDIRS)
X	recursive_make "$(MAKE)" "$(MFLAGS)" install $(LIB_SUBDIRS)
X
all_bins::
X	recursive_make "$(MAKE)" "$(MFLAGS)" $@ $(REC_SUBDIRS)
X	recursive_make "$(MAKE)" "$(MFLAGS)" all $(BIN_SUBDIRS)
X
install_bins::
X	recursive_make "$(MAKE)" "$(MFLAGS)" $@ $(REC_SUBDIRS)
X	recursive_make "$(MAKE)" "$(MFLAGS)" install $(BIN_SUBDIRS)
X
uninstall clean::
X	recursive_make "$(MAKE) NODEP=1" "$(MFLAGS)" $@ $(ALL_SUBDIRS)
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/recursive.mk ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/recursive.mk failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/recursive.mk'`"
test 1942 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/recursive.mk: original size 1942, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/rules.mki ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/rules.mki' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/rules.mki (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/rules.mki (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/rules.mki' &&
#
# $Id: rules.mki,v 1.3 1994/03/19 14:27:19 qjb Exp $
# $Source: /home/qjb/source/bcs/src/unsupported/sample-baseline/make/RCS/rules.mki,v $
# $Author: qjb $
#
# This file is at the heart of this makefile system.  It defines the
# main rules for building software.
#
# There are many variables used in this file.  It is appropriate to
# modify or override some in unit-level makefiles
# and local.mk.  Others should not be tampered with.  When possible,
# variables are set up here to support gnu make's default targets as
# documented in the gnu make manual.
#
# ARCHITECTURE-DEPENDENT VARIABLES
#   These variables are suitable for modification in the arch.mk files:
#
#     CC:   The C compiler
#     CXX:  The C++ compiler
#     LD:   The linker
#     RM:   Remove a file -- should succeed if the file does not exist
#     AR:   Library archive builder
#     AR_FLAGS:  Flags to pass to ar when adding an object file to a
#		 library
#     RANLIB: Program used to generate library tables of contents.  (On
#	      systems with no ranlib program, this can be defined as
#	      "true" since the "true" program always succeeds.)
#
# VARIABLES SUITABLE FOR LOCAL MODIFICATION
#   These variables can be modified in individual makefiles or
#   in local.mk.  They should be set += so
#   that settings are not overridden if set in more than once
#   place:
#
#     DFLAGS: Debugging flags to the compiler.  Flags defined here
#         are used during compiling and linking but not during
#         dependency generation.
#     EXTRAINCDIRS: Extra directories (outside project library
#         includes and default includes) where include files
#         should be searched for.
#     EXTRALIBDIRS: Extra directories (outside project library
#         directories and default directories) where libraries
#         should be searched for.
#     XCPPFLAGS: Extra flags for the C Preprocessor besides
#         the standard and deafult include directories.  This
#         could include things like -DDEBUG.
#     XCFLAGS: Extra flags to the C compiler that are not used
#         for debugging or the preprocessor.  These will
#         generally be compiler-specific.  (With gcc, for
#         example, turning on -Wall here would be appropriate.)
#     XCXXFLAGS: Same as XCFLAGS but for the C++ compiler.
#     XLDFLAGS: Sames as XCFLAGS but used at link time.
#     
# GUIDELINES FOR MODIFYING THIS FILE
#   If there is not an appropriate place in one of the above
#   variables for something you need to include, rather than
#   modifying one of the others, add the additional variable to
#   the list and included where necessary.  For example, If you
#   wanted to add additional flags to be used only during
#   dependency generation, don't hard code them into the
#   dependency generation rules.  Instead, add something like
#   DEPFLAGS and include that in the rule.  In general, users
#   should be able to treat this file like a black box and
#   should not need to be concerned with the specifics of how it
#   does its job.`
#
X
include $(MK)/global.mki
X
COBJS  = $(CSRCS:%.c=$(ARCH)/%.o)
CCOBJS = $(CCSRCS:%.cc=$(ARCH)/%.o)
OBJS = $(COBJS) $(CCOBJS)
DEPS = $(OBJS:%.o=%.d)
REALTARGET = $(TARGET:%=$(ARCH)/%)
X
CFLAGS = $(DFLAGS) $(XCFLAGS)
CXXFLAGS = $(DFLAGS) $(XCXXFLAGS)
CPPFLAGS = $(INCDIRS) $(XCPPFLAGS)
INCDIRS = -I$(TOP)/include \
X	  $(EXTRAINCDIRS:%=-I%)
X
LDFLAGS = $(DFLAGS) $(LIBDIRS) $(LIBS) $(XLDFLAGS)
LIBDIRS = -L$(TOP)/lib/$(ARCH) \
X	  $(EXTRALIBDIRS:%=-L%)
X
ifeq ($(BCS)$(IN_STAGING), 11)
define stage_arch
X	@if islink $(ARCH); then stage $(ARCH); fi
endef
endif
X
define create_arch
X	@if test ! -d $(ARCH); then mkdir $(ARCH); fi
endef
X
# Generate dependencies in the arch directories with the
# gen_deps script.
$(ARCH)/%.d : %.c
X	$(create_arch)
X	$(stage_arch)
X	if [ ! -f $@ ]; then gen_deps "$(CCPP) -M $(CPPFLAGS)" $(TARGET) $<; fi
X	
$(ARCH)/%.d : %.cc
X	$(create_arch)
X	$(stage_arch)
X	if [ ! -f $@ ]; then gen_deps "$(CXXPP) -M $(CPPFLAGS)" $(TARGET) $<; fi
X
# Normal .c and .cc to .o rules
$(ARCH)/%.o : %.c
X	$(create_arch)
X	$(stage_arch)
X	gen_deps "$(CCPP) -M $(CPPFLAGS)" $(TARGET) $<
X	-$(RM) $@
X	$(CC) $(CPPFLAGS) $(CFLAGS) -c -o $@ $<
X	-chmod g+w $@
X
$(ARCH)/%.o : %.cc
X	$(create_arch)
X	$(stage_arch)
X	gen_deps "$(CXXPP) -M $(CPPFLAGS)" $(TARGET) $<
X	-$(RM) $@
X	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $<
X	-chmod g+w $@
X
$(ARCH)/%.i : %.cc FORCE
X	$(create_arch)
X	$(stage_arch)
X	-$(RM) $@
X	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -E $< | sed -e '/^#/d' > $@
X	-chmod g+w $@
X
FORCE: ;
X
# Rules for building archive object files using special gnu make syntax
# Gnu make is smart enough not to require the object file to exist --
# it chains this rule and the $(ARCH)/%.o : %.cc or %.c rule to create
# a dependency on the source file.
($(ARCH)/%.o) : $(ARCH)/%.o
X	$(create_arch)
X	$(AR) $(AR_ARGS) $@ $(ARCH)/$*.o 
X	-$(RM) $(ARCH)/$*.o
X	-chmod g+w $@
X
.PHONY: all clean install
X
$(REALTARGET)::
X	$(stage_arch)
X
all:: $(REALTARGET)
X
clean::
X	$(stage_arch)
X	-$(RM) $(REALTARGET) *.[od] $(ARCH)/*.[od] $(ARCH)/*.tmp*
X
# Don't try to include dependencies if NODEP is defined.
ifndef NODEP
include $(DEPS)
endif
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/rules.mki ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/rules.mki failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/rules.mki'`"
test 5131 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/rules.mki: original size 5131, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/sparc.mki ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/sparc.mki' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/sparc.mki (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/sparc.mki (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/sparc.mki' &&
#
# $Id: sparc.mki,v 1.1 1994/01/09 22:03:16 qjb Exp $
# $Source: /home/qjb/source/bcs/src/unsupported/sample-baseline/make/RCS/sparc.mki,v $
# $Author: qjb $
#
# This makefile is used to define architecture-specific parameters.
# It must define RANLIB and export it since the installsw script uses
# this variable.  Any of the architecture-specific variables as
# discussed in the rules.mki files can be overridden here.
#
X
AR_ARGS = rvl
AR = ar
X
include $(MK)/lucid.mki
export RANLIB = ranlib
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/sparc.mki ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/sparc.mki failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/sparc.mki'`"
test 495 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/sparc.mki: original size 495, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/sun_cc.mki ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/sun_cc.mki' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/sun_cc.mki (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/sun_cc.mki (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/sun_cc.mki' &&
#
# $Id: sun_cc.mki,v 1.1 1993/12/20 18:28:43 qjb Exp $
# $Source: /home/qjb/source/bcs/src/unsupported/sample-baseline/make/RCS/sun_cc.mki,v $
# $Author: qjb $
#
# This internal makefile template defines parameters for using
# SUN CC.  It is not intended for inclusion by users' makefiles.
#
X
CC = cc
CXX = /usr/CC/CC
EXTRALIBDIRS += /usr/CC/SC1.0
X
CCPP = $(CC)
CXXPP = $(CXX)
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/sun_cc.mki ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/sun_cc.mki failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/sun_cc.mki'`"
test 378 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/sun_cc.mki: original size 378, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/toplevel.mk ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/toplevel.mk' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/toplevel.mk (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/toplevel.mk (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/toplevel.mk' &&
#
# $Id: toplevel.mk,v 1.1 1993/07/28 21:02:17 qjb Exp $
# $Source: /home/qjb/source/bcs/src/unsupported/sample-baseline/make/RCS/toplevel.mk,v $
# $Author: qjb $
#
# This makefile should be included by makefiles at the project level.
# See also recursive.mk
#
X
.PHONY: world
X
world: install_hdrs install_libs install_bins
X
include $(MK)/recursive.mk
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/toplevel.mk ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/toplevel.mk failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/toplevel.mk'`"
test 351 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/toplevel.mk: original size 351, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/make/HP-UX.mki ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/make/HP-UX.mki' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/make/HP-UX.mki (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/make/HP-UX.mki (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/make/HP-UX.mki' &&
#
# $Id: HP-UX.mki,v 1.1 1994/03/19 14:26:44 qjb Exp $
# $Source: /home/qjb/source/bcs/src/unsupported/sample-baseline/make/RCS/HP-UX.mki,v $
# $Author: qjb $
#
# This makefile is used to define architecture-specific parameters.
# It must define RANLIB and export it since the installsw script uses
# this variable.  Any of the architecture-specific variables as
# discussed in the rules.mki files can be overridden here.
#
X
AR_ARGS = rvl
AR = ar
X
CC = cc -Aa -D_HPUX_SOURCE
CXX = CC
X
CCPP = $(CC)
CXXPP = $(CXX)
X
export RANLIB = true
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/make/HP-UX.mki ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/make/HP-UX.mki failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/make/HP-UX.mki'`"
test 535 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/make/HP-UX.mki: original size 535, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/prog/Makefile ==============
if test ! -d 'bcs-2.0/unsupported/sample-baseline/prog'; then
    echo 'x - creating directory bcs-2.0/unsupported/sample-baseline/prog'
    mkdir 'bcs-2.0/unsupported/sample-baseline/prog'
fi
if test -f 'bcs-2.0/unsupported/sample-baseline/prog/Makefile' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/prog/Makefile (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/prog/Makefile (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/prog/Makefile' &&
CSRCS = main.c
LIBS = -lutil
TARGET = main
X
include $(MK)/cprog.mk
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/prog/Makefile ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/prog/Makefile failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/prog/Makefile'`"
test 67 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/prog/Makefile: original size 67, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/prog/RCS/Makefile,v ==============
if test ! -d 'bcs-2.0/unsupported/sample-baseline/prog/RCS'; then
    echo 'x - creating directory bcs-2.0/unsupported/sample-baseline/prog/RCS'
    mkdir 'bcs-2.0/unsupported/sample-baseline/prog/RCS'
fi
if test -f 'bcs-2.0/unsupported/sample-baseline/prog/RCS/Makefile,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/prog/RCS/Makefile,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/prog/RCS/Makefile,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/prog/RCS/Makefile,v' &&
head	1.1;
SHAR_EOF
true || echo 'restore of bcs-2.0/unsupported/sample-baseline/prog/RCS/Makefile,v failed'
fi
echo 'End of bcs-2.0 part 23'
echo 'File bcs-2.0/unsupported/sample-baseline/prog/RCS/Makefile,v is continued in part 24'
echo 24 > _shar_seq_.tmp
exit 0
