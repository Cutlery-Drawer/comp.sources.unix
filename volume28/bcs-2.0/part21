Newsgroups: comp.sources.unix
From: ejb@ERA.COM (Jay Berkenbilt)
Subject: v28i022: bcs-2.0 - A Baseline Configuration System, Part21/25
References: <1.764985670.1461@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: ejb@ERA.COM (Jay Berkenbilt)
Posting-Number: Volume 28, Issue 22
Archive-Name: bcs-2.0/part21

#!/bin/sh
# this is bcs.21 (part 21 of bcs-2.0)
# do not concatenate these parts, unpack them in order with /bin/sh
# file bcs-2.0/doc/bcs.info-3 continued
#
if test ! -r _shar_seq_.tmp; then
	echo 'Please unpack part 1 first!'
	exit 1
fi
(read Scheck
 if test "$Scheck" != 21; then
	echo Please unpack part "$Scheck" next!
	exit 1
 else
	exit 0
 fi
) < _shar_seq_.tmp || exit 1
if test ! -f _shar_wnt_.tmp; then
	echo 'x - still skipping bcs-2.0/doc/bcs.info-3'
else
echo 'x - continuing file bcs-2.0/doc/bcs.info-3'
sed 's/^X//' << 'SHAR_EOF' >> 'bcs-2.0/doc/bcs.info-3' &&
X          file.
X
X        - If the file in the baseline is prohibited from being
X          staged and the file is staged in the staging area,
X          print a warning to that effect.  *Do not remove the
X          file in the staging area.*
X
X        - If the file in the baseline is a link and the file within
X          the staging area is a file, print a warning to that effect.
X          *Do not remove the file in the staging area.*
X
X        - If the file in the baseline is a link and the file in the
X          staging area is a link or does not exist
X             * If the baseline file is a link to outside the baseline,
X                  make the staging area file a link to the baseline
X               file.
X
X             * If the baseline file is a link to within the baseline,
X                 make the staging area file a link to the corresponding
X                   file in the staging area.
X
X             * If the file is a dangling link, remove the staging area
X                  link if one exists.  (Dangling links without
X               baseline counterparts are also removed, but not in
X               this step.)
X
X   * Re-examine the staging area directories to take into account
X     the new files that could have been created.
X
X   * For each link in the staging area that is unimportant,       do
X     nothing if it points to an unimportant file within the
X     staging area.  Otherwise, remove it.  The reasoning here is
X     that, in general, unimportant links should be removed.  This
X     way, if an internal link is removed in the baseline,
X     `sync_staging' will cause it to be removed in       the staging
X     area as well if it was originally created       by `sync_staging'.
X     The exception would be internal       links that were created
X     manually to other unimportant       files.  `sync_staging' should
X     leave these       alone.
X
X   For full details, read the source.  The heart of the algorithms are
implemented in `staging.c' in the routine `bcsi_sync_staging_dir' and
`sync_file'.
X
X   Staging a file or directory is simply replacing a symbolic link in
the staging area with an actual file or directory.  In order for a file
to be a candidate for being staged, it must be a link to its baseline
counterpart (which must exist) and must not be explicitly forbidden
from being staged.  Staging a file involves removing the link and
copying the file, preserving the file's mode.  Staging a directory
involves replacing the link with an empty directory whose mode is based
on the user's umask and then synchronizing that directory with the
baseline.
X
X   The complicated part of staging is determining whether a file is
eligible to be staged.  Part of this determination may be based on the
actual path used to refer to the file.  Specifically, determining
eligibility for being staged involves two steps.  A file is directly
eligible if it is a link to its baseline counterpart and not explicitly
forbidden from being staged.  In addition, its baseline counterpart
cannot be a link.  A file is indirectly eligible to be staged if it is
logically part of the staging area but is actually in the baseline
because of crossing through symbolicly linked directories.  In order to
be a candidate for indirect eligibility for being staged, the file must
fail direct qualification only by virtue of being in the baseline.  In
this case, the following is done recursively:
X
X   * The directory portion of the non-canonicalized path to the
X     file is checked for eligibility.
X        - If it is directly eligible, then the original file can be
X          staged.  This directory becomes a "prerequisite
X          directory".
X
X        - If it is indirectly eligible, repeat this procedure
X          recursively on this directory.  This directory becomes 	 a
X          prerequisite directory.
X
X        - Otherwise, the original file is not eligible.
X
X   In the case of an indirectly eligible file, all prerequisite
directories are staged first.  Then, the actual file is staged.
X
X   ---------- Footnotes ----------
X
X   (1)  Only internal files are marked this       way.
X
X
File: bcs.info,  Node: Unstaging Files and Directories,  Prev: Staging and Synchronization,  Up: Internals
X
Unstaging Files and Directories
===============================
X
X   Unstaging files and directories can be a potentially dangerous
operation since BCS may actually remove files in the staging area in
this situation.  In order to make the operation as safe as possible
certain precautions are taken.
X
X   Unstaging a file involves replacing the file with a symbolic link to
its baseline counterpart.  For a file to be eligible to be unstaged, it
must be staged.  Unstaging a file that is already a link to its
baseline counterpart is not considered an error.  No action is taken in
this case.  If a file is eligible to be unstaged, the file is unstaged
without confirmation if it does not have a log in the underlying
configuration management system, is not a directory, and does not end
with a suffix specified in the `.baseline_conf' file.  If it does have a
log, it is unstaged without confirmation if the file is not writable
and if it appears to be up-to-date in the baseline.  If the file has a
history log and is writable or does not appear to be updated, or if the
file is an unimportant directory or an unimportant file with a special
suffix, unstaging will occur only under the following circumstances:
X
X   * Unstage is run interactively and the user responds
X     affirmatively to a prompt from the software;
X
X   * The `--force' or `-f' option       has been passed to the unstage
X     program.
X
X   If the `--force' flag has not been specified and the program is not
running interactively, the unstage program takes the same action as it
would take in response to a negative reply from the user to a prompt.
The unstage program is interactive by default if it is running from a
terminal.  (For UNIX programmers, this is true if `stdin' is a `tty'.)
It can be forced into interactive mode with the `--interactive' or `-i'
flag.
X
X   Unstaging a directory involves recursively removing the directory
and replacing it with a link to its baseline counterpart.  A directory
is eligible to be unstaged in the same way a file is; that is, it must
be staged.  In addition, all staged files in the directory must meet
all constraints for unstaging.  Unstaging a directory is an
all-or-nothing operation.  If there are any files in the directory that
would require confirmation before being unstaged, the names of the
files are presented and the user is asked for confirmation once.  Then
the entire unstage operation is either performed or canceled.  The same
behavior based on `--interactive' or `--force' applies here as does to
files.  In both cases, if the `--force' option is given, no checks are
performed and no warnings are issued to the user.
X
X   If a file is unimportant, removing it in an unstage operation
requires confirmation from the user if the file is a directory or ends
with one of the suffixes specified in the `unimp_warn_suffixes' line in
the `.baseline_conf' file.  These confirmations are not required if a
`.unimp_nowarn' file exists in the baseline directory for these files.
A good use of this is to add the line
X
X     unimp_warn_suffixes: .c .h .cc
X
to a `.baseline_conf' file.  Then, unstage will confirm before removing
unimportant `.c', `.h', or `.cc' files as well as unimportant
directories (which would generally exist in the staging area only if
they didn't have baseline counterparts).  This can be a good check
against forgetting to register new files in the baseline and could
potentially prevent the inadvertent loss of work.  The `.unimp_nowarn'
file could be useful in a directory that contains numerous
automatically generated source files or has many suspicious unimportant
files for another reason.  This will prevent unstage from asking
questions in this directory without preventing it from asking questions
in other directories.  At present, there is no way to be more specific
about when to ask and when not to ask for confirmation in these cases.
This could be a possible future expansion.
X
X   In the case of both files and directories, unstaging autostage files
*is permitted*.  In this case, however, instead of the files or
directories being replaced with links to their baseline counterparts,
they are replaced with freshly staged copies.  This means that
unstaging an autostage file is effectively the same as reverting any
changes that were made to it and unstaging an autostage directory is
effectively the same as recursively removing all unimportant files in
it and unstaging its contents.
X
X
File: bcs.info,  Node: Index,  Prev: Internals,  Up: Top
X
Index
*****
X
* Menu:
X
* .auto_stage file:                     Internal Files.
* .baseline_conf file:                  Internal Files.
* .baseline_path file:                  Internal Files.
* .important file:                      Internal Files.
* .no_stage file:                       Internal Files.
* .unimportant file:                    Internal Files.
* .unimp_nowarn file:                   Internal Files.
* acknowledgments:                      Acknowledgments.
* adding BCS to an existing baseline:   Adding BCS to an Existing Baseline.
* advantages of bcs:                    Advantages of BCS.
* authoritative copy:                   Baseline.
* automatically staged files:           Automatically Staged and Unstageable Files.
* baseline:                             Baseline.
* baseline containment commands:        Baseline Containment Commands.
* baseline creation:                    Creating the Baseline.
* BASELINE environment variable:        Environment Variables.
* baseline example:                     Example Baseline.
* baseline structure:                   Baseline Structure.
* bcs command:                          Staging Area Maintenance Commands.
* BCS commands:                         BCS Command Summary.
* bcs_info command:                     File Classification Commands.
* classification of files:              Important and Unimportant Files.
* classify_files command:               File Classification Commands.
* command descriptions:                 Command Descriptions.
* command summary:                      BCS Command Summary.
* commandline flags:                    Standard Options.
* common operations:                    Common Operations.
* configuration history:                History Logs.
* configuration management:             Configuration Management.
* configuration management logs:        History Logs.
* configuration management package interface: Configuration Management Package Interface.
* converting a baseline to use BCS:     Adding BCS to an Existing Baseline.
* copying:                              Copying.
* creating staging areas:               Creating Staging Areas.
* creating the baseline:                Creating the Baseline.
* debugging:                            Debugging.
* definition of terms:                  Definition of Terms.
* determining file importance:          Important and Unimportant Files.
* environment variables:                Environment Variables.
* example baseline:                     Example Baseline.
* file classification:                  Important and Unimportant Files.
* file classification commands:         File Classification Commands.
* file importance:                      Important and Unimportant Files.
* file information caching:             Caching File System Information.
* file information table:               The File Information Table.
* frequently used commands:             Common Operations.
* future enhancements:                  Possible Future Enhancements.
* hierarchical staging areas:           Hierarchical Staging Areas.
* history logs:                         History Logs.
* id_important command:                 File Classification Commands.
* id_staged command:                    File Classification Commands.
* id_unimportant command:               File Classification Commands.
* importance:                           Important and Unimportant Files.
* importance of files:                  Important and Unimportant Files.
* important files:                      Important and Unimportant Files.
* important files:                      Important and Unimportant Files.
* incremental merging:                  Maintaining Baseline Stability.
* individual work area:                 Staging Area.
* inherited staging areas:              Hierarchical Staging Areas.
* initial baseline creation:            Creating the Baseline.
* initial setup:                        Setting up BCS.
* integrating changes:                  Integration of Changes in Two Staging Areas.
* internal files:                       Internal Files.
* in_baseline command:                  Baseline Containment Commands.
* in_staging_area command:              Baseline Containment Commands.
* license restrictions:                 Copying.
* maintaining baseline stability:       Maintaining Baseline Stability.
* making new staging areas:             Creating Staging Areas.
* merging procedures:                   Maintaining Baseline Stability.
* multi-platform support:               Support for a Multi-platform Environment.
* multiple developers:                  Multiple Simultaneous Developers.
* multiple software revisions:          Maintenance of Multiple Revisions of Software.
* new staging areas:                    Creating Staging Areas.
* overview of BCS:                      Overview of BCS.
* porting to multiple platforms:        Support for a Multi-platform Environment.
* preventing files from being staged:   Automatically Staged and Unstageable Files.
* RCS logs:                             History Logs.
* RCS support:                          RCS support.
* redistribution:                       Copying.
* register_file command:                Staging Area Maintenance Commands.
* restricting access:                   Secure Baseline.
* revision control:                     Version Control.
* SCCS logs:                            History Logs.
* SCCS support:                         SCCS support.
* secure baseline:                      Secure Baseline.
* setting up BCS:                       Setting up BCS.
* source code layout:                   Baseline Structure.
* stage command:                        Staging Area Maintenance Commands.
* staging:                              Staging and Synchronization.
* staging area:                         Staging Area.
* staging area creation:                Creating Staging Areas.
* staging area maintenance commands:    Staging Area Maintenance Commands.
* STAGING environment variable:         Environment Variables.
* staging files automatically:          Automatically Staged and Unstageable Files.
* standard command line options:        Standard Options.
* standard flags:                       Standard Options.
* structure of baseline:                Baseline Structure.
* supported configuration management systems: Supported Configuration Management Systems.
* supporting new configuration management package: Configuration Management Package Interface.
* synchronization:                      Staging and Synchronization.
* sync_staging command:                 Staging Area Maintenance Commands.
* term definitions:                     Definition of Terms.
* terms and conditions:                 Copying.
* unimportant files:                    Important and Unimportant Files.
* unimportant files:                    Important and Unimportant Files.
* unstage command:                      Staging Area Maintenance Commands.
* unstageable files:                    Automatically Staged and Unstageable Files.
* unstaging:                            Unstaging Files and Directories.
* update_baseline command:              Staging Area Maintenance Commands.
* using BCS with RCS:                   RCS support.
* using BCS with SCCS:                  SCCS support.
* version control:                      Version Control.
* why BCS?:                             Advantages of BCS.
* work area:                            Staging Area.
X
X
SHAR_EOF
echo 'File bcs-2.0/doc/bcs.info-3 is complete' &&
chmod 0664 bcs-2.0/doc/bcs.info-3 ||
echo 'restore of bcs-2.0/doc/bcs.info-3 failed'
Wc_c="`wc -c < 'bcs-2.0/doc/bcs.info-3'`"
test 19389 -eq "$Wc_c" ||
	echo 'bcs-2.0/doc/bcs.info-3: original size 19389, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/Artistic ==============
if test -f 'bcs-2.0/Artistic' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/Artistic (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/Artistic (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/Artistic' &&
X
X
X
X
X			 The "Artistic License"
X
X				Preamble
X
The intent of this document is to state the conditions under which a
Package may be copied, such that the Copyright Holder maintains some
semblance of artistic control over the development of the package,
while giving the users of the package the right to use and distribute
the Package in a more-or-less customary fashion, plus the right to make
reasonable modifications.
X
Definitions:
X
X	"Package" refers to the collection of files distributed by the
X	Copyright Holder, and derivatives of that collection of files
X	created through textual modification.
X
X	"Standard Version" refers to such a Package if it has not been
X	modified, or has been modified in accordance with the wishes
X	of the Copyright Holder.
X
X	"Copyright Holder" is whoever is named in the copyright or
X	copyrights for the package.
X
X	"You" is you, if you're thinking about copying or distributing
X	this Package.
X
X	"Reasonable copying fee" is whatever you can justify on the
X	basis of media cost, duplication charges, time of people involved,
X	and so on.  (You will not be required to justify it to the
X	Copyright Holder, but only to the computing community at large
X	as a market that must bear the fee.)
X
X	"Freely Available" means that no fee is charged for the item
X	itself, though there may be fees involved in handling the item.
X	It also means that recipients of the item may redistribute it
X	under the same conditions they received it.
X
1. You may make and give away verbatim copies of the source form of the
Standard Version of this Package without restriction, provided that you
duplicate all of the original copyright notices and associated disclaimers.
X
2. You may apply bug fixes, portability fixes and other modifications
derived from the Public Domain or from the Copyright Holder.  A Package
modified in such a way shall still be considered the Standard Version.
X
3. You may otherwise modify your copy of this Package in any way, provided
that you insert a prominent notice in each changed file stating how and
when you changed that file, and provided that you do at least ONE of the
following:
X
X    a) place your modifications in the Public Domain or otherwise make them
X    Freely Available, such as by posting said modifications to Usenet or
X    an equivalent medium, or placing the modifications on a major archive
X    site such as uunet.uu.net, or by allowing the Copyright Holder to include
X    your modifications in the Standard Version of the Package.
X
X    b) use the modified Package only within your corporation or organization.
X
X    c) rename any non-standard executables so the names do not conflict
X    with standard executables, which must also be provided, and provide
X    a separate manual page for each non-standard executable that clearly
X    documents how it differs from the Standard Version.
X
X    d) make other distribution arrangements with the Copyright Holder.
X
4. You may distribute the programs of this Package in object code or
executable form, provided that you do at least ONE of the following:
X
X    a) distribute a Standard Version of the executables and library files,
X    together with instructions (in the manual page or equivalent) on where
X    to get the Standard Version.
X
X    b) accompany the distribution with the machine-readable source of
X    the Package with your modifications.
X
X    c) accompany any non-standard executables with their corresponding
X    Standard Version executables, giving the non-standard executables
X    non-standard names, and clearly documenting the differences in manual
X    pages (or equivalent), together with instructions on where to get
X    the Standard Version.
X
X    d) make other distribution arrangements with the Copyright Holder.
X
5. You may charge a reasonable copying fee for any distribution of this
Package.  You may charge any fee you choose for support of this Package.
You may not charge a fee for this Package itself.  However,
you may distribute this Package in aggregate with other (possibly
commercial) programs as part of a larger (possibly commercial) software
distribution provided that you do not advertise this Package as a
product of your own.
X
6. The scripts and library files supplied as input to or produced as
output from the programs of this Package do not automatically fall
under the copyright of this Package, but belong to whomever generated
them, and may be sold commercially, and may be aggregated with this
Package.
X
7. C subroutines supplied by you and linked into this Package in order
to emulate subroutines and variables of the language defined by this
Package shall not be considered part of this Package, but are the
equivalent of input as in Paragraph 6, provided these subroutines do
not change the language in any way that would cause it to fail the
regression tests for the language.
X
8. The name of the Copyright Holder may not be used to endorse or promote
products derived from this software without specific prior written permission.
X
9. THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
X
X				The End
SHAR_EOF
chmod 0644 bcs-2.0/Artistic ||
echo 'restore of bcs-2.0/Artistic failed'
Wc_c="`wc -c < 'bcs-2.0/Artistic'`"
test 5182 -eq "$Wc_c" ||
	echo 'bcs-2.0/Artistic: original size 5182, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/ChangeLog ==============
if test -f 'bcs-2.0/ChangeLog' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/ChangeLog (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/ChangeLog (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/ChangeLog' &&
Sat Mar 19 09:48:28 1994  Jay Berkenbilt  (qjb@tabetha)
X
X	* BCS 2.0 released
X
X	* Remove beta status
X
X	* Convert documentation to texinfo
X
X	* Add more .unimp_nowarn test cases
X
Mon Mar 14 16:53:44 1994  Jay Berkenbilt  (ejb@teal)
X
X	* Fix bug that prevented .unimp_nowarn files from working
X
Tue Feb 22 09:39:01 1994  Jay Berkenbilt  (ejb@teal)
X
X	* Prevent unstage from unstaging directories that contain the
X	current directory directly or indirectly.
X
X	* Added test cases for above changes.
X
Fri Feb 11 12:44:31 1994  Jay Berkenbilt  (qjb@tabetha)
X
X	* Beta patch level 2 released
X
X	* Added --silent flag
X
X	* Removed some potentially offensive wording from error messages. 
X
X	* Changed error and diagnostic messages to do automatic linewrap.
X	Updated test driver to handle these changes.
X
X	* Made debugging support compile-time selectable as well as
X	run-time. 
X
X	* Changed register_file so that if the file exists in the staging
X	area, it will be copied into the baseline instead of having an
X	empty file created in the baseline.
X
X	* Moved several routines from staging.c to util.c
X
X	* Don't automatically invoke autoconf if configure is older than
X	configure.in.
X
X	* Simplify makefiles a bit further to allow a few additional
X	native makes to handle the system.
X
Tue Jan 25 14:11:18 1994  Jay Berkenbilt  (qjb@tabetha)
X
X	* Fixed typo in comment in one fine
X
Tue Jan 11 10:39:31 1994  Jay Berkenbilt  (ejb@teal)
X
X	* Beta Patch level 1 released
X
X	* Include minimal manual pages (based on files contributed by
X	Christian Lindig (lindig@ips.cs.tu-bs.de))
X
X	* Support alternative RCS logfile names.  Add test case for this
X	functionality 
X
Mon Jan 10 22:30:53 1994  Jay Berkenbilt  (qjb@tabetha)
X
X	* Removed references to BCS version 1 from documentation. 
X
Sun Jan  9 10:27:09 1994  Jay Berkenbilt  (qjb@tabetha)
X
X	* Added sample baseline to distribution
X
X	* Added future enhancements and example uses sections to
X	documentation 
X
X	* Added license information to each source file
X
X	* Made several documentation updates
X
Sat Jan  8 21:57:12 1994  Jay Berkenbilt  (qjb@tabetha)
X
X	* Add path debug flag and documented it
X
X	* Clean up debug messages a bit
X
X	* Change name of type path_info to bcs_path_info to avoid having
X	type and variable names conflict
X
X	* Remove *~ in additional subdirectories for top-level make clean
X
X	* Stage on a file in the baseline or neither in the baseline nor
X	the staging area now prints an error message.  A test case has
X	been added for each case.
X
Sun Dec  5 13:13:11 1993  Jay Berkenbilt  (qjb@tabetha)
X
X	* 2.0 beta released
X
X	* Conformed to more gnu makefile standards and made makefiles not
X	require gnumake to run.
X
X	* Included COPYING, README, and INSTALL files
X
X	* Ran spelling checker over code for comments and error messages 
X
X	* Added acknowledgements to documentation
X
X	* Added documentation sources to source distribution
X
Mon Nov 15 07:46:40 1993  Jay Berkenbilt  (qjb@tabetha)
X
X	* patch level 10 released
X
X	* Added compilation time stamp to --version
X
Sun Nov 14 21:58:10 1993  Jay Berkenbilt  (qjb@tabetha)
X
X	* Changed classify_files family of commands to accept files as well
X	as directories and to be more tolerant of errors on the command
X	line.  Added -descend and -nodescend
X
X	* Updated documentation with above change
X
X	* Merged bcs_info with classify_files
X
Fri Nov 12 11:46:10 1993  Jay Berkenbilt  (ejb@teal)
X
X	* patch level 9 released
X
X	* Converted Makefiles to use manual dependencies instead of
X	automatically generated now that dependencies have stablized
X
X	* Fixed uninitialized pointer access when commands are run with no
X	BASELINE variable or --baseline command
X
X	* Added test cases for the following two bug fixes
X
X	* Check during stage to make sure stage prerequisites all still
X	exist since they could disappear in cases where an unimportant
X	file is staged through a linked directory
X
X	* Fixed bug that allowed unimportant files to be staged if a link
X	to a baseline counterpart existed in the staging area
X
Mon Nov  8 10:47:47 1993  Jay Berkenbilt  (ejb@teal)
X
X	* patch level 8 released 
X
X	* Updated documentation with bcs_info command
X
X	* Added names for each test case
X
X	* Added remaining missing prototypes to sunos_proto.h for a
X	no-warning compile with gcc -Wall on SunOS 4.1.3
X
Sat Nov  6 23:21:37 1993  Jay Berkenbilt  (qjb@tabetha)
X
X	* Added bcs_info command which provides general bcs informaton about
X	given files or directories.  This command can be useful for debugging
X	baseline configurations.
X
X	* Change situation of file having locks while being updated to a
X	warning instead of an error.
X
X	* Against my principles, changed occurences of variables named
X	"index" to "indx" to avoid possible conflict with the index() library
X	function on systems without strchr().
X
X	* Added support to register_file (for RCS only) to detect and
X	preserve execute bits on files being registered.
X
Thu Oct 28 17:06:25 1993  Jay Berkenbilt  (ejb@teal)
X
X	* patch level 7 released
X
X	* BCS shown to pass purify with no errors or leaks.
X
X	* Possibly incorrect reference to $STAGING environment variable
X	removed from documentation.
X
X	* Test cases have been added for all previously reported bugs.
X
X	* Some things that were going to stdout now go to stderr.
X
X	* Badly worded error message in checkin/checkout fixed.
X
X	* Register_file fails if prospective file has a log even if the
X	file itself does not exist.
X
X	* Refuse to update baseline for a file that is locked or whose
X	baseline counterpart is writable.
X
Sun Oct 24 09:29:09 1993  Jay Berkenbilt  (qjb@tabetha)
X
X	* patch level 6 released
X
X	* Optimize examine_dir so that it takes advantage of
X	existing path_info information instead of repeatedly
X	traversing the path cache.
X
X	* Fix bcs_examine_dir so that it does a depth first
X	search.
X
Sat Oct 23 10:36:03 1993  Jay Berkenbilt  (qjb@tabetha)
X
X	* fix all programs and init code to only call usage under rare
X	circumstances or when the user invokes the programs with the
X	--help option.  Otherwise, print a message directing the user to
X	the --help option.
X
X	* Change bcs_examine_dir to take a callback function instead of
X	returning a list of file information structures.  This way, long,
X	recursive programs can produce their output as they go instead of
X	all at once.  Currently, though, since examine_dir is
X	breadth-first, the output is sorted oddly.  This can be fixed in a
X	later release.
X
Mon Oct 18 16:20:29 1993  Jay Berkenbilt  (ejb@era.ERA.COM)
X
X	* patch level 5 released
X
X	* for external links in the baseline, the staging area file points
X	to its baseline counterpart instead of to the external file.  This
X	is so the file will be pointing to the right place if the external
X	link is relative.
X
X	* never use relative paths for internal links since this could
X	have the wrong results for baselines and staging areas that span
X	multiple file systems
X
X	* follow links to as many levels as possible when computing link
X	type and syncrhonizing staging area.
X
Sun Oct 17 21:15:16 1993  Jay Berkenbilt  (ejb@tabetha)
X
X        * patch level 4 released
X
X	* make sure stage makes staged files read-only when they
X	have logs even if they are read/write in the baseline.
X
X	* fix case of multiple levels of links causing invalid
X	link type errors
X
X	* handle cases when a link comes sooner than its target
X	in directory order
X
X	* fixed error in stage.test so that a test that should
X	have failed is now correct
X
X	* Completely rewrite filesystem cache and file
X	information table cache.  This should fix all known
X	caching bugs, eliminate several chances for infinite
X	loops, and provide increased performance
X
Mon Sep 27 13:09:59 1993  Jay Berkenbilt  (ejb@sebastian)
X
X	* patch level 3 released
X
X	* reduce stage.test test cases so that not all get run for all
X	configurations.  Only sync_staging of top-level really needs to be
X	tested specially for all configurations.
X
X	* Don't try to stage a file from checkout operations when the file
X	is not important.
X
X	* Never mark a file as staged when its baseline counterpart is a
X	link.
X
X	* Implement lstat caching so that file information table lookups
X	are not so expensive.  
X
X	* Allow leading and trailing white space in .important,
X	.unimportant, .auto_stage, and .no_stage files.
X
X	* patch level 2 released
X
X	* fixed run-time invalid memory access 
X
X	* patch level 1 released (September 10 or so)
X
X	* Fixed bug where id_staged would think unimportant files were
X	staged. 
X
X	* Started change log retroactively.  Changes up to patch level 3
X	are my best attempt at remembering...
SHAR_EOF
chmod 0444 bcs-2.0/ChangeLog ||
echo 'restore of bcs-2.0/ChangeLog failed'
Wc_c="`wc -c < 'bcs-2.0/ChangeLog'`"
test 8493 -eq "$Wc_c" ||
	echo 'bcs-2.0/ChangeLog: original size 8493, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/Makefile.in ==============
if test -f 'bcs-2.0/Makefile.in' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/Makefile.in (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/Makefile.in (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/Makefile.in' &&
#
# Note: the following RCS strings refer to Makefile.in, not Makefile
# $Id: Makefile.in,v 1.19 1994/03/19 15:14:09 qjb Exp $
# $Source: /local/tmp/bcs-2.0/RCS/Makefile.in,v $
# $Author: qjb $
#
# Top-level BCS Makefile.
#
X
SHELL = /bin/sh
X
srcdir=@srcdir@
X
RUNTEST= runtest
RUNTESTFLAGS=
X
all: 
X	(cd lib; $(MAKE) $(MFLAGS))
X	(cd progs; $(MAKE) $(MFLAGS))
X	(cd man; $(MAKE) $(MFLAGS))
X
install: all
X	(cd progs; $(MAKE) $(MFLAGS) install)
X	(cd man; $(MAKE) $(MFLAGS) install)
X	(cd doc; $(MAKE) $(MFLAGS) install)
X
uninstall:
X	(cd progs; $(MAKE) $(MFLAGS) uninstall)
X	(cd man; $(MAKE) $(MFLAGS) uninstall)
X	(cd doc; $(MAKE) $(MFLAGS) uninstall)
X
clean:
X	-(cd lib; $(MAKE) clean)
X	-(cd progs; $(MAKE) clean)
X	-(cd doc; $(MAKE) clean)
X	-(cd man; $(MAKE) clean)
X	$(RM) *~ *% core a.out *.[od] *.tmp*
X	$(RM) include/*~ make/*~ man/*~ tests/*~ doc/*~
X	-rm -rf testdir
X
# Nothing special for mostlycleana
mostlyclean: clean
X
TAGS: FORCE
X	etags -t */*.[ch]
X
tags: FORCE
X	ctags */*.[ch]
X
distclean: clean
X	$(RM) make/config.mk Makefile config.status include/config.h
X	$(RM) TAGS tags
X
realclean: distclean
X	$(RM) configure include/config.h.in
X	$(RM) doc/*.PS doc/*.EPS doc/*.info*
X
config.status: include/config.h.in configure
X	./configure
X
.PHONY: all install clean distclean realclean uninstall update-autoconf
X
autoconf: config.status make/config.mk.in include/config.h.in Makefile.in
X
#
# It is not appropriate to include dependencies to rebuild this Makefile 
# in the released distribution.  Users are expected to run configure.
# This is really only useful when debugging and when autoconf is present.
#
# make/config.mk include/config.h Makefile: autoconf
# 	./config.status
# 
X
X
configure: configure.in
X	autoconf
X
include/config.h.in: configure.in
X	autoheader
X	touch include/config.h.in
X
info:
X	echo "There is not yet any info documentation for BCS."
X	exit 1
X
dvi:
X	-(cd doc; $(MAKE) $(MFLAGS) bcs.dvi)
X
check: all test
X
test: run-test
X
run-test:
X	perl bcs_test ${srcdir} ${srcdir}/progs ${srcdir}/tests ${srcdir}/testdir
X
# Dummy target to force others to rebuild
FORCE:
SHAR_EOF
chmod 0444 bcs-2.0/Makefile.in ||
echo 'restore of bcs-2.0/Makefile.in failed'
Wc_c="`wc -c < 'bcs-2.0/Makefile.in'`"
test 2072 -eq "$Wc_c" ||
	echo 'bcs-2.0/Makefile.in: original size 2072, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/README ==============
if test -f 'bcs-2.0/README' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/README (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/README (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/README' &&
OVERVIEW
========
X
BCS, the Baseline Configuration System is a software package
that provides software developers with the ability to have a
stable, potentially read-only software baseline and to have
multiple "staging areas" in which individual developers can
work.  It adds concurrency to existing version control systems
such as RCS or SCCS.  BCS is tightly integrated with the
underlying version control system so that all users share the
same configuration logs and history files.  The current release
of BCS allows an arbitrary number of staging areas to exist in
any location.  Each staging area contains copies of only the
actual software components that the individual who owns the
staging area is actually working on.  Tools are provided that
can keep staging areas synchronized with the baseline as new
files are added and old files are removed.
X
BCS itself requires minimal disk space to install and operate.
When integrated properly with the compilation environment, it
can be used transparently to allow users to have effectively
private work environments in which they can test changes
carefully before making their changes visible to the rest of the
development community.  The amount of disk space overhead in the
staging areas can be large, however, and is a function of the
size of your software baseline.
X
BCS provides a different approach to concurrency from CVS.  It
also provides slightly different functionality from Aegis.  At
the moment, there are no plans to integrate them, but if anyone
has suggestions in this area, I would be interested in hearing
them.
X
For more information about BCS, please refer to the postscript
or info documentation included.  You may also look at the sample
baseline along with supporting makefiles included in the
unsupported/sample-baseline directory.
X
INSTALLATION
============
X
At the moment, BCS requires a reasonably intelligent make (that
supports include and pattern substitution) to compile, and it
also needs an ANSI C compiler.  Sun's native make works, but gnu
make will probably be required on at some platforms.  I
recommend that you use GNU make.  I am assuming that most people
who would be using such a tool will have those.  If you would
have used BCS and this is the only thing that stops you, please
let me know so I can consider adjusting the makefiles or the
software accordingly.  Note that BCS compiles with gcc and GNU
make.  In order to use RCS with BCS, you need a recent version
of RCS.  RCS 5.6 is known to work.  RCS 3.0, which comes with
HP-UX 9.01, does not work with an unmodified BCS.  (Sorry, no
patches available right now.)  In addition, the BCS test suite
uses arguments to rcs commands that are not supported in some
earlier versions.
X
To build and install BCS, cd to the source directory, type
./configure, and then "make".  Install with "make install".  For
detailed information on building and installing BCS, see the
INSTALL file.
X
BCS comes with an automated test suite which you can run with
"make test" or "make check" once you've configured.  You must
have perl (version 4) installed and in your path as "perl" to
run the test suite.
X
BCS is known to compile and pass its regression test suite under
SunOS 4.1.3 with gcc, Solaris 2.2 or 2.3 with gcc, SGI IRIX
4.0.5H with the native compiler and with gcc, IRIX 5.0.1, Linux,
HP9000/720 running HP-UX 9.01 with "-Aa -D_HPUX_SOURCE" flags,
and Dec/Alpha running OSF-1, and Ultrix 4.3.  It will probably
work on a wide range of other platforms with ansi-compliant
compilers (or at least those that recognize function prototypes)
as well.
X
BCS has a fairly thorough texinfo users manual which is included
with the distribution.  Postscript and info versions of the
documentation are included as well.  All commands support the
standard gnu --help option.  A user kindly contributed minimal
manual pages which are included, but they are not maintained.
The info documentation should be considered the authoritative
on-line documentation source.
X
X
LICENSING
=========
BCS is distributed under the terms of the GNU General Public
License and/or the Artistic license.  Copies of these licenses
are included with this distribution in the files COPYING (for
the GPL) and Artistic (for the Artistic license).
X
BUGS, COMMENTS, ETC.
====================
Please mail bugs, comments, etc. to Jay Berkenbilt at
ejb@ERA.COM.
X
X
# $Id: README,v 1.10 1994/03/19 15:06:52 qjb Exp $
SHAR_EOF
chmod 0444 bcs-2.0/README ||
echo 'restore of bcs-2.0/README failed'
Wc_c="`wc -c < 'bcs-2.0/README'`"
test 4414 -eq "$Wc_c" ||
	echo 'bcs-2.0/README: original size 4414, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/acconfig.h ==============
if test -f 'bcs-2.0/acconfig.h' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/acconfig.h (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/acconfig.h (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/acconfig.h' &&
/* Autoheader needs the blank line... */
X
X
/* Define if `sys_errlist' is declared in <errno.h>.  */
#undef SYS_ERRLIST_DECLARED
X
/* Define if `errno' is declared in <errno.h>.  */
#undef ERRNO_DECLARED
X
/* Define if `free' is declared in <stdlib.h>.  */
#undef FREE_DECLARED
X
SHAR_EOF
chmod 0444 bcs-2.0/acconfig.h ||
echo 'restore of bcs-2.0/acconfig.h failed'
Wc_c="`wc -c < 'bcs-2.0/acconfig.h'`"
test 277 -eq "$Wc_c" ||
	echo 'bcs-2.0/acconfig.h: original size 277, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/bcs_test ==============
if test -f 'bcs-2.0/bcs_test' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/bcs_test (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/bcs_test (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/bcs_test' &&
#!/usr/local/bin/perl -w-- -*- perl -*-
#
# $Id: bcs_test,v 1.4 1994/01/11 15:35:58 ejb Exp $
# $Source: /local/tmp/bcs-2.0/RCS/bcs_test,v $
# $Author: ejb $
#
# Author: E. Jay Berkenbilt (ejb@ERA.COM)
# This script performs regression tests.  This file is in the public 
# domain.  Feel free to use it with your own sources.  It contains no
# bcs-specific code.  This file requires use of the tests/test_routines.pl
# and tests/setup.pl file as well.
#
X
{
X    local(@whoami) = split('/', $0);
X    $whoami = pop(@whoami);
};
X
(scalar(@ARGV) == 4) || die "Usage: $whoami srcdir bindir tests testdir\n";
($srcdir, $bindir, $tests, $testdir) = (@ARGV);
X
X
$| = 1;
$SIG{"INT"} = 'quit';
X
chop($pwd = `pwd`);
chdir($bindir) || die "can't find $bindir\n";
chop($bindir = `pwd`);
chdir($pwd);
$ENV{"PATH"} = "$bindir:" . $ENV{"PATH"};
X
(-d $testdir) && &rmrf($testdir);
(-d "$testdir") && die "Removal of $testdir failed; aborting tests.\n";
X
mkdir($testdir, 0777) || die "mkdir $testdir: $!\n";
chdir($testdir);
chop($testdir = `pwd`);
chdir($pwd);
X
X
$tottests = $totpasses = $totfails = $totxpasses = $totxfails = 0;
X
print "\n\nSTARTING TESTS\n\n";
X
for (<$tests/*.test>)
{
X    local(@results);
X    print "Running $_\n";
X    chop($result = &runcmd("perl $_ $srcdir $bindir $tests $testdir"));
X    @results = split(' ', $result);
X    if (scalar(@results) != 4)
X    {
X	print STDERR "Test driver $_ returned invalid results ($result)\n";
X    }
X    else
X    {
X	local($passes, $fails, $xpasses, $xfails) = @results;
X	$totpasses += $passes;
X	$totfails += $fails;
X	$totxpasses += $xpasses;
X	$totxfails += $xfails;
X	$tottests += ($passes + $fails + $xpasses + $xfails);
X    }
}
X
X
print "\n\TESTS COMPLETE.  Summary:\n\n";
X
printf("Total tests: %d\n" .
X       "Passes: %d\n" .
X       "Failures: %d\n" .
X       "Unexpected Passes: %d\n" .
X       "Expected Failures: %d\n",
X       $tottests, $totpasses, $totfails, $totxpasses, $totxfails);
X
exit ((($totpasses + $totxfails) == $tottests) ? 0 : 1);
X
sub runcmd {
X    local($cmd) = @_;
X    local($result);
X    # $pid is global on purpose so quit can use it
X    $| = 1;
X    ($pid = open(CMD, "-|")) || exec $cmd;
X    $result = "";
X    while (<CMD>)
X    {
X	$result .= $_;
X    }
X    undef($pid);
X    close(CMD);
X    $result;
}
X
sub quit {
X    defined($pid) && $pid && kill 15, $pid;
X    exit -1;
}
X
sub rmrf {
X    local($file) = @_;
X    system("rm -rf $file");
}
SHAR_EOF
chmod 0444 bcs-2.0/bcs_test ||
echo 'restore of bcs-2.0/bcs_test failed'
Wc_c="`wc -c < 'bcs-2.0/bcs_test'`"
test 2393 -eq "$Wc_c" ||
	echo 'bcs-2.0/bcs_test: original size 2393, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/configure.in ==============
if test -f 'bcs-2.0/configure.in' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/configure.in (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/configure.in (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/configure.in' &&
dnl Process this file with autoconf to produce a configure script.
dnl This config.in uses some features new to autoconf 1.5.
dnl 
dnl  $Id: configure.in,v 1.10 1994/01/09 04:04:37 qjb Exp $
dnl  $Source: /local/tmp/bcs-2.0/RCS/configure.in,v $
dnl  $Author: qjb $
dnl 
AC_INIT(include/bcs.h)
AC_CONFIG_HEADER(include/config.h)
AC_PREFIX("rcs")
AC_LN_S
AC_PROG_CC
if test "$CC" = "gcc" ; then XCFLAGS="-Wall"; fi
AC_SUBST(XCFLAGS)
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_MINIX
AC_STDC_HEADERS
dnl some systems have stdarg.h and stdlib.h without other stdc headers
AC_HAVE_HEADERS(stdarg.h stdlib.h unistd.h)
AC_HAVE_HEADERS(string.h memory.h sys/param.h)
AC_DIR_HEADER
AC_XENIX_DIR
AC_VPRINTF
AC_STAT_MACROS_BROKEN
AC_CONST
AC_HAVE_FUNCS(getcwd strerror sys_errlist _sys_errlist)
AC_COMPILE_CHECK(declaration of sys_errlist in errno.h,
X		 [#include <errno.h>], [char *msg = sys_errlist[0];],
X		 AC_DEFINE(SYS_ERRLIST_DECLARED))
AC_COMPILE_CHECK(declaration of errno in errno.h,
X		 [#include <errno.h>], [int f() {return errno;}],
X		 AC_DEFINE(ERRNO_DECLARED))
AC_COMPILE_CHECK(declaration of free in stdlib.h,
X		 [#include <stdlib.h>], [void (*f)() = free;],
X		 AC_DEFINE(FREE_DECLARED))
AC_OUTPUT(Makefile make/config.mk)
SHAR_EOF
chmod 0444 bcs-2.0/configure.in ||
echo 'restore of bcs-2.0/configure.in failed'
Wc_c="`wc -c < 'bcs-2.0/configure.in'`"
test 1217 -eq "$Wc_c" ||
	echo 'bcs-2.0/configure.in: original size 1217, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/.baseline_conf ==============
if test ! -d 'bcs-2.0/unsupported'; then
    echo 'x - creating directory bcs-2.0/unsupported'
    mkdir 'bcs-2.0/unsupported'
fi
if test ! -d 'bcs-2.0/unsupported/sample-baseline'; then
    echo 'x - creating directory bcs-2.0/unsupported/sample-baseline'
    mkdir 'bcs-2.0/unsupported/sample-baseline'
fi
if test -f 'bcs-2.0/unsupported/sample-baseline/.baseline_conf' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/.baseline_conf (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/.baseline_conf (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/.baseline_conf' &&
cm: RCS
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/.baseline_conf ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/.baseline_conf failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/.baseline_conf'`"
test 8 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/.baseline_conf: original size 8, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/.unimportant ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/.unimportant' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/.unimportant (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/.unimportant (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/.unimportant' &&
staging
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/.unimportant ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/.unimportant failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/.unimportant'`"
test 8 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/.unimportant: original size 8, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/Makefile ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/Makefile' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/Makefile (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/Makefile (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/Makefile' &&
LIB_SUBDIRS = library
BIN_SUBDIRS = prog
X
include $(MK)/toplevel.mk
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/Makefile ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/Makefile failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/Makefile'`"
test 68 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/Makefile: original size 68, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/RCS/.baseline_conf,v ==============
if test ! -d 'bcs-2.0/unsupported/sample-baseline/RCS'; then
    echo 'x - creating directory bcs-2.0/unsupported/sample-baseline/RCS'
    mkdir 'bcs-2.0/unsupported/sample-baseline/RCS'
fi
if test -f 'bcs-2.0/unsupported/sample-baseline/RCS/.baseline_conf,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/RCS/.baseline_conf,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/RCS/.baseline_conf,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/RCS/.baseline_conf,v' &&
head	1.1;
access;
symbols
X	BETA_1:1.1;
locks; strict;
comment	@# @;
X
X
1.1
date	94.01.09.22.04.07;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@cm: RCS
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/RCS/.baseline_conf,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/RCS/.baseline_conf,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/RCS/.baseline_conf,v'`"
test 194 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/RCS/.baseline_conf,v: original size 194, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/RCS/.unimportant,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/RCS/.unimportant,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/RCS/.unimportant,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/RCS/.unimportant,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/RCS/.unimportant,v' &&
head	1.1;
access;
symbols
X	BETA_1:1.1;
locks; strict;
comment	@# @;
X
X
1.1
date	94.01.09.22.42.57;	author qjb;	state Exp;
branches;
next	;
X
X
desc
@@
X
X
1.1
log
@Initial revision
@
text
@staging
@
SHAR_EOF
chmod 0444 bcs-2.0/unsupported/sample-baseline/RCS/.unimportant,v ||
echo 'restore of bcs-2.0/unsupported/sample-baseline/RCS/.unimportant,v failed'
Wc_c="`wc -c < 'bcs-2.0/unsupported/sample-baseline/RCS/.unimportant,v'`"
test 194 -eq "$Wc_c" ||
	echo 'bcs-2.0/unsupported/sample-baseline/RCS/.unimportant,v: original size 194, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/unsupported/sample-baseline/RCS/Makefile,v ==============
if test -f 'bcs-2.0/unsupported/sample-baseline/RCS/Makefile,v' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/unsupported/sample-baseline/RCS/Makefile,v (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/unsupported/sample-baseline/RCS/Makefile,v (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/unsupported/sample-baseline/RCS/Makefile,v' &&
head	1.1;
SHAR_EOF
true || echo 'restore of bcs-2.0/unsupported/sample-baseline/RCS/Makefile,v failed'
fi
echo 'End of bcs-2.0 part 21'
echo 'File bcs-2.0/unsupported/sample-baseline/RCS/Makefile,v is continued in part 22'
echo 22 > _shar_seq_.tmp
exit 0
