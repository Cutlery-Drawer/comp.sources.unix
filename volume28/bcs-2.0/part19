Newsgroups: comp.sources.unix
From: ejb@ERA.COM (Jay Berkenbilt)
Subject: v28i020: bcs-2.0 - A Baseline Configuration System, Part19/25
References: <1.764985670.1461@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: ejb@ERA.COM (Jay Berkenbilt)
Posting-Number: Volume 28, Issue 20
Archive-Name: bcs-2.0/part19

#!/bin/sh
# this is bcs.19 (part 19 of bcs-2.0)
# do not concatenate these parts, unpack them in order with /bin/sh
# file bcs-2.0/doc/bcs.info-1 continued
#
if test ! -r _shar_seq_.tmp; then
	echo 'Please unpack part 1 first!'
	exit 1
fi
(read Scheck
 if test "$Scheck" != 19; then
	echo Please unpack part "$Scheck" next!
	exit 1
 else
	exit 0
 fi
) < _shar_seq_.tmp || exit 1
if test ! -f _shar_wnt_.tmp; then
	echo 'x - still skipping bcs-2.0/doc/bcs.info-1'
else
echo 'x - continuing file bcs-2.0/doc/bcs.info-1'
sed 's/^X//' << 'SHAR_EOF' >> 'bcs-2.0/doc/bcs.info-1' &&
* Version Control::
* Configuration Management::
* History Logs::
X
Use of BCS
X
* Environment Variables::
* Important and Unimportant Files::
* Automatically Staged and Unstageable Files::
X
Command Descriptions
X
* Standard Options::
* BCS Command Summary::
X
BCS Command Summary
X
* Baseline Containment Commands::
* File Classification Commands::
* Staging Area Maintenance Commands::
X
Supported Configuration Management Systems
X
* RCS support::
* SCCS support::
X
Example Baseline
X
* Common Operations::
X
Technical Guide to BCS
X
* Setting up BCS::
* Creating the Baseline::
* Internal Files::
* Creating Staging Areas::
* Adding BCS to an Existing Baseline::
X
Example Uses of BCS
X
* Multiple Simultaneous Developers::
* Support for a Multi-platform Environment::
X
Multiple Simultaneous Developers
X
* Maintaining Baseline Stability::
X
Example Procedure for Maintaining Baseline Stability
X
* Stability Problem::
* Stability Solution::
* Example of Stability Problem::
* Stability Implications::
X
Possible Future Enhancements
X
* Hierarchical Staging Areas::
* Secure Baseline::
X
Hierarchical Staging Areas
X
* Integration of Changes in Two Staging Areas::
* Maintenance of Multiple Revisions of Software::
X
Internals
X
* Overview of Internals::
* Classification of Files::
* Caching File System Information::
* The File Information Table::
* Debugging::
* Configuration Management Package Interface::
* Staging and Synchronization::
* Unstaging Files and Directories::
X
X
File: bcs.info,  Node: Copying,  Next: Overview of BCS,  Prev: Top,  Up: Top
X
Terms and Conditions
********************
X
X   This program is free software; you can redistribute it and/or modify
it under the terms of the GNU `General Public License' as published by
the Free Software Foundation; either version 1, or (at your option) any
later version.  You may also distribute this package under the terms of
the `Artistic License' that comes with Perl.
X
X   This program is distributed in the hope that it will be useful, but
*without any warranty;* without even the implied warranty of
*merchantability* or *fitness for a particular purpose*.  See the
General Public License or the Artistic License for more details.
X
X   You should have received a copy of the GNU General Public License
along with this program.  The text of the license along with
explanatory information appears in the `COPYING' file with the sources.
If you do not have this file, you may obtain the license by writing to
the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,
USA.  You should also have received a copy of the Artistic License in a
file called `Artistic' with this distribution.
X
X
File: bcs.info,  Node: Overview of BCS,  Next: Advantages of BCS,  Prev: Copying,  Up: Top
X
Overview of BCS
***************
X
X   BCS is a set of utilities for maintaining a single baseline and
multiple staging areas for any development effort in which more than
one user is working.  BCS provides some configuration management
functionality as well as the means for multiple users to work
concurrently on a common source tree with minimal conflict.  This
document provides an overview of what BCS does, what you need to know
to use it, and how it works.   If you are familiar with baseline setups
in general and just want to get to work on using the system, see *Note
Use of BCS::.
X
* Menu:
X
* Definition of Terms::
* Baseline Structure::
X
X
File: bcs.info,  Node: Definition of Terms,  Next: Baseline Structure,  Prev: Overview of BCS,  Up: Overview of BCS
X
Definition of Terms
===================
X
X   This section defines a few terms that are used throughout this
document.
X
* Menu:
X
* Baseline::
* Staging Area::
* Version Control::
* Configuration Management::
* History Logs::
X
X
File: bcs.info,  Node: Baseline,  Next: Staging Area,  Prev: Definition of Terms,  Up: Definition of Terms
X
Baseline
--------
X
X   The "baseline" is one or more directory hierarchies that contain the
official copy of a project.  At any given time, the baseline should be
kept stable.  All files in the baseline are accessible to all workers
on a project.  Note that this use of the term "baseline" here is
different from a use that would refer to a "functional baseline" in
which some software would be part of the baseline and other parts of it
would exist solely as extensions.  In this document, the term baseline
refers specifically to the part of the file system that contains *all*
of the non-recreatable files that make up a project.  In version 2 of
BCS, the baseline can consist of an arbitrary number of directories.
X
X
File: bcs.info,  Node: Staging Area,  Next: Version Control,  Prev: Baseline,  Up: Definition of Terms
X
Staging Area
------------
X
X   A "staging area" is a private work area for a specific developer.
An individual's staging area will usually consist primarily of symbolic
links to the baseline.  The particular files that a person is working
on will be copied into that person's staging area so that he or she can
modify those files without affecting other users of the system.
X
X
File: bcs.info,  Node: Version Control,  Next: Configuration Management,  Prev: Staging Area,  Up: Definition of Terms
X
Version Control
---------------
X
X   "Version control" is a term that describes the control and recording
of versions, or revisions, of files.  A version control system must
provide, at least, a means for saving and retrieving old versions of
files.
X
X
File: bcs.info,  Node: Configuration Management,  Next: History Logs,  Prev: Version Control,  Up: Definition of Terms
X
Configuration Management
------------------------
X
X   "Configuration management" is a term that describes the general
control of configurations of groups of files.  Configuration management
systems must include some version control.  In addition, it should be
possible to make a "snap shot" of the entire system so that incremental
changes can be managed.  A configuration management system also
provides a "locking" mechanism to prevent multiple users from
simultaneously updating a single file.  BCS provides configuration
management capability by extending other packages.  Although BCS can
easily be made to work with a variety of configuration management
systems, we recommend RCS [Walter Tichy] which is the package of choice
by the Free Software Foundation and is a robust, portable, and highly
functional system in use on a wide range of platforms.  The examples in
this document are primarily based on the assumption that RCS is the
underlying configuration management system, although BCS currently
supports SCCS as well.(1) For a description of how to support a new
configuration management package and what attributes a package must
have to be supported, see *Note Configuration Management Package
Interface::.
X
X   ---------- Footnotes ----------
X
X   (1)  It can be argued that packages such as RCS and SCCS are not
actually configuration management systems but simply version control
systems.  The author maintains that since both of these packages provide
locking, and at least RCS provides symbolic name support for
identifying large groups of files, they can be considered configuration
management packages for the purposes of this document.
X
X
File: bcs.info,  Node: History Logs,  Prev: Configuration Management,  Up: Definition of Terms
X
History Logs
------------
X
X   The logs kept by the configuration management system are often
referred to as "history logs".  This is how we refer to them in this
document.  History logs typically contain old versions of files, owner
information, and a history of changes made to the file through the
configuration management system.
X
X
File: bcs.info,  Node: Baseline Structure,  Prev: Definition of Terms,  Up: Overview of BCS
X
Baseline Structure
==================
X
X   When a staging area is initially created, it is a set of directories
containing only symbolic links to the baseline and a file called
`.baseline_path'.  (For more information on this file, see *Note
Internal Files::.)  When a user is ready to work on files in a
particular part of the system, the user will "stage" the appropriate
files or directories.  In order for a file or directory to be staged, it
must be a symbolic link to a file or a directory in the baseline that
is "important" and eligible to be staged.  When a file is staged, the
symbolic link is replaced by an actual copy of the file.  When a
directory is staged, the symbolic link is replaced by a directory
containing links to all directories and important, eligible files in
the original directory.  For more discussion of the concepts of
important and eligible files, see *Note Important and Unimportant
Files::.  If the directory in the baseline contains important links,
special treatment is given when linking them to the staging area.  For a
description of staging and synchronization, see *Note Staging and
Synchronization::.
X
X   BCS works with an underlying configuration management system in such
a way that the commands for the package itself do not have to be aware
of the existence of BCS.  The basic checkin and checkout commands of
the version control system will not be used directly by BCS users.
Instead, the `bcs' command will be used as a front end.  In BCS,
history logs are shared between the baseline and the staging areas.  The
actual directories that contain the history logs are located in the
baseline.  When a directory is staged, the staged directory will
contain a symbolic link to the log directory in the baseline.  When a
user wishes to edit a particular file, he or she must check the file
out for editing.  BCS will stage any parts of the baseline that are
needed.  When the user believes that the edits are completed, he or she
may check the file in and update the baseline's copy of the file.  Note
that the user may check files in and out as many times as desired
during the editing process.  The baseline copy is not updated until the
user explicitly causes the update to be performed.
X
X   When a user is finished working in a particular directory, he or she
may "unstage" the directory.  When a directory is unstaged, BCS
performs several special checks for staged files with history logs.  It
performs some checks for other files as well.  The directory will be
unstaged only if all the files are updated in the baseline or if the
user forces the unstage to proceed anyway.  When a directory is
unstaged, the directory is recursively removed and replaced with a
symbolic link back to the baseline.  When a file is unstaged, the file
is removed and replaced with a symbolic link to a file in the baseline.
Users will seldom explicitly unstage files.  The only time this would
generally be done is if the user were backing out changes and did not
wish to update the baseline needlessly.  For more details about
unstaging, see *Note Staging Area Maintenance Commands::.
X
X   Periodically, as the baseline changes, users' staging areas may
become unsynchronized with the baseline.  BCS provides the
`sync_staging' command to keep a user's staging area synchronized with
the baseline.
X
X
File: bcs.info,  Node: Advantages of BCS,  Next: Use of BCS,  Prev: Overview of BCS,  Up: Top
X
Advantages of BCS
*****************
X
X   There are several advantages to BCS over some other baseline systems
or to an unaccompanied configuration management system.
X
X   * History logs are shared between the baseline and staging areas.
X     This means that users can check files in and out at will while
X     they are working without affecting the baseline.  Once they update
X     the baseline and unstage their work areas, other users will have
X     the benefit of all the intermediate versions of the file that may
X     have been checked in during the working period.
X
X   * Files are not updated in baseline until necessary.  When a user
X     checks out a file, the file's history log in the baseline is
X     locked.  This prevents other users from being able to check out
X     the same file.(1)  The file itself, however, is not touched until
X     the user runs `update_baseline'.  This way, file modification
X     times of checked out files are not changed until the files
X     contents are changed.  This prevents unnecessary recompilation.
X     (Please note: If the underlying configuration management package
X     allows multiple locks on the same file, so will BCS.)
X
X   * BCS is written in a portable fashion in "C" and uses GNU Autoconf
X     for configuration.  This makes it easy to build from source "out
X     of the box" on a variety of UNIX platforms.  In addition, BCS is
X     delivered with a set of regression tests.  This way, potential
X     users can obtain the source code to BCS, easily build and install
X     the software with the aid of an automatically generated
X     `configure' script and `Makefile', and then run the regression
X     test suite before installing the package.(2)
X
X   ---------- Footnotes ----------
X
X   (1)  Please note: Users must exercise some caution if they intend to
leave files unlocked while having them checked out.  Although many
configuration management packages allow this mode of operation, it can
have undesirable side effects when used with BCS.  See the
documentation for your configuration management package for further
information.
X
X   (2)  The regression test suite that comes with BCS requires Perl
version 4 to run.
X
X
File: bcs.info,  Node: Use of BCS,  Next: Command Descriptions,  Prev: Advantages of BCS,  Up: Top
X
Use of BCS
**********
X
X   This chapter provides detailed information on how to use BCS.
X
* Menu:
X
* Environment Variables::
* Important and Unimportant Files::
* Automatically Staged and Unstageable Files::
X
X
File: bcs.info,  Node: Environment Variables,  Next: Important and Unimportant Files,  Prev: Use of BCS,  Up: Use of BCS
X
Environment Variables
=====================
X
X   BCS uses two environment variables: `BASELINE', which contains the
pathname of the top-level directory or directories in the baseline; and
`STAGING', which contains the pathname of the top-level directory or
directories in the user's staging area.  All of the BCS programs
require both of these variables to be set before they will run.
Typically these environment variables will be set automatically upon
login in a given project environment.  Both `BASELINE' and `STAGING'
can be set to colon-separated lists of directories.  BCS requires the
staging area to contain the same number of directories as the baseline
and requires each staging area directory to point to its corresponding
baseline directory.  For more information, see *Note Setting up BCS::.
It is possible to specify baseline and staging area directories on the
commandline, but this functionality is provided primarily for
overriding the environment variables.  Users will find it less
cumbersome to set their `BASELINE' and `STAGING' environment variables
instead.
X
X
File: bcs.info,  Node: Important and Unimportant Files,  Next: Automatically Staged and Unstageable Files,  Prev: Environment Variables,  Up: Use of BCS
X
Important and Unimportant Files
===============================
X
X   Although a description of the concepts of important and unimportant
files may seem out of place at this point in the document, it is
necessary that this concept be somewhat understood before explanations
of the commands will make sense.  Note that it is not important that
you understand this whole section.  In order to understand the
commands, all you really need to know is that importance of files is
defined so that, in general, the files you would need in your staging
area if you staged a directory end up being important.  The rest of this
section describes exactly what determines the importance designation of
a file.  You should be able to use the basic BCS commands even if you
don't fully understand the following explanations.
X
X   All files in the baseline are either important or unimportant; that
is, no file is without an importance designation.  A file can be
explicitly deemed important or unimportant, but this is seldom
necessary.
X
X   Files in the staging area are important if they are either for
internal use by BCS (currently only the top-level `.baseline_path' file
is) or if they have important baseline counterparts that are not for
internal use.  Files in the baseline have their importance determined
in several ways.  Every file has an importance which can be overridden
explicitly.  By default, files in the baseline that are neither symbolic
links nor directories are important if they are registered with the
underlying configuration management package and are unimportant
otherwise.  Directories are considered important by default.  Symbolic
links to files in the baseline inherit their importance from the files
they are ultimately linked to.  Symbolic links to files outside of the
baseline are unimportant by default.  A file or directory becomes
explicitly unimportant by appearing in the `.unimportant' file or
explicitly important by appearing in the `.important' file in its
containing directory.  These files each may have only one file per
line.  If a file appears in both a `.important' file and a
`.unimportant' file, it is considered important.  The `.important' file
generally contains a list of files or directories that are important.
Although this file cannot contain regular expressions in general, the
special case of the `.important' file containing `*' alone means all
files in the directory are considered important.  This is useful for
directories that contain installed targets such as programs or
libraries.
X
X   Files that are used internally by BCS or the underlying
configuration management package are special cases.  They are always
considered important and cannot have their importance designation
overridden.  Files used internally by BCS are the only files that can
be important in the baseline and unimportant in the staging area.  They
are also the only important files that do not get linked into the
staging area.
X
X
File: bcs.info,  Node: Automatically Staged and Unstageable Files,  Prev: Important and Unimportant Files,  Up: Use of BCS
X
Automatically Staged and Unstageable Files
==========================================
X
X   In general, every file in the baseline is a candidate for editing by
developers of a system.  There are cases, however, in which it is
desirable to restrict some files from being able to be staged or force
other files to be staged automatically.  For example, suppose one of
the functions of a system involves creating or accessing multiple data
files, and it is desired that all users always access the same set of
files.  If the data files are stored in the baseline, the directory
containing them could be made unstageable.  This way, the logical path
from the top of each staging area and from the top of the baseline would
always point to the same actual files.  On the other hand, if it was
desired that all users always see different copies of these files, the
containing directory could be set to be automatically staged.  In this
case, the users would not be able to accidentally overwrite the
baseline copies of the files.
X
X   Files are made unstageable by putting their names (one file per
line) in a `.no_stage' file and are made automatically stageable by
putting their names (one file per line) in a `.auto_stage' file.  These
files should exist only in the baseline and are optional.  They can
exist in any directory in the baseline.
X
X
File: bcs.info,  Node: Command Descriptions,  Next: Supported Configuration Management Systems,  Prev: Use of BCS,  Up: Top
X
Command Descriptions
********************
X
X   All BCS commands understand a core set of options and accept them
without error.  Not all commands pay attention to all options.  The
following sections describe the standard options and the BCS commands.
X
* Menu:
X
* Standard Options::
* BCS Command Summary::
X
X
File: bcs.info,  Node: Standard Options,  Next: BCS Command Summary,  Prev: Command Descriptions,  Up: Command Descriptions
X
Standard Options
================
X
`--help' or `-h'
X     If this flag is specified, the usage message is printed, and
X     the command exits.
X
`--version'
X     If this flag is specified, the current version of the    software
X     and the list of supported configuration management    packages are
X     printed, and the program exits.
X
`--baseline'
X     This option is followed by a single directory name or a
X     colon-separated list of directory names.  It is used to
X     override the setting of the `BASELINE' environment    variable
X     which does not have to be set if this flag is    provided.
X
`--staging'
X     This option is followed by a single directory name or a
X     colon-separated list of directory names.  It is used to
X     override the setting of the `STAGING' environment    variable
X     which does not have to be set if this flag is    provided.
X
`--debug'
X     This option is followed by a colon-separated list of debug
X     flags.  This command is intended for use only in debugging    BCS
X     and is not recommended for use by end-users.  It is only
X     available if BCS was compiled with debugging enabled.  For    more
X     information, see *Note Debugging::.
X
`--silent'
X     This flag causes the suppression of diagnostic messages but    not
X     the suppression of error messages.
X
`--recursive' or `-r'
X     For applicable commands, this flag indicates that the    operation
X     should be performed recursively.  This flag is used    only for
X     the commands `classify_files',    `id_important',
X     `id_unimportant', `id_staged', and    `sync_staging'.
X
`--no-action' or `-n'
X     This flag specifies that the baseline and staging areas    should
X     not be modified but that the commands should print    what they
X     would do.  The output of a command with the    `--no-action' flag
X     may differ from the    command's output without the flag since
X     frequently one    operation by a command is dependent upon the
X     outcome of    previous actions.  This option is not meaningful for
X     all    commands.
X
X
File: bcs.info,  Node: BCS Command Summary,  Prev: Standard Options,  Up: Command Descriptions
X
BCS Command Summary
===================
X
X   The complete list of BCS commands appears here with brief synopses
and descriptions.  All the commands except for `in_baseline' and
`in_staging_area' require arguments.  The order of arguments is not
important.  When any other command is invoked without arguments, it
gives a brief summary of its usage.  Usage is available for all
commands by invoking them with the `--help' or `-h' flags.
X
* Menu:
X
* Baseline Containment Commands::
* File Classification Commands::
* Staging Area Maintenance Commands::
X
X
File: bcs.info,  Node: Baseline Containment Commands,  Next: File Classification Commands,  Prev: BCS Command Summary,  Up: BCS Command Summary
X
Baseline Containment Commands
-----------------------------
X
`in_baseline'
X     Usage: `in_baseline [ FILE ] [ STANDARD-OPTIONS ]'
X
X     This command takes an optional filename as an argument and prints
X     `1' if it is in the baseline or `0' otherwise.  If no path is
X     given, the current directory is used.
X
`in_staging_area'
X     Usage: `in_staging_area [ FILE ] [ STANDARD-OPTIONS ]'
X
X     This command prints `1' if you are in your staging or `0'
X     otherwise.
X
X   These commands are intended for use in shell scripts.  They allow
you to say
X
X     if (`in_baseline`) ...
X
X   If staging areas are subdirectories of the baseline, a file in the
staging area is logically under a baseline directory.  Even so, the
`in_baseline' command will print `1' only if the file in question is
not in a staging area.  This way, `in_baseline' and `in_staging_area'
will never both print `1' for a given file.
X
X
File: bcs.info,  Node: File Classification Commands,  Next: Staging Area Maintenance Commands,  Prev: Baseline Containment Commands,  Up: BCS Command Summary
X
File Classification Commands
----------------------------
X
X   The commands described in this section are used to find out about
the classification of given files or to make lists of files with
certain attributes.  In addition to the standard options understood by
all BCS commands, the file classification commands understand the
following additional command line options:
X
`[ -dirs | -nodirs ]'
X     The `-dirs' and `-nodirs' flags are used to    determine whether
X     directory names are printed as well as file    names.  If the
X     recursive option is given, the default is    `-nodirs'.  If not,
X     the default is `-dirs'.     Directory names are printed with
X     trailing slashes for    clarity.
X
`[ -descend | -nodescend ]'
X     The `-descend' flag means that when directories are specified on
X     the command line, information is printed about the files in
X     the directories    instead of the directories themselves.  If
X     `-nodescend' is specified, the    command will operate on the
X     directories rather than their    contents.  The    default is
X     `-descend'.  If `--recursive' is    specified, then these flags
X     are ignored, and    `-descend' is always assumed.
X
Here are descriptions of the file classification commands:
X
`classify_files'
X     Usage: `classify_files FILE [ FILE ... ] [ STANDARD-OPTIONS ]'
X
X     The `classify_files' command identifies files as either important
X     or unimportant.
X
X     This command prints a list of all files in the current directory
X     (recursively if the `--recursive' flag is specified) followed by
X     whether the file is important or unimportant.
X
`id_important'
X     Usage: `id_important FILE [ FILE ... ] [ STANDARD-OPTIONS ]'
X
X     The `id_important' command prints the names of all important files
X     in the specified directory or directories.  Directories are
X     descended recursively if the `--recursive' flag is specified.
X
`id_unimportant'
X     Usage: `id_unimportant FILE [ FILE ... ] [ STANDARD-OPTIONS ]'
X
X     The `id_unimportant' command prints the names of all unimportant
X     files in the specified directory or directories.  Directories are
X     descended recursively if the `--recursive' flag is specified.
X
`id_staged'
X     Usage: `id_staged FILE [ FILE ... ] [ STANDARD-OPTIONS ]'
X
X     The `id_staged' command prints the names of all staged files in
X     the specified directory or directories.  Directories are descended
X     recursively if the `--recursive' flag is specified.
X
X     This command is handy when used in shell substitutions.  For
X     example, to check in all staged files in the current directory,
X     one may issue a command such as
X
X          bcs ci -u `id_staged -nodirs .`
X
`bcs_info'
X     Usage: `bcs_info FILE [ FILE ... ] [ STANDARD-OPTIONS ]'
X
X     The `bcs_info' command gives general information about the files
X     or directories passed to it.  It is used primarily for debugging
X     baseline and staging area configurations and can be useful for
X     advanced users.  Its output is not terribly friendly, but it
X     provides some information that is not available from other sources.
X
X
File: bcs.info,  Node: Staging Area Maintenance Commands,  Prev: File Classification Commands,  Up: BCS Command Summary
X
Staging Area Maintenance Commands
---------------------------------
X
X   The commands described in this section are used for maintenance of
the staging area.
X
`sync_staging'
X     Usage: `sync_staging DIR [ DIR ... ] [ STANDARD-OPTIONS ]'
X
X     The `sync_staging' command is used to synchronize the staging area
X     with the baseline.
X
X     Each directory on the command line is synchronized.  If the
X     `--recursive' flag is present, the directories listed are
X     synchronized recursively.  It is a good idea to run
X
X          sync_staging -r .
X
X     at each top-level staging area directory every few days or
X     whenever you are aware of new additions to or deletions from the
X     baseline.
X
X     When `sync_staging' is run, dangling symbolic links are removed,
X     missing symbolic links are created, and outdated symbolic links
X     are updated.  In addition, any automatically stageable files are
X     staged and any staged files that are marked as unstageable cause a
X     warning to be issued.
X
X     If `sync_staging' detects unimportant directories or unimportant
X     files with specified suffixes in the staging area, it will warn
X     the user to that effect.  The special suffixes can be specified in
X     the baseline's `.baseline_conf' file.  For more information, see
X     *Note Internal Files::.
X
X     For more detail on the exact procedure used for synchronization,
X     see *Note Staging and Synchronization::.
X
`stage'
X     Usage: `stage PATH [ PATH ... ] [ STANDARD-OPTIONS ]'
X
X     The `stage' command is used to replace symbolic links from the
X     staging area to the baseline with actual files and directories.
X     The `--recursive' flag is ignored for this command.
X
X     The PATH arguments to this command must logically fall within the
X     user's staging area.  The `stage' command performs whatever
X     operations are necessary to cause the specified paths to actually
X     exist in the staging area.  In the simplest case, PATH is a
X     symbolic link in the staging area to a file in the baseline.  In
X     this case, the link is removed and replaced with a copy of the
X     file.  If PATH is a link to a directory, the link is removed and
X     replaced by a directory which is then populated with links to the
X     baseline.  In the most complicated case, the file being staged
X     isn't a link but one of its containing directories is.  In this
X     case, `stage' will automatically stage all necessary directories
X     down to PATH before staging PATH.  This command will refuse to
X     stage unimportant files or files that are explicitly forbidden from
X     being staged by appearing in the `.no_stage' file in the baseline
X     directory containing the file.
X
X     If you try to stage a file or directory that is already staged, a
X     message is printed to that effect.  This is not considered an
X     error condition.
X
X     For more detailed information on what happens when files or
X     directories are staged, see *Note Staging and Synchronization::.
X
`unstage'
X     Usage: `unstage PATH [ PATH ... ] [ --force | -f | --interactive |
X     -i ] [ STANDARD-OPTIONS ]'
X
X     The `unstage' command is used to replace a file or directory in
X     the staging area with a link to the baseline.  It is the opposite
X     of the `stage' command.  The `--recursive' flag is meaningless for
X     this command and is ignored.
X
X     Since the unstage command removes files from the user's staging
X     area, it is potentially dangerous.  For this reason, a number of
X     checks are made.  If PATH is a file, it must be a file that is
X     staged.  If the file has a history log, additional checks are
X     performed.  Specifically, if the file is writable or does not
X     appear to be updated in the baseline, the `unstage' command will
X     proceed only after receiving confirmation from the user.  When
X     unstaging a directory, this command performs checks on all files
X     in the directory and its subdirectories that have logs in the
X     configuration management system.  If any are writable or not
X     updated, it asks for confirmation for all at once.  The entire
X     unstage operation is then either performed or canceled.
X
X     In addition, if unimportant directories or unimportant files are
X     detected, this command will require confirmation before removing
X     these as well.  This can save the user from losing work if new
X     source files are added without being registered (with the
X     `register_file' command) or if directories without baseline
X     counterparts are created in the staging area.
X
X     By default, the `unstage' command only solicits user input if it
X     detects that it is running interactively.  If you want it to try
X     to ask regardless, specify the `--interactive' or `-i' flag to the
X     program.  Otherwise, negative answers will be assumed for all
X     questions.  If you want positive answers to be assumed for all
X     questions, specify the `--force' or `-f' flag to the program.
X     This flag should be used with extreme care since it is turns off
X     checks and could cause changes to be lost.
X
X     Note that since no checks are performed for unimportant files
X     without special suffixes or for staged files without history logs,
X     unstaging directories should be done with caution.  If you avoid
X     creating files in your staging area that you wish to save without
X     registering them, you should be safe.  If you think you have
X     created new files and not registered them with the configuration
X     management package (see the `register_file' command), you may want
X     to perform a recursive `id_unimportant' command to make sure that
X     you are prepared to lose all unimportant files.
X
X     The `unstage' command is most useful when you are finished making
X     changes to a component of the system and have tested your changes.
X     It can also be useful for replacing binary or library directories
X     in your staging area with links back to the baseline.
X
X     If you try to unstage a file that is already unstaged, a message
X     to that effect will be printed.  This is not an error condition.
X
X     It is permissible to unstage files that are automatically
X     stageable.  In this case, the files will be restaged automatically
X     after being unstaged.  This provides a convenient way of removing
X     all unimportant files or reverting some kinds of changes.
X
X     Note that it is generally not necessary to unstage a file since the
X     `update_baseline' does this for you.  It is sometimes desirable to
X     unstage a file when backing out changes, however, since this would
X     prevent unnecessary updates to the baseline.  Even this is not
X     generally necessary since the `update_baseline' command detects
X     when files are already up-to-date.  Refer to the documentation for
X     your configuration management system for more information on
X     reverting files.
X
`bcs'
X     Usage: `bcs command arguments [ STANDARD-OPTIONS]'
X
X     The `bcs' command serves as a front-end to the underlying
X     configuration management system.  The arguments to the `bcs'
X     command should make a complete command for the underlying
X     configuration management system.  The command is executed as given
X     except that additional checking is done to assure that the desired
X     files are in the staging area and are eligible.  When this command
X     is used to check files out, it will also stage them.  For example,
X     the command
X
X          bcs co -l src/a.c
X
X     would do the same thing as
X
X          co -l src/a.c
X
X     except that it would stage the files and verify that they are
X     valid for being checked out.
X
X     For RCS, valid commands for `bcs' are `co' and `ci'.  For SCCS,
X     valid commands are `edit', `get', `deledit', `delget', `unedit',
X     and `unget'.
X
`update_baseline'
X     Usage: `update_baseline FILE [ FILE ... ] [ STANDARD-OPTIONS ]'
X
X     The `update_baseline' command updates the baseline copy of a file
X     by setting it to the default version in its history log.  Unless
X     the user has explicitly specified otherwise in the history log,
X     this is generally the most recent version of the file.  If
X     `update_baseline' succeeds in updating the baseline copy of a
X     file, it will unstage the file.
X
X     The `update_baseline' command requires its arguments to be
X     non-writable files.  If the file is already unstaged, the baseline
X     copy will be updated anyway.  This command detects if a file is
X     already up-to-date.  This reduces the likelihood of updating a
X     file's modification time needlessly in the baseline and can
X     prevent extra compiles from occurring if a file is checked out and
X     then not modified before being checked in.
X
`register_file'
X     Usage: `register_file FILE [ FILE ... ] [ STANDARD-OPTIONS ]'
X
X     The `register_file' command is used to add new files to the
X     baseline.  If FILE already exists in the baseline, this command
X     will fail.  Otherwise, if the file does not already exist in the
X     staging area, all necessary directories will be created, an empty
X     file will be created in both the baseline and the staging area,
X     and the file will be locked and made writable in the staging area.
X     If the file does exist in the staging area, the file will be
X     copied into the baseline (with execute permissions preserved),
X     checked in, and locked.  Typically, `register_file' should be used
X     before the file is created in the staging area.  This decreases
X     the likelihood that two users will simultaneously create the same
X     file in their staging areas and run into conflicts when they are
X     ready to update the baseline.
X
X
File: bcs.info,  Node: Supported Configuration Management Systems,  Next: Example Baseline,  Prev: Command Descriptions,  Up: Top
X
Supported Configuration Management Systems
******************************************
X
X   This chapter briefly discusses how the supported configuration
management systems fit into BCS.
X
* Menu:
X
* RCS support::
* SCCS support::
X
X
File: bcs.info,  Node: RCS support,  Next: SCCS support,  Prev: Supported Configuration Management Systems,  Up: Supported Configuration Management Systems
X
RCS support
===========
X
X   This section describes behavior of BCS that is specific to RCS-based
baselines.  When using RCS, the `bcs' command should be used instead of
the `co' and `ci' commands from RCS.  Whenever you would use a `co' or
`ci' command, use `bcs co' or `bcs ci' instead.  For all other cases,
use the RCS commands directly.  BCS is most flexible when used with RCS
since it does not take away any of RCS's functionality.  Specifically,
execute permissions are preserved on files when they are checked in,
checked out, staged, or updated, and it is possible to check files in
and out that aren't in your current working directory.
X
X
File: bcs.info,  Node: SCCS support,  Prev: RCS support,  Up: Supported Configuration Management Systems
X
SCCS support
============
X
X   This section describes behavior of BCS that is specific to
SCCS-based baselines.  Because of certain restrictions of SCCS, BCS
cannot be as robust or versatile with SCCS as the underlying
configuration management package as it can with RCS.  Specifically, the
SCCS checkin and checkout operations only work on files in the current
directory.  Trying to use BCS to do otherwise will result in the same
kinds of problems as trying to use SCCS to do otherwise.  See the
documentation on SCCS for more details.  In addition, since SCCS is not
as robust at handling user errors or aborts as RCS, BCS cannot be as
robust in handling user errors or aborts with SCCS as it is with RCS as
the underlying package.  In spite of these limitations, all the main
features of BCS work with SCCS including being able to update the
baseline and register files that are not in the current directory.
X
X   It should be noted that there is currently a problem with updating
the baseline when the `%T%' or `%D%' SCCS keywords are used in files.
Since these are updated with the last checkout time instead of the last
checkin time or lock time, comparing the existing baseline version with
the last checked-in version will always fail when these are present in
the file.  A fix for this may be pending if there is enough demand.
X
X   When using SCCS as the underlying configuration management package,
BCS should be used in place of SCCS for the `sccs edit', `sccs get',
`sccs deledit', `sccs delget', `sccs unedit', and `sccs unget' commands.
Specifically, use `bcs edit', `bcs get', `bcs deledit', `bcs delget',
`bcs unedit', and `bcs unget' instead.  Normal SCCS commands can be
used in all other cases.
X
X
File: bcs.info,  Node: Example Baseline,  Next: Technical Guide to BCS,  Prev: Supported Configuration Management Systems,  Up: Top
X
Example Baseline
****************
X
X   This section presents an example of what you need to do to edit a
file and update the changes in the baseline.  For these examples, the
baseline configuration shown in Figure 1 will be used.  In addition, we
assume that the baseline uses RCS.  Note that everything in the picture
is a directory except for the files `a.c' and `a.c,v'.
X
X     -
X     
X                                 Baseline
X                                    |
X                           +-----+--+--+-----+
X                           |     |     |     |
X                           |     |     |     |
X                           |     |     |     |
X                           A     B     C     D
X                          /\
X                         /  \
X                        /    \
X                       /      \
X                       E      F
X                             /\
X                            /  \
X                           /    \
X                          /      \
X                         a.c     RCS
X                                  |
X                                  |
X                                  |
X                                  |
X                                a.c,v
X     
X     Figure 1: Baseline
X
X   Now suppose we have a staging area.  Let's assume that the staging
area is in its initial state; i.e., the top-level directory exists and
all other directories are links.  The staging area will look like
Figure 2.
X
X     -
X     
X                   Baseline                           Staging
X                      |                                  |
X             +-----+--+--+-----+                +-----+--+--+-----+
X             |     |     |     |                |     |     |     |
X             |     |     |     |                |     |     |     |
X             |     |     |     |                |     |     |     |
X             A     B     C     D             <--A  <--B  <--C  <--D
X            /\
X           /  \
X          /    \
X         /      \
X         E      F
X               /\
X              /  \
X             /    \
X            /      \
X           a.c     RCS
X                    |
X                    |
X                    |
X                    |
X                  a.c,v
X     
X     Figure 2: Initial Staging Area
X
X   At this point, the user will want to check out the file `a.c'.  The
user types
X
X     cd Staging
X     bcs co -l A/F/a.c
X
X   BCS will stage `A', `A/F', and `A/F/a.c' before checking out
`A/F/a.c'.  The staging area will then look like Figure 3.
X
X     -
X     
X                   Baseline                           Staging
X                      |                                  |
X             +-----+--+--+-----+                +-----+--+--+-----+
X             |     |     |     |                |     |     |     |
X             |     |     |     |                |     |     |     |
X             |     |     |     |                |     |     |     |
X             A     B     C     D             <--A  <--B  <--C  <--D
X            /\                                 /\
X           /  \                               /  \
X          /    \                             /    \
X         /      \                           /      \
X         E      F                        <--E   <--F
X               /\                                 /\
X              /  \                               /  \
X             /    \                             /    \
X            /      \                           /      \
X           a.c     RCS                        a.c  <--RCS
X                    |
X                    |
X                    |
X                    |
X                  a.c,v
X     
X     Figure 3: Staging area after checking out `A/F/a.c'
X
X   Now the user can edit the file, check it in, and update it in the
baseline.
X
X     cd A/F
X     (edit a.c)
X     bcs ci -u a.c
X     update_baseline a.c
X
X   After the user updates the baseline, the file `a.c' will be a link
to the baseline.  This is shown in Figure 4.
X
X     -
X     
X                   Baseline                           Staging
X                      |                                  |
X             +-----+--+--+-----+                +-----+--+--+-----+
X             |     |     |     |                |     |     |     |
X             |     |     |     |                |     |     |     |
X             |     |     |     |                |     |     |     |
X             A     B     C     D             <--A  <--B  <--C  <--D
X            /\                                 /\
X           /  \                               /  \
X          /    \                             /    \
X         /      \                           /      \
X         E      F                        <--E   <--F
X               /\                                 /\
X              /  \                               /  \
X             /    \                             /    \
X            /      \                           /      \
X           a.c     RCS                     <--a.c  <--RCS
X                    |
X                    |
X                    |
X                    |
X                  a.c,v
X     
X     Figure 4: Staging area after updating `a.c'
X
X   Finally, the user can unstage `A' at the top of the staging area.
X
X     cd ../..
X     unstage A
X
X   At this point, the staging area will once again look like Figure
2.
X
* Menu:
X
* Common Operations::
X
X
File: bcs.info,  Node: Common Operations,  Prev: Example Baseline,  Up: Example Baseline
X
Common Operations
=================
X
X   The following table shows a list of situations and the commands that
would be used in those situations.
X
To check out a file to edit
X          bcs co -l FILE
X
To check in a file but keep working
X          bcs ci -l FILE
X
To check in a file and update baseline
X          bcs ci -u FILE
X          update_baseline FILE
X
To recover from accidental check out of a file
X          bcs ci -u FILE
X             (file is reverted)
X          unstage FILE
X             *OR*
X          update_baseline FILE
X
To revert and discard changes to a file
X          bcs co -u FILE
X             (answer yes to RCS; file is reverted)
X          unstage FILE
X             *OR*
X          update_baseline FILE
X
To create a new file and edit it
X          register_file FILE
X             (edit the file)
X
To add a file that already exists to the baseline
X          register_file FILE
X          bcs ci -u FILE
X          update_baseline FILE
X
To synchronize entire staging area
X          cd TOP-STAGING-AREA-DIRECTORY
X          sync_staging -r .
X
X
X
File: bcs.info,  Node: Technical Guide to BCS,  Next: Example Uses of BCS,  Prev: Example Baseline,  Up: Top
X
Technical Guide to BCS
**********************
X
X   The material in this section is primarily intended for the system or
baseline administrator but could be useful for end users as well.  This
section describes how to configure a baseline for use with BCS and how
to customize the behavior of BCS to suit your needs.
X
* Menu:
X
* Setting up BCS::
* Creating the Baseline::
* Internal Files::
* Creating Staging Areas::
* Adding BCS to an Existing Baseline::
X
X
File: bcs.info,  Node: Setting up BCS,  Next: Creating the Baseline,  Prev: Technical Guide to BCS,  Up: Technical Guide to BCS
X
Setting up BCS
==============
X
X   BCS should to be installed on the system as a third-party
application.  It may be delivered with a baseline as long as the terms
of the General Public License or Artistic License (*note Copying::.)
are followed.  See the BCS distribution for instructions on building
and installing BCS.
X
X   Users of BCS should have the BCS commands in their path.  They will
probably also want the command of the underlying configuration
management package in their path, but this is not necessary for BCS
since it invokes all commands with full pathnames (selected at
compile-time) for security reasons.  They also need to have the
environment variables `BASELINE' and `STAGING' set to the tops of the
baseline and their staging areas.  It is a good idea to provide
something for users to source from their `.cshrc' and/or `.login' files
(or wherever you add such things on your system) so that users don't
have to be concerned about these details themselves.
X
SHAR_EOF
echo 'File bcs-2.0/doc/bcs.info-1 is complete' &&
chmod 0664 bcs-2.0/doc/bcs.info-1 ||
echo 'restore of bcs-2.0/doc/bcs.info-1 failed'
Wc_c="`wc -c < 'bcs-2.0/doc/bcs.info-1'`"
test 50024 -eq "$Wc_c" ||
	echo 'bcs-2.0/doc/bcs.info-1: original size 50024, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= bcs-2.0/doc/bcs.info-2 ==============
if test -f 'bcs-2.0/doc/bcs.info-2' -a X"$1" != X"-c"; then
	echo 'x - skipping bcs-2.0/doc/bcs.info-2 (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting bcs-2.0/doc/bcs.info-2 (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'bcs-2.0/doc/bcs.info-2' &&
This is Info file bcs.info, produced by Makeinfo-1.55 from the input
file bcs.texinfo.
X
X   This documentation describes BCS, a Baseline Configuration System
that provides an automated means for maintaining a stable software
baseline along with multiple, individually owned work areas.  This
document describes version 2.0 of BCS.  This document was last revised
SHAR_EOF
true || echo 'restore of bcs-2.0/doc/bcs.info-2 failed'
fi
echo 'End of bcs-2.0 part 19'
echo 'File bcs-2.0/doc/bcs.info-2 is continued in part 20'
echo 20 > _shar_seq_.tmp
exit 0
