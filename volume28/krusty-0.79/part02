Newsgroups: comp.sources.unix
From: gls@hrcms.ATT.COM (Col. G. L. Sicherman)
Subject: v28i174: krusty-0.79 - Krusty's Fun House (a game), Part02/08
References: <1.784409622.283@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: gls@hrcms.ATT.COM (Col. G. L. Sicherman)
Posting-Number: Volume 28, Issue 174
Archive-Name: krusty-0.79/part02

# This is a shell archive.  Remove anything before this line,
# then unpack it by saving it in a file and typing "sh file".
#
# Wrapped by Col. G. L. Sicherman on Wed Sep  7 10:44:39 1994
#
# This archive contains:
#	krusty.h	main.c		
#

LANG=""; export LANG
PATH=/bin:/usr/bin:$PATH; export PATH

echo x - krusty.h
cat >krusty.h <<'HIPPOPOTAMUS_ON_A_POGO_STICK'
#ifndef KRUSTY_H
#define KRUSTY_H

#ifdef sun
#define BSD
#endif

#include <curses.h>

/*
 *	Conversion from creature x-val to room x-val
 */
#define XLEFT(cre) (((cre)->loc.x-1)/2)
#define XRIGHT(cre) (((cre)->loc.x)/2)

#define	PIPEAT(rm,y,x) (ITSAPIPE((rm)->grid[y][x]) \
 || ITSAPIPE((rm)->mgrid[y][x]))
#define	BLOWERAT(rm,y,x) (ITSABLOWER((rm)->grid[y][x]) \
 || ITSABLOWER((rm)->mgrid[y][x]))
#define	LBLOWERAT(rm,y,x) ((rm)->grid[y][x] == I_LBLOWER \
 || (rm)->mgrid[y][x] == I_MLBLOWER)
#define	UBLOWERAT(rm,y,x) ((rm)->grid[y][x] == I_UBLOWER \
 || (rm)->mgrid[y][x] == I_MUBLOWER)
#define	RBLOWERAT(rm,y,x) ((rm)->grid[y][x] == I_RBLOWER \
 || (rm)->mgrid[y][x] == I_MRBLOWER)

typedef enum direc {
	none, leftward, rightward, upward, downward
} DIREC; /* face or blow */

typedef struct loc {
	int x, y;
} LOC;

typedef struct creaturetype {
	LOC loc;	/* x-value is on double scale: right side of creature */
	DIREC facing;
	DIREC going;	/* rat only - may be up or down as well as l or r */
	int blowing;	/* rat only */
	int inpipe;	/* rat only */
	int upblown;	/* nonzero means falling after blown upward */
	int uppiped;	/* nonzero means just climbed up out of a pipe */
	int hp;		/* monster h.p. (not Krusty's; his is global) */
	int fuse;	/* spit, shoot, or lay when this reaches zero */
	int swooping;	/* some pigs and birds swoop up and down */
	int xmin, xmax;	/* pig has a range of 18 cells inclusive */
	int ymin;	/* pig has a vertical variation of 6 cells */
} CREATURE;

/* Custard pie or super ball */
typedef struct projectiletype {
	LOC l;		/* x double scale */
	DIREC d, v;	/* If super ball, two directions */
	int age;
} PROJECTILE;

/*
 *	Things that can kill you:
 */

#define Y_FALL	1
#define Y_ROCK	2
#define Y_SPIT	3
#define Y_BULLET	4	/* from shooter or alien */
#define Y_EGG	5
/* collisions: */
#define Y_VIPER	6
#define Y_ALIEN	7
#define Y_PIG	8
#define Y_BIRD	9
#define Y_SHOOTER	10

#define Y_QUIT	11
#define Y_SUICIDE	12

/* Viper spit, alien bullet, bird egg, falling rock, or pipe drip */
typedef struct hazardtype {
	LOC l;		/* x double scale */
	DIREC d, v;	/* If super ball, two directions */
	int age;
	int killedby;	/* what kind of object is it? */
} HAZARD;

/* Damaged ceiling or leaky pipe */
typedef struct leaktype {
	LOC l;
	int timer;
} LEAK;

typedef struct entrytype {
	LOC loc;
	char name;
	int clean;
	int timelimit;
	int tries;
	int banged;	/* Krusty already kicked the bangbox */
	int locked;
} ENTRY;

typedef struct elevatortype {
	int x, ymin, ymax, y;
	DIREC dir;
} ELEVATOR;

typedef struct gondolatype {
	int xmin, xmax, xcur, y;
	DIREC dir;
} GONDOLA;

typedef struct shootertype {
	int x, ymin, ymax, y;
	DIREC dir;
	int fuse;
} SHOOTER;

typedef struct roomtype {
	char ratdir, **grid, **mgrid;
	int rows, cols, ratholes, entries, elevators, gondolas, shooters;
	int bangbox;		/* if he missed it, leave room unlocked */
	int bonusboxes;		/* in teleport room, count bonus boxes */
	int liverats, flypies, flyballs, leaks, hazards;
	int vipers, aliens, pigs, birds;
	int leave;		/* Krusty is leaving the room */
	int canleave;		/* Krusty can leave the room */
	char carry;	/* what is Krusty carrying */
	int jumping;	/* how much longer his jump will last */
	int falling;	/* how long has Krusty been falling */
	int kicking;	/* Krusty is kicking something */
	int springing;	/* how many times have we sprung on spring */
	int springrequest;	/* Krusty wants to spring again */
	int stunned;	/* Krusty got hit */
	int staggering;	/* Krusty got hit and is knocked to one side */
	DIREC staggerdir;
	long timer;	/* For teleport rooms */
	LOC door, trap, reentry, rathole[4]; /* "door" is lower right corner */
	ENTRY entry[14];		/* for antechambers */
	CREATURE krusty;
	CREATURE rat[4];
	CREATURE viper[6];
	CREATURE alien[5];
	CREATURE pig[3];
	CREATURE bird[3];
	LEAK leak[4];
	HAZARD hazard[12];
	PROJECTILE flypie[6], flyball[5];
	ELEVATOR elevator[3];
	GONDOLA gondola[3];
	SHOOTER shooter[3];
} ROOM;

/* INTRAP - is rat in trap? */
#define INTRAP(roomp, ratp) \
 (abs((ratp)->x-1-roomp->trap.x*2) <= 2 && abs((ratp)->y - roomp->trap.y) <= 1)

/* INTRAPX - in trap, but not at flash point */
#define INTRAPX(roomp, ratp) \
(INTRAP(roomp,ratp)&&((roomp)->trap.x*2+1 != (ratp)->x \
 ||(roomp)->trap.y!=(ratp)->y))

extern void aboutface();
extern void setpies();

#endif

/* ATDOOR - is Krusty at door?
 * Must be completely in front of door.
 */
#define ATDOOR(rmp) \
 ((rmp)->krusty.loc.x >= (rmp)->door.x*2-1 \
 && (rmp)->krusty.loc.x<=(rmp)->door.x*2+1 \
 && ((rmp)->krusty.loc.y==(rmp)->door.y))
HIPPOPOTAMUS_ON_A_POGO_STICK

chmod 644 krusty.h

echo x - main.c
cat >main.c <<'HIPPOPOTAMUS_ON_A_POGO_STICK'
/*
 *	Krusty's Fun House, much reduced.
 *	Col. G. L. Sicherman (gls@hrcms.ATT.COM).  1993.
 */

#include <sys/types.h>
#include <sys/time.h>
#include <string.h>
#include <termios.h>

#include "krusty.h"
#include "codes.h"
#include "rats.h"
#include "globs.h"

extern	void	exit();
extern	char	*getlogin();
	void	crash();

static	long	ticklen = 170000;

static void
usage()
{
	fprintf(stderr,
		"usage: krusty [-v] [-bBAUD] [-s] [section] [player]\n");
	exit(1);
}

main(argc, argv)
int argc;
char **argv;
{
	int baudr;

	while(--argc) if ('-'!=**++argv) break;
	else switch(*++*argv) {
	case 'v':
		vflag = 1;
		break;
	case 'b':
		if ((baudr = atoi(++*argv)) <= 2400) ticklen = 320000;
		if (baudr <= 1200) ticklen = 700000;
		break;
	case 's':
		printscores();
		exit(0);
	default:
		usage();
	}

	section = '1';
	name = uid = getlogin();

	switch(argc) {
	default:
		usage();
	case 2:
		parsename(argv[1]);
		parsesection(argv[0]);
		break;
	case 1:
		if (isdigit(**argv)) parsesection(*argv);
		else parsename(*argv);
		break;
	case 0:
		break;
	}
	if (section > '1' && !checkpass(section)) {
		printf("Access denied.\n");
		exit(2);
	}
	if (
	section > '3') {
		printf("Sorry, section %c is being fumigated.\n", section);
		exit(3);
	}
	initscr();
	cbreak();
	noecho();
	intro();
	roomwin = subwin(stdscr,8,20,5,30);
	helpwin = subwin(stdscr,13,12,5,65);
	scorewin = subwin(stdscr,1,6,0,37);
	carrywin = subwin(stdscr,1,2,0,26);
	piewin = subwin(stdscr,1,5,0,58);
	dollwin = subwin(stdscr,1,4,0,16);
	super = score = backscore = tick = 0;
	pies = 10;
	khp = 10;
	lives = 3;
	if (!loadroom("room.0", & roomv[0], 0, 0)) {
		fprintf(stderr, "cannot load room.0\n");
		endwin();
		exit(2);
	}
	rooms = 1;
	roomp = & roomv[rooms-1];
	updatewindows();
	setsection(roomp, section);
	playroom(roomp);
/* need a goodbye here */
	endwin();
	exit(0);
}

parsename(a)
char *a;
{
	name = a;
}

parsesection(a)
char *a;
{
	int sectval;

	sectval = atoi(a);
	if (sectval < 1) {
		fprintf(stderr, "krusty: section must be at least 1\n");
		exit(1);
	}
	if (sectval > 5) {
		fprintf(stderr, "krusty: section must be at most 5\n");
		exit(1);
	}
	section = sectval + '0';
}

scramble(u)
char *u;
{
	int w;
	w = 0;
	for ( ; *u; u++) {
		w += *u - '@';
		w *= 19;
		w %= 3817;
	} 
	return w;
}

checkpass(c)
char c;
{
	char *r, *response;
	static int valid[4] = {2871,3410,689,2473};
	extern char *getpass();

	response=getpass("Password:");
	if (strlen(response) != 8) return 0;
	for (r=response; *r; r++)
	if (isupper(*r)) continue;
	else if (islower(*r)) *r = toupper(*r);
	else return 0;
	return scramble(response) == valid[c-'2'];
}

/*
 *	returns 1 if all rats and bangbox done
 *		0 otherwise
 *
 *	Does not pop the room; the calling routine must do that.
 */

int
playroom(rm)
ROOM *rm;
{
	for (;;) {
		if (ATDOOR(roomp) && roomp->canleave && rooms == 3)
			roomp->leave = 1;	/* automatic exit! */
		show(rm);		/* wait to show Krusty on his back */
		if (rm->leave) {
			byebye(rm);
			break;
		}
		moveboxes(rm);		/* also wait to erase teleport box */
		if (khp <= 0) break;
		kfall(roomp);	/* involuntary movement */
		roomp->kicking = 0;
		command();
		moverats(rm);
		movepies(rm);
		moveballs(rm);
		movehazards(rm);
		doleaks(rm);
		movemonsters(rm);
		moveelevators(rm);
		movegondolas(rm);
		moveshooters(rm);
		if (rooms > 2 && tick % 3 == 0) crumble(rm);
		if (rm->stunned) rm->stunned--;
		if (--rm->timer <= 0) break;
		tick++;
	}
/*
 *	Got out safe.
 */
	sleep(1);
	werase(roomwin);
	wrefresh(roomwin);
	sleep(1);
	if (khp <= 0) {		/* dead */
		addlife(-1);
		return 0;
	}
	if (rm->ratholes && rm->liverats) return 0; /* missed a rat */
	if (rm->bangbox > 0) return 0;		/* missed the bangbox */
	if (rm->ratholes==0 && rm->bangbox==0)	/* a teleport room */
		return rm->bonusboxes==0;
	return 1;
}

/*
 *	Returns 1 if all entries are locked, meaning that
 *	this hall is beaten.
 */

int
allrooms(rm)
ROOM *rm;
{
	int e;
	for (e=0; e<rm->entries; e++) {
		if (! rm->entry[e].locked) return 0;
	}
	return 1;
}

addlife(n)
int n;
{
	lives += n;
	if (lives <= 0) {
		erase();
		refresh();
		endwin();
		newscore();
		printscores();
		exit(0);
	}
	if (lives > 9) lives=9;		/* statutory limit is one digit */
	if (n<0) khp=10;
	mvwprintw(dollwin, 0, 0, ">K %d", lives);
	wrefresh(dollwin);
}

void
addscore(n)
int n;
{
	score += n;
	updatescorewin();
}

setcarry(rm, c)
ROOM *rm;
char c;
{
	rm->carry = c;
	updatecarrywin();
}

/*
 *	setpies.  If argument is negative, decrement; else reset.
 */

void
setpies(n,t)
int n, t;
{
	if (n < 0) pies += n;
	else pies = n;
	super = t;
	mvwprintw(piewin, 0, 0, "%2d %s", pies, super? "()": "o ");
	wrefresh(piewin);
}

intro()
{
	opening();
	erase();
	refresh();
	sleep(1);
}

/*
 *	nogo - returns 1 if you can't occupy that square.
 */

nogo1(rm, y, x)		/* for skinny things like rocks */
ROOM *rm;
int y, x;
{
	if (BLOWERAT(rm, y,x/2)) return 1;
	if (strchr("#&$_I", rm->grid[y][x/2])) return 1;
	if (I_BLANK != rm->mgrid[y][x/2]) return 1;
	return 0;
}

nogo(rm, y, x)
ROOM *rm;
int y, x;	/* x is on double scale - right half of creature. */
{
	return nogo1(rm, y, x) || nogo1(rm, y, x-1);
}

/* Special Krusty version - also for projectiles and heavy boxes */
knogo(rm, y, x)
ROOM *rm;
int y, x;
{
	if (nogo(rm,y,x)) return 1;
	if (PIPEAT(rm,y,x/2)) return 1;
	if (PIPEAT(rm,y,(x-1)/2)) return 1;
	return 0;
}

command()
{
	int k;
	long inwait;

again:
	inwait = ticklen;

getcommand:
    if (typed(inwait)) {
	inwait = 0;
	k = /* 0x7f & */ getch();
	switch(k) {
	case '\f': updatewindows();
		wrefresh(curscr);
		goto again;
	case ' ': case '.': return;		/* mark time */
	case 'y': case 'Y':		/* up and left */
		if (climbleft(roomp)) break;
		/* else fall through, treat as 'H' */
	case 'h': case 'H':
		roomp->krusty.facing = leftward;
		if (knogo(roomp,roomp->krusty.loc.y,roomp->krusty.loc.x-1))
			goto getcommand;	/* ignore unworkable move */
		if (knogo(roomp,roomp->krusty.loc.y-1,roomp->krusty.loc.x-1))
			goto getcommand;	/* ignore unworkable move */
		roomp->krusty.loc.x--;
		break;
	case 'u': case 'U':	/* up and right */
		if (climbright(roomp)) break;
		/* else fall through, treat as 'L' */
	case 'l': case 'L':
		roomp->krusty.facing = rightward;
		if (knogo(roomp,roomp->krusty.loc.y,roomp->krusty.loc.x+1))
			goto getcommand;
		if (knogo(roomp,roomp->krusty.loc.y-1,roomp->krusty.loc.x+1))
			goto getcommand;
		roomp->krusty.loc.x++;
		break;
	case 'f':	/* pick up or drop */
		if (roomp->carry) drop(roomp);
		else pickup(roomp);
		break;
	case 'd':	/* die */
		switch(rooms) {
		case 3:	khp = 0;
			causeofdeath = Y_SUICIDE;
			break;
		case 4: roomp->timer = 0; break;
		default:	goto getcommand;
		}
		break;
	case 'g': case 'G':	/* go through door */
		if (godoor(roomp)) return;
		break;
	case 'q': case 'Q':
		erase();
		refresh();
		endwin();
		causeofdeath = Y_QUIT;
		newscore();
		printscores();
		exit(0);
/*
 *	Distinguish between k and t - we have plenty of buttons!
 */
	case 'k':	/* kick */
/*
 *	If not square, cannot kick.
 */
		if (!kick(roomp)) goto getcommand;
		break;
	case 't':	/* throw */
		if (!throw(roomp)) goto getcommand;
		break;
	case 'j':	/* jump */
	case 'J':
		jump(roomp, 0);
		break;
	case 'i':	/* short jump */
	case 'I':
		jump(roomp, 1);
		break;
	}
    }
}

unlockbonus(rm)
ROOM *rm;
{
	int e;
	for (e=0; e<rm->entries; e++)
	if (rm->entry[e].name == 'z') {
		rm->entry[e].locked = 0;
		return;
	}
}

/* returns >0 if user typed something */
int
typed(msec)	/* microseconds */
long msec;
{
	static struct timeval tickstruct = {0, 0};
	fd_set r;

	tickstruct.tv_usec = msec;
	FD_ZERO(&r);
	FD_SET(0, &r);
	return select(32, &r, (fd_set *)0, (fd_set *)0, &tickstruct) > 0;
}

moveboxes(rm)
ROOM *rm;
{
	static int xo = -1, yo = -1;
	int t, x, y;
	char *b;
	for (x=0; x<rm->cols; x++)
	for (y=0; y<rm->rows; y++) {
		b = &rm->mgrid[y][x];
		switch(*b) {
		case I_BAG:	/* vanishes after one tick */
		case I_HONKER:
		case I_PIEITEM:
		case I_BALLITEM:
		case I_DOLLITEM:
		case I_BURGER: case I_HOTDOG: case I_SHAKE: case I_MUG:
		case I_BANGITEML:
		case I_BANGITEMR:
			if (xo==x && yo==y) *b = I_BLANK;
			else {
				xo = x;
				yo = y;
			}
			break;
		case I_TELEPORTITEM:
			*b = I_BLANK;
			werase(roomwin);
			wrefresh(roomwin);
			sleep(1);
			{
				char tname[8];
				sprintf(tname, "room.%cq", section);
				loadroom(tname, & roomv[rooms], 0, 0);
			}
			rooms++;
			roomp++;
			{
/* the real game values:	static int timerv[5] = {200,400,600,720,560}; */
				static int timerv[5] = {200,400,720,1200,560};
				roomp->timer = timerv[section-'1'];
			}
			if (playroom(roomp)) {
				(roomp-1)->krusty.loc.y = (roomp-1)->reentry.y;
				(roomp-1)->krusty.loc.x =
					(roomp-1)->reentry.x * 2 + 1;
			}
			freeroom(roomp);
			rooms--;
			roomp--;
			flushinp();
/*
 *	Restore the carry window:
 */
			setcarry(roomp, roomp->carry);
			break;
		case I_HEAVYBOX:	/* only these can fall */
			for (t=0; t<2; t++) {
				if (rm->mgrid[y+1][x] != I_BLANK) break;
				if (!strchr(BLANKS,rm->grid[y+1][x])) break;
				*b = I_BLANK;
				y++;
				rm->mgrid[y][x] = I_HEAVYBOX;
				b = &rm->mgrid[y][x];
			}
			liftrats(rm, y, x);
			break;
		}
	}
}

/*
 *	What happens if you manage to put a box into an elevator shaft,
 *	and while riding up, you bang your head against the box?
 *
 *	You could also descend and land on a box ...
 */

moveelevators(rm)
ROOM *rm;
{
	int e, inc, newy;
	if (tick % 3) return;		/* slow elevator */
	for (e=0; e<rm->elevators; e++) {
		switch(rm->elevator[e].dir) {
		case downward: inc = 1; break;
		case upward: inc = -1; break;
		}
		newy = rm->elevator[e].y + inc;
		if (newy < rm->elevator[e].ymin || newy > rm->elevator[e].ymax)
		switch(rm->elevator[e].dir) {
		case downward:
			rm->elevator[e].dir = upward;
			inc = -1;
			break;
		case upward:
			rm->elevator[e].dir = downward;
			inc = 1;
			break;
		}
		if (k_on_elev(rm, e)) {
			rm->krusty.loc.y += inc;
		}
/*
 *		Move even if direction changes.
 */
		rm->elevator[e].y += inc;
	}
}

movegondolas(rm)
ROOM *rm;
{
	int e, inc, newx;
/*	if (tick % 1) return;		\* fast gondola */
	for (e=0; e<rm->gondolas; e++) {
		switch(rm->gondola[e].dir) {
		case rightward: inc = 1; break;
		case leftward: inc = -1; break;
		}
		newx = rm->gondola[e].xcur + inc;
		if (newx < rm->gondola[e].xmin*2+1
		 || newx > rm->gondola[e].xmax*2+1)
		switch(rm->gondola[e].dir) {
		case rightward:
			rm->gondola[e].dir = leftward;
			inc = -1;
			break;
		case leftward:
			rm->gondola[e].dir = rightward;
			inc = 1;
			break;
		}
		if (k_on_gond(rm, e)) {	/* should check for legal (bonk!) */
			rm->krusty.loc.x += inc;
		}
/*
 *		Move even if direction changes.
 */
		rm->gondola[e].xcur += inc;
	}
}

delball(rm, n)
ROOM *rm;
int n;
{
	rm->flyball[n] = rm->flyball[--rm->flyballs];
}

delpie(rm, n)
ROOM *rm;
int n;
{
	rm->flypie[n] = rm->flypie[--rm->flypies];
}

movepies(rm)
ROOM *rm;
{
	int j, xnew;
	for (j=0; j<rm->flypies; j++) {
		PROJECTILE *pp;
		pp = & rm->flypie[j];
repeat:
		if (pp->age == 0) {
			/* it was just placed here; do nothing */
			pp->age = 1;
			continue;
		}
		if (pp->age >= 12) {
dele:
			*pp = rm->flypie[--rm->flypies]; /* delete it */
			if (j >= rm->flypies) return;
			goto repeat;
		}
		switch(pp->d) {
		case leftward: xnew = pp->l.x - 1; break;
		case rightward: xnew = pp->l.x + 1; break;
		}
		if (knogo(rm,pp->l.y,xnew)) goto dele;
		pp->l.x = xnew;
		pp->age++;
	}
}

moveballs(rm)
ROOM *rm;
{
	int j, xold, yold, xnew, ynew;
	int hitv, hith, hitd;
	PROJECTILE *b;
	for (j=0; j<rm->flyballs; j++) {
		b = & rm->flyball[j];
		if (b->age++ >= 10) {	/* delete it */
			rm->flyball[j] = rm->flyball[--rm->flyballs];
			j--;
			continue;
		}
		xold = b->l.x;
		yold = b->l.y;
		switch(b->d) {
		case leftward: xnew = xold - 2; break;
		case rightward: xnew = xold + 2; break;
		}
		switch(b->v) {
		case upward: ynew = yold - 1; break;
		case downward: ynew = yold + 1; break;
		}
/*
 *	Ball moves depend on square or straddle.
 *	Treat them separately.
 */
		if (xold & 1) {		/* square */
/*
 *		bounce?
 */
			hitv = (!strchr(CRUMBLEBLANKS, rm->grid[ynew][xold/2])
			 || I_BLANK != rm->mgrid[ynew][xold/2])
			 && !(b->v==upward && strchr(BALCONIES,
				rm->grid[ynew][xold/2]));
			hitd = (!strchr(CRUMBLEBLANKS, rm->grid[ynew][xnew/2])
			 || I_BLANK != rm->mgrid[ynew][xnew/2])
			 && !(b->v==upward && strchr(BALCONIES,
				rm->grid[ynew][xnew/2]));
			hith = (!strchr(CRUMBLEBLANKS, rm->grid[yold][xnew/2])
			 || I_BLANK != rm->mgrid[yold][xnew/2])
			 && !(b->v==upward && strchr(BALCONIES,
				rm->grid[yold][xnew/2]));
			if (!(hith || hitv || hitd)) {	/* go straight */
				b->l.x = xnew;
				b->l.y = ynew;
				smash(rm,yold,xnew/2);
				smash(rm,ynew,xold/2);
				smash(rm,ynew,xnew/2);
			}
			else if (hith==hitv) {	/* diagonal bounce */
				if (b->v==downward) b->v = upward;
				else b->v = downward;
				if (b->d==leftward) b->d = rightward;
				else b->d = leftward;
				smash(rm, ynew,xold/2);
				smash(rm, yold,xnew/2);
				continue;
			}
			else if (hitv) {	/* vertical bounce */
				if (b->v==downward) b->v = upward;
				else b->v = downward;
				j--;
				continue;	/* move same superball again */
			}
			else /* if (hbounce) */ {
				if (b->d==leftward) b->d = rightward;
				else b->d = leftward;
				j--;
				continue;	/* move same superball again */
			}
		}
		else {			/* straddle */
			int hitp, hitf, hitu, hitq;
			int wx;
			hitp = (!strchr(CRUMBLEBLANKS, rm->grid[ynew][xold/2-1])
			 || I_BLANK != rm->mgrid[ynew][xold/2-1])
			 && !(b->v==upward && strchr(BALCONIES,
				rm->grid[ynew][xold/2-1]));
			hitf = (!strchr(CRUMBLEBLANKS, rm->grid[ynew][xold/2])
			 || I_BLANK != rm->mgrid[ynew][xold/2])
			 && !(b->v==upward && strchr(BALCONIES,
				rm->grid[ynew][xold/2]));
			if (hitp || hitf) {	/* vertical bounce */
				if (b->v==downward) b->v = upward;
				else b->v = downward;
				j--;
				continue;	/* move same super ball again */
			}
			wx = (xnew - (b->d==leftward)) / 2;
			hitq = !strchr(CRUMBLEBLANKS, rm->grid[yold][wx])
			 || I_BLANK != rm->mgrid[yold][wx];
			hitu = !strchr(CRUMBLEBLANKS, rm->grid[ynew][wx])
			 || I_BLANK != rm->mgrid[ynew][wx];
			if (hitq || hitu) {	/* horizontal bounce */
				b->l.y = ynew;
				if (b->d==leftward) b->d = rightward;
				else b->d = leftward;
				smash(rm, ynew, xold/2);
				smash(rm, ynew, xold/2 - 1);
				continue;
			}
			/* go straight */
			b->l.y = ynew;
			b->l.x = xnew;
			smash(rm, yold, wx);
			smash(rm, ynew, wx);
			smash(rm, ynew, xnew/2);
			smash(rm, ynew, xnew/2 - 1);
		}
	}
}

/*
 *	Smash a crumble block at this point, if there is one.
 */
smash(rm,y,x)
ROOM *rm;
int y, x;
{
	switch(rm->grid[y][x]) {
	case I_CRUMBOX:
	case I_CRUMBOX2:
		rm->grid[y][x] = I_BLANK2;
	}
}

opendoor(rm)
ROOM *rm;
{
	int y, x;
	for (y=rm->door.y-1; y<=rm->door.y; y++)
	for (x=rm->door.x-1; x<=rm->door.x; x++)
		rm->grid[y][x] = '*';
	rm->canleave = 1;
}

/*
 *	For section antechambers:
 */

openbarrier(rm)
ROOM *rm;
{
	int y, x;

	if (section == '4') {	/* top to bottom, right to left */
		for (y=0; y<rm->rows; y++)
		for (x=rm->cols-1; x>=0; x--)
		switch(rm->grid[y][x]) {
		case I_CRUMBOX:
			breakbarrier(rm,y,x);
			return;
		case I_PLEDGE:
			buildledge(rm,y,x);
			return;
		}
	}
	else {		/* left to right */
		for (x=0; x<rm->cols; x++)
		for (y=0; y<rm->rows; y++)
		switch(rm->grid[y][x]) {
		case I_CRUMBOX:
			breakbarrier(rm,y,x);
			return;
		case I_PLEDGE:
			buildledge(rm,y,x);
			return;
		}
	}
}

buildledge(rm, y0, x0)
ROOM *rm;
int x0, y0;
{
	int x1, y1, x, y;
	for (x1=x0; x1<rm->cols; x1++)
		if (rm->grid[y0][x1] != I_PLEDGE) break;
	for (y1=y0; y1<rm->rows; y1++)
		if (rm->grid[y1][x0] != I_PLEDGE) break;
	for (y=y0; y<y1; y++)
	for (x=x0; x<x1; x++)
		rm->grid[y][x] = I_CRUMBOX;
}

breakbarrier(rm, y0, x0)
ROOM *rm;
int x0, y0;
{
	int x1, y1, x, y;
	for (x1=x0; x1<rm->cols; x1++)
		if (rm->grid[y0][x1] != I_CRUMBOX) break;
	for (y1=y0; y1<rm->rows; y1++)
		if (rm->grid[y1][x0] != I_CRUMBOX) break;
	for (y=y0; y<y1; y++)
	for (x=x0; x<x1; x++)
		rm->grid[y][x] = I_BLANK2;
}

void
aboutface(c)
CREATURE *c;
{
	switch(c->facing) {
	case leftward:
		c->going = c->facing = rightward; return;
	case rightward:
		c->going = c->facing = leftward; return;
	}
}

crumble(rm)
ROOM *rm;
{
	crumble1(rm, rm->krusty.loc.y+1, XLEFT(&rm->krusty));
	if (!(rm->krusty.loc.x & 1))	/* straddle */
		crumble1(rm, rm->krusty.loc.y+1, XRIGHT(&rm->krusty));
}

crumble1(rm, y, x)
ROOM *rm;
int y, x;
{
	char *g;
	g = & rm->grid[y][x];
	switch(*g) {
	case I_CRUMBOX:
		*g = I_CRUMBOX2; break;
	case I_CRUMBOX2:
		*g = I_BLANK2; break;
	}
}

ENTRY *
findentry(rm,y,x)
ROOM *rm;
int y, x;
{
	int e;
	ENTRY *ep;
	for (e=0; e<rm->entries; e++) {
		ep = & rm->entry[e];
		if ((ep->loc.x == x || ep->loc.x-1 == x)
		 && (ep->loc.y == y || ep->loc.y-1 == y))
			return ep;
	}
	return 0;
}

/*
 *	Set locks and barriers in outer chamber
 */
setsection(rm, c)
ROOM *rm;
char c;
{
	setouterlock(rm, c);
	while (c-- > '1') crashonebarrier(rm);
}

nextsection(rm, c)
ROOM *rm;
char c;
{
	setouterlock(rm, c);
	crashonebarrier(rm);
}

setouterlock(rm, c)
ROOM *rm;
char c;
{
	int e;
/*
 *	For this release, suppress sections 4-5.
 */
	if (c>='4') c='?';
	for (e=0; e<rm->entries; e++) {
		rm->entry[e].locked = c != rm->entry[e].name;
	}
}

/*
 *	For main antechamber.
 */

crashonebarrier(rm)
ROOM *rm;
{
	int x, y, barht, barwd, i, j;
	for (y=0; y<rm->rows; y++)
	for (x=0; x<rm->cols; x++)
	if (rm->grid[y][x] == I_CRUMBOX) goto found;	/* not break, please */
found:
	for (barht=0; ; barht++) if (rm->grid[y+barht][x] != I_CRUMBOX) break;
	for (barwd=0; ; barwd++) if (rm->grid[y][x+barwd] != I_CRUMBOX) break;
	for (j=y; j<y+barht; j++)
	for (i=x; i<x+barwd; i++)
		rm->grid[j][i] = I_BLANK2;
}

#ifdef BSD

beep()
{
	putchar('\007');
}

flushinp()
{
	ioctl(0, TCFLSH, 0);
}

#endif

	exit(99);
}

#endif
HIPPOPOTAMUS_ON_A_POGO_STICK

chmod 644 main.c

exit 0

