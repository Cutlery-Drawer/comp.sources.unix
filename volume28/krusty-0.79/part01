Newsgroups: comp.sources.unix
From: gls@hrcms.ATT.COM (Col. G. L. Sicherman)
Subject: v28i173: krusty-0.79 - Krusty's Fun House (a game), Part01/08
Message-id: <1.784409622.283@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: gls@hrcms.ATT.COM (Col. G. L. Sicherman)
Posting-Number: Volume 28, Issue 173
Archive-Name: krusty-0.79/part01

[ This is a game.  --vix ]

This is version 0.79 of Krusty's Fun House.  It is known to work on Suns
running version 4.1 of SunOS.  It *may* work on other systems, most likely
other Berkeley-style systems.

# This is a shell archive.  Remove anything before this line,
# then unpack it by saving it in a file and typing "sh file".
#
# Wrapped by Col. G. L. Sicherman on Wed Sep  7 10:44:38 1994
#
# This archive contains:
#	display.c	krusty.c	
#

LANG=""; export LANG
PATH=/bin:/usr/bin:$PATH; export PATH

echo x - display.c
cat >display.c <<'HIPPOPOTAMUS_ON_A_POGO_STICK'
/*
 *	Display routines for Krusty
 */

#include <curses.h>
#include <string.h>

#include "krusty.h"
#include "globs.h"
#include "codes.h"

static unsigned char showchar(), showgridchar(), codechar();

mvaddstrn(y, x, str, n)
int y, x, n;
char *str;
{
	char mhold[81];
	if (n<=0) return;
	strncpy(mhold, str, n);
	mhold[n] = '\0';
	mvaddstr(y, x, mhold);
}

show(rm)
ROOM *rm;
{
	int x, y;
	werase(roomwin);
	for (y = -4; y<=3; y++)
	for (x = -10; x<=9; x++) {
		char s;
		int stout;

		s = showchar(rm, rm->krusty.loc.y+y, rm->krusty.loc.x+x);
		stout = s & 0x80;
		if (vflag) stout = !stout;
		if (stout) wstandout(roomwin);
		mvwaddch(roomwin, 4+y, 10+x, s & 0x7f);
		if (stout) wstandend(roomwin);
	}
	wrefresh(roomwin);
	move(17,40);		/* shove the cursor out of the way */
	refresh();
}

/*
 *	High bit of return value set means use reverse video.
 */
static unsigned char
showchar(rm, y, x)
ROOM *rm;
int y, x;
{
	int j, w;
	char c;

/* rats show up above all else */
/* rightward:  S2
 * leftward:   EZ
 */
	for (j=0; j<rm->liverats; j++) {
		if (rm->rat[j].loc.x == x && rm->rat[j].loc.y == y
		 && !INTRAPX(rm, &rm->rat[j].loc))
		return rm->rat[j].facing==leftward? 'Z': '2';
		if (rm->rat[j].loc.x-1 == x && rm->rat[j].loc.y == y
		 && !INTRAPX(rm, &rm->rat[j].loc))
		return rm->rat[j].facing==leftward? '9': 'S';
	}
/* vipers */
	for (j=0; j<rm->vipers; j++) {
		CREATURE *vp;
		vp = & rm->viper[j];
		switch(vp->facing) {
	/*	O
	 *	(__/
	 */
		case leftward:
		    if (x==vp->loc.x-3
			&& y==vp->loc.y-1) return 'O';
		    if (y==vp->loc.y) switch(vp->loc.x-x) {
			case 3:	return '(';
			case 2:	case 1: return '_';
			case 0: return '/';
		    }
		    break;
	/*	   O
	 *	\__)
	 */
		case rightward:
		    if (x==vp->loc.x
			&& y==vp->loc.y-1) return 'O';
		    if (y==vp->loc.y) switch(vp->loc.x-x) {
			case 3:	return '\\';
			case 2:	case 1: return '_';
			case 0: return ')';
		    }
		    break;
		}
	}
/* aliens */
	for (j=0; j<rm->aliens; j++) {
		if ((x==rm->alien[j].loc.x-1 || x==rm->alien[j].loc.x)
		 && y==rm->alien[j].loc.y-1) return 'M';
		switch(rm->alien[j].facing) {
	/*	MM
	 *	JJ
	 */
		case leftward:
		    if ((x==rm->alien[j].loc.x-1 || x==rm->alien[j].loc.x)
			&& y==rm->alien[j].loc.y) return 'J';
		    break;
	/*	MM
	 *	LL
	 */
		case rightward:
		    if ((x==rm->alien[j].loc.x-1 || x==rm->alien[j].loc.x)
			&& y==rm->alien[j].loc.y) return 'L';
		    break;
		}
	}
/* pigs */
	for (j=0; j<rm->pigs; j++) {
		CREATURE *pp;
		pp = & rm->pig[j];
		if (x>=pp->loc.x-3 && x<=pp->loc.x && y==pp->loc.y)
			return "\\__/"[x-(pp->loc.x-3)];
		switch(pp->facing) {
	/*	U--\
	 *	\__/
	 */
		case leftward:
		    if (x>=pp->loc.x-3 && x<=pp->loc.x && y==pp->loc.y-1)
			return "U--\\"[x-(pp->loc.x-3)];
		    break;
	/*	/--U
	 *	\__/
	 */
		case rightward:
		    if (x>=pp->loc.x-3 && x<=pp->loc.x && y==pp->loc.y-1)
			return "/--U"[x-(pp->loc.x-3)];
		    break;
		}
	}
/* birds */
	for (j=0; j<rm->birds; j++) {
		CREATURE *pp;
		pp = & rm->bird[j];
		if (x>=pp->loc.x-3 && x<=pp->loc.x && y==pp->loc.y)
			return "(__)"[x-(pp->loc.x-3)];
		switch(pp->facing) {
	/*
	 *	<O_/
	 *	(__)
	 */
		case leftward:
		    if (x>=pp->loc.x-3 && x<=pp->loc.x && y==pp->loc.y-1)
			return (tick%2?"<O__":"<O_/")[x-(pp->loc.x-3)];
		    break;
	/*
	 *	\_O>
	 *	(__)
	 */
		case rightward:
		    if (x>=pp->loc.x-3 && x<=pp->loc.x && y==pp->loc.y-1)
			return (tick%2?"__O>":"\\_O>")[x-(pp->loc.x-3)];
		    break;
		}
	}
/* Krusty */
	if (khp <= 0) {	/* dead */
		if (y==rm->krusty.loc.y) {
			if (x==rm->krusty.loc.x) return ')';
			if (x==rm->krusty.loc.x-1) return '(';
			switch(rm->krusty.facing) {
			case leftward:
				if (x==rm->krusty.loc.x-2) return '_';
				if (x==rm->krusty.loc.x-3) return '\\';
				break;
			case rightward:
				if (x==rm->krusty.loc.x+1) return '_';
				if (x==rm->krusty.loc.x+2) return '/';
				break;
			}
		}
	}
	else {
		if (x==rm->krusty.loc.x && y==rm->krusty.loc.y-1) return 'Y';
		if (x==rm->krusty.loc.x-1 && y==rm->krusty.loc.y-1) return 'Y';
		switch(rm->krusty.facing) {
	/*	YY
	 *	JI
	 */
		case leftward:
			if (x==rm->krusty.loc.x-1 && y==rm->krusty.loc.y)
				return rm->kicking? '/': 'J';
			if (x==rm->krusty.loc.x && y==rm->krusty.loc.y)
				return 'I';
			break;
	/*	YY
	 *	IL
	 */
		case rightward:
			if (x==rm->krusty.loc.x-1 && y==rm->krusty.loc.y)
				return 'I';
			if (x==rm->krusty.loc.x && y==rm->krusty.loc.y)
				return rm->kicking? '\\': 'L';
			break;
		}
		if (rm->stunned > 0 && y==rm->krusty.loc.y-2) {
			if (x==rm->krusty.loc.x-2+(rm->stunned%2)
			 || x==rm->krusty.loc.x+(rm->stunned%2))
				return '*';
		}
	}
/* bang */
	switch(x%2) {
	case 0:
		if (y+1 < rm->rows
		 && rm->mgrid[y+1][x/2+1]==I_BANGITEML) return '\\';
		if (rm->mgrid[y][x/2+1]==I_BANGITEML) return '-';
		if (y-1 >= 0
		 && rm->mgrid[y-1][x/2+1]==I_BANGITEML) return '/';
		break;
	case 1:
		if (y+1 < rm->rows
		 && rm->mgrid[y+1][x/2-1]==I_BANGITEMR) return '/';
		if (rm->mgrid[y][x/2-1]==I_BANGITEMR) return '-';
		if (y-1 >= 0
		 && rm->mgrid[y-1][x/2-1]==I_BANGITEMR) return '\\';
		break;
	}
/* falling rock */
	for (j=0; j<rm->hazards; j++) {
		HAZARD *rk;
		rk = & rm->hazard[j];
		if (x == rk->l.x && y == rk->l.y) return 'o';
	}
/* pie or super-ball */
	for (j=0; j<rm->flypies; j++) {
		if (y==rm->flypie[j].l.y && x==rm->flypie[j].l.x) return 'o';
	}
	for (j=0; j<rm->flyballs; j++) {
		if (y==rm->flyball[j].l.y) {
			if (x==rm->flyball[j].l.x) return ')';
			if (x==rm->flyball[j].l.x-1) return '(';
		}
	}
/* elevator platform */
	for (j=0; j<rm->elevators; j++) {
		w = rm->elevator[j].x;
		if (y==rm->elevator[j].y
		 && x >= w*2-1
		 && x <= w*2+2) return '/';
	}
/* shooter */
	for (j=0; j<rm->shooters; j++) {
		w = rm->shooter[j].x;
		if (y==rm->shooter[j].y) {
			if (x == w*2-1 || x == w*2) return '<';
			if (x == w*2+1 || x == w*2+2) return '>';
		}
	}
/* gondola platform */
	for (j=0; j<rm->gondolas; j++) {
		w = rm->gondola[j].xcur;
		if (y==rm->gondola[j].y
		 && x >= w-2 && x <= w+1) return '~';
	}
/* movable objects */
	switch(c = rm->mgrid[y][x/2]) {
	case I_BLANK:	break;
	case I_BONUSBOX:
	case I_PIEBOX:
	case I_BANGBOX:
	case I_BALLBOX:
	case I_DOLLBOX:
	case I_TELEPORTBOX:
	case I_FOODBOX:		/* These are indistinguishable */
		return 0x80 | (x&1 ? '<': '>');
	case I_SHAKE:
		return x&1 ? '/': '\\';
	case I_BURGER:
		return x&1 ? '}': '{';
	case I_HOTDOG:
		return x&1 ? '3': 'E';
	case I_MUG:
		return x&1 ? 'J': 'L';
	case I_TELEPORTITEM:	/* In the real game, this is invisible */
		return x&1 ? '<': '>';
	case I_BAG:
		return x&1 ? ']': '[';
	case I_HONKER:
		return x&1 ? '<': 'C';
	case I_PIEITEM:
		return 'o';	/* no reverse video */
	case I_BALLITEM:
		return x&1 ? ')': '(';
	case I_DOLLITEM:
		return x&1 ? 'K': '>';
	case I_BANGITEML:
	case I_BANGITEMR:
		break;		/* Doesn't show up at this cell */ 
	case I_MVPIPE:
	case I_MHPIPE:
	case I_MULPIPE:
	case I_MDRPIPE:
	case I_MURPIPE:
	case I_MSPRING:
		return 0x80 | objsym(c,x);
	case I_MUBLOWER: /* No reverse video for blowers */
	case I_MLBLOWER:
	case I_MRBLOWER:
		return objsym(c,x);
	case I_JAR:
		return 0x80 | (x&1 ? '/': '\\');
	case I_RATJAR:
		return 0x80 | (x&1 ? 'Z': 'S');
	default:
		return 0x80 | c;
	}
	return showgridchar(rm,y,x);
}

static unsigned char
showgridchar(rm,y,x)
ROOM *rm;
int y, x;
{
/* the background */

	unsigned char c;
/*
 *	While the fun house is under construction,
 *	check for a barred entry.
 */
	if (section >= '3' && rooms==1) {
		switch(y) {
		case 22:
			if (x >= 64 && x < 72)
				return 0x80 | " DO NOT "[x-64];
			break;
		case 23:
			if (x >= 64 && x < 72)
				return 0x80 | "DISTURB!"[x-64];
			break;
		}
	}
	return codechar(rm,y,x,rm->grid[y][x/2], x&1);
}

static unsigned char
codechar(rm,y,x,c, right)
ROOM *rm;
char c;
int y,x,right;
{
	switch(c) {
	case I_VPIPE:
	case I_HPIPE:
	case I_ULPIPE:
	case I_URPIPE:
	case I_DLPIPE:
	case I_DRPIPE:
		return 0x80 | objsym(c, right);
	case I_RATHOLE:
		return right ? '}': '{';
	case I_CRUMBOX:
		return right ? '%': '%';
	case I_CRUMBOX2:
		return right ? '>': '<';
	case I_ELEVATOR:
	case I_SHOOTER:
	case I_TRACK:
	case I_GONDOLA:	/* impossible case */
		return '=';
	case I_ENTRY:
		if (findentry(rm,y,x/2)->locked) return '+';
		else return '?';
	case I_PLEDGE:			/* phantom ledge in entry hall */
		return '/';
	case I_HBALCONY:		/* hidden balcony */
		return showgridchar(rm,y-1,x);
	case I_FBALCONY:		/* top-of-fence balcony */
		return '|';
	case I_HVBALCONY:		/* no longer hidden */
		return '"';
	case I_SHADOW:
	case I_SKYBLOCK:
	case I_IBALCONY:		/* shadowed (invisible) balcony */
		return ' ';
	case I_SPRING:
		return 0x80 | objsym(c,x);
	case I_STAR:			/* star in the night sky */
		return right ? '.': ' ';
	case I_BLANK3:
		return right ? '\'': ',';
	case I_BLANK7:
		return '|';
	case I_BLANK8:
		return '-';
	case I_BLANK9:
		return '+';
	case I_BRICK:
		return ".:"[(y^x)&1];
	case I_DARKBRICK:
		return "- "[(y^x)&1];
	case I_CINDER:
		return (x|((x>>1)^y))&1? ' ': '|';
	case I_GLOOM:
		return (x|((x>>1)^y))&1? ' ': '.';
	case I_STRIPES:
		return "/  /"[(y+x)&3];
	case I_SSTRIPES:
		return '/';
	case I_DIAMONDS:
		return " /\\ /  \\\\  / \\/ "[((y&3)<<2)|(x&3)];
	case I_PBLOCK:
		return '#';		/* phony block */
	default:
		return c;
	}
}

objsym(c, d)
char c;
int d;
{
	switch(c) {
	case I_JAR:
		return d&1 ? '/': '\\';
	case I_RATJAR:
		return d&1 ? 'Z': 'S';
	case I_SPRING:
	case I_MSPRING:
		return 'S';
	case I_VPIPE:
	case I_MVPIPE:
		return '|';	/* broken bar! */
	case I_HPIPE:
	case I_MHPIPE:
		return '=';
	case I_ULPIPE:
	case I_MULPIPE:
		return 'J';
	case I_URPIPE:
	case I_MURPIPE:
		return 'L';
	case I_DLPIPE:
		return '7';
	case I_DRPIPE:
	case I_MDRPIPE:
		return 'F';
	case I_UBLOWER:
	case I_MUBLOWER:
		return '^';
	case I_LBLOWER:
	case I_MLBLOWER:
		return '<';
	case I_RBLOWER:
	case I_MRBLOWER:
		return '>';
	case I_MOVEBOX:
		return ' ';
	}
}

opening()
{
	char **p;
	int y, x, k;
	extern char version[];
	static char *openingd[] = {
" _  __     ____      _  _      ____      _____    __  __   []    ____",
"[ [/ /    [ __ \\    [ [[ [    / ___[    [_  __[   \\ \\/ /    /   / ___[",
"[ / /     [ ~~ /    [ [[ [    [ [__       [ [      \\  /         [ [__",
"[ [\\ \\    [ [\\ \\    [ [[ [    \\___ \\      [ [       [ [         \\___ \\",
"[_[ \\_\\   [_[ \\_\\   \\____/    [____/      [_[       [_[         [____/",
"",
"                     ____                   _  _\n",
"                    [ ___[      _  _       [ \\[ ]\n",
"                    [ [_       [ [[ [      [  [ ]\n",
"                    [ __[      [ [[ [      [ \\  ]\n",
"                    [_[        [ [[ [      [_]\\_]\n",
"                               \\____/\n",
"\n",
"          _  _                   _  _                    ____",
"         [ [[ [      ____       [ [[ [       ____       [  __[",
"         [ [[ [     /    \\      [ [[ [      / ___[      [ [__",
"         [    [     [ [[ [      [ [[ [      [ [__       [ ___[",
"         [_[[_[     [ [[ [      \\____/      \\___ \\      [____[",
"                    \\____/                  [____/",
0};
	static char *ratmsg[] = {
	"                     ____                  _____ ",
	"                    [ __ \\      ____      [_  __[",
	"                    [ ~~ /     /    \\       [ [  ",
	"                    [ [\\ \\     [ {} [       [ [  ",
	"                    [_[ \\_\\    [ __ [       [_[  ",
	"                               [_[[_[            ",
	"",
	0};
	static char *ratpic[] = {	/* rows 6-12 */
	"   __  ",
	"  ( )) ",
	"  ( `Do",
	"  /  \\ ",
	"\\C/  )D",
	" \\\\ /\\ ",
	" <_/\\_>",
	0};

	erase();
	for (y=0, p=openingd; *p; p++) {
		mvaddstr(y, 5, *p);
		y++;
	}
	mvprintw(22, 34, "Version %s", version);
	for (y=0, p=ratpic; *p; p++) {
		mvaddstr(y+6, 8, *p);
		y++;
	}
	move(23,39);
	refresh();
	for (x=10; x<COLS; x+=2) {
		if (x == 30) mvprintw(22, 34, "   press A   ");
		while (typed(400000L)) {
			if (x > 30
			) {
				k = 0x7f & getch();
				if (k == 'a' || k == 'A') return;
			}
			else flushinp();
		}
		for (y=0; y<7; y++) {
			mvaddstr(y+6, 5, openingd[6+y]);
			mvaddstrn(y+6, 5, ratmsg[y], x);
		}
		strncpy(ratpic[5]+2, ((x/2)&1)? " \\ ": "\\ /", 3);
		for (y=0, p=ratpic; *p; y++, p++) {
			if (strlen(*p)+x >= COLS)
				mvaddstrn(y+6, x, *p, COLS-x);
			else mvaddstr(y+6, x, *p);
		}
		move(23,39);
		refresh();
	}
	for (y=0, p=ratmsg; *p; p++) {
		mvaddch(y+6, 5, '\n');
		mvaddstr(y+6, 5, *p);
		y++;
	}
	refresh();
	for (;;) {
		k = 0x7f & getch();
		if (k == 'a' || k == 'A') return;
	}
}

unsigned char
xchar(buf, n)
unsigned char *buf;
int n;
{
	int r, b, t;

	r = 0;
	for (t=0; t<5; t++) {
		b = (45 + 29 * (n*5+t)) % (20*8);
		r >>= 1;
		if (buf[b/8] & (1<<(b%8))) r |= 0x10;

	}
	return '@'+r;
}

/*
 *	section is a character from '2' to '5'.
 */

showpass(section)
char section;
{
	int x, y;
	static char *kpic[11] = {
	"         /(",
	"       .(__).",
	" ___  /      \\  ___",
	"/   \\(        )/   \\",
	"\\    (.  )(  .)    /",
	" \\__/--_(__)_--\\__/",
	"    | \\------/ |",
	"     \\ \\    / /",
	"      \\ \\__/ /",
	"       \\____/"
	};
	static unsigned char pbuf[] =
		"\200\347\211b\2054$OtN\261\341\361n\354\025\302\022#H";
	erase();
	for (y=0; y<10; y++) mvprintw(y+5, 8, kpic[y]);
	for (x=0; x<19; x++) mvaddch(8, 30+2*x, "THE SECRET WORD IS:"[x]);
	mvaddstr(12,42,"+----------+");
	mvaddstr(16,42,"+----------+");
	for (y=13; y<=15; y++) {
		mvaddch(y, 42, '|');
		mvaddch(y, 53, '|');
	}
	refresh();
	sleep(1);

	standout();
	for (x=0; x<8; x++)
		mvaddch(14, 44+x, xchar(pbuf, (section-'2')*8+x));
	standend();
	move(LINES-1, 40);
	refresh();
	sleep(7);

	erase();
	updatewindows();
}

updatewindows()
{
	mvwprintw(helpwin, 0, 0,
"h left\nl right\ny up left\nu up right\nj jump\ni short jump\nk kick\n\
t throw\nf take/drop\ng door\nd die\nq quit\n");
	mvwprintw(dollwin, 0, 0, ">K %d", lives);
	updatescorewin();
	mvwprintw(piewin, 0, 0, "%2d %s", pies, super? "()": "o ");
	wrefresh(piewin);
	wrefresh(helpwin);
	wrefresh(dollwin);
	touchwin(roomwin);
	updatecarrywin();
}

updatecarrywin()
{
	if (roomp->carry) {
		wstandout(carrywin);
		mvwaddch(carrywin, 0, 0, objsym(roomp->carry,0));
		mvwaddch(carrywin, 0, 1, objsym(roomp->carry,1));
	}
	else {
		wstandend(carrywin);
		mvwaddch(carrywin, 0, 0, ' ');
		mvwaddch(carrywin, 0, 1, ' ');
	}
	wrefresh(carrywin);
}

updatescorewin()
{
	mvwprintw(scorewin, 0, 0, "%.6d\n", score);
	wrefresh(scorewin);
}
HIPPOPOTAMUS_ON_A_POGO_STICK

chmod 644 display.c

echo x - krusty.c
cat >krusty.c <<'HIPPOPOTAMUS_ON_A_POGO_STICK'
/*
 *	krusty.c - Krusty does something.
 */

#include <string.h>

#include "krusty.h"
#include "codes.h"
#include "globs.h"

jump(rm, isshort)
ROOM *rm;
int isshort;
{
	/* are we standing on something firm? */
	if (!k_on_something(rm)) {
		if (rm->falling >= 0
		 || rm->jumping > 0 && rm->jumping < 3) rm->springrequest = 1;
		return;
	}
/* Is there room overhead? */
	if (knogo(rm, rm->krusty.loc.y-2, rm->krusty.loc.x))
		return;
	rm->jumping = isshort? 10: 13;
	rm->krusty.loc.y--;		/* start the jump */
}

throw(rm)
ROOM *rm;
{
	if (rooms < 3) return 0;	/* can't throw in entry rooms */
	if (!pies) return 0;
	setpies(-1,super);
/*
 *	Keep the ball clear of Krusty.  Ball has width 2.
 */

/* clean this up ... */
	if (!knogo(rm,rm->krusty.loc.y-1,rm->krusty.loc.x)
	 || super
	  && strchr("&$",rm->grid[rm->krusty.loc.y-1][rm->krusty.loc.x])) {
		if (super) {
			PROJECTILE *bp;
			bp = & rm->flyball[rm->flyballs];
			bp->l.x=rm->krusty.loc.x;
			bp->l.y=rm->krusty.loc.y;
			bp->d =rm->krusty.facing;
			bp->age = 0;
/*
 *	If Krusty's front is standing on something, the ball bounces up;
 *	otherwise it goes down.  (Is this accurate?)
 */
			{
				int kx, ky;
				kx = rm->krusty.loc.x
					- (rm->krusty.facing==leftward);
				ky = rm->krusty.loc.y+1;
				rm->flyball[rm->flyballs].v =
				    (strchr(BLANKS, rm->grid[ky][kx/2])
				   && rm->mgrid[ky][kx/2]==I_BLANK) ?
						downward: upward;
			}
			rm->flyballs++;
			return 1;
		}
		else {
			rm->flypie[rm->flypies].l.x=rm->krusty.loc.x;
			rm->flypie[rm->flypies].l.y =rm->krusty.loc.y-1;
			rm->flypie[rm->flypies].d = rm->krusty.facing;
			rm->flypie[rm->flypies].age = 0;
			rm->flypies++;
			return 1;
		}
	}
	return 0;
}

drop(rm)		/* assumes carry > 0 */
ROOM *rm;
{
	int bx, by;
/* can't drop while falling */
	if (!k_on_something(rm)) return;
/* can't drop on elevator or gondola */
	if (k_on_any_elev(rm)) return;
/* no space to rise? */
	if (knogo(rm, rm->krusty.loc.y-2, rm->krusty.loc.x)) return;
/* If Krusty is square, just drop at this place.
 * If straddled, drop at front. */
	by = rm->krusty.loc.y;
	if (rm->krusty.loc.x & 1) { /* square */
		bx = rm->krusty.loc.x/2;
	}
	else {			/* straddled */
		bx = rm->krusty.loc.x/2 - (rm->krusty.facing == leftward);
/*
 *		Should try dropping behind if before is illegal....
 */
 	}
	switch(rm->grid[by][bx]) {
	case I_TRAPLEFT:
	case I_TRAPRIGHT:
	case I_TRAPEDGE:
	case I_TRAPCENTER:
		return;		/* can't drop on a trap */
	}
	rm->mgrid[by][bx] = rm->carry;
	setcarry(rm, 0);
	rm->krusty.loc.y--;		/* go up */
	liftrats(rm, by, bx);
}

pickup(rm)	/* assumes carry=0 */
ROOM *rm;
{
/*
 *	Krusty must be at least partly standing on the box.
 *	If he's straddling two, take the foremost box.
 */
	char *standingon;

	if (rm->krusty.loc.x & 1) {	/* standing square */
		standingon =
			& rm->mgrid[rm->krusty.loc.y+1][rm->krusty.loc.x/2];
	}
	else {			 /* straddling */
		standingon =
			& rm->mgrid[rm->krusty.loc.y+1][rm->krusty.loc.x/2 -
			(rm->krusty.facing == leftward)];
		if (*standingon == I_BLANK)
		standingon =
			& rm->mgrid[rm->krusty.loc.y+1][rm->krusty.loc.x/2 -
			(rm->krusty.facing == rightward)];
	}
	if (!strchr(CARRYABLE, *standingon)) return; /* no magic boxes! */
	setcarry(rm, *standingon);
	*standingon = I_BLANK;
	if (!knogo(rm, rm->krusty.loc.y+1, rm->krusty.loc.x))
		rm->krusty.loc.y++;
}

int
kick(rm)
ROOM *rm;
{
	int bx, by, inc, k;

	rm->kicking = 1;		/* even if there's nothing to kick */
	if (!(rm->krusty.loc.x & 1)) return 0;
	if (!k_on_something(rm)) return 0;	/* K must be anchored */
	switch(rm->krusty.facing) {
	case leftward:
		inc = -1;
		break;
	case rightward:
		inc = 1;
		break;
	}
	bx = (rm->krusty.loc.x)/2 + inc;
	by = rm->krusty.loc.y;
	switch(rm->mgrid[by][bx]) {
	case I_RATJAR:
		rm->mgrid[by][bx] = I_BLANK;
		looserat(rm, by, bx);
		return 1;
	case I_HEAVYBOX:
/* go sideways up to 3 units */
		for (k=0; k<3; k++) {
			if (rm->mgrid[by][bx+inc] != I_BLANK) break;
			if (!strchr(BLANKS,rm->grid[by][bx+inc]))
				break;
			rm->mgrid[by][bx+inc] = I_HEAVYBOX;
			rm->mgrid[by][bx] = I_BLANK;
			bx += inc;
			if (!nogo(rm, by+1, 2*bx+1)
			 && !strchr(BALCONIES, rm->grid[by+1][bx]))
				break; /* fall */
		}
/*
 *		If you kick a box under a rat, the rat rises.
 */
		liftrats(rm, by, bx);
		return 1;
	case I_BONUSBOX:
		rm->mgrid[by][bx] = tick%3? I_BAG: I_HONKER;
		addscore(100);
		delbonusbox(rm);
		return 1;
	case I_DOLLBOX:
		rm->mgrid[by][bx] = I_DOLLITEM;
		addlife(1);
		delbonusbox(rm);
		return 1;
	case I_TELEPORTBOX:
		rm->mgrid[by][bx] = I_TELEPORTITEM;
		return 1;
	case I_PIEBOX:
		rm->mgrid[by][bx] = I_PIEITEM;
		setpies(10,0);
		super = 0;
		return 1;
	case I_BALLBOX:
		rm->mgrid[by][bx] = I_BALLITEM;
		setpies(5,1);
		super = 1;
		return 1;
	case I_FOODBOX:
		{
			static char food[] = {I_BURGER, I_SHAKE,
				I_HOTDOG, I_MUG};
			rm->mgrid[by][bx] = food[tick%4];
			if (khp<10) khp++;
		}
		return 1;
	case I_BANGBOX:
		rm->mgrid[by][bx] =
			rm->krusty.facing==leftward? I_BANGITEML: I_BANGITEMR;
		rm->bangbox = -1;
		if (rm->ratholes==0) opendoor(rm); /* bonusroom */
		return 1;
	}
	return 0;	/* kick not valid */
}

delbonusbox(rm)
ROOM *rm;
{
/*
 *	If you've kicked the last of the bonus boxes in the teleport room,
 *	teleport back out soon.
 */
	if (rooms==4 && 0 >= --rm->bonusboxes && 9 < rm->timer) rm->timer=9;
}

stun(rm, t, d)
ROOM *rm;
int t;
DIREC d;
{
	if (rm->stunned <= 0) {
		--khp; /* overlapping stuns don't hurt */
		causeofdeath = t;
	}
	rm->stunned = 9;
	if (d!=none) {
		rm->staggering = 7;
		rm->staggerdir = d;
	}
}


/*
 *	Returns nonzero if Krusty is standing on something solider than air.
 */

k_on_something(rm)
ROOM *rm;
{
	int xl, xr;

	xl = XLEFT(&rm->krusty);
	xr = XRIGHT(&rm->krusty);
	return knogo(rm, rm->krusty.loc.y+1, rm->krusty.loc.x)
	 || strchr(BALCONIES, rm->grid[rm->krusty.loc.y+1][xl])
	 || strchr(BALCONIES, rm->grid[rm->krusty.loc.y+1][xr])
	 ||  k_on_any_elev(rm);
}

int
godoor(rm)
ROOM *rm;
{
	ENTRY *ep;
	char newname[8];

	if (!k_on_something(rm)) return 0;
	ep = findentry(rm, rm->krusty.loc.y, rm->krusty.loc.x/2);
	if (!ep) goto trydoor;
	if (ep->loc.x*2-1 > rm->krusty.loc.x) return 0;	/* staggered */
	if (rm->krusty.loc.y != ep->loc.y) return 0;
	if (ep->locked) return 0;
	sleep(1);
	werase(roomwin);
	wrefresh(roomwin);
	sleep(1);
	switch(rooms) {
	case 1:
		sprintf(newname, "room.%c", ep->name);
		section = ep->name;
		break;
	case 2:
		sprintf(newname, "room.%c%c", section, ep->name);
		break;
	}
	loadroom(newname, & roomv[rooms], ep->tries, ep->banged);
	rooms++;
	roomp++;
	if (playroom(roomp)) ep->locked = 1;
	else ep->tries++;
	if (roomp->bangbox < 0) {
/*
 *	He kicked the bang box.
 */
		ep->banged = 1;
		if (ep->name=='z') opendoor(roomp-1);
		else openbarrier(roomp-1);
	}
	freeroom(roomp);
	rooms--;
	roomp--;
	flushinp();
/*
 *	Restore the carry window.
 */
	setcarry(roomp, roomp->carry);
	if (rooms==2 && ep->name != 'z' && allrooms(roomp))
		unlockbonus(roomp);
	if (rooms==1) {
/*
 *	User beat the section!  Bump section & show password.
 */
		section++;
		if (section > '5') {
			opendoor(roomp);
		}
		else {
			nextsection(roomp, section);
			showpass(section);
			touchwin(scorewin);
			touchwin(dollwin);
			touchwin(piewin);
			touchwin(helpwin);
			refresh();
			backscore = score;
		}
	}
	return 1;
trydoor:
	if (!roomp->canleave || !ATDOOR(roomp)) return 0;
	roomp->leave = 1;
	return 1;
}

byebye(rm)
ROOM *rm;
{
	int x, y;

	sleep(1);
	for (y=0; y<8; y++)
	for (x=0; x<20; x++)
	if (rm->grid[rm->krusty.loc.y+y-4][(rm->krusty.loc.x+x-10)/2] != '*') {
		mvwaddch(roomwin, y, x, ' ');
	}
	wrefresh(roomwin);
	sleep(1);
	werase(roomwin);
	wrefresh(roomwin);
	sleep(1);
}

/*
 *	Involuntary movement - rising, falling, and staggering.
 */

kfall(rm)
ROOM *rm;
{
	int ky, kx, newx;
	char *r;

	ky = rm->krusty.loc.y;
	kx = rm->krusty.loc.x;
	if (rm->staggering > 0) {
		rm->staggering--;
		if ((lrand48()/11)%3==0) {
			int inc;
			switch(rm->staggerdir) {
			case leftward:
				newx = kx-1;
				break;
			case rightward:
				newx = kx+1;
				break;
			}
			if (!knogo(rm, ky, newx)) kx = rm->krusty.loc.x = newx;
		}
	}
	if (rm->jumping >= 0) {
/*
 *	Krusty can move 1-1/2 horizontal for each vertical unit of jump.
 */
		if (rm->jumping > 0
		 && (rm->jumping % 3 == 0 || rm->jumping > 16)) {
			if (knogo(rm, ky-2, rm->krusty.loc.x)) {
				rm->jumping = -1;	/* bonk! */
				return;
			}
			rm->krusty.loc.y--;
		}
		rm->jumping--;
		return;
	}
	if (!k_on_something(rm)) {	/* fall */
		rm->krusty.loc.y++;
		rm->falling++;
		return;
	}
/*
 *	Did he land on a spring?
 */
	if (k_on_springs(rm)) {
/*
 *	Springing requires a 'j'.
 */
		if (rm->springrequest) {
			if (rm->springing < 3) rm->springing++;
			rm->jumping = 5*rm->springing + 11;
			rm->falling = -1;
			rm->springrequest = 0;
			return;
		}
		if (rm->falling >= 3) {
			rm->jumping = 16;
			rm->springing = 1;	/* next 'j' will doublespring */
			rm->springrequest = 0;
			rm->falling = -1;
			return;
		}
		/* else land softly */
	}
	else if (rm->falling >= 24) stun(rm,Y_FALL,none);
	rm->falling = -1;
	rm->springing = rm->springrequest = 0;
	if (*(r = &rm->grid[ky+1][XLEFT(&rm->krusty)]) == I_HBALCONY)
		*r = I_HVBALCONY;
	if (*(r = &rm->grid[ky+1][XRIGHT(&rm->krusty)]) == I_HBALCONY)
		*r = I_HVBALCONY;
}

int
k_on_any_elev(rm)
ROOM *rm;
{
	int e;
	for (e=0; e<rm->elevators; e++)
		if (k_on_elev(rm, e)) return 1;
	for (e=0; e<rm->gondolas; e++)
		if (k_on_gond(rm, e)) return 1;
	return 0;
}

int
k_on_elev(rm, e)
ROOM *rm;
int e;
{
	int kl, kr;
	ELEVATOR *ep;
	kl = XLEFT(&rm->krusty);
	kr = XRIGHT(&rm->krusty);
	ep = &rm->elevator[e];
	if (ep->y == rm->krusty.loc.y+1
	 && ep->x <= kl+1 && ep->x >= kr-1) return 1;
	return 0;
}

int
k_on_gond(rm, e)
ROOM *rm;
int e;
{
	int kx;
	GONDOLA *ep;
	kx = rm->krusty.loc.x;
	ep = &rm->gondola[e];
	if (ep->y == rm->krusty.loc.y+1
	 && ep->xcur <= kx+2 && ep->xcur >= kx-2) return 1;
	return 0;
}

/*
 *	Returns nonzero if it succeeds.
 */

int
climbleft(rm)
ROOM *rm;
{
	int kx, ky;

	rm->krusty.facing = leftward;	/* in any case */
/*
 *	Allowed only if we're standing on something
 *	and there's something to climb onto.
 */
	if (!k_on_something(rm)) return 0;
	kx = rm->krusty.loc.x;
	ky = rm->krusty.loc.y;
	if (!knogo(rm, ky, kx-1)
	 && !strchr(BALCONIES, rm->grid[ky][(kx-2)/2])) return 0;
	if (knogo(rm, ky-1, kx-1) || knogo(rm, ky-2, kx-1))
		return 0;	/* no room to go there */
	rm->krusty.loc.x--;
	rm->krusty.loc.y--;
	return 1;
}

int
climbright(rm)
ROOM *rm;
{
	int kx, ky;

	rm->krusty.facing = rightward;	/* in any case */
/*
 *	Allowed only if we're standing on something
 *	and there's something to climb onto.
 */
	if (!k_on_something(rm)) return 0;
	kx = rm->krusty.loc.x;
	ky = rm->krusty.loc.y;
	if (!knogo(rm, ky, kx+1)
	 && !strchr(BALCONIES, rm->grid[ky][(kx+1)/2])) return 0;
	if (knogo(rm, ky-1, kx+1) || knogo(rm, ky-2, kx+1))
		return 0;	/* no room to go there */
	rm->krusty.loc.x++;
	rm->krusty.loc.y--;
	return 1;
}

int
k_on_springs(rm)
ROOM *rm;
{
	int kl, kr, ky;
	unsigned char c;
	kl = XLEFT(&rm->krusty);
	kr = XRIGHT(&rm->krusty);
	ky = rm->krusty.loc.y;

	return (rm->mgrid[ky+1][kl]==I_MSPRING
	 || rm->mgrid[ky+1][kr]==I_MSPRING
	 || rm->grid[ky+1][kl]==I_SPRING
	 || rm->grid[ky+1][kr]==I_SPRING)
	&& 
	(((c=rm->mgrid[ky+1][kl]) == I_MSPRING
	 || c == I_BLANK
	 || (c=rm->mgrid[ky+1][kr]) == I_MSPRING
	 || c == I_BLANK)
	&& ((c=rm->grid[ky+1][kl]) == I_SPRING
	 || strchr(BLANKS,c)
	&& ((c=rm->grid[ky+1][kr]) == I_SPRING
	 || strchr(BLANKS,c)))) ;
}
HIPPOPOTAMUS_ON_A_POGO_STICK

chmod 644 krusty.c

exit 0
