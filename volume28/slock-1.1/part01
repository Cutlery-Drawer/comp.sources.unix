Newsgroups: comp.sources.unix
From: wbachman@chop.isca.uiowa.edu (Wes Bachman)
Subject: v28i154: slock-1.1 - A curses based terminal locking program, Part01/01
Message-id: <1.784072219.8963@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: wbachman@chop.isca.uiowa.edu (Wes Bachman)
Posting-Number: Volume 28, Issue 154
Archive-Name: slock-1.1/part01

#! /bin/sh
#
# This archive contains the newest version of Slock, version 1.1.  This
# version mainly fixes some major bugs, pointed out to me by many users
# on the Internet.  For their help and support, I thank each one.
#
# Slock is an advanced screen locking program, similar to lock, but more
# sophisticated.  It allows event logging, timing updates on screen, system
# password support, a screen saver and more.
#
# This is a shell archive, meaning:
# 1. Remove everything above the #! /bin/sh line.
# 2. Save the resulting text in a file.
# 3. Execute the file with /bin/sh (not csh) to create the files:
#	BUGS
#	INSTALL
#	Makefile
#	README
#	additions
#	options
#	slock.1
#	slock.c
#	slock.h
#	slock2.c
#	version_history
# This archive created: Tue Sep 27 23:56:50 1994
export PATH; PATH=/bin:$PATH
echo shar: extracting "'BUGS'" '(240 characters)'
if test -f 'BUGS'
then
	echo shar: will not over-write existing file "'BUGS'"
else
sed 's/^	X//' << \SHAR_EOF > 'BUGS'
	X
	XWhen you type the correct key after a signal of some sort has been received,
	Xslock will tell you that the key is invalid.  It is not, of course.  Type the
	Xkey again to get it to work right.  This is also true during screen refreshes
	X(^L).
SHAR_EOF
if test 240 -ne "`wc -c < 'BUGS'`"
then
	echo shar: error transmitting "'BUGS'" '(should have been 240 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'INSTALL'" '(478 characters)'
if test -f 'INSTALL'
then
	echo shar: will not over-write existing file "'INSTALL'"
else
sed 's/^	X//' << \SHAR_EOF > 'INSTALL'
	X
	XTo install this package:
	X
	X		[I'm assuming you've already extracted the archive.]
	X
	X	1.  Edit the file "Makefile" for your system.
	X		[If you are on a CRAY, you MUST change -DITIMER to -DALARM]
	X
	X	2.  Edit the file "slock.h" for your system.
	X		[If you are on AIX, CRAY and other systems, set the variable
	X		 RESETSIG]
	X
	X	3.  Type "make" and cross your fingers.
	X
	X	4.  Type 'slock -help' to get information on options for slock.
	X
	X	5.  Mail bug reports to wbachman@blue.weeg.uiowa.edu
SHAR_EOF
if test 478 -ne "`wc -c < 'INSTALL'`"
then
	echo shar: error transmitting "'INSTALL'" '(should have been 478 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'Makefile'" '(645 characters)'
if test -f 'Makefile'
then
	echo shar: will not over-write existing file "'Makefile'"
else
sed 's/^	X//' << \SHAR_EOF > 'Makefile'
	X
	X# Simple Makefile for slock
	X
	XCC = /bin/cc
	XCFLAGS = -O
	X
	X# For this, choose ALARM to use alarm() and ITIMER to use setitimer()
	X# Unicos (Cray) users will probably have to define ALARM rather the ITIMER.
	X
	XAFLAG = -DITIMER
	X# AFLAG = -DALARM
	X
	X#  Edit everything above this line, nothing below
	X
	XOBJS = slock.o slock2.o
	XLDFLAGS = -lcurses -ltermcap
	X
	X.c.o:
	X	$(CC) $(CFLAGS) $(AFLAG) -c $*.c
	X
	X
	Xslock: $(OBJS)
	X	$(CC) $(CFLAGS) $(AFLAG) -o slock $(OBJS) $(LDFLAGS)
	X	@echo 'Screen lock compiled successfully!'
	X
	X
	Xclean:
	X	rm -f *.o
	X	rm -f slock
	X
	Xexport: clean
	X	rm -f ../slock.tar.Z
	X	tar cf ../slock.tar ../slock
	X	compress -v ../slock.tar
	X	
	Xslock.c : slock.h
SHAR_EOF
if test 645 -ne "`wc -c < 'Makefile'`"
then
	echo shar: error transmitting "'Makefile'" '(should have been 645 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'README'" '(1800 characters)'
if test -f 'README'
then
	echo shar: will not over-write existing file "'README'"
else
sed 's/^	X//' << \SHAR_EOF > 'README'
	XLEGAL NOTE:	
	XWES BACHMAN, PARADIGM SHIFT COMPUTING, THE UNIVERSITY OF IOWA AND ANY
	XOTHER AFFILIATED ORGANIZATIONS TAKE NO OBLIGATION FOR THE CONSEQUENCES
	XOF USE OR MISUSE OF THIS PROGRAM.  BY COMPILING OR RUNNING THIS PROGRAM, YOU
	XTHE USER TAKE FULL RESPONSIBILITY FOR ANY LIABILITIES THAT MAY RESULT FROM THE
	XUSE OF THIS SOFTWARE OR ANY DATA IN THIS PACKAGE.  THE ABOVE MAKE NO
	XWARRANTY, EXPRESS OR IMPLIED, TO THE USE OR POSESSION OF THIS SOFTWARE.
	X
	X
	XThis is the program Screen Lock (slock) by Wes Bachman, 1992.
	XAll rights reserved.  You may duplicate this program in its final version
	X(1.1) completly and partially in any forum.  (This program is Public Domain.
	XThe Author wishes to be credited, but this is not necessary.  The author
	Xrequests, from one programmer to another, and software based on this product
	Xalso be public domain.  Again, this is not necessary, only a request.)
	X
	XThis utility is made as an alternative to the lock program, and works in
	Xa similar way to lock, albeit more sophisticated.  It is modeled after lock
	Xon pine, xlock and lock.
	X
	XTo run slock, just type slock, enter the key twice, and your screen will be
	Xcleared, and info displayed about the lock.
	XSlock now allows such things as optional locking times, locking with
	Xeither password or key, event logging, lock countdown in seconds or
	Xminutes, a screen saver and screen refresh.
	X
	XScreen Lock uses the curses standard library for terminal emulation, and
	Xshould work with most terminal emulators.
	X
	XIf you have a problem with this package, mail wbachman@blue.weeg.uiowa.edu
	X
	XAlso, if you enjoy or use this package and would like to comment or just
	Xsay Hi, please mail to the above address!
	X
	XEnjoy.
	X
	XSlock is provided to you by Paradigm Shift Computing, which is an unoffical,
	Xunincorporated group of Unix programmers.
SHAR_EOF
if test 1800 -ne "`wc -c < 'README'`"
then
	echo shar: error transmitting "'README'" '(should have been 1800 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'additions'" '(709 characters)'
if test -f 'additions'
then
	echo shar: will not over-write existing file "'additions'"
else
sed 's/^	X//' << \SHAR_EOF > 'additions'
	X
	XThe following is a list of additions I would like to add to slock in
	Xfuture versions.  (First the thing has to get out of Alpha mode...)  If
	Xyou have any suggestions for additions, mail wbachman@blue.weeg.uiowa.edu.
	X
	X1.  Ask to delete log file, if specified one already exists.
	X
	X2.  Make two lines with system/process/user info.  (-info option?)
	X
	X3.  Make line with a "message" to anyone who walks by the screen and reads it.
	X
	X4.  Lock out incoming messages like talk requests.
	X
	X5.  Sense new mail and other such things, and display alert for user.
	X
	X6.  Create a man1 file.
	X
	X7.  Disallow showing the bad passcode on screen as an option.
	X
	X8.  Possibly add a .slockrc (?)
	X
	X9.  Add versital screen positioning.
SHAR_EOF
if test 709 -ne "`wc -c < 'additions'`"
then
	echo shar: error transmitting "'additions'" '(should have been 709 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'options'" '(524 characters)'
if test -f 'options'
then
	echo shar: will not over-write existing file "'options'"
else
sed 's/^	X//' << \SHAR_EOF > 'options'
	X
	XCommand line options:
	X
	Xslock usage
	X	Gives program usage
	X
	Xslock help
	X	Gives brief help on command line options and usage of program.
	X
	Xslock -seconds
	X	Allows user to view time left in seconds rather than minutes.
	X	(Very fast.  Use with caution.)
	X
	Xslock -p
	X	Use system password instead of using a key.
	X
	Xslock -l <logfile>
	X	Log all actions to the log file.  (Bad key, interrupts, etc.)
	X
	Xslock -t <minutes>
	X	Locks for time specified in minutes.
	X
	Xslock -s <minutes>
	X	Activates the screen saver after number of minutes specified.
SHAR_EOF
if test 524 -ne "`wc -c < 'options'`"
then
	echo shar: error transmitting "'options'" '(should have been 524 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'slock.1'" '(627 characters)'
if test -f 'slock.1'
then
	echo shar: will not over-write existing file "'slock.1'"
else
sed 's/^	X//' << \SHAR_EOF > 'slock.1'
	X.if n \{\
	X.	ds ct "
	X.\}
	X.if t \{\
	X.	ds ct \\(co
	X.\}
	X.TH SLOCK 1 "slock version 1.1"
	X.SH NAME
	Xslock - a curses based screen locking program
	X.SH SYNOPSIS
	X.B  slock [-p] [-s <screen-saver-time>] [-t <runtime>] [-seconds] [-l <logfile>]
	X slock [usage]
	X slock [help]
	X.PP
	X.SH DESCRIPTION
	X.I Slock
	Xis a screen based locking program for the Unix operating system.
	X.PP
	X.SH SEE ALSO
	Xlock(1)
	X.SH BUGS
	X.I Slock
	Xhas many bugs which are listed in the BUGS file.
	X.PP
	X.SH COPYRIGHT
	X.I Slock
	Xis a public domain program.  It can be copied freely, although it
	Xis requested that the author's name and documentation be included with
	Xdistributions.
SHAR_EOF
if test 627 -ne "`wc -c < 'slock.1'`"
then
	echo shar: error transmitting "'slock.1'" '(should have been 627 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'slock.c'" '(14875 characters)'
if test -f 'slock.c'
then
	echo shar: will not over-write existing file "'slock.c'"
else
sed 's/^	X//' << \SHAR_EOF > 'slock.c'
	X#include <curses.h>
	X#include <stdlib.h>
	X#include <string.h>
	X/* #include <strings.h> */
	X#include <signal.h>
	X#include <time.h>
	X#include <sys/time.h>
	X#include <pwd.h>
	X#include "slock.h"
	X
	X/*
	X *      Layout:
	X *   Line 0:  Title... program name, user name.
	X *   Line 4:  Who locked it and when?
	X *   Line 8:  Time left, and time locked.
	X *   Line 11:  Current time.
	X *   Line 14:  Status (Problems.  Wrong key, interrupts, etc.)
	X *   (16-18 could be system info lines....)
	X *   Line 20:  Enter key line.
	X */
	X
	Xchar real_pass[21];
	Xlong at = DEFAULTTIME;
	Xlong left = DEFAULTTIME;
	X
	X/* This is to hold screen data for redraws and stuff.  See the functions
	X * savescr(), redraw(), and delscr() */
	Xchar *screen[25];
	Xchar scrlen[25];
	Xchar scrpos[25];
	X
	X/* Are we in the screen saver ? */
	Xchar sson = FALSE;
	Xint saveat = 0;
	Xlong savetime = 0;
	X
	Xint hsaver();
	Xint halarm();
	Xint hquit();
	Xint hint();
	Xint hstp();
	Xchar passmode = FALSE;
	Xchar logmode = FALSE;
	Xchar *logfile;
	Xchar seconds = FALSE;
	X
	X/*
	X * This is the main function.  It parses the arguments, and runs the main
	X * loop for the entry of data.
	X */
	X
	Xmain(int argc, char **argv)
	X{
	X	char one[21];
	X	char two[21];
	X	char keytry[21];
	X	int gotkey = FALSE;
	X	register int i;
	X
	X	for(i=2; i<=argc; i++)	{
	X		if(*argv[i-1] == '-')	
	X			argv[i-1]++;
	X
	X		if(!(strcmp(argv[i-1], "usage")))	{
	X			printf(
	X			"Usage: %s [-p] [-s <minutes>] [seconds] [-l <logfile>",
	X			argv[0]);
	X			printf("] [-t<time>]\n");
	X			printf("       %s help\n       %s usage\n", argv[0],
	X				argv[0]);
	X			exit(0);
	X		}
	X		if(!(strcmp(argv[i-1], "help")))	{
	X			display_help();
	X			exit(0);
	X		}
	X		if(!(strcmp(argv[i-1], "seconds")))	{
	X			seconds = TRUE;
	X			continue;
	X		}
	X		switch(argv[i-1][0])	{
	X			case 'P':
	X			case 'p':
	X			passmode = TRUE;
	X			break;
	X
	X			case 'l':
	X			case 'L':
	X			logmode = TRUE;
	X			if(strlen(argv[i-1]) == 1)	{
	X			 if(i+1 > argc)	{
	X				printf("No log name found.\n");
	X				exit(-3);
	X			}
	X			 logfile = (char *) malloc(strlen(argv[i])+2);
	X			 bzero(logfile, strlen(argv[i])+2);
	X			 strncpy(logfile, argv[i], strlen(argv[i]));
	X			 i++;
	X			}	
	X			else	{
	X			 	argv[i-1]++;
	X			  logfile = (char *) malloc(strlen(argv[i-1])+2);
	X			  strcpy(logfile, argv[i-1]);
	X			}
	X			break;
	X
	X			case 't':
	X			case 'T':
	X			if(strlen(argv[i-1]) == 1)	{
	X			 if(i+1 > argc)	{
	X				printf("No time found.\n");	
	X				exit(-4);
	X			 }
	X				at = atoi(argv[i]);
	X				left = atoi(argv[i]);
	X				i++;
	X			}
	X			else	{
	X				argv[i-1]++;
	X				at = atoi(argv[i-1]);
	X				left = at;
	X			}
	X			break;
	X
	X			case 's':
	X			case 'S':
	X			if(strlen(argv[i-1]) == 1)	{
	X			 saveat = atoi(argv[i]);
	X			 i++;
	X			}	else	{
	X				argv[i-1]++;
	X				saveat = atoi(argv[i-1]);
	X			}
	X			break;
	X
	X			default:
	X			printf("Unknown option, %c.\n", argv[i-1][0]);
	X			exit(1);
	X		}
	X	}
	X	/* Gee, could I have done this more efficently.  *SNORK* */
	X	if(seconds)	{
	X		left = left * 60;
	X		at = at * 60;	
	X	}
	X	if(passmode)
	X		passtest();
	X	initscr();
	X	noecho();
	X	cbreak();
	X	clear();
	X	log_event(STARTUP, "");
	X	bzero(keytry, 21);
	X	bzero(real_pass, 21);
	X	bzero(one, 21);
	X	bzero(two, 21);
	X	if(!passmode)	{
	X		addstr("Enter key: ");
	X		refresh();
	X 		newgetstr(one, 20, 0);
	X		erase();
	X		addstr("Enter key again: ");
	X		refresh();
	X		newgetstr(two, 20, 0);
	X		if(strcmp(one, two))	{
	X			erase();
	X			addstr("Keys do not match.  Sorry.\n");
	X			log_event(NOMATCH, "");
	X			refresh();
	X			nocbreak();
	X			endwin();
	X			exit(0);
	X		}
	X		strcpy(real_pass, one);
	X	}
	X	erase();
	X	sigsetup();
	X	title();
	X	setname();
	X	clearstat();
	X	timesetup();
	X	if(!seconds)	settimer(60);
	X	else	settimer(1);
	X
	X	while(gotkey != TRUE)	{
	X		renter();
	X		newgetstr(keytry, 20, 0);
	X		if(!passmode)	{
	X		   if(!(strcmp(keytry, real_pass)))	{
	X			clear();
	X			refresh();
	X			nocbreak();
	X			endwin();
	X			log_event(CORRECT, "");
	X			exit(0);
	X		   }
	X		   else	report_bad(keytry);
	X		}
	X		else	{ /* if(using keys ) */
	X			if(checkpass(keytry))	{
	X				clear();
	X				refresh();
	X				nocbreak();
	X				endwin();
	X				log_event(CORRECT, "");
	X				exit(0);
	X			}	else	report_bad(keytry);
	X		}
	X		bzero(keytry, 21);
	X	}
	X}
	X
	X/* This little thing basically erases the scrolled Enter Key line and creates
	X * a new one on the correct line.  It refresh()s when done. */
	Xrenter()
	X{
	X	move(19, 0);
	X	deleteln();
	X	move(20, 0);
	X	deleteln();
	X	move(20, 10);
	X	if(!passmode)
	X		addstr("Enter key: ");
	X	else	
	X		addstr("Enter password: ");
	X	refresh();
	X}
	X
	X/* Creates line with title of program */
	Xtitle()
	X{
	X	move(0, 20);
	X	addstr("Screen locked using Screen Lock (1.1)");
	X}
	X
	X/* Creates line with the locked screen line. */
	Xsetname()
	X{
	X	char string[70];
	X	time_t tyme;
	X	int pos;
	X
	X	bzero(string, 70);
	X	tyme = time(NULL);
	X	sprintf(string, "Screen locked by %s at %.24s.", getlogin(), 
	X		ctime(&tyme));
	X	pos = 40 - (strlen(string)/2);
	X	move(4, pos);
	X	addstr(string);
	X}
	X
	X/* This sets up the amount of time left.  It is re-done by halarm */
	X/* Newtimer is a value that is passed.  If TRUE, timesetup re-does the
	X * timer setup.  (re-initializes.  Do this most of the time. */
	Xtimesetup()
	X{
	X	char str[40];
	X	char tst[25];
	X
	X	move(7, 35);
	X	addstr("Time left:");
	X
	X	if(!seconds)	{
	X		move(8, 34);
	X		bzero(str, 40);
	X		strcpy(str, (char *)timeleft());
	X		addstr(str);
	X	}
	X	else	{
	X		move(8, 31);
	X		bzero(str, 40);
	X		strcpy(str, (char *)timeleft());
	X		addstr(str);
	X	}
	X	move(10, 37);
	X	addstr("Time:");
	X	move(11, 28);
	X	if(!seconds)	{
	X		move(11, 32);
	X		sprintf(tst, "%.16s", gettod(FALSE));
	X		addstr(tst);
	X	}
	X	else	{
	X		move(11, 28);
	X		sprintf(tst, "%.24s", gettod(FALSE));
	X		addstr(tst);
	X	}
	X}
	X
	X/* This function displays the fact that a bad key or password was entered.
	X * It also makes a call to log the event. */
	X/* Use status line (14) for this. */
	Xreport_bad(char *badkey)
	X{
	X	int pos;
	X
	X	char string[80];
	X	move(14, 0);
	X	deleteln();
	X	bzero(string, 80);
	X	if(!passmode)
	X		sprintf(string, "Bad key \'%.60s\' used.", badkey);
	X	else
	X		sprintf(string, "Bad password \'%.60s\' used.", badkey);
	X	log_event(BADKEY, badkey);
	X	pos = 40 - (strlen(string)/2);
	X	if(pos < 0)
	X		pos  = 0;
	X	move(14, pos);
	X	addstr(string);
	X	/* refresh(); */
	X}
	X
	X/* This clears the statistics on line 14, and turns it to the default
	X * "Waiting." */
	Xclearstat()
	X{
	X	move(14, 0);
	X	deleteln();
	X	move(14, 36);
	X	addstr("Waiting.");
	X}
	X
	X/* Sets a timer for time iteration */
	Xsettimer(int sec)
	X{
	X#ifdef ALARM
	X	alarm(sec);
	X#endif
	X#ifdef ITIMER
	X	struct itimerval value;
	X
	X	value.it_interval.tv_sec = sec;
	X	value.it_interval.tv_usec = 0;
	X	value.it_value.tv_sec = sec;
	X	value.it_value.tv_usec = 0;
	X	setitimer(ITIMER_REAL, &value, (struct itimerval *)0);
	X#endif
	X}
	X
	X/* Sets up all necessary signal catcher */
	Xsigsetup()
	X{
	X	signal(SIGALRM, halarm);
	X	signal(SIGINT, hint);
	X	signal(SIGQUIT, hquit);
	X	signal(SIGTSTP, hstp);
	X}
	X
	X/* Standard signal catcher when screen saver is off.  This updaetes the
	X * screen for current time, and time left, and also checks to see if time 
	X * has run out, of if screen saver needs to run. */
	Xhalarm(int reset)
	X{
	X	char str[40];
	X	char tst[25];
	X	time_t tyme;
	X
	X#ifdef REDO
	X	if(!seconds)
	X		settimer(60);
	X	else	settimer(1);
	X#endif
	X	if(saveat)	{
	X	if(!seconds)
	X		savetime = savetime + 60;
	X	else
	X		savetime++;
	X	}
	X	left--;
	X	bzero(str, 40);
	X	if(!seconds)	{
	X		move(8, 34);
	X		strcpy(str, (char *)timeleft());
	X		addstr(str);
	X	}
	X	else	{
	X		move(8, 31);
	X		strcpy(str, (char *)timeleft());
	X		addstr(str);
	X	}
	X	if(left <= 0)	{
	X		clear();	
	X		refresh();	
	X		nocbreak();
	X		endwin();
	X		printf("The %d timer length is up.\n", at);
	X		exit(0);
	X	}
	X	tyme = time(NULL);
	X	if(!seconds)	{
	X		move(11, 32);
	X		sprintf(tst, "%.16s", gettod(TRUE));
	X		addstr(tst);
	X	}
	X	else	{
	X		move(11, 28);
	X		sprintf(tst, "%.24s", gettod(TRUE));
	X		addstr(tst);
	X	}
	X	clearstat();
	X	renter();
	X	if(saveat)
	X	if(savetime >= (saveat * 60))	
	X		start_saver();
	X#ifdef RESETSIG
	X	signal(SIGALRM, halarm);
	X#endif
	X}
	X
	X/* Catches and displayes interrupt signal. */
	Xhint()
	X{
	X	move(14, 0);
	X	deleteln();
	X	move(14, 28);
	X	addstr("Interrupt signal caught.");
	X	log_event(INTERRUPT, "");
	X	renter();
	X	signal(SIGINT, hint);
	X}
	X
	X/* Catches and displays stop signal. */
	Xhstp()
	X{
	X	move(14, 0);
	X	deleteln();
	X	move(14, 31);
	X	addstr("Stop signal caught.");
	X	log_event(STP, "");
	X	renter();
	X	signal(SIGTSTP, hstp);
	X}
	X
	Xhquit()
	X{	
	X	move(14, 0);
	X	deleteln();
	X	move(14, 31);
	X	addstr("Quit signal caught.");
	X	log_event(QSIG, "");
	X	renter();
	X	signal(SIGQUIT, hquit);
	X}
	X
	X/* Displays help information. */
	Xdisplay_help()
	X{
	X printf("Hello, and welcome to Screen Lock by Wes Bachman.\n");
	X printf("If you have _ANY comments, complaints, suggestions or questions about this\n");
	X printf("product, mail them to me at wbachman@blue.weeg.uiowa.edu.\n\n");
	X printf("\t\t\tHelp:\n\n");
	X printf("\tThis simple program, written in C using the curses library, is\n");
	X printf("designed to allow you to graphically lock your screen when leaving your\n");
	X printf("terminal.  To do this, just type \'slock\'.  Options follow:\n\n");
	X printf("o The -p option will use your system password instead of a key.\n");
	X printf("o The -l option will allow you to log your session into a logfile.\n");
	X printf("o The -t option allows the user to specify the time to run.\n");
	Xprintf("o The -seconds option allows you to diplay time left in seconds rather\n");
	X printf("   than minutes.  (Runs fast:  Use with caution.)\n");
	Xprintf("o The -s option will specify the number of minutes until the\n");
	Xprintf("   screen saver runs.\n\n");
	X printf("To stop the lock, retype your key or password at the prompt.\n");
	X}
	X
	X/* Checks to see if password is correct.  (Encrypts inputted password) */
	Xcheckpass(char *try)
	X{
	X	struct passwd *pw;
	X	char salt[2];
	X	char crypted[14];
	X	char realpass[14];
	X
	X	if((pw = getpwuid(getuid())) == NULL)	{
	X		clear();
	X		refresh();
	X		nocbreak();
	X		endwin();
	X		printf("BIG ERROR:  Could not get password info!\n");
	X		exit(-911);
	X	}
	X	sprintf(realpass, "%.13s", pw->pw_passwd);
	X	sprintf(salt, "%.2s", pw->pw_passwd);
	X	sprintf(crypted, "%.13s", crypt(try, salt));
	X	if(!(strncmp(realpass, crypted, 13)))
	X		return(TRUE);
	X	else
	X		return(FALSE);
	X}
	X
	X/* If in logmode, logs specified event type. */
	Xlog_event(int type, char *key)
	X{
	X	static FILE *fp;
	X	time_t tyme;
	X	static int open = FALSE;
	X
	X	if(!logmode)	return(0);
	X	if(!open)	{
	X		if(!(fp = fopen(logfile, "w")))	{
	X			clear();
	X			nocbreak();
	X			endwin();
	X			puts("Bad log name.");
	X			exit(0);
	X		}
	X		open = TRUE;
	X	}
	X
	X	tyme = time(NULL);
	X	switch(type)	{
	X		case BADKEY:
	X		if(!passmode)	
	X		fprintf(fp, "Bad key \'%s\' entered at %.24s.\n", key, 
	X			ctime(&tyme));
	X		else	
	X		fprintf(fp, "Bad password \'%s\' entered at %.24s.\n", key,
	X			ctime(&tyme));
	X		break;
	X
	X		case INTERRUPT:
	X		fprintf(fp, "Interrupt signal sent at %.24s.\n", ctime(&tyme));
	X		break;
	X
	X		case STP:
	X		fprintf(fp, "Stop signal sent at %.24s.\n", ctime(&tyme));
	X		break;
	X
	X		case STARTUP:
	X		fprintf(fp, "Slock started up at %.24s.\n", ctime(&tyme));
	X		break;
	X
	X		case CORRECT:
	X		if(!passmode)
	X		fprintf(fp, "Correct key given.  Exiting at %.24s.\n",
	X			ctime(&tyme));
	X		else
	X		fprintf(fp, "Correct password given.  Exiting at %.24s.\n",
	X			ctime(&tyme));
	X		break;
	X
	X		case NOMATCH:
	X		fprintf(fp, "Given keys do not match.  Exiting at %.24s.\n",
	X			ctime(&tyme));
	X		break;
	X
	X		case SAVER:
	X		if(sson)
	X		  fprintf(fp, 
	X		"Screen saver started after %d minute%s at %.24s.\n", 
	X		saveat, saveat !=1 ? "s" : "", ctime(&tyme));
	X		else	
	X		 fprintf(fp, "Screen saver stopped at %.24s.\n", ctime(&tyme));
	X		break;
	X
	X		case DEBUG:
	X		fprintf(fp, "DEBUG:  %s\n", key);
	X		break;
	X
	X		case QSIG:
	X		fprintf(fp, "Quit signal caught.\n");
	X		break;
	X
	X		default:
	X		fprintf(fp, "Unknown log type!");
	X	}
	X}
	X
	X/*
	X * This function checks the password entry to make sure it can get the
	X * password and is of correct length.  It will solve problems with /etc/
	X * shadow.
	X */
	Xpasstest()
	X{
	X	struct passwd *pw;
	X
	X	if((pw = getpwuid(getuid())) == NULL)	{
	X		printf("Could not get password file entry.\n");
	X		exit(-6);
	X	}
	X	if(strlen(pw->pw_passwd) != 13)	{
	X		printf("Wrong password length.  (Using /etc/shadow?)\n");
	X		exit(-7);
	X	}
	X}
	X
	X/*
	X * This function replaces getstr().  It takes a string of a maximum length
	X * of len and echos the char ech (not done yet.)
	X */
	X
	Xnewgetstr(char *str, int len, char ech)
	X{
	X	char c;
	X	register int i = 0;
	X
	X	bzero(str, len);
	X
	X	for(;(1);i++)	{
	X		if(i == len)
	X			return;
	X
	X		c = getch();
	X		if(saveat)	{
	X		if(sson)	stop_saver();
	X		savetime = 0;
	X		}
	X		switch(c)	{
	X			case '\n':
	X			case '\r':
	X			return(0);
	X			break;
	X
	X			case '\x0C':
	X			savescr();
	X			redraw();
	X			delscr();
	X			i--;
	X			break;
	X			
	X
	X			case '\x7F':
	X			case '\x08':
	X			str[i++] = '\0';
	X			if(ech != 0)	{
	X				delch();
	X			}
	X			break;
	X
	X			case '\x04':  /* This screws it up.  Ignore. */
	X			i--;
	X			break;
	X
	X			default:
	X			str[i] = c;
	X			if(ech == '\x7F')	{
	X				addch(c);
	X			}
	X			else if(ech != 0)	{
	X				addch(ech);
	X			}
	X		}
	X	}
	X}
	X
	X/* These functions use screen, scrlen, and scrpos */
	X
	X/* This function saves all of the data on the screen into the variable
	X * screen. */
	Xsavescr()
	X{
	X	register int i;
	X	register int j;
	X	int k;
	X	char data[100];
	X	char c;
	X
	X	for(i=0; i<=23; i++)	{
	X		scrlen[i] = 0;
	X		scrpos[i] = 0;
	X		for(j=0; j<=79; j++)	{
	X			k = 1;
	X			c = 0;
	X			move(i, j);
	X			c = inch();
	X			if(c)	{
	X				scrpos[i] = j;
	X				data[0] = c;
	X				while(j<=79)	{
	X					j++;
	X					move(i, j);
	X					c = inch();
	X					if(!c)	break;
	X					data[k] = c;
	X					k++;
	X				}
	X			break;
	X			}
	X		}
	X		if(c)	{
	X			scrlen[i] = strlen(data);
	X			screen[i] = (char *) malloc(scrlen[i]+1);
	X			bzero(screen[i], scrlen[i]);
	X			bcopy(data, screen[i], scrlen[i]);
	X		}
	X	}
	X}
	X
	X/* This function frees all data in the variable "screen" in order to save
	X * memory when screen data is not needed */
	X
	Xdelscr()
	X{
	X	register int i;
	X
	X	for(i=0; i<=23; i++)	{
	X		if(scrlen[i] != 0)	{
	X			free(screen[i]);
	X			scrlen[i] = 0;
	X			scrpos[i] = 0;
	X		}
	X	}
	X}
	X
	X/* This clears the screen and re-loads the data in the screen "screen" in
	X * order to redraw from screensaver or something. */
	X
	Xredraw()
	X{
	X	register int i;
	X
	X	clear();
	X	for(i=0; i<=23; i++)	{
	X		if(scrlen[i] != 0)	{
	X			move(i, scrpos[i]);
	X			addstr(screen[i]);
	X		}
	X	}
	X	refresh();
	X}
	X
	X/* Initilize the screen saver.  Save and clear screen, re-do signaling of
	X * alarm signal. */
	X
	Xstart_saver()
	X{
	X	savescr();
	X	clear();
	X	srand(time(NULL));
	X
	X	sson = TRUE;
	X	log_event(SAVER, "");
	X	signal(SIGALRM, hsaver);
	X}
	X
	X/* Clear and restore old screen.  Reset how signaling works for SIGALRM */
	Xstop_saver()
	X{
	X	sson = FALSE;
	X	log_event(SAVER, "");
	X	clear();
	X	redraw();
	X	delscr();
	X	move(18, 0);
	X	deleteln();
	X	renter();
	X	timesetup();
	X	signal(SIGALRM, halarm);
	X}
	X
	X/* The signal handler.  Find proper place for screen saver text to go, at
	X * random, check to see if time has expired, put a string at proper rand-
	X * om spot. */ 
	Xhsaver()
	X{
	X	char oldx;
	X	char oldy;
	X	int randum;
	X	char la[2];
	X	char *test = "Screen locked by slock!";
	X
	X	if(left <=0)	{
	X		clear();
	X		refresh();
	X		endwin();
	X		printf("Timer length %d is up.\n", at);
	X		exit(0);
	X	}
	X	erase();
	X	randum = rand();
	X	bcopy(&randum, la, 2);
	X	oldx = la[1];
	X	oldy = la[0];
	X
	X	oldx = oldx % (77 - strlen(test));
	X	oldy = oldy % 23;
	X
	X	left--;
	X
	X	move(oldy, oldx);
	X	addstr(test);
	X	refresh();
	X#ifdef REDO
	X	if(!seconds)
	X		settimer(60);
	X	else
	X		settimer(1);
	X#endif
	X}
SHAR_EOF
if test 14875 -ne "`wc -c < 'slock.c'`"
then
	echo shar: error transmitting "'slock.c'" '(should have been 14875 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'slock.h'" '(1370 characters)'
if test -f 'slock.h'
then
	echo shar: will not over-write existing file "'slock.h'"
else
sed 's/^	X//' << \SHAR_EOF > 'slock.h'
	X/* Edit the following: */
	X
	X/* This is the default time, in minutes, that slock runs for without 
	X * exiting... */
	X
	X#define DEFAULTTIME 60
	X
	X/* Set the definition RESETSIG if you are on a cray, AIX system or another
	X * system (maybe Xenix?) which needs the alarm signal to be set EVERY time
	X * its called.   If you compile WITHOUT RESETSIG defined, and the program
	X * ends quickly, with something like "Alarm signal", then recomipile the
	X * program with RESETSIG defined.  */
	X
	X#ifdef CRAY
	X#define RESETSIG
	X#endif
	X
	X#ifdef AIX
	X#define RESETSIG
	X#endif
	X
	X/*
	X * 
	X *
	X *
	X *
	X *
	X *
	X *
	X */
	X
	X
	X/* Nothing below this line needs be changed. */
	X
	X/* This is to re-call an alarm() every time one is receieved.  But, if
	X * you are using setitimer(), you would NOT want to do this... */
	X
	X#ifdef ALARM
	X#define REDO
	X#endif
	X
	X/*
	X * These are here for file logging system.  These are different events that
	X * can occur.
	X */
	X
	X#define BADKEY 1  /*  A bad key or password was given. */
	X#define INTERRUPT 2  /* An interrupt was caught. */
	X#define STP 3  /* A stop signal was caught. */
	X#define STARTUP 4  /* Program starting up... */
	X#define CORRECT 5  /* Correct key given. */
	X#define NOMATCH 6  /* Given keys do not match. */
	X#define SAVER 7 /* Starting or stopping of screen saver */
	X#define DEBUG 8 /* Send a debugging string to log (for testing) */
	X#define QSIG 9 /* A quit signal was caught. */
SHAR_EOF
if test 1370 -ne "`wc -c < 'slock.h'`"
then
	echo shar: error transmitting "'slock.h'" '(should have been 1370 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'slock2.c'" '(1683 characters)'
if test -f 'slock2.c'
then
	echo shar: will not over-write existing file "'slock2.c'"
else
sed 's/^	X//' << \SHAR_EOF > 'slock2.c'
	X
	X#include "slock.h"
	X#include <stdio.h>
	X#include <sys/types.h>
	X#include <time.h>
	X#include <sys/time.h>
	X
	Xextern long at;
	Xextern long left;
	Xextern char seconds;
	X
	Xconst char *timeleft()
	X{
	X	int hours, minutes, secs = 0;
	X	int athours, atminutes, atseconds = 0;
	X	int ourleft;
	X	int ourat;
	X	char ret[20];
	X	static char *atstr;
	X
	X	bzero(ret, 20);
	X	if(!seconds)	ourleft = (left * 60);
	X	else	ourleft = left;
	X
	X	if(!atstr)	{
	X		atstr = (char *) malloc(12);
	X		if(!seconds)	ourat = (at * 60);
	X		else	ourat = at;
	X
	X		athours = gethours(&ourat);
	X		atminutes = getmin(&ourat);
	X		atseconds = getsec(&ourat);
	X		if(!seconds)	sprintf(atstr, "%.2d:%.2d", athours, atminutes);
	X		else	sprintf(atstr, "%.2d:%.2d:%.2d", athours, atminutes,
	X			atseconds);
	X	}
	X
	X	hours = gethours(&ourleft);
	X	minutes = getmin(&ourleft);
	X	secs = getsec(&ourleft);
	X
	X	if(!seconds)	sprintf(ret, "%.2d:%.2d/%s", hours, minutes,atstr);
	X	else		sprintf(ret, "%.2d:%.2d:%.2d/%s", hours,
	X			minutes, secs, atstr);
	X	return(ret);
	X}
	X
	Xint gethours(int *timb)
	X{
	X	int count = 0;
	X	
	X	for(;*timb >= 3600; *timb -= 3600)
	X		count++;
	X
	X	return(count);
	X}
	X
	Xint getmin(int *timb)
	X{
	X	int count = 0;
	X
	X	for(;*timb >= 60; *timb -= 60)
	X		count++;
	X
	X	return(count);
	X}
	X
	Xint getsec(int *timb)
	X{
	X	return(*timb);
	X}
	X
	Xconst char *gettod(int sig)
	X{
	X	static int count = 0;  /* Number of seconds from last syscall */
	X	static time_t nowtime;
	X
	X	if(!sig)	{
	X		nowtime = time(NULL);
	X		count = -1;
	X	}	else	{
	X		if(count == -1)	{
	X			count = 0;		nowtime = time(NULL);
	X		}	else if(count == 900)	{
	X			count = 0;
	X			nowtime = time(NULL);
	X		}	else	{
	X			if(!seconds)	{
	X				count += 60;
	X				nowtime += 60;
	X			}	else	{
	X				count += 1;
	X				nowtime += 1;
	X			}
	X		}
	X	}
	X	return(ctime(&nowtime));
	X}
SHAR_EOF
if test 1683 -ne "`wc -c < 'slock2.c'`"
then
	echo shar: error transmitting "'slock2.c'" '(should have been 1683 characters)'
fi
fi # end of overwriting check
echo shar: extracting "'version_history'" '(2194 characters)'
if test -f 'version_history'
then
	echo shar: will not over-write existing file "'version_history'"
else
sed 's/^	X//' << \SHAR_EOF > 'version_history'
	X
	X0.7 - Locks terminal and gives all necessary information.  Keys work.
	X	(Major bug:  On signals somtimes, if you enter the right key, it
	X	fails.) [-WAB]
	X
	X0.8 - Includes all options and usages.  Also has online help.  This is
	X	Alpha version.  Above bug not yet fixed.  [-WAB]
	X
	X0.9 - All options working right.  Itimer ready.  Added more logging places.
	X	Beta version, to be uploaded to public FTP sites for trial.  Bug in
	X	.7 not fixed.  Makefile and more instructions created. [-WAB]
	X 
	X0.9.1 - Fixed minor bug with command line options.  Beta version [-WAB]
	X
	X0.9.2 - Added option for default breaktime while compiling. [-WAB]
	X
	X0.9.5 - Added ability for -seconds command, which will count in seconds
	X	rather than minutes.  Also shorted current time in minutes to make
	X	it less confusing.  [-WAB]
	X
	X0.9.5a - Fixed small bug in command line read of some options.  [-WAB]
	X
	X0.9.5b - Fixed bug that caused program to scroll Enter keyword lines on
	X	 every key refresh.  Did this by ONLY refreshing *AFTER* deleting
	X	 the Enter keyworld on the line above.  [-WAB]
	X
	X0.9.5c - Checks to see if password info is working and if using /etc/shadow
	X	 file for passwords.  Only in passmode, of course.  [-WAB]
	X
	X0.9.5d - Fixed bug (found by my compu-illiterate brother, no less!), that
	X	 caused a crash if input strings were too long.  [-WAB]
	X
	X0.9.5e - Fixed bug that caused bomb any time user entered Ctl-D.  [-WAB]
	X
	X0.9.5.1- Added a function that allows screen refresh with ^L.  But it reports
	X         a bad key.  [-WAB]
	X
	X0.9.6  - Added a simple but fairly useful screen saver.  Activate with the -s
	X  	 command.  It still has some bugs.  [-WAB]
	X
	X0.9.7  - Changed the screen saver stuff to get rid of bugs.  Documented every
	X	 function in code.  Fixed other minor bugs.  Added saver logging  [-WAB]
	X
	X0.9.7b - Fixed the usage to make it a couple nicer.  Fixed the logging bug,
	X	 and the problem with not exiting at timeout during screen saver. [-WAB]
	X
	X0.9.8  - Finally fixed some MAJOR bugs in the code, and made the system more
	X	 efficent.  Almost ready for release.  [-WAB]
	X
	X1.0    - Final Version.  All major bugs fixed.  Ready for release.  [-WAB]
	X
	X1.1    - Major bugs fixed.  Ready for re-release.  [-WAB]
SHAR_EOF
if test 2194 -ne "`wc -c < 'version_history'`"
then
	echo shar: error transmitting "'version_history'" '(should have been 2194 characters)'
fi
fi # end of overwriting check
#	End of shell archive
exit 0
