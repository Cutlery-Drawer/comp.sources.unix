Newsgroups: comp.sources.unix
From: bcr@physics.purdue.edu (Bill C. Riemers)
Subject: v28i165: term-2.2.5 - SLIP-like functionality between two *IX hosts (REPOST), Part02/09
References: <1.784237938.15304@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: bcr@physics.purdue.edu (Bill C. Riemers)
Posting-Number: Volume 28, Issue 165
Archive-Name: term-2.2.5/part02

#!/bin/sh
# This is `part02' (part 2 of a multipart archive).
# Do not concatenate these parts, unpack them in order with `/bin/sh'.
# File `term-2.2.5/INSTALL' is being continued...
#
touch -am 1231235999 $$.touch >/dev/null 2>&1
if test ! -f 1231235999 && test -f $$.touch; then
  shar_touch=touch
else
  shar_touch=:
  echo
  echo 'WARNING: not restoring timestamps.  Consider getting and'
  echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 1231235999 $$.touch
#
if test ! -r _sharseq.tmp; then
  echo 'Please unpack part 1 first!'
  exit 1
fi
shar_sequence=`cat _sharseq.tmp`
if test "$shar_sequence" != 2; then
  echo "Please unpack part $shar_sequence next!"
  exit 1
fi
if test ! -f _sharnew.tmp; then
  echo 'x - still skipping term-2.2.5/INSTALL'
else
  echo 'x - continuing file term-2.2.5/INSTALL'
  sed 's/^X//' << 'SHAR_EOF' >> 'term-2.2.5/INSTALL' &&
X
XThe --prefix option to configure can be used to specify a different target
Xdestination.  A standard layout with lib, bin, and man directories at that
Xpoint is assumed.  If you prefer to specify a non-standard arrangement,
Xyou can use the --mandir, --bindir, --libdir, and --sharedir arguments
Xto provide the paths to the directories you would like to install into.
X
XFinally, configure accepts --shlib and --static options to enable
Xor disable creating and using a dynamic libtermnet library on those
Xplatforms that support such libraries (currently Linux, NetBSD and SunOS
X4.x support is provided).  By default, under Linux, installing with
X--root will get dynamic libraries, and with --user will not (since
Xshared libraries require LD_LIBRARY_PATH to be set if installed by a
Xuser).  NetBSD and SunOS 4.x will default to shared libraries either way.
X
XAfter configure is run, it creates a "config.status" file in the build
Xdirectory.  This file can be executed to reconfigure the Makefile if
Xthe Makefile.in file is changed.  GNU make will do this automatically
Xwhen you type "make", if necessary.
X
XNote that if your .term directory is mounted over NFS, you will need to
Xedit the Makefile.in to add -DTERM_NFS_DIR to CFLAGS.  Or even better,
Xuse user share-mode, and link ~/term/tmp to a directory that is not
XNFS mounted like /usr/tmp or /tmp.
X
XIf you need to change either configure or Makefile.in for any other
Xreason, see if you can abstract the changes out into a form similar
Xto that used elsewhere and send in a patch.
X
X
XLinux Shared Library Notes
X--------------------------
X
XYou will need to have the Linux tools-2.11 toolset or newer installed
Xto build the default Linux shared library version.  The current version
Xis available from sunsite.unc.edu:/pub/Linux/gcc/src/tools-2.15.tar.gz.
XIf you don't want to be bothered, use configure --static to build static
Xversions of the tools (as was done with term 1.18 and earlier versions).
X
XIf you are building for Linux with shared libraries, and wish to try
Xtesting a new set of binaries before installing them, you will have
Xto do a "make install-shlib" as root after the "make", or the binaries
Xwill either not find the shared library, or use the previous version
Xif you have such installed.
X
XIf you would like to hack on the term code, and don't know anything
Xabout shared libraries, you can either just use --static and rely on
Xthe maintainer to fold your changes in with dynamic library support,
Xor you can do it yourself with the following brief guide.  (The best
Xthing to do is to read the tools doc/README.ps file, which explains
Xin detail the what, how, and why of shared libraries.)
X
XIf you don't add any new functions or data, and don't make any of the
Xglobal variables larger (e.g. expanding arrays), the dynamic library
Xconfiguration won't change.  You are happy; don't read any further.
X
XIf you do add new functions or data, you will do `make' and get:
X
X    *** WARNING: ./jump/jump.log exists!
X
Xor some similar message.  The jump.log file in the jump directory contains
Xnew symbols (functions or data) that have to be integrated into the
Xshared library configuration files before you can rebuild the library.
X
XLook at the jump.log file.  If all the new entries are marked with " T "
X(that is, functions), you are in luck.  Just append the file to 
Xjump.funcs, make clean, and try again.
X
XIf there are some non-T symbols, these represent data.  You will need
Xto convert the initial field full of zeros into a hexadecimal value
Xcorresponding to the largest you think that variable will ever be.
XMost globals are ints, which take four bytes (see the existing jump.vars
Xfile for an example).  For arrays (like com_result), you need to decide
Xif the array is likely to grow in the future, and pick some reasonable
Xupper bound value to put in the initial field to represent the array's
Xsize in bytes.  If you're not sure what the current size of a variable
Xis, do a `nm -n' on the object file to get a listing of the symbols
Xand their addresses.  "C" (common, or bss) symbols simply list their
Xsize in the address field, so that's easy.  For "D" symbols, you need to
Xsubtract the address of your symbol from that of the following "D" symbol
Xto get the size (if there is no following symbol, you're on your own).
XOnce you've updated all the size fields, add the relevant lines to the
Xjump.vars file.  (Note that we didn't mention the size for "T" symbols
Xin the previous paragraph.  That was on purpose; the size field for "T"
Xsymbols isn't used.)
X
XIf all of this seems a little confusing, you should probably read through
Xthe tools documentation to get the bigger picture.  Shared libraries
Xare the most confusing part of building code for Linux (although they
Xare more efficient than shared libraries in use on other platforms).
X
XFor the dll buff, the termnet library is using addresses 0x66000000
Xthrough 0x660fffff.  The jump table size limit is 0x1000, and the global
Xdata size 0x4000.  The version number corresponds to the fields of the
XVERSION variable; thus for VERSION 11854, the library version is 1.18.54.
XWe hope to keep libraries backwards compatible; if for some reason
Xwe have to bump the library major version before bumping term's major
Xversion number, we will stop keeping a close correspondence with VERSION.
X
X
X(Installation guide written by Chris Metcalf <metcalf@lcs.mit.edu>;
Xbugs to Bill Riemers <bcr@physics.purdue.edu.)
SHAR_EOF
  echo 'File term-2.2.5/INSTALL is complete' &&
  $shar_touch -am 1028144694 'term-2.2.5/INSTALL' &&
  chmod 0644 'term-2.2.5/INSTALL' ||
  echo 'restore of term-2.2.5/INSTALL failed'
  shar_count="`wc -c < 'term-2.2.5/INSTALL'`"
  test 8690 -eq "$shar_count" ||
    echo "term-2.2.5/INSTALL: original size 8690, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= term-2.2.5/Makefile.in ==============
if test -f 'term-2.2.5/Makefile.in' && test X"$1" != X"-c"; then
  echo 'x - skipping term-2.2.5/Makefile.in (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting term-2.2.5/Makefile.in (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'term-2.2.5/Makefile.in' &&
X# Term program makefile for @OS@ 
X# valid targets are:
X#	all linecheck termtest clean binclean realclean ... 
X#	bin install.bin install.share install.net
X#	lib install.lib
X#if shlib=any #	shlib install.shlib
X
XSRCDIR=@srcdir@
XVPATH=@srcdir@
X
XSHELL=/bin/sh
X# Note: If you change the version #, you must "make realclean"
XVERSION_MAJOR = 2
XVERSION_MINOR = 2
XPATCH_LEVEL   = 5
XPATCH_NAME    = .5
XVERSION_NUM   = @version_num@
X
XCC=@cc@
XCPP=@cpp@
X
X# ADDFLAGS=-DTERM_NFS_DIR is needed if your .term directory is
X# ADDFLAGS=-DNO_LOOPBACK keep "termnet" from connecting to localhost.
X# mounted with NFS.
XADDFLAGS = 
X#if shlib=linux # XFLAGS are used for the shared libraries only.
X#if shlib=linux XFLAGS=-fomit-frame-pointer
X
X
XCFLAGS = @debugflags@ @osflags@ $(ADDFLAGS) \
X	-DSHAREDIR='"$(SHAREDIR)"' -DVERSION=$(VERSION_NUM)
X 
XAR		= @ar@
XRANLIB		= @ranlib@
XAS		= as
XCHGRP		= chgrp term
XCHMOD		= chmod
XCP		= cp
XLN		= ln 
XRM		= rm -f
XRMDIR		= rmdir
XMKDIR		= mkdir
XMV		= mv
XNM		= nm
XSED		= sed
XSTRIP		= @strip@
XSHAREDIR	= @sharedir@
XBINDIR		= @bindir@
XLIBDIR		= @libdir@
XINCDIR		= @incdir@
XMANDIR		= @mandir@
XOSLIBS		= @libs@
XLIBS		= $(TERMNETLIB) $(OSLIBS) 
XLINKFLAGS	= @oslink@
XUSRTMP		= /usr/tmp
X
X#
X# Change this if yours is different.
X#
XCURSES= -ltermcap
X
X#if static=any    TERMNETDEP=libtermnet.a
X#if static=any    TERMNETLIB=$(TERMNETDEP)
X#if shlib=linux   TERMNETDEP=shared/libtermnet.sa
X#if shlib=linux   TERMNETLIB=$(TERMNETDEP)
X#if shlib=sun     TERMNETDEP=libtermnet.so.$(VERSION_MAJOR).$(VERSION_MINOR)
X#if shlib=sun     TERMNETLIB=-L. -L$(LIBDIR) -ltermnet
X#if shlib=netbsd  TERMNETDEP=libtermnet.so.$(VERSION_MAJOR).$(VERSION_MINOR)
X#if shlib=netbsd  TERMNETLIB=-L. -L$(LIBDIR) -ltermnet
X
XTERMOBJS=main.o serial.o misc.o do_link.o pty.o compress.o \
X		meta.o statistics.o sevenbit.o 
X
XCLIENTOBJS=utils.o client.o termnet.o terminal.o do_select.o sockets.o do_connect.o \
X		spipe.o term_getopt.o term_putenv.o term_herror.o \
X		term_spair.o checksum.o host_lookup.o
X
XMANPAGES=term.1 term_clients.1 term_setup.1 termtest.1 linecheck.1
X
X#if !one_client LINKS = trdated
X#if !one_client LINK_FROM = trdate
X#if !one_client CLIENTS = tdownload tudpredir tmon tshutdown \
X#if !one_client 	trsh tupload tredir txconn trdate
X
X#if one_client LINK_FROM = trsh
X#if one_client CLIENTS = trsh
X#if one_client LINKS = tdownload tudpredir tmon tshutdown \
X#if one_client 	trdated tupload tredir txconn trdate
X
XPROGS=term $(CLIENTS) linecheck
X
X#if one_client LINKOBJS = term_clients.o trdate.o download.o \
X#if one_client  	upload.o udpredir.o redir.o tmon.o shutdown.o \
X#if one_client  	trshell.o xconn.o 
X
Xall: bin $(LINKS) libtermnet.a
X
Xhelp:
X	@echo "To install, make one of the following:"
X	@echo "  install - binaries, dynamic and static library, include file"
X	@echo "  install.bin - binaries"
X	@echo "  install.share - binaries in shared mode"
X#if static=any 	@echo "  install.lib - static library"
X#if shlib=linux 	@echo "  install.lib - static library"
X#if shlib=any 	@echo "  install.shlib - dynamic link library"
X	@echo "  install.include - include file"
X	@echo "  install.man - manual pages"
X	@echo "  install.net - full networking flag"
X
Xinstall: @install_shlib@ install.bin install.lib
X
Xinstall.bin: all
X	if [ ! -d $(BINDIR) ] ; then $(MKDIR) $(BINDIR); else true; fi 
X	-cd $(BINDIR); $(RM) $(LINKS)
X	-cd $(BINDIR); for i in $(PROGS) $(LINKS); do \
X		if [ -f $$i ]; then $(MV) $$i $$i.old ; fi ; \
X	done
X	for i in $(PROGS); do \
X		$(CP) $$i $(BINDIR)/. ; \
X		$(STRIP) $(BINDIR)/$$i ; \
X		$(CHMOD) 755 $(BINDIR)/$$i ; \
X	done
X	-cd $(BINDIR); for i in $(LINKS); do \
X		$(LN) -s ./$(LINK_FROM) $$i ; \
X	done
X	if [ ! -d $(LIBDIR) ] ; then $(MKDIR) $(LIBDIR); else true; fi
X
Xinstall.lib: libtermnet.a install.include
X	$(CP) ./libtermnet.a $(LIBDIR)
X	-cd $(LIBDIR);$(RANLIB) libtermnet.a
X
Xinstall.net installnet: install
X	if [ ! -d $(SHAREDIR) ] ; then $(MKDIR) $(SHAREDIR); else true; fi
X	echo "# This file activates full term networking" > $(SHAREDIR)/termnet
X
Xinstall.include:
X	if [ ! -d $(INCDIR) ]; then $(MKDIR) $(INCDIR); else true; fi
X	$(CP) termnet.h $(INCDIR)/.
X#if root 	$(CHMOD) 644 $(INCDIR)/termnet.h
X
X
Xinstall.share installshare share: install 
X	cd $(BINDIR) ; \
X	for i in $(PROGS) ; do \
X#if root		$(CHGRP) $$i ; \
X		$(CHMOD) @setid@ $$i ; \
X	done
X	if [ ! -d $(SHAREDIR) ] ; then $(MKDIR) $(SHAREDIR); else true; fi 
X#if !root	$(CHMOD) 0755 $(SHAREDIR)
X#if !root	if [ ! -d $(SHAREDIR)/tmp ] ; then $(MKDIR) $(SHAREDIR)/tmp; else true; fi 
X#if !root	-$(CHMOD) 755 $(SHAREDIR)/tmp ; \
X#if root	$(CHGRP) $(SHAREDIR)
X#if root	$(CHMOD) 0775 $(SHAREDIR)
X#if root	-if [ -d $(SHAREDIR)/tmp ] ; then \
X#if root		$(MV) $(SHAREDIR)/tmp $(SHAREDIR)/tmp.old ; \
X#if root		$(RM) -r $(SHAREDIR)/tmp.old ; \
X#if root	else true; fi
X#if root	-$(LN) -s $(USRTMP) $(SHAREDIR)/tmp
X	-if [ ! -d $(SHAREDIR)/.term ]; then \
X		 $(LN) -s $(SHAREDIR)/tmp/private $(SHAREDIR)/.term ; \
X	else true; fi
X
Xinstall.man installman: $(MANPAGES)
X	if [ ! -d $(MANDIR) ]; then $(MKDIR) $(MANDIR); else true; fi
X	cd $(SRCDIR); for i in *.1; do \
X		$(CP) $$i $(MANDIR)/.; \
X#if root 		$(CHMOD) 644 $(MANDIR)/$$i; \
X	done
X	for i in $(CLIENTS) $(LINKS); do \
X		echo ".so man1/term_clients.1" > $(MANDIR)/$$i.1; \
X#if root 		$(CHMOD) 644 $(MANDIR)/$$i.1; \
X	done
X
X# The next two targets are only used by GNU Make, as far as I know.
X# They automatically rebuild Makefile and config.status when necessary.
X
XMakefile: config.status Makefile.in
X	./config.status
X
Xconfig.status: configure
X	./configure
X
X#-----------------------------------------------------------------
X# if your make complains about not know how to make .o files, you
X# may need to uncomment following two lines.. (for gnu make).
X#%.o: %.c
X#	$(CC) $(CFLAGS) -c $< -o $@
X#     --- or following 5 lines ------
X#.SUFFIXES
X#.SUFFIXES:  .o .c
X#
X#.c.o:
X#	$(CC) $(CFLAGS) -c $< -o $@
X#-----------------------------------------------------------------
X
Xlibtermnet.a: $(CLIENTOBJS)
X	$(RM) libtermnet.a
X	$(AR) libtermnet.a $(CLIENTOBJS)
X	$(RANLIB) libtermnet.a
X
Xbin: $(PROGS)
X
Xtermtest: termtest.o $(LIBS)
X	$(CC) $(LINKFLAGS) $(NOPAG) -o termtest termtest.o $(LIBS)
X
Xterm: $(TERMNETDEP) $(TERMOBJS) 
X	$(CC) $(LINKFLAGS) -o term $(TERMOBJS) $(LIBS)
X
X$(LINKS): $(LINK_FROM)
X	for i in $(LINKS); do \
X		$(RM) $$i ; \
X		$(LN) -s ./$(LINK_FROM) $$i ; \
X	done
X
Xlinecheck: $(TERMNETDEP) linecheck.o
X	$(CC) $(LINKFLAGS) $(NOPAG) -o linecheck linecheck.o $(LIBS)
X
X#if one_client $(LINK_FROM): $(TERMNETDEP) $(LINKOBJS)
X#if one_client  	$(CC) $(LINKFLAGS) $(NOPAG) -o $(LINK_FROM) $(LINKOBJS) $(CURSES) $(LIBS)
X#if one_client
X
X#if !one_client trsh: $(TERMNETDEP) trshell.o
X#if !one_client 	$(CC) $(LINKFLAGS) $(NOPAG) -o trsh trshell.o $(LIBS)
X#if !one_client 
X#if !one_client tupload: $(TERMNETDEP) upload.o
X#if !one_client 	$(CC) $(LINKFLAGS) $(NOPAG) -o tupload upload.o $(LIBS)
X#if !one_client 
X#if !one_client tdownload: $(TERMNETDEP) download.o
X#if !one_client 	$(CC) $(LINKFLAGS) $(NOPAG) -o tdownload download.o $(LIBS)
X#if !one_client 
X#if !one_client tredir: $(TERMNETDEP) redir.o
X#if !one_client 	$(CC) $(LINKFLAGS) $(NOPAG) -o tredir redir.o $(LIBS)
X#if !one_client 
X#if !one_client tudpredir: $(TERMNETDEP) udpredir.o
X#if !one_client 	$(CC) $(LINKFLAGS) $(NOPAG) -o tudpredir udpredir.o $(LIBS)
X#if !one_client 
X#if !one_client txconn: $(TERMNETDEP) xconn.o
X#if !one_client 	$(CC) $(LINKFLAGS) $(NOPAG) -o txconn xconn.o $(LIBS)
X#if !one_client 
X#if !one_client tshutdown: $(TERMNETDEP) shutdown.o
X#if !one_client 	$(CC) $(LINKFLAGS) $(NOPAG) -o tshutdown shutdown.o $(LIBS)
X#if !one_client 
X#if !one_client tmon: $(TERMNETDEP) tmon.o
X#if !one_client 	$(CC) $(LINKFLAGS) $(NOPAG) -o tmon tmon.o $(CURSES) $(LIBS)
X#if !one_client 
X#if !one_client trdate: $(TERMNETDEP) trdate.o
X#if !one_client 	$(CC) $(LINKFLAGS) $(NOPAG) -o trdate trdate.o $(CURSES) $(LIBS)
X
Xtags:
X	etags *.h *.c
X
X
Xclean:
X	$(RM) *.o lib*.a lib*.sa lib*.so.* core compress.debug *.out *~ 
X#if shlib=linux 	$(RM) @jump_dir@/jump.log shared/* @jump_dir@/_*
X#if shlib=sun   	$(RM) shared/*
X#if shlib=netbsd	$(RM) shared/*
X
Xrealclean: clean
X	$(RM) $(PROGS) $(LINKS) termtest 1 TAGS tags
X	-$(RM) *.log
X#if shlib=linux 	$(RM) -r shared @jump_dir@/jump.import
X#if shlib=sun   	$(RM) -r shared
X#if shlib=netbsd 	$(RM) -r shared
X
X
Xdepend:
X	cd $(SRCDIR) && \
X	$(SED) '/^\#\#\# Dependencies/q' Makefile > tmp_make && \
X	for i in *.c; do echo $$i; gcc -E -MM $$i >> tmp_make; done && \
X	$(MV) tmp_make Makefile
X
X#if shlib=any   # This text is all the @OS@ specific shared library stuff
X#if shlib=any   LDCONFIG	= @ldconfig@
X
X#if shlib=linux SHLIBOBJS=shared/utils.o shared/client.o shared/termnet.o shared/terminal.o \
X#if shlib=linux 		shared/do_select.o shared/sockets.o shared/do_connect.o \
X#if shlib=linux 		shared/spipe.o shared/term_getopt.o shared/term_putenv.o \
X#if shlib=linux 		shared/term_herror.o shared/term_spair.o shared/checksum.o \
X#if shlib=linux 		shared/host_lookup.o
X
X#if shlib=linux DLLBIN  = @dllbin@
X#if shlib=linux DLLAS   = @dllas@
X#if shlib=linux MKIMAGE	= $(DLLBIN)mkimage -f
X#if shlib=linux MKSTUBS	= $(DLLBIN)mkstubs
X#if shlib=linux GETVARS	= $(DLLBIN)getvars
X#if shlib=linux GETFUNCS = $(DLLBIN)getfuncs
X#if shlib=linux GETSIZE = $(DLLBIN)getsize
X#if shlib=linux VERIFY	= $(DLLBIN)verify-shlib
X#if shlib=linux 
X#if shlib=linux VERSION=$(VERSION_MAJOR).$(VERSION_MINOR).$(PATCH_LEVEL)
X#if shlib=linux # When you change the following #'s you need to increase the
X#if shlib=linux # major version # of the library.  I really don't care about
X#if shlib=linux # lookup table speeds, so I made these large defaults.
X#if shlib=linux ADDRESS=0x66000000
X#if shlib=linux JUMPSIZE=0x1000    # allows 1000 functions.
X#if shlib=linux GOTSIZE=0x4000     # allows 16k (16 x 1024 arrays) of variables
X#if shlib=linux JUMP_DIR=@jump_dir@
X#if shlib=linux JUMP_LIB=@jump_lib@
X#if shlib=linux NOPAG=-N -s
X#if shlib=linux
X#if shlib=linux clientobjs: $(SHLIBOBJS)
X#if shlib=linux
X#if shlib=linux %.o: %.c
X#if shlib=linux
X#if shlib=linux %.o: shared/%.s
X#if shlib=linux 	$(AS) -o $*.o shared/$*.s
X#if shlib=linux
X#if shlib=linux shared/%.o: shared/%.s
X#if shlib=linux 	JUMP_DIR=$(JUMP_DIR) JUMP_LIB=$(JUMP_LIB) \
X#if shlib=linux 		$(DLLAS) -o $@ $<
X#if shlib=linux
X#if shlib=linux shared/%.s: %.c
X#if shlib=linux 	@if [ ! -d shared ] ; then $(MKDIR) shared ; else true ; fi
X#if shlib=linux		$(CC) -S $(CFLAGS) $(XFLAGS) -o $@ $<
X#if shlib=linux
X#if shlib=linux $(JUMP_DIR)/jump.import: /usr/lib/libc.sa
X#if shlib=linux 	$(NM) --no-cplus -o /usr/lib/libc.sa | \
X#if shlib=linux 		$(SED) -n '/__GOT__/s/__GOT_//p' > $(JUMP_DIR)/jump.import
X#if shlib=linux
X#if shlib=linux shared/libtermnet.so.$(VERSION): $(JUMP_DIR)/jump.import $(SHLIBOBJS)
X#if shlib=linux 	@if [ -f $(JUMP_DIR)/jump.log ]; then \
X#if shlib=linux 		echo "*** WARNING: $(JUMP_DIR)/jump.log exists!" >&2; \
X#if shlib=linux			echo ">>> HINT: Running 'make jump-update' without interruption" >&2; \
X#if shlib=linux			echo ">>>       may be easier than manually updating " >&2; \
X#if shlib=linux 		exit 1; \
X#if shlib=linux 	fi
X#if shlib=linux 	cd shared; JUMP_DIR=$(JUMP_DIR) $(MKIMAGE) \
X#if shlib=linux 		-l libtermnet -v $(VERSION) -a $(ADDRESS) -j $(JUMPSIZE) \
X#if shlib=linux 		-g $(GOTSIZE) -- $(CLIENTOBJS) `gcc -print-libgcc-file-name` -lc
X#if shlib=linux 	cd shared; cp libtermnet.so.$(VERSION) libtermnet.so.$(VERSION).new
X#if shlib=linux 	cd shared; mv libtermnet.so.$(VERSION).new libtermnet.so.$(VERSION)
X#if shlib=linux
X#if shlib=linux
X#if shlib=linux shlib shared/libtermnet.sa: shared/libtermnet.so.$(VERSION)
X#if shlib=linux 	cd shared; JUMP_DIR=$(JUMP_DIR) $(MKSTUBS) \
X#if shlib=linux 		-l libtermnet -v $(VERSION) -a $(ADDRESS) -j $(JUMPSIZE) \
X#if shlib=linux 		-g $(GOTSIZE) -- libtermnet
X#if shlib=linux	
X#if shlib=linux install.shlib install-shlib: shared/libtermnet.sa shared/libtermnet.so.$(VERSION) install.include
X#if shlib=linux 	if [ ! -d $(LIBDIR) ] ; then $(MKDIR) $(LIBDIR); else true; fi
X#if shlib=linux 	$(CP) -pf shared/libtermnet.sa shared/libtermnet.so.$(VERSION) $(LIBDIR)/.
X#if shlib=linux #if root 	$(CHMOD) 644 $(LIBDIR)/libtermnet.sa
X#if shlib=linux #if root 	$(CHMOD) 755 $(LIBDIR)/libtermnet.so.$(VERSION)
X#if shlib=linux #if root 	$(LDCONFIG)
X#if shlib=linux #if !root	$(LN) -sf libtermnet.so.$(VERSION) $(LIBDIR)/libtermnet.so.$(VERSION_MAJOR)
X#if shlib=linux #if !root 	@echo "In order for your term binaries to work you will need to" >&2
X#if shlib=linux #if !root 	@echo "add export LD_LIBRARY_PATH='$(LIBDIR)' to your ~/.profile" >&2
X#if shlib=linux #if !root 	@echo "and add setenv LD_LIBRARY_PATH '$(LIBDIR)' to your ~/.login" >&2
X#if shlib=linux #if !root 	@echo "Then logout, and login again." >&2
X#if shlib=linux 
X#if shlib=linux # jump-update by Davor Jadrijevic, <davor%emard.uucp@ds5000.irb.hr>
X#if shlib=linux # modified by Bill C. Riemers to use $(JUMP_DIR).new
X#if shlib=linux
X#if shlib=linux jump.update jump-update: $(JUMP_DIR)/jump.log
X#if shlib=linux 	$(RM) -r $(JUMP_DIR).new
X#if shlib=linux 	$(CP) -a $(JUMP_DIR) $(JUMP_DIR).new
X#if shlib=linux 	cat $(JUMP_DIR).new/jump.vars >> $(JUMP_DIR).new/jump.funcs
X#if shlib=linux 	cat $(JUMP_DIR).new/jump.log >> $(JUMP_DIR).new/jump.funcs
X#if shlib=linux 	$(MV) $(JUMP_DIR).new/jump.funcs $(JUMP_DIR).new/jump.log
X#if shlib=linux 	cd $(JUMP_DIR).new; JUMP_DIR=$(JUMP_DIR).new $(GETVARS)
X#if shlib=linux 	cd $(JUMP_DIR).new; JUMP_DIR=$(JUMP_DIR).new $(GETFUNCS)
X#if shlib=linux 	$(RM) $(JUMP_DIR).new/jump.log $(JUMP_DIR).new/*.s
X#if shlib=linux  	$(MAKE) JUMP_DIR=$(JUMP_DIR).new clean $(CLIENTOBJS)
X#if shlib=linux 	cd $(JUMP_DIR).new; JUMP_DIR=$(JUMP_DIR).new $(GETSIZE) > \
X#if shlib=linux 		jump.vars.min; 
X#if shlib=linux		if [ ! -s $(JUMP_DIR).new/jump.funcs ] ; then \
X#if shlib=linux 		echo "Error updating jump/jump.funcs"; exit 1; \
X#if shlib=linux		elif [ `wc -l < $(JUMP_DIR).new/jump.funcs` -lt \
X#if shlib=linux 		`wc -l < $(JUMP_DIR)/jump.funcs` ] ; then \
X#if shlib=linux 		echo "Error updating jump/jump.funcs"; exit 1; \
X#if shlib=linux 	fi;
X#if shlib=linux		if [ ! -s $(JUMP_DIR).new/jump.vars ] ; then \
X#if shlib=linux 		echo "Error updating jump/jump.vars"; false; \
X#if shlib=linux		elif [ `wc -l < $(JUMP_DIR).new/jump.vars` -lt \
X#if shlib=linux			`wc -l < $(JUMP_DIR)/jump.vars` ] ; then \
X#if shlib=linux 		echo "Error updating jump/jump.vars"; false; \
X#if shlib=linux 	fi;
X#if shlib=linux		$(CP) -f $(JUMP_DIR).new/* $(JUMP_DIR)/.
X#if shlib=linux 	$(RM) -r $(JUMP_DIR).new $(JUMP_DIR)/jump.log
X#if shlib=linux		@if [ -s $(JUMP_DIR).new/jump.vars.min ] ; then \
X#if shlib=linux 		echo ">>> HINT: 'jump/jump.vars.min' is generated." >&2; \
X#if shlib=linux 		echo ">>> HINT: Extend it if needed and overwrite 'jump/jump.vars'" >&2; \
X#if shlib=linux 		echo ">>> HINT: Then 'make' again" >&2; \
X#if shlib=linux 	else \
X#if shlib=linux 		$(RM) $(JUMP_DIR)/jump.vars.min; \
X#if shlib=linux 	fi
X#if shlib=linux
X#if shlib=linux # I'm not sure why we want these, but here they are. (bcr)
X#if shlib=linux clean.bin:
X#if shlib=linux 	$(RM) $(PROGS)
X#if shlib=linux
X#if shlib=linux bin.static static.bin: libtermnet.a
X#if shlib=linux 	$(MAKE) TERMNETDEP=libtermnet.a TERMNETLIB=libtermnet.a bin
X#if shlib=linux
X#if shlib=linux install.bin.static: bin.static install.bin 
X
X
X#if shlib=sun   # If you want to use /usr/lang/acc instead, use -pic not -fpic
X#if shlib=sun
X#if shlib=sun   VERSION=$(VERSION_MAJOR).$(VERSION_MINOR)
X#if shlib=sun
X#if shlib=sun   libtermnet.so.$(VERSION): $(CLIENTOBJS)
X#if shlib=sun   	cd shared; ld -assert pure-text $(CLIENTOBJS)
X#if shlib=sun   	mv shared/a.out libtermnet.so.$(VERSION)
X#if shlib=sun 
X#if shlib=sun   shlib: libtermnet.so.$(VERSION)
X#if shlib=sun 
X#if shlib=sun   $(CLIENTOBJS):
X#if shlib=sun   	@if [ ! -d shared ]; then $(MKDIR) shared; else true; fi
X#if shlib=sun   	$(CC) -c $(CFLAGS) $(SRCDIR)/$*.c
X#if shlib=sun   	$(CC) -fpic -o shared/$*.o -c $(CFLAGS) $(SRCDIR)/$*.c
X#if shlib=sun
X#if shlib=sun   install.shlib install-shlib: libtermnet.so.$(VERSION) install.include
X#if shlib=sun   	if [ ! -d $(LIBDIR) ]; then $(MKDIR) $(LIBDIR); else true; fi
X#if shlib=sun    	$(RM) $(LIBDIR)/libtermnet.so.$(VERSION)
X#if shlib=sun    	$(CP) libtermnet.so.$(VERSION) $(LIBDIR)/.
X#if shlib=sun  #if root 	$(CHMOD) 755 $(LIBDIR)/libtermnet.so.$(VERSION)
X#if shlib=sun  #if root 	$(LDCONFIG)
X
X#if shlib=netbsd  VERSION=$(VERSION_MAJOR).$(VERSION_MINOR)
X#if shlib=netbsd
X#if shlib=netbsd  libtermnet.so.$(VERSION): $(CLIENTOBJS)
X#if shlib=netbsd	cd shared; ld -Bshareable -Bforcearchive $(CLIENTOBJS)
X#if shlib=netbsd	mv shared/a.out libtermnet.so.$(VERSION)
X#if shlib=netbsd
X#if shlib=netbsd  shlib: libtermnet.so.$(VERSION)
X#if shlib=netbsd
X#if shlib=netbsd  $(CLIENTOBJS):
X#if shlib=netbsd	@if [ ! -d shared ]; then $(MKDIR) shared; fi
X#if shlib=netbsd	$(CC) -c $(CFLAGS) $(SRCDIR)/$*.c
X#if shlib=netbsd	$(CC) -fpic -o shared/$*.o -c $(CFLAGS) $(SRCDIR)/$*.c
X#if shlib=netbsd
X#if shlib=netbsd  install.shlib install-shlib: libtermnet.so.$(VERSION) install.include
X#if shlib=netbsd 	if [ ! -d $(LIBDIR) ] ; then $(MKDIR) $(LIBDIR); else true; fi
X#if shlib=netbsd 	$(RM) $(LIBDIR)/libtermnet.so.$(VERSION)
X#if shlib=netbsd 	$(CP) libtermnet.so.$(VERSION) $(LIBDIR)/.
X#if shlib=netbsd  #if root 	$(CHMOD) 755 $(LIBDIR)/libtermnet.so.$(VERSION)
X#if shlib=netbsd  #if root 	$(LDCONFIG)
X
X#
X# The following targets are mostly for my personal use. I use them to 
X# update the version of term when I am developing.
X#
X
XVERSION_NAME = term-$(VERSION_MAJOR).$(VERSION_MINOR)$(PATCH_NAME)
XARCHIVE = /usr/local/src/term.old/$(VERSION_NAME)
XALPHA_DIR = /opt/ftp/pub/bcr/term/ALPHA
XBETA_DIR = /opt/ftp/pub/bcr/term
X
Xdistclean: realclean
X	$(RM) config.status Makefile
X	-$(RM) `find . -name \*.orig`
X	-$(RM) `find . -name \*.rej`
X
Xrcs_extract:
X	-co -q`expr $(VERSION_MAJOR) \* 100 + $(VERSION_MINOR)`.$(PATCH_LEVEL) \
X	  `find . -name \*,v -print | sed 's/,v$$//'`
X	$(CHMOD) ugo+x configure
X
Xrcs_purge: rcs_extract
X	rcs -o`expr $(VERSION_MAJOR) \* 100 + $(VERSION_MINOR)`.$(PATCH_LEVEL) \
X	  `find . -name \*,v -print | sed 's/,v$$//'`
X
Xrcs_ver: distclean rcs_extract
X	rcs -U `find . -name \*,v -print`
X	yes|tr y .|ci -f`expr $(VERSION_MAJOR) \* 100 + $(VERSION_MINOR)`.$(PATCH_LEVEL) \
X	  -n`echo term-$(VERSION_MAJOR).$(VERSION_MINOR)$(PATCH_NAME)|tr . _` \
X	  `find . -type f -not -name \*,v -not -name \*.gz -print`
X	co -q`expr $(VERSION_MAJOR) \* 100 + $(VERSION_MINOR)`.$(PATCH_LEVEL) \
X	  `find . -name \*,v -print | sed 's/,v$$//'`
X	$(CHMOD) ugo+x configure
X
Xrcs_tar: distclean rcs_extract
X	$(RM) /tmp/$(VERSION_NAME)
X	$(LN) -s `pwd` /tmp/$(VERSION_NAME)
X	cd /tmp ; \
X	  find $(VERSION_NAME) -follow -type f -not -empty -not -name \*,v -print | \
X	  sort -u | tar Tcvvfz - $(ARCHIVE).tar.gz
X
Xrcs_patch: distclean rcs_extract
X	$(RM) /tmp/$(VERSION_NAME)
X	$(LN) -s `pwd` /tmp/$(VERSION_NAME)
X	if [ $(PATCH_LEVEL) -gt 0 ] ; then \
X	  (cd /tmp; version_name=$(VERSION_NAME); rcsdiff \
X	  -u -r`expr $(VERSION_MAJOR) \* 100 + $(VERSION_MINOR)`.`expr $(PATCH_LEVEL) - 1` \
X	  `find $$version_name -follow -type f -not -name \*,v -not -name \*.gz -print` \
X	  | gzip -c ) > $(ARCHIVE).patch.gz ; \
X	  if [ $(PATCH_LEVEL) -le 50 ] ; then \
X		$(CP) $(ARCHIVE).patch.gz $(SRCDIR)/patches/. ; \
X	  else true; fi; \
X	else true; fi
X
Xrcs_update: rcs_ver rcs_tar rcs_patch
X	$(RM) /tmp/$(VERSION_NAME)
X	$(LN) -s `pwd` /tmp/$(VERSION_NAME)
X	cd /tmp; if [ $(PATCH_LEVEL) -gt 50 ] ; then \
X	  tupload -fvvr $(ARCHIVE).*.gz $(ALPHA_DIR) ; \
X	else \
X	  tupload -fvvr $(ARCHIVE).*.gz $(BETA_DIR) ; \
X	fi
X	cd /tmp; $(CHMOD) ugo-w $(ARCHIVE).*.gz
X
Xrcs_remote: rcs_tar
X	$(RM) /tmp/$(VERSION_NAME)
X	$(LN) -s `pwd` /tmp/$(VERSION_NAME)
X	cd /tmp; tupload -fvvr $(ARCHIVE).tar.gz /tmp
X	trsh -s 'cd /tmp;zcat $(VERSION_NAME).tar.gz|tar xvvf -'
X	trsh -s 'cd /tmp/$(VERSION_NAME);./configure --user;make install'
X
Xrcs_spell: distclean rcs_extract
X	ispell -p $(HOME)/.term_dict `find . -type f -not -name \*,v -not -name \*.gz`
X
Xdummy:
X
Xchecksum.o : checksum.c 
Xclient.o : client.c includes.h term_main.h config.h client.h terminal.h 
Xcompress.o : compress.c includes.h term_main.h config.h client.h terminal.h debug.h 
Xdo_connect.o : do_connect.c includes.h term_main.h config.h client.h terminal.h 
Xutils.o : utils.c includes.h term_main.h config.h client.h terminal.h debug.h 
Xlinecheck.o : linecheck.c includes.h term_main.h config.h client.h terminal.h 
Xdo_link.o : do_link.c includes.h term_main.h config.h client.h terminal.h debug.h 
Xmain.o : main.c includes.h term_main.h config.h client.h terminal.h debug.h 
Xmeta.o : meta.c includes.h term_main.h config.h client.h terminal.h debug.h 
Xmisc.o : misc.c includes.h term_main.h config.h client.h terminal.h debug.h 
Xpty.o : pty.c includes.h term_main.h config.h client.h terminal.h debug.h 
Xredir.o : redir.c includes.h term_main.h config.h client.h terminal.h 
Xudpredir.o : udpredir.c includes.h term_main.h config.h client.h terminal.h 
Xdo_select.o : do_select.c includes.h term_main.h config.h client.h terminal.h 
Xserial.o : serial.c includes.h term_main.h config.h client.h terminal.h debug.h 
Xserver.o : server.c includes.h term_main.h config.h client.h terminal.h 
Xsevenbit.o : sevenbit.c includes.h term_main.h config.h client.h terminal.h debug.h 
Xshutdown.o : shutdown.c includes.h term_main.h config.h client.h terminal.h 
Xsockets.o : sockets.c includes.h term_main.h config.h client.h terminal.h 
Xspipe.o : spipe.c includes.h term_main.h config.h client.h terminal.h
Xstatistics.o : statistics.c includes.h term_main.h config.h client.h terminal.h 
Xtclient.o : tclient.c includes.h term_main.h config.h client.h terminal.h 
Xterm_getopt.o : term_getopt.c includes.h term_main.h config.h client.h terminal.h 
Xterm_herror.o : term_herror.c includes.h term_main.h config.h client.h terminal.h 
Xterm_putenv.o : term_putenv.c includes.h term_main.h config.h client.h terminal.h 
Xterm_spair.o : term_spair.c includes.h term_main.h config.h client.h terminal.h 
Xterminal.o : terminal.c includes.h term_main.h config.h client.h terminal.h 
Xtermnet.o : termnet.c includes.h term_main.h config.h client.h terminal.h 
Xtermtest.o : termtest.c includes.h term_main.h config.h client.h terminal.h 
Xtmon.o : tmon.c includes.h term_main.h config.h client.h terminal.h 
Xtrdate.o : trdate.c includes.h term_main.h config.h client.h terminal.h 
Xtrshell.o : trshell.c includes.h term_main.h config.h client.h terminal.h 
Xupload.o : upload.c includes.h term_main.h config.h client.h terminal.h 
Xdownload.o : download.c includes.h term_main.h config.h client.h terminal.h 
Xxconn.o : xconn.c includes.h term_main.h config.h client.h terminal.h
X 
SHAR_EOF
  $shar_touch -am 1028144694 'term-2.2.5/Makefile.in' &&
  chmod 0644 'term-2.2.5/Makefile.in' ||
  echo 'restore of term-2.2.5/Makefile.in failed'
  shar_count="`wc -c < 'term-2.2.5/Makefile.in'`"
  test 22461 -eq "$shar_count" ||
    echo "term-2.2.5/Makefile.in: original size 22461, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= term-2.2.5/README ==============
if test -f 'term-2.2.5/README' && test X"$1" != X"-c"; then
  echo 'x - skipping term-2.2.5/README (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting term-2.2.5/README (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'term-2.2.5/README' &&
XPLEASE READ THE FILE "README.security" for important information!
X
X------------------------------------------------------------------------
X			   Term. version 1.11
X
X	      Copyright (c) 1992,1993,1994 Michael O'Reilly
X		  All Rights Reserved
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 1, or (at your option)
X    any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
X-------------------------------------------------------------------------------
X
X--> Read the 'CHANGES' file as this will be more up to date than this
Xreadme.
X
X--> Please read this entire file if you have any problems.
X
X*********************************************************************
X--> Please don't send me e-mail telling me you liked it! My mailbox
Xoverfloweth! Postcards on the other hand are most welcome. 
X
X	Michael O'Reilly
X	192 Nicholson Rd
X	Subiaco 6008
X	Perth, Western Australia
X	Australia
X	
XI guess this makes this postcardware.....
X*********************************************************************
X
X---> For a sample ~/.term/termrc file see TERMRC
X
XTerm is a program to implement a slip-like connection between 2 *NIX
Xmachines. It isn't sl/ip. It runs entirely in user mode. It requires no
Xkernel support on either end, and no root access on either end. It is
Xbuilt to run over a modem to connect a non-internet machine with an
Xinternet machine. If this is your situation, and you don't have
Xslip/ppp then term is for you.  If you do have slip/ppp, then you
Xshould probably use it instead.
X
XTerm is run at both ends, and does multiplexing, error correction, and
Xcompression across the serial link between them. Designed to be as
Xefficient as possible, and have good response time, even over slow
Xmodems. (I run it over a 2400 baud modem). [ Well, I used to. Roll on
X14.4! M - 7/1/94]
X
XNote that it behaves the same from both ends. A user on either machine
Xcan connect to the other.
X
XThe term program runs as a server. A UNIX-domain socket is opened and
Xbound to support communication between client processes and the
Xserver.
X
XSee 'old/PROTOCOL.unix' for the protocol used by clients.  
XSee 'old/PROTOCOL.serial' for the protocol used across the serial link.  ( Be
Xwarned that they are out of date. If in doubt, read the source :)
X
XThese six clients are the most useful:
X
X    trsh
X	Runs a shell on the remote end. Like a normal login.  (Similar
X        to "rsh" without the need to specify a hostname.)
X    tupload <local file> -as <remote file>
X	Uploads a file. takes the name of the local file and the optional
X	arg is the name of the remote file.  This is a bit more robust than
X        "rcp", but at the price of not allowing you to specify a different
X        host or username.
X    txconn
X	Hangs around in the background waiting for X connections. re-directs
X	them to the local X server. Intended to be run on the remote machine.
X    tredir
X	Lets you alias a port on one system to another. I.e. 'tredir 4000 23'
X	run on host 'a' means that anyone telneting to port 4000 on 'a',
X	will get a login prompt of machine 'b'.
X    tshutdown
X	Terminates term.
X
X
X[More up to date information is available in HOWTO.term]
X
XBy default the program assumes that your modem can transmit data at the
Xsame speed as your computer's serial port connection to the modem.  To
Xset the proper rate run term as:
X	'term -s9600'
Xfor a 9600 baud modem.  Alternatively try :
X	'setenv BAUDRATE 9600'
Xor specifying:
X	baudrate 9600
Xin your termrc. The baudrate determines how fast term will try
Xto send data to the modem. I.e. if BAUDRATE is 9600, it will only
Xattempt to send 9600 bits per second to the modem.  However, the best
Xway to specify transmission rates is to write a termrc file.
X
XTerm reads the ~/.term/termrc file if it exists, so you can
Xpermanently set this stuff.  A system default termrc file may be
Xnamed /etc/termrc.
X
XLook in the file TERMRC.
X
XTo terminate a term session use the command "tshutdown".  If that
Xdoesn't work, either end will exit if it gets five zeros.  (i.e.
X"00000")  This means that if "tshutdown" fails you can kill the
Xlocal end, and then type '000000' into your comm program or
X'echo 0000000 > /dev/modem'.
X	
X----------------------------------------------------------
XHow to use txconn: (and term for that matter)
X
XLogin to your remote machine.
Xrun
X	"term -r"
X
XBreak back to your Linux prompt. I.e if you are running xcomm or
Xsomething similar then type control-A, x (to break back to xcomm
Xprompt). Then run term with stdin/stdout connected to the modem. 
X
XIn xcomm I type
X	"$ term"
XAlternatively you could exit your comms program altogether and run
X	"term < /dev/ttys1 > /dev/ttys1" from the shell prompt.
X		(assuming that /dev/ttys1 is your modem port).
X		Makes certain your comms program ISN'T running if you
X		try the above, as it will fight with term if it is.
X		
XThen run 'trsh' from a shell prompt. (I generally run xcomm and term
Xon tty8, and then switch to tty7 to run trsh. You may find it handy to
Xhave a entry in /etc/passwd looking like...
X	remote::0:0::/root:/usr/local/bin/trsh 
Xas this then enables you to login to your remote machine by logging in
Xas 'remote').
X
XThis should give you (in about 2 seconds) a shell on your remote
Xmachine. At this point the error correction/compression is on. You can
Xgo to another tty to run another trsh giving you multiple shells etc.
X
X
XNone of the above needs X-windows to run.
X------------------------------------------ 
X
XTo run txconn:
X  Make sure you are running X-windows. txconn will
Xassume you have x-windows running.
X
XAfter running 'trsh', type
Xif you are running tcsh, or csh:
X	"setenv DISPLAY `hostname`:0 ; setenv DISPLAY `txconn`" for csh/tcsh 
Xotherwise, if you are running 'sh' , or 'ksh':
X	"export DISPLAY=`hostname`:0 ; export DISPLAY=`txconn`"
Xon the trsh. (i.e. run txconn on your remote machine).
XIt should exit immediately. (This is because it starts a process in the 
Xbackground).
X
XHere, `hostname` returns the hostname of your REMOTE machine. (i.e. the
Xmachine you ran txconn on. To make that very clear. The local machine
Xis the machine you are typing on, the remote is the one at the other
Xend of the modem link. Run txconn on the remote machine. hostname is
Xset to be the name of your remote machine. DON'T use the hostname of
Xyour local machine).
X
XThen you can run any x-windows program on your remote machine, and it
Xshould appear on your screen.
X
X
XThings that can go wrong compiling..
X[See INSTALL for more up to date information.]
X
X1) configure complains about your OS not being define.  You'll have
X   to either edit the configure script, or find an OS that is "close
X   enough".
X
X2) config.h gives a message about the OS being undefined. 
X	config.h sets up a list of #define's based on what OS you are
X	compiling on. Please (if you can) write support for your OS, and
X	mail me the patches so I can support it. If you can't mail me
X	with details of you machine, and I will see what I can do.
X
XIf things go wrong, make sure you run the local end with the '-n on' flag.
XThis won't help, but it can give you some clues as to what's going
Xwrong. 
X
XThings that can go wrong:
X1) term giving message like
X	": timed out at 60 trans 4"
X    This should be read as "A packet got no acknowledgment even though it
X	has been waiting for 60/20th's of a second, so it is being 
X	re-transmitted for the 4th time."
X
X     These errors are normal. Line noise etc will cause packets to be
X	lost and retransmitting is the way they are recovered.
X
X     Times when it isn't normal:
X	a) Constantly re-transmitting i.e the last number just keeps
X	going up. This indicated one of 
X	    i) The remote term has died. Shouldn't happen.
X	   ii) The line is not an 8 bit line.
X		You can check this by running the linecheck program.
X	
X		Look up 'sevenbit' in TERMRC or term(1) if you have a
X		sevenbit line. 
X	  iii) Line noise has sent a XOFF character and your terminal
X		server has treated it is a quench signal. You
X		shouldn't be using software flow control with term.
X		turn if off if you can. Look up the -f option in OPTIONS
X		or 'flowcontrol' in TERMRC or term(1).
X	b) Any retransmissions on an error correcting modem.
X	    Any of the above, and
X	   iv) The BAUDRATE is set too high. Too much data is being
X		buffered by the operating system.
X        c) Term tells you to an old packet has been received and to raise
X           your timeout.
X            v) If this happens rarely, just ignore it.  If it happens a lot,
X               then you should follow this advice and raise your timeout to
X               a higher #.  
X        d) Lots of errors when you run multiple tasks at once.
X	   vi) Try "collisions on" in your termrc files, to tell term to lower
X               its transmission rate when receiving data.
X		
X2) Term not doing anything. Everything hangs.
X	i) The clients can't talk to the term socket.  Look at client.c.
X	ii) I have stuffed up and left a bug in a released version.
X	iii) The line is really dirty and it is eating one of the characters
X	term is using. See linecheck below.
X	iv) Mail me with LOTS of details.
X3) Term constantly giving you the prompt from your remote machine.
X	You have run the remote term in the background. Don't do this.
X4) Trsh hangs after you have typed a few keystrokes.
X	You have a dirty line. A terminal server or something like
X	that is eating some characters. Run linecheck. See
X	term_setup.1 for more information. See TERMRC for more information. See
X	below for more information.
X5) Term works fine, but if you have tredir's running, and you
X	login from the other end, all the tredirs exit.
X
X	This is because you are missing the 'remote' keyword. You need
X	"remote" on ONE end only. This keyword should go in your
X	~/.term/termrc file. Alternatively run ONE term with the '-r' flag,
X	as was shown in the example above.
X
X------------
XUSAGE OF linecheck.c
X
X[ this is probably out of date. Check the start of the linecheck.c
Xfile. M - 7/1/94]
X
X initially written by Michael O'Reilly
X *seriously* bashed about by by quarters
X hell, I wonder if diff would find more than 5 matching lines anymore...
X jefftep@cs.utexas.edu
X jeff grills
X
X
XWithout term running do the following. (i.e. on a bare serial line.
XNothing but your comms program is running.)
Xif you use a csh type shell (csh, or tcsh), then run /bin/sh before
Xyou do the following
X run remotely like:      linecheck 2> remote.output
X             locally:    linecheck < /dev/modem > /dev/modem 2> local.output 
X	
X
X if it says something needs escaped, that means it didn't get through okay
X this time. if you get an invalid packet printed, it means the packet wasn't
X sent by the linecheck on the other side, and may either be line static,
X or some very braindead terminal response to a (possibly series) of characters
X to what was printed over the line.  in this case, it's your responsibility
X to determine which, and escape the previously sent char if needed.  There is
X no way this program can identity a braindead terminal server from line static,
X so this is the way it has to be.
X
X if, for some reason, you get stuck out in lala land, and can't kill
X the program, try typing "^jexit^j".  That should kill it, and restore
X your terminal.   
X
X It'll print "### sending char" and "### received valid".  Don't worry if these
X two number are out of sync.  That's fine.  Just worry, on either side, if you
X get some "Invalid packet: " lines.  Look at them closely, and see if it's line
X static, or a real problem.
X
X At the end, it'll print out a summary of what it thinks you should escape.
X This just means these chars didn't get received correctly this time.  Again,
X if line static munched something, some of these may be valid. 
X
X To actually escape them, you have to put them into your termrc file.
X So if it said to escape 0-31, then on the OTHER end from the one that
X printed it, you add the line 'escape 0-31' to your ~/.term/termrc file.
X Please note that the local.output file contains the characters that
X should be escaped on the REMOTE end, and vice versa. See TERMRC and
X term(1) for more on escaping characters.
X
X *** IF *** your terminal server generates extra responses for odd chars,
X then you may not be told to escape something, but need to anyway.  This will
X be evident from a "Invalid packet: " on the local side, after attempting to
X send a character.  Again, it may be line static. You have to make the call.
X
X if you're running it locally in a xterm, I suggest you turn on logging.
X
X if you have problems with this program, and want me to look at it, mail me
X *both* the local and remote output, and label them appropriately.
X
Xprogrammers notes:
X
X hopefully, soon, I'll add the ability to skip chars to this program,
X so you can test out the escapes you want.
X
X maybe do a fork() and process the two sides independently, so it never hangs.
X would cause minor quitting problems, but may be worth it.
X
XAny problems, feel free to mail me. Any patches, bug fixes, etc are
XVERY welcome.
X
XMichael (oreillym@tartarus.uwa.edu.au);
X
XP.S.
XBill Riemers (bcr@physics.purdue.edu) is temporarily maintaining this code,
Xoriginally written by Michael O'Reilly (oreillym@tartarus.uwa.edu.au).
X
X----------
X
XFrom michael@iinet.com.au  Tue Jul 19 22:33:54 1994
XFrom: michael@iinet.com.au (Michael O'Reilly)
XSubject: I saw...
X
Xterm 202 go past today. Looks just beautiful. :)
X
XGiven the awesome mods you've made, it's probably a good idea to
Xchange the docs to mention, term, original written by me, now
Xfixed, beautified, made useful, and supported by you.
X
XMichael
X
X-----------
X
XHmm, really most of the credit should go to the people listed in CREDITS.
XSome of these people have probably done a lot more with term development
Xthan I have.  :-)
X
XOriginally I started using term because it was the only option for multi-
Xtasking over a modem without remote root support.  At this point I think
Xit is quite competitive with SLIP and PPP. 
X
XPro's:
X        - Often times term is faster.
X        - Term gives you true firewall security.  Users can only access 
X          network commands you explicitly allow with a SUID or SGID command.
X          And you will never be sprayed, or have to worry about network
X          users ports you have redirected!
X        - No root support required.
X
XCon's:  
X        - Programs have to be compiled with term support to work.
X	- Not everything works.  Programs like "ping" which normally
X          must be SUID root never will work.  Although "rsh" type commands
X	  are already an exception to this rule.
X        - "fet" term's equivalent of "dip" isn't nearly as smart as "dip".
X        - It is doubtful NFS mounts over term will ever be supported.
X
SHAR_EOF
  $shar_touch -am 1028144694 'term-2.2.5/README' &&
  chmod 0644 'term-2.2.5/README' ||
  echo 'restore of term-2.2.5/README failed'
  shar_count="`wc -c < 'term-2.2.5/README'`"
  test 15124 -eq "$shar_count" ||
    echo "term-2.2.5/README: original size 15124, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= term-2.2.5/README.porting ==============
if test -f 'term-2.2.5/README.porting' && test X"$1" != X"-c"; then
  echo 'x - skipping term-2.2.5/README.porting (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting term-2.2.5/README.porting (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'term-2.2.5/README.porting' &&
XWHAT IS THIS?
X~~~~~~~~~~~~~
XI've added in the following routines to make porting easier:
X   term_gethostbyname()
X   term_connect()
X   term_rcmd()
X   term_bind()
X   term_getsockname()
X   term_listen()
X   term_accept()
X   term_shutdown()
X   term_close()
X   .
X   .
X   .
X
XAt the end if this file I've included instructions for using these new routines
XI've tried to make it so "term" binaries will be usable for users of other
Xnetworking software as well.  Sometime in the future, users might be able to
Xmodified their shared libraries instead of recompiling everything.  For now
Xthis is still sometime off in the distant future.
X
XFor programs that were ported back in the days of client.a, you can still
Xrecompile them for use with newer versions of term simply by changing the
Xclient.a reference to libtermnet.a
X
XPORTING OF SOFTWARE:
X~~~~~~~~~~~~~~~~~~~~
XHere is the new simplified porting procedure.
X
XIf installed in /usr/local by root:
X
X  1. Add to the compile flags "-include /usr/local/include/termnet.h"
X  2. Add to the library list "-ltermnet"
X
XIf installed in your home directory:
X
X  1. Add to the compile flags "-include ~/term/termnet.h"
X  2. Add to the library list "-L ~/term -ltermnet"
X
XThat should do it!!!  If you are using term in "shared" mode, you'll need:
X
XAs root:
X
X  chgrp term <filenames>
X  chmod g+s <filenames>
X
XAs an ordinary user:
X
X  chmod u+s <filenames>
X
XSome commands like "rlogin" will be privileged.  i.e. Only the person who
Xstarted "term" and "root" may use privileged commands.
X
X
XSome term commands will be "term" transparent and only use term when there
Xis not another option.  Some common examples are:
X	telnet, ftp, ...
X
XOthers require an external flag to tell them it is all right to use term.  These
Xprograms include:
X	xarchie, fsp, ytalk, ...
X
XYou can either flag these programs to use term by setting the environmental
Xvariable TERMMODE as specified in README.security, or running "make installnet".
XEventually the "termnet" file created will contain special networking
Xinstructions, but for now only its existence is checked.
X
XIf you add an ethernet connection, you can then simply remove the "termnet"
Xfile and continue to use the same binaries!
X
X
XPORTING CAVEAT:
X~~~~~~~~~~~~~~~~
X
XThe termnet functions don't always act exactly like real networking code.
XStill needed:
X - To deal with duplicated socket descriptors.
X - To gracefully deal with binds to privileged ports and other misc. problems.
X
SHAR_EOF
  $shar_touch -am 1028144694 'term-2.2.5/README.porting' &&
  chmod 0644 'term-2.2.5/README.porting' ||
  echo 'restore of term-2.2.5/README.porting failed'
  shar_count="`wc -c < 'term-2.2.5/README.porting'`"
  test 2437 -eq "$shar_count" ||
    echo "term-2.2.5/README.porting: original size 2437, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= term-2.2.5/README.security ==============
if test -f 'term-2.2.5/README.security' && test X"$1" != X"-c"; then
  echo 'x - skipping term-2.2.5/README.security (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting term-2.2.5/README.security (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'term-2.2.5/README.security' &&
XWHAT IS THIS?
X~~~~~~~~~~~~~
XShared term allows other users to use the same term connection you are using.
XBy environment variables you can disable/enable shared features.
X
XYou only need to install shared term on the end that you have users
Xwho want a shared term connection.  However for new commands to work,
Xboth ends should be running the same term version #.
X
XOK, the following instructions allow you to share your term connection without
Xallowing other users direct access to either the account on which term
Xwas started, or the remote *NIX account.  ("chroot", and "denyrsh" just don't
Xcut it if users are clever with tupload, or willing to compile their
Xown clients.  If you don't believe me, let me on your machine.)
X
XIf you don't want to use the shared term features, skip the following
Xsection of this file.  Just type follow the instructions in INSTALL.
X
X
XTERM MODES
X~~~~~~~~~~
X
XThere are two basic ways you can install term for sharing.  The safest, most
Xsecure method is as root create a "term" group which contains no members.  Then
Xas root, install "term" as a SGID program.  If this option is not possible, 
Xthen you can install term as a SUID program by installing as an ordinary user.
X
XHere is a table that lists the differences:
X
XChmod	$TERMMODE	$TERMDIR -or-	Default		Connection
XType			$TERMSHARE			Owner	Users
X-------	---------------	---------------	---------------	------- ----------------
Xu+s	2 (Shared)	neither		$HOME/term	You	Anyone
Xu+s	0 (Private)	$TERMDIR	$HOME		Anyone	Connection Owner
Xg+s	1 (Shared)	$TERMSHARE	/usr/local/lib/term	Anyone	Anyone
Xg+s	0 (Private)	$TERMDIR	$HOME		Anyone	Connection Owner
X-	0 (Private)	$TERMDIR	$HOME		Anyone	Anyone
X
X
XTo install shared term, do the following:
X~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
X
X1) (IF YOU ARE ROOT!)  Create a "term" group with no members
X   by adding the following line in /etc/group:
X
X   term::16:root
X
X   If 16 is already used by something else, choose an unused GID.
X
X
X2) Follow the instructions in INSTALL for making and installing your binaries.
X
X3) To start "term" SHARED mode use:
X
X   IF term was installed by ROOT:
X     With csh or tcsh:
X       setenv TERMMODE 1
X     With bash use:
X       export TERMMODE=1
X   otherwise
X     With csh or tcsh:
X       setenv TERMMODE 2
X     With bash use:
X       export TERMMODE=2
X
X   NOTE!!!  All users who want to take advantage of the shared term 
X   connection should set the above environment variable.
X
X
X4) To start clients compiled with term117 or earlier in shared mode.
X
X   With TERMMODE=1:
X     With csh or tcsh:
X        setenv TERMDIR /usr/local/lib/term
X     With bash use:
X        export TERMDIR=/usr/local/lib/term
X   With TERMMODE=2:
X     With csh or tcsh
X	setenv TERMDIR $HOME/term
X     With bash use:
X        export TERMDIR=$HOME/term
X
X   NOTE!!!  All users who want to take advantage of the shared term 
X   connection should set the above variables.
X
X5) To run in PRIVATE MODE: 
X
X   With csh/tcsh:
X       setenv TERMMODE 0
X   With bash:
X       export TERMMODE=0
X
X6) If you have multiple modems, then you can have more than one connection
X   at a time.  To specify which connection to use you must start term
X   with a server name.  i.e.
X
X       nohup term -v /dev/modem1 -l /tmp/logfile1 Connection1 &
X       nohup term -v /dev/modem2 -l /tmp/logfile2 Connection2 &
X
X   then users should set the variable TERMSERVER to the connection name
X   they want to use.  i.e.
X
X       setenv TERMSERVER Connection1
X
X   for csh, tcsh, and etc.,  or
X
X       export TERMSERVER=Connection1
X
X   for bash, sh, ksh, and etc.
X
X
XPRIVILEGED COMMANDS:
X~~~~~~~~~~~~~~~~~~~~
X
XThe primary differences between the sharable and the unsharable commands are:
X  - Sharable commands are SGID (set group id) programs if installed by root
X    or SUID (set user id) programs if installed by an ordinary user.
X  - The shared "term" directory is controlled by $TERMSHARE instead of
X    $TERMDIR
X
XSome programs, even though they may be SUID or SGID, will still only be usable
Xby the owner of the term-connection and root.  These are known as privileged
Xcommands.  The following clients are privileged.
X
X  tupload, trsh, tshutdown
X
XThe other term clients:
X
X  tmon, txconn, tredir
X
Xare available by anyone who can execute the binaries.
X
XIf you port program using termnet.h, anything that uses rcmd() will also
Xbe privileged.  Here is a listing of some of these programs:
X
X  rlogin, rsh, rcp
X
XHere are some non-privileged programs:
X
X  finger, whois, talk, telnet, xarchie, xgopher, ytalk
X
XBasically, if it allows the user to access an account without a password it
Xwill be privileged.
X
X
XHOW TO MAKE A COMMAND SHARED
X~~~~~~~~~~~~~~~~~~~~~~~~~~~~
X
XIf you want to make a term command such as termftp or termtelnet shared,
Xthen do the following, which sets shared group permissions:
X
X  IF YOU ARE ROOT:
X	chgrp term binary-file
X	chmod g+s binary-file
X  IF YOU ARE AN ORDINARY USER:
X        chmod u+s binary-file
X
X
XSECURITY TEST
X~~~~~~~~~~~~~
X
XIf you are the first to port a program, it would probably pay to double
Xcheck its security when in shared mode.
X
XTo test the command try to fork a shell with the command "id".  If "id"
Xreports:
X   '... egid=16(term) ...' 
Xthen you have a security hole.
X
XAlso try to overwrite other peoples' files, or create files where you
Xdon't have write permission.
X
XHere is an example of how I tested "ftp":
X
X% ftp localhost
XConnected to localhost.
X220 k9 FTP server (Linux k9 1.0.9 #5 Tue Jun 7 12:52:00 EST 1994 i486) ready.
XName (localhost:bcr): bcr
XPassword (localhost:bcr): 
X331 Password required for bcr.
X230 User bcr logged in.
XRemote system type is UNIX.
XUsing binary mode to transfer files.
Xftp> !id
Xuid=501(bcr) gid=100(users) groups=100(users)
X
XIn this case, this is my user id and group id, so "ftp" passes the test and
Xthis command is safe.
X
SHAR_EOF
  $shar_touch -am 1028144694 'term-2.2.5/README.security' &&
  chmod 0644 'term-2.2.5/README.security' ||
  echo 'restore of term-2.2.5/README.security failed'
  shar_count="`wc -c < 'term-2.2.5/README.security'`"
  test 5783 -eq "$shar_count" ||
    echo "term-2.2.5/README.security: original size 5783, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= term-2.2.5/SCO.CHANGES ==============
if test -f 'term-2.2.5/SCO.CHANGES' && test X"$1" != X"-c"; then
  echo 'x - skipping term-2.2.5/SCO.CHANGES (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting term-2.2.5/SCO.CHANGES (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'term-2.2.5/SCO.CHANGES' &&
XHere is a description of the changes I've made to term for use on SCO 
XUNIX.  There is a suggested change to the term protocol below.
X
X1. SCO UNIX does not support UNIX domain sockets.  The UNIX domain
X   sockets used for the term server/client communications have
X   been replaced with either TCP/IP sockets or streams pipes.
X
X   a) TCP/IP sockets.  These are enabled by defining NO_UNIX_DOMAIN
X      and not defining STREAMS_PIPE.  The server establishes a socket
X      and writes the port number to $HOME/.term/socket.  Clients
X      read that file to get the port number, and then connect to
X      that port on localhost.
X
X   b) Streams pipes are enabled by setting defining both NO_UNIX_DOMAIN
X      and STREAMS_PIPE.  This uses the SCO X server IPC connection
X      protocol to connect.  The server opens /dev/X#S (where # is
X      the display number).  Clients open /dev/X#R and write a dummy
X      byte to initiate a connection.  The server then creates an
X      appropriate streams pipe (/dev/spx) and sends the file 
X      descriptor to the client.  (See spipe.c)
X
X      Creating a named streams pipe requires root access on SCO.  In
X      order to avoid that, term is prepared to "borrow" an X server
X      local connection.  If you set TERM_BORROWED_DISPLAY_NUMBER to
X      an integer, the server and clients will use that X server
X      local connection as their IPC channel.  (The variable must
X      be set for both the server and the clients).  If the variable
X      is not set, the TCP/IP method will be used.
X
X2) SCO UNIX uses streams pipes to talk to the X server.  (See above
X   for a brief description of the protocol).  Rather than replace the
X   code in the term server that opens a UNIX domain socket, I extended
X   the protocol with a C_X_SERVER request.  This request causes the
X   remote term server to establish a connection to its X server
X   (as specified by its DISPLAY variable).
X
X   Note that this makes SCO term software incompatible (with respect
X   to txconn) with other versions, since the other end will either send
X   the wrong request (C_SOCKET rather than C_X_SERVER) or the other
X   term server won't recognise C_X_SERVER).
X
X   I would like to suggest that you modify your protocol so that xconn
X   always sends C_X_SERVER, and all term servers react to that by
X   setting up the appropriate connection.  It also seems to me most
X   sensible that the DISPLAY variable for the term server connecting
X   to the X server should drive which X server to connect to.  I
X   haven't done this, the code for ifdef'd under X_STREAMS_PIPE.
X
X
X3) Much of the code in spipe.c is borrowed from SCO's X server or X client
X   library.  It is freely redistributable as long as the copyright notice
X   remains intact (see spipe.c for details).  Don't yell at us if it doesn't
X   work.
X
XTom Kelly
Xtom@sco.com
X3 April 1994
SHAR_EOF
  $shar_touch -am 1028144694 'term-2.2.5/SCO.CHANGES' &&
  chmod 0644 'term-2.2.5/SCO.CHANGES' ||
  echo 'restore of term-2.2.5/SCO.CHANGES failed'
  shar_count="`wc -c < 'term-2.2.5/SCO.CHANGES'`"
  test 2844 -eq "$shar_count" ||
    echo "term-2.2.5/SCO.CHANGES: original size 2844, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= term-2.2.5/TERMRC ==============
if test -f 'term-2.2.5/TERMRC' && test X"$1" != X"-c"; then
  echo 'x - skipping term-2.2.5/TERMRC (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting term-2.2.5/TERMRC (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'term-2.2.5/TERMRC' &&
X#From johnsonm@stolaf.edu Sun Dec 13 05:07:38 1992
X#Updated by metcalf@lcs.mit.edu Nov 28 1993
X#Updated yet again and again...
X
X# This file should either be ~/.term/termrc for a user's settings, or
X# /etc/termrc for the system's default.
X
X#All blank lines, and lines beginning with a '#' are ignored.
X#All command words must be in lowercase.
X#valid lines are... 
X
X##############################################################################
X# ALWAYS REQUIRED OPTIONS !!!!
X#   If you don't use these options you will have problems!
X##############################################################################
X
Xremote
X# THIS MUST BE USED ON ONE END ONLY!!!! 
X# i.e. comment this out on one end. [-r]
X
X#baudrate 38400
X# Sets the baudrate. Actually used to limit the maximum
X# number of characters sent per second.
X# valid numbers are anything >= 300. Default varies. [-s INT]
X# For rates greater than 115200 use a value of 0.
X# Standard values: 2400, 4800, 9600, 14400, 19200, 28800, 38400, 57600, 115200
X
X#############################################################################
X# COMMUNICATION SETTINGS
X#  Adjusting these settings will probably greatly improve your transmission
X#  speeds.  You will probably have to adjust some of these just to get a
X#  working connection.
X#############################################################################
X
Xtimeout 200
X# sets the length of time to wait before retransmitting a 
X# packet. If using a large window size, then increase this
X# value. A smaller window sizes merits a smaller timeout 
X# value. If getting too many re-transmits, then increase.
X# measured in 1/20th's of a second.   
X# Allowed 1-10000, default 70 (3.5 sec). [-t INT]
X
X#escape 158
X# tells term never to transmit character with decimal number 158.  Use the 
X# output of linecheck to find out what to put here.  Valid numbers are
X# anything between 0 and 255.  Any character escaped on one end must be
X# ignored on the other.
X
Xescape 0-31
Xescape 128-159
X# the above are some handy escapes that will cause most lines to work.
X# but they are very inefficient (they escape 25% of all bytes sent!!!)
X# so try and escape as few as possible.
X
Xignore 0-31
Xignore 128-159
X# Silently strip these characters from the input stream.  See escape.
X
X#window 3
X# Set the maximum number of packets that can be outstanding the large the
X# value, the better your maximum possible transmission speed, but if it is
X# too large, it will take a long to recover from timeout errors!  Allowed
X# values are 1-16.  The default is based on your baudrate. [-w]
X
Xshift 224
X# Sets a 'shift' value. This number is XOR'ed with all bytes before they
X# are sent and dramatically reduces the # of escape characters sent.  Typically
X# numbers between 224 and 255 give the best results.
X
Xsevenbit on
X# If we are running on a 7 bit line; off by default. [-a]
X
X#seven_in on
X# If your incoming line is seven bit.
X# Note that these are symmetric. If you have seven_in on one end, you MUST
X# have seven_out on the other.
X
X#seven_out on
X# If your outgoing line is seven bit. "seven_in" and "seven_out" together
X# are the same as "sevenbit".
X
X#stopbits 2
X# Adjust this to give you the correct transmission speed.
X# Standard values: 2, 1, 0.5, 0  (default 1)
X
X#compress off
X# To turn off compression.  If you have a compressing modem it is not desirable
X# to have term compressing your data.  (default on)  Each client may be set
X# on or off with '-c off/on'.
X
X#############################################################################
X# OPTIONS TO KEEP OTHERS FROM ACCESSING YOUR DATA/ACCOUNT
X#  These allow you to control the security level used by term.
X#############################################################################
X
X#denyrsh on
X# Disallow execution of shell on this end. (default off)
X
X#chroot '/usr/users/oreillym'
X# Perform a chroot() to the specified path, just before entering main loop.
X# This option is ignored if term is started by anybody except root.
X
X#share on
X# This controls whether other users my access the term socket by setting
X# the TERMMODE and TERMSHARE environmental variables, and using SUID -or-
X# SGID programs.  [-S on/off]
X
X
X#############################################################################
X# CUSTOMIZATION OPTIONS
X#  These allow you to customize how term works for you! 
X#############################################################################
X
X#chdir '/usr/users/oreillym'
X# Make the default directory usr/users/oreillym (my home dir).
X
X#login on
X# To specify you don't want "trsh" to default with a login shell.  (default off)
X
X#noise on
X# Turn on printing of line noise and warnings.  Off by default. [-n on/off]
X
X#quiet 1
X# Set the "quietness level", zero by default.  This is equivalent to
X# -q, but only takes effect after reading the termrc, so it has no effect
X# on the initial messages printed before reading termrc. 
X
Xterminate 'NO CARRIER'
X# sets a string that will cause term to exit.  ('00000' by default)
X# This must be at least 5 characters long, to avoid accidently 
X# terminations.
X
X#shell 'tredir 4119 dirac:119 4000 23'
X# This specifies some command you want to be given as soon as you execute your
X# first term command.  Normally this should be a script name or set of commands.
X
X# You can specify a log file on the command line with "-l PATH"
X# You can override using stdin/stdout by specifying a device as "-v PATH"
X# You can specify a debugging level with "-d INTEGER"
X
X#######################################################################
X# You probably won't need any of the following options, but they do help
X# solve some uncommon problems!
X#######################################################################
X
X#blocksize 512
X# Set the maximum size block that can be written to your modem at once.
X# Typical values are 256, 512, or unlimited.  (default 512)  You probably
X# don't need to change this.
X
Xcollisions on
X# Use this if you get lots of timeout errors only when transmitting and 
X# receiving at the same time.  (default off)
X
X#flowcontrol 500
X# Tell term to generate control-Q's every now and then
X# used in case your terminal server understands flow control
X# and things will accidently turn it off. i.e. line noise
X# sends a control-S.  Off (= 0) by default; must be nonnegative. [-f INT]
X
X#increment 20
X# This controls how many times a second term tries to send data.  Normally
X# 20 is fine, but for very high speed connections you may need to decrease
X# this.
X
X#packetsize 256
X# This is the maximum size packet term will use.  (default 256)  You probably 
X# won't need to adjust this.
X
SHAR_EOF
  $shar_touch -am 1028144694 'term-2.2.5/TERMRC' &&
  chmod 0644 'term-2.2.5/TERMRC' ||
  echo 'restore of term-2.2.5/TERMRC failed'
  shar_count="`wc -c < 'term-2.2.5/TERMRC'`"
  test 6577 -eq "$shar_count" ||
    echo "term-2.2.5/TERMRC: original size 6577, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= term-2.2.5/TODO ==============
if test -f 'term-2.2.5/TODO' && test X"$1" != X"-c"; then
  echo 'x - skipping term-2.2.5/TODO (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting term-2.2.5/TODO (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'term-2.2.5/TODO' &&
XSee also: BUGS
X
XIf you have some free time you might try hacking something on this list.
X
Xpending : Make configuration options in "termnet" such as the use_term variable
X
Xpending : Fix timeouts!!! Something is going badly wrong with them. Timeout
X          should maybe be dependent on number of outstanding packets??
X
Xpending : Write a ping to generate every character.
X
Xpending : A mechanism for handling hangup. what it would involve.
X           1) Term going into background on a HUP or dropped carrier,
X              not exiting.
X           2) When term starts up, it should check for a backgrounded term to
X              foreground. 
X           3) There has to be a supervisor program that will watch the modem
X              line.  Presumably, the supervisor program can be started by
X              term as needed.
X
Xpending : trsh sets a TERMSERVER for it's new shells.
X
Xpending : fix tredir to take a config file.
X
Xpending : Get PC-NFS mounts working over term.
X
Xpending : Pass client information cross exec() commands.
X
Xpending : Add term routing to connect multiple servers.  i.e.
X	If domainname == via.term.none then hostname specifies the name
X	of the server to use.  
X
XFind an easy way to share a term connection between multiple machines
X
Xpending : Linecheck should also check maximum packet size, stopbits, etc.
X
Xpending : Integrate linecheck into term_main.c
X
Xsort of done : Add an install option for making a termified libc under OS's where
X          this seems possible.
X            1) libc.so.4 will be copied to libt.so.4.
X            2) Term routines will be inserted into libt.so.4 so that libc
X               sources are not needed.
X            3) A program "termify" will convert the library reference to
X               libt.so.4 from libc.so.4 and set any "share" permissions
X               needed on executable.
X          This should work for both root and non-root users.  However, it won't
X	  work in user-shared mode without some modifications to ld.so.  Other
X          than this small restriction, "termify"'ing a program should be 
X          equivalent to recompiling the source with termnet.
X
Xdone : Find and fix whatever is causing tdownload to terminate early.
Xdone : Fix linecheck to be asymmetric. Also to check chars < 32.
Xdone : Skip bad pty slaves.
Xdone : Fix seven bit support
Xdone : Xconn needs to read DISPLAY properly. 
Xdone : Put in SGI patches. 
Xdone : Write a credits file. 
Xdone : X-windows is apparently dying again. Don't know why. Have to find out.
Xdone : upload occasionally has files go missing. Look into it.
Xdone : wait3 instead of waitpid. 
Xdone : Fix rsystem. Term hangs if you run it without an argument. 
Xdone : Catch signals and do a graceful clean-up. 
Xdone : Fix C_PORT and C_SOCKET so that errors get caught properly instead of just
X       hanging. Fix C_PTYEXEC as well. 
Xdone : Fix #include <termios.h>.Only be done if we are really using termios
Xdone : Add an 'ignore' array, and clean-up the escape array. Add ranges maybe??
Xdone : Fix #include <stdlib.h> unistd, and malloc.h. Make a generic #define to turn
X       them off.
Xdone : Fix byte-order for C_PORT.
Xdone : trsh going into a heavy load will hang (race condition in pty.c)
X	Fix upload to
Xdone :	a) use one arg. 
Xdone :	b) Do resumption! Resume upload a file. 
Xdone :	c) maybe write a download?? : sort of 
Xdone : Cut out all the 2400 baud limiters
Xdone : Fix rsh to exit properly when shell exits. Clean up exit messages.
Xdone : NNIGN. This will basically involve detecting and passing on read/write's of
X       zero length.
Xdone : Check out the Sun implementation. It still doesn't work reliably.
X
Xdone : Fix terminal handling when doing remote-->linux rsh.
X
Xdone : Put in maximum packet size as a command line option.  As a termrc option.
X
Xdone : Fix possible race condition with a client starting up at both ends
X       at the same time. (they will both get the same client number. Bad.)
X
Xdone : Write a tdownload.
X
Xdone : Write a getting-started guide for newbies.
X
Xdone : Write an FAQ list too!!! Could cull Mail/received for this.
X
Xdone : Preserving time/date stamping with upload?
X
Xdone : Add a mechanism for propagating environment variables.
X
Xdone : trsh should pass the 'TERM' env variable.
X
Xdone : Write a UDP redirector for those crazy sods that want to mount an NFS
X       partition over term.. 
X
Xdone : relocate all termnet.c errors to the same routine for easy 
X          activation/deactivation and eventual clean-up.
X
Xdone : Make a variable to control term/tcp use.  i.e.
X          - TERM only
X          - tcp only
X          - quick and dirty check for TERM
X          - careful test for TERM
X
Xdone : Get inetd to work, with socket address passing
X
Xdone : Add checksums to tupload and tdownload
X
Xscrapped : Get the NFS mounts working now.
X
SHAR_EOF
  $shar_touch -am 1028144694 'term-2.2.5/TODO' &&
  chmod 0644 'term-2.2.5/TODO' ||
  echo 'restore of term-2.2.5/TODO failed'
  shar_count="`wc -c < 'term-2.2.5/TODO'`"
  test 4781 -eq "$shar_count" ||
    echo "term-2.2.5/TODO: original size 4781, current size $shar_count"
  rm -f _sharnew.tmp
fi
# ============= term-2.2.5/Term.HOWTO ==============
if test -f 'term-2.2.5/Term.HOWTO' && test X"$1" != X"-c"; then
  echo 'x - skipping term-2.2.5/Term.HOWTO (file already exists)'
  rm -f _sharnew.tmp
else
  > _sharnew.tmp
  echo 'x - extracting term-2.2.5/Term.HOWTO (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'term-2.2.5/Term.HOWTO' &&
X  term HOWTO
X  Bill Reynolds bill@goshawk.lanl.gov, Patrick Reijnen
X  patrickr@cs.kun.nl
X  September 3, 1994
X
X  1.  Introduction
X
X
X  1.1.  About This Document
X
X
X
X  This HOWTO attempts to clear up some of the confusion of using term,
X  Michael O'Reilly's remarkable program that allows you to multiplex
X  your serial line and set up a network connection.  By and
X  large, the documents that come with term are quite good, and this
X  HOWTO is not intended to replace them. The intent of this document is
X  to give some background on how term works and detail the steps in
X  getting some of the more common networking services working under
X  term. I should emphasize that this document does not cover everything
X  there is to know about term. After reading it, you should read the
X  term manpages, since they include information not contained here.
X
X
X  1.2.  What is term?
X
X  term is a program, written by Michael O'Reilly (michael@iinet.com.au),
X  that is run over a serial line to allow multiple connections to
X  operate concurrently - i.e. you can be downloading a file over your
X  modem while working on a (different) remote system via the same modem
X  connection. term can also be used to open up X client windows over a
X  serial connection.  Through the tredir utility and the tudpredir
X  utility in term versions 2.0.x, term can provide many of the
X  ``traditional'' network services: mail, news, ftp, telnet, xarchie,
X  etc.  In a sense, term is very much like other serial protocols such
X  as SLIP or PPP. term's advantage is that it can be run entirely from
X  user space, requiring neither kernel support nor support from system
X  or network administrators.
X
X
X  2.  How term works
X
X  2.1.  Nomenclature
X
X
X  I am assuming you are dialing up a system through some sort of
X  terminal server. I use the terms ``local'' and ``remote'' to refer to
X  the home and network connected systems respectively (unless I use them
X  to mean something else :-).
X
X  term provides the local machine, which has no network connection, but
X  is connected via a serial line to a remote machine which is in turn
X  connected to a network, with network services. Let's look at how a
X  machine with a ``traditional'' network connection provides these
X  services. First the user invokes a program, like ftp or telnet, that
X  requests a network service. What these program do is make a system
X  call requesting network services. The operating system then obtains
X  these services via its network interface (e.g. it sends and receives
X  packets over the ethernet). SLIP and PPP do exactly this, by
X  converting your modem line into a network interface, which is in
X  principle no different from an ethernet. The downside of this is that
X  these protocols make the modem-connected machine part of the network,
X  just like any other machine. This entails all the administrative
X  burdens associated with being a network node (more actually, since the
X  modem link must also be administered).
X
X  In the absence of a network connection like SLIP or PPP, what does one
X  typically do? Well, you dial up your network connected machine, read
X  your mail, your news etc, if you need a file, you first transfer it to
X  the remote machine and then download it to your local machine using
X  kermit or some other communication program. This is a bit of a pain,
X  especially since you can only really do one thing at a time that uses
X  your modem link.  The idea behind term is basically to automate and
X  multiplex this process. term is invoked on both the local and remote
X  machines, and the two processes communicate with one another over the
X  modem line. When you need a network service, you make a request to the
X  local term daemon, which forwards the request to the term daemon on
X  the remote, network-connected, machine. The result is then returned
X  over the modem line.
X
X
X
X  To be more concrete, say you want to retrieve a file by ftp.  First
X  you need a version of ftp that can speak to term. You invoke this
X  termftp as you do a regular ftp, say termftp nethost.gov, but this
X  special version makes its network request to the local term daemon
X  instead of the kernel. The local term forwards this request, over the
X  modem line, to the remote term, which opens an ftp connection to
X  nethost.gov, and transmits the data back over the modem link. term is
X  smart enough to have many different things going on at once, so you
X  can have several different network sessions using the same modem link,
X  e.g. you can be logged into another distant host via termtelnet while
X  the termftp transfer is going on.
X
X  If this is too abstract (or unclear) do not worry; the important piece
X  of information to get out of this section is that there are two copies
X  of term running, one on each end of the modem link.
X
X
X  3.  Setting Things Up
X
X
X  3.1.  Build term
X
X
X  When you are lucky, this should just involve a make. Most probably
X  however, you need to do more. Due to new features in newer versions of
X  term (sharing, configure) it is now a bit more complicated to create
X  obtain your term binary. A couple of ways can now be followed to
X  obtain your binary.
X
X  To cover all these ways term can be build I will split this section
X  into three parts:
X
X
X  1. Build term upto version 1.15
X
X  2. Build term, versions 1.16 upto 1.19
X
X  3. Build term, versions 2.0.0 and higher
X
X
X  3.1.1.  Build term upto version 1.15
X
X
X  For these versions of term building should invoke no more than the
X  commands
X
X
X  make DO=install OS-type
X  make installman
X
X  You will find term, its clients and the manual pages nicely built and
X  installed and ready for use after this.
X
X  The only thing you may want to do is changing some of the paths in
X  the Makefile or changing some of the compiler flags.
X
X
X  3.1.2.  Build term, versions 1.16 upto 1.19
X
X
X  Starting with version 1.16 the concept of sharing the term connection
X  with other users has entered term. With this concept built in also the
X  ways of building term are extended.
X
X  To build term you can now choose one of the following ways:
X
X
X  1. You are an ordinary user (no root access) and you do not want to
X     share the term connection with other users.
X
X     As user who does not want to share the term connection with other
X     users you should do the following to build term:
X
X
X     make DO=install OS-type
X     make installman
X
X
X
X  After this term, its clients and the manual pages are built and
X  installed.
X
X  2. You are an ordinary user (no root access) and you want to share the
X     term connection with other users.
X
X     As user who wants to share the term connection you should do the
X     following:
X
X
X     make DO=installshare USERSHARE=$HOME/term OS-type
X     make installman
X
X
X
X  After this term, its clients and the manual pages are built and
X  installed.
X
X  Furthermore, you will have a directory $HOME/term with permissions
X  drwxrwxr-x
X
X  3. You are root and you do not want to share the term connection with
X     other users.
X
X     As root who does not want the term connection be shareable you
X     should do the following to build term:
X
X
X     make DO=install OS-type
X     make installman
X
X
X
X  After this term, its clients and the manual pages are built and
X  installed.
X
X
X  4. You are root and want to make the term connection shareable.
X
X     Create a term group with no member by adding the following line in
X     /etc/group:
X
X
X     term::16:root
X
X
X
X  or any other unused GID than 16 when 16 is already in use.
X
X  Now do
X
X
X  make DO=installshare OS-type
X  make installman
X
X
X
X  After this term, its clients and the manual pages are built and
X  installed.
X
X  Furthermore, you now have a directory called /usr/local/lib/term
X  (default) owned by group term and with permissions drwxrwxr-x
X
X
X  3.1.3.  Build term, versions 2.0.0 and higher
X
X
X  For term versions 2.0.0 and higher there are many ways to build the
X  term binary and the clients. All of these can be done both by root and
X  by ordinary user:
X
X
X  1. Build term in private mode without full term networking
X
X  2. Build term in private mode with full term networking
X
X  3. Build term in shared mode without full term networking
X
X  4. Build term in shared mode with full term networking
X
X  In these versions of term also the configure concept is used.  When
X  configure is run it checks on what operating system you are trying to
X  install term, whether the source directory is available or not and if
X  any runtime options are set. According to the things found configure
X  then creates a Makefile using Makefile.in which is provided in the
X  term package.
X
X  Two of the more important options to configure are --root and --user
X  which state whether term will be installed by root or an ordinary
X  user.
X
X
X  3.1.3.1.  Build term in private mode without full term networking
X
X
X  To build term this way you need to execute the following commands
X  (both for root and ordinary user):
X
X
X  make install installman
X
X
X
X  This builds the binaries and installs these binaries and the manual
X  pages.
X
X
X  3.1.3.2.  Build term in private mode with full term networking.
X
X
X  To build term this way you need to execute the following commands
X  (both for root and ordinary user):
X
X
X  make installnet installman
X
X
X
X  This builds the binaries and installs these binaries and the manual
X  pages.
X
X
X  3.1.3.3.  Build term in shared mode without full term networking
X
X
X  To build term this way you need to execute the following commands
X  (both for root and ordinary user):
X
X
X  make share installman
X
X
X
X  This builds the binaries and installs these binaries and the manual
X  pages.
X
X
X  3.1.3.4.  Build term in shared mode with full term networking
X
X
X  To build term this way you need to execute the following commands
X  (both for root and ordinary user):
X
X
X  make share installnet installman
X
X
X
X  This builds the binaries and installs these binaries and the manual
X  pages.
X
X
X  3.2.  Setting environment variables
X
X
X  term knows a couple of environment variables which can be set by
X  users. The first three of these I will explain are
X
X
X  o  TERMDIR
X
X  o  TERMSHARE
X
X  o  TERMMODE
X
X  By setting these variables you can control the way term is run.
X
X  For term versions upto 1.15 only the variable TERMDIR is important
X  (these versions do not know the shared mode). For these versions
X  TERMDIR should be set as follows:
X
X
X  setenv TERMDIR $HOME     (csh or tcsh)
X  export TERMDIR=$HOME     (bash)
X
X
X
X  Starting with version 1.16 term also knows the variables TERMSHARE and
X  TERMMODE. With these variables term can be told to run in private mode
X  or in shared mode. I will explain how to set the variables for private
X  mode and shared mode.
X
X
X  1. Running term in private mode can be done setting the variables
X     TERMDIR and TERMMODE in the following way:
X
X     For csh or tcsh
X
X     setenv TERMDIR $HOME
X     setenv TERMMODE 0
X
X
X
X  For bash
X
X  export TERMDIR=$HOME
X  export TERMMODE=0
X
X
X
X  2. When you want to use term in shared mode there are two ways of
X     setting the variables:
X
X
X     a. When term is installed as a SUID program only TERMMODE has to be
X        set (?? README in the term package).
X
X
X        setenv TERMMODE 'number'    (csh or tcsh)
X        export TERMMODE='number'    (bash)
X
X
X
X     For 'number' you have to enter 1 when you are using one of the term
X     versions 1.16 upto 1.19 and 2 when you are using term version 2.0.0
X     or higher.
X
X     b. When term is installed as a SGID program the variables have to
X        be set in the following way:
X
X        For csh or tcsh
X
X        setenv TERMMODE 1
X        setenv TERMDIR /usr/local/lib/term
X        setenv TERMSHARE $TERMDIR
X
X
X
X     For bash
X
X     export TERMMODE=1
X     export TERMDIR=/usr/local/lib/term
X     export TERMSHARE=$TERMDIR
X
X
X     Setting the variables this way makes it possible to start old
X     clients (clients linked to an older version of client.a) in shared
X     mode.
X
X  Starting with version 2.0.0 term also knows the variable TERMSERVER.
X  You need to set this variable when you have multiple modems and you
X  have more than one connection at a time. To specify which connection to
X  use, you must start term with a server name:
X
X
X  nohup term -v /dev/modem1 Connection1 &
X  nohup term -v /dev/modem2 Connection2 &
X
X
X
X  Users should then set the variable TERMSERVER to the connection name
X  they want to use:
X
X
X  setenv TERMSERVER Connection1   (csh or tcsh)
X  export TERMSERVER=Connection2   (bash)
X
X
X
X
X  3.3.  Test term
X
X
X
X  Do a make termtest to build term's test program. Termtest works by running
X  two copies of term on your system, a ``local'' and a ``remote'' copy. Both
X  of these will read your termrc, so you can adjust their behaviour.
X  Run termtest as ./termtest  so as to avoid your system's test. You should
X  now be able to do a trsh and a tupload (try
X   tupload ./term /usr/tmp - you should get a copy of the term  binary
X  in /usr/tmp ). The local term's output should show up in local.log,
X  the remote's in remote.log.   You can start term up with a -d255 flag
X  to enable debugging output to be written to these files, or enable
X  debugging in your termrc.
X
X
X  3.4.  Make a Transparent Link
X
X
X  Presumably, you can establish a modem connection between your local
X  and remote hosts. Typically, your dialing into some kind of terminal
X  server and connecting to your remote host from there. You are also
X  using some kind of terminal software, such as kermit or seyon to talk
X  to your modem (the examples in this document will use kermit, since
X  that is what its author uses). If you are having trouble with your
X  modem, or your terminal software, take a look at the Serial-HOWTO,
X  that should help you out.
X
X  Having established your link, you want to make it as transparent as
X  possible.  Check the commands on the terminal server (help or ? will
X  usually get you started). Go for the 8 bit options whenever possible.
X  This may mean changing the way you log in to a system, e.g. if the
X  server uses rlogin, you may have to use it and give it the -8 flag to
X  make it transparent.  Especially watch out for xon/xoff flow control,
X  you do not want that, try to enable rts/cts (hardware) flow control.
X  You may need to check your modem docs to learn how to configure it to
X  do 8-bit rts/cts communications.
X
X
X
X
X  3.5.  Run linecheck
X
X
X  linecheck is program that is supplied with term.  It checks the
X  transparency of a link, providing configuration information that term
X  needs to run correctly.  linecheck will send each of the 256 possible
X  eight bit characters over the link and verify that each was
X  transmitted successfully. term needs to be configured to deal with
X  characters that cannot be transmitted over the link, and linecheck
X  determines what characters these are. You use linecheck after you've
X  established as transparent a modem link as possible. To run linecheck,
X  do the following
X
X
X  1. On the remote system, run linecheck linecheck.log.
X
X  2. Escape back to your local system and suspend your comm program (^Z
X     under kermit) (otherwise it will steal characters from linecheck).
X
X  3. On the local system run linecheck linecheck.log > /dev/modem <
X     /dev/modem.
X
X  When linecheck is done, you will find a set of numbers at the bottom
X  of the linecheck.log files. These should be escaped in the termrc at
X  the other end of the link. For example, on my system, my local
X  linecheck.log said nothing and my remote linecheck.log said to escape
X  29 and 157.  Therefore, my local termrc escapes these characters and
X  my remote termrc escapes nothing. If I escape a character on one end,
X  I have to also ignore it on the other, so, in this example, I shall
X  have to ignore 29 and 157 on my remote system.
X
X  If linecheck hangs, try using
X
X
X  linecheck linecheck.log 17 19 > /dev/modem < /dev/modem
X
X
X
X  this will escape your xon/xoff (flow control) characters, which will
X  hang your line if you have got software flow control. If this solves
X  the hanging problems, you will want to escape /ignore 17/19 in both
X  termrc's. If your terminal server has other daemonic characters that
X  will shut it down, try running linecheck with those characters
X  escaped, as above. You can spot these characters if linecheck hangs.
X  If this is the case, kill it, then look in the logfiles. The last
X  characters transmitted are likely to be the culprits. Try it again
X  with these characters escaped.
X
X  In summary, my local termrc has the lines
X
X
X  escape 29
X  escape 157
X
X
X  and my remote termrc has the lines
X
X
X  ignore 29
X  ignore 157
X
X
X  since my remote linecheck.log said to escape 29 and 157.
X
X
X
X  3.6.  Try Running term
X
X
X  Log into the remote system, making the link as transparent as possible
X  (if you have not already).  Fire up term on the remote end.  I use the
X  following:
X
X  exec term -l $HOME/tlog -s 38400 -c off -w 10 -t 150.
X
X  Let's run down each option one by one (note that I could just as
X  easily have put these options in my termrc. I did it this way because
X  it saves editing a file while getting term set up).
X
X  exec means to destroy your current shell, running the given program in
X  its place.  I exec things because I do not intend to use my login
X  shell again, so it is just wasting memory. If you are debugging the
X  link and can reliably kill the remote term, you might not want to do
X  an exec.
X
X  -l $HOME/tlog. This logs errors to the file tlog in my home directory.
X  Very useful for debugging. No reason not to do this.
X
X  -s 38400 : I have got a 14400 baud modem, with compression.  For
X  optimal compression ratios, I want to be able to push bits down the
X  pipe as fast as possible. For a slower modem, you should use something
SHAR_EOF
  : || echo 'restore of term-2.2.5/Term.HOWTO failed'
fi
echo 'End of archive part 2'
echo 'File term-2.2.5/Term.HOWTO is continued in part 3'
echo 3 > _sharseq.tmp
exit 0
