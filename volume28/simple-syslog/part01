Newsgroups: comp.sources.unix
From: arnold@skeeve.atl.ga.us (Arnold D. Robbins)
Subject: v28i063: simple-syslog - 'simple' clone of 4.4BSD syslog routines, Part01/01
Message-id: <1.771481111.27924@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: arnold@skeeve.atl.ga.us (Arnold D. Robbins)
Posting-Number: Volume 28, Issue 63
Archive-Name: simple-syslog/part01

[ the LOG_PERROR option to 4.4BSD's openlog() more or less duplicates this
  functionality, but these functions are still quite useful on non-BSD 
  systems.								--vix ]

#! /bin/sh
echo - 'README'
cat << 'EOF' > 'README'
Sun Jun 12 14:54:32 EDT 1994

Here is a public domain clone of the syslog(3) facility that writes messages
to standard error.  It is based on one that I posted to comp.sources.unix
in August of 1987.  I decided to update it to use ANSI C and stdarg.h, and
to flesh it out into full compatibility with the one in 4.4 BSD.

Enjoy,

Arnold Robbins -- The Basement Computer		| Laundry increases
Internet: arnold@skeeve.ATL.GA.US		| exponentially in the
UUCP:	emory!skeeve!arnold			| number of children.
Bitnet:	Forget it. Get on a real network.	|    -- Miriam Robbins
EOF
echo - 'Makefile'
cat << 'EOF' > 'Makefile'
## syslog routine makefile
CFLAGS=-O
CC=gcc
all:	syslog.c
	$(CC) $(CFLAGS) -c syslog.c
	ar cr libsyslog.a syslog.o
	ranlib libsyslog.a
	@rm -f syslog.o

install:	all
	@echo install according to local conventions.
EOF
echo - 'syslog.3'
cat << 'EOF' > 'syslog.3'
.TH SYSLOG 3 "June 7, 1994"
.SH NAME
openlog, setlogmask, syslog, vsyslog, closelog \- logging routines
.SH SYNOPSIS
.ft B
.nf
#include <stdarg.h>
#include <syslog.h>
.sp .5
void openlog(const char *ident, int logopt, int facility);
.sp .5
long setlogmask(long mask);	/* 4.4BSD uses int (sic) */
.sp .5
void syslog(long priority, const char *message, ...);
.sp .5
void vsyslog(long priority, const char *message, va_list args);
.sp .5
void closelog(void);
.fi
.ft R
.SH DESCRIPTION
The
.I syslog
functions provide a standard interface for error messages and general
notification.  Versions of these functions on other systems use IPC
mechanisms to talk to a logging daemon.  The daemon can then direct the
message to logged in users, the console, log files, and/or to other
systems.
.PP
This version sends messages to the standard error.  It is intended for use
in debugging during program development, or as a porting aid to older
systems that do not have the ``real'' version of
.IR syslog .
.PP
In this version, log messages are of the form
.sp .5
.RS
.ft B
name:level:facility:Mon Dy HH:MM:SS: your message here
.ft R
.RE
.sp .5
or
.sp .5
.RS
.ft B
name:level:facility:Mon Dy HH:MM:SS:pid nnnn: your message here
.ft R
.RE
.PP
The message looks like a
.IR printf (3)
string except that
.B %m
is replaced by the current error message (collected from
.IR errno ).
A newline will be output if the the format string does not end with one.
.PP
The
.I openlog
routine can be called to initialize the logger.
This routine takes three parameters.
The first is a text string to be output before each message; it is
conventionally the program name.  If not supplied, it defaults to
.BR syslog .
.PP
The second argument is a logging option.  It is one of:
.TP \w'\fBLOG_PERROR\fR'u+1n
.B LOG_CONS
Log messages to
.BR /dev/console ,
in addition to anywhere else that messages may be logged.
.TP
.B LOG_NDELAY
Do not delay connecting to
.IR syslogd (8)
until a message is actually logged.
Instead, connect immediately.
.TP
.B LOG_PERROR
Log to standard error, as well as to anywhere else that
messages may be logged.
.TP
.B LOG_PID
Log the process id (from
.IR getpid (2))
with the message.
.PP
In this version, only
.B LOG_PID
actually affects the output.
.PP
The third parameter to
.I openlog
is a default ``facility'' to use.
It may be one of:
.TP \w'\fBLOG_AUTHPRIV\fR'u+1n
.B LOG_AUTH
The authorization system, such as
.IR login (1),
.IR su (1),
and so on.
.TP
.B LOG_AUTHPRIV
Like
.BR LOG_AUTH ,
but with logging to a file that can only be read by appropriate personnel.
(It is identical to
.B LOG_AUTH
in this version.)
.TP
.B LOG_CRON
Messages from
.IR cron (8).
.TP
.B LOG_DAEMON
Messages from system daemons.
.TP
.B LOG_KERN
Messages from the kernel.  Users are not allowed to generate such messages.
(This version does not care.)
.TP
.B LOG_LPR
Messages from the line printer spooling subsystem,
.IR lpr (1),
.IR lpd (8),
and so on.
.TP
.B LOG_MAIL
Messages from the mail handling subsystem.
.TP
.B LOG_NEWS
Messages related to USENET news.
.TP
.B LOG_SYSLOG
Messages from
.I syslog
itself.
.TP
.B LOG_USER
Messages from users.
This is the default facility if none is specified in the call to
.I syslog
or
.IR vsyslog .
.TP
.B LOG_UUCP
Messages from the UUCP subsystem.
.TP
.B LOG_LOCAL0
Reserved for local use.  So too
.B LOG_LOCAL1
through
.BR LOG_LOCAL7 .
.PP
The
.I closelog
routine can be used to close the log file.
In this version, it merely resets the defaults.
.PP
Each message is tagged with a ``priority.''
Priorities, in turn, consist of bitwise OR of a level and a facility.
Facilities were described above.
The available levels, from highest to lowest are:
.TP \w'\fBLOG_WARNING\fR'u+1n
.B LOG_EMERG
Emergency condition that is normally broadcast to all users.
(The dam just broke.)
.TP
.B LOG_ALERT
A condition that needs
.I immediate
attention.
(Fire in the machine room.)
.TP
.B LOG_CRIT
Critical conditions, such as hard device errors.
(No more \fICoca-Cola\fR\(rg in the vending machine.)
.TP
.B LOG_ERR
Errors. (Someone forgot the mushrooms when ordering the pizza.)
.TP
.B LOG_WARNING
Warning messages. (Final projects due in 10 hours!)
.TP
.B LOG_NOTICE
Important conditions that are not critical.
(The terminal room will be closed for New Years.)
.TP
.B LOG_INFO
Informational messages. (It's 90 degrees outside.)
.TP
.B LOG_DEBUG
Debugging messages. (You forgot the semi-colon.)
.PP
The
.I vsyslog
function is used when a variable argument list has already been collected.
Note that this version uses the ANSI C
.B <stdarg.h>
facility, instead of the older
.B <varargs.h>
mechanism.
.PP
The
.I setlogmask
function can be used to limit the level(s) at which messages will actually
be printed.
Messages with a level that is higher than the maximum set by
.I setlogmask
will not be printed.
To provide this capability,
.I syslog
internally keeps a mask that indicates which levels are acceptable.
.PP
When calling
.IR setlogmask ,
pass it a mask that indicates the highest acceptable logging level.
This is done by calling the macro
.BI LOG_UPTO( top_level )\fR,
.ft R
where
.I top_level
is one of the levels described above.
The return value of
.I setlogmask
will be the old priority mask.
The default is to allow messages of all priorities.
.PP
The mask for any given level can be created using the macro
.BI LOG_MASK( level )\fR,
.ft R
where
.I level
is one of the levels described above.
This macro is probably not of much use to the application level programmer.
.SH EXAMPLES
.nf
.ft B
openlog("servd", LOG_PID, LOG_DAEMON);
setlogmask(LOG_UPTO(LOG_CRIT));
syslog(LOG_LOCAL1|LOG_WARNING, "connection denied to host %s", rhost->h_name);
closelog();
.ft R
.fi
.SH BUGS
Relies on the system to provide
.IR strerror (3)
and
.IR strftime (3).
.SH AUTHOR
.nf
Arnold Robbins
arnold@skeeve.atl.ga.us
.fi
EOF
echo - 'syslog.c'
cat << 'EOF' > 'syslog.c'
/*
 * syslog.c
 *
 * Dummy version of syslog routines that use stdio to stderr.
 * Designed for debugging during development.
 *
 * Arnold Robbins
 * Emory University Computing Center
 * 7/87
 *
 * Updated for ANSI C and 4.4BSD syslog compatibility, 6/94.
 * Arnold Robbins
 * arnold@skeeve.atl.ga.us
 */

#include <stdio.h>
#include <errno.h>
#include <stdarg.h>
#include <time.h>

#include "syslog.h"	/* get our version of syslog.h */

#define LOG_OPT_MASK	(LOG_CONS|LOG_NDELAY|LOG_PERROR|LOG_PID)
#define LOG_FAC_MASK	(LOG_AUTH|LOG_CRON|LOG_DAEMON|LOG_KERN|LOG_LPR| \
			LOG_MAIL|LOG_NEWS|LOG_SYSLOG|LOG_USER|LOG_UUCP| \
			LOG_LOCAL0|LOG_LOCAL1|LOG_LOCAL2|LOG_LOCAL3|	\
			LOG_LOCAL4|LOG_LOCAL5|LOG_LOCAL6|LOG_LOCAL7)
#define LOG_LEV_MASK	(LOG_DEBUG|LOG_INFO|LOG_NOTICE|LOG_WARNING| \
			LOG_ERR	|LOG_CRIT|LOG_ALERT|LOG_EMERG)

extern char *strerror(int err);		/* prototype, for non-ansi systems */

static char def_id[] = "syslog";	/* default string */
static char *ident = def_id;
static long logopt = 0;			/* logging option */
static long facility = LOG_USER;	/* default facility */

/* default mask allows everything */
static long priority_mask = LOG_UPTO(LOG_EMERG);

/* openlog --- open connection to syslogd, set up ident, options, facility */

void
openlog(const char *id, int opt, int fac)
{
	if (id != NULL && *id != '\0')
		ident = (char *) id;
	if ((opt & LOG_OPT_MASK) != 0)
		logopt = opt;
	if ((fac & LOG_FAC_MASK) != 0)
		facility = fac;
}

/* closelog --- close the connection to syslogd */

void
closelog(void)
{
	(void) fflush(stderr);

	/* reset defaults */
	ident = def_id;
	logopt = 0;
	facility = LOG_USER;
}

/* setlogmask --- set the log mask, return the old one */

long
setlogmask(long mask)
{
	long oldmask;

	oldmask = priority_mask;
	priority_mask = mask;
	return oldmask;
}

/* vsyslog --- log a varargs message through to syslogd */

void
vsyslog(long priority, const char *format, va_list ap)
{
	char c, form[30];
	int i, j;
	long l;
	double d;
	long double ld;
	char *cp, *fac, *pri;
	int err = errno;

	long p, f;

	char timebuf[50];
	time_t now;
	struct tm *tp;
	static char *level[] = {
		"debug",
		"info",
		"notice",
		"warning",
		"error",
		"critical",
		"alert",
		"emergency"
	};
	static struct facility {
		long facility;
		char *name;
	} facilities[] = {
		{ LOG_AUTH,	"authorization" },
		{ LOG_CRON,	"cron" },
		{ LOG_DAEMON,	"daemon" },
		{ LOG_KERN,	"kernel" },
		{ LOG_LPR,	"lpr" },
		{ LOG_MAIL,	"mail" },
		{ LOG_NEWS,	"news" },
		{ LOG_SYSLOG,	"syslog" },
		{ LOG_USER,	"user" },
		{ LOG_UUCP,	"uucp" },
		{ LOG_LOCAL0,	"local 0" },
		{ LOG_LOCAL1,	"local 1" },
		{ LOG_LOCAL2,	"local 2" },
		{ LOG_LOCAL3,	"local 3" },
		{ LOG_LOCAL4,	"local 4" },
		{ LOG_LOCAL5,	"local 5" },
		{ LOG_LOCAL6,	"local 6" },
		{ LOG_LOCAL7,	"local 7" },
		{ 0,		NULL }
	};
	static int pid;

	p = priority & LOG_LEV_MASK;
	f = priority & LOG_FAC_MASK;

	if (p == 0)
		p = LOG_INFO;	/* choose a default */
	if (f == 0)
		f = facility;	/* ditto */

	if ((LOG_MASK(p) & priority_mask) == 0)
		return;

	if (pid == 0)
		pid = getpid();

	fac = pri = "unknown";
	if (p >= LOG_DEBUG && p <= LOG_EMERG)
		pri = level[p];

	for (i = 0; facilities[i].facility != 0; i++)
		if (facilities[i].facility == f) {
			fac = facilities[i].name;
			break;
		}

	/* undocumented feature of BSD syslog, current date and time */
	(void) time(& now);
	tp = localtime(& now);
	(void) strftime(timebuf, sizeof timebuf, "%b %d %H:%M:%S", tp);

	fprintf(stderr, "%s:%s:%s:%s:", ident, pri, fac, timebuf);
	if ((logopt & LOG_PID) != 0)
		fprintf(stderr, "pid %d:", pid);
	putc(' ', stderr);

	while ((c = *format++) != '\0') {
		int done;

		if (c != '%') {
			putc(c, stderr);
			continue;
		}
		j = 0;
		form[j++] = c;
		done = 0;
		while (!done) {
			c = *format++;
			switch (c) {
			default:		/* XXX */
			case 'o': case 'c': case 'd': case 's':
			case 'u': case 'e': case 'E': case 'f':
			case 'g': case 'G': case 'x': case 'X':
				done++;
				/* fall through */
			case ' ': case '+': case '-': case '.':
			case '#': case '0': case '1': case '2':
			case '3': case '4': case '5': case '6':
			case '7': case '8': case '9': case 'l':
				form[j++] = c;
				break;
			case 'm':
				fputs(strerror(err), stderr);
				goto out;
			case '%':
				putc('%', stderr);
				goto out;
			}
		}
		form[j] = '\0';

		switch (form[j - 1]) {
		case 'x': case 'X': case 'o': case 'c':
		case 'd': case 'u':
			if (sizeof(long) != sizeof(int) && form[j-2] == 'l') {
				l = va_arg(ap, long);
				fprintf(stderr, form, l);
			} else {
				i = va_arg(ap, int);
				fprintf(stderr, form, i);
			}
			break;
		case 'e': case 'E': case 'f': case 'g':
		case 'G':
			if (sizeof(long double) != sizeof(double)
			    && form[j-2] == 'l') {
				ld = va_arg(ap, long double);
				fprintf(stderr, form, ld);
			} else {
				d = va_arg(ap, double);
				fprintf(stderr, form, d);
			}
			break;
		case 's':
			cp = va_arg(ap, char *);
			fprintf(stderr, form, cp);
			break;
		}
out:
		;
	}
	if (format[-1] != '\n')
		putc('\n', stderr);
}


/* syslog --- log a message through to syslogd */

/*
 * Just set up the variable argument list stuff and
 * pass everything on to vsyslog.
 */

void
syslog(long priority, const char *message, ...)
{
	va_list ap;

	va_start(ap, message);
	vsyslog(priority, message, ap);
	va_end(ap);
}
EOF
echo - 'syslog.h'
cat << 'EOF' > 'syslog.h'
/*
 * syslog.h
 *
 * Defines for the syslog facility.
 *
 * Initial version: Rich Salz, rsalz@bbn.com, 7/87
 *
 * Modified for ANSI C, and for consistency with 4.4BSD.
 * Arnold Robbins, arnold@skeeve.atl.ga.us, 6/94
 */

/*
 * NOTE:
 *	<stdarg.h> must have been included before this for the
 *	prototype for vsyslog() to work.
 */

/*
 * Openlog can be optionally called.  If so, it takes a bit mask of
 * logging options and a facility.  The facility is the default
 * facility to use if no facility is encoded with the level in
 * the priority value in the call to syslog.
 *
 * Syslog messages are tagged with a priority. A priority is a
 * facility + level combination.
 */

/*
 * These are #define's for the logging options, passed to openlog.
 * Except for LOG_PID, this implementation simply ignores them.
 */

#ifndef _syslog_h
#define _syslog_h

#define LOG_CONS	0x1	/* Log to /dev/console */
#define LOG_NDELAY	0x2	/* Don't delay connection to syslogd */
#define LOG_PERROR	0x4	/* Write to both stderr and syslogd */
#define LOG_PID		0x8	/* Log the process id also */

/*
 * These are #define's for the various levels, from low to high.
 * They are representative of messages that might indicate their class.
 */
#define LOG_DEBUG	0	/* Expired article <34@site.uucp> */
#define LOG_INFO	1	/* Have 100 new articles in talk.foo */
#define LOG_NOTICE	2	/* /usr/spool/news is filling up */
#define LOG_WARNING	3	/* Rnews just dropped an article */
#define LOG_ERR		4	/* Network was unreachable, is back */
#define LOG_CRIT	5	/* Can't read /usr/lib/news/history */
#define LOG_ALERT	6	/* The disk is on fire */
#define LOG_EMERG	7	/* Run for the hills, the dam broke */

/*
 * These are #define's for the various facilities, from high to low.
 */

#define LOG_AUTH	(1<<20)		/* Authorization system		*/
#define LOG_AUTHPRIV	LOG_AUTH	/* Like LOG_AUTH, but to a file */
#define LOG_CRON	(1<<19)		/* The cron(8) daemon		*/
#define LOG_DAEMON	(1<<18)		/* System daemons		*/
#define LOG_KERN	(1<<17)		/* Messages from the kernel	*/
#define LOG_LPR		(1<<16)		/* Line printer subsystem	*/
#define LOG_MAIL	(1<<15)		/* The mail subsystem		*/
#define LOG_NEWS	(1<<14)		/* The news subsystem		*/
#define LOG_SYSLOG	(1<<13)		/* Messages from syslogd itself	*/
#define LOG_USER	(1<<12)		/* Messages from random users	*/
#define LOG_UUCP	(1<<11)		/* The uucp subsystem		*/
#define LOG_LOCAL0	(1<<10)		/* Reserved for local use	*/
#define LOG_LOCAL1	(1<<9)		/* Reserved for local use	*/
#define LOG_LOCAL2	(1<<8)		/* Reserved for local use	*/
#define LOG_LOCAL3	(1<<7)		/* Reserved for local use	*/
#define LOG_LOCAL4	(1<<6)		/* Reserved for local use	*/
#define LOG_LOCAL5	(1<<5)		/* Reserved for local use	*/
#define LOG_LOCAL6	(1<<4)		/* Reserved for local use	*/
#define LOG_LOCAL7	(1<<3)		/* Reserved for local use	*/

/* LOG_MASK --- turn a level into a mask */
#define LOG_MASK(level) (1<<(level))

/* LOG_UPTO --- turn a level into a mask of allowed levels */
#define LOG_UPTO(level)	((1<<((level) + 1))-1)

/* prototypes for functions in the library */

extern void openlog(const char *id, int opt, int fac);
extern void closelog(void);
extern long setlogmask(long mask);
extern void vsyslog(long priority, const char *format, va_list ap);
extern void syslog(long priority, const char *message, ...);

#endif /* _syslog_h */
EOF
echo - 'testit.c'
cat << 'EOF' > 'testit.c'
/*
 * testit.c
 *
 * test program for dummy version of syslog.
 */

#include <stdio.h>
#include <errno.h>
#include <stdarg.h>
#include "syslog.h"

int main(void)
{
	long mask;

	errno = E2BIG;
	openlog("testp", LOG_PID|LOG_PERROR, LOG_EMERG);
	syslog(LOG_MAIL, "slow mail %s: %m: %d hours to go", "day", 3);
	closelog();

	mask = setlogmask(LOG_UPTO(LOG_ERR));
	syslog(LOG_EMERG, "this should not appear");

	setlogmask(mask);
	syslog(LOG_WARNING|LOG_NEWS, "news system is %.2f up", 3.5);

	syslog(0, "testing %%lf, should be 3, (%ld)", 3L);
}

/* sunos needs this. sigh */

char *strerror(int err)
{
	extern char *sys_errlist[];
	extern int sys_nerr;

	if (err <= 0 || err >= sys_nerr)
		return "unknown error";
	else
		return sys_errlist[err];
}
EOF
