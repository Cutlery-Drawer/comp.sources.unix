Newsgroups: comp.sources.unix
From: bcr@physics.purdue.edu (Bill C. Riemers)
Subject: v28i161: term-2.1.2 - slip-like functionality for a pair of UNIX hosts, Part04/06
References: <1.784076477.10661@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: bcr@physics.purdue.edu (Bill C. Riemers)
Posting-Number: Volume 28, Issue 161
Archive-Name: term-2.1.2/part04

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then feed it
# into a shell via "sh file" or similar.  To overwrite existing files,
# type "sh file -c".
# The tool that generated this appeared in the comp.sources.unix newsgroup;
# send mail to comp-sources-unix@uunet.uu.net if you want that tool.
# Contents:  COPYING jump/jump.ignore lib.c link.c
# Wrapped by vixie@gw.home.vix.com on Sat Nov  5 14:58:34 1994
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
echo If this archive is complete, you will see the following message:
echo '          "shar: End of archive 4 (of 6)."'
if test -f 'COPYING' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'COPYING'\"
else
  echo shar: Extracting \"'COPYING'\" \(12488 characters\)
  sed "s/^X//" >'COPYING' <<'END_OF_FILE'
X
X		    GNU GENERAL PUBLIC LICENSE
X		     Version 1, February 1989
X
X Copyright (C) 1989 Free Software Foundation, Inc.
X                    675 Mass Ave, Cambridge, MA 02139, USA
X Everyone is permitted to copy and distribute verbatim copies
X of this license document, but changing it is not allowed.
X
X			    Preamble
X
X  The license agreements of most software companies try to keep users
Xat the mercy of those companies.  By contrast, our General Public
XLicense is intended to guarantee your freedom to share and change free
Xsoftware--to make sure the software is free for all its users.  The
XGeneral Public License applies to the Free Software Foundation's
Xsoftware and to any other program whose authors commit to using it.
XYou can use it for your programs, too.
X
X  When we speak of free software, we are referring to freedom, not
Xprice.  Specifically, the General Public License is designed to make
Xsure that you have the freedom to give away or sell copies of free
Xsoftware, that you receive source code or can get it if you want it,
Xthat you can change the software or use pieces of it in new free
Xprograms; and that you know you can do these things.
X
X  To protect your rights, we need to make restrictions that forbid
Xanyone to deny you these rights or to ask you to surrender the rights.
XThese restrictions translate to certain responsibilities for you if you
Xdistribute copies of the software, or if you modify it.
X
X  For example, if you distribute copies of a such a program, whether
Xgratis or for a fee, you must give the recipients all the rights that
Xyou have.  You must make sure that they, too, receive or can get the
Xsource code.  And you must tell them their rights.
X
X  We protect your rights with two steps: (1) copyright the software, and
X(2) offer you this license which gives you legal permission to copy,
Xdistribute and/or modify the software.
X
X  Also, for each author's protection and ours, we want to make certain
Xthat everyone understands that there is no warranty for this free
Xsoftware.  If the software is modified by someone else and passed on, we
Xwant its recipients to know that what they have is not the original, so
Xthat any problems introduced by others will not reflect on the original
Xauthors' reputations.
X
X  The precise terms and conditions for copying, distribution and
Xmodification follow.
X
X		    GNU GENERAL PUBLIC LICENSE
X   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
X
X  0. This License Agreement applies to any program or other work which
Xcontains a notice placed by the copyright holder saying it may be
Xdistributed under the terms of this General Public License.  The
X"Program", below, refers to any such program or work, and a "work based
Xon the Program" means either the Program or any work containing the
XProgram or a portion of it, either verbatim or with modifications.  Each
Xlicensee is addressed as "you".
X
X  1. You may copy and distribute verbatim copies of the Program's source
Xcode as you receive it, in any medium, provided that you conspicuously and
Xappropriately publish on each copy an appropriate copyright notice and
Xdisclaimer of warranty; keep intact all the notices that refer to this
XGeneral Public License and to the absence of any warranty; and give any
Xother recipients of the Program a copy of this General Public License
Xalong with the Program.  You may charge a fee for the physical act of
Xtransferring a copy.
X
X  2. You may modify your copy or copies of the Program or any portion of
Xit, and copy and distribute such modifications under the terms of Paragraph
X1 above, provided that you also do the following:
X
X    a) cause the modified files to carry prominent notices stating that
X    you changed the files and the date of any change; and
X
X    b) cause the whole of any work that you distribute or publish, that
X    in whole or in part contains the Program or any part thereof, either
X    with or without modifications, to be licensed at no charge to all
X    third parties under the terms of this General Public License (except
X    that you may choose to grant warranty protection to some or all
X    third parties, at your option).
X
X    c) If the modified program normally reads commands interactively when
X    run, you must cause it, when started running for such interactive use
X    in the simplest and most usual way, to print or display an
X    announcement including an appropriate copyright notice and a notice
X    that there is no warranty (or else, saying that you provide a
X    warranty) and that users may redistribute the program under these
X    conditions, and telling the user how to view a copy of this General
X    Public License.
X
X    d) You may charge a fee for the physical act of transferring a
X    copy, and you may at your option offer warranty protection in
X    exchange for a fee.
X
XMere aggregation of another independent work with the Program (or its
Xderivative) on a volume of a storage or distribution medium does not bring
Xthe other work under the scope of these terms.
X
X  3. You may copy and distribute the Program (or a portion or derivative of
Xit, under Paragraph 2) in object code or executable form under the terms of
XParagraphs 1 and 2 above provided that you also do one of the following:
X
X    a) accompany it with the complete corresponding machine-readable
X    source code, which must be distributed under the terms of
X    Paragraphs 1 and 2 above; or,
X
X    b) accompany it with a written offer, valid for at least three
X    years, to give any third party free (except for a nominal charge
X    for the cost of distribution) a complete machine-readable copy of the
X    corresponding source code, to be distributed under the terms of
X    Paragraphs 1 and 2 above; or,
X
X    c) accompany it with the information you received as to where the
X    corresponding source code may be obtained.  (This alternative is
X    allowed only for noncommercial distribution and only if you
X    received the program in object code or executable form alone.)
X
XSource code for a work means the preferred form of the work for making
Xmodifications to it.  For an executable file, complete source code means
Xall the source code for all modules it contains; but, as a special
Xexception, it need not include source code for modules which are standard
Xlibraries that accompany the operating system on which the executable
Xfile runs, or for standard header files or definitions files that
Xaccompany that operating system.
X
X  4. You may not copy, modify, sublicense, distribute or transfer the
XProgram except as expressly provided under this General Public License.
XAny attempt otherwise to copy, modify, sublicense, distribute or transfer
Xthe Program is void, and will automatically terminate your rights to use
Xthe Program under this License.  However, parties who have received
Xcopies, or rights to use copies, from you under this General Public
XLicense will not have their licenses terminated so long as such parties
Xremain in full compliance.
X
X  5. By copying, distributing or modifying the Program (or any work based
Xon the Program) you indicate your acceptance of this license to do so,
Xand all its terms and conditions.
X
X  6. Each time you redistribute the Program (or any work based on the
XProgram), the recipient automatically receives a license from the original
Xlicensor to copy, distribute or modify the Program subject to these
Xterms and conditions.  You may not impose any further restrictions on the
Xrecipients' exercise of the rights granted herein.
X
X  7. The Free Software Foundation may publish revised and/or new versions
Xof the General Public License from time to time.  Such new versions will
Xbe similar in spirit to the present version, but may differ in detail to
Xaddress new problems or concerns.
X
XEach version is given a distinguishing version number.  If the Program
Xspecifies a version number of the license which applies to it and "any
Xlater version", you have the option of following the terms and conditions
Xeither of that version or of any later version published by the Free
XSoftware Foundation.  If the Program does not specify a version number of
Xthe license, you may choose any version ever published by the Free Software
XFoundation.
X
X  8. If you wish to incorporate parts of the Program into other free
Xprograms whose distribution conditions are different, write to the author
Xto ask for permission.  For software which is copyrighted by the Free
XSoftware Foundation, write to the Free Software Foundation; we sometimes
Xmake exceptions for this.  Our decision will be guided by the two goals
Xof preserving the free status of all derivatives of our free software and
Xof promoting the sharing and reuse of software generally.
X
X			    NO WARRANTY
X
X  9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
XFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
XOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
XPROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
XOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
XMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
XTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
XPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
XREPAIR OR CORRECTION.
X
X  10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
XWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
XREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
XINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
XOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
XTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
XYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
XPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
XPOSSIBILITY OF SUCH DAMAGES.
X
X		     END OF TERMS AND CONDITIONS
X
X	Appendix: How to Apply These Terms to Your New Programs
X
X  If you develop a new program, and you want it to be of the greatest
Xpossible use to humanity, the best way to achieve this is to make it
Xfree software which everyone can redistribute and change under these
Xterms.
X
X  To do so, attach the following notices to the program.  It is safest to
Xattach them to the start of each source file to most effectively convey
Xthe exclusion of warranty; and each file should have at least the
X"copyright" line and a pointer to where the full notice is found.
X
X    <one line to give the program's name and a brief idea of what it does.>
X    Copyright (C) 19yy  <name of author>
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 1, or (at your option)
X    any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
XAlso add information on how to contact you by electronic and paper mail.
X
XIf the program is interactive, make it output a short notice like this
Xwhen it starts in an interactive mode:
X
X    Gnomovision version 69, Copyright (C) 19xx name of author
X    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
X    This is free software, and you are welcome to redistribute it
X    under certain conditions; type `show c' for details.
X
XThe hypothetical commands `show w' and `show c' should show the
Xappropriate parts of the General Public License.  Of course, the
Xcommands you use may be called something other than `show w' and `show
Xc'; they could even be mouse-clicks or menu items--whatever suits your
Xprogram.
X
XYou should also get your employer (if you work as a programmer) or your
Xschool, if any, to sign a "copyright disclaimer" for the program, if
Xnecessary.  Here a sample; alter the names:
X
X  Yoyodyne, Inc., hereby disclaims all copyright interest in the
X  program `Gnomovision' (a program to direct compilers to make passes
X  at assemblers) written by James Hacker.
X
X  <signature of Ty Coon>, 1 April 1989
X  Ty Coon, President of Vice
X
XThat's all there is to it!
END_OF_FILE
  if test 12488 -ne `wc -c <'COPYING'`; then
    echo shar: \"'COPYING'\" unpacked with wrong size!
  fi
  # end of 'COPYING'
fi
if test -f 'jump/jump.ignore' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'jump/jump.ignore'\"
else
  echo shar: Extracting \"'jump/jump.ignore'\" \(111 characters\)
  sed "s/^X//" >'jump/jump.ignore' <<'END_OF_FILE'
X00000000 T _term_do_exit        libtermnet     termnet
X00000000 T _internal_write_from_buff libtermnet     lib
END_OF_FILE
  if test 111 -ne `wc -c <'jump/jump.ignore'`; then
    echo shar: \"'jump/jump.ignore'\" unpacked with wrong size!
  fi
  # end of 'jump/jump.ignore'
fi
if test -f 'lib.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'lib.c'\"
else
  echo shar: Extracting \"'lib.c'\" \(26025 characters\)
  sed "s/^X//" >'lib.c' <<'END_OF_FILE'
X#define I_IOCTL
X#define I_ERRNO
X#define I_TYPES
X#define I_STAT
X#define I_SOCKET
X#define I_STRING
X#define I_CTYPE
X#define I_INET
X#define I_LIMITS
X#define I_STROPT
X#define I_POLL
X#include "includes.h"
X
X#include "debug.h"
X
X#define BUFF_INC_SIZE 1024
X#define MAX_BUFF 32767
X
Xchar *term_strherror(int);
X
Xint termerrno = 0;
X
Xextern int share;
Xint share = -1;
X
X/*------------------------------------------------------------------------*/
X/* Do a partial read into the buffer. */
Xstatic int do_read_into_buff(int fd, struct Buffer *b, int size) {
X  int r = 0, t;
X
X  
X
X  if (!size || size > b->alloced - 1 - b->size) 
X    size = b->alloced - 1 - b->size;
X
X  termerrno = 0;
X  t = b->alloced - b->start;
X  if (t > size) t = size;
X#ifdef SVR3 /* System Vr3 doesn't restart system calls */
X  while ((r = read(fd, b->data + b->start, t)) == -1 && errno == EINTR);
X#else
X  r = read(fd, b->data + b->start, t);
X#endif
X  if (r <= 0)  {
X    if (!r) termerrno = 1;
X    else 
X#ifndef SVR4
X      if (errno != ERR_BLOCK)
X#endif /* SVR4 */
X        termerrno = errno + 1;
X    return r;
X  }
X  DEBUG_LL(stderr, "%s: d_r_i_b: read1 from %d (%d) did %d\n", 
X	   term_server, fd, t, r);
X  
X  b->start += r;
X  b->size += r;
X  SANITY(b->start <= b->alloced);
X  if (b->start == b->alloced)
X    b->start = 0;
X  size -= r;
X  if (!size || b->start != 0) return r;
X  
X  t = b->alloced - b->start;
X  if (t > size) t = size;
X 
X#ifdef SVR3                   /* System Vr3 doesn't restart system calls */
X  while ((t = read(fd, b->data + b->start, t)) == -1 && errno == EINTR);
X#else
X  t = read(fd, b->data + b->start, t);
X#endif
X  if (t <= 0) {
X    if (!t) termerrno = 1;
X    else if(errno != ERR_BLOCK)
X      termerrno = errno+1;
X    return r;
X  }
X  DEBUG_LL(stderr, "%s: d_r_i_b: read2 from %d (%d) did %d\n", 
X	   term_server, fd, t, t);
X  
X  b->start += t;
X  b->size += t;
X  if (b->start == b->alloced)
X    b->start = 0;
X  size -= t;
X  r += t;
X  return r;
X}
X
Xstatic int inc_buffer(struct Buffer *b, int do_move) {
X  if( (b->data == NULL) || (b->alloced == 0)) {
X    if( (b->data = (un_char *)malloc((1+BUFF_INC_SIZE)*sizeof(un_char))) == NULL){
X      perror("Term: malloc()");
X      return -1;
X    }
X    b->alloced = BUFF_INC_SIZE + 1;
X    b->size=0;
X  }else if(b->alloced >= MAX_BUFF) {
X    DEBUG_UDP(stderr,"%s:%s",term_server,"Term: max buffer\n");
X    return -1;
X  }else if ((b->data = (un_char *)realloc(b->data, sizeof(un_char)*
X     (((b->alloced+BUFF_INC_SIZE) < 0 || (b->alloced+BUFF_INC_SIZE > MAX_BUFF))) ?
X      MAX_BUFF : b->alloced+BUFF_INC_SIZE)) == NULL) {
X    perror("%Term: realloc");
X    return -1;
X  }else { 
X    b->alloced += BUFF_INC_SIZE;
X    if (b->alloced > MAX_BUFF || b->alloced < BUFF_INC_SIZE)
X      b->alloced = MAX_BUFF;
X  }
X  if (!b->size) b->start=b->end=0;
X
X	/* It took me ages to realize this is what is being done here! */
X
X	/* OK, we use buffers as a continuous loop.  So when we reach the eob */
X	/* (end of buffer) we just continue on at the bob (beginning of buffer). */
X	/* So if we want to increase the size of the buffer while it is in use */
X	/* we must take data at the eob and move it to the new eob so we have */
X	/* more space where we need it in the mob (middle of buffer). */
X
X	/* This means "start" is where we can start adding more data to the */
X	/* buffer, and "end" is where we last ended removing the data. */
X
X  if ( do_move && (b->end > b->start)) {    /* curses. need to move data. */
X    int i; char *new_eob, *old_eob;
X    new_eob = (caddr_t)b->data + b->alloced - 1;
X    old_eob = (caddr_t)b->data + b->alloced - BUFF_INC_SIZE - 1;
X    for (i = b->alloced - BUFF_INC_SIZE - b->end; i > 0; --i)
X      *new_eob-- = *old_eob--;
X    b->end += BUFF_INC_SIZE;
X  }
X  return 0;
X}
X
X
X
X/*-----------------------------------------------------------------------*/
X
X#ifndef O_NONBLOCK
X#define O_NONBLOCK FNDELAY
X#endif
X
Xvoid set_nonblock(int fd) {
X  int val = 1;		/* Checker V0.5 needs assignment even if !USE_IOCTL */
X#ifdef USE_IOCTL
X  ioctl(fd, FIONBIO, &val);
X#else
X  val = fcntl(fd, F_GETFL);
X  if (!(val & O_NONBLOCK))
X    fcntl (fd, F_SETFL, val | O_NONBLOCK);
X#endif
X}
X
Xint set_block(int fd) { 
X  int val = 0;		/* Checker V0.5 needs assignment even if !USE_IOCTL */
X#ifdef USE_IOCTL
X  ioctl(fd, FIONBIO, &val);
X  return 1;
X#else
X  val = fcntl(fd, F_GETFL);
X  if (val & O_NONBLOCK)
X    fcntl (fd, F_SETFL, val & ~O_NONBLOCK);
X  return !(val & O_NONBLOCK);
X#endif
X}
X
X/* Read from a file-descriptor into a ring buffer. Read at most size bytes */
Xint read_into_buff(int fd, struct Buffer *b, int z) {
X  int ret, l = 0, size;
X
X  if (! b->alloced) inc_buffer(b,0);
X 
X  if ((size = z) > b->alloced - 1 - b->size) inc_buffer(b,1); 
X
X  if (!size)
X    size = b->alloced - 1 - b->size;
X
X  do {
X    ret = do_read_into_buff(fd, b, size);
X    if (ret < 1) break;
X    l += ret;
X    size -= ret;
X    if (!z && !termerrno && !size && b->alloced < PIPE_BUFFER) {
X      if (inc_buffer(b,1) < 0) 
X        termerrno = 1;
X      else
X        size = b->alloced - 1 - b->size;
X    }
X  } while (!termerrno && size);
X  if (!b->size) b->start=b->end=0;
X  if (!l) return ret;
X  return l;
X}
X
X/*------------------------------------------------------------------------*/
X/* Write from ring buffer to file descriptor. Write at most size bytes    */
X
Xint internal_write_from_buff(int fd, struct Buffer *b, int size, int async) {
X  int r = 0, t, i;
X
X  SANITY(b->size <= b->alloced);
X  if (!size) size = b->size;
X  if (size > b->size) size = b->size;
X
X  while (size > 0) {	/* We use a loop in case there is a maximum block size */
X    t = b->alloced - b->end;
X    if (t > size) t = size;
X    if (t > _POSIX_PIPE_BUF) t = _POSIX_PIPE_BUF;
X
X    i = write(fd, b->data + b->end, t);
X
X    if (i <= 0) {
X      if (!i) termerrno = 1;
X#ifdef SVR3
X      else if (i == -1 && errno == EINTR) continue;
X#endif
X      else if (errno != ERR_BLOCK)
X        termerrno = errno+1;
X      return r;
X    }
X    DEBUG_LL(stderr, "%s: d_w_f_b: write from %d (%d) did %d\n", 
X	   term_server, fd, t, i);
X
X    r += i;
X
X    b->end += i;
X    b->size -= i;
X    size -= i;
X    SANITY(size <= b->size);
X
X    SANITY(b->end <= b->alloced);
X    if (b->end == b->alloced) b->end = 0;
X    if (i != t && async)
X      break;
X  };
X  if (!b->size) b->start=b->end=0;
X  return r;
X}
X
Xint write_from_buff(int fd, struct Buffer *b, int size) {
X  return internal_write_from_buff(fd, b, size, 0);
X}
X
Xint write_from_buff_async(int fd, struct Buffer *b, int size) {
X  return internal_write_from_buff(fd, b, size, 1);
X}
X
Xint add_to_buffer(struct Buffer *B, un_char c) {
X
X  if (! B->alloced) B->size=0;
X  if (B->size >= B->alloced - 2) {
X    
X    DEBUG_LL (stderr, "%s:add_to_buffer:growing buffer from %d, %d\n",
X	     term_server, B->size, B->alloced);
X
X    if( inc_buffer(B,(B->alloced > 0)) < 0) {
X      termerrno = 1;
X      return -1;
X    }
X  }
X  B->data[B->start++] = (c);
X  if (B->start == B->alloced) B->start = 0;
X  B->size++;
X  return 0;
X}
X
Xint get_from_buffer(struct Buffer *b) {
X  un_char c;
X  if (b->size < 1)
X    return -1;
X  c = b->data[b->end++];
X  --b->size;
X  if (b->end >= b->alloced)
X    b->end = 0;
X  if (!b->size) b->start=b->end=0;
X  return (int) c&255;
X}
X/*-----------------------------------------------------------------------*/
X
X	/* KLUDGE. suns always need stderr, so ignore the config.h if */
X	/* it says otherwise. This is mostly just a sanity check */
X#ifndef NO_STRERROR
Xchar *strerror(int errno) {
X  extern char *sys_errlist[];
X  
X  return sys_errlist[errno];
X}
X#endif
X
X	/* This is to allow easy checking of effective access */
Xint eaccess(char *pathname, int mode){
X  struct stat file_status;
X  int m;
X
X  if(stat(pathname,&file_status) == -1) return -1;
X  if(! mode) return 0;
X
X  if(file_status.st_uid == geteuid())
X    m = mode << 6;
X  else if ( file_status.st_gid == getegid())
X    m = mode << 3;
X  else
X    m = mode;
X
X  return  - ((file_status.st_mode & m) != m) ; 
X}
X
X	/* This tests whether we are in shared mode */
Xvoid set_share_mode(int priv, int share_new){
X  char *e;
X  static int share_old = -2;
X
X  share = share_new;
X  if (share_old == -2) {
X    e = getenv("TERMMODE");
X    if (e) 
X      share_old = atoi(e);
X    if(share_old < 0 || share_old > 2) share_old = -1;
X  }
X
X  if (share_old != share) {
X#ifdef _POSIX_SAVED_IDS
X    if (savedeid  >= 0) {
X      if (share > 1) 
X        setgid(savedeid);
X      else if (share > 0)
X        setgid(savedeid);
X      savedeid = -1;
X    }
X#endif
X    if (share < 0) share = share_old;
X  }
X
X  if (share < 0) {
X    share = (getgid() != getegid());
X    if (! share)
X      share = (getuid() != geteuid() && getuid()) ? 2 : -1;
X  }
X
X  if (! share) {
X    if (getgid() != getegid()) 
X      setgid(getgid());
X    else if (geteuid() != 0 && geteuid() != getuid())
X      setuid(getuid());
X  }
X#ifdef _POSIX_SAVED_IDS
X  else if (share > 0 && savedeid < 0){
X    if ( share == 2 ) {
X      savedeid = geteuid();
X      setuid(getuid());
X    }else {
X      savedeid = getegid();
X      setgid(getgid());
X    }
X  }
X#endif
X
X  if (share != share_old) 
X    share_old = share;
X  
X  if (priv) {
X#ifdef _POSIX_SAVED_IDS
X    savedeid = -1;
X#endif
X    if (geteuid() && geteuid() != getuid()) setuid(getuid());
X    if (getegid() && getegid() != getgid()) setgid(getgid());
X  }
X}
X
Xchar *str_version(long unsigned int version){
X  static char v[25];
X  if(version%100 < 50 )	/* These are bug fix releases */
X    sprintf(v, "%lu.%lu.%lu",(version/10000),
X      (version/100)%100,version%100);
X  else if(version%100 < 77 ) 	/* These are alpha releases */
X    sprintf(v, "%lu.%lu%c (alpha)",(version/10000),
X      (version/100)%100,'a'+(char)((version-51)%100));
X  else if(version%100 < 90 ) 	/* These are alpha releases */
X    sprintf(v, "%lu.%lu%c%c (alpha)\r\n",(version/10000),
X      (version/100)%100,'z','a'+(char)((version-77)%100));
X  else
X    sprintf(v, "alpha pre-release of %lu.%02lu pl %02lu",(version/10000),
X      1+(version/100)%100,version%10);
X  return v;
X}
X
X	/* This is an unreliable protocol.  So in the case of errors */
X	/* we must just try to continue the best we can. */
X
Xint recvfrom_into_buff(struct Client *cl) {
X  struct sockaddr_in from_addr;
X  int r = 0, i, fd, type;
X  struct Buffer *b;
X  static un_char *from = NULL;
X  static size_t alloced = 0;
X  unsigned int avail = 0, len, hdr = 0, t;
X  unsigned long lhost, *host;
X  unsigned int lport, *port;
X
X  host = &cl->udp_host;
X  port = (unsigned int *)&cl->udp_port;
X
X  fd = cl->fd;
X  b = &cl->in_buff;
X  type = cl->udp_type;
X
X  termerrno = 0;
X
X  DEBUG_UDP(stderr,"%s# recvfrom_i_b called.\n",term_server);
X
X#ifndef FIONREAD
X  /*
X   * System V release 3 doesn't have an FIONREAD even on sockets, but
X   * in looking at the code it looks like a select here just to tell
X   * if there is any data available is sufficient.  Size is always set
X   * to PIPE_BUFFER or greater so I suspect if I just read PIPE_BUFFER I'll
X   * be OK.  It might require bumping PIPE_BUFFER  up to the maximum message
X   * size.
X   */
X  {
X    struct pollfd fds[2];
X    int status;
X    
X    fds[0].fd = fd;
X    fds[0].events = POLLIN | POLLPRI | POLLERR | POLLHUP;
X    fds[0].revents = 0;
X   
X    errno = 0;
X    status = -1;
X    while (status == -1) {
X      status = poll(fds, 1L, 2);
X      if (errno != EAGAIN)
X      break;
X    }
X
X    if (status == -1) {
X      perror("ERROR in poll request");
X      return 0;
X    }
X
X    if (fds[0].revents & POLLIN | POLLPRI)
X      avail = PIPE_BUFFER;
X    else
X      return 0;
X  }
X#else
X  if( ioctl( fd, FIONREAD, &avail) < 0)  return 0;
X#endif
X  if (avail < PIPE_BUFFER) avail = PIPE_BUFFER;
X
X  if( type & UDP_T_RECADDHDR) hdr = HEADER_SIZE; else hdr = 0;
X
X  if ( ! from) {
X    from = (un_char *)malloc(sizeof(un_char)*BUFF_INC_SIZE);
X    alloced = BUFF_INC_SIZE;
X  }
X  SANITY(alloced);
X
X  while ( from && (avail+hdr) > alloced && alloced < MAX_BUFF) {
X    from = (un_char *)realloc(from,sizeof(un_char)*
X     ((alloced+BUFF_INC_SIZE > MAX_BUFF) ?
X      MAX_BUFF : alloced+BUFF_INC_SIZE));
X    alloced += BUFF_INC_SIZE;
X    break;
X  }
X  if (alloced > MAX_BUFF) alloced = MAX_BUFF;
X  avail = alloced;
X
X  if (! from) {		/* OK, this seems like a reasonable exception... */
X    alloced = 0;
X    termerrno = 1;
X    return -1;
X  }
X
X  len = sizeof(from_addr);
X  if ((i = recvfrom(fd, from+hdr+2, avail, 0,
X         (struct sockaddr *)&from_addr, (int *)&len)) < 0) {
X    DEBUG_UDP(stderr,"recvfrom %d : %s\n", avail,strerror(errno)); 
X    				/* We failed, thats tuff, we should still */
X				/* Leave the socket open to try again... */
X    return 0; 
X  }
X  SANITY(avail <= alloced);
X
X  DEBUG_UDP(stderr,"%s# recvfrom()'d: host %lx, port %d.\n", term_server, 
X                    (long)ntohl(from_addr.sin_addr.s_addr), 
X                    ntohs(from_addr.sin_port));
X
X  DEBUG_UDP(stderr,"# state 1: avail %d, avail+hdr %d, i %d, b->size %d.\n",
X                    avail, avail+hdr, i, b->size);
X
X  avail = i + hdr + 2;
X  lhost = ntohl(from_addr.sin_addr.s_addr);
X  lport = ntohs(from_addr.sin_port);
X  if (type & UDP_T_RECADDHDR) {
X    from[2] = (lhost>>24)&255;
X    from[3] = (lhost>>16)&255;
X    from[4] = (lhost>>8)&255;
X    from[5] = lhost&255;
X    from[6] = (lport>>8)&255;
X    from[7] = lport&255;
X  }
X
X  if ( ! *host || ! *port ) {
X    *host = lhost;
X    *port = lport;
X  }
X
X  while( avail > (b->alloced - b->size) && b->alloced < MAX_BUFF) { /* +HEADER_SIZE just to make sure... */
X    if( inc_buffer(b,1) < 0) {
X      termerrno = 1; 	/* Our buffer is gone, so we have no choice but to */
X			/* report this error. */
X      return -1;
X    }
X  }
X
X	/* If necessary, truncate the message, and store the size */
X
X  if ( avail > (b->alloced - b->size) ) avail = b->alloced - b->size;
X  from[0] = (avail>>8)&255;
X  from[1] = avail & 255;
X
X	/* We must be careful here, since there is no guarantee that the */
X	/* available memory in the buffer is continuous!! */
X
X	/* The first chunk. */
X
X  t = b->alloced - b->start;
X  if( t > avail) t = avail; /* do it ALL at once */
X
X  DEBUG_UDP(stderr,"%s# state 2: t %d, avail+hdr+2 %d.\n", term_server, t, avail);
X
X  memcpy( b->data + b->start, from, t); /* bugger checking the return code... */
X
X  b->start += t;
X  if( b->start == b->alloced)
X    b->start = 0;
X  b->size += t;
X
X
X  DEBUG_UDP(stderr,"%s# state 3: b->start %d, b->size %d.\n", term_server, 
X    b->start, b->size);
X
X  if (t == avail) { /* all done, return */
X    DEBUG_UDP(stderr,"%s# return 1 (%d) - all done.\n", term_server, t);
X    return (int) t;
X  }
X
X	/* The memory wasn't continuous, so now we need to get the rest. */
X
X  r = avail - t;
X
X  DEBUG_UDP(stderr,"%s# round 2: r %d.\n", term_server,r);
X
X  SANITY(b->start == 0);
X  memcpy( b->data, from + t, r); /* b->start needed? */
X
X  b->start += r;
X  SANITY(b->start < b->alloced);
X  b->size += r;
X
X  DEBUG_UDP(stderr,"%s# state 3: r %d, b->start %d, b->size %d.\n", term_server,
X    r, b->start, b->size);
X  DEBUG_UDP(stderr,"%s# return 2 (%d) - all done.\n", term_server, avail+hdr);
X
X	/* Now we are really done. */
X
X  return (int) avail;
X}
X
X
X
X/* ------------------------------------------------------------------------------
X * send to_from_buff() 
X * basically, transfer from Buffer *b to the array *to and returns the number of
X * chars send.
X *
X * also, take care of the header... header is the first HEADER_SIZE bytes of the
X * packet telling host/port to sendto()'it (or host/port it was recvfrom()''ed)
X * ans the size of the packet, INCLUDING header.
X *
X */
X
X
X	/* This is an unreliable protocol.  So in the case of errors */
X	/* we must just try to continue the best we can.  If we are able */
X	/* to try another message, we shouldn't return an error. */
X
Xint sendto_from_buff(struct Client *cl) {
X  int type, *port;
X  int r=0, t, i;
X  struct Buffer *b;
X  unsigned long int *host;
X  unsigned long int lhost;
X  unsigned short int lport;
X  struct sockaddr_in toaddr_in;
X  static un_char *to = NULL;
X  static size_t alloced = 0;
X
X  b = &cl->out_buff;
X  type = cl->udp_type;
X  host = &cl->udp_host;
X  port = &cl->udp_port;
X
X  termerrno = 0; /* this sucker cost be around 2 hours of debugging! :) */
X
X  DEBUG_UDP(stderr,"%s@ sendto_from_buff called.\n",term_server);
X  DEBUG_UDP(stderr,"%s@b->size %u b->end %d\n",term_server,
X    b->size, b->end);
X
X	/* If we don't have the header yet we can't do anything. */
X  if ( ! b->alloced || b->size < 2 ) {
X    DEBUG_UDP(stderr,"%s@only have one udp byte.\n",term_server);
X    cl->udp_size=b->size;
X    return 0;
X  }
X  cl->udp_size =
X    (b->data[b->end]<<8) +
X    (b->data[(b->end + 1) % b->alloced]&255);
X
X  if (cl->udp_size < HEADER_SIZE+2 || cl->udp_size > MAX_BUFF) {
X    DEBUG_UDP(stderr,"%s@ term invalid udp packet size.\n",term_server);
X    cl->udp_size=b->size=b->start=b->end=0;
X    termerrno = 1; 	/* OK, once we have an internal error like this */
X    return -1;		/* we are doomed. */
X  }
X
X  if (b->size < cl->udp_size) { 
X    DEBUG_UDP(stderr,"%s@udp message is not complete yet. %d/%d\n",
X      term_server, b->size, cl->udp_size);
X    return 0;	/* I'll be back. */
X  }
X
X  if (b->size - 2 < HEADER_SIZE) {
X    DEBUG_UDP(stderr,"%s@term udp packet is too small.\n",term_server);
X    cl->udp_size=b->size=b->start=b->end=0;
X    termerrno = 1; 	/* OK, once we have an internal error like this */
X    return -1;		/* we are doomed. */
X  }
X  b->size -= 2;
X  b->end = (b->end + 2) % b->alloced;
X  cl->udp_size -= 2;
X
X  if (! to) {
X    to = (un_char *)malloc(sizeof(un_char)*BUFF_INC_SIZE);
X    alloced = BUFF_INC_SIZE;
X  }
X  SANITY(alloced);
X
X  while (to && cl->udp_size > alloced && alloced < MAX_BUFF) {
X    to = (un_char *)realloc(to,sizeof(un_char)*
X     ((alloced+BUFF_INC_SIZE > MAX_BUFF) ?
X      MAX_BUFF : alloced+BUFF_INC_SIZE));
X    alloced += BUFF_INC_SIZE;
X  }
X
X  if (! to) {		/* Not much we can do if we are out of memory! */
X    DEBUG_UDP(stderr,"%s@ allocation failure.\n",term_server);
X    alloced = 0;
X    termerrno = 1;
X    return -1;
X  }
X
X  if (alloced > MAX_BUFF) alloced = MAX_BUFF;
X  SANITY(alloced >= BUFF_INC_SIZE);
X
X  if ( cl->udp_size > alloced ) cl->udp_size = alloced;	/* Anyone sending too large  of a */
X					/* udp message deserves what they get. */
X  t = cl->udp_size;
X  if (t > b->alloced - b->end) t = b->alloced - b->end;
X
X  DEBUG_UDP(stderr,"@ 1st chunk: t %d, b->end %d\n",t,b->end);
X  SANITY(to && b->data);
X  memcpy(to, b->data + b->end, t);
X
X  b->size -= t;
X  b->end = (b->end + t) % b->alloced;
X
X  if ((r = cl->udp_size - t) > 0) {
X    SANITY(r <= b->size);
X    SANITY(b->end == 0);
X    DEBUG_UDP(stderr,"@ 2nd chunk: r %d , b->end %d\n",r,b->end);
X    memcpy (to + t, b->data, r);
X    b->size -= r;
X    b->end = (b->end + r) % b->alloced;
X    t += r;
X  } 
X  
X  if (!b->size) b->start=b->end=0;
X
X  lhost = (to[0]<<24)+(to[1]<<16)+(to[2]<<8)+(to[3]);
X  lport = (to[4]<<8)+(to[5]);
X  DEBUG_UDP(stderr,"%s@message from %lx, %u\n",term_server,lhost,lport);
X
X  if ( !(type & UDP_T_SENDIGNOREHDR) && (lhost || lport)) {
X    /* don't ignore header, therefore put it in *host *port for sendto()'ing */
X    DEBUG_UDP(stderr,"%s@ changing: from *host, *port %lx, %u to ",
X      term_server, *host, *port);
X    *host = lhost;
X    *port = lport;
X    DEBUG_UDP(stderr,"%lx, %u\n",*host, *port);
X  }
X
X  toaddr_in.sin_family = AF_INET;
X  toaddr_in.sin_addr.s_addr = htonl(*host);
X  toaddr_in.sin_port = htons(*port);
X  if (toaddr_in.sin_addr.s_addr == INADDR_ANY ||
X       toaddr_in.sin_addr.s_addr == inet_addr("127.0.0.254"))
X    toaddr_in.sin_addr.s_addr = inet_addr("127.0.0.1");
X
X  if( type & UDP_T_SENDSTRIPHDR) /* strip header before sending? */
X    i = sendto(cl->fd, to + HEADER_SIZE, t - HEADER_SIZE, 0,
X               (struct sockaddr *)&toaddr_in, sizeof(toaddr_in));
X  else
X    i = sendto(cl->fd, to, t, 0,
X               (struct sockaddr *)&toaddr_in, sizeof(toaddr_in));
X
X  cl->udp_size = 0;
X  DEBUG_UDP(stderr,"%s@b->size %u b->end %d\n",
X    term_server, b->size, b->end);
X
X  if (i < 0) {
X    DEBUG_UDP(stderr,"%s@ return 2.5 (%d) %lx, %u - sendto() failed.\n",
X      term_server, i, *host, *port);
X    *host = 0;	/* This unbinds the socket... */
X    *port = 0;
X    return t + 2;	/* Another error.  Tuff luck. */
X  }
X
X  DEBUG_UDP(stderr,"%s@ return 3 (%d) - did sendto(): host %lx, port %u, i %d\n",
X    term_server, t, *host, *port, i);
X
X  return t + 2;
X}
X
X
X/* This is grossly overly complicated because I try to convert invalid */
X/* addresses to something recognizable */
X
Xchar *sockaddr_to_sstr(struct sockaddr *addr, int trans) {
X  return NULL;
X}
X
X
Xvoid get_term_localaddr(unsigned long default_addr) {
X  char hostname[sizeof(term_localhost)];
X  struct hostent *hp;
X  struct in_addr addr_in;
X
X  if (term_localaddr != INADDR_ANY) return;
X
X  memset(term_localhost,0,sizeof(term_localhost));
X#if defined(SYSV) && !defined(DYNIXPTX)
X  { struct utsname unam;
X    uname(&unam);
X    strcpy(hostname, unam.nodename); }
X#else
X  gethostname (hostname, sizeof(hostname));
X#endif
X  strcpy(term_localhost, hostname);
X  if (hostname[0] >= '0' && hostname[0] <= '9') {
X    addr_in.s_addr = inet_addr(hostname);
X  }else {
X    hp=gethostbyname(hostname);
X    if (!hp) {
X      extern int h_errno;
X      fprintf(stderr,"%s: gethostbyname: %s: %s\n",term_server, hostname,
X        term_strherror(h_errno));
X      addr_in.s_addr = ntohl(default_addr);
X      strcpy (term_localhost, "127.0.0.1");
X    }else {
X      memcpy(&addr_in, hp->h_addr, hp->h_length);
X    }
X  }
X  term_localaddr = ntohl(addr_in.s_addr);
X}
X
Xchar *sockaddr_to_str(struct sockaddr *addr, int trans) {
X  struct sockaddr_in addr_in;
X  static char portname[24];
X  unsigned long int j;
X  char *a,*p;
X
X#define UC(y) (int) ((int) 0xff & (int) (y))
X  memset(&addr_in,0,sizeof(struct sockaddr_in));
X  memcpy(&addr_in,addr,sizeof(struct sockaddr_in));
X  p = (char *)&addr_in.sin_port;
X
X  if ( ! addr_in.sin_addr.s_addr || addr_in.sin_family != AF_INET ){
X    struct hostent *hp;
X    char hostname[259];
X
X#if defined(SYSV) && !defined(DYNIXPTX)
X    { struct utsname unam;
X      uname(&unam);
X      strcpy(hostname, unam.nodename); }
X#else
X    gethostname (hostname, sizeof(hostname));
X#endif
X    if (hostname[0] >= '0' && hostname[0] <= '9') {
X      addr_in.sin_addr.s_addr = inet_addr(hostname);
X    }else {
X      hp=gethostbyname(hostname);
X      if (!hp) {
X        herror ("Term: gethostbyname");
X        addr_in.sin_addr.s_addr = INADDR_ANY;
X      }else {
X        memcpy(&addr_in.sin_addr, hp->h_addr, hp->h_length);
X      }
X    }
X  };
X  j = addr_in.sin_addr.s_addr;
X  if ( trans && (! j || j == INADDR_ANY || j == inet_addr("127.0.0.1"))) 
X    j = ( remote_term_version >= 20000 ) ?
X      inet_addr("127.0.0.254") : inet_addr("127.0.0.1");
X  a = (char *)&j;
X  (void) sprintf(portname, "%u,%u,%u,%u,%u,%u",
X           UC(a[0]), UC(a[1]), UC(a[2]), UC(a[3]), UC(p[0]), UC(p[1]));
X  return portname;
X}
X
Xstruct sockaddr *sstr_to_sockaddr(char *addr, unsigned long defaultaddr){
X  return NULL;
X}
X
Xstruct sockaddr *str_to_sockaddr(char *addr, unsigned long defaultaddr){
X  static struct sockaddr_in name_in;
X  int j;
X  char port[35], *u, *v;
X
X  strncpy(port,addr,35);
X  for(j=0;j<3;j++) *strchr(port,',')='.';
X  u=strchr(port,',');
X  *u='\0';
X  v=strchr(++u,',');
X  *v='\0';
X
X  name_in.sin_addr.s_addr = inet_addr(port);
X  if ( name_in.sin_addr.s_addr == INADDR_ANY
X    || name_in.sin_addr.s_addr == inet_addr("127.0.0.1")
X    || name_in.sin_addr.s_addr == inet_addr("127.0.0.254") )
X    name_in.sin_addr.s_addr = defaultaddr;
X    
X  name_in.sin_family = AF_INET;
X  name_in.sin_port = htons((atoi(u)<<8)+atoi(++v));
X  return (struct sockaddr *)&name_in;
X}   
X
X
Xstruct sockaddr *make_sockaddr(unsigned int port, char *host,
X     unsigned long defaulthost) {
X  static struct sockaddr_in addr_in;
X  struct hostent *hp, *gethostbyname();
X  char *hostname=NULL, *colon;
X  int s=259;
X
X  memset(&addr_in,0,sizeof(addr_in)); 
X  if (host) 
X    s = (strlen(host)+1 < 259) ? 259 : strlen(host)+1;
X 
X  hostname = (char *)malloc(sizeof(char)*s);
X  *hostname = '\0';
X  if (host) {
X    strcpy(hostname,host);
X    if ((colon = strchr(hostname,':'))) *colon = '\0';
X  }else if (defaulthost != INADDR_ANY) {
X#if defined(SYSV) && !defined(DYNIXPTX)
X    { struct utsname unam;
X      uname(&unam);
X      strcpy(hostname, unam.nodename);
X    }
X#else
X    gethostname (hostname, sizeof(hostname));
X#endif
X  }
X
X  addr_in.sin_family = AF_INET;
X  if (! *hostname || ! strcmp(hostname,"localhost")
X      || ! strcmp(hostname,"remotehost")
X      || ! strcmp(hostname,"127.0.0.1")
X      || ! strcmp(hostname,"127.0.0.254") ) {
X    addr_in.sin_addr.s_addr = defaulthost;
X  }else if (hostname[0] >= '0' && hostname[0] <= '9') {
X    addr_in.sin_addr.s_addr = inet_addr(hostname);
X  }else {
X    hp=gethostbyname(hostname);
X    if (!hp) {
X      if (host) {
X	fprintf(stderr,"Term: gethostbyname ");
X        herror (hostname);
X        if (hostname) free(hostname);
X        return NULL;
X      }
X      addr_in.sin_addr.s_addr = defaulthost;
X      addr_in.sin_family = AF_INET;
X    }else {
X      memcpy(&addr_in.sin_addr, hp->h_addr, hp->h_length);
X      addr_in.sin_family = hp->h_addrtype;
X    }
X  }
X
X  if (hostname) free(hostname);
X  addr_in.sin_port = htons(port);
X  return (struct sockaddr *)&addr_in;
X}
X
X
Xchar *get_term_path(char **ptr) {
X  int len;
X  static char path[PATH_MAX];
X  static char *home_p = NULL, *share_p = NULL;
X  char *p = NULL;
X
X  path[0] = '\0';
X
X#define DEFAULT_PATH SHAREDIR ":/usr/local/lib/term:/usr/lib/term:/usr/etc:/etc"
X
X  if (!home_p && !share) {
X    *ptr = NULL;
X    p = getenv( "TERMDIR" );
X    if (!p) p = getenv( "HOME" );
X    if (!p) p = "";
X
X    home_p = (char *)malloc( sizeof(char) * (strlen(p)+strlen(DEFAULT_PATH)+2) ); 
X    sprintf(home_p,"%s:%s",p,DEFAULT_PATH);
X  }
X
X  if (!share_p && share) {
X    *ptr = NULL;
X    p = getenv( "TERMSHARE" );
X    if (!p) p = "";
X
X    share_p = (char *)malloc( sizeof(char) * (strlen(p)+strlen(DEFAULT_PATH)+2) );
X    sprintf(share_p,"%s:%s",p,DEFAULT_PATH);
X  }
X
X  if ( ! *ptr ) {
X    if (share)
X      p = share_p;
X    else
X      p = home_p;
X  }else p = strchr(*ptr, ':');
X
X  if (p) {
X    char *q;
X
X    while (*p == ':') p++;
X    len = strlen(p) + 1;
X    strncpy(path, p,(len > sizeof(path)) ? sizeof(path) : len);
X    if ((q=strchr(path,':'))) *q = '\0';
X  }
X
X  *ptr = p;
X  if (! *path)
X    return NULL;
X  return path;
X}
X
END_OF_FILE
  if test 26025 -ne `wc -c <'lib.c'`; then
    echo shar: \"'lib.c'\" unpacked with wrong size!
  fi
  # end of 'lib.c'
fi
if test -f 'link.c' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'link.c'\"
else
  echo shar: Extracting \"'link.c'\" \(47616 characters\)
  sed "s/^X//" >'link.c' <<'END_OF_FILE'
X#define I_SYS
X#define I_SOCKET
X#define I_ERRNO
X#define I_IOCTL
X#define I_STRING
X#define I_STAT
X#define I_INET
X#define I_CTYPE
X#define I_TIME
X#define I_UTIME
X#include "includes.h"
X
X#include "debug.h"
X
X
Xvoid get_term_localaddr(unsigned long);
Xchar *sockaddr_to_str(struct sockaddr *,int trans);
Xstruct sockaddr *str_to_sockaddr(char *,unsigned long);
Xstruct sockaddr *make_sockaddr(unsigned int port, char *host,
X  unsigned long defaulthost);
Xchar *term_strherror(int err);
X
X#ifdef X_DEBUG
Xstatic int x_debug = 0;
X#endif
X
Xextern do_stats(un_char *, int, struct Client *);
X
X/*
X * This modules handles multiplexing the clients onto the serial stream.
X * 
X * do_link_in() is called when there are in packets waiting, and
X * do_link_out() is called when there is something in the link_out buffer and
X * 	the serial out buffer is empty.
X */
X
X/*-----------------------------------------------------------------------*/
X/* Local function prototypes */
Xint get_data(un_char *, int);
Xvoid put_data(un_char *, int);
Xint get_client_data(struct Client *);
Xvoid put_client_data(struct Client *, int);
Xvoid init_client(struct Client *cl);
X/*-----------------------------------------------------------------------*/
X/* Data */
X
Xint curr_in_stream = -1, 
X  curr_out_stream = -1 ;
X/* we have this in the open to peek to see if compression is 
X * wanted...  croutons
X */
Xstatic struct Client *curr_client = 0;
Xint new_packet = 0;
X
X/* Convert an address to a string */
X
Xstatic char *hostent_to_str(struct hostent *addr) {
X  static char hostname[300];
X  struct in_addr *addr_in;
X
X  if(addr->h_addrtype==AF_INET){
X    addr_in = (struct in_addr *) addr->h_addr;
X    sprintf(hostname,"%lx %s",(long)ntohl(addr_in->s_addr),addr->h_name);
X  }else{
X    sprintf(hostname,"0 %s",addr->h_name);
X  };
X  return hostname;
X}
X
X
X/* To complicate matters, I require the first client then transmit version */
X/* # and later go back and transmit the first real packet */
X/*-----------------------------------------------------------------------*/
Xvoid do_link_out(void) {
X  int len;
X  static int sent_version = 0, old_len = 0;
X
X  /* Add another packet to the out packet list */
X  
X  if (p_out_num >= window_size ) {
X				/* naff off. The packet window is full. */
X				/* This is actually normal, so don't */
X				/* print a message. */
X#if 0
X    DEBUG_LINK(stderr, "Tried to do link_out with p_out_num == %d\n",
X	       p_out_num);
X#endif
X    return;
X  }
X
X  /* put some data in the packet. Get up to 'max' bytes. */
X  /* returns the length. If the length is -ve then it has been compressed */
X  
X  new_packet = 1;
X
X  if (!old_len){
X    if (remote_term_version >= 20000)
X      len = get_data(p_out[(sent_version) ? p_out_s : ((p_out_s+1)%N_PACKETS)].data,
X        packet_len);
X    else
X      len = get_data(p_out[(sent_version) ? p_out_s : ((p_out_s+1)%N_PACKETS)].data,
X        (packet_len <= out_mask) ? packet_len : out_mask);
X    SANITY(packet_len <= out_mask+1);
X  }else { 
X    len = old_len;
X    old_len = 0;
X  }
X
X  if (! len) {
X    /* All the data waiting was control data for local daemon */
X    /* We can handle this. */
X    return;
X  }
X
X  if (! sent_version) { 
X    sprintf((char *)p_out[p_out_s].data, "VERSION %lu %lx %s",
X      (unsigned long)VERSION, term_localaddr, term_localhost);
X    old_len = len;
X    len = strlen((char *)p_out[p_out_s].data) + 1;
X  }
X
X  p_out[p_out_s].timeout = 0;	/* Transmit right away */
X  p_out[p_out_s].queue = &curr_client->queue;
X  p_out[p_out_s].trans = 0;
X  p_out[p_out_s].len = (len > 0) ? len : -len;
X  p_out[p_out_s].type = (sent_version) ? ((len > 0) ? (seven_bit_out ? 2 : 0) : 1) : 0;
X  DEBUG_LINK(stderr, "%s:Added pack %d to out Q %d\n", term_server, p_out_s,
X    curr_client->number);
X  p_out_s = (p_out_s + 1) % N_PACKETS;
X
X  sent_version = 1;
X  curr_client->queue++;
X  p_out_num ++;
X}
X
X
X  	/* Here is where I handle client priorities. */
X	/* Basically I run a little lottery with each client having a # of */
X        /* tickets based on priorities.  I don't use a random # because */
X	/* gambling is illegal in most states. :-) */
X
Xint do_lottery(void) {
X  int count=0, i, j, high = -10000, low=10000, high_min, h;
X  int tickets[MAX_CLIENTS], winner;
X  static int next=0;
X
X	/* Find the lowest priority, and initialize */
X
X  high_min = packet_len;
X  for(i=0;i<MAX_CLIENTS;i++) {
X    if (clients[i].in_buff.size) {
X      j = clients[i].priority - clients[i].queue;
X      if (j > high) {
X        high_min = clients[i].in_buff.size;
X        high = j;
X      }else if (j == high || high_min > clients[i].in_buff.size) {
X        high_min = clients[i].in_buff.size;
X      } 
X      low = (low < j) ? j : low;
X    }
X    tickets[i] = 0;
X  };
X  if (high == -10000) return -1;
X
X#if 0
X	/* This is more unix like... I'm not really sure this is well suited */
X	/* For term, since it might be preferable to have processes suspend */
X	/* or nearly so when running trsh or such... */
X  if (high > 20) high = 20;
X  if (low < -20) low = -20;
X  for(h=high, count = 0; h > -20 ;--h)
X#else
X	/* The less we have queued the fairer I am.  If there is only one slot */
X	/* left we should give it to the most deserving... */
X  for(h=high, count = 0; count < window_size_max - p_out_num;--h)
X#endif
X    for(i=0;i<MAX_CLIENTS;i++) 
X      if (clients[i].in_buff.size &&
X          clients[i].priority - clients[i].queue >= h &&
X	  (high_min > packet_len - 40 || clients[i].in_buff.size <=
X             high_min + clients[i].priority + 20) ) {
X    tickets[i]++;
X    count++;
X  } 
X  if (! count) return -1;
X
X  winner = (next++ % count);
X
X	/* OK, lets search for the winning ticket */
X
X  while (winner >= 0)
X    for (i=0;i<MAX_CLIENTS;i++)
X      if (tickets[i] > 0) {
X    if (! winner--) break;
X    tickets[i]--; 
X  }
X
X	/* And the winner is client i */
X
X  return i;
X}
X
X
Xvoid do_link_in(void) {
X  /* Takes packet of the in packet list and feeds it to clients. */
X  static un_char uncomp_buff[2049];
X  int l;
X  while (p_in[p_in_e].type >= 0) {
X    /* feed data out */
X    DEBUG_LINK(stderr, "%s: Handling p %d off in Q\n", term_server, p_in_e);
X    if (p_in[p_in_e].type == 1) {	/* compressed data */
X      extern int stat_uncomp_in, stat_uncomp_out;
X      l =uncompress(p_in[p_in_e].data , p_in[p_in_e].len,
X		    uncomp_buff);
X      stat_uncomp_in += p_in[p_in_e].len;
X      stat_uncomp_out += l;
X      put_data(uncomp_buff, l);	
X    } else if (p_in[p_in_e].type == 0) {	/* uncompressed 8 bit data */
X      if (! remote_term_version) {
X        memset(term_remotehost,0,sizeof(term_remotehost));
X        if(sscanf((char *)p_in[p_in_e].data, "VERSION %lu %lx %s",
X            &remote_term_version, &term_remoteaddr, term_remotehost) < 1) {
X          remote_term_version = 10800;
X          put_data(p_in[p_in_e].data, p_in[p_in_e].len);
X        }
X        if(! remote_term_version)
X          remote_term_version = 10800;
X	if (! term_remoteaddr || term_remoteaddr == ntohl(inet_addr("127.0.0.1")))
X          term_remoteaddr = htonl(inet_addr("127.0.0.254"));
X        if (! term_remotehost[0] || !strcmp(term_remotehost,"localhost"))
X          strcpy(term_remotehost,"remotehost");
X      } else    
X        put_data(p_in[p_in_e].data, p_in[p_in_e].len);
X    } else {	/* seven bit data */
X      l = s_2_e_buff(p_in[p_in_e].data, uncomp_buff,
X		     p_in[p_in_e].len);
X      put_data(uncomp_buff, l);
X    }
X
X    p_in[p_in_e].type = -1;
X    p_in_e = (p_in_e + 1) % N_PACKETS;
X    p_in_num --;
X  }
X}
X
X/*---------------------------------------------------------------------------*/
X
X/* This is where compression will eventually get done */
X/* For now , we just get some bytes */
X/* we are compressing now. */
Xint get_data(un_char *b, int len) {
X  extern int tok_byte_width_out;
X  int i, j, k;
X  /* this is a horrible kludge, but without major reorganization, 
X   * this is the simplest way.  we need to know if the current 
X   * packet for the current client should be compressed, so we 
X   * need to know the client.  we get the first byte (which forces
X   * which client we are getting data from) and then peek and 
X   * see what that client wants. we then pass along the byte
X   * that we read.. (this is the REAL kludge).
X   * croutons.
X   */
X				/* Get a byte, so we we have a client. */
X  k = get_client_byte();
X  if ( k < 0 )			/* no data */
X  	return 0;
X				/* Now that we have a client, we can */
X				/* check to see whether we want to */
X				/* compress the data or not. */
X  if (curr_client->compress)
X    if ((j = compress(b, len-1, k)) > 0)  {
X    DEBUG_SER(stderr,"%s:compressing packet\n",term_server);
X    j = ( j + tok_byte_width_out - 1) / tok_byte_width_out;
X    return -j;
X  }
X				/* If we only have a seven bit output */
X				/* line, then we want to pack 8 bytes */
X				/* to 7 seven bit bytes. */
X  if (seven_bit_out) {
X    DEBUG_SER(stderr,"%s:sevenbit packet\n",term_server);
X    len = (len * 7) / 8;
X    b[0] = 0;
X    j = e_2_s_put(b, (unsigned) k, 0);
X    while ((j>>3) < len) {
X      if ((i = get_client_byte()) < 0) 
X	break;
X      j = e_2_s_put(b, (unsigned) i, j);
X    }
X    return (j>>3) + 1;
X  } else {			/* Else, just dump the data, we can */
X				/* handle it. */
X    b[0] = k; /* put the first byte in the array */
X    j = 1;
X  
X    while (j < len) {
X      i = get_client_byte();
X      if (i < 0) break;
X      b[j ++ ]  = i;
X    }
X  }
X  return j;
X}
X/*---------------------------------------------------------------------------*/
X
Xvoid ADD_BUFF(struct Client *clt, un_char c)
X{
X  add_to_buffer( &((clt)->out_buff), c);
X}
X
Xvoid ADD_IN_BUFF(struct Client *clt, un_char c)
X{
X  add_to_buffer( &((clt)->in_buff), c);
X}
X
Xvoid clear_buffers(struct Client *cl) {
X  cl->in_buff.size = cl->in_buff.start = cl->in_buff.end = 0;
X  cl->out_buff.size = cl->out_buff.start = cl->out_buff.end = 0;
X
X  add_to_buffer (& (cl->in_buff), 0);
X  get_from_buffer (& (cl->in_buff ) );
X
X  add_to_buffer (& (cl->out_buff), 0);
X  get_from_buffer (& (cl->out_buff ) );
X}
X
Xvoid add_ret_buff(struct Client *cl, int which, int byte)  {
X  if (!which)
X    ADD_IN_BUFF(cl, (un_char) byte);
X  else
X    put_client_data(cl, byte);
X}
X
Xvoid add_ret_buff_str(struct Client *cl, int which, char *s) {
X  int i;
X  for (i = 0; s[i];++i)
X    add_ret_buff(cl, which, (int) s[i]);
X}
X
Xvoid ret_hfail(struct Client *cl, int which, int fatal, char *p) {
X  int olderrno;
X  extern int h_errno;
X
X  olderrno = errno;
X  add_ret_buff(cl, which, SWITCH);
X  add_ret_buff(cl, which, SWITCH-3);
X  add_ret_buff(cl, which, I_FAIL);
X  if (p) {
X    add_ret_buff_str(cl, which, p);
X    add_ret_buff_str(cl, which, ": ");
X  }
X  add_ret_buff_str(cl, which, term_strherror(h_errno));
X  add_ret_buff(cl, which, 0);
X  if(!fatal){
X    errno = olderrno;
X    return;
X  }
X
X  add_ret_buff(cl, which, SWITCH);
X  add_ret_buff(cl, which, SWITCH-2);
X  add_ret_buff(cl, which, C_CLOSE);
X  add_ret_buff(cl, which, 0);
X  errno = olderrno;
X}
X
Xvoid ret_fail(struct Client *cl, int which, int fatal, char *p) {
X  int olderrno;
X
X  olderrno = errno;
X  add_ret_buff(cl, which, SWITCH);
X  add_ret_buff(cl, which, SWITCH-3);
X  add_ret_buff(cl, which, I_FAIL);
X  if (p) {
X    add_ret_buff_str(cl, which, p);
X    add_ret_buff_str(cl, which, ": ");
X  }
X  add_ret_buff_str(cl, which, strerror(olderrno));
X  add_ret_buff(cl, which, 0);
X  if(!fatal){
X    errno = olderrno;
X    return;
X  }
X
X  add_ret_buff(cl, which, SWITCH);
X  add_ret_buff(cl, which, SWITCH-2);
X  add_ret_buff(cl, which, C_CLOSE);
X  add_ret_buff(cl, which, 0);
X  errno = olderrno;
X}
X
Xvoid ret_ok(struct Client *cl, int which) {
X  add_ret_buff(cl, which, SWITCH);
X  add_ret_buff(cl, which, SWITCH-3);
X  add_ret_buff(cl, which, I_OK);
X  add_ret_buff(cl, which, 0);
X}
X
Xvoid do_control(int local , struct Client *cl, un_char *c) {
X#if defined(SYSV) && !defined(DYNIXPTX)
X  struct utsname unam;
X#endif
X  DEBUG_FP(stderr, "%s:do_control on client %d:%s:\n", term_server,
X	   cl->number, c);
X
X  switch(c[0]) {
X  case C_NAME:
X    DEBUG_FP(stderr, "%s:c_name\n", term_server);
X    sprintf(cl->name, "%s", (char *)(c+1));
X    break;
X  case C_PUTENV:
X    DEBUG_FP(stderr, "%s:c_putenv\n", term_server);
X    if (strchr((char *)(c+1),'=')) term_putenv((char *)(c+1));
X    break;
X  case C_CLOSE:		/* Close the file descriptor and the client */
X    DEBUG_FP(stderr, "%s:c_close\n", term_server);
X    if (!isdigit((char) c[1])) {
X      if (cl->state == 1)
X        cl->state = 3;		/* Go to flush buffers and close. */
X    }else {
X      int k;
X      k = atoi((char *)c + 1);
X      if (k <  0 || k >= MAX_CLIENTS) break;
X      if (clients[k].state == 1)
X        clients[k].state = 3;
X    }
X    break;
X  case C_CLCLOSE:	/* Just close the file descriptor */
X    DEBUG_FP(stderr, "%s:c_clclose %s\n", term_server,(char *)c+1);
X    if (!isdigit((char) c[1])) {
X      if (cl->state == 1)
X        cl->state = 4;  /* This closes the file descriptor, */
X			/* but leaves the client active... */
X    }else {
X      int k;
X      k = atoi((char *)c + 1);
X      if (k <  0 || k >= MAX_CLIENTS) {
X        break;
X      }
X      if (clients[k].state == 1)
X        clients[k].state = 4;
X    }
X    break;
X  case C_DUMB:
X    DEBUG_FP(stderr, "%s:c_dumb\n", term_server);
X    cl->type &= ~T_SMART;
X    cl->dump_count = 0;
X    break;
X  case C_DUMP:
X  case C_DUMP_OLD:
X    DEBUG_FP(stderr, "%s: c_dump %d\n", term_server, atoi((char *) (c+1)));
X    if (c[0] == C_DUMP_OLD) ret_ok(cl, local);
X    cl->type &= ~T_SMART;
X    cl->dump_count = atol((char *)c+1)+1;
X    break;
X  case C_CHMOD: /* There is no return value, so we can speed things up */
X    DEBUG_FP(stderr,"%s: c_chmod %s\n",term_server, (char *)c+1);
X    {
X      int k;
X      long atime, mtime;
X      char *a;
X
X      atime = 0;
X      mtime = 0;
X      a = strchr((char *)c+1,'\n');
X      if (a != NULL && sscanf((char *)c+1,"%o %ld %ld", &k, &atime,
X           &mtime) < 1) {
X        DEBUG_FP(stderr,"%s: c_chmod invalid arguments\n",term_server);
X        break;
X      }
X      if (chmod(++a,k) < 0) {
X        DEBUG_FP(stderr, "%s: chmod %s failed: %s\n",term_server, a,
X          strerror(errno));
X        break;
X      }
X
X      { 
X        long now;
X        struct utimbuf utb;
X
X        now = (long)time(NULL);
X        utb.actime = (time_t) (atime + now);
X        utb.modtime = (time_t) (mtime + now);
X        if (utime(a,&utb) < 0) { 
X          DEBUG_FP(stderr, "%s: utimes failed: %s\n",term_server,
X            strerror(errno));
X          break;
X        }
X      }
X    }
X    break;
X  case C_OPEN:
X    DEBUG_FP(stderr,"%s:got c_open %s\n", term_server, (char *)c+1);
X  case C_UPLOAD:
X    if (c[0] == C_UPLOAD)
X      DEBUG_FP(stderr,"%s:got c_upload %s\n", term_server, (char *)c+1);
X  case C_DOWNLOAD:
X    if (c[0] == C_DOWNLOAD)
X      DEBUG_FP(stderr,"%s:got c_download %s\n", term_server, (char *)c+1);
X    {
X      long l = 0;
X      int mode = 0666;
X      char *a;
X
X      a = strchr((char *)c+1,'\n');
X      if (a != NULL) {
X        if (sscanf((char *)c+1,"%ld %o", &l, &mode) < 1) {
X          ret_fail(cl,local,1, "open() invalid options");
X          DEBUG_FP(stderr,"%s: c_open invalid options\n", term_server);
X          break;
X        }
X      }else a = (char *)c;
X
X      if (cl->fd >=0) close(cl->fd);
X
X      if (c[0] == C_OPEN) {
X        chmod(++a,0600);
X        cl->fd = open(a, O_RDWR | O_CREAT, mode);
X        if (cl->fd > 0) chmod(a,mode);
X      }else if (c[0] == C_UPLOAD) {
X        unlink(++a);
X        cl->fd = open(a, O_WRONLY | O_CREAT | O_TRUNC, mode);
X        if (cl->fd > 0) chmod(a,mode); /* This probably isn't necessary. */
X      }else {
X        cl->fd = open(++a, O_RDONLY);
X      }
X
X      if (cl->fd < 0) {
X        ret_fail(cl,local,1, "open() failed");
X        DEBUG_FP(stderr, "%s: open failed: %s\n",term_server,strerror(errno));
X        break;
X      }
X      if (l != 0 && lseek(cl->fd, (off_t)l, 0) == -1) {
X        ret_fail(cl,local, 1, "lseek failed");
X        DEBUG_FP(stderr, "%s: lseek failed: %s\n",term_server,
X	  strerror(errno));
X        close(cl->fd);
X        cl->fd = -1;
X        break;
X      }
X
X    }
X    cl->state = 1;
X    if (c[0] != C_DOWNLOAD)  {
X      cl->type= T_WRFILE;
X      cl->cl_type = CL_FILE;
X      ret_ok(cl,local);
X      break;
X    }
X	/* We allow C_DOWNLOAD to fall through to C_STAT */
X
X  case C_STAT:
X    if (c[0] == C_STAT)
X      DEBUG_FP(stderr, "%s: c_stat %s\n", term_server, (char *)(c+1));
X    {
X      struct stat st;
X      int type;
X      int permissions;
X      long now;
X      char *a, buff[64];
X
X      a = strchr((char *)c+1,'\n');
X      if (a == NULL) a = (char *)c;
X      now = (long)time(NULL);
X      if (stat(++a, &st)< 0) {
X	ret_fail(cl, local, 0, "stat() failed");
X	DEBUG_FP(stderr, "%s: stat() failed\n", term_server);
X        if(c[0] == C_DOWNLOAD) {
X          close(cl->fd);
X          cl->fd = -1;
X        }
X	break;
X      }
X      add_ret_buff(cl, local,SWITCH);
X      add_ret_buff(cl, local,SWITCH-3);
X      add_ret_buff(cl, local,I_OK);
X				/* Get type */
X      if (S_ISREG(st.st_mode)) type = 0;
X      else if (S_ISDIR(st.st_mode)) type = 1;
X      else type = 2;
X				/* Now get permissions. */
X      permissions = (int) (st.st_mode & 511);
X      if (getuid() == st.st_uid)
X	permissions >>= 6;
X      else if (getgid() == st.st_gid)
X	permissions >>= 3;
X      permissions &= 07;
X
X      sprintf(buff, "%ld %d %d %ld %ld %o",
X	(long)st.st_size, type, permissions,
X	(long)st.st_atime - now, (long)st.st_mtime - now,
X	(int)st.st_mode);
X      add_ret_buff_str(cl, local, buff);
X      add_ret_buff(cl, local,0);
X
X      if (c[0] == C_DOWNLOAD)  {
X        cl->type= T_RDFILE;
X        cl->cl_type = CL_FILE;
X        cl->dump_count = (long)st.st_size + cl->in_buff.size;
X      }
X      break;
X    }
X    
X  case C_UNLINK:
X    DEBUG_FP(stderr, "%s:c_unlink\n", term_server);
X    if (unlink(c+1)) {
X      ret_fail(cl, local, 1, "unlink failed");
X      DEBUG_FP(stderr, "%s: unlink failed: %s\n", term_server,
X	strerror(errno));
X    } else
X      ret_ok(cl, local);
X    break;
X
X  case C_PTYEXEC:
X  case C_EXEC:
X    if (cl->fd>=0) close(cl->fd);
X    DEBUG_FP(stderr, "%s: %s on client %d (%s) \n", term_server,
X	     c[0]==C_PTYEXEC?"C_PTYEXEC":"C_EXEC", cl->number, c+1); 
X    if (rshtype > 0) cl->fd = -5;
X    else {
X#ifndef NO_PTYEXEC
X      if (c[0] == C_PTYEXEC)
X        cl->fd = open_pty((char *)(c + 1));
X      else 
X#endif
X        cl->fd = open_socket((char *)(c + 1));
X    }
X    if (cl->fd < 0) {
X      char *p;
X      DEBUG_FP(stderr, "%s: failed to open client: error: %d\n",
X	       term_server, cl->fd); 
X
X      switch (cl->fd) {
X      case -1: p = "Couldn't get pty"; break;
X      case -2: p = "fchmod() failed"; break;
X      case -3: p = "fork() failed"; break;
X      case -4: p = "S_Pipe() failed"; break;
X      case -5: p = "Permission denied"; break;
X      default: p = "Unknown failure"; break;
X      }
X      errno = 0;
X      ret_fail(cl, local, 1, p);
X      break;
X    }
X    DEBUG_FP(stderr, "%s: opened client\n", term_server);
X    cl->type = T_WRFILE | T_RDFILE;
X    cl->cl_type = CL_CHILD;
X    cl->state = 1;
X    cl->pid = pty_pid;
X    DEBUG_FP(stderr, "%s: got pid %d\n", term_server, pty_pid);
X    ret_ok(cl, local);
X    break;
X
X  case C_BIND:
X    DEBUG_FP(stderr, "%s: c_bind %s\n", term_server, (char *)(c+1));
X    {
X      unsigned int port;
X      int s;
X      port = atoi((char *) (c+1));
X      s = bind_tcp(port);
X      if (s < 0) {
X	errno = 0;
X	ret_fail(cl, local , 1, "bind_tcp() failed");
X	DEBUG_FP(stderr, "%s:bind_tcp failed (%d): %s\n", term_server, port,
X	  strerror(errno));
X      }
X      set_nonblock(s);
X      if (cl->fd>=0) close(cl->fd);
X      cl->fd = s;
X      cl->cl_type = CL_BOUND;
X      cl->type = T_RDFILE | T_WRFILE;
X      cl->state = 1;
X      ret_ok(cl, local);
X    }
X    break;
X  case C_ACCEPT:
X    {
X      struct sockaddr_in addr_in;
X
X      int ain = sizeof(addr_in);
X      int s;
X
X      cl->type |= T_RDFILE;
X
X      DEBUG_FP(stderr, "%s: c_accept %s\n", term_server, (char *)(c+1));
X				/* Get the socket to try and accept() */
X				/* on. */
X      s = atoi((char *) (c+1));
X				/* Error checking..  */
X      if (s <  0 || s >= MAX_CLIENTS || clients[s].fd < 0 ||
X	   clients[s].cl_type != CL_BOUND) {
X	errno = 0;
X	ret_fail(cl, local, 1, "Client out of range");
X        DEBUG_FP(stderr,"Client out of range\n");
X	break;
X      }else /* The bound port can accept more connections... */
X        clients[s].type |= T_RDFILE | T_WRFILE;  
X
X				/* try the actual accept(). */
X      s = accept(clients[s].fd , (struct sockaddr *) &addr_in, &ain);
X      if (s < 0) {
X	ret_fail(cl, local, 1, "Accept failed");
X        DEBUG_FP(stderr, "%s: accept failed: %s\n", term_server, strerror(errno));
X	break;
X      }
X
X      set_nonblock(s);
X      add_ret_buff(cl, local,SWITCH);
X      add_ret_buff(cl, local,SWITCH-3);
X      add_ret_buff(cl, local,I_OK);
X      add_ret_buff_str(cl,local,sockaddr_to_str((struct sockaddr *)&addr_in,1));
X      add_ret_buff(cl, local,0);
X
X      DEBUG_FP(stderr,"%s:got c_accept\n", term_server);
X      if (cl->fd>=0) close(cl->fd);
X      cl->fd = s;
X      cl->cl_type = CL_SOCKET;
X      DEBUG_FP(stderr, "%s:name is %s\n", term_server, (char *)(c+1));
X      cl->type = T_RDFILE | T_WRFILE;
X      cl->state = 1;
X    }
X    break;
X#ifndef X_STREAMS_PIPE
X  case C_X_SERVER:
X#ifdef SVR3
X    {
X      int s;
X      struct hostent *hostaddr;
X      char *display;
X      char host[80];
X      int  screen = 0;
X      struct sockaddr_in sock_in;
X      int i;
X
X      /*
X       * This code will use the environment variable DISPLAY that was in
X       * effect at the time "term" was started to direct all X connections
X       * to.   It only works for INET domain sockets
X       */
X      display = getenv("DISPLAY");
X      if (display == NULL)
X	display = (char *)(c+1);
X      for (i = 0; display[i] && display[i] != ':'; i++) {
X	host[i] = display[i];
X      }
X      host[i] = '\000';
X      if (host[i] == ':')
X	screen = atoi(&host[i+1]);
X      
X      hostaddr = gethostbyname(host);
X      
X      if (hostaddr == NULL) {
X	ret_fail(cl, local, 1, "Failed to find DISPLAY host");
X	break;
X      }
X
X      if ((s = socket(AF_INET, SOCK_STREAM, PF_INET)) < 0) {
X	perror("Failed to allocate socket for X display");
X	ret_fail(cl, local, 1, "socket allocation failed");
X	break;
X      }
X      
X      sock_in.sin_family = AF_INET;
X      bcopy((char *) hostaddr->h_addr_list[0], (char *) &sock_in.sin_addr,
X	    hostaddr->h_length);
X      sock_in.sin_port = htons(6000+screen);
X
X      fprintf(stderr, "Attempting connection to host %d.%d.%d.%d\n",
X	      sock_in.sin_addr.s_addr & 0xff,
X	      (sock_in.sin_addr.s_addr >> 8) & 0xff,
X	      (sock_in.sin_addr.s_addr >> 16) & 0xff,
X	      (sock_in.sin_addr.s_addr >> 24) & 0xff);
X      if (connect(s, &sock_in, sizeof(sock_in))) {
X	perror("Connection attempt to X server failed");
X	ret_fail(cl, local, 1, "Failed to connect to display");
X	break;
X      }
X      fprintf(stderr, "Connection was successful\n");
X
X      set_nonblock(s);
X      DEBUG_FP(stderr, "%s:got c_x_socket\n", term_server);
X      if (cl->fd>=0) close(cl->fd);
X      cl->fd = s;
X      cl->cl_type = CL_SOCKET;
X      DEBUG_FP(stderr, "%s:name is %s\n", term_server, (char *)(c+1));
X      cl->type = T_RDFILE | T_WRFILE;
X      cl->state = 1;
X      ret_ok(cl, local);
X    }
X    break;
X#endif
X#endif
X  case C_SOCKET:
X    DEBUG_FP(stderr, "%s: c_socket %s\n", term_server, (char *)(c+1));
X    {
X
X      int s;
X      
X      s = open_unix((char *)(c+1));
X      if (s < 0) {
X	ret_fail(cl, local, 1, "open_unix() failed");
X	DEBUG_FP(stderr, "%s:open_unix failed: %s\n", term_server,
X	  strerror(errno));
X	break;
X      }
X
X      set_nonblock(s);
X      DEBUG_FP(stderr,"%s:got c_socket\n", term_server);
X      if (cl->fd>=0) close(cl->fd);
X      cl->fd = s;
X      cl->cl_type = CL_SOCKET;
X      DEBUG_FP(stderr, "%s:name is %s\n", term_server, (char *)(c+1));
X      cl->type = T_RDFILE | T_WRFILE;
X      cl->state = 1;
X      ret_ok(cl, local);
X    }
X    break;
X#ifdef X_STREAMS_PIPE
X  case C_X_SERVER:
X    DEBUG_FP(stderr, "%s: c_x_server %s\n", term_server, (char *)(c+1));
X    {
X
X      int s;
X      int display_num;
X      char *display, *screen;
X
X      /* check DISPLAY variable for screen number */
X
X      display = getenv("DISPLAY");
X      if (display == 0)
X	display = ":0";
X
X      screen = strchr(display, ':');
X      if (screen != 0)
X	display_num = atoi((char *)(screen + 1));
X      else
X	display_num = 0;
X
X      s = MakeStreamPipeConnection(display_num);
X      if (s < 0) {
X	ret_fail(cl, local, 1, "X connection failed");
X	DEBUG_FP(stderr, "%s: x connection failed: %s\n", term_server,
X	  strerror(errno));
X	break;
X      }
X
X      set_nonblock(s);
X      DEBUG_FP(stderr,"%s:got c_x_server\n", term_server);
X      if (cl->fd>=0) close(cl->fd);
X      cl->fd = s;
X      cl->cl_type = CL_SPIPE;
X      DEBUG_FP(stderr, "%s:name is %s\n", term_server, (char *)(c+1));
X      cl->type = T_RDFILE | T_WRFILE;
X      cl->state = 1;
X      ret_ok(cl, local);
X    }
X    break;
X#endif
X  case C_PORT:
X    DEBUG_FP(stderr, "%s: c_port %s\n", term_server, (char *)(c+1));
X    {
X      struct sockaddr *addr;
X      char *hostname = NULL;
X      int s;
X      unsigned int port;
X      char *colon;
X      
X      if ((s = socket(AF_INET, SOCK_STREAM, 0 )) < 0) {
X	ret_fail(cl, local, 1, "Socket() failed");
X        DEBUG_FP(stderr, "%s: Socket() failed: %s\n", term_server, 
X	  strerror(errno));
X	break;
X      }
X
X      colon = strchr((char *)c+1,':');
X      port=(unsigned int) atoi((colon) ? (colon+1) : ((char *)c+1));
X      hostname=(colon) ? ((char *)c+1) : NULL;
X
X      if (!(addr=make_sockaddr(port,hostname,inet_addr("127.0.0.1")))) {
X	errno = 0;
X        ret_fail(cl, local, 1, "Can't get local address");
X        DEBUG_FP(stderr,"%s: Can't get local address\n", term_server);
X	close(s);
X        break;
X      }
X 
X#ifndef USE_CONNBLOCK
X      /* Set nonblock mode before connecting so connect() returns right away */
X      set_nonblock(s);
X#endif
X
X      DEBUG_FP(stderr, "%s: connecting to to %s\n", term_server,  sockaddr_to_str(addr,0));
X      if (connect(s,addr,sizeof(struct sockaddr))<0) {
X#ifndef USE_CONNBLOCK
X	if (errno != EINPROGRESS && errno != ERR_BLOCK) {
X#endif
X	  ret_fail(cl,local, 1, "connect() failed");
X          DEBUG_FP(stderr, "%s: connect() failed: %s\n", term_server,
X	    strerror(errno));
X	  close(s);
X	  break;
X#ifndef USE_CONNBLOCK
X	}
X#endif
X      }
X      
X#ifdef USE_CONNBLOCK
X      set_nonblock(s);
X#endif
X
X      DEBUG_FP(stderr,"%s:got c_port\n", term_server);
X      if (cl->fd>=0) close(cl->fd);
X      cl->fd = s;
X      cl->cl_type = CL_SOCKET;
X      cl->type = T_RDFILE | T_WRFILE;
X#ifndef USE_CONNBLOCK
X      cl->state = 5;
X      cl->timeout = current_time + 20*30;	/* 30-second connect timeout */
X#else
X      cl->state = 1;
X      ret_ok(cl, local);
X#endif
X    }
X    break;
X  case C_PRIORITY_OLD:
X  case C_PRIORITY:
X    DEBUG_FP(stderr, "%s: c_priority %d\n", term_server,
X      atoi((char *) (c+1)));
X    cl->priority = atoi((char *) (c+1));
X    if (c[0] == C_PRIORITY_OLD) ret_ok(cl, local);
X    break;
X  case C_COMPRESS:
X    DEBUG_FP(stderr, "%s: c_compress %c\n", term_server, c[1]);
X
X    switch(c[1]) {
X    case 'y':	/* yes */
X    case 'c':	/* compress */
X    case 'Y':	/* caps too */
X    case 'C':   
X    case 1: 	/* true */
X    case '1':	/* in ascii */
X      cl->compress = 1;
X      ret_ok(cl, local);
X      break;
X    case 'n':	/* no */
X    case 'u':	/* uncompress */
X    case 'r':	/* raw */
X    case 'N':	/* caps too */
X    case 'U':	
X    case 'R':
X    case 0:  	/* false */
X    case '0':  	/* in ascii */
X      cl->compress = 0;
X      ret_ok(cl, local);
X      break;
X    default:
X      errno = 0;
X      ret_fail(cl, local, 0, "Invalid argument");
X      DEBUG_FP(stderr,"%s: invalid argument\n", term_server);
X      break;
X    }
X    break;
X
X  case C_STATS: 
X    {
X      int opt;
X      un_char ret[2000];
X/*      extern do_stats(un_char *, int, struct Client *); */
X
X      DEBUG_FP(stderr, "%s:c_stats\n", term_server);
X      opt = atoi((char *) (c+1));
X      add_ret_buff(cl, local, SWITCH);
X      add_ret_buff(cl, local, SWITCH-3);
X      add_ret_buff(cl, local, I_OK);
X
X      do_stats(ret, opt, cl);
X
X      add_ret_buff_str(cl, local, (char *)ret);
X      add_ret_buff(cl, local, 0);
X      break;
X    }
X  case C_SEEK:
X  {
X    long l;
X    DEBUG_FP(stderr, "%s:c_seek %s\n", term_server, c+1);
X    if(sscanf((char *)(c+1),"%ld",&l)<1) l=0;
X    if (lseek(cl->fd, (off_t)l, 0) < (off_t)0) {
X      ret_fail(cl, local, 0, "lseek() failed");
X      DEBUG_FP(stderr, "%s:c_seek failed\n",term_server);
X      break;
X    }
X    ret_ok(cl, local);
X    break;
X  }
X  case C_RESIZE_OLD:
X  case C_RESIZE:
X    DEBUG_FP(stderr, "%s:c_resize %s\n", term_server, c+1);
X    {
X#ifdef USE_SIGWINCH
X      void do_resize(int number, int rows, int cols, int ypixels, int xpixels);
X      int number;
X      int rows, cols, ypixels, xpixels;
X      sscanf((char *) (c+1), "%d %d %d %d %d",
X				&number, &rows, &cols, &ypixels, &xpixels);
X      do_resize(number, rows, cols, ypixels, xpixels);
X#endif	/* USE_SIGWINCH */
X    }
X    if (c[0] == C_RESIZE_OLD) ret_ok(cl, local);
X    break;
X
X  case C_BINDN: /* ftp special -ot */
X    DEBUG_FP(stderr, "%s: c_bindn %s\n", term_server,c+1);
X    {
X      int s, k;
X      struct sockaddr_in addr_in;
X      
X      s = bind_tcp((unsigned int) atoi((char *)(c+1)));
X      if (s < 0) {
X	errno = 0;
X        ret_fail(cl, local , 1, "bind_tcp() failed");
X        DEBUG_FP(stderr, "%s:bind_tcp failed\n", term_server);
X        break;
X      }
X      k=sizeof(addr_in);
X      if (getsockname(s, (struct sockaddr *)&addr_in, &k) < 0) {
X        ret_fail(cl, local, 1, "getsockname() failed");
X        DEBUG_FP(stderr, "%s:getsockname failed: %s\n", term_server,
X	  strerror(errno));
X        break;
X      }
X      
X      DEBUG_FP(stderr, "%s:sockname returned %lx %x\n", term_server,
X             (long)ntohl(addr_in.sin_addr.s_addr), ntohs(addr_in.sin_port));
X      ret_ok(cl, local);
X
X      add_ret_buff_str(cl,local,sockaddr_to_str((struct sockaddr *)&addr_in,1));
X      add_ret_buff(cl, local,0);
X
X      set_nonblock(s);
X      if (cl->fd>=0) close(cl->fd);
X      cl->fd = s;
X      cl->cl_type = CL_BOUND;
X      cl->type = T_RDFILE | T_WRFILE;
X      cl->state = 1;
X    }
X    break;
X
X  case C_GETSOCKNAME: /* Return the local sockname -warlord */
X    DEBUG_FP(stderr, "%s: c_getsockname %s\n", term_server,(c+1));
X    {
X      int s, k, kt;
X      struct sockaddr addr;
X     
X      if(! *(c+1)){
X        s = cl->fd;
X        kt= cl->cl_type;
X      } else {
X        k = atoi((char *)c+1);
X        if (k <  0 || k >= MAX_CLIENTS) {
X	  errno = 0;
X     	  ret_fail(cl, local, 1, "Client out of range");
X          DEBUG_FP(stderr, "%s: client out of range\n", term_server);
X	  break;
X        };
X        s=clients[k].fd;
X        kt=clients[k].cl_type;
X      };
X
X      if ( s < 0 ) {
X	errno = 0;
X        ret_fail(cl, local, 1, "Client closed");
X        DEBUG_FP(stderr, "%s:client closed\n", term_server);
X        break;
X      } 
X				/* Error checking..  */
X      if (kt != CL_BOUND && kt != CL_SOCKET) {
X	errno = 0;
X        ret_fail(cl, local, 1, "Invalid client type");
X        DEBUG_FP(stderr, "%s:invalid client type\n", term_server);
X        break;
X      }
X      
X      k=sizeof(addr);
X      if (getsockname(s, &addr, &k) < 0) {
X        ret_fail(cl, local, 1, "getsockname() failed");
X        DEBUG_FP(stderr, "%s:getsockname failed: %s\n", term_server,
X	  strerror(errno));
X        break;
X      }
X      
X      /* Convert this to a string */
X      
X      /* Set up the return buffer */
X      add_ret_buff(cl, local, SWITCH);
X      add_ret_buff(cl, local, SWITCH-3);
X      add_ret_buff(cl, local, I_OK);
X      add_ret_buff_str(cl, local, sockaddr_to_str(&addr,1));
X      add_ret_buff(cl, local,0);
X      
X      DEBUG_FP(stderr, "%s:sockname returned\n", term_server);
X    }
X    break;
X
X  case C_GETPEERNAME: /* Return the peername -warlord */
X    DEBUG_FP(stderr, "%s: c_getpeername\n", term_server);
X    {
X      int s, k, kt;
X      struct sockaddr addr;
X      
X      if(! *(c+1)){
X        s = cl->fd;
X        kt = cl->cl_type;
X      } else {
X        k = atoi((char *)c+1);
X        if (k <  0 || k >= MAX_CLIENTS) {
X	  errno = 0;
X     	  ret_fail(cl, local, 1, "Client out of range");
X          DEBUG_FP(stderr, "%s: client out of range\n", term_server);
X	  break;
X        };
X        s=clients[k].fd;
X        kt=clients[k].cl_type;
X      };
X      
X      if (kt != CL_SOCKET) {
X	errno = 0;
X        ret_fail(cl, local, 1, "Invalid client type");
X        DEBUG_FP(stderr, "%s:invalid client type\n", term_server);
X        break;
X      }
X      
X      k=sizeof(addr);
X      if (getpeername(s, &addr, &k) < 0) {
X        ret_fail(cl, local, 1, "getpeername() failed");
X        DEBUG_FP(stderr, "%s: getpeername failed: %s\n", term_server,
X	  strerror(errno));
X        break;
X      }
X      
X      /* Set up the return buffer */
X      add_ret_buff(cl, local, SWITCH);
X      add_ret_buff(cl, local, SWITCH-3);
X      add_ret_buff(cl, local, I_OK);
X      add_ret_buff_str(cl, local, sockaddr_to_str(&addr,1));
X      add_ret_buff(cl, local,0);
X      
X      DEBUG_FP(stderr, "%s:peername returned\n", term_server);
X    }
X    break;
X
X  case C_GETHOSTNAME:   /* Canonical hostname */
X    DEBUG_FP(stderr, "%s: c_gethostname %s\n", term_server,
X             ((*(c+1)) ? (char *) (c+1) : "<none>"));
X    {
X      struct hostent *hp=NULL;
X      char hostname[259];
X     
X      if (*(c+1)) {
X        strcpy(hostname, (char *) (c+1));
X      } else {
X#if defined(SYSV) && !defined(DYNIXPTX)
X        uname(&unam);
X        strcpy(hostname, unam.nodename);
X#else
X        gethostname(hostname, sizeof(hostname));
X#endif /* SYSV */
X      }
X     
X      if (isdigit(*hostname)) {
X        unsigned long k;
X        k=inet_addr(hostname); 
X        hp=gethostbyaddr((char *)&k, sizeof(k), AF_INET);
X      }
X      if (!hp) { 
X        hp=gethostbyname(hostname);
X      }
X      if (!hp) {
X	extern int h_errno;
X        ret_hfail(cl, local, 1, "gethostbyname() failed");
X        DEBUG_FP(stderr, "Term: gethostbyname() failed: %s\n",
X          term_strherror(h_errno));
X        break;
X      }
X      
X      add_ret_buff(cl, local, SWITCH);
X      add_ret_buff(cl, local, SWITCH-3);
X      add_ret_buff(cl, local, I_OK);
X      add_ret_buff_str(cl, local, hostent_to_str(hp));
X      add_ret_buff(cl, local,0);
X    }
X    break;
X    
X  case C_BINDS: /* One time tcp term socket */
X    DEBUG_FP(stderr, "%s: c_binds\n", term_server);
X    {
X      int k;
X      struct sockaddr_in addr_in;
X      char port[10];
X     
X      if(onetime_term_socket>=0) close(onetime_term_socket);
X      onetime_term_socket = -1;
X 
X      onetime_term_socket = bind_tcp(0);
X      if (onetime_term_socket < 0) {
X	errno = 0;
X        ret_fail(cl, local , 1, "bind_tcp() failed");
X        DEBUG_FP(stderr, "%s:bind_tcp failed\n", term_server);
X        break;
X      }
X      k=sizeof(addr_in);
X      if (getsockname(onetime_term_socket, (struct sockaddr *)&addr_in, &k) < 0) {
X        ret_fail(cl, local, 1, "getsockname() failed");
X        DEBUG_FP(stderr, "%s: getsockname failed: %s\n", term_server,
X	  strerror(errno));
X        close(onetime_term_socket);
X        onetime_term_socket = -1;
X        break;
X      }
X      
X      DEBUG_FP(stderr, "%s:sockname returned %lu %u\n", term_server,
X             (long)ntohl(addr_in.sin_addr.s_addr), ntohs(addr_in.sin_port));
X      ret_ok(cl, local);
X      (void) sprintf(port, "%d", ntohs(addr_in.sin_port));
X
X      add_ret_buff(cl, local,SWITCH);
X      add_ret_buff(cl, local,SWITCH-3);
X      add_ret_buff(cl, local,I_OK);
X      
X      add_ret_buff_str(cl, local, port);
X      add_ret_buff(cl, local,0);
X    }
X    break;
X
X
X  case C_USOCK:
X    DEBUG_FP(stderr, "%s: c_usock %s\n", term_server, (char *)c+1);
X    {
X      int s,k,udp_type;
X
X      if(sscanf((char *)c+1,"%d %d",&k,&udp_type) < 2) {
X	errno = 0;
X        ret_fail(cl, local, 1, "Insufficient argc");
X        DEBUG_UDP(stderr, "%s:insufficient argc\n", term_server);
X        break;
X      }else if (k <  0 || k >= MAX_CLIENTS){
X	errno = 0;
X        ret_fail(cl, local, 1, "Client out of range");
X        DEBUG_FP(stderr,"client out of range\n");
X        break;
X      }else if( (s = socket(AF_INET,SOCK_DGRAM,0)) < 0) {
X        ret_fail(cl,local,0,"dgram socket() failed");      /* 0 ? is it fatal? */
X        DEBUG_UDP(stderr, "%s: dgram socket failed: %s\n", term_server,
X	  strerror(errno));
X        break;
X      }
X
X      if( clients[k].fd >= 0) close(clients[k].fd);
X
X      clients[k].fd = s;
X      clients[k].type = T_WRFILE | T_RDFILE | T_UDP;
X      clients[k].cl_type = CL_SOCKET;
X      clients[k].state = 1;
X      clients[k].udp_type = udp_type;
X      clients[k].udp_size = 0;
X
X      set_nonblock(clients[k].fd);
X
X      clients[k].udp_host = 0;
X      clients[k].udp_port = 0;
X      clients[k].parent = cl->number;
X      ret_ok(cl,local);
X    }
X    break;
X
X  case C_UBIND:
X    DEBUG_FP(stderr, "%s: c_ubind %s\n", term_server, (char *)c+1);
X    {
X      int k;
X      unsigned int port=0;
X      struct sockaddr *addr;
X
X      sscanf((char *)c+1,"%d %u",&k,&port);
X
X      DEBUG_FP(stderr,"%s:- client %d, port %u.\n", term_server, k, port);
X
X/* hmmm.. maybe do some more sanity checks? is T_UDP? */
X/* Naa, leave it general so people can use if for other things. */
X
X      if (k <  0 || k >= MAX_CLIENTS || clients[k].fd < 0) {
X	errno = 0;
X	ret_fail(cl, local, 1, "Client out of range");
X        DEBUG_FP(stderr,"client out of range\n");
X	break;
X      }
X
X      if (!(addr=make_sockaddr(port,NULL,INADDR_ANY))) {
X	errno = 0;
X        ret_fail(cl, local, 1, "Can't get local address");
X        DEBUG_FP(stderr,"can't get local address\n");
X        break;
X      }
X
X      if( bind(clients[k].fd,addr,sizeof(struct sockaddr)) < 0) {
X        ret_fail(cl,local,0,"bind() failed");
X        DEBUG_FP(stderr,"term: bind() failed: %s: %s\n", (char *)c+1,
X          strerror(errno));
X        break;
X      }
X      ret_ok(cl,local);
X    }
X    break;
X
X  case C_UDPSET:
X    DEBUG_FP(stderr, "c_udpset\n %s\n",(char *) c+1);
X    {
X      int k;
X      char *ptr;
X      struct sockaddr_in *addr_in;
X
X      k = atoi((char *)c+1);
X      if (k < 0 || k >= MAX_CLIENTS) {
X	errno = 0;
X        ret_fail(cl,local,1,"client out of range");
X        DEBUG_FP(stderr,"client out of range\n");
X        break;
X      }
X
X      ptr = strchr((char *)c+1,':');
X      if (ptr == NULL) { 
X	errno = 0;
X        ret_fail(cl,local,1,"No address specified");
X        DEBUG_FP(stderr,"no address specified\n");
X        break;
X      } 
X      
X      addr_in = (struct sockaddr_in *) str_to_sockaddr(++ptr,
X        inet_addr("127.0.0.1"));
X
X      if (addr_in == NULL) {
X        ret_fail(cl,local,1,"Address not recognized");
X        DEBUG_FP(stderr,"address not recognized\n");
X        break;
X      } 
X
X      clients[k].udp_host = ntohl(addr_in->sin_addr.s_addr);
X      clients[k].udp_port = ntohs(addr_in->sin_port);
X
X      DEBUG_FP(stderr, "c_udpset %lx %x\n",clients[k].udp_host,clients[k].udp_port);
X
X      ret_ok(cl,local);
X    }
X    break;
X
X  case C_QUIT:
X    DEBUG_FP(stderr, "%s: c_quit %s\n", term_server, (char *)c+1);
X    if (c[1] == '\0')
X      do_shutdown = -1;
X    else {
X      do_shutdown = atoi((char *)c+1);	/* 1 == no hangup, 2 == force hangup */
X      if (do_shutdown < 1)
X        do_shutdown = -1;		/* -1 == take the default action */
X    }
X    break;
X
X  default:
X    break;
X  } /* switch */
X} /* function */
X
Xvoid init_client(struct Client *cl) {
X  extern int compressing; /* the default from main */
X  cl->type = T_RDFILE | T_WRFILE;
X  cl->udp_type = 0;
X  cl->udp_size = 0;
X  cl->dump_count = 0;
X  cl->cl_type = CL_SOCKET;
X  cl->state = 1;
X  cl->compress = compressing;
X  cl->c_state = 0;
X  cl->number = (cl - &clients[0]);
X  cl->priority = 0;		/* default priority. Higher is better. */
X  cl->queue = 0;	
X  cl->name[0] = 0;
X  cl->parent = -1;
X  if (cl->fd > 0) {
X    close(cl->fd);
X    cl->fd = -1;
X  } 
X  clear_buffers(cl);
X  DEBUG_LINK(stderr, "Init client %d\n", cl->number);
X}
X
X/*---------------------------------------------------------------------------*/
X/* Returns next client to read. Will be beefed up later to support priorities*/
X/* A client with a priority of n will get n/(sum) of the packets available   */
X/* maybe :) */
X
Xstruct Client * get_next_client(void) { 
X  int i, j=0;
X				/* Check to see if any of the clients */
X				/* are closing. This gets priority. */
X  for (i = 0; i < MAX_CLIENTS;++i)
X    if (clients[i].state == 2) {
X      DEBUG_STATE(stderr, "get_n_c ret cl %d\n", i);
X      return &clients[i];
X    }
X
X  if ((j = do_lottery()) < 0) return 0;	/* Nobody was ready */
X
X  return &clients[j];
X}
X
Xint get_client_data(struct Client *cl) {
X  int i;			/* If nothing ready, signal that. */
X  SANITY(cl);
X  if (!cl->in_buff.size) 
X    return -1;
X  SANITY(cl->in_buff.end <= cl->in_buff.alloced);
X  SANITY(cl->in_buff.end >= 0);
X  SANITY(cl->in_buff.size >= 0);
X  SANITY(cl->in_buff.size <= cl->in_buff.alloced);
X
X				/* get the next byte from the buffer.*/
X  
X  
X  i = cl->in_buff.data[cl->in_buff.end++];
X  if (cl->in_buff.end == cl->in_buff.alloced)	/* Wrap the buffer */
X				/* round if we have */
X				/* hit the end. */
X    cl->in_buff.end = 0;
X  cl->in_buff.size --;		/* Update count of bytes left in buffer. */
X
X  SANITY(cl->dump_count >= 0);
X  if (cl->dump_count) {		/* If we are currently dumping, update */
X				/* the dump count, and go smart if we */
X				/* have finished. */
X    if (!--cl->dump_count && cl->cl_type != CL_FILE)
X      cl->type |= T_SMART;
X  }
X
X  DEBUG_STATE(stderr, "\tgcd:%d\n", i);
X  return i;
X}
X
Xvoid put_client_data(struct Client *cl, int i) {
X  while (1) {
X    DEBUG_STATE(stderr, "p_c_d: %d: state %d i %d c_len %d\n", 
X		cl->number, cl->c_state, i, cl->c_len);
X    switch (cl->c_state) {
X    case 0:
X      if (i == SWITCH) {
X	cl->c_state = 1;
X	return;
X      }
X      
X      ADD_BUFF(cl, (un_char) i);
X      return;
X    case 1:
X      if (i == SWITCH) {
X	ADD_BUFF(cl, (un_char) i);
X	cl->c_state = 0;
X	return ;
X      }
X      cl->c_len = 0; /* yes. We do want to throw this byte away */
X      /* It is just a remote control message flag */
X      if (i == SWITCH - 3) {	/* It is a result message. */
X	if (cl->type & T_SMART) {
X	  ADD_BUFF(cl, (un_char) SWITCH);
X	  ADD_BUFF(cl, SWITCH-3);
X	}
X	cl->c_state = 3;
X      }else {
X	cl->c_state = 2;
X      }
X      return;
X    case 2:
X      /* XXX Skip commands that are too long.  This is not very elegant. */
X      if (cl->c_len < sizeof(cl->control)-1)
X        cl->control[cl->c_len++] = i;
X      if (i) return;
X      if (cl->c_len >= sizeof(cl->control)-1) {
X        WARNING(stderr, "%s:command skipped, too long: \"%.30s...\"\n",
X            term_server, cl->control);
X    	errno = E2BIG;
X        ret_fail(cl, 0, 1, "command skipped");
X      }else {
X        do_control(0, cl , cl->control);
X      }
X      cl->c_state = 0;
X      return;
X    case 3:
X      if (cl->type & T_SMART) ADD_BUFF(cl, (un_char) i);
X      if (i) return;
X      cl->c_state = 0;
X      return;
X    default:
X      cl->c_state = 0;
X      break;
X    }
X  }
X}
X
X
X
X/* Return the next byte that should go down the serial link */
X/* Another bloody finite state machine. ;) */
X/* This was a bitch to write. Sigh. More things than I thought needed */
X/* to be handled. And it still isn't perfect. :( */
X
Xint get_client_byte() {
X  static int state = 0,
X  next, max;
X  
X  static char control[255];
X  struct Client *cl;
X  int i;
X
X  while (1) {
X    DEBUG_STATE(stderr, "get_c_b: state %d next %d max %d cl %d\n", state,
X		next, max, !curr_client ? -1 : curr_client->number);
X
X    switch(state) {
X    case 0: /* looking for new client */
X      new_packet = 0;
X      cl = get_next_client();
X      if (cl == 0) 
X	return -1;
X      
X      if (!cl->in_buff.size && cl->state == 2) { /* closing down */
X				/* We have emptied the buffers, so */
X				/* just tell the remote end that , and */
X				/* finish off. */
X	DEBUG_FP(stderr, "%s:sending c_close\n", term_server);
X	/* ++kay: should be state 3, not -1 */
X	cl->state = 3;
X	state = 4;
X	sprintf(control, "%c%c%c%c%c%c", SWITCH, cl->number + SWITCH + 1,
X		SWITCH, SWITCH - 2, C_CLOSE, 0);
X	curr_client = cl;
X	next = 0;
X	max = 6;
X	break;
X      }
X      
X      if (cl != curr_client) {
X	curr_client = cl;
X	state = 1; 
X	return SWITCH;
X      }
X      state = 2;
X      break;    
X    case 1:
X      state = 2;
X      return curr_client->number + SWITCH + 1;
X      break;
X    case 2:
X				/* If we are a new packet, then check */
X				/* to see if there is a new client */
X				/* with a greater probability. */
X      if (new_packet) {
X	new_packet = 0;
X	state = 0;
X	break;
X      }
X
X      i = get_client_data(curr_client);
X      if (i == SWITCH) {
X	if (!(curr_client->type & T_SMART)) {
X	  state = 4;
X	  max = 1; next = 0;
X	  control[0] = SWITCH;	
X	  return SWITCH;
X	}
X	state = 3;
X	break;
X      } else if (i < 0) {
X	state = 0;
X	break;
X      }
X      {
X	extern int stat_cooked_out;
X	++stat_cooked_out;
X      }
X      return i;
X      break;
X    case 3:
X      i = get_client_data(curr_client);
X      if (i < 0)
X	return -1;
X      
X      if (i == SWITCH) {
X	/* It is an escaped escape code */
X	state = 4;	
X 
X	max = 1; next = 0;
X	return SWITCH;
X      }
X      /* ok. We have some sort of control message */
X      if ( i  > SWITCH ) {
X	/* Hmm. It is trying to switch streams on its own. welllll. ok. */
X	/* we'll let it. Note that is can only reliably insert 1 byte at */
X	/* a time */
X	control[0] = (i-SWITCH-1<MAX_CLIENTS) ? SWITCH-1 : i;
X	next  = 0;
X	max = 1;
X	state = 4;
X	return SWITCH;
X	break;
X      }
X      if ( i != SWITCH - 1) {
X	/* stuff for remote. Just pass it thru */
X	/* might not be SWITCH - 2, but if it isn't, we don't want */
X	/* to know. ;) */
X	control[0] = i;
X	next = 0; max = 1;
X	state = 4;
X	return SWITCH;
X	break;
X      }
X      /* ok. a real control message for us. */
X      state = 5;
X      next = 0;
X      break;
X    case 4:
X      if (next + 1 == max) 
X	state = 2;
X      return control[next++];
X      break;
X    case 5: /* A local control message */
X      /* note that there is a nasty bit here. All other streams block while */
X      /* we are waiting for this control message. I thought about */
X      /* programming around this but decided that it was too messy. */
X   
X      /* note that most local control messages don't make much sense. */
X      i = get_client_data(curr_client);
X      if (i < 0)
X	return -1;
X      
X      control[next++] = i;
X				/* If this isn't the end of the */
X				/* message, keep going.. */
X      if (i)
X	break;
X
X      do_control(1, curr_client, (un_char *) control);
X      state = 2;
X      break;
X    } /* switch */
X  } /* while */
X}
X
X/*----------------------------------------------------------------------*/
X/* Transfers the next 'len' bytes from the link, to clients.  Note that */
X/* we handle control information here. */
Xvoid put_data(un_char *b, int len) {
X  static struct Client *curr_client = 0;
X  static int state = 0;
X  int i, d;
X  
X  i = 0;
X  while (i < len) {
X    DEBUG_STATE(stderr, "%s:put_d: s %d, cl %d d %d\n", term_server, state, 
X		!curr_client ? 0 : curr_client->number, b[i]);
X    switch(state) {
X    case 0:
X      d = b[i++];
X      if (d == SWITCH) {
X	state = 1;
X	break;
X      }
X      /* ok. Just put data to current client */
X      if (!curr_client)
X	break;
X      put_client_data(curr_client, d);
X      break;
X    case 1:
X      d = b[i++];
X      /* checked for escaped escape */
X      if (d == SWITCH) {
X	if (curr_client) {
X	  put_client_data(curr_client, d);
X	  put_client_data(curr_client, d);
X	}
X       	state = 0;
X	break;
X      }
X      /* check for stream switch */
X      if (d > SWITCH && d - SWITCH - 1 < MAX_CLIENTS ) {
X	curr_client = &clients[d - SWITCH - 1];
X	if (curr_client->state < 0) 
X	  init_client(curr_client);
X	DEBUG_LINK(stderr, "%s:stream switch to %d\n", term_server,
X          d - SWITCH - 1);
X	state = 0;
X	break;
X      }
X      if (curr_client) {
X	put_client_data(curr_client, SWITCH);
X	put_client_data(curr_client, d);
X      }
X      state = 0;
X      break;
X    default:
X      state = 0;
X      break;
X    } /* switch */
X  } /* while */
X} /* function */
X
END_OF_FILE
  if test 47616 -ne `wc -c <'link.c'`; then
    echo shar: \"'link.c'\" unpacked with wrong size!
  fi
  # end of 'link.c'
fi
echo shar: End of archive 4 \(of 6\).
cp /dev/null ark4isdone
MISSING=""
for I in 1 2 3 4 5 6 ; do
    if test ! -f ark${I}isdone ; then
	MISSING="${MISSING} ${I}"
    fi
done
if test "${MISSING}" = "" ; then
    echo You have unpacked all 6 archives.
    rm -f ark[1-9]isdone
else
    echo You still must unpack the following archives:
    echo "        " ${MISSING}
fi
exit 0
