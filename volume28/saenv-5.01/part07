Newsgroups: comp.sources.unix
From: rca@queernet.org (Bob Arnold)
Subject: v28i153: saenv-5.01 - SysAd Environment (OS_Research/Backup) Suite, Part07/07
References: <1.784011877.15815@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: rca@queernet.org (Bob Arnold)
Posting-Number: Volume 28, Issue 153
Archive-Name: saenv-5.01/part07

#!/bin/sh
# this is saenv.07 (part 7 of saenv5.01)
# do not concatenate these parts, unpack them in order with /bin/sh
# file src/backup/bkp.site continued
#
if test ! -r _shar_seq_.tmp; then
	echo 'Please unpack part 1 first!'
	exit 1
fi
(read Scheck
 if test "$Scheck" != 7; then
	echo Please unpack part "$Scheck" next!
	exit 1
 else
	exit 0
 fi
) < _shar_seq_.tmp || exit 1
if test ! -f _shar_wnt_.tmp; then
	echo 'x - still skipping src/backup/bkp.site'
else
echo 'x - continuing file src/backup/bkp.site'
sed 's/^X//' << 'SHAR_EOF' >> 'src/backup/bkp.site' &&
X#'
X
X## PROBTO - define $probto, which is who we send problem reports to
X# We'd like to know about problems.  The question is who do you tell?
X# Sites with only two sysadmins might send email to both of them
X# by doing something like this:
X# 
X#	PROBTO='probto="sysad1@herhost sysad2@hishost"'
X#
X# Sites with a larger sysadmin crew might have a more complicated
X# decision making process.  At Ingres, we email problem reports to queues
X# in our 'calltrack' problem-tracking Ingres application.  Which queue
X# we mail it to depends on what we're doing and what OS we're running on:
X#	PROBTO='
X#	case $mode$OS_S in
X#	get*|verify*)   probto="callt-3@$SAHOST"  ;;	# probs to backup queue
X#	*ULTRIX)        probto="callt-16@$SAHOST" ;;	# probs to Ultrix queue
X#	*)              probto="callt-12@$SAHOST" ;;	# probs to UNIX queue
X#	esac
X#	'
X#
X# Unless PROBTO redefines it, $probto is set to 'root' (default).
X#
X# Uncomment this line and enter a list of valid mail recipients
X# PROBTO='probto="root"'	# (default "root")
X
X## DOPOSTDEFS - Do after definitions
X# This MACRO is sourced after simple variable and MACROs are defined,
X# but before any output goes to the screen or command arguments are processed.
X# Sites may want to override some of the initial assumptions, or perhaps
X# take care of some early housekeeping like sending an email message
X# whenever the backup script starts.
X#
X# Uncomment this line and change as necessary
X# DOPOSTDEFS=''
X
X# ============================================================================
X##
X##	End of bkp.site
X##
SHAR_EOF
echo 'File src/backup/bkp.site is complete' &&
chmod 0644 src/backup/bkp.site ||
echo 'restore of src/backup/bkp.site failed'
Wc_c="`wc -c < 'src/backup/bkp.site'`"
test 7496 -eq "$Wc_c" ||
	echo 'src/backup/bkp.site: original size 7496, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= src/backup/bkp.opers ==============
if test -f 'src/backup/bkp.opers' -a X"$1" != X"-c"; then
	echo 'x - skipping src/backup/bkp.opers (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting src/backup/bkp.opers (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'src/backup/bkp.opers' &&
X#initls	login		fullname
Xcron	cron		automated by cron
Xjd	jdoe		jane doe
Xringo	ringo		ringo starr
SHAR_EOF
chmod 0644 src/backup/bkp.opers ||
echo 'restore of src/backup/bkp.opers failed'
Wc_c="`wc -c < 'src/backup/bkp.opers'`"
test 96 -eq "$Wc_c" ||
	echo 'src/backup/bkp.opers: original size 96, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= src/backup/bkp.media ==============
if test -f 'src/backup/bkp.media' -a X"$1" != X"-c"; then
	echo 'x - skipping src/backup/bkp.media (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting src/backup/bkp.media (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'src/backup/bkp.media' &&
X# bkp.media - device data for some/all backup devices at your site
X#
X# Put the master version of this file in $SAHOST:~sa/dist/bkp.media.
X# It is distributed by $SAHOST:~sa/bin/inst-alldisks.
X# It is searched by the 'alldisks' backup script.
X#
X# The first time you fill this out, you will want to replace Vendor/OS names
X# with hostnames that have tape drives at your site.  They are shown this
X# way here for your convenience, but 'alldisks' will not understand them
X# if you leave them that way.  Make sure you copy the appropriate entries
X# and change them for the real hostnames of your machines.
X#
X# Device names vary between UNIXs and between systems, as you know,
X# so make sure your device names are correct.  The 'alldisks'
X# script will try to complain if they are wrong, but it's much safer to
X# get your rewind/norewind device names correct the first time.
X# (Lots of operating systems are shown below, but many of these entries
X# have been taken from machines with sometimes unusual device names.)
X#
X# EXAMPLE: If you have a Sun running SunOS called "jumper",
X# which has an Exabyte 8200 with rewind/norewind device names
X# /dev/rst0 and /dev/nrst0, then copy this entry:
X#SunOS	video0	xx	400000	rst1		nrst1		126 165000 E82
X# Then make the new entry like this (without the hashmark '#'):
X#jumper	video0	xx	400000	rst0		nrst0		126 165000 E82
X#
X# If the fourth field (the number of 5k blocks per tape) says "xx",
X# it means we've probably never tried to do a cpio backup to such a
X# device for that OS/Vendor.  It should work if you fill in an appropriate
X# number, but without testing who knows?
X#
X# The Rules:
X# 1) Comment lines begin with a hashmark (#).
X# 2) Fields are seperated by white space.  The last column (for QICformat,
X#    cpio options, and dump options) can have several space-seperated options.
X# 3) All fields must be filled in (true since alldisks script version 2.07).
X# 4) The table is sorted in alphabetical order by hostname for convenience,
X#    and each device on each host must have it's own line/entry.
X# 5) Different "media alias" names for the same "devices" are accepted.
X#    (See "video/video0" example for bushdog below.)
X# 6) Identical "media alias" names the for same "host" are a Bad Idea.  The
X#    'alldisks' script gets confused by two "tape0" entries for the same host.
X# 7) The third field is unused as of alldisks 4.23, but put "xx" in it anyway.
X# 8) The "# of 5k blocks per tape" field must be true decimal.  For example,
X#    use "10000" not "10k".
X# 9) The fourth and fifth columns for device names should be the real OS device
X#    names, not the Data Center standard device names.
X#10) The last column may contain several space-seperated fields.  It
X#    holds a) dump options, b) cpio options, and/or QICformat/Exabyte info.
X#    The QICformat info in the last column is FYI only; the script explicitly
X#    ignores it.  "alldisks" script figures out what each option means
X#    according to what it looks like:
X#       1000|1600|3200|6250|6670|23000)			dump "d" density
X#	4|9|18)						dump "t" tracks
X#	126|[1-9][02468])				dump "b" blocking factor
X#	330000|165000|[1-9][02][05]|[1-9][0-9][02][05])	dump "s" size option
X#	c|C)						dump "c|C" cart option
X#	C)						cpio "C" cart option
X#	QIC*)						ignored
X#	E8[25])						ignored
X#	DAT1|DAT2)					ignored
X#    The alldisks script builds the dump/cpio key from this column.
X#
X# The Ingres Data Center has standard device names, e.g. /dev/video0/8500nr.
X# But we want the OS device names (not DC standard device names) because:
X# a) this is a handy place to document the real OS device names
X# b) the DC device names don't do you any good when you want to know which
X# device drivers were used to make the tapes, e.g. was it "rrt0" (third party
X# Ciprico drivers) or "rmt0" (Sun drivers).
X#
X# We can construct dump, rdump, restore, and rrestore commands like this:
X#	/etc/dump $level$key $device $options $fsname
X#	/etc/rdump $level$key $remhost:$device $options $fsname
X#	/etc/restore if $device
X#	/etc/rrestore if $remhost:$device
X#
X###############################################################################
X# Tape capacity notes and info
X#
X# 1) The capacity of a 9track tape at a given density varies due to:
X#	a) manufacturer's minimum/maximum interrecord gap for the drive
X#	b) device drivers use different interrecord gaps if they are streaming
X#          or not
X#	c) temperature (1%-2%)
X#
X# 2) It's a Good Idea to use 12500 ftpi (Frame Tracks Per Inch) carts
X# in all cartridge drives at QIC150 density or less
X#
X# 3) The highest "-b" blocking factor available with most tape drives is 126,
X# which is equivalent to 63k.
X# 
X# Dump defaults and other info from SunOS 4.x dump(8) man page and
X# other sources appear below.
X# 
X#                                                dump option
X#                                       =============================   # of 5k
X#                              capacity    "-b"   "-t"   "-s"    "-d"    blocks
X# media                           using   block   cart   size density       per
X# type  description                dump factor* tracks (feet)   (BPI)      tape
X# ----- ------------------------- ===== ------- ------ ------ -------  ========
X# tk50  TK50                        70M?     ??     NA     NA    6670?
X# tk70  TK70                        90M?     ??     NA     NA    6670?
X# tape  9track 2400' 1/2"           30M      32     NA   2300    1600    6000**
X# tape  9track 2400' 1/2"          150M      32     NA   2300    6250   30000
X# cart  QIC11   600' 1/4"           25M      ??      4    425    1000    5000
X# cart  QIC24   600' 1/4"           60M      ??      9    425    1000   12000
X# cart  QIC120  600' 1/4"          120M      ??     NA     NA      NA   24000
X# cart  QIC150  600' 1/4"          150M      ??     18    600    1000   30000
X# dat   DAT1              60m 4mm 1200M      ??     ??     ??      ??  200000
X# dat   DAT2              90m 4mm 2000M      ??     ??     ??      ??  400000
X# video E82 Exabyte 8200 112m 8mm 2200M     126     NA 165000      NA  400000
X# video E85 Exabyte 8500 112m 8mm 5000M     126     NA 330000      NA 1000000
X# video E82 Exabyte 8200 112m 8mm 2200M     126     NA   6000   54000  400000
X# video E85 Exabyte 8500 112m 8mm 5000M     126     NA  13000   54000 1000000
X# diskette (dump option "-D")     1.44M***   NA     NA     NA      NA
X#
X# *   Blocking factor shown here in 512-character blocks.  However versions
X#     of BSD dump from some vendors e.g. Pyramid and HP, require that this
X#     be specified in 1k blocks.  Also, Pyramid's blocking factor must be
X#     an even number, e.g. "62".  Values shown here are common but not
X#     definitely not universal.  See your OS manuals for more info.
X# **  based on actual tests with CDC (avg 6950) and Cipher (avg 7380) drives
X# *** (Actually 1422 blocks, with one cylinder reserved for bad block info.)
X#
X###############################################################################
X#
X# Reminder:	Fields are separated by white space (spaces or tabs).
X#		All fields must be filled in.
X#
X#			# of 5k	OS		OS
X#        		blocks	name for	name for	QICformat/
X# host-	media		per	rewind		no-rewind	cpio options/
X# name	alias	unused	tape	device		device		dump options
X#------	-------	-------	-------	--------------	--------------- --------------
X#AIX2.1	cart0	xx	30000	rmt0		rmt4		QIC150
X#AIX2.1	cart1	xx	8000	rmt1		rmt5		QIC24
X## AIX3.X "video0" example uses bummer  512byte blocks, so it can hold only 1Gig
X## AIX3.X "video1" example uses proper 1024byte blocks, so it can hold full 2Gig
X#AIX3.X	cart0	xx	30000	rmt0		rmt0.1		QIC150
X#AIX3.X	video0	xx	200000	rmt1		rmt1.1		E82
X#AIX3.X	video1	xx	400000	rmt0		rmt0.1		E82
X#ATTSVR3	cart0	xx	12000	rmt/c1t2d0s0	rmt/c1t2d0s0n	QIC60
X#ATTSVR3	cart0	xx	24000	rmt/c1t2d0s1	rmt/c1t2d0s1n	QIC120
X#ATTSVR3	tape0	xx	6600	rmt/0m		rmt/0mn
X#Arix	cart0	xx	30000	rmt0		rmt1		QIC150
X#Auspex	video0	xx	xx	rast4		nrast4		100 141000 11500
X#Auspex	video1	xx	xx	rast9		nrast9		100 141000 11500
X#B.O.S.	cart0	xx	xx	rct/0		rct/0n		C QIC150
X#B.O.S.	cart0	xx	xx	rct/0		rct/0n		C QIC150
X#BSDI	video0	xx	400000	rmt0		nrmt0		165000 E82
X## Convergent's cart says QIC150 but can only hold 125Meg :-(
X#Convergent cart0 xx	25000	rmt0		rmt4		QIC150
X#ConvexOS tape0	xx	25000	rmt/0h		rmt/0hn		6250
X#ConvexOS tape1	xx	25000	rmt16		rmt20		6250
X#DG/UX	cart0	xx	xx	rmt/0		rmt/0n		M QIC150
X#DG/UX	dat0	xx	400000	rmt/1		rmt/1n		M DAT2
X#Dynix	cart0	xx	xx	rts0		rts8		1000 600 QIC24
X#Dynix	tape0	xx	25000	rmt10		rmt14		6250 2000
X#Dynix	video0	xx	xx	rmt/xt0		rmt/xt0n	E82 165000
X#Dynix/ptx cart0 xx	8000	rmt/tm0		rmt/tm0n	QIC24
X#Dynix/ptx cart0 xx	8000	rSA/ctape0	rSA/ctape0n	1000 600 QIC24
X#Dynix/ptx video0 xx	xx	rmt/tx0		rmt/tx0n	126 165000
X#Dynix/ptx video0 xx	xx	rmt/xt0		rmt/xt0n	165000
X#HP-UX	dat0	xx	200000	rmt/0m		rmt/0mn		70000 DAT1
X#HP-UX	dat1	xx	400000	rmt/1m		rmt/1mn		140000 DAT2
X#HP-UX	tape0	xx	25000	rmt/0h		rmt/0hn		6250
X#Linux	dat0	xx	400000	st0		nst0		DAT2
X#Motorola cart0	xx	25000	rSA/ctap	rSA/ctape	QIC150
X#NCRSVR3 cart0	xx	24000	rstp/34ny	rstp/34nn	QIC120
X#NCRSVR3 video0	xx	400000	rmt/0ny		rmt/0nn		E82
X#NCRSVR4 cart0	xx	64000	rmt/c1t1d0s0ny	rmt/c1t1d0s0nn	QIC320
X#NCRSVR4 video0	xx	400000	rmt/c11t3d0s0ny	rmt/c11t3d0s0nn	126 165000
X#OSx	tape0	xx	24000	iop/rptape00h	iop/rptape00hn	6250 2200
X#OSx	tape0	xx	25000	iop0/rptape000h iop0/rptape000hn 6250
X#OSx	video0	xx	xx	iop/rptape01	iop/rptape01n	E82 62 165000
X#SCO	cart0	xx	8000	rct0		nrct0		QIC24
X#Solaris video0	xx	xx	rmt/0		rmt/0n		126 165000 E82
X#Solaris video1	xx	xx	rmt/9		rmt/9n		126 165000 E85
X#Solbourne video0 xx	xx	rst1		nrst1		126 165000 E82
X#Stardent cart0	xx	22000	rmt/c0d6h	rmt/c0d6hn	QIC150
X#SunOS	cart0	xx	22000	rst0		nrst0		18 600 1000 c QIC150
X#SunOS	tape0	xx	25000	rmt0		nrmt0		6250
X#SunOS	video0	xx	400000	rst1		nrst1		126 165000 E82
X#SunOS	video1	xx	1000000	rst8		nrst8		E85 126 330000
X## TI's cpio option "-T" would be nice for readability on other machines, but
X## TI can't read multi-vol archives if written using "-T".
X#TI_SVR3	cart	xx	12000	rqt/0h		rqt/0hn		QIC60
X#UMIPS	cart0	xx	24000	rmt/Q120-0	rmt/Q120n-0	23000 600 QIC120
X#UTS	tape0	xx	xx	rmt0		nrmt0		1600
X#UTS	tape1	xx	xx	rmt1		nrmt1		6250
X#UTS2.1	tape0	xx	24000	rmt/181h	rmt/181hn	6250
X#Ultrix	tape0	xx	25000	rmt2h		nrmt2h		6250 2200
X#Ultrix	tk0	xx	xx	rmt1h		nrmt1h		TK50 6670
X#Ultrix	video0	xx	xx	rmt1h		nrmt1h		165000 E82
X#Ultrix	video1	xx	xx	rmt1h		nrmt1h		330000 E85
X#
X# Reminder:	Fields are separated by white space (spaces or tabs are fine).
X#		All fields must be filled in.  See "The Rules" above.
X#
SHAR_EOF
chmod 0644 src/backup/bkp.media ||
echo 'restore of src/backup/bkp.media failed'
Wc_c="`wc -c < 'src/backup/bkp.media'`"
test 10530 -eq "$Wc_c" ||
	echo 'src/backup/bkp.media: original size 10530, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= src/backup/backup.dd ==============
if test -f 'src/backup/backup.dd' -a X"$1" != X"-c"; then
	echo 'x - skipping src/backup/backup.dd (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting src/backup/backup.dd (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'src/backup/backup.dd' &&
X:
X# backup.dd - written by Bob Arnold
X
X# handles unusual dd outputs from several vendors (see end of script)
X# requires $LHOST and $MHOST environment variables
X# handles writing to remote hosts (requires $RSH_C from environment)
X# exits with non-zero exit status if
X#	a) no data is written
X#	b) interrupted
X#	c) we get an unexpected output message from "dd"
X
X#set -x
X
Xtrap 'rm -f \$t1 \$t2 \$t3 ; exit 1' 1 2 3 15
X
Xpr=`basename $0`
Xargs="$*"
Xt1=/tmp/bkpddt1.$$
Xt2=/tmp/bkpddt2.$$
Xt3=/tmp/bkpddt3.$$
X
X# need LHOST and MHOST, can live without BDDSHOW
Xif test -z "$LHOST" ; then
X	echo "$pr: \$LHOST not set in environment" 1>&2
X	exit 1
Xelse
X	lhost="$LHOST"
Xfi
Xif test -z "$MHOST" ; then
X	echo "$pr: \$MHOST not set in environment" 1>&2
X	exit 1
Xelse
X	mhost="$MHOST"
Xfi
X
Xif test $lhost = $mhost ; then
X	if test "$BDDSHOW" = true ; then
X		echo "$pr: dd $args 2> $t1" > /dev/tty
X	fi
X	dd $args 2> $t1
X	ddstat=$?
Xelse
X	if test -z "$RSH_C" ; then
X		echo "$pr: \$RSH_C not set in environment" 1>&2
X		exit 1
X	# else assume we have permission to run commands on $host
X	else
X		if test "$BDDSHOW" = true ; then
X			echo "$pr: $RSH_C $mhost dd $args '&& echo ok' \> $t3 2> $t1" > /dev/tty
X		fi
X		# must create $t3 on the remote host; otherwise it will
X		# merge with dd's standard out which is a bummer!
X		$RSH_C $mhost dd $args '&& echo ok' \> $t3 2> $t1
X		if test "`$RSH_C $mhost cat $t3 2>&1`" = ok ; then
X			ddstat=0
X		else
X			ddstat=1
X		fi
X		$RSH_C $mhost /bin/rm -f $t3
X	fi
Xfi
X
X# massage data only if we have exactly two lines and $ddstat is 0
Xif test `wc -l < $t1` -ne 2 -o $ddstat -ne 0 ; then
X	cp $t1 $t2
Xelse
X	# first sed takes care of AIX 3.0 and newer versions too
X	# awk deals with TI
X	# second sed deals with TI and CCI SysV
X	sed -e 's/^.* \([0-9][0-9]*+[0-9][0-9]*.*\)\.$/\1/' $t1 \
X	| awk '
X		{
X			if ($0 ~ /^dd [a-z ]* [0-9]* full blocks and [0-9]* partial blocks *$/) {
X				if ($2=="read") {io="in"}
X				else {io="out"}
X				print $3 "+" $7, $9, io
X			} else {
X				print
X			}
X		}' \
X	| sed -e 's/block/record/' > $t2
Xfi
X
X# now that we have a reasonable output, see if we have a problem
Xif test $ddstat -ne 0 ; then
X	exitstat=$ddstat
Xelif egrep '0+0 records out' $t2 > /dev/null ; then
X	exitstat=1
Xelif test `egrep '^[0-9]+\+[0-9]+ records [io][nu]t* *$' $t2 | wc -l` -ne 2 ; then
X	exitstat=1
Xelse
X	exitstat=0
Xfi
X
X# put (possibly massaged) dd output on stderr, cleanup, and exit before comments
Xcat $t2 1>&2
Xrm -f $t1 $t2 $t3
Xexit $exitstat
X
X# Sample dd outputs that we have to massage to conform to normal dd output
X#
X# Normal dd output
X# 0+0 records in
X# 0+0 records out
X#
X# AIX 3.0 and 3.1 dd output has extra "dd: 0511-040 " and trailing ".".
X# dd: 0511-040 1+0 records in.
X# dd: 0511-041 1+0 records out.
X#
X# AIX 3.2 dd output has extra "dd: " and trailing ".".
X# dd: 1+0 records in.
X# dd: 1+0 records out.
X#
X# TI dd output (user-friendly but experienced-sysadmin- and script-hostile)
X# dd read  21194 full blocks and 0 partial blocks
X# dd wrote 2119 full blocks and 1 partial blocks
X#
X# CCI Sys V uses "blocks" instead of "records"
X# 0+0 blocks in
X# 0+0 blocks out
X#
X# End of sample dd outputs
X
X# version number parallels changes in alldisks script
X# version 4.03 Apr  5 1990 Bob Arnold created
X# version 4.03 Apr 24 1991
X# version 4.12 Jul 11 1991
X# version 4.14 Aug 09 1991
X# version 4.15 Aug 19 1991 put BDDSHOW output on /dev/tty, fix exitstat for remote hosts
X# version 4.17 Sep 20 1991 quieter attempt to read $t3 on remote host
X# version 4.29 Jul  1 1992 handle 3.2 AIX dd message format, remove tick hack
X# version 4.30 Jul 10 1992 bug fix for 3.2 AIX dd message format handling
SHAR_EOF
chmod 0755 src/backup/backup.dd ||
echo 'restore of src/backup/backup.dd failed'
Wc_c="`wc -c < 'src/backup/backup.dd'`"
test 3592 -eq "$Wc_c" ||
	echo 'src/backup/backup.dd: original size 3592, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= src/backup/backup.c ==============
if test -f 'src/backup/backup.c' -a X"$1" != X"-c"; then
	echo 'x - skipping src/backup/backup.c (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting src/backup/backup.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'src/backup/backup.c' &&
X#include <stdio.h>
X
X#define	SCRIPT_P	"/home/backup/backup.sh"
X
Xmain(argc,argv)
Xint argc;
Xchar *argv[];
X{
X	char str[BUFSIZ];
X	int status;
X
X	/* run as root */
X	setuid(0);
X
X	/* call backup.sh script with arguments */
X	sprintf(str,SCRIPT_P);
X	while ( --argc > 0 ) {
X		sprintf(str,"%s %s",str,*++argv);
X	}
X	sprintf(str,"%s \n",str);
X	system(str);
X}
SHAR_EOF
chmod 0644 src/backup/backup.c ||
echo 'restore of src/backup/backup.c failed'
Wc_c="`wc -c < 'src/backup/backup.c'`"
test 344 -eq "$Wc_c" ||
	echo 'src/backup/backup.c: original size 344, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= src/backup/gen.bkp.media ==============
if test -f 'src/backup/gen.bkp.media' -a X"$1" != X"-c"; then
	echo 'x - skipping src/backup/gen.bkp.media (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting src/backup/gen.bkp.media (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'src/backup/gen.bkp.media' &&
X:
X# gen.bkp.media - generate a bkp.media entry for a machine
X
X. /etc/dist/sahead	# as always
X
Xecho "$pr: This script will help you create an entry"
Xecho "$pr: in '$DSRC/bkp.media' (the master bkp.media file)."
Xecho $ECHOPRE "$pr: Press <return> to contine: "$ECHOSUF
Xread remain_in_light
X
Xecho "$pr: Which machine you want to create a bkp.media entry for?"
Xecho $ECHOPRE "$pr: Enter the name [default $HOST]: "$ECHOSUF
Xread host
Xif test -z "$host" ; then
X	host=$HOST
Xfi
X
Xecho "$pr: What is the rewind device name for your tape drive on $host?"
Xecho $ECHOPRE "$pr: Enter the name: "$ECHOSUF
Xread ans
Xrewans=$ans
Xrewdev=`echo $ans | sed -e 's=^/dev/=='`
X
Xecho "$pr: What is the no-rewind device name for your tape drive on $host?"
Xecho $ECHOPRE "$pr: Enter the name: "$ECHOSUF
Xread ans
Xnorewdev=`echo $ans | sed -e 's=^/dev/=='`
X
Xecho "$pr: What kind of tape drive is $host:$rewans? "
Xecho "$pr: Your choices are:"
XTAPETYPES='1.	cart (QIC cart drive)
X2.	dat (4mm)
X3.	tape (9track)
X4.	tk50/70 (DEC proprietary)
X5.	video (8mm Exabyte)'
Xecho "$TAPETYPES"
Xecho $ECHOPRE "$pr: Enter the number of your choice [12345]: "$ECHOSUF
Xread ans
X
X# media alias
Xcase $ans in
X1)	malias=cart0  ;;
X2)	malias=dat0   ;;
X3)	malias=tape0  ;;
X4)	malias=tk0    ;;
X5)	malias=video0 ;;
Xesac
X
X# $h is "human name"
X# $c is capacity (in 5k blocks)
X# $d is dump arguments
Xcase $malias in
Xcart0)
X	echo "$pr: What type of cart drive is it:"
X	echo $ECHOPRE "$pr: [qic24, qic60, qic120, or qic150]? "$ECHOSUF
X	read type
X	type=`echo $type | tr a-z A-Z`
X;;
Xdat0)
X	echo $ECHOPRE "$pr: Is this DAT drive a 1Gig or 2Gig drive? [1 or 2] "$ECHOSUF
X	read size
X	type=DAT$size
X;;
Xvideo0)
X	echo $ECHOPRE "$pr: Is this exabyte a 2Gig or 5Gig video drive? [2 or 5] "$ECHOSUF
X	read size
X	type=E8$size
X;;
Xtape0)
X	echo $ECHOPRE "$pr: What is the density of this 9track drive? [6250 or 1600] "$ECHOSUF
X	read dens
X	type=$dens
X;;
Xtk0)
X	echo "$pr:  Oooog.  I'm sorry.  I don't have solid data on tk50/tk70's."
X	echo $ECHOPRE "$pr: Is this a TK50 or tk70 [tk50 or tk70] "$ECHOSUF
X	read type
X;;
Xesac
X
Xif test "$host" = "$HOST" ; then
X	os=$OS_S
X	if test -n "$DUMP_P" ; then
X		bprog=dump
X	else
X		bprog=cpio
X	fi
Xelse
X	echo "$pr: What is the OS on $host?  Examples include SunOS, Solaris,"
X	echo "$pr: HP-UX, AIX3.X, Ultrix, OSF/1, Dynix/ptx, NCRSVR4, Linux, ..."
X	echo "$pr: (See the bkp.media file for a complete list of choices.)"
X	echo $ECHOPRE "$pr: Enter the OS: "$ECHOSUF
X	read os
X	echo "$pr: Does $host have the BSD-based 'dump' backup program,"
X	echo $ECHOPRE "$pr: or is $host stuck with cpio? [cpio or dump] "$ECHOSUF
X	read bprog
X	case "$bprog" in
X	c*)	bprog=cpio ;;
X	d*)	bprog=dump ;;
X	esac
Xfi
X
Xostypeent=`grep "^\#$os[ 	].*$type" bkp.media`
Xif test -z "$ostypeent" ; then
X	entrynote="$ENTNOTFOUND"
X	echo "$pr: I'm sorry, I couldn't find an entry in the original"
X	echo "$pr: 'bkp.media' file for OS '$os' and drive type '$type'."
X	case "$type" in
X	1600)	cap=8000	; last=$type ;;	#   40Meg
X	6250)	cap=30000	; last=$type ;;	#  150Meg
X	QIC24)	cap=8000	; last=$type ;;	#   40Meg
X	QIC60)	cap=12000	; last=$type ;;	#   60Meg
X	QIC120)	cap=24000	; last=$type ;;	#  120Meg
X	QIC150)	cap=30000	; last=$type ;;	#  150Meg
X	DAT1)	cap=200000	; last=$type ;;	# 1200Meg
X	DAT2)	cap=400000	; last=$type ;;	# 2000Meg
X	E82)	cap=400000	; last=$type ;;	# 2000Meg
X	E85)	cap=1000000	; last=$type ;;	# 5000Meg
X	esac
X	echo $ECHOPRE "$pr: Press <return> to continue: "$ECHOSUF
X	read fresh_garbage
Xelse
X	entrynote="$ENTFOUND"
X	set `echo "$ostypeent" \
X	| awk '
X		{printf "%s ", $4}
X		{for (n=7;n<=NF;n++) {printf "%s ", $n}}
X		END {printf "\n"}
X	' \
X	| sed 's/ $//'`
X	cap=$1
X	shift
X	last="$*"
Xfi
X
X# Now that we have all the info, create the entry
Xentry="$host	$malias	xx	$cap	$rewdev		$norewdev		$last"
X
Xecho ''
Xecho "$pr: Here is a guess at how each field should look, based on"
Xecho "$pr: the information you gave me.  The 'bkp.media' file has"
Xecho "$pr: seven fields; the seventh field should contain appropriate"
Xif test "$host" = "$HOST" -a -n "$DUMP_P" ; then
X	echo "$pr: $DUMP_P arguments and an optional drive type."
Xelse
X	echo "$pr: $bprog arguments and an optional drive type."
Xfi
Xecho "$pr: Each field should say something like:"
Xecho "
X1. hostname:				$host
X2. media alias:				$malias
X3. (unused):				xx
X4. capacity (number of 5k blocks):	$cap
X5. rewind device name:			$rewdev
X6. no-rewind device name:		$norewdev
X7. $bprog args & drive type:		$last
X
XThis creates a full 'bkp.media' entry looking like:
X$entry
X"
X
Xentfound="The above entry is based on the following example from the original
X'bkp.media' file for OS '$os' and drive type '$type':
X$ostypeent"
Xentnotfound="No example for OS '$os' and drive type '$type' is in the original
X'bkp.media' file, so the above entry is based on general rules which may
Xnot apply to your '$os/$type' combo."
Xif test -n "$entostype" ; then
X	echo "$entfound"
Xelse
X	echo "$entnotfound"
Xfi
X
Xecho "$pr: Do you want to put this entry in '$DSRC/bkp.media'"
Xecho $ECHOPRE "$pr: (the master bkp.media file)? [y(n)] "$ECHOSUF
Xread ans
Xcase $ans in
X[yY]*)
X	echo "$pr: OK, will do."
X	echo "$entry" >> $DSRC/bkp.media
X;;
X*)
X	echo "$pr: OK, not putting entry in master bkp.media file."
X	echo "$pr: You can always do it later if you change your mind."
X;;
Xesac
X
Xecho "
X$pr: Thanks!  We're done!  Bye!"
SHAR_EOF
chmod 0755 src/backup/gen.bkp.media ||
echo 'restore of src/backup/gen.bkp.media failed'
Wc_c="`wc -c < 'src/backup/gen.bkp.media'`"
test 5260 -eq "$Wc_c" ||
	echo 'src/backup/gen.bkp.media: original size 5260, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= src/backup/backup.mailto ==============
if test -f 'src/backup/backup.mailto' -a X"$1" != X"-c"; then
	echo 'x - skipping src/backup/backup.mailto (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting src/backup/backup.mailto (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'src/backup/backup.mailto' &&
X#!/bin/sh
X# backup.mailto - mail backup screen output to first argument
X#		  (normally *NOT* needed by the alldisks backup system)
X#
X# This is needed for automating backups on systems using Vixie-cron 2.1
X# under Linux 1.0.9 as distributed by _______, and perhaps elsewhere.
X# The reason is that pipes don't work.  You can put them in, and both
X# sides of the pipeline are in fact executed, but no data ever passes
X# thru the pipe :-(  Here's what works and what doesn't:
X# |		fails :-(
X# < file	fails :-(
X# >		works
X# >>		works
X# 2>&1		works
X# 2> file	works
X#
X# backup.mailto basically
X# a) takes its first argument as $mailto (a comma-seperated list of
X#    accounts to deliver mail to)
X# b) passes all other arguments to the alldisks script, piping its
X#    stdout and stderr to $MAILER for delivery to $mailto
X
X# would typically have a minimum of four args, for example:
X#	backup.mailto root full alldisks video0 [opts]
X# typically, would be used when calling alldisks on automated backups running
X# on systems using Vixie-cron, for example:
X#	backup.mailto root,backup full alldisks video0 cron verifytoo
X
X. /etc/dist/sahead
X
Xhdir=`awk -F: '/^backup:/ {print $6}' /etc/passwd`
XUSAGE="usage: $pr <mailto> <alldisksargs>
Xexample: $pr root,backup full alldisks video0 cron"
X
Xif test $# -lt 4 ; then
X	echo "$USAGE" 1>&2
X	exit 1
Xfi
SHAR_EOF
chmod 0755 src/backup/backup.mailto ||
echo 'restore of src/backup/backup.mailto failed'
Wc_c="`wc -c < 'src/backup/backup.mailto'`"
test 1332 -eq "$Wc_c" ||
	echo 'src/backup/backup.mailto: original size 1332, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
rm -f _shar_seq_.tmp
echo You have unpacked the last part
exit 0
