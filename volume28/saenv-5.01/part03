Newsgroups: comp.sources.unix
From: rca@queernet.org (Bob Arnold)
Subject: v28i149: saenv-5.01 - SysAd Environment (OS_Research/Backup) Suite, Part03/07
References: <1.784011877.15815@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: rca@queernet.org (Bob Arnold)
Posting-Number: Volume 28, Issue 149
Archive-Name: saenv-5.01/part03

#!/bin/sh
# this is saenv.03 (part 3 of saenv5.01)
# do not concatenate these parts, unpack them in order with /bin/sh
# file doc/saenv.paper.ps continued
#
if test ! -r _shar_seq_.tmp; then
	echo 'Please unpack part 1 first!'
	exit 1
fi
(read Scheck
 if test "$Scheck" != 3; then
	echo Please unpack part "$Scheck" next!
	exit 1
 else
	exit 0
 fi
) < _shar_seq_.tmp || exit 1
if test ! -f _shar_wnt_.tmp; then
	echo 'x - still skipping doc/saenv.paper.ps'
else
echo 'x - continuing file doc/saenv.paper.ps'
sed 's/^X//' << 'SHAR_EOF' >> 'doc/saenv.paper.ps' &&
X2623 X(toolset)s
X2840 X(seems)s
X3042 X(to)s
X3132 X(be)s
X3233 X
Xf.B 10 Z(perl)s
X3386 X
Xf.R 10 Z([2])s
X3463 X(.)s
X2016 X
X1585 Y(However,)s
X2313 X(it)s
X2387 X(would)s
X2589 X(be)s
X2688 X(a)s
X2755 X(large)s
X2926 X(amount)s
X3163 X(of)s
X3255 X(work)s
X3428 X(to)s
X2016 X
X1658 Y(install)s
X2211 X(and)s
X2337 X(maintain)s
X2602 X
Xf.B 10 Z(perl)s
X2748 X
Xf.R 10 Z(on)s
X2844 X(each)s
X2996 X(of)s
X3080 X(our)s
X3193 X
Xf.R 8 Z(UNIX)s
X3354 X
Xf.R 10 Z(vari-)s
X2016 X
X1731 Y(ants)s
X2124 X(.)s
X2193 X(This)s
X2342 X(alone)s
X2517 X(probably)s
X2783 X(means)s
X2985 X(it)s
X3054 X(won't)s
X3240 X(be)s
X3334 X(done)s
X3463 X(.)s
X2016 X
X1804 Y(Furthermore,)s
X2415 X(rewriting)s
X2709 X(our)s
X2845 X(current)s
X3082 X(tools)s
X3260 X(as)s
X3364 X
Xf.B 10 Z(perl)s
X2016 X
X1877 Y
Xf.R 10 Z(scripts)s
X2213 X(would)s
X2401 X(also)s
X2531 X(be)s
X2616 X(real)s
X2739 X(work)s
X2875 X(.)s
X360 X
X4967 Y
Xf.B 10 Z(16)s
X2096 X(LISA)s
X2273 X(V)s
X2343 X(\261)s
X2398 X(Sep)s
X2502 X(.)s
X2541 X(30)s
X2607 X(-Oct)s
X2733 X(.)s
X2772 X(3,)s
X2844 X(1991)s
X2998 X(\261)s
X3053 X(San)s
X3182 X(Diego,)s
X3384 X(CA)s
X5280 Y
Xpagebot
X
X%%Page: 17 7
Xpagetop
Xstdencoding /NTimes-Bold /Times-Bold RE
X/f.B /NTimes-Bold findfont def 
Xf.B 10 Z
X600 X
X448 Y
X744 X
Xstdencoding /NTimes-Roman /Times-Roman RE
X/f.R /NTimes-Roman findfont def 
Xf.R 10 Z(This)s
X897 X(seems)s
X1095 X(to)s
X1181 X(be)s
X1279 X(a)s
X1344 X(good)s
X1511 X(place)s
X1688 X(to)s
X1775 X(say)s
X1899 X(a)s
X1964 X(few)s
X600 X
X521 Y(words)s
X784 X(about)s
X954 X
Xf.B 10 Z(perl)s
X1070 X
Xf.R 10 Z(.)s
X1131 X
Xstdencoding /NTimes-Italic /Times-Italic RE
X/f.I /NTimes-Italic findfont def 
Xf.I 10 Z(Programming)s
X1526 X(`perl')s
X1700 X
Xf.R 10 Z(says)s
X1837 X(that)s
X1960 X(part)s
X600 X
X594 Y(of)s
X679 X(the)s
X785 X(process)s
X1010 X(of)s
X1090 X(installing)s
X1365 X
Xf.B 10 Z(perl)s
X1506 X
Xf.R 10 Z(is)s
X1576 X(to)s
X1653 X("run)s
X1793 X(a)s
X1848 X(massive)s
X600 X
X667 Y(shell)s
X762 X(script)s
X945 X(called)s
X1140 X
Xf.B 10 Z(Con\256gure)s
Xf.R 10 Z(,)s
X1476 X(which)s
X1673 X(tries)s
X1823 X(to)s
X1909 X(\256gure)s
X600 X
X740 Y(out)s
X723 X(everything)s
X1046 X(about)s
X1232 X(your)s
X1391 X(system)s
X1577 X(.")s
X1682 X(\([2,)s
X1815 X(p)s
X1848 X(.)s
X1904 X(372]\))s
X2047 X(.)s
X600 X
X813 Y(This)s
X747 X(sounds)s
X959 X(like)s
X1088 X(a)s
X1146 X(very)s
X1292 X(similar)s
X1507 X(approach)s
X1779 X(to)s
X1859 X(the)s
X1968 X(one)s
X600 X
X886 Y(discussed)s
X897 X(in)s
X990 X(this)s
X1128 X(paper)s
X1276 X(.)s
X1356 X(Although)s
X1648 X
Xf.B 10 Z(Con\256gure)s
X1975 X
Xf.R 10 Z(has)s
X600 X
X959 Y(been)s
X753 X(around)s
X964 X(a)s
X1021 X(lot)s
X1119 X(longer)s
X1316 X(than)s
X1458 X
Xf.B 10 Z(saenv)s
X1617 X(.setup)s
Xf.R 10 Z(,)s
X1830 X(we)s
X1934 X(were)s
X600 X
X1032 Y(simply)s
X815 X(unaware)s
X1074 X(of)s
X1162 X(it)s
X1233 X(when)s
X1410 X(we)s
X1522 X(began)s
X1715 X(the)s
X1831 X(develop-)s
X600 X
X1105 Y(ment)s
X756 X(of)s
X833 X(this)s
X952 X(approach)s
X1196 X(.)s
X600 X
X1199 Y
X744 X(However,)s
X1049 X(if)s
X1135 X(installed)s
X1408 X(everywhere,)s
X1781 X
Xf.B 10 Z(perl)s
X1942 X
Xf.R 10 Z(does)s
X600 X
X1272 Y(provide)s
X835 X(the)s
X949 X(basics)s
X1113 X(.)s
X1184 X(It)s
X1257 X(gives)s
X1430 X(a)s
X1492 X(common)s
X1757 X(toolbase)s
X2012 X(to)s
X600 X
X1345 Y(write)s
X779 X(tools)s
X950 X(with,)s
X1127 X(and)s
X1264 X(also)s
X1414 X(supplies)s
X1675 X(the)s
X1799 X(Con\256gure)s
X600 X
X1418 Y(script)s
X779 X(which)s
X972 X(could)s
X1150 X(be)s
X1243 X(used)s
X1395 X(as)s
X1481 X(a)s
X1541 X(basis)s
X1705 X(for)s
X1812 X(writing)s
X2034 X(a)s
X600 X
X1491 Y(research)s
X859 X(tool)s
X1000 X(such)s
X1159 X(as)s
X1252 X
Xf.B 10 Z(saenv)s
X1411 X(.setup)s
X1580 X
Xf.R 10 Z(.)s
X1656 X(Even)s
X1830 X(so,)s
X1943 X(your)s
X600 X
X1564 Y(tools)s
X757 X(must)s
X914 X(still)s
X1042 X(research)s
X1291 X(issues)s
X1477 X(related)s
X1686 X(to)s
X1764 X(the)s
X1872 X(organi-)s
X600 X
X1637 Y(zation)s
X794 X(of)s
X880 X(your)s
X1032 X(site,)s
X1174 X(and)s
X1301 X(of)s
X1387 X(course)s
X1592 X(must)s
X1753 X(still)s
X1886 X(handle)s
X600 X
X1710 Y(OS)s
X707 X(differences)s
X1004 X(.)s
X600 X
X1837 Y
X944 X
Xf.B 10 Z(Developing)s
X1285 X(Research)s
X1571 X(Code)s
X600 X
X1946 Y
X744 X
Xf.R 10 Z(Figuring)s
X1013 X(out)s
X1138 X(how)s
X1292 X(to)s
X1384 X(code)s
X1550 X(a)s
X1620 X(test)s
X1755 X(which)s
X1959 X(will)s
X600 X
X2019 Y(work)s
X761 X(everywhere)s
X1097 X(can)s
X1215 X(be)s
X1302 X(easy)s
X1421 X(.)s
X1484 X(Sometimes)s
X1806 X(it)s
X1868 X(doesn't)s
X600 X
X2092 Y(take)s
X755 X(much)s
X946 X(more)s
X1126 X(than)s
X1285 X(creating)s
X1545 X(a)s
X1619 X(list)s
X1746 X(of)s
X1845 X(possible)s
X600 X
X2165 Y(answers,)s
X873 X(such)s
X1036 X(as)s
X1132 X(the)s
X1254 X(code)s
X1420 X(that)s
X1561 X(builds)s
X1764 X(the)s
X1904 X
Xstdencoding /NCourier /Courier RE
X/f.CW /NCourier findfont def 
Xf.CW 10 Z(PATH)s
X600 X
X2238 Y
Xf.R 10 Z(environment)s
X959 X(variable)s
X1175 X(.)s
X600 X
X2332 Y
X744 X(Other)s
X937 X(times)s
X1124 X(it)s
X1203 X(is)s
X1289 X(trickier)s
X1483 X(.)s
X1563 X(Finding)s
X1811 X(the)s
X1935 X(BSD)s
X600 X
X2405 Y
Xf.B 10 Z(dump)s
X792 X
Xf.R 10 Z(program)s
X1042 X(\(as)s
X1145 X(discussed)s
X1426 X(above\))s
X1631 X(is)s
X1700 X(one)s
X1820 X(example)s
X2047 X(.)s
X600 X
X2478 Y(Another)s
X843 X(is)s
X913 X(how)s
X1052 X(to)s
X1130 X(\256gure)s
X1311 X(out)s
X1422 X(what)s
X1578 X(\257ag)s
X1704 X(to)s
X1782 X(give)s
X1923 X
Xf.B 10 Z(ps)s
X2012 X
Xf.R 10 Z(to)s
X600 X
X2551 Y(get)s
X715 X(a)s
X778 X(listing)s
X979 X(of)s
X1066 X(all)s
X1166 X(the)s
X1280 X(currently)s
X1553 X(running)s
X1791 X(processes)s
X2047 X(.)s
X600 X
X2624 Y(The)s
X726 X(code)s
X874 X(to)s
X948 X(determine)s
X1238 X(this)s
X1357 X(used)s
X1501 X(to)s
X1575 X(be)s
X1660 X(easy)s
X1779 X(.)s
X600 X
X2726 Y
X648 X
Xf.CW 10 Z(if)s
X768 X(ps)s
X888 X(ax)s
X1008 X(>)s
X1088 X(/dev/null)s
X1488 X(2>&1)s
X1688 X(;)s
X1768 X(then)s
X600 X
X2799 Y
X808 X(PSALL_K=ax)s
X1448 X(#)s
X1528 X(BSD)s
X1688 X(key)s
X600 X
X2872 Y
X648 X(else)s
X600 X
X2945 Y
X808 X(PSALL_K=)s
X1128 X(-e)s
X1448 X(#)s
X1528 X(SysV)s
X1728 X(key)s
X600 X
X3018 Y
X648 X(fi)s
X600 X
X3141 Y
X744 X
Xf.R 10 Z(This)s
X896 X(worked)s
X1128 X(because)s
X1373 X(versions)s
X1628 X(of)s
X1716 X
Xf.B 10 Z(ps)s
X1812 X
Xf.R 10 Z(based)s
X1998 X(on)s
X600 X
X3214 Y(System)s
X837 X(V)s
X924 X(can)s
X1056 X(be)s
X1158 X(expected)s
X1435 X(to)s
X1526 X(give)s
X1680 X(a)s
X1749 X(failure)s
X1963 X(exit)s
X600 X
X3287 Y(status)s
X785 X(if)s
X858 X(handed)s
X1082 X(the)s
X1196 X(BSD)s
X1325 X(-ish)s
X1476 X
Xf.CW 10 Z(ax)s
X1589 X
Xf.R 10 Z(\257ag)s
X1689 X(.)s
X1761 X(But)s
X1890 X(a)s
X1953 X(new)s
X600 X
X3360 Y(platform)s
X869 X(recently)s
X1124 X(arrived)s
X1352 X(with)s
X1510 X(a)s
X1579 X(System)s
X1815 X(V)s
X1863 X(-ish)s
X2001 X
Xf.B 10 Z(ps)s
X600 X
X3433 Y
Xf.R 10 Z(which)s
X796 X(accepted)s
X1064 X(the)s
X1197 X
Xf.CW 10 Z(ax)s
X1310 X
Xf.R 10 Z(\257ag)s
X1443 X(too)s
X1561 X(\(without)s
X1820 X(reporting)s
X600 X
X3506 Y(all)s
X697 X(the)s
X808 X(processes,)s
X1110 X(however\))s
X1361 X(.)s
X1429 X(Now)s
X1587 X(the)s
X1698 X(code)s
X1853 X(is)s
X1927 X(more)s
X600 X
X3579 Y(robust)s
X788 X(and)s
X906 X(looks)s
X1072 X(like)s
X1195 X(this)s
X1292 X(.)s
X600 X
X3681 Y
X648 X
Xf.CW 10 Z(npsax=`ps)s
X1048 X(ax)s
X1168 X(2>&1)s
X1368 X(|)s
X1448 X(wc)s
X1568 X(-l`)s
X600 X
X3754 Y
X648 X(nps_e=`ps)s
X1048 X(-e)s
X1168 X(2>&1)s
X1368 X(|)s
X1448 X(wc)s
X1568 X(-l`)s
X600 X
X3827 Y
X648 X(if)s
X768 X(test)s
X968 X($npsax)s
X1248 X(-gt)s
X1408 X($nps_e)s
X1688 X(;)s
X1768 X(then)s
X1968 X(.)s
X2008 X(.)s
X2048 X(.)s
X600 X
X3950 Y
X744 X
Xf.R 10 Z(Before)s
X1003 X(putting)s
X1271 X(a)s
X1380 X(chunk)s
X1621 X(of)s
X1755 X(code)s
X1960 X(into)s
X600 X
X4023 Y
Xf.B 10 Z(saenv)s
X759 X(.setup)s
Xf.R 10 Z(,)s
X969 X(it)s
X1031 X(needs)s
X1207 X(to)s
X1282 X(be)s
X1368 X(tested)s
X1548 X(widely)s
X1730 X(.)s
X1792 X(We)s
X1908 X(main-)s
X600 X
X4096 Y(tain)s
X738 X(a)s
X805 X(list)s
X925 X(of)s
X1017 X(roughly)s
X1260 X(thirty)s
X1443 X(hosts)s
X1618 X(which)s
X1819 X(represent)s
X600 X
X4169 Y(more)s
X774 X(or)s
X866 X(less)s
X1004 X(unique)s
X1222 X(versions)s
X1481 X(of)s
X1569 X
Xf.R 8 Z(UNIX)s
X1701 X
Xf.R 10 Z(.)s
X1777 X(Small)s
X1970 X(test)s
X600 X
X4242 Y(scripts)s
X800 X(are)s
X907 X(created)s
X1127 X(and)s
X1249 X(tested)s
X1432 X(on)s
X1524 X(these)s
X1688 X(representative)s
X600 X
X4315 Y(hosts)s
X768 X(before)s
X969 X(the)s
X1082 X(code)s
X1239 X(is)s
X1315 X(installed)s
X1543 X(.)s
X1613 X(One)s
X1755 X(test)s
X1880 X(run)s
X1998 X(on)s
X600 X
X4388 Y(these)s
X774 X(thirty)s
X956 X(hosts)s
X1130 X(may)s
X1282 X(take)s
X1431 X(anywhere)s
X1727 X(from)s
X1893 X(ten)s
X2012 X(to)s
X600 X
X4461 Y(thirty)s
X781 X(minutes)s
X1029 X(depending)s
X1342 X(on)s
X1444 X(the)s
X1561 X(nature)s
X1763 X(of)s
X1853 X(the)s
X1970 X(test)s
X600 X
X4534 Y(and)s
X718 X(the)s
X822 X(problems)s
X1092 X(encountered)s
X1418 X(.)s
X2256 X
X448 Y
X2400 X(Although)s
X2674 X(we)s
X2776 X(have)s
X2926 X(a)s
X2980 X(fairly)s
X3149 X(stable)s
X3330 X(tool)s
X3458 X(now,)s
X3613 X(it)s
X3675 X(is)s
X2256 X
X521 Y(still)s
X2385 X(occasionally)s
X2747 X(necessary)s
X3033 X(to)s
X3111 X(add)s
X3233 X(research)s
X3482 X(topics)s
X3668 X(to)s
X2256 X
X594 Y
Xf.B 10 Z(saenv)s
X2415 X(.setup)s
X2584 X
Xf.R 10 Z(.)s
X2645 X(If)s
X2711 X(only)s
X2851 X(one)s
X2969 X(other)s
X3128 X(tool)s
X3255 X(might)s
X3434 X(need)s
X3583 X(addi-)s
X2256 X
X667 Y(tional)s
X2446 X(research)s
X2706 X(information,)s
X3075 X(we)s
X3190 X(make)s
X3372 X(a)s
X3438 X(judgement)s
X2256 X
X740 Y(call)s
X2378 X(about)s
X2550 X(including)s
X2826 X(it)s
X2864 X(.)s
X2927 X(If)s
X2995 X(two)s
X3119 X(or)s
X3198 X(more)s
X3359 X(tools)s
X3514 X(need)s
X3665 X(it,)s
X2256 X
X813 Y(though,)s
X2479 X(the)s
X2583 X(decision)s
X2828 X(to)s
X2902 X(add)s
X3020 X(is)s
X3087 X(easy)s
X3206 X(.)s
X2256 X
X907 Y
X2400 X(When)s
X2590 X(a)s
X2652 X(new)s
X2795 X(type)s
X2942 X(of)s
X3025 X
Xf.R 8 Z(UNIX)s
X3189 X
Xf.R 10 Z(system)s
X3407 X(arrives,)s
X3638 X(the)s
X2256 X
X980 Y(easiest)s
X2459 X(way)s
X2593 X(to)s
X2668 X(test)s
X2785 X
Xf.B 10 Z(saenv)s
X2944 X(.setup)s
X3136 X
Xf.R 10 Z(on)s
X3225 X(it)s
X3286 X(is)s
X3354 X(to)s
X3428 X(simply)s
X3632 X(run)s
X2256 X
X1053 Y(it)s
X2323 X(and)s
X2448 X(watch)s
X2637 X(what)s
X2796 X(happens)s
X3014 X(.)s
X3082 X(It)s
X3152 X(is)s
X3226 X(not)s
X3340 X(uncommon)s
X3668 X(to)s
X2256 X
X1126 Y(see)s
X2366 X(unexpected)s
X2694 X(error)s
X2847 X(messages)s
X3124 X(while)s
X3296 X(it)s
X3357 X(is)s
X3425 X(running)s
X3654 X(on)s
X2256 X
X1199 Y(a)s
X2313 X(new)s
X2451 X(system)s
X2637 X(.)s
X2703 X(The)s
X2834 X(resulting)s
X3096 X
Xf.B 10 Z(saenv)s
X3283 X
Xf.R 10 Z(\256le)s
X3397 X(needs)s
X3577 X(to)s
X3657 X(be)s
X2256 X
X1272 Y(checked)s
X2521 X(for)s
X2644 X(variables)s
X2932 X(that)s
X3078 X(do)s
X3189 X(not)s
X3319 X(have)s
X3490 X(assigned)s
X2256 X
X1345 Y(values)s
X2452 X(or)s
X2533 X(other)s
X2696 X(unexpected)s
X3026 X(answers)s
X3241 X(.)s
X3306 X(Frequently,)s
X3638 X(the)s
X2256 X
X1418 Y(master)s
X2467 X
Xf.B 10 Z(saenv)s
X2626 X(.setup)s
X2827 X
Xf.R 10 Z(needs)s
X3011 X(to)s
X3095 X(be)s
X3190 X(modi\256ed)s
X3459 X(to)s
X3542 X(handle)s
X2256 X
X1491 Y(the)s
X2360 X(new)s
X2493 X(situation)s
X2724 X(.)s
X2256 X
X1585 Y
X2400 X(Analysis)s
X2662 X(of)s
X2745 X
Xf.B 10 Z(saenv)s
X2932 X
Xf.R 10 Z(\256les)s
X3073 X(is)s
X3147 X(made)s
X3321 X(easier)s
X3507 X(by)s
X3602 X(hav-)s
X2256 X
X1658 Y(ing)s
X2368 X(each)s
X2518 X(host)s
X2656 X(send)s
X2805 X(a)s
X2862 X(copy)s
X3018 X(of)s
X3100 X
Xf.B 10 Z(/etc/saenv)s
X3405 X
Xf.R 10 Z(\(along)s
X3601 X(with)s
X2256 X
X1731 Y(other)s
X2423 X(system)s
X2639 X(con\256guration)s
X3025 X(information\))s
X3393 X(to)s
X3476 X(a)s
X3537 X(central)s
X2256 X
X1804 Y(location)s
X2472 X(.)s
X2550 X(Changes)s
X2818 X(show)s
X2997 X(up)s
X3102 X(in)s
X3192 X(a)s
X3260 X(local)s
X3429 X(newsgroup)s
X2256 X
X1877 Y(monitored)s
X2569 X(by)s
X2674 X(interested)s
X2974 X(Data)s
X3140 X(Center)s
X3357 X(staff)s
X3476 X(.)s
X3554 X(Unex-)s
X2256 X
X1950 Y(pected)s
X2455 X(changes)s
X2694 X(in)s
X2770 X(a)s
X2824 X(host's)s
X3007 X
Xf.B 10 Z(saenv)s
X3190 X
Xf.R 10 Z(\256le)s
X3300 X(sometimes)s
X3610 X(pro-)s
X2256 X
X2023 Y(vides)s
X2422 X(the)s
X2530 X(\256rst)s
X2660 X(warning)s
X2904 X(that)s
X3031 X(a)s
X3087 X(system)s
X3299 X(is)s
X3370 X(having)s
X3577 X(prob-)s
X2256 X
X2096 Y(lems)s
X2383 X(.)s
X2447 X(The)s
X2576 X(entire)s
X2754 X(set)s
X2854 X(of)s
X2934 X
Xf.B 10 Z(saenv)s
X3117 X
Xf.R 10 Z(\256les)s
X3253 X(can)s
X3370 X(be)s
X3457 X(processed)s
X2256 X
X2169 Y(by)s
X2345 X(analysis)s
X2584 X(tools)s
X2737 X(to)s
X2812 X(warn)s
X2968 X(of)s
X3047 X(problems)s
X3319 X(or)s
X3398 X(collect)s
X3602 X(gen-)s
X2256 X
X2242 Y(eral)s
X2379 X(information)s
X2694 X(.)s
X2256 X
X2336 Y
X2400 X(Writing)s
X2651 X(and)s
X2790 X(debugging)s
X3113 X(research)s
X3379 X(code)s
X3549 X(is)s
X3638 X(the)s
X2256 X
X2409 Y(most)s
X2425 X(time)s
X2584 X(consuming)s
X2914 X(part)s
X3056 X(of)s
X3149 X(our)s
X3275 X(approach)s
X3519 X(.)s
X3596 X(It)s
X3675 X(is)s
X2256 X
X2482 Y(required)s
X2505 X(whenever)s
X2791 X(new)s
X2929 X(research)s
X3180 X(topics)s
X3368 X(are)s
X3478 X(added,)s
X3682 X(it)s
X2256 X
X2555 Y(is)s
X2330 X(common)s
X2592 X(when)s
X2764 X(a)s
X2822 X(new)s
X2957 X
Xf.R 8 Z(UNIX)s
X3117 X
Xf.R 10 Z(variant)s
X3331 X(arrives,)s
X3558 X(and)s
X3682 X(it)s
X2256 X
X2628 Y(crops)s
X2443 X(up)s
X2552 X(occasionally)s
X2931 X(when)s
X3119 X(bugs)s
X3288 X(are)s
X3414 X(discovered)s
X3703 X(.)s
X2256 X
X2701 Y(Sometimes,)s
X2616 X(the)s
X2743 X(right)s
X2914 X(solution)s
X3173 X(to)s
X3269 X(a)s
X3343 X(new)s
X3498 X(problem)s
X2256 X
X2774 Y(requires)s
X2517 X(not)s
X2648 X(only)s
X2813 X(rewriting)s
X3105 X
Xf.B 10 Z(saenv)s
X3264 X(.setup)s
X3480 X
Xf.R 10 Z(but)s
X3612 X(also)s
X2256 X
X2847 Y(some)s
X2424 X(of)s
X2506 X(the)s
X2614 X(tools)s
X2770 X(which)s
X2959 X(depend)s
X3177 X(on)s
X3269 X(it)s
X3307 X(.)s
X3372 X(Luckily,)s
X3623 X(this)s
X2256 X
X2920 Y(work)s
X2418 X(is)s
X2489 X(a)s
X2545 X(lot)s
X2642 X(more)s
X2805 X(fun)s
X2919 X(and)s
X3041 X(much)s
X3216 X(less)s
X3344 X(time)s
X3491 X(consum-)s
X2256 X
X2993 Y(ing)s
X2366 X(than)s
X2506 X(our)s
X2619 X(old)s
X2729 X(haphazard)s
X3027 X(methods)s
X3253 X(.)s
X3316 X(And)s
X3454 X(the)s
X3560 X(distri-)s
X2256 X
X3066 Y(bution)s
X2453 X(of)s
X2535 X(the)s
X2644 X(new)s
X2782 X(tools)s
X2939 X(is)s
X3012 X(automatic)s
X3305 X(thanks)s
X3507 X(to)s
X3587 X
Xf.B 10 Z(upd)s
X3698 X(-)s
X2256 X
X3139 Y(dist)s
X2360 X
Xf.R 10 Z(.)s
X2256 X
X3266 Y
X2676 X
Xf.B 10 Z(Other)s
X2869 X(Considerations)s
X2256 X
X3375 Y
X2400 X
Xf.R 10 Z(Where)s
X2624 X(at)s
X2719 X(all)s
X2833 X(possible,)s
X3115 X(values)s
X3333 X(in)s
X3432 X
Xf.B 10 Z(saenv)s
X3638 X
Xf.R 10 Z(are)s
X2256 X
X3448 Y(unquoted)s
X2503 X(.)s
X2256 X
X3550 Y
X2304 X
Xf.CW 10 Z(PSALL_K=)s
X2624 X(-e)s
X2904 X
Xf.R 10 Z(#)s
X2959 X(this)s
X3078 X(is)s
X3145 X(good)s
X2256 X
X3623 Y
X2304 X
Xf.CW 10 Z(PSALL_K=")s
X2664 X(-e")s
X2904 X
Xf.R 10 Z(#)s
X2959 X(this)s
X3078 X(is)s
X3145 X(bad)s
X2256 X
X3696 Y
X2304 X
Xf.CW 10 Z(PSALL_K=')s
X2664 X(-e')s
X2904 X
Xf.R 10 Z(#)s
X2959 X(this)s
X3078 X(is)s
X3145 X(bad)s
X3263 X(too)s
X2256 X
X3819 Y(We)s
X2379 X(do)s
X2475 X(this)s
X2602 X(because)s
X2844 X(some)s
X3015 X(tools)s
X3175 X(need)s
X3332 X(to)s
X3415 X(run)s
X3534 X(remote)s
X2256 X
X3892 Y
Xf.B 10 Z(grep)s
X2434 X
Xf.R 10 Z(commands)s
X2770 X(to)s
X2869 X(consult)s
X3109 X(the)s
X3238 X
Xf.B 10 Z(saenv)s
X3444 X
Xf.R 10 Z(\256le)s
X3577 X(on)s
X3690 X(a)s
X2256 X
X3965 Y(remote)s
X2475 X(machine)s
X2702 X(.)s
X2774 X(Interpretation)s
X3171 X(of)s
X3259 X(quotes)s
X3466 X(can)s
X3593 X(be)s
X3690 X(a)s
X2256 X
X4038 Y(very)s
X2400 X(tricky)s
X2582 X(problem)s
X2830 X(in)s
X2907 X(shell)s
X3059 X(coding,)s
X3282 X(especially)s
X3576 X(when)s
X2256 X
X4111 Y(using)s
X2432 X(quotes)s
X2638 X(in)s
X2722 X(a)s
X2784 X(remote)s
X3002 X(shell)s
X3162 X(command,)s
X3475 X(and)s
X3604 X(it)s
X3675 X(is)s
X2256 X
X4184 Y(best)s
X2416 X(to)s
X2520 X(simply)s
X2753 X(avoid)s
X2952 X(the)s
X3085 X(issue)s
X3270 X(where)s
X3484 X(possible)s
X3703 X(.)s
X2256 X
X4257 Y(Unfortunately,)s
X2672 X(if)s
X2738 X(a)s
X2793 X(string)s
X2970 X(assigned)s
X3226 X(to)s
X3304 X(a)s
X3360 X(variable)s
X3602 X(con-)s
X2256 X
X4330 Y(tains)s
X2409 X(a)s
X2465 X(character)s
X2737 X(which)s
X2926 X(is)s
X2997 X(special)s
X3210 X(to)s
X3288 X(the)s
X3395 X(shell,)s
X3564 X(like)s
X3690 X(a)s
X2256 X
X4403 Y(backslash)s
X2563 X
Xf.CW 10 Z(\\)s
Xf.R 10 Z(,)s
X2649 X(then)s
X2793 X(some)s
X2963 X(form)s
X3121 X(of)s
X3205 X(quoting)s
X3438 X(is)s
X3513 X(a)s
X3573 X(must)s
X3703 X(.)s
X2256 X
X4476 Y(This)s
X2410 X(is)s
X2490 X(the)s
X2607 X(case)s
X2758 X(with)s
X2912 X
Xf.B 10 Z(echo)s
Xf.R 10 Z('s)s
X3124 X(no)s
X3190 X(-newline)s
X3458 X(suf\256x)s
X3643 X(for)s
X2256 X
X4549 Y(System)s
X2475 X(V)s
X2523 X(.)s
X2256 X
X4651 Y
X2304 X
Xf.CW 10 Z(ECHOSUF='\\c')s
X600 X
X4967 Y
Xf.B 10 Z(LISA)s
X777 X(V)s
X847 X(\261)s
X902 X(Sep)s
X1006 X(.)s
X1045 X(30)s
X1111 X(-Oct)s
X1237 X(.)s
X1276 X(3,)s
X1348 X(1991)s
X1502 X(\261)s
X1557 X(San)s
X1686 X(Diego,)s
X1888 X(CA)s
X3654 X(17)s
X5280 Y
Xpagebot
X
X%%Page: 18 8
Xpagetop
Xstdencoding /NTimes-Bold /Times-Bold RE
X/f.B /NTimes-Bold findfont def 
Xf.B 10 Z
X360 X
X448 Y
X504 X
Xstdencoding /NTimes-Roman /Times-Roman RE
X/f.R /NTimes-Roman findfont def 
Xf.R 10 Z(Tools)s
X697 X(which)s
X902 X(use)s
X1033 X
Xf.B 10 Z(saenv)s
X1234 X
Xf.R 10 Z(understand)s
X1568 X(that)s
X1711 X(if)s
X1794 X(a)s
X360 X
X521 Y(variable)s
X600 X(is)s
X669 X(set)s
X768 X(to)s
X844 X(null,)s
X989 X(then)s
X1128 X(it)s
X1190 X(is)s
X1259 X(not)s
X1368 X(supported)s
X1653 X(on)s
X1742 X(the)s
X360 X
X594 Y(local)s
X525 X(host)s
X636 X(.)s
X709 X(For)s
X835 X(example,)s
X1113 X
Xf.B 10 Z(saenv)s
X1272 X(.setup)s
X1475 X
Xf.R 10 Z(would)s
X1675 X(put)s
X1794 X(a)s
X360 X
X667 Y(line)s
X492 X(like)s
X624 X(this)s
X752 X(into)s
X887 X
Xf.B 10 Z(saenv)s
X1077 X
Xf.R 10 Z(on)s
X1174 X(a)s
X1235 X(machine)s
X1493 X(that)s
X1624 X(did)s
X1739 X(not)s
X360 X
X740 Y(have)s
X508 X
Xf.B 10 Z(csh)s
X601 X
Xf.R 10 Z(.)s
X360 X
X842 Y
X408 X
Xstdencoding /NCourier /Courier RE
X/f.CW /NCourier findfont def 
Xf.CW 10 Z(CSH_P=)s
X728 X(#)s
X808 X(path)s
X1008 X(to)s
X1128 X(csh)s
X360 X
X965 Y
X504 X
Xf.R 10 Z(Care)s
X666 X(must)s
X832 X(be)s
X932 X(taken)s
X1114 X(when)s
X1295 X(chosing)s
X1539 X(names)s
X1747 X(for)s
X360 X
X1038 Y(variables)s
X637 X(set)s
X747 X(in)s
X834 X
Xf.B 10 Z(saenv)s
X1027 X
Xf.R 10 Z(and)s
X1157 X
Xf.B 10 Z(sahead)s
X1353 X
Xf.R 10 Z(.)s
X1426 X(Most)s
X1597 X(of)s
X1686 X(these)s
X360 X
X1111 Y(variable)s
X620 X(names)s
X835 X(end)s
X975 X(in)s
X1071 X(a)s
X1164 X
Xf.CW 10 Z(_X)s
X1289 X
Xf.R 10 Z(suf\256x)s
X1440 X(.)s
X1524 X(The)s
X1673 X(suf\256x)s
X360 X
X1184 Y(describes)s
X637 X(the)s
X747 X(variable)s
X991 X(type,)s
X1151 X(such)s
X1301 X(as)s
X1402 X
Xf.CW 10 Z(_B)s
X1509 X
Xf.R 10 Z(for)s
X1613 X(boolean)s
X360 X
X1257 Y(\(See)s
X518 X(Figure)s
X731 X(6)s
X804 X(for)s
X921 X(more)s
X1098 X(examples\))s
X1373 X(.)s
X1452 X(This)s
X1611 X(practice)s
X360 X
X1330 Y(helps)s
X536 X(avoid)s
X718 X(con\257ict)s
X953 X(with)s
X1106 X(names)s
X1311 X(such)s
X1467 X(as)s
X1575 X
Xf.CW 10 Z(HOME)s
X1769 X
Xf.R 10 Z(or)s
X360 X
X1403 Y
Xf.CW 10 Z(SHELL)s
X593 X
Xf.R 10 Z(which)s
X789 X(are)s
X904 X(used)s
X1059 X(by)s
X1158 X
Xf.B 10 Z(sh)s
X1255 X
Xf.R 10 Z(and)s
X1385 X(other)s
X1556 X(programs)s
X1807 X(.)s
X360 X
X1476 Y(Unfortunately,)s
X799 X(this)s
X944 X(also)s
X1100 X(makes)s
X1319 X(it)s
X1405 X(harder)s
X1623 X(to)s
X1723 X(live)s
X360 X
X1549 Y(within)s
X558 X(Bourne)s
X780 X(shell's)s
X982 X(limit)s
X1137 X(of)s
X1219 X(eight)s
X1380 X(signi\256cant)s
X1687 X(char-)s
X360 X
X1622 Y(acters)s
X539 X(for)s
X638 X(variable)s
X876 X(names)s
X1047 X(.)s
X360 X
X1716 Y
X504 X(Some)s
X705 X(programs)s
X1005 X(are)s
X1137 X(especially)s
X1456 X(likely)s
X1659 X(to)s
X1761 X(be)s
X360 X
X1789 Y(renamed)s
X632 X(by)s
X739 X(vendors)s
X949 X(.)s
X1029 X(Examples)s
X1334 X(include)s
X1572 X(the)s
X1695 X(BSD)s
X360 X
X1862 Y
Xf.B 10 Z(dump)s
X564 X
Xf.R 10 Z(backup)s
X793 X(program,)s
X1072 X(and)s
X1205 X(the)s
X1325 X(remote)s
X1549 X(shell)s
X1714 X(pro-)s
X360 X
X1935 Y(gram)s
X527 X(\(frequently)s
X853 X(called)s
X1044 X
Xf.B 10 Z(rsh)s
X1167 X
Xf.R 10 Z(or)s
X1252 X
Xf.B 10 Z(remsh)s
Xf.R 10 Z(,)s
X1477 X(though)s
X1690 X(there)s
X360 X
X2008 Y(are)s
X476 X(other)s
X647 X(variations\))s
X933 X(.)s
X1006 X(Some)s
X1192 X(con\256guration)s
X1581 X(\256les)s
X1728 X(and)s
X360 X
X2081 Y(programs)s
X653 X(are)s
X777 X(relatively)s
X1073 X(frequent)s
X1337 X(targets)s
X1558 X(for)s
X1676 X(being)s
X360 X
X2154 Y(moved,)s
X580 X(such)s
X724 X(as)s
X802 X(the)s
X906 X
Xf.B 10 Z(aliases)s
X1114 X
Xf.R 10 Z(\256le)s
X1222 X(and)s
X1340 X
Xf.B 10 Z(csh)s
X1433 X
Xf.R 10 Z(.)s
X360 X
X2281 Y
X716 X
Xf.B 10 Z(Another)s
X975 X(Method)s
X1219 X(Rejected)s
X360 X
X2390 Y
X504 X
Xf.R 10 Z(There)s
X706 X(is)s
X797 X(an)s
X906 X(alternative)s
X1236 X(approach)s
X1526 X(to)s
X1624 X(making)s
X360 X
X2463 Y(tools)s
X519 X(work)s
X684 X(everywhere,)s
X1041 X(which)s
X1233 X(we)s
X1340 X(chose)s
X1521 X(not)s
X1634 X(to)s
X1714 X(pur-)s
X360 X
X2536 Y(sue)s
X449 X(.)s
X514 X(One)s
X652 X(could)s
X827 X(create)s
X1015 X(a)s
X1072 X(table)s
X1230 X(containing)s
X1539 X(everything)s
X360 X
X2609 Y(you)s
X494 X(would)s
X695 X(need)s
X856 X(to)s
X943 X(know)s
X1125 X(about)s
X1308 X(all)s
X1406 X
Xf.R 8 Z(UNIX)s
X1572 X
Xf.R 10 Z(operating)s
X360 X
X2682 Y(systems)s
X606 X(in)s
X692 X(your)s
X847 X(environment)s
X1184 X(.)s
X1257 X(That)s
X1414 X(table)s
X1579 X(could)s
X1761 X(be)s
X360 X
X2755 Y(distributed,)s
X694 X(along)s
X873 X(with)s
X1023 X(a)s
X1084 X(research)s
X1338 X(tool)s
X1473 X(to)s
X1556 X(determine)s
X360 X
X2828 Y(a\))s
X442 X(what)s
X602 X(OS)s
X717 X(is)s
X793 X(running)s
X1030 X(on)s
X1127 X(the)s
X1240 X(machine)s
X1498 X(in)s
X1581 X(question,)s
X360 X
X2901 Y(and)s
X486 X(b\))s
X571 X(truly)s
X727 X(local)s
X888 X(variations,)s
X1199 X(such)s
X1351 X(as)s
X1437 X(the)s
X1549 X(machine's)s
X360 X
X2974 Y(hostname)s
X616 X(.)s
X695 X(Other)s
X887 X(tools)s
X1057 X(could)s
X1245 X(consult)s
X1478 X(the)s
X1601 X(research)s
X360 X
X3047 Y(tool,)s
X506 X(and)s
X627 X(select)s
X806 X(the)s
X913 X(appropriate)s
X1242 X(entry)s
X1404 X(from)s
X1558 X(the)s
X1664 X(distri-)s
X360 X
X3120 Y(buted)s
X530 X(table)s
X661 X(.)s
X360 X
X3214 Y
X504 X(There)s
X692 X(are)s
X807 X(two)s
X940 X(disadvantages)s
X1348 X(to)s
X1433 X(this)s
X1563 X(approach)s
X1807 X(.)s
X360 X
X3287 Y(One)s
X501 X(is)s
X575 X(that)s
X705 X(you)s
X833 X(would)s
X1028 X(still)s
X1159 X(have)s
X1314 X(to)s
X1395 X(do)s
X1490 X(the)s
X1601 X(research)s
X360 X
X3360 Y(somehow)s
X645 X(to)s
X728 X(\256ll)s
X834 X(in)s
X917 X(the)s
X1030 X(table)s
X1161 X(.)s
X1231 X(The)s
X1366 X(other)s
X1534 X(is)s
X1610 X(that)s
X1742 X(the)s
X360 X
X3433 Y(table)s
X515 X(would)s
X705 X(be)s
X792 X(static)s
X959 X(and)s
X1079 X(unexpected)s
X1406 X(local)s
X1560 X(variations)s
X360 X
X3506 Y(might)s
X547 X(crop)s
X696 X(up)s
X762 X(.)s
X832 X(\(This)s
X1004 X(last)s
X1129 X(might)s
X1316 X(also)s
X1455 X(be)s
X1549 X(an)s
X1643 X(advan-)s
X360 X
X3579 Y(tage,)s
X512 X(in)s
X587 X(the)s
X692 X(sense)s
X860 X(that)s
X984 X(the)s
X1089 X(table)s
X1243 X(would)s
X1432 X(enforce)s
X1654 X(adher-)s
X360 X
X3652 Y(ence)s
X505 X(to)s
X579 X(a)s
X631 X(standard)s
X857 X(.\))s
X360 X
X3779 Y
X926 X
Xf.B 10 Z(Advantages)s
X360 X
X3888 Y
X504 X
Xf.R 10 Z(In)s
X599 X(addition)s
X858 X(to)s
X950 X(the)s
X1072 X(main)s
X1246 X(goal)s
X1401 X(of)s
X1496 X(making)s
X1736 X(our)s
X360 X
X3961 Y(tools)s
X519 X(work)s
X684 X(as)s
X769 X(written)s
X988 X(everywhere,)s
X1345 X(our)s
X1462 X(approach)s
X1735 X(has)s
X360 X
X4034 Y(several)s
X572 X(other)s
X731 X(advantages)s
X1028 X(.)s
X360 X
X4107 Y
X423 X
Xf.Y 10 Z(\017)s
X494 X
Xf.R 10 Z(Improved)s
X774 X(User)s
X922 X(Support)s
X1132 X(.)s
X1193 X(It)s
X1256 X(used)s
X1400 X(to)s
X1474 X(be)s
X1559 X(hard)s
X1699 X(for)s
X360 X
X4180 Y
X494 X(the)s
X606 X(Data)s
X763 X(Center)s
X971 X(to)s
X1053 X(provide)s
X1286 X(more)s
X1453 X(than)s
X1598 X(margi-)s
X360 X
X4253 Y
X494 X(nal)s
X626 X(support)s
X875 X(for)s
X1002 X(weird)s
X1204 X(workstations,)s
X1613 X(which)s
X360 X
X4326 Y
X494 X(didn't)s
X677 X(really)s
X854 X(make)s
X1023 X(anybody)s
X1275 X(happy)s
X1437 X(.)s
X1500 X(This)s
X1642 X(issue)s
X360 X
X4399 Y
X494 X(has)s
X627 X(largely)s
X857 X(disappeared)s
X1220 X(since)s
X1402 X(we)s
X1524 X(can)s
X1662 X(now)s
X360 X
X4472 Y
X494 X(offer)s
X646 X(more)s
X806 X(complete)s
X1075 X(services)s
X1314 X(on)s
X1402 X(a)s
X1454 X(much)s
X1624 X(wider)s
X360 X
X4545 Y
X494 X(variety)s
X702 X(of)s
X779 X(platforms)s
X1035 X(.)s
X360 X
X4618 Y
X423 X
Xf.Y 10 Z(\017)s
X494 X
Xf.R 10 Z(Code)s
X682 X(maintenance)s
X1021 X(.)s
X1109 X(We)s
X1251 X(only)s
X1418 X(have)s
X1593 X(to)s
X1694 X(get)s
X360 X
X4691 Y
X494 X
Xf.B 10 Z(saenv)s
X653 X(.setup)s
X852 X
Xf.R 10 Z(working)s
X1103 X(once)s
X1229 X(.)s
X1298 X(As)s
X1401 X(we)s
X1508 X(integrated)s
X360 X
X4764 Y
X494 X
Xf.B 10 Z(sahead)s
X730 X
Xf.R 10 Z(and)s
X866 X
Xf.B 10 Z(saenv)s
X1065 X
Xf.R 10 Z(into)s
X1209 X(our)s
X1337 X(tools,)s
X1524 X(the)s
X1646 X(tools)s
X2016 X
X448 Y
X2150 X(shrank)s
X2361 X(because)s
X2607 X(they)s
X2755 X(no)s
X2854 X(longer)s
X3057 X(contained)s
X3350 X(the)s
X2016 X
X521 Y
X2150 X(research)s
X2395 X(code)s
X2521 X(.)s
X2016 X
X594 Y
X2079 X
Xf.Y 10 Z(\017)s
X2150 X
Xf.R 10 Z(Performance)s
X2491 X(.)s
X2553 X(A)s
X2624 X(tool)s
X2751 X(can)s
X2867 X(source)s
X3064 X
Xf.B 10 Z(sahead)s
X3283 X
Xf.R 10 Z(faster)s
X2016 X
X667 Y
X2150 X(than)s
X2287 X(it)s
X2347 X(can)s
X2462 X(do)s
X2550 X(the)s
X2654 X(research)s
X2877 X(.)s
X2016 X
X740 Y
X2079 X
Xf.Y 10 Z(\017)s
X2150 X
Xf.R 10 Z(Easily)s
X2342 X(used)s
X2488 X(by)s
X2578 X(other)s
X2739 X(interpreters)s
X3044 X(.)s
X3108 X(The)s
X3237 X(Bourne)s
X2016 X
X813 Y
X2150 X(shell)s
X2303 X(code)s
X2455 X(which)s
X2644 X(sets)s
X2771 X(variables)s
X3038 X(in)s
X3115 X
Xf.B 10 Z(sahead)s
X3336 X
Xf.R 10 Z(and)s
X2016 X
X886 Y
X2150 X
Xf.B 10 Z(saenv)s
X2338 X
Xf.R 10 Z(\256les)s
X2479 X(can)s
X2602 X(be)s
X2695 X(easily)s
X2882 X(massaged)s
X3172 X(into)s
X3306 X(code)s
X2016 X
X959 Y
X2150 X(suitable)s
X2381 X(for)s
X2480 X(sourcing)s
X2731 X(by)s
X2819 X
Xf.B 10 Z(perl)s
X2957 X
Xf.R 10 Z(or)s
X3034 X
Xf.B 10 Z(csh)s
X3149 X
Xf.R 10 Z(scripts)s
X3324 X(.)s
X2016 X
X1032 Y
X2079 X
Xf.Y 10 Z(\017)s
X2150 X
Xf.R 10 Z(Documentation)s
X2562 X(.)s
X2626 X(We)s
X2744 X(document)s
X3032 X(differences)s
X3354 X(we)s
X2016 X
X1105 Y
X2150 X(encounter)s
X2504 X(in)s
X2647 X(the)s
X2820 X(master)s
X3090 X(version)s
X3377 X(of)s
X2016 X
X1178 Y
X2150 X
Xf.B 10 Z(saenv)s
X2309 X(.setup)s
Xf.R 10 Z(,)s
X2537 X(and)s
X2675 X(to)s
X2770 X(some)s
X2954 X(extent)s
X3161 X(in)s
X3256 X
Xf.B 10 Z(saenv)s
X3415 X
Xf.R 10 Z(.)s
X2016 X
X1251 Y
X2150 X(This)s
X2314 X(gives)s
X2500 X(us)s
X2604 X(a)s
X2679 X(centralized)s
X3019 X(place)s
X3206 X(to)s
X3302 X(store)s
X2016 X
X1324 Y
X2150 X(information)s
X2465 X(.)s
X2016 X
X1451 Y
X2587 X
Xf.B 10 Z(Drawbacks)s
X2016 X
X1560 Y
X2160 X
Xf.R 10 Z(The)s
X2298 X(primary)s
X2543 X(drawback)s
X2836 X(to)s
X2922 X(the)s
X3038 X(approach)s
X3317 X(we've)s
X2016 X
X1633 Y(taken)s
X2188 X(is)s
X2260 X(a)s
X2317 X(typical)s
X2527 X(centralization)s
X2920 X(problem)s
X3142 X(.)s
X3208 X(Each)s
X3369 X(host)s
X2016 X
X1706 Y(has)s
X2139 X(many)s
X2322 X(of)s
X2412 X(its)s
X2511 X(system)s
X2732 X(administration)s
X3154 X(eggs)s
X3311 X(in)s
X3398 X(the)s
X2016 X
X1779 Y
Xf.B 10 Z(saenv)s
X2175 X(.setup/sahead/s)s
X2604 X(aenv)s
X2769 X
Xf.R 10 Z(basket)s
X2940 X(.)s
X3011 X(When)s
X3202 X(something)s
X2016 X
X1852 Y(goes)s
X2161 X(wrong)s
X2353 X(here,)s
X2508 X(many)s
X2679 X(tools)s
X2832 X(can)s
X2949 X(break)s
X3121 X(in)s
X3197 X(interesting)s
X2016 X
X1925 Y(ways)s
X2153 X(.)s
X2220 X(That's)s
X2419 X(why)s
X2561 X(it)s
X2627 X(is)s
X2700 X(so)s
X2786 X(important)s
X3073 X(to)s
X3152 X(do)s
X3245 X(the)s
X3354 X(code)s
X2016 X
X1998 Y(testing)s
X2217 X(on)s
X2305 X(the)s
X2409 X(representative)s
X2807 X(hosts)s
X2944 X(.)s
X2016 X
X2092 Y
X2160 X(Also,)s
X2336 X(we)s
X2447 X(are)s
X2563 X(keeping)s
X2808 X(our)s
X2930 X(\256ngers)s
X3145 X(crossed)s
X3379 X(that)s
X2016 X
X2165 Y(no)s
X2136 X(vendor)s
X2374 X(will)s
X2532 X(use)s
X2674 X(the)s
X2809 X(pathnames)s
X3148 X
Xf.B 10 Z(/etc/dist)s
X3425 X
Xf.R 10 Z(or)s
X2016 X
X2238 Y
Xf.B 10 Z(/etc/saenv)s
X2343 X
Xf.R 10 Z(in)s
X2443 X(their)s
X2610 X
Xf.R 8 Z(UNIX)s
X2791 X
Xf.R 10 Z(variant)s
X2977 X(.)s
X3065 X(If)s
X3158 X(it)s
X3245 X(happens,)s
X2016 X
X2311 Y(though,)s
X2243 X(we'll)s
X2407 X(simply)s
X2615 X(rename)s
X2838 X(our)s
X2952 X(\256les)s
X3089 X(and)s
X3210 X(go)s
X3301 X(on)s
X3392 X(our)s
X2016 X
X2384 Y(merry)s
X2197 X(way)s
X2308 X(.)s
X2016 X
X2511 Y
X2560 X
Xf.B 10 Z(Future)s
X2779 X(Plans)s
X2016 X
X2620 Y
X2160 X
Xf.R 10 Z(By)s
X2265 X(the)s
X2375 X(time)s
X2523 X(this)s
X2648 X(paper)s
X2825 X(reaches)s
X3055 X(publication,)s
X3402 X(we)s
X2016 X
X2693 Y(expect)s
X2225 X(to)s
X2311 X(have)s
X2471 X(created)s
X2699 X(an)s
X2795 X
Xf.B 10 Z(salib)s
X2962 X
Xf.R 10 Z(\("ess)s
X3093 X(-ay)s
X3178 X(-lib"\))s
X3353 X(shell)s
X2016 X
X2766 Y(script)s
X2204 X(to)s
X2295 X(be)s
X2397 X(added)s
X2595 X(to)s
X2686 X(the)s
X2807 X(list)s
X2930 X(of)s
X3025 X(distributed)s
X3351 X(\256les)s
X3463 X(.)s
X2016 X
X2839 Y(Like)s
X2168 X
Xf.B 10 Z(sahead)s
X2393 X
Xf.R 10 Z(and)s
X2518 X
Xf.B 10 Z(saenv)s
Xf.R 10 Z(,)s
X2723 X(it)s
X2790 X(will)s
X2923 X(be)s
X3014 X(sourced)s
X3249 X(by)s
X3343 X(other)s
X2016 X
X2912 Y(tools)s
X2146 X(.)s
X2208 X(It)s
X2272 X(will)s
X2400 X(contain)s
X2620 X(a)s
X2674 X(library)s
X2876 X(of)s
X2955 X(useful)s
X3142 X(code)s
X3292 X(chunks)s
X2016 X
X2985 Y(and)s
X2144 X(macros)s
X2337 X(.)s
X2408 X(For)s
X2532 X(example,)s
X2808 X(it)s
X2877 X(will)s
X3013 X(contain)s
X3241 X(a)s
X3320 X
Xf.CW 10 Z(NEED)s
X2016 X
X3058 Y
Xf.R 10 Z(macro,)s
X2222 X(so)s
X2303 X(a)s
X2355 X(tool)s
X2481 X(could)s
X2651 X(do)s
X2739 X(something)s
X3039 X(like)s
X2016 X
X3160 Y
X2064 X
Xf.CW 10 Z(NEEDLIST="CRON_)s
X2664 X(P)s
X2744 X(CRON43_B)s
X3104 X(CRONCMD_B")s
X2016 X
X3233 Y
X2064 X(eval)s
X2264 X($NEED)s
X2016 X
X3356 Y
X2160 X
Xf.R 10 Z(Evaluating)s
X2481 X(this)s
X2609 X(macro)s
X2807 X(would)s
X3004 X(cause)s
X3184 X(the)s
X3297 X(calling)s
X2016 X
X3429 Y(script)s
X2200 X(to)s
X2287 X(quit)s
X2426 X(with)s
X2580 X(an)s
X2677 X(appropriate)s
X3015 X(error)s
X3178 X(message)s
X3439 X(if)s
X2016 X
X3502 Y(any)s
X2161 X(of)s
X2265 X(these)s
X2452 X(variables)s
X2744 X(had)s
X2890 X(unreasonable)s
X3292 X(values)s
X3463 X(.)s
X2016 X
X3575 Y(Boolean)s
X2271 X(variables)s
X2546 X(would)s
X2745 X(be)s
X2840 X(expected)s
X3110 X(to)s
X3194 X(be)s
X3289 X(true)s
X3425 X(or)s
X2016 X
X3648 Y(false,)s
X2195 X(path)s
X2345 X(variables)s
X2622 X(would)s
X2823 X(be)s
X2921 X(expected)s
X3195 X(to)s
X3283 X(contain)s
X2016 X
X3721 Y(slash)s
X2172 X(characters,)s
X2483 X(and)s
X2601 X(so)s
X2682 X(on)s
X2748 X(.)s
X2016 X
X3848 Y
X2575 X
Xf.B 10 Z(Conclusions)s
X2016 X
X3957 Y
X2160 X
Xf.R 10 Z(We)s
X2275 X(should)s
X2474 X(have)s
X2622 X(done)s
X2773 X(this)s
X2892 X(a)s
X2944 X(long)s
X3084 X(time)s
X3226 X(ago!)s
X2016 X
X4084 Y
X2471 X
Xf.B 10 Z(Acknowledgemen)s
X2976 X(ts)s
X2016 X
X4193 Y
X2160 X
Xf.R 10 Z(The)s
X2290 X(basic)s
X2454 X(idea)s
X2592 X(for)s
X2695 X(this)s
X2818 X(approach)s
X3088 X(came)s
X3256 X(out)s
X3368 X(of)s
X3450 X(a)s
X2016 X
X4266 Y(conversation)s
X2387 X(I)s
X2439 X(had)s
X2565 X(with)s
X2714 X(my)s
X2829 X(fellow)s
X3030 X(system)s
X3246 X(adminis-)s
X2016 X
X4339 Y(trator)s
X2200 X(Sid)s
X2328 X(Shapiro)s
X2535 X(.)s
X2613 X(Thanks)s
X2848 X(are)s
X2969 X(also)s
X3116 X(due)s
X3251 X(to)s
X3343 X(other)s
X2016 X
X4412 Y(coworkers)s
X2316 X(who)s
X2453 X(have)s
X2602 X(put)s
X2710 X(up)s
X2799 X(with)s
X2940 X(problems)s
X3210 X(caused)s
X3414 X(by)s
X2016 X
X4485 Y(the)s
X2138 X("implementation)s
X2626 X(details")s
X2829 X(.)s
X2908 X(The)s
X3053 X
Xf.B 10 Z(upd)s
X3164 X(-dist)s
X3331 X
Xf.R 10 Z(script)s
X2016 X
X4558 Y(was)s
X2142 X(originally)s
X2424 X(written)s
X2636 X(by)s
X2724 X(Diane)s
X2906 X(Alter)s
X3044 X(.)s
X360 X
X4967 Y
Xf.B 10 Z(18)s
X2096 X(LISA)s
X2273 X(V)s
X2343 X(\261)s
X2398 X(Sep)s
X2502 X(.)s
X2541 X(30)s
X2607 X(-Oct)s
X2733 X(.)s
X2772 X(3,)s
X2844 X(1991)s
X2998 X(\261)s
X3053 X(San)s
X3182 X(Diego,)s
X3384 X(CA)s
X5280 Y
Xpagebot
X
X%%Page: 19 9
Xpagetop
Xstdencoding /NTimes-Bold /Times-Bold RE
X/f.B /NTimes-Bold findfont def 
Xf.B 10 Z
X600 X
X448 Y
Xstdencoding /NTimes-Roman /Times-Roman RE
X/f.R /NTimes-Roman findfont def 
Xf.R 10 Z(Bob)s
X735 X(Arnold)s
X949 X(is)s
X1020 X(a)s
X1076 X(Systems)s
X1325 X(Administrator)s
X1726 X(for)s
X1829 X(the)s
X1937 X(Data)s
X600 X
X521 Y(Center)s
X803 X(group)s
X981 X(at)s
X1054 X(the)s
X1160 X(Ingres)s
X1350 X(Products)s
X1607 X(Division)s
X1861 X(of)s
X1940 X(Ask,)s
X600 X
X594 Y(Incorporated)s
X940 X(.)s
X1006 X(He)s
X1111 X(has)s
X1227 X(six)s
X1332 X(years)s
X1501 X(of)s
X1584 X(experience)s
X1902 X(in)s
X1982 X(the)s
X600 X
X667 Y(\256eld)s
X719 X(.)s
X789 X(Bob)s
X930 X(plays)s
X1102 X(in)s
X1185 X(the)s
X1298 X("Insensitives",)s
X1716 X(who's)s
X1908 X(motto)s
X600 X
X740 Y(is)s
X677 X
Xstdencoding /NTimes-Italic /Times-Italic RE
X/f.I /NTimes-Italic findfont def 
Xf.I 10 Z(Rock)s
X843 X(&)s
X927 X(Roll)s
X1071 X(Without)s
X1315 X(Shame!!!)s
X1613 X
Xf.R 10 Z(He)s
X1724 X(can)s
X1850 X(be)s
X1946 X(con-)s
X600 X
X813 Y(tacted)s
X795 X(via)s
X911 X(U)s
X959 X(.S)s
X1013 X(.)s
X1064 X(Mail)s
X1224 X(at)s
X1306 X(ASK/Ingres)s
X1657 X(Products)s
X1923 X(Divi-)s
X600 X
X886 Y(sion,)s
X760 X(1080)s
X924 X(Marina)s
X1149 X(Village)s
X1380 X(Parkway,)s
X1663 X(Alameda,)s
X1955 X(CA,)s
X600 X
X959 Y(94501)s
X765 X(.)s
X977 X(Send)s
X1283 X(electronic)s
X1720 X(mail)s
X2012 X(to)s
X600 X
X1032 Y
Xstdencoding /NCourier /Courier RE
X/f.CW /NCourier findfont def 
Xf.CW 10 Z(rca@Ingres)s
X1000 X(.com)s
X1160 X(.)s
X600 X
X1159 Y
X1175 X
Xf.B 10 Z(References)s
X600 X
X1268 Y
Xf.R 10 Z([1])s
X699 X(Bell)s
X905 X(Telephone)s
X1281 X(Laboratories,)s
X1730 X(Inc)s
X1815 X(.,)s
X1940 X
Xf.I 8 Z(UNIX)s
X600 X
X1341 Y
X699 X
Xf.I 10 Z(Programmer's)s
X1136 X(Manual)s
Xf.R 10 Z(,)s
X1404 X(Seventh)s
X1663 X(Edition,)s
X1921 X(Vols)s
X2047 X(.)s
X600 X
X1414 Y
X699 X(1&)s
X810 X(2,)s
X886 X(New)s
X1038 X(York,)s
X1217 X(NY:)s
X1358 X(Holt,)s
X1521 X(Rinehart)s
X1778 X(and)s
X1901 X(Wins-)s
X600 X
X1487 Y
X699 X(ton,)s
X823 X(1983)s
X955 X(.)s
X600 X
X1560 Y([2])s
X699 X(Larry)s
X882 X(Wall)s
X1049 X(and)s
X1181 X(Randal)s
X1406 X(L)s
X1447 X(.)s
X1500 X(Schwartz,)s
X1802 X
Xf.I 10 Z(Program-)s
X600 X
X1633 Y
X699 X(ming)s
X858 X(`perl')s
Xf.R 10 Z(,)s
X1053 X(Sebastapol,)s
X1386 X(CA:)s
X1523 X(O'Reilly)s
X1783 X(&)s
X1860 X(Associ-)s
X600 X
X1706 Y
X699 X(ates,)s
X843 X(Inc)s
X928 X(.,)s
X984 X(1991)s
X1116 X(.)s
X600 X
X4967 Y
Xf.B 10 Z(LISA)s
X777 X(V)s
X847 X(\261)s
X902 X(Sep)s
X1006 X(.)s
X1045 X(30)s
X1111 X(-Oct)s
X1237 X(.)s
X1276 X(3,)s
X1348 X(1991)s
X1502 X(\261)s
X1557 X(San)s
X1686 X(Diego,)s
X1888 X(CA)s
X3654 X(19)s
X5280 Y
Xpagebot
X
X%%Page: 20 10
Xpagetop
Xstdencoding /NTimes-Bold /Times-Bold RE
X/f.B /NTimes-Bold findfont def 
Xf.B 10 Z
X360 X
X4967 Y(20)s
X2096 X(LISA)s
X2273 X(V)s
X2343 X(\261)s
X2398 X(Sep)s
X2502 X(.)s
X2541 X(30)s
X2607 X(-Oct)s
X2733 X(.)s
X2772 X(3,)s
X2844 X(1991)s
X2998 X(\261)s
X3053 X(San)s
X3182 X(Diego,)s
X3384 X(CA)s
X5280 Y
Xpagebot
X
X%%Trailer
Xlastpage
X
SHAR_EOF
echo 'File doc/saenv.paper.ps is complete' &&
chmod 0644 doc/saenv.paper.ps ||
echo 'restore of doc/saenv.paper.ps failed'
Wc_c="`wc -c < 'doc/saenv.paper.ps'`"
test 98998 -eq "$Wc_c" ||
	echo 'doc/saenv.paper.ps: original size 98998, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= doc/suite.history ==============
if test -f 'doc/suite.history' -a X"$1" != X"-c"; then
	echo 'x - skipping doc/suite.history (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting doc/suite.history (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'doc/suite.history' &&
XName:		suite.history
XAuthor:		Bob Arnold
XLast modified:	Nov  3 1994
X
XThis is a history of the 'saenv' toolset, a subset of the System
XAdministration Environment suite.  The description is summarized *very*
Xbriefly for the period prior to its alpha release to comp.sources.unix and
Xalt.sources in June 1994.  Enhancements since that time are chronicled in
Xmore detail.  (The history of the 'alldisks' backup toolset is listed
Xseperately, in 'src/backup/doc/alld.history'.)
X
X*	1989	'saenv' toolset created.
X	The 'saenv' research tools were created.  'update' and other toolsets
X	made to depend on it.  'alldisks' backup toolset made to depend on it.
X*	09/91	Paper published.
X	Paper describing 'saenv' and 'update' toolset published:  "If You've
X	Seen One UNIX, You've Seen Them All", Large Installation and System
X	Administration V Conference Proceedings, USENIX, Berkeley, CA.
XAlpha	06/94	Alpha release of "saenv_alldisks"
X	Alpha version released by rca@ingres.com to comp.sources.unix and
X	alt.sources (alpha only because it had seen very limited use outside
X	of Ingres, and some brand new tools were written and others were
X5.01	11/94	SAENV Suite Release 5.01
X	Released by rca@queernet.org to comp.sources.unix and alt.sources with
X	a better name (System Administration Environment Suite) and release
X	number (5.01, taken from alldisks version 5.01 since most of the
X	development work in this suite has actually taken place in the alldisks
X	toolset)
Xdone	improve documentation in LETTER and README
Xdone	add Linux support and fix quoting bug in dist/bin/showsys
Xdone	style improvement in bin/rrun
Xdone	remove README.alpha
Xdone	create new doc directory and move saenv.paper.ps into it
Xdone	create this doc/suite.history file
Xdone	create doc/sh.style.guide Bourne shell style guide
Xdone	add Vixie-cron support and fix name of saenv.setup in dist/bin/upd-dist
Xdone	alldisks 5.01 changes, mostly better docs and Linux/Vixie-cron support
SHAR_EOF
chmod 0644 doc/suite.history ||
echo 'restore of doc/suite.history failed'
Wc_c="`wc -c < 'doc/suite.history'`"
test 1933 -eq "$Wc_c" ||
	echo 'doc/suite.history: original size 1933, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= doc/sh.style.guide ==============
if test -f 'doc/sh.style.guide' -a X"$1" != X"-c"; then
	echo 'x - skipping doc/sh.style.guide (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting doc/sh.style.guide (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'doc/sh.style.guide' &&
XFile:		sh.style.guide
XPurpose:	A Style Guide for Bourne Shell Scripts
XAuthor:		Bob Arnold
XOriginal Date:	Wed Oct  5 15:09:05 PDT 1994
XRevised Date:	Fri Nov  4 17:28:01 PST 1994
XRevision:	1.05
X
XTable of Contents
X-------------------------------------
X* Introduction
X* First Principles
X* Comments
X* Terminal Restrictions
X* User Interface Issues
X* Variable Names and Usage
X* Indentation and Flow Control
X* Long Commands, Pipelines and Lists
X* Flow Control Within A Pipeline
X* Spacing
X* Portability Considerations
X* Quoting
X* Miscellaneous
X* Credits
X-------------------------------------
X
X			Introduction
X
XThis guide describes my Bourne shell coding style.  I started doing shell
Xprogramming at the beginning of my system adminstration career, which means
XI've been doing it for over 10 years now.  Most of my code has been written
Xin Bourne shell.  Over time, I have developed a coding style which seems to
Xwork well.  It is based on my own thoughts (many of which are not unique)
Xand experience, as well as looking at other people's code and reading
Xoccasional comments on coding style.
X
X			First Principles
X
XThere are three main goals for good shell programming:
X	1) ease of reading
X	2) ease of changing
X	3) portability across UNIX platforms
X
XYou may prefer other styles to mine.  That's fine.  Style questions
Xare a matter of taste, by definition (although sometimes they are
Xtreated as religious matters, unfortunately).  However, as long as your
Xstyle achieves the above goals, everything will be peachy keen.
X
XIf you are a knowledgable Bourne shell programmer, as you read through this
Xguide you may wonder why some of the examples look like they do.  I ask for
Xyour patience, since you should have only to read on farther to get
Xto the section which discusses your question.  The text gives examples as
Xit goes along, rather than putting them all at the end where the context
Xmay not be as clear.
X
X			Comments
X
XThe following should probably be a First Principle:
X
X	4) Thou shalt comment your code
X
XYou cannot achieve the above goals without clear, concise comments in your
Xshell script.  This is so important I almost put it in among the
XFirst Principles, but it really is just the most powerful tool for
Xachieving all three principles.  Just like any other code you write,
Xshell code can become more opaque over time.  You comment your C
Xcode, don't you?  (Well, *don't you*????).  Comment your shell
Xcode, too.
X
XWhat you are doing, and why, and any special tricks or unusual usages
Xshould be explained.  Document the author of the script, even, nay
X*especially*, if it's not you.  Describe where the master source code
Xcan be found, and where the script should be installed for use.  Keep
Xdevelopment history comments in the script itself, in a related README,
Xor via a source code control package like RCS.  'Nuff said.
X
X			Terminal Restrictions
X
XIn the not-too-distant past, everybody had terminals and nobody had windows.
XThe most common terminal screen sizes were 80 characters wide and 24 lines
Xhigh.  Now, many people have X11 and other windowing systems.  If you are
Xone of these lucky folks, great!  But remember this isn't true for everyone,
Xand may not be true for you all the time either.  The consoles of most
Xmachines revert to a single screen of a fixed size when they are in single
Xuser mode, for example.  So:
X
X* Try to keep your line length to 80 characters or less.
X
XIt's true that any real windowing system, and even many old terminals, can
Xsupport more than 80 columns - vt100s can support 132 columns for example.
XBut at some point someone will need to read your code on an 80-column
Xterminal or window, and it behooves you to make it easy to do so,
Xespecially since that "someone" might be you :-)
X
X			User Interface Issues
X
XMost UNIX utilities have an inadequate user interface.  I'm not
Xcomplaining that I'd rather have a point&click grep, and I like
Xthe "no news is good news" philosophy.  But most UNIX utilities
Xviolate one or more of the guidelines in this section.
X
XUnfortunately, it's too late to fix all the old programs now because
Xeveryone expects them to behave in each of their uniquely personal
Xcantankerous old ways.  Luckily, you have a chance to create a kinder,
Xgentler user interface.  Really, it's not so hard.  Here's what you
Xhave to remember:
X
X* Problems which force termination of your script should have a
X  non-zero (failure) exit status.
X
X* Error messages should be clear, at least to a knowledgable user.
X
X* Error messages should appear on STDERR, or if that is being reserved
X  for some other purpose, on /dev/tty.
X
X* Error messages from your programs should always tell the user where
X  they are coming from, i.e. they should show the name of your program.
X
X* Make sure your program has a "help" option.  At a minimum, this should
X  give a usage message.
X
X* A usage message should always be given in case of a command line syntax error.
X  The usage message should begin with the word "usage:" followed by the
X  correct syntax(es).
X
X* If your program is interactive, make choices clear to the user.
X  If there is a default choice, tell the user what it is.  Larry Wall's
X  "rn" newsreader is a good example, as is the BSD "dump" backup program.
X
X* Don't hide problems from your users.  "No news is good news", but bad news
X  should show as much as possible about what went wrong.  Your script will
X  call many programs.  You may have to go to some effort to make your script
X  trap a program's output and display it when the program fails.  This effort
X  is probably most worthwhile when you are making your script more robust.
X  A good example of this is that a backup script should notice when the BSD
X  "dump" backup program gets a bad block read from a disk and reports a
X  "bread" error.  Not only should it notice, but it should show the exact
X  error message to the user, and even notify (via email, beeper, or
X  whatever) the appropriate people to fix the disk problem.
X
XThe following chunk of example code follows all the above rules:
X
X	# initial declarations
X	pr=`basename $0`		# find out the name of this program
X	# usage string, showing both ways to use this program
X	USAGE="usage: $pr [help|other_options]"
X	
X	# process command args
X	# if we didn't get any args; give usage message and do a failure exit
X	if test $# -eq 0 ; then
X		echo "$USAGE"
X		exit 1
X	fi
X	for arg in $* ; do
X		case $arg in
X		help)	echo "$USAGE" ; exit ;;
X		opt)	process this valid option ;;
X		opt2)	process this valid option too ;;
X		*)	echo "$pr: Bad opt '$1'" ; echo "$USAGE" ; exit 1 ;;
X		esac
X	done
X
X	# start the real work
X	if your program runs into a problem ; then
X		# show the user what went wrong, written to STDERR
X		echo "$pr: some appropriate and clear error message" 1>&2
X		exit 1
X	fi
X
X			Variable Names and Usage
X
XGeneral rules:
X* Variable names must (as a matter of correct shell syntax):
X	* begin with a letter (or underscore, but this is discouraged)
X	* may include upper and lower case letters, digits, and underscores
X* Make sure the first eight characters of your variable names are unique,
X  because only their first eight characters are significant
X* Variable names may be longer than eight characters if that improves clarity,
X  but don't forget the previous rule
X* Variable names should
X	* be all capital letters if
X		* they are environment variables like $PATH
X		* the script exports them, thus making them environment
X		  variables
X		* they are long strings, like a usage or error message
X		  (this is a personal preference)
X		* they are macros eval'ed by the script, such as
X			eval "$MACRO"
X		* they rely on information from /etc/dist/sahead or
X		  /etc/saenv, both of which describe the system administration
X		  environment which the script is executing under (this applies
X		  only to scripts using the System Administration Environment
X		  Suite, but capitalized variable names could be used for
X		  variables derived from other external files)
X	* be all lower case if they are local to the script (that is, in
X	  all other cases)
X
XI have seen code with variable names using mixed case, such as
X"$UserName".  But this can lead to problems, when acronyms and
Xabbreviations start to turn the variable into all capitals, thereby
Xmisleading the reader into thinking the variables weren't local.
XFor example, $IP (a variable holding an IP address) looks like an
Xenvironment variable, whereas $ip looks local and is therefore preferable.
X
XI have also seen code which uses all capitals for yet another
Xpurpose, namely to define an explicit full path to a binary, like
Xthis:  "AWK=/usr/bin/awk".  This is acceptable for scripts where
Xsecurity is a concern, although it reduces portability, makes for
Xmore work, and setting a proper $PATH is adequate in most cases.
X
XOne last alternative variable capitalization style is available for those
Xwho (can afford to) ignore the admonition not to use functions: "Local"
Xvariables that are only used in one function (or only used in the main) are
Xlower case; "Global" variables are all upper case.  If you rewrite the
Xfunctions as external scripts, you export all the globals, and the script
Xconforms to the guide without other changes.
X
X* Don't use curly braces to seperate variables from other code unless it is
X  required.  I know many people like to do this.  But I think it's harder
X  to type, harder to read, and makes commands longer than necessary.  If
X  you set
X	tmp=/tmp/foo
X  then the following table shows what I mean:
X
XTask			Prefered	Necessary	Discouraged
Xto read /tmp/foo	cat $tmp			cat ${tmp}
Xto read /tmp/foo.2	cat $tmp.2			cat ${tmp}.2
Xto read /tmp/foo2		 	cat ${tmp}2
X
X			Indentation and Flow Control
X
XIndentation is a religious issue, meaning many people have differing
Xopinions on this topic and often feel very strongly about it.  In
Xgeneral, I think the guidelines below produce code which is more
Xreadable than other methods, and allow a reader to look for keywords
Xin the most logical places; other people will feel the same way
Xabout their own style.  Different strokes for different folks.  But:
X
X* Don't mix indentation styles in any script, especially
X  someone else's.
X
XHere's a brief reminder of some Bourne shell definitions before we get
Xto the indentation rules.
X
XWORD            a token; a string of non-blank characters seperated
X		by a spaces or tab characters
XCOMMAND         a simple command, made up of non-blank WORDs
XPIPELINE        a sequence of one or more commands seperated by a pipe (|)
XLIST            a sequence of one or more pipelines seperated by a semicolon,
X		ampersand, double ampersand, double pipe (; & && ||) or
X		newline; (think of this as a chunk of code, ranging
X		from really simple to very complex)
XNAME            a new variable name introduced by a "for" loop
XPATTERN         a pattern to be matched in a "case" statement, the form of
X		the pattern is the same as for filename generation (glob'ing)
X
XGeneral indentation rules:
X* There should be exactly one indentation per decision.  This applies to
X  all flow control constructs (if/for/while/until/case) as well as
X  curly braces and parentheses.
X* Opening and closing keywords should be indented the same amount, e.g.
X  "if" and "fi" should have the same indentation.  Again, this applies
X  to all flow control statements, curly braces, and parentheses.
X* A "continuation" keyword should be on the same line as its opening keyword,
X  so "then" and "do" should appear on the same line as "if" and
X  "for/while/until" respectively.  Since "then" and "do" must be the first
X  word of a command, sticking them at the end of an "if/for/while/until"
X  line requires that they be preceded by a semicolon.
X* Blocks of code should be indented one level from their enclosing flow
X  control constructs (if/for/while/until/case/curlies/parentheses).
X* Indentation should be avoided when a long pipeline is split across multiple
X  lines of text (see the "Long Commands, Pipelines and Lists" section below).
X* Long chunks of awk/sed/perl/whatever code should be indented.  (Alternatives
X  which I avoid for performance reasons include putting such code into
X  a temporary file, or presenting it in here-is documents.)
X* Here-is documents should be indented, if possible.  In some circumstances
X  this may be difficult or impossible, which is another reason I avoid here-is
X  documents.
X* Each shell script should consistently use one or the other of these
X  indentations.  Each indent should be either:
X	* a TAB character (the equivalent of eight spaces)
X	  vi setup:	":set ai"      ; use ^T or TAB to tab, and ^D to untab
X	* four spaces
X	  vi setup:	":set ai sw=4" ; use ^T to tab,        and ^D to untab
X  An 8-space indent has the advantage that a TAB is easier to type than ^T, and
X  the disadvantage that indented code is less likely to fit within 80 columns.
X  Some people use 1-space or 2-space indentations, and others use inconsistent
X  indentations - all of which are harder to read than 4-space or 8-space
X  indents.
X
XHere are examples of all flow control constructs:
X
X	# keywords: if then elif else fi
X	if LIST ; then
X		LIST
X	elif LIST ; then
X		LIST
X	else
X		LIST
X	fi
X
X	# keywords: for in do done
X	for NAME in WORD [WORD ...] ; do
X		LIST
X	done
X
X	# keywords: while do done
X	while LIST ; do
X		LIST
X	done
X
X	# keywords: case in esac ;;
X	# "normal form" - Always acceptable:
X	case WORD in
X	PATTERN)
X		LIST
X	;;
X	PATTERN1|PATTERN2...)
X		LIST
X	;;
X	esac
X
X	# keywords: case in esac ;;
X	# "condensed form" - Acceptable if all PATTERN/LIST pairs fit on the
X	# same line; this can improve legibility.  Note that the LISTs all
X	# line up with each other on a tabstop
X	case WORD in
X	PATTERN)		LIST ;;
X	PATTERN1|PATTERN2...)	LIST ;;
X	esac
X
X	# keywords: ( )
X	# "normal form" - Always acceptable:
X	(
X		LIST
X	)
X
X	# keywords: ( )
X	# "condensed form" - Acceptable if LIST can fit within an 80 character
X	# page width
X	( LIST )
X
X	# keywords: { }
X	# "normal form" - Always acceptable:
X	{
X		LIST
X	}
X
X	# keywords: { }
X	# "condensed form" - Acceptable if LIST can fit within an 80 character
X	# page width
X	{ LIST ; }
X
XHere is a flow control example, written three equivalent ways:
X
X	# coded using "if":
X	if   test $dumpstatus -eq 0 ; then
X		echo "$pr: dump finished OK"
X	elif test $dumpstatus -eq 1 ; then
X		echo "$pr: dump had a startup problem but finished OK anyway"
X	elif test $dumpstatus -eq 3 ; then
X		echo "$pr: dump failed" 1>&2
X	else
X		echo "$pr: weird dump failure status '$dumpstatus'" 1>&2
X	fi
X	
X	# coded using "normal" form case statement:
X	case $dumpstatus in
X	0)
X		echo "$pr: dump finished OK"
X	;;
X	1)
X		echo "$pr: dump had a startup problem but finished OK anyway"
X	;;
X	3)
X		echo "$pr: dump failed" 1>&2
X	;;
X	*)
X		echo "$pr: weird dump failure status '$dumpstatus'" 1>&2
X	;;
X	esac
X
X	# coded using "condensed" form case statement:
X	case $dumpstatus in
X	0)	echo "$pr: dump finished OK" ;;
X	1)	echo "$pr: dump had a startup problem but finished OK anyway" ;;
X	3)	echo "$pr: dump failed 1>&2" ;;
X	*)	echo "$pr: weird dump failure status '$dumpstatus'" 1>&2 ;;
X	esac
X
XThere are some commonly used alternatives to the above methods, which
XI don't like for various reasons.
X
X	# keywords: case in esac ;;
X	# BAD: indent PATTERN
X	# Why: it forces two indentations where only one is necessary.
X	case WORD in
X		PATTERN)
X			LIST
X		;;
X	esac
X
X	# keywords: case in esac ;;
X	# BAD: the partial indent of PATTERN looks ugly and the closing ";;"
X	# isn't indented at the same level, but it has the advantage that
X	# it shows the PATTERN is subsidiary to the "case" keyword
X	case WORD in
X	  PATTERN)
X		LIST
X		;;
X	esac
X
X	# BAD: Put "then", and similarly "do", alone on a seperate line
X	# Why: uses a line unnecessarily, which matters since you or someone
X	# else may be stuck using a 24-line screen.  However, this coding style
X	# is clearly readable, so doing it my way is a quite personal choice.
X	for NAME in WORD ...
X	do
X		LIST
X	done
X
X	# BAD: Put code after "then" (likewise "do") on a line
X	# Why: This makes it harder to change the code; also if you are
X	# using a 4-space indent with a "then", the following LIST will
X	# be indented five spaces.
X	if LIST
X	then	LIST_A
X		LIST_B
X	fi
X
X	# BAD: Put code after "PATTERN)" on a line
X	# Why: This style makes it harder to change the code, and you may
X	# end up with an indentation which is dependent on the length of
X	# "PATTERN)".  Notice the ugly 11-space indent in this example:
X	case WORD in
X	PATTERN_1) LIST_1A
X		   LIST_1B
X	;;
X	esac
X
X	# BAD: Put ";;" on same line as LIST (when LIST is indented)
X	# Why: This style makes it harder to change the code.  In this
X	# example, if you wanted to add a LIST_C after LIST_B, you would
X	# have to move the ";;"
X	case WORD in
X	PATTERN)
X		LIST_A
X		LIST_B ;;
X	esac
X
X	# keywords: then do PATTERN) fi done esac ;; ) }
X	# BAD: Indent continuation or closing keywords:
X	# Why: It's easier for these keywords to be hidden in other code
X	if LIST
X		then
X		LIST
X		fi
X
XMoving on to other indentation issues ...
X
XRegarding the "normal" and "condensed" forms of the case
Xstatement, I may use both styles in the same script, since they are
Xboth acceptable.  However, I never mix forms within the same case
Xstatement.
X
XMany shell scripts include chunks of sed/awk/perl code, and sometimes other
Xmini-languages as well.  Most often, the largest such chunks will be in awk.
XShort code bits can be kept inline - e.g. "awk '{print $1}' /etc/passwd".
XLonger chunks should be indented, though, like this:
X
X	awk '
X		AWK_PATTERN { ACTION }
X		{
X			bigger ACTION
X		}
X	'
X
XNote the placement of the quotes - the opening singlequote follows the awk
Xon the same line, and the closing quote is indented at the same level as
Xthe opening "awk '".
X
XIndenting for here-is documents ought to look like this:
X
XLIST << WORD
X	LIST
XWORD
X
XUnfortunately, the closing WORD must be at the absolute beginning of a line
Xfor many Bourne shells.  This makes indentation ugly if the opening LIST is
Xalready indented:
X
X	LIST << WORD
X		LIST
XWORD
X
XAs an alternative, I prefer to echo input to a list than have the list
Xread from a here-is document.  An example using multiple echos to insert
Xa bid document header at the beginning of some document:
X
X	{ echo i ; echo "$BIG_DOC_HEADER" ; echo . ; echo w ; echo q ; } \
X	| ed - document_file
X
XOr even better, if you combined the "ed" commands with the "$BID_DOC_HEADER"
Xstring into a single "ed" script, you could do:
X
X	echo "$DOC_ED_SCRIPT" | ed - document_file
X
XThis also has a performance advantage, in that building $list_input can
Xhappen within the script, whereas for a here-is document the shell creates
Xa file in /tmp to store the list input.  If building the list input turns
Xout to be tricky, that's a disadvantage of course.  In sum, I avoid using
Xhere-is documents, especially if they lead to ugly indenting, but I will
Xuse them in a pinch or quick-and-dirty hacking situations.
X
XThere is a way to rewrite "if" statements using curly braces ( { } ).
XSome people like this technique because in "vi" you can easily use the
Xpercent (%) key to bounce around matching the open/close curlies, to
Xmake sure you have the beginning and end of each block properly delimited.
X(An equivalent functionality exists in emacs and other programmer's editors).
XThe "showmatch" setting in "vi" will help with the same problem.
XUnfortunately, under some UNIX systems at least, extra curlies are required
Xto force "sh" to do the desired thing when mimicking "elif" clauses.
XHere is an earlier example, recoded to use curly braces, just to show
Xyou how ugly it can get.
X
X	# coded using curlies - note the additional curlies required
X	# to force the elif's to work properly :-(
X	{        test $dumpstatus -eq 0 ; } && {
X		echo "$pr: dump finished OK"
X	} || { { test $dumpstatus -eq 1 ; } && {
X		echo "$pr: dump had a startup problem but finished OK anyway"
X	} || { { test $dumpstatus -eq 3 ; } && {
X		echo "$pr: dump failed" 1>&2
X	} || {
X		echo "$pr: weird dump failure status '$dumpstatus'" 1>&2
X	} } }
X
X			Long Commands, Pipelines, and Lists
X
XSome lists are too long to fit within an 80-column line.
XAs stated earlier, this is undesirable, because lines which wrap around
Xyour (80-column) screen look ugly and are hard to read.
X
XThere are some logical places for splitting a long list to avoid line wrap:
X* Each short simple command should be on its own line (see below for what
X  to do about a long simple command).
X* Long lists which are joined by "&&" or "||" symbols should be split at those
X  symbols.
X* An exception to the two rules above can be made if a list is *really* short
X  and obviously linked, as in these two examples:
X	sync ; sync ; sync
X	test $# -eq 0 && argc=0
X* Pipelines which fit on one line are fine, although it is also OK to split
X  them at a pipe character.
X* Pipelines which are too long to fit on one line should always be split at
X  a pipe character.
X
XHere is the common way to split a pipeline:
X	COMMAND | \
X	COMMAND | \
X	COMMAND
XDitto for a list containing "&&" or "||":
X	PIPELINE && \
X	PIPELINE && \
X	PIPELINE
X
XHowever, I prefer to make these splits like this:
X	COMMAND \
X	| COMMAND \
X	| COMMAND
Xand
X	PIPELINE \
X	&& PIPELINE \
X	&& PIPELINE
X
XThe common method has two advantages:
X	* If a space appears after the backslash, the shell will still do
X	  what you want (in fact, in some shells the backslash isn't even
X	  necessary, but you should include it anyway for portability).
X	* You can imbed lines of comments in the pipeline, which may be
X	  desirable for explaining long and complex pipelines.
X
XFor my method, the backslash is required and must be followed immediately
Xby a newline; also I know of no technique for imbedding comments within
Xa pipeline.  However, my method has this advantage:
X	* It is clear that following commands/pipelines are continuations of the
X	  prior commands/pipelines.
XIt is possible to work around both drawbacks, first by careful typing and
Xdouble-checking of your code, and second by putting comment blocks above
Xsplit pipelines/lists.
X
XFor simple commands which are long enough to wrap around an 80-column line,
Xthere seem to be three unsatisfatcory choices:
X	* Let it wrap around.
X	  Disadvantage - it looks ugly and it's hard to read.
X	* Split it at some reasonable point, and indent the split section.
X	  Disadvantage - it looks like a control flow indentation.
X	* Split it at some reasonable point, but don't indent the split section.
X	  Disadvantage - the split section looks like a new command.
XIn general, I favor the first, but I have used the other two techniques
Xon occasion too.  Take your pick and use it consistently, at least within
Xeach script.
X
X* Avoid splitting these flow control lines, even if they are long enough
X  to wrap around:
X	if LIST ; then
X	while LIST ; do
X	until LIST ; do
X	for NAME in WORD [WORD ...] ; do
X  As with a simple command, it seems to be the best choice to let it wrap.
X  
X			Flow Control Within A Pipeline
X
XOccasionally, flow control constructs are found at the beginning,
Xend, or middle of a pipeline.  This can happen with parenthesized (subshell)
Xor curly braced statements too.  This rule applies:
X
X* Always split out any flow control, parenthesized (subshell), or curly
X  braced statement which is imbedded in a pipeline.
X
XHere are three examples:
X
X	(
X		LIST_IN_SUBSHELL
X	) \
X	| LIST_AFTER_SUBSHELL
X
X	LIST_BEFORE_WHILE \
X	| while LIST_CONDITIONAL ; do
X		LIST_IN_WHILE
X	done
X
X	LIST_BEFORE_IF \
X	| if LIST_CONDITIONAL ; then
X		LIST_4_IF
X	else
X		LIST_4_ELSE
X	fi \
X	| LIST_AFTER_IF
X
X			Spacing
X
XThis section covers areas where adding in-line spacing can improve legibility.
X
X* All keywords and special characters should be seperated by spaces from other
X  code.  That goes for . : ; ;; ( ) { } | & || && > < >> << and even after #, in
X  addition to "if", "then", etc.  This is good for legibility.  For example:
X	echo $$ > /tmp/$pid
X  is easier to read than either of these examples
X	echo $$>/tmp/$pid
X	echo $$ >/tmp/$pid
X  which work and are commonly used, but are hard to read.  Also, you will
X  avoid mistakes like this (which is rewritten from an earlier example):
X	{echo i ; echo "$BIG_DOC_HEADER" ; echo . ; echo w ; echo q ;} \
X	| ed - document_file
X  The above code won't work, mainly because keywords are non-blank words
X  seperated by blanks.  The shell is not consistent about applying
X  this rule to special characters, but if you always put spaces around
X  keywords you can't go wrong.  So, do this instead:
X	{ echo i ; echo "$BIG_DOC_HEADER" ; echo . ; echo w ; echo q ; } \
X	| ed - document_file
X  This rule does not apply to
X  	* the right parenthesis in a case statement "PATTERN)"
X	* pattern matching in a case statement "PATTERN)", e.g. "yes|no)"
X	* filename expansion, e.g. "ls .??*"
X
X* Comments should fit within an 80-character page width.  Although no such
X  rule can always be applied to a simple command, a comment can always
X  be written to comply with this goal.
X
X* It's nice to make things line up vertically.  In addition to making flow
X  control constructs line up via indentation, the following should also
X  line up on tabstops:
X	* inline comments within a block of short commands
X	* LISTs which follow PATTERNs in a "condensed form" case statement
X
X* Sometimes it is useful to pad similar lines with spaces and tabs so that
X  you can see the similarities and differences between them.
X  
XAll of the above guidelines are followed in this example:
X
X	case $tape_device in
X	rewind)		tar tf   $rewdev > $tarlist ;;	# extra spaces & tabs
X	norewind)	tar tf $norewdev > $tarlist ;;	# no extra spaces & tabs
X	esac
X
XPlease note:
X	* the inline comments line up on a tabstop
X	* the spaces around the ">" and ";;" special characters, and
X	  the a space after the "#" too
X	* the extra tab after the "rewind)" pattern to make both "tar" commands
X	  line up on a tabstop
X	* spaces before the "$rewdev" to make it line up as closely as possible
X	  with the "$norewdev" below it
X	* terse inline comments to keep them within an 80-character page width
X	  (note the "&" used in place of "and")
X
XThe above example shows a tradeoff between two guidelines.  If I was following
Xthe idea of padding similar lines completely, I would have put two spaces
Xbefore the "rewind)" pattern.  But it's more important to show the
Xflow control constructs consistently and have consistent indentation, so 
Xthe "rewind)" and "norewind)" patterns have the same indentation.
X
X			Portability Considerations
X
XOne of the First Principles is Portability.  Your shell code should
Xwork on as many UNIX variants as possible, because someday you will need
Xto port it and you might just as well write it portably in the first
Xplace.
X
XThese rules should help, although there are no guarantees.  I once
Xwrote the following widely portable code:
X	shift 6
XWell, I found a platform which completely ignored the "6" and did only
Xa single shift, so I had to rewrite it in a more ugly fashion:
X	shift ; shift ; shift ; shift ; shift ; shift
X
XI later noticed that my Version 7 documentation didn't show that you
Xcould do a "shift N", so my original attempt violated the first important
Xportability rule, which is:
X
X* Write your code to UNIX Version 7 standards.  This goes for sh, awk, sed,
X  ed, expr, test, and everything else.  Unfortunately, that means that you
X  can't take advantage of many features found on newer versions of UNIX.
X  But you will generally find that anything coded to Version 7 standards
X  works.
X
X* More generally, you want to use the greatest set of features available
X  across all UNIX platforms where your script must work.  Obviously, if you
X  write a tool to extract info from /etc/vfstab, it probably only needs to
X  work on SVR4 and SVR4 derivitives.  However, there may be SVR3 derivitives
X  which have had /etc/vfstab grafted onto them (I believe that Sequent's
X  Dynix/ptx is such a hybrid), so watch out!
X
XIf you are coding to Version 7 standards, the following features are
Xunavailable:
X	sh functions
X	awk functions
X	nawk
X	head (use "sed -e Nq" instead)
X	grep -i
X	egrep -i
X	fgrep -i
X	find -xdev
X	find -mount
X	test -x
X	test -h
X	csh
X	ksh
X
XAlso watch out for these differences among UNIX variants (these differences
Xexist, and I believe I have assigned the correct behaviour to the
Xcorrect UNIX for most of the examples below):
X
X	"test -f" means "exists and is not a directory" for V7 and BSD
X	"test -f" means "exists and is an ordinary file" for SVR[023]
X	"test -f" means one or the other for Solaris (and other SVR4?)
X	depending on whether or not /usr/ucb is in your $PATH before /usr/bin
X
X	"grep -s <pattern> <file>" means "silent if file or pattern not found"
X	for BSD derivatives
X	"grep -s <pattern> <file>" means "silent if file not found" for SysV
X	"grep -s <pattern> <file>" means one or the other for Solaris (and
X	other SVR4?) depending on whether /usr/ucb is in $PATH before /usr/bin
X
X	"hostname" BSD vs. "uname -n" SVR[023]
X	"ps ax" BSD vs. "ps -ef" SVR[023] vs. "ps -ax" various BSD/SV hybrids
X	"mt -f" BSD and BSD hybrids, except "mt -t" HP-UX, and "mt" is a
X	typesetter program (not a tape manipulator) for AIX 2.X.
X	How do you spell remote shell?  rsh, remsh, netsh, & rcmd are all in use
X
XOutputs for various important programs can be treacherous:
X	ls -l	especially symlink and device representations
X	ls -lg	turns on group info for BSD, turns off group info for SysV
X	ls -F	e.g. AIX 3.1 appends an extra space if a file has execute perms
X	ps
X	mount
X	df
X	dump	the BSD backup program, not the filesystem header utility
X	dd	most say "records in/out", a few say "blocks", other
X		variations exist
X	du	can use 512 or 1k blocks (for SysV and BSD systems respectively)
X	ls -s	ditto - can use 512 (SysV) or 1k (BSD) blocks
X
XPaths, names and formats of config files are different too
X	BSD4.3 crontab files differ from all other UNIX variants
X	Filesystems to mount at boot time exist in the following files
X		checklist	V7, SysV
X		fstab		BSD
X		vfstab		SVR4
X		filesystems	AIX
X	Dual Universe machines (Pyramid's OSx, Sequent's Dynix) encode
X	universe information in /etc/passwd
X
XSome UNIX systems, and some optionally installed UNIX security packages,
Xsplit /etc/passwd into two files, a world readable /etc/passwd and
Xa root-only shadow file.  This shadow password file lives in /etc/shadow
Xfor most UNIX variants, but is under /etc/security/passwd under AIX [23]*.
XThe formats of these shadow password files differ, of course.
X
XThe System Administration Environment Suite is available to research
Xand report on many of these differences - see the "Credits" section.
XThe code below is taken directly from one of these research tools, and
Xshows how a dynamic testing approach with portable code can be used
Xto answer questions about the environment.  The "if" statement relies on
Xthe subshell's exit status - if the "crontab" command is found in $PATH
X(set earlier in the script) we set the boolean variable CRONCMD_B=true,
Xotherwise to false.  Note that "crontab -l" is safe - it merely lists the
Xcontents of the user's crontab file if there is one.  It is also not
Xperfectly robust - this research tool is run by root, and if root does
Xnot have a crontab file then "crontab -l" will exit with a failure exit
Xstatus thereby yielding the wrong answer to our question.  Luckily this
Xsituation is practically unheard of and is easily fixed by installing a
Xcrontab file for root.  Anyway, here's the sample code:
X
X	## CRONCMD_B - do we use the crontab command to install crontab files?
X	if ( crontab -l ) > /dev/null 2>&1 ; then
X		CRONCMD_B=true
X	else
X		CRONCMD_B=false
X	fi
X
XThis is probably a good place to talk about other shells for a moment.
XPortability requires Bourne shell.  Many old systems do not have "csh"
Xor "ksh".  There are various other reasons which make "csh" undesirable
Xas a programming language.  "ksh" is more desirable than "sh", but 
Xunfortunately it doesn't exist everywhere.
X
XAnother programming language, Larry Wall's "perl", is very popular and
Xwidely portable, but exists native only with ConvexOS as far as I'm aware.
XEach new OS that comes along requires a new perl port (which hopefully some
Xelse will do for you :-) and it has to be built and installed on each new
Xmachine.  Once your machines all have perl, though, it provides the same
Xthing the Version 7 utilities provide - namely, a greatest common
Xdenominator language/toolset in which to write your programs.  And perl has
Xa lot more features than the Version 7 utilities.
X
X			Quoting
X
XQuoting protects the quoted text from special interpretation by the shell.
XQuoting isn't strictly a style issue.  However it's one of the gnarliest
Xproblems in sh coding, and a few hints may be helpful.
X
X* To quote a single character, you can use backslash, singlequotes or
Xdoublequotes, whichever is easier.  These are equivalent:
X	\C
X	'C'
X	"C"
X* To quote a backslash, use two of them, like this: \\
X* Within backquotes, nothing is quoted.
X* Within singlequotes, everything is quoted except:
X	singlequote	(')
X* Within doublequotes, everything is quoted except:
X	backslash	(\)
X	doublequote	(")
X	backquote	(`)
X	parameters/variables
X  Backslash is used to quote \ $ ` and ".
X* Within here-is documents, quoting depends on WORD.  If any part of 'WORD'
X  is quoted, then the entire text of the document is quoted.  If WORD is not
X  quoted, everything is quoted except:
X	backslash	(\)
X	singlequote	(')
X	doublequote	(")
X  Backslash is used to quote \ $ ` and the first character of WORD.  If I
X  want to quote WORD to produce a completely quoted here-is document, I do:
X	LIST << \WORD
X
XSome related terms:
X	Command Substitution	happens between backquotes
X	Parameter Substitution	happens with $* $@ $# $- $? $$ $!
X				$N (where 0 <= N <= 9)
X				${parameter} and $parameter
X				(this is also called variable substitution)
X	File Name Generation	happens with * ? and [...]
X				(this is also called glob'ing or
X				pattern matching as in "case" statements)
X
X* There is no way to embed a single quote character in a single-quoted string.
X  However, this works:
X	errmsg='I don'\''t understand your command line arguments.'
X* You can get singlequotes and backquotes in a string by surrounding it
X  with doublequotes, and using a backslash to quote the backquotes:
X	insult="$pr: You are just a \`silly' and a \`nincompoop'.  So there!"
X* The easiest way to insert awk programs into shell scripts is to quote them
X  with single-quotes.  To insert shell variables into these completely quoted
X  awk programs, you can use this trick ($pr is shell variable containing the
X  script name):
X	awk -F: '$3 == 0 {print "'$pr': ROOT account", $1}' /etc/passwd
X* Generally speaking, I double-quote all messages which are echoed to the
X  screen via STDOUT or STDERR.  This allows me to protect any imbedded spaces
X  and some special characters, while still allowing me to take advantage of
X  variable and command substitution within the quoted string.
X
X			Miscellaneous
X
X* A few words about program structure.  This is both fairly personal and
X  has a certain internal logic.
X
X	* The first line should be "#!/bin/sh" (exec(2) under Version 7 did
X	  not support this, but it is almost universally available now).
X
X	* The next lines should be a block of comments, containing
X		* the name of the program
X		* a brief description of what it does
X		* command syntax to get a usage message from it
X		* where to find more info about it (a man(L) page, README, etc)
X		* Author, revision level, revision date, commonly in the form
X		  of an expanded RCS or SCCS identifier string
X
X	* For those using the System Administration Environment Suite, this
X	  should be the first real command in your script:
X	  	. /etc/dist/sahead 	# get sysad env on this host
X
X	* Initialize umask and traps.
X
X	* Initialize variables (with lower case names); this is where the
X	  program learns its own name (set in the "$pr" variable).
X
X	* Initialize big strings (including USAGE and ERROR strings) and
X	  any MACRO's.
X
X	* Process command line arguments.
X
X	* Do the real work of the program.
X
X* Don't use the "if [ whatever ] ; then" notation.  It is very hard
X  to find the "[" program in the documentation, and doesn't even exist
X  as a seperate program on many newer UNIX variants.  Also, the "[ ... ]"
X  notation falsely implies that the brackets are part of the "if" statement
X  syntax.  Last, it is easy to make this mistake: "if [whatever] ; then ..."
X  This code fails because the square brackets must be seperate words (of
X  course you shouldn't violate my "put spaces around all keywords and special
X  characters" rule anyway :-)  It is much better to use this notation:
X	  if test whatever ; then
X  The test program is documented in the man pages, where a novice shell
X  programmer can look it up, and doesn't have the other above problems. 
X
X* As a performance issue, apparently some old Bourne shells don't have
X  a built-in "test" program, which means they must exec it from disk.
X  However, all Bourne shells have built in "case" statements, so your
X  code will run faster on old UNIX versions if it can be written using
X  "case" instead of "if test".
X
X* Although it is legal, it is bad form to leave the last ";;" off the
X  end of the last "PATTERN) LIST ;;" in a case statement.  The resulting
X  code looks inconsistent, and is more likely to cause you trouble
X  if you ever decide to insert a new PATTERN above the "esac".  In other
X  words, this is prefered:
X	case WORD in
X	PATTERN1)	LIST1 ;;
X	PATTERN2)	LIST2 ;;
X	esac
X  and this is discouraged:
X	case WORD in
X	PATTERN1)	LIST1 ;;
X	PATTERN2)	LIST2		# note missing ";;"
X	esac
X
X* Using the remote shell program (called "rsh" here) can be tricky:
X	* Problem: When you run a remote shell program as a user on another
X	  host, their login shell on the remote host will be executed to
X	  interpret your command; the problem is that you have no guarantee
X	  of what their login shell will be (it could be /bin/false or maybe
X	  even non-existant).
X	  Solution: Write your code to handle these possible problems.
X	* Problem: rsh does not return the exit status of the command it
X	  runs on the remote host - rather, it returns 0 if it had
X	  *permission* to run the command.
X	  Solution: Luckily the following trick generally works, because
X	  the "&& echo OK" is understood in the same way by sh/ksh/csh.  It
X	  doesn't tell you the actual exit status of the remote command,
X	  but at least it tells you whether it was zero or non-zero.
X	  Unfortunately, it doesn't work when the remote shell is XENIX's
X	  csh, because SCO reversed the sense of && and || in their XENIX
X	  csh :-(  Anyway, here's the trick:
X		x=`rsh $host "$command && echo OK"`
X		if test "$x" = OK ; then
X			: the command worked + no news is good news so be quiet
X		else
X			echo "$x" 1>&2			# show trapped output
X			echo "$pr: '$command' failed" 1>&2	# error message
X			exit 1 				# failure exit status
X		fi
X	* Problem: Quoting is tricky, because your shell interprets the quotes
X	  before the possibly unknown remote user's shell interprets the quotes.
X	  Solution: Avoid putting anything quoted in your remote command.
X	* Problem: When you run a remote shell program as a user on another
X	  host, their login shell may abort.  This failure commonly happens
X	  when the user's login shell sources its startup file (csh sources
X	  ~/.cshrc, sh/ksh sources ~/.profile) and the startup file calls
X	  programs to do terminal settings such as "tset", "stty", and "clear".
X	  It can also happen if a .cshrc references unset variables.
X	  Solution: Fix the remote user's startup file (but get the user's
X	  permission first!).
X
X* If you have a lot of text which you want to send to a specific
X  file descriptor, the "exec" command and a little file redirection trick
X  can help.  For example, if you want to send a bunch of stuff to STDERR
X  without writing "1>&2" after every command, you can do something like this:
X	exec 9>&1	# save a copy of the STDOUT file descriptor
X	exec 1>&2	# make file descriptor 1 a copy of file descriptor 2
X	cat file_full_of_some_saved_error_messages
X	echo "$pr: I'll be Dang'ed if these problems don't just beat all :-("
X	echo "$CANNED_APPROPRITE_ERROR_MESSAGE"
X	awk "$AWK_DATA_MUNGER" $some_data_file
X	echo "$CANNED_EXPRESSION_OF_SYMPATHY"
X	# you get the idea by now so it is time to clean up
X	exec 9>&1	# make file descriptor 1 a copy of STDOUT
X
X* Be careful about the order of file descriptor reassignment arguments.
X  The first example basically puts a copy of $infile in $outfile, and redirects
X  dd's "records in/out" message from STDERR to STDOUT.  The second example puts
X  the text of $infile plus dd's message in together in $out, which is probably
X  not what you want.
X	dd if=$infile 2>&1 > $outfile
X	dd if=$infile > $outfile 2>&1
X  In some contexts, placement of file descriptor reassignment arguments is
X  not critical, meaning it can go anywhere on the command line and still
X  yield the same results.  In such cases, however, the most common place to
X  put them is at the end of the command.  So, do this:
X	echo "error message" 1>&2	# approved
X  not this:
X	echo 1>&2 "error message"	# discouraged
X
X* If a pipeline is giving you results you don't understand, you can
X  instrument the stages.  Suppose the (uninstrumented) troublesome pipeline
X  looks like this:
X	mungetool $munge_data_file \
X	| dd conv=tolower of=result 2> /dev/null
X  An instrumented version of this pipeline is shown below.  The "dd" stage
X  in the pipeline accomplishes its work (converting alpha characters
X  to lower case), saves its "records in/out" STDERR message in a file,
X  and saves its exit status in another file.  Similar instrumentation
X  works for the "munge" stage.  The "tee" program can save the output
X  from the "munge" stage before it gets to the "dd" stage; similarly
X  the "dd" output can be saved before it goes to the screen.  All of the
X  saved files can be examined afterwards.
X	{ mungetool $munge_data_file  2> $mungeerr ; echo $? > $mungestat ; } \
X	| tee $mungeout \
X	| { dd conv=tolower of=result 2> $dderr    ; echo $? > $ddstat    ; } \
X	| tee $ddout
X
X			Credits
X
XWell, this is the end of the guide.  That was exciting, yes?  So, it's
Xtime to roll those credits!
X
XThanks go to Mike Meyer for asking if I knew of a shell programming
Xstyle guide.  This is yet another one of his good questions.  It provided
Xthe impetus to actually writing this document, which is something I have
Xwanted to do for a few years now.  Mike also reviewed this guide;
Xhe made several helpful suggestions and the last capitalization style
Xparagraph is taken practically verbatim from his comments.
X
XAnother reviewer whose comments I have incorporated is Ken Arnold.  He
Xhelped me clean up the format (any remaining ugliness in this guide is still
Xmy fault :-)  I'm grateful to him for pointing out various technicalities and
Xespecially a method for getting 4-space indents which works cleanly in "vi".
X
XAs it happens, I only know of one other "sh" style guide, which was
Xproduced by Dave Brower and John Kruger while we were all at Relational
XTechnology / Ingres / ASK.  Unfortunately, I don't have a copy of their
Xguide available as I write.  If memory serves, it takes a somewhat
Xdifferent approach to the topic but definitely addressed portability
Xconcerns.  It was the source of three ideas in this guide, namely
X	* the idea to use "sed" instead of "head" for portability
X	* the performance tip to use "case" instead of "test" where possible
X	* the idea to use file descriptor reassignment
X
XThanks also are due to Dan Seguin and Roger Klorese, for letting me
Xuse their Queernet machine to write this guide and test shell code.
X(The machine is running 386/BSD from BSDI.)
X
XWhile writing this guide, I referred often to the Version 7 sh(1) manual
Xpage.  This doesn't discuss style issues at all, but it is indespensible
Xfor making sure the syntax and terminology is correct.
X
XAlso, I looked at nearly ten introductory UNIX books which discuss shell
Xprogramming.  Many of these are old, but some are quite current.  Most do
Xnot have much if any discussion of style issues, but all contain examples
Xof shell code.  I was surprised to find that many samples suffered from
Xpoor coding style, from my point of view.
X
XHowever, one of the earliest of these books uses a good coding style which
Xdiffers in some small ways from my own, namely "The UNIX Programming
XEnvironment" by Brian Kernighan and Rob Pike.  It does not focus much on
Xstyle issues, but the examples are good.  This is a fine book which I would
Xrecommend for the other topics it covers as well.
X
XLast, an OS research tool is available to determine and report many of
Xthese differences among UNIX variants.  While your code still has to work
Xaround the differences, at least the toolset will report them for you so
Xyou don't have to code the research into every single script which cares
Xabout them.  It is part of the System Administration Environment Suite,
Xand I released an alpha version of this suite in June 1994 (I was
Xrca@ingres.com at the time).  The alpha release is available via anonymous
XFTP at sites which archive alt.sources and comp.sources.unix, including:
X
Xftp.uu.net:/usenet/comp.sources.unix/volume28/saenv_alldisks/part0[1-6].Z
Xgatekeeper.dec.com:/pub/usenet/comp.sources.unix/volume28/saenv_alldisks/part0[1-6]
X
XMore current releases of this suite and other places to find it can be
Xdiscovered easily if you have archie - just issue an "archie saenv" command.
X
XEnjoy!
X
X  __    __     __ 	Bob Arnold
X|/  \  /  \   /  \|
X|     /      /    |
X|     \___/  \___/|	Email: rca@queernet.org
X
SHAR_EOF
chmod 0644 doc/sh.style.guide ||
echo 'restore of doc/sh.style.guide failed'
Wc_c="`wc -c < 'doc/sh.style.guide'`"
test 45321 -eq "$Wc_c" ||
	echo 'doc/sh.style.guide: original size 45321, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= firstinst-saenv ==============
if test -f 'firstinst-saenv' -a X"$1" != X"-c"; then
	echo 'x - skipping firstinst-saenv (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting firstinst-saenv (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'firstinst-saenv' &&
X:
X# firstinst-saenv - installs sysadmin environment on sysadmin master host
X
X# Edit ./dist/sahead before you run this script.
X
XDOSETUP=true ; export DOSETUP
X
X# if we're not in the right directory
Xif test ! -f ./dist/sahead ; then
X	echo "$pr: Please run this script from the sysadmin directory"
X	echo "$pr: where you extracted the 'seanv_alld' shar archive."
X	exit 1
X# else check to make sure that there are no blanks in sahead
Xelif egrep "_____" ./dist/sahead > /dev/null ; then
X	echo "$pr: You haven't filled in all the blanks in './dist/sahead'."
X	echo "$pr: Please do that first, and then run this script again."
X	exit 1
Xfi
X
X# source the customized sahead
X. ./dist/sahead
X
X# check usage
Xhost=`(hostname) 2> /dev/null || uname -n`
Xif test "$host" != "$SAHOST" ; then
X	echo "$pr: This script should be run ONLY on your master sysadmin host."
X	echo "$pr: If you want '$host' to be your master sysadmin host, then"
X	echo "$pr: define '$host' as the 'SAHOST' in 'sahead', copy this"
X	echo "$pr: source tree over to '$host', and try again."
X	exit 1
Xfi
X
X# build empty directories that the shar won't extract for us
Xtest -d data || mkdir data
Xmkdir     data/passwd data/saenv dist/stamp
Xchmod 777 data/passwd data/saenv dist/stamp
X
Xecho "$pr: Setting umask to 2"
Xumask 2
X
Xecho "$pr: Creating directory $DTGTBIN"
Xif test ! -d $DTGTBIN ; then
X	mkdir $DTGT $DTGTBIN
Xfi
X
X# copy files into place
Xecho "$pr: Copying files and scripts into place"
X# these are for $SAHOST
Xcd ./dist/bin    ; cp * $DTGTBIN
Xcd ..            ; cp crontab.dist dlist sahead saenv.setup $DTGT
X# these are for distribution via upd-dist from $SAHOST to other hosts
Xcd ../src/backup ; cp bkp.media bkp.opers bkp.site ../../dist
X
X# go back home
Xcd ../..
X
X# now we can do research on $SAHOST
Xecho "$pr: Doing first time research on $host; this will take a bit"
Xsh ./dist/saenv.setup
X
X# finish up
Xecho "$pr: OK, the 'saenv' toolset has been bootstrapped onto on '$SAHOST'."
Xecho "$pr: Enjoy!"
X
X# like it says, enjoy!
SHAR_EOF
chmod 0755 firstinst-saenv ||
echo 'restore of firstinst-saenv failed'
Wc_c="`wc -c < 'firstinst-saenv'`"
test 1976 -eq "$Wc_c" ||
	echo 'firstinst-saenv: original size 1976, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= lib/rrun.hosts ==============
if test ! -d 'lib'; then
    echo 'x - creating directory lib'
    mkdir 'lib'
fi
if test -f 'lib/rrun.hosts' -a X"$1" != X"-c"; then
	echo 'x - skipping lib/rrun.hosts (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting lib/rrun.hosts (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'lib/rrun.hosts' &&
X# This is $SALIB/rrun.hosts.  It is sourced by $SABIN/rrun.
X#
X# Written by Bob Arnold
X# 
X# Put the appropriate hosts in the appropriate lists, create your own
X# new lists, and reclassify as you see fit.  rrun and rrun.hosts are
X# provided in case you might be able to it.
X#
X# NOTE - classification is a religious topic, and some people a splitters
X# while others are groupers.  Opinions also vary depending upon how many
X# substantially different versions of UNIX you maintain from each of
X# these vendors.  Feel free to develop your own classifications.
X
Xamdahlhosts=""
Xatthosts=""
Xauspexhosts=""
Xbosxhosts=""
Xbullhosts=""
Xbsdihosts=""
Xconvexhosts=""
Xdecmipshosts=""				# Ultrix MIPS
Xdecvaxhosts=""				# Ultrix VAX
Xdecosfhosts=""
Xdechosts="$decmipshosts $decvaxhosts $decosfhosts"	# DEC BSD hosts
Xdghosts=""				# DG/UX
Xdynixhosts=""				# BSD sequents
Xdynixptxhosts=""			# SysV sequents
Xencorehosts=""
Xgouldhosts=""
Xhphosts=""				# HP-UX
Xmipshosts=""
Xiclhosts=""
Xmotorolahosts=""
Xmtxinuhosts=""
Xncrhosts=""
Xpyramidbsdhosts=""			# OSx
Xpyramidsysvhosts=""			# DC/OSx
Xpyramidhosts="$pyramidbsdhosts $pyramidsysvhosts"
Xrshosts=""				# IBM RS/6000s
Xrthosts=""				# IBM RT
Xscohosts=""
Xsgihosts=""
Xsolbournehosts=""
Xstardenthosts=""
Xsun3hosts=""
Xsun3xhosts=""
Xsun4hosts=""
Xsun4chosts=""
Xsun4mhosts=""
Xsun4dhosts=""
Xsunoshosts="$sun3hosts $sun3xhosts $sun4hosts $sun4chosts $sun4mhosts"
Xsunsolarishosts="$sun4dhosts"
Xsolarishosts="$sunsolarishosts"
Xsunhosts="$sunoshosts $solarishosts"
Xtandemhosts=""
Xtihosts=""
Xxenixhosts=""
X
X## build larger lists of machines
X# aixhosts - might want to add $bosxhosts here and delete $rthosts
Xaixhosts="$rshosts $rthosts"	
Xsequenthosts="$dynixhosts $dynixptxhosts"
Xbsdhosts="$auspexhosts $bsdihosts $convexhosts $dechosts $dynixhosts $gouldhosts $pyramidbsdhosts $solbournehosts $sunoshosts"
Xsvr4hosts="$dghosts $iclhosts $ncrhosts $pyramidsysvhosts $solarishosts"
Xsysvhosts="$aixhosts $amdahlhosts $atthosts $bosxhosts $bullhosts $dynixptxhosts $encorehosts $hphosts $mipshosts $motorolahosts $sgihosts $stardenthosts $tandemhosts $tihosts $xenixhosts"
Xunixhosts="$bsdhosts $svr4hosts $sysvhosts"
X# where do you maintain alldisks?
Xalldiskshosts=""
SHAR_EOF
chmod 0664 lib/rrun.hosts ||
echo 'restore of lib/rrun.hosts failed'
Wc_c="`wc -c < 'lib/rrun.hosts'`"
test 2176 -eq "$Wc_c" ||
	echo 'lib/rrun.hosts: original size 2176, current size' "$Wc_c"
rm -f _shar_wnt_.tmp
fi
# ============= src/backup/doc/alld.features ==============
if test ! -d 'src'; then
    echo 'x - creating directory src'
    mkdir 'src'
fi
if test ! -d 'src/backup'; then
    echo 'x - creating directory src/backup'
    mkdir 'src/backup'
fi
if test ! -d 'src/backup/doc'; then
    echo 'x - creating directory src/backup/doc'
    mkdir 'src/backup/doc'
fi
if test -f 'src/backup/doc/alld.features' -a X"$1" != X"-c"; then
	echo 'x - skipping src/backup/doc/alld.features (File already exists)'
	rm -f _shar_wnt_.tmp
else
> _shar_wnt_.tmp
echo 'x - extracting src/backup/doc/alld.features (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'src/backup/doc/alld.features' &&
X
SHAR_EOF
true || echo 'restore of src/backup/doc/alld.features failed'
fi
echo 'End of saenv5.01 part 3'
echo 'File src/backup/doc/alld.features is continued in part 4'
echo 4 > _shar_seq_.tmp
exit 0
