Newsgroups: comp.sources.unix
From: jeff@forys.cranbury.nj.us (Jeff Forys)
Subject: v28i183: skill - signal or reprioritize specified processes, V3.6, Patch01
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: jeff@forys.cranbury.nj.us (Jeff Forys)
Posting-Number: Volume 28, Issue 183
Archive-Name: skill/patch01

Skill Version 3.6, Patch #1 [affects HP-UX w/ANSI C compiler]

If you compile skill on an HP using their ANSI C compiler, you will run
into the following problem(s):

> cc: "getproc.c", line 208: warning 561:
> 	Block scope function declaration for "GetWord" may not be "static".
> cc: "getproc.c", line 292: error 1718: Types are not assignment-compatible.
> cc: "getproc.c", line 292: warning 563: Argument #2 is not the correct type.
> cc: "getproc.c", line 359: warning 562:
> 	Redeclaration for "GetWord"; "static" used.
> *** Error code 1

The "regular" C compiler does not complain, of course.  At any rate,
here is a patch to "machdep/hpux-91.c" (and "main.c" for versioning)
to make both HP-UX C compilers happy; thanks to Richard Allen over
in Iceland for reporting this.

To apply this patch, "cd" to your skill source directory and run:

	patch -p0 <Patch-1

Jeff
===============================================================================
*** /tmp/T0a005si	Mon Jul 18 16:57:16 1994
--- main.c	Mon Jul 18 16:54:43 1994
***************
*** 1,11 ****
  #ifndef lint
! static char rcsid[] = "$Header: main.c,v 1.12 1994/07/13 20:31:16 forys Exp $";
  /*
   * SCCS version release number is manually updated (for what(1), etc).
!  * If you use SCCS, please use last extension for version (e.g. "3.6.1.1").
   */
  static char sccsid[] = 
! 	"@(#)skill	3.6.1.0 (jeff@forys.cranbury.nj.us) 7/15/94";
  #endif
  
  /*
--- 1,11 ----
  #ifndef lint
! static char rcsid[] = "$Header: main.c,v 1.13 1994/07/18 20:54:23 forys Exp $";
  /*
   * SCCS version release number is manually updated (for what(1), etc).
!  * If you use SCCS, please use last extension for version (e.g. "3.6.2.1").
   */
  static char sccsid[] = 
! 	"@(#)skill	3.6.2.0 (jeff@forys.cranbury.nj.us) 7/18/94";
  #endif
  
  /*
***************
*** 12,18 ****
  **  skill - send signals to processes by tty, user name, command or proc id.
  **  snice - change process priorities by tty, user name, command or proc id.
  **
! **  Version 3.6
  **
  **  This program may be freely redistributed for noncommercial purposes.
  **  This entire comment MUST remain intact.
--- 12,18 ----
  **  skill - send signals to processes by tty, user name, command or proc id.
  **  snice - change process priorities by tty, user name, command or proc id.
  **
! **  Version 3.6.2
  **
  **  This program may be freely redistributed for noncommercial purposes.
  **  This entire comment MUST remain intact.
*** /tmp/T0a005uN	Mon Jul 18 17:00:39 1994
--- machdep/hpux-91.c	Mon Jul 18 12:18:29 1994
***************
*** 1,5 ****
  #ifndef lint
! static char rcsid[] = "$Header: hpux-91.c,v 1.7 1994/06/26 04:32:33 forys Exp $";
  #endif
  
  /*
--- 1,5 ----
  #ifndef lint
! static char rcsid[] = "$Header: hpux-91.c,v 1.8 1994/07/18 16:17:47 forys Exp $";
  #endif
  
  /*
***************
*** 195,201 ****
--- 195,225 ----
  
  extern	off_t lseek();
  
+ #define	SKRD(file, src, dst, size)			\
+ 	(lseek(file, (off_t)(src), L_SET) == -1) ||	\
+ 	(read(file, (char *)(dst), (size)) != (size))
  /*
+  * GetWord(loc)
+  *
+  * Read in word at `loc' from kernel virtual memory.
+  * If an error occurs, call exit(2) with EX_SERR.
+  */
+ static int
+ GetWord(loc)
+ 	off_t loc;
+ {
+ 	int val;
+ 
+ 	if (SKRD(kmem, loc, &val, sizeof(val))) {
+ 		fprintf(stderr, "%s: can't read word at %lx in %s\n",
+ 		        ProgName, (u_long)loc, kmemf);
+ 		exit(EX_SERR);
+ 	}
+ 	return (val);
+ }
+ #undef	SKRD
+ 
+ /*
   * GetProc()
   *
   * Fill in and return a `struct ProcInfo' with information about the
***************
*** 205,214 ****
  GetProc()
  {
  	extern char *SysErr();
- 	static int GetWord();
  	static struct proc procs[NPROCS], *procsp;
  	static struct ProcInfo procinfo;
! 	static  struct  pst_status apst;
  	register struct proc *aproc;
  	static int thisproc = 0;
  
--- 229,238 ----
  GetProc()
  {
  	extern char *SysErr();
  	static struct proc procs[NPROCS], *procsp;
  	static struct ProcInfo procinfo;
! 	static struct pst_status apst;
! 	union pstun apstun;
  	register struct proc *aproc;
  	static int thisproc = 0;
  
***************
*** 289,295 ****
  		aproc = procsp++;
  		thisproc--;
  		if (aproc->p_stat != 0) {
! 			if (pstat(PSTAT_PROC, &apst, sizeof(apst), 0, 
  				  aproc->p_pid) != 1)
  			    aproc->p_stat = 0;
  			/*
--- 313,320 ----
  		aproc = procsp++;
  		thisproc--;
  		if (aproc->p_stat != 0) {
! 			apstun.pst_status = &apst;
! 			if (pstat(PSTAT_PROC, apstun, sizeof(apst), 0, 
  				  aproc->p_pid) != 1)
  			    aproc->p_stat = 0;
  			/*
***************
*** 344,371 ****
  	}
  
  	return(&procinfo);
- }
- 
- #define	SKRD(file, src, dst, size)			\
- 	(lseek(file, (off_t)(src), L_SET) == -1) ||	\
- 	(read(file, (char *)(dst), (size)) != (size))
- 
- /*
-  * GetWord(loc)
-  *
-  * Read in word at `loc' from kernel virtual memory.
-  * If an error occurs, call exit(2) with EX_SERR.
-  */
- static int
- GetWord(loc)
- 	off_t loc;
- {
- 	int val;
- 
- 	if (SKRD(kmem, loc, &val, sizeof(val))) {
- 		fprintf(stderr, "%s: can't read word at %lx in %s\n",
- 		        ProgName, (u_long)loc, kmemf);
- 		exit(EX_SERR);
- 	}
- 	return (val);
  }
--- 369,372 ----
