Newsgroups: comp.sources.unix
From: denio@scubed.scubed.com (Dennis O'Neill)
Subject: v28i033: fullpath - reformat "ls -lR" output to a more useful form, V1.0.1, Part01/01
Message-id: <1.768719227.27251@gw.home.vix.com>
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: denio@scubed.scubed.com (Dennis O'Neill)
Posting-Number: Volume 28, Issue 33
Archive-Name: fullpath/part01

"fullpath" is used to reformat the output of "ls -lR" so that each filename
has a path prepended.  That is, it takes output of "ls -lR" that looks like

    /home/denio/fullpath-1.0:
    -rw-r--r--  1 denio        5945 Jun 23 11:08 fullpath.c

and reformats it as

    1992/06/23         5945  /home/denio/fullpath-1.0/fullpath.c

I originally wrote "fullpath" to help me look for particular files in the
"ls-lR" listings from the UUNET archive.

This program was written on a Sun SPARCstation under SunOS 4.1.2.
Consequently, the program expects the SunOS "ls -lR" format as input.
I don't know if it will work on other systems.

Please address comments to Dennis O'Neill (denio@s3reston.scubed.com).



+---------------+
| Usage example |
+---------------+

Usage is:

    [prompt] ls -lR | fullpath > ls-lR.fullpath

For example, suppose one has the Uunet ls-lR file and wishes to discover
the various versions of the "elm" mail handler that are available.  One
would execute the command sequence

    [prompt] fullpath < ls-lR | grep elm | sort

and get the following output lines (among others):

    1986/11/30  27208  usenet/comp.sources.unix/volume6/elm/part01.Z
    1986/11/30  25203  usenet/comp.sources.unix/volume7/elm_update/part1.Z
    1987/03/08  28320  usenet/comp.sources.unix/volume9/elm2/part01.Z
    1989/04/12  24552  usenet/comp.sources.unix/volume18/elm2.2/part01.Z
    1990/06/07  25355  usenet/comp.sources.unix/volume22/elm2.3/part01.Z
    1991/03/05  13212  usenet/comp.sources.unix/volume24/elm2.3patches/part01.Z

The user can see that the most recent version is elm2.3, and that it can
be recovered from usenet/comp.sources.unix/volume22.  One can also see that
a set of patches for elm2.3 can be found in
usenet/comp.sources.unix/volume24/elm2.3.patches.

Dennis O'Neill (denio@s3reston.scubed.com)

===== 8< ===== cut here ======================================================
#! /bin/sh
# This is a shell archive, meaning:
# 1. Remove everything above the #! /bin/sh line.
# 2. Save the resulting text in a file.
# 3. Execute the file with /bin/sh (not csh) to create the files:
#	fullpath-1.0.1
# This archive created: Thu Sep  3 17:19:26 1992
export PATH; PATH=/bin:$PATH
if test ! -d 'fullpath-1.0.1'
then
	mkdir 'fullpath-1.0.1'
fi
cd 'fullpath-1.0.1'
if test -f 'Readme'
then
	echo shar: will not over-write existing file "'Readme'"
else
cat << \SHAR_EOF > 'Readme'
"fullpath" is used to reformat the output of "ls -lR" so that each filename
has a path prepended.  That is, it takes output of "ls -lR" that looks like

    /home/denio/fullpath-1.0:
    -rw-r--r--  1 denio        5945 Jun 23 11:08 fullpath.c

and reformats it as

    1992/06/23         5945  /home/denio/fullpath-1.0/fullpath.c

I originally wrote "fullpath" to help me look for particular files in the
"ls-lR" listings from the UUNET archive.

This program was written on a Sun SPARCstation under SunOS 4.1.2.
Consequently, the program expects the SunOS "ls -lR" format as input.
I don't know if it will work on other systems.

Please address comments to Dennis O'Neill (denio@s3reston.scubed.com).



+---------------+
| Usage example |
+---------------+

Usage is:

    [prompt] ls -lR | fullpath > ls-lR.fullpath

For example, suppose one has the Uunet ls-lR file and wishes to discover
the various versions of the "elm" mail handler that are available.  One
would execute the command sequence

    [prompt] fullpath < ls-lR | grep elm | sort

and get the following output lines (among others):

    1986/11/30  27208  usenet/comp.sources.unix/volume6/elm/part01.Z
    1986/11/30  25203  usenet/comp.sources.unix/volume7/elm_update/part1.Z
    1987/03/08  28320  usenet/comp.sources.unix/volume9/elm2/part01.Z
    1989/04/12  24552  usenet/comp.sources.unix/volume18/elm2.2/part01.Z
    1990/06/07  25355  usenet/comp.sources.unix/volume22/elm2.3/part01.Z
    1991/03/05  13212  usenet/comp.sources.unix/volume24/elm2.3patches/part01.Z

The user can see that the most recent version is elm2.3, and that it can
be recovered from usenet/comp.sources.unix/volume22.  One can also see that
a set of patches for elm2.3 can be found in
usenet/comp.sources.unix/volume24/elm2.3.patches.



+---------------------+
| Building "fullpath" |
+---------------------+

In "Makefile", modify the following macros to suit your needs:
  o  BIN_DESTINATION is directory into which the executable is to be copied
  o  MAN_DESTINATION is directory into which the manual page is to be copied
  o  MAN_SUFFIX is the suffix to apply to the manual page (e.g., l [el])
  o  CC is your C compiler

"make" or "make all" builds "fullpath".

"make install" installs "fullpath" and "fullpath.man" in designated places.

"make clean" cleans the source directory.

"make uninstall" removes "fullpath" and "fullpath.man" from the designated
places.
SHAR_EOF
fi # end of overwriting check
if test -f 'fullpath.man'
then
	echo shar: will not over-write existing file "'fullpath.man'"
else
cat << \SHAR_EOF > 'fullpath.man'
.\" ----- Title for manual page -----------------------------------------------
.TH FULLPATH L "23 June 1992"
.\"
.\" ----- Name of routine, short description ----------------------------------
.SH NAME
fullpath \- reorder output of "ls -lR" to prepend paths to filenames
.\"
.\" ----- Short synopsis, including options and arguments ---------------------
.SH SYNOPSIS
.nf
ls -lR | \fBfullpath\fR 

.br
ls -lR > ls-lR.output
.br
\fBfullpath\fR < ls-lR.output > ls-lR.fullpath

Input is from stdin; output is to stdout.
.fi
.\"
.\" ----- Brief narrative description of what the command does ----------------
.SH DESCRIPTION
\fBfullpath\fR accepts as input the output of the UNIX command \fBls -lR\fR,
reformats it into three columns containing file creation date, size of
file, and path to the filename (relative to the topmost directory contained
in the output of \fBls -lR\fR).  Heads of directories and symbollic links
are not included in the output of \fBfullpath\fR.

One use of this program is to filter the \fBls-lR\fR file containing
an archive site's list of contents.

For example, given an \fBls -lR\fR output (here, \fBls -lFR was used
to emphasize that certain files are executables and others are roots
of directories),

.nf
     [prompt] ls -lFR
     total 35
     -rw-r--r--  1 denio         335 Jun 23 10:41 Makefile
     -rwxr-xr-x  1 denio       24576 Jun 23 10:52 fullpath*
     -rw-r--r--  1 denio        5945 Jun 23 11:08 fullpath.c
     -rw-r--r--  1 denio        1265 Jun 23 11:06 fullpath.man
     drwxr-xr-x  2 denio         512 Jun 23 09:09 testdir/
     drwxr-xr-x  2 denio         512 Jun 23 09:09 testdir2/
     
     testdir:
     total 3
     -rw-r--r--  1 denio           6 Jun 23 09:09 hellofile
     -rw-r--r--  1 denio          38 Jun 23 09:09 nonident1
     -rw-r--r--  1 denio          38 Jun 23 09:09 nonident2
     
     testdir2:
     total 1
     -rw-r--r--  1 denio           6 Jun 23 09:09 hellofile
.fi

\fBfullpath\fR reformats the output to

.nf
     [prompt] ls -lFR | fullpath
     1992/06/23          335  Makefile
     1992/06/23        24576  fullpath [executable]
     1992/06/23         5945  fullpath.c
     1992/06/23         1265  fullpath.man
     1992/06/23            6  testdir/hellofile
     1992/06/23           38  testdir/nonident1
     1992/06/23           38  testdir/nonident2
     1992/06/23            6  testdir2/hellofile
.fi

This program was written on a Sun SPARCstation under SunOS 4.1.2.
Consequently, the program expects the SunOS \fBls -lR\fR format as input.
.\"
.\" ----- Other relevant commands, files, and manuals -------------------------
.SH "SEE ALSO"
\fBls (1)\fR
.\"
.\" ----- Known deficiencies in the command -----------------------------------
.\" .SH BUGS
.\"
.\" ----- Author --------------------------------------------------------------
.SH AUTHOR
Dennis O'Neill
SHAR_EOF
fi # end of overwriting check
if test -f 'Makefile'
then
	echo shar: will not over-write existing file "'Makefile'"
else
cat << \SHAR_EOF > 'Makefile'
#=============================================================================#
# Makefile for:  fullpath                                                     #
#=============================================================================#

# Give values to the following:
# BIN_DESTINATION is directory into which the executable is to be copied
# MAN_DESTINATION is directory into which the manual page is to be copied
# MAN_SUFFIX is the suffix to apply to the manual page (e.g., l [el])
# CC is your C compiler

BIN_DESTINATION = /usr/local/bin
MAN_DESTINATION = /usr/local/manl
MAN_SUFFIX      = l
CC              = gcc

#==== end of user-alterable section ===========================================

OBJECTS = fullpath.o

CFLAGS     = -O

all: fullpath

fullpath: $(OBJECTS)
	$(CC) -o $@ $(OBJECTS) $(CFLAGS)

install:
	cp fullpath $(BIN_DESTINATION)
	cp fullpath.man $(MAN_DESTINATION)/fullpath.$(MAN_SUFFIX)

uninstall:
	rm $(BIN_DESTINATION)/fullpath
	rm $(MAN_DESTINATION)/fullpath.$(MAN_SUFFIX)

clean: 
	rm *.o fullpath
SHAR_EOF
fi # end of overwriting check
if test -f 'fullpath.c'
then
	echo shar: will not over-write existing file "'fullpath.c'"
else
cat << \SHAR_EOF > 'fullpath.c'
#include <stdio.h>								/* for i/o operations */
#include <string.h>								/* for string functions */
#include <time.h>								/* for time functions */
#include <limits.h>								/* for max path length */
#include <stdlib.h>								/* for ascii/integer conv. */

#define MAXPATHLEN _POSIX_PATH_MAX				/* max path length */
#define MAXLEN 256								/* max line length */

static char release_number[] =
    "@(#)RELEASE 1.0.1 Thu Jun 25 16:38:26 EDT 1992"; /* chgd MAXLEN 80->256 */
/*
    "@(#)RELEASE 1.0 Tue Jun 23 11:07:26 EDT 1992";
*/

main ()
{
	char line[MAXLEN + 1];						/* input line */
	char key[MAXLEN + 1];						/* for finding "total" lines */
	char dirname[MAXPATHLEN + 1];				/* directory name */
	char permissions[MAXLEN];					/* ls -lR permissions field */
	char owner[MAXLEN];							/* ls -lR owner field */
	char size[MAXLEN];							/* ls -lR size field */
	char month[MAXLEN];							/* ls -lR month field */
	char day[MAXLEN];							/* ls -lR day field */
	char year[MAXLEN];							/* ls -lR year field */
	char filename[MAXLEN];						/* file name */
	char outline[MAXLEN];						/* line for output */
	int  length;								/* result of "strlen" */
	int i;										/* counter */
	time_t tnow;								/* time */
	struct tm *tmnow;							/* local time */
	int month_num;								/* file month as number */
	int day_num;								/* file day as number */
	char executable[12 + 1];					/* executable marking */

	/* initial directory name is "." */
	strcpy (dirname, ".");

/*                 +---------------------------------------+                 */
/*-----------------|  read and process each "ls -lR" line  |-----------------*/
/*                 +---------------------------------------+                 */

	while (gets (line) != (char *) NULL)
	{
		/* throw away "total" lines */
		sscanf (line, "%s", key);
		if (strcmp (key, "total") == 0)
		{
			continue;
		}

/*                 +---------------------------------------+                 */
/*-----------------|        recover directory name         |-----------------*/
/*                 +---------------------------------------+                 */

		/* blank line means the next line is the name of a new directory */
		/* so recover the directory name */
		if (strlen (line) == 0)
		{
			/* some ls-lRs contain several blank lines between sections. */
			/* allow for that */
			while (strlen (line) == 0) gets (line);

			/* strip the ":" from the end of the directory name */
			for (i = strlen (line); i >= 0; i--)
			{
				if (line[i] == ':')
				{
					line[i] = 0;
					break;
				}
			}

			strcpy (dirname, line);
		}

/*                 +---------------------------------------+                 */
/*-----------------|   process ordinary "ls -lR" lines     |-----------------*/
/*                 +---------------------------------------+                 */

		/* other lines are filenames */
		else
		{
			/* parse the "ls -lR" line */
			sscanf (line, "%s %*s %s %s %s %s %s %s",
				permissions, owner, size, month, day, year, filename);

			/* ignore directories, symbollic links */
			if ((permissions[0] == 'd') ||
				(permissions[0] == 'l'))
			{
				continue;
			}

/*                 +---------------------------------------+                 */
/*-----------------|        process filename lines         |-----------------*/
/*                 +---------------------------------------+                 */

			else /* line is a filename */
			{
				/* convert file's month string to a number */
				if      (strcmp (month, "Jan") == 0) strcpy (month, "01");
				else if (strcmp (month, "Feb") == 0) strcpy (month, "02");
				else if (strcmp (month, "Mar") == 0) strcpy (month, "03");
				else if (strcmp (month, "Apr") == 0) strcpy (month, "04");
				else if (strcmp (month, "May") == 0) strcpy (month, "05");
				else if (strcmp (month, "Jun") == 0) strcpy (month, "06");
				else if (strcmp (month, "Jul") == 0) strcpy (month, "07");
				else if (strcmp (month, "Aug") == 0) strcpy (month, "08");
				else if (strcmp (month, "Sep") == 0) strcpy (month, "09");
				else if (strcmp (month, "Oct") == 0) strcpy (month, "10");
				else if (strcmp (month, "Nov") == 0) strcpy (month, "11");
				else if (strcmp (month, "Dec") == 0) strcpy (month, "12");

				/* ensure that the day has two digits */
				day_num = atoi (day);
				sprintf (day, "%02d", day_num);

				/* check the file's supposed year; if the "year" contains *
				/* a colon, the file was last modified in the last six months */
				/* and needs to be assigned to a year */
				if (strchr (year, ':') != NULL)
				{
					/* convert the month to a number */
					month_num = atoi (month);
					
					/* get today's date and current time */
					time (&tnow);
					tmnow = localtime (&tnow);

					/* if month is greater than current month, */
					/* file is from last year */
					/*****************************************/
					/** only good until turn of the century **/
					/*****************************************/
					if ((tmnow->tm_mon + 1) > month_num)
					{
						sprintf (year, "19%d", tmnow->tm_year - 1);
					}

					/* if month is the same or month is less, it's this year */
					else
					{
						sprintf (year, "19%d", tmnow->tm_year);
					}
				}

				/* mark executables */
				if ((permissions[3] == 'x') ||
					(permissions[6] == 'x') ||
					(permissions[9] == 'x'))
				{
					sprintf (executable, "[executable]");

					/* executables may have a * appended; remove if present */
					length = strlen (filename);
					if (filename[length - 1] == '*')
					{
						filename[length - 1] = 0;
					}
				}

				else
				{
					sprintf (executable, "");
				}

/*                 +---------------------------------------+                 */
/*-----------------|           print the result            |-----------------*/
/*                 +---------------------------------------+                 */

				if (strcmp (dirname, ".") == 0)
				{
					printf ("%4s/%2s/%2s   %10s  %s %s\n",
						year, month, day, size, filename, executable);
				}

				else
				{
					printf ("%4s/%2s/%2s   %10s  %s/%s %s\n",
						year, month, day, size, dirname, filename, executable);
				}
			}
		}
	}

/*                 +---------------------------------------+                 */
/*-----------------|                all done               |-----------------*/
/*                 +---------------------------------------+                 */

	return (0);
}
SHAR_EOF
fi # end of overwriting check
cd ..
#	End of shell archive
exit 0
