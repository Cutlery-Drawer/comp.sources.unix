Newsgroups: comp.sources.unix
From: pefv700@chpc.utexas.edu (Christopher Phillips)
Subject: v27i208: leak - quick and dirty code to find memory leaks, Patch02
Sender: unix-sources-moderator@gw.home.vix.com
Approved: vixie@gw.home.vix.com

Submitted-By: pefv700@chpc.utexas.edu (Christopher Phillips)
Posting-Number: Volume 27, Issue 208
Archive-Name: leak/patch02

Submitted-By: pefv700@chpc.utexas.edu (Christopher Phillips)
Archive-Name: leak/patch02
Patch-To: v27i086: leak - quick and dirty code to find memory leaks

This is patch02 for leak.  It includes several changes:

- The makefile no longer requires . to be in your PATH.
- %p doesn't take the 0 flag.
- Two unused variables have been deleted.  Thanks to Jim Meyering
  (meyering@idefix.comco.com) for these tips.
- GNU's dbm library is now supported correctly.  Thanks to Frank Volf
  (volf@eb.ele.tue.nl) and Wido Kruijtzer for noting that gdbm can
  only handle one database at a time in ndbm compatibility mode.
- strdup support has been added at the request of Lance Gatrell
  (gatrell@den.mmc.com).
- There is now a patchlevel.h.

Just cd to the source directory and type "patch -p0 < THIS_FILE".

Chris
pefv700@utpe.pe.utexas.edu
--------------------
#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of shell archive."
# Contents:  Patch02
# Wrapped by pefv700@tidewater.pe.utexas.edu on Mon Mar 21 17:34:35 1994
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'Patch02' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'Patch02'\"
else
echo shar: Extracting \"'Patch02'\" \(6356 characters\)
sed "s/^X//" >'Patch02' <<'END_OF_FILE'
X*** ../leak/Makefile	Mon Mar 21 17:27:30 1994
X--- Makefile	Mon Jan 10 10:49:40 1994
X***************
X*** 10,18 ****
X  
X  test: leaktest leakdump
X  	@echo Running leaktest
X! 	@leaktest
X  	@echo Running leakdump
X! 	@leakdump
X  
X  clean:
X! 	-rm -f *.o leaktest leakdump *.dir *.pag
X--- 10,18 ----
X  
X  test: leaktest leakdump
X  	@echo Running leaktest
X! 	@./leaktest
X  	@echo Running leakdump
X! 	@./leakdump
X  
X  clean:
X! 	-rm -f *.o leaktest leakdump filedbm* memdbm*
X*** ../leak/README	Mon Mar 21 17:27:30 1994
X--- README	Mon Jan 10 10:49:40 1994
X***************
X*** 5,10 ****
X--- 5,12 ----
X  ``make'' to compile leak and run a test program.  To install leak,
X  just put leak.h and leak.o in appropriate places.
X  
X+ If you use gdbm, you should use -DUSE_GDBM.
X+ 
X  Here's what I get when making leak:
X  
X  % make
X*** ../leak/leak.c	Mon Mar 21 17:27:31 1994
X--- leak.c	Mon Jan 10 10:57:15 1994
X***************
X*** 22,28 ****
X--- 22,42 ----
X  #include <string.h>
X  #include <unistd.h>
X  #include <fcntl.h>
X+ #ifdef USE_GDBM
X+ #include <gdbm.h>
X+ #define dbm_delete			gdbm_delete
X+ #define dbm_fetch			gdbm_fetch
X+ #define dbm_firstkey			gdbm_firstkey
X+ #define dbm_nextkey(dbmfile)		gdbm_nextkey(dbmfile, key)
X+ #define dbm_open(file, perm, mode)	gdbm_open(file, 0, perm, mode, NULL)
X+ #define dbm_store			gdbm_store
X+ #define DBM_INSERT			GDBM_INSERT
X+ #define DBM_REPLACE			GDBM_REPLACE
X+ typedef GDBM_FILE	dbmfile_t;
X+ #else
X  #include <ndbm.h>
X+ typedef DBM		*dbmfile_t;
X+ #endif
X  #include "leak.h"
X  
X  #undef malloc
X***************
X*** 29,34 ****
X--- 43,49 ----
X  #undef realloc
X  #undef free
X  #undef calloc
X+ #undef strdup
X  
X  #define FILE_DBMFILENAME	"filedbm"
X  #define MEMORY_DBMFILENAME	"memdbm"
X***************
X*** 37,46 ****
X  
X  typedef char	*DPTR;
X  
X! static DBM	*filedbm = NULL;
X! static DBM	*memdbm = NULL;
X! static int	nextfile = -1;
X! static int	dbms_zapped = 0;
X  
X  struct memdata {
X  	size_t	size;
X--- 52,61 ----
X  
X  typedef char	*DPTR;
X  
X! static dbmfile_t	filedbm = NULL;
X! static dbmfile_t	memdbm = NULL;
X! static int		nextfile = -1;
X! static int		dbms_zapped = 0;
X  
X  struct memdata {
X  	size_t	size;
X***************
X*** 49,55 ****
X  };
X  
X  static void
X! opendbmfile(DBM **dbmp, /*const*/ char *file)
X  {
X  	if (*dbmp == NULL && (*dbmp = dbm_open(file, O_RDWR | O_CREAT,
X  	  S_IRUSR | S_IWUSR)) == NULL) {
X--- 64,70 ----
X  };
X  
X  static void
X! opendbmfile(dbmfile_t *dbmp, /*const*/ char *file)
X  {
X  	if (*dbmp == NULL && (*dbmp = dbm_open(file, O_RDWR | O_CREAT,
X  	  S_IRUSR | S_IWUSR)) == NULL) {
X***************
X*** 108,115 ****
X--- 123,134 ----
X  {
X  	if (filedbm)
X  		(void)dbm_close(filedbm);
X+ #ifdef USE_GDBM
X+ 	(void)remove(FILE_DBMFILENAME);
X+ #else
X  	(void)remove(FILE_DBMFILENAME ".dir");
X  	(void)remove(FILE_DBMFILENAME ".pag");
X+ #endif
X  	filedbm = NULL;
X  }
X  
X***************
X*** 118,125 ****
X--- 137,148 ----
X  {
X  	if (memdbm)
X  		(void)dbm_close(memdbm);
X+ #ifdef USE_GDBM
X+ 	(void)remove(MEMORY_DBMFILENAME);
X+ #else
X  	(void)remove(MEMORY_DBMFILENAME ".dir");
X  	(void)remove(MEMORY_DBMFILENAME ".pag");
X+ #endif
X  	memdbm = NULL;
X  }
X  
X***************
X*** 158,165 ****
X  void
X  leak_delete(const void *p, const char *file, int line)
X  {
X! 	struct memdata	md;
X! 	datum		key, data;
X  
X  	if (!dbms_zapped) {
X  		leak_clear();
X--- 181,187 ----
X  void
X  leak_delete(const void *p, const char *file, int line)
X  {
X! 	datum	key;
X  
X  	if (!dbms_zapped) {
X  		leak_clear();
X***************
X*** 215,221 ****
X  		md = *(struct memdata *)data.dptr;
X  		addr = *(void **)key.dptr;
X  #ifndef sun
X! 		printf("%08p\t%d\t%d\t%s\n", addr,
X  #else
X  		printf("%08x\t%d\t%d\t%s\n", (int)addr,
X  #endif
X--- 237,243 ----
X  		md = *(struct memdata *)data.dptr;
X  		addr = *(void **)key.dptr;
X  #ifndef sun
X! 		printf("%8p\t%d\t%d\t%s\n", addr,
X  #else
X  		printf("%08x\t%d\t%d\t%s\n", (int)addr,
X  #endif
X***************
X*** 274,279 ****
X--- 296,320 ----
X  
X  	if (leak_logging && ptr)
X  		leak_insert(ptr, s * t, file, line, DBM_INSERT);
X+ 
X+ 	return ptr;
X+ }
X+ 
X+ char *
X+ leak_strdup(const char *s, const char *file, int line)
X+ {
X+ 	size_t	size = strlen(s) + 1;
X+ #ifdef HAS_STRDUP
X+ 	char	*ptr = strdup(s);
X+ #else
X+ 	char	*ptr = malloc(size);
X+ 
X+ 	if (ptr)
X+ 		strcpy(ptr, s);
X+ #endif
X+ 
X+ 	if (leak_logging && ptr)
X+ 		leak_insert(ptr, size, file, line, DBM_INSERT);
X  
X  	return ptr;
X  }
X*** ../leak/leak.h	Mon Mar 21 17:27:31 1994
X--- leak.h	Mon Jan 10 10:52:01 1994
X***************
X*** 28,37 ****
X--- 28,45 ----
X  extern void	*leak_realloc(void *, size_t, const char *, int);
X  extern void	leak_free(void *, const char *, int);
X  extern void	*leak_calloc(size_t, size_t, const char *, int);
X+ extern char	*leak_strdup(const char *, const char *, int);
X  
X+ #undef malloc
X+ #undef realloc
X+ #undef free
X+ #undef calloc
X+ #undef strdup
X+ 
X  #define malloc(s)	leak_malloc(s, __FILE__, __LINE__)
X  #define realloc(p, s)	leak_realloc(p, s, __FILE__, __LINE__)
X  #define free(p)		leak_free(p, __FILE__, __LINE__)
X  #define calloc(s, t)	leak_calloc(s, t, __FILE__, __LINE__)
X+ #define strdup(s)	leak_strdup(s, __FILE__, __LINE__)
X  
X  #endif /* H_LEAK */
X*** ../leak/leaktest.c	Mon Mar 21 17:27:32 1994
X--- leaktest.c	Mon Jan 10 11:00:21 1994
X***************
X*** 1,5 ****
X--- 1,6 ----
X  #include <stdio.h>
X  #include <stdlib.h>
X+ #include <string.h>
X  #include <limits.h>
X  #include "leak.h"
X  
X***************
X*** 22,27 ****
X--- 23,29 ----
X  	p = calloc(40, sizeof(int));
X  	q = realloc(p, 0);
X  	p = malloc(3);
X+ 	q = strdup("Hello world\n");
X  
X  	exit(0);
X  }
X*** /dev/null	Mon Mar 21 16:59:19 1994
X--- patchlevel.h	Mon Jan 10 10:49:40 1994
X***************
X*** 0 ****
X--- 1,19 ----
X+ /*
X+  *                 Author:  Christopher G. Phillips
X+  *              Copyright (C) 1993 All Rights Reserved
X+  *
X+  *                              NOTICE
X+  *
X+  * Permission to use, copy, modify, and distribute this software and
X+  * its documentation for any purpose and without fee is hereby granted
X+  * provided that the above copyright notice appear in all copies and
X+  * that both the copyright notice and this permission notice appear in
X+  * supporting documentation.
X+  *
X+  * The author makes no representations about the suitability of this
X+  * software for any purpose.  This software is provided ``as is''
X+  * without express or implied warranty.
X+  */
X+ 
X+ #define VERSION		1
X+ #define PATCHLEVEL	2
END_OF_FILE
if test 6356 -ne `wc -c <'Patch02'`; then
    echo shar: \"'Patch02'\" unpacked with wrong size!
fi
# end of 'Patch02'
fi
echo shar: End of shell archive.
exit 0
